
Test_Lidar_projet_Torero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006414  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080065f4  080065f4  000075f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066f8  080066f8  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080066f8  080066f8  000076f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006700  08006700  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006700  08006700  00007700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006704  08006704  00007704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006708  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000353c  20000068  08006770  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200035a4  08006770  000085a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f27  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a5  00000000  00000000  0001bfbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0001e968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db2  00000000  00000000  0001faf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6c8  00000000  00000000  000208aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b30  00000000  00000000  0003ff72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8c96  00000000  00000000  00054aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d738  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b4  00000000  00000000  0011d77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  00122b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	080065dc 	.word	0x080065dc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	080065dc 	.word	0x080065dc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <print_buffer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print_buffer(const char * Name, uint8_t *pData, uint16_t Size, int N_lines){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	4613      	mov	r3, r2
 80005be:	80fb      	strh	r3, [r7, #6]
	printf("%s\r\n", Name);
 80005c0:	68f9      	ldr	r1, [r7, #12]
 80005c2:	4819      	ldr	r0, [pc, #100]	@ (8000628 <print_buffer+0x78>)
 80005c4:	f004 ff54 	bl	8005470 <iprintf>
	if(N_lines >= (int) Size){
 80005c8:	88fb      	ldrh	r3, [r7, #6]
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	db13      	blt.n	80005f8 <print_buffer+0x48>
		for(int i = 0; i<Size; i++){
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	e00b      	b.n	80005ee <print_buffer+0x3e>
			printf("%d : %d\r\n", i, pData[i]);
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	68ba      	ldr	r2, [r7, #8]
 80005da:	4413      	add	r3, r2
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	461a      	mov	r2, r3
 80005e0:	6979      	ldr	r1, [r7, #20]
 80005e2:	4812      	ldr	r0, [pc, #72]	@ (800062c <print_buffer+0x7c>)
 80005e4:	f004 ff44 	bl	8005470 <iprintf>
		for(int i = 0; i<Size; i++){
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3301      	adds	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	dbef      	blt.n	80005d6 <print_buffer+0x26>
	else{
		for(int i = 0; i<N_lines; i++){
			printf("%d : %d\r\n", i, pData[i]);
		}
	}
}
 80005f6:	e012      	b.n	800061e <print_buffer+0x6e>
		for(int i = 0; i<N_lines; i++){
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	e00b      	b.n	8000616 <print_buffer+0x66>
			printf("%d : %d\r\n", i, pData[i]);
 80005fe:	693b      	ldr	r3, [r7, #16]
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	4413      	add	r3, r2
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	6939      	ldr	r1, [r7, #16]
 800060a:	4808      	ldr	r0, [pc, #32]	@ (800062c <print_buffer+0x7c>)
 800060c:	f004 ff30 	bl	8005470 <iprintf>
		for(int i = 0; i<N_lines; i++){
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	3301      	adds	r3, #1
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	693a      	ldr	r2, [r7, #16]
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	429a      	cmp	r2, r3
 800061c:	dbef      	blt.n	80005fe <print_buffer+0x4e>
}
 800061e:	bf00      	nop
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	080065f4 	.word	0x080065f4
 800062c:	080065fc 	.word	0x080065fc

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 fe09 	bl	800124a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f846 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 f9c8 	bl	80009d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000640:	f000 f99c 	bl	800097c <MX_DMA_Init>
  MX_TIM4_Init();
 8000644:	f000 f88a 	bl	800075c <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000648:	f000 f94c 	bl	80008e4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800064c:	f000 f8fe 	bl	800084c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("==============START==============\r\n");
 8000650:	4816      	ldr	r0, [pc, #88]	@ (80006ac <main+0x7c>)
 8000652:	f004 ff75 	bl	8005540 <puts>
  LIDAR_Init(&hlidar);
 8000656:	4816      	ldr	r0, [pc, #88]	@ (80006b0 <main+0x80>)
 8000658:	f000 fca6 	bl	8000fa8 <LIDAR_Init>
  printf("Init\r\n");
 800065c:	4815      	ldr	r0, [pc, #84]	@ (80006b4 <main+0x84>)
 800065e:	f004 ff6f 	bl	8005540 <puts>
  HAL_Delay(1000);
 8000662:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000666:	f000 fe61 	bl	800132c <HAL_Delay>
  LIDAR_Get_Health_Status(&hlidar);
 800066a:	4811      	ldr	r0, [pc, #68]	@ (80006b0 <main+0x80>)
 800066c:	f000 fd62 	bl	8001134 <LIDAR_Get_Health_Status>
  HAL_Delay(1000);
 8000670:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000674:	f000 fe5a 	bl	800132c <HAL_Delay>
  print_buffer("Health", hlidar.health_buff, HEALTH_BUFF_SIZE_LIDAR, HEALTH_BUFF_SIZE_LIDAR);
 8000678:	230a      	movs	r3, #10
 800067a:	220a      	movs	r2, #10
 800067c:	490e      	ldr	r1, [pc, #56]	@ (80006b8 <main+0x88>)
 800067e:	480f      	ldr	r0, [pc, #60]	@ (80006bc <main+0x8c>)
 8000680:	f7ff ff96 	bl	80005b0 <print_buffer>
  HAL_Delay(1000);
 8000684:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000688:	f000 fe50 	bl	800132c <HAL_Delay>
  LIDAR_Get_Info(&hlidar);
 800068c:	4808      	ldr	r0, [pc, #32]	@ (80006b0 <main+0x80>)
 800068e:	f000 fc9b 	bl	8000fc8 <LIDAR_Get_Info>
  HAL_Delay(1000);
 8000692:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000696:	f000 fe49 	bl	800132c <HAL_Delay>
  print_buffer("Info", hlidar.info_buff, INFO_BUFF_SIZE_LIDAR, INFO_BUFF_SIZE_LIDAR);
 800069a:	231b      	movs	r3, #27
 800069c:	221b      	movs	r2, #27
 800069e:	4908      	ldr	r1, [pc, #32]	@ (80006c0 <main+0x90>)
 80006a0:	4808      	ldr	r0, [pc, #32]	@ (80006c4 <main+0x94>)
 80006a2:	f7ff ff85 	bl	80005b0 <print_buffer>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a6:	bf00      	nop
 80006a8:	e7fd      	b.n	80006a6 <main+0x76>
 80006aa:	bf00      	nop
 80006ac:	08006608 	.word	0x08006608
 80006b0:	20000258 	.word	0x20000258
 80006b4:	0800662c 	.word	0x0800662c
 80006b8:	20000277 	.word	0x20000277
 80006bc:	08006634 	.word	0x08006634
 80006c0:	2000025c 	.word	0x2000025c
 80006c4:	0800663c 	.word	0x0800663c

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	@ 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0318 	add.w	r3, r7, #24
 80006d2:	2238      	movs	r2, #56	@ 0x38
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f005 f846 	bl	8005768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f001 fb64 	bl	8001db8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006f8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	2303      	movs	r3, #3
 8000700:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000702:	2306      	movs	r3, #6
 8000704:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000706:	2355      	movs	r3, #85	@ 0x55
 8000708:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 0318 	add.w	r3, r7, #24
 800071a:	4618      	mov	r0, r3
 800071c:	f001 fc00 	bl	8001f20 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000726:	f000 f9d7 	bl	8000ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2303      	movs	r3, #3
 8000730:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2104      	movs	r1, #4
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fefe 	bl	8002544 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800074e:	f000 f9c3 	bl	8000ad8 <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3750      	adds	r7, #80	@ 0x50
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08e      	sub	sp, #56	@ 0x38
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000762:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800077c:	463b      	mov	r3, r7
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
 800078a:	615a      	str	r2, [r3, #20]
 800078c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800078e:	4b2d      	ldr	r3, [pc, #180]	@ (8000844 <MX_TIM4_Init+0xe8>)
 8000790:	4a2d      	ldr	r2, [pc, #180]	@ (8000848 <MX_TIM4_Init+0xec>)
 8000792:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000794:	4b2b      	ldr	r3, [pc, #172]	@ (8000844 <MX_TIM4_Init+0xe8>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079a:	4b2a      	ldr	r3, [pc, #168]	@ (8000844 <MX_TIM4_Init+0xe8>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80007a0:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <MX_TIM4_Init+0xe8>)
 80007a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a8:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <MX_TIM4_Init+0xe8>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ae:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <MX_TIM4_Init+0xe8>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007b4:	4823      	ldr	r0, [pc, #140]	@ (8000844 <MX_TIM4_Init+0xe8>)
 80007b6:	f002 fad1 	bl	8002d5c <HAL_TIM_Base_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80007c0:	f000 f98a 	bl	8000ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ce:	4619      	mov	r1, r3
 80007d0:	481c      	ldr	r0, [pc, #112]	@ (8000844 <MX_TIM4_Init+0xe8>)
 80007d2:	f002 fc8f 	bl	80030f4 <HAL_TIM_ConfigClockSource>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80007dc:	f000 f97c 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80007e0:	4818      	ldr	r0, [pc, #96]	@ (8000844 <MX_TIM4_Init+0xe8>)
 80007e2:	f002 fb12 	bl	8002e0a <HAL_TIM_PWM_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80007ec:	f000 f974 	bl	8000ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	4811      	ldr	r0, [pc, #68]	@ (8000844 <MX_TIM4_Init+0xe8>)
 8000800:	f003 f9a0 	bl	8003b44 <HAL_TIMEx_MasterConfigSynchronization>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800080a:	f000 f965 	bl	8000ad8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800080e:	2360      	movs	r3, #96	@ 0x60
 8000810:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800081e:	463b      	mov	r3, r7
 8000820:	220c      	movs	r2, #12
 8000822:	4619      	mov	r1, r3
 8000824:	4807      	ldr	r0, [pc, #28]	@ (8000844 <MX_TIM4_Init+0xe8>)
 8000826:	f002 fb51 	bl	8002ecc <HAL_TIM_PWM_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000830:	f000 f952 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000834:	4803      	ldr	r0, [pc, #12]	@ (8000844 <MX_TIM4_Init+0xe8>)
 8000836:	f000 f999 	bl	8000b6c <HAL_TIM_MspPostInit>

}
 800083a:	bf00      	nop
 800083c:	3738      	adds	r7, #56	@ 0x38
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000084 	.word	0x20000084
 8000848:	40000800 	.word	0x40000800

0800084c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000850:	4b22      	ldr	r3, [pc, #136]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 8000852:	4a23      	ldr	r2, [pc, #140]	@ (80008e0 <MX_USART2_UART_Init+0x94>)
 8000854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000856:	4b21      	ldr	r3, [pc, #132]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b1d      	ldr	r3, [pc, #116]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086a:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000882:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000888:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088e:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000894:	4811      	ldr	r0, [pc, #68]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 8000896:	f003 f9d7 	bl	8003c48 <HAL_UART_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008a0:	f000 f91a 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a4:	2100      	movs	r1, #0
 80008a6:	480d      	ldr	r0, [pc, #52]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 80008a8:	f004 fc55 	bl	8005156 <HAL_UARTEx_SetTxFifoThreshold>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008b2:	f000 f911 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b6:	2100      	movs	r1, #0
 80008b8:	4808      	ldr	r0, [pc, #32]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 80008ba:	f004 fc8a 	bl	80051d2 <HAL_UARTEx_SetRxFifoThreshold>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008c4:	f000 f908 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 80008ca:	f004 fc0b 	bl	80050e4 <HAL_UARTEx_DisableFifoMode>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008d4:	f000 f900 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200000d0 	.word	0x200000d0
 80008e0:	40004400 	.word	0x40004400

080008e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e8:	4b22      	ldr	r3, [pc, #136]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 80008ea:	4a23      	ldr	r2, [pc, #140]	@ (8000978 <MX_USART3_UART_Init+0x94>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 128000;
 80008ee:	4b21      	ldr	r3, [pc, #132]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 80008f0:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 80008f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000902:	4b1c      	ldr	r3, [pc, #112]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b1a      	ldr	r3, [pc, #104]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000920:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000926:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800092c:	4811      	ldr	r0, [pc, #68]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 800092e:	f003 f98b 	bl	8003c48 <HAL_UART_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000938:	f000 f8ce 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093c:	2100      	movs	r1, #0
 800093e:	480d      	ldr	r0, [pc, #52]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 8000940:	f004 fc09 	bl	8005156 <HAL_UARTEx_SetTxFifoThreshold>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800094a:	f000 f8c5 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4808      	ldr	r0, [pc, #32]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 8000952:	f004 fc3e 	bl	80051d2 <HAL_UARTEx_SetRxFifoThreshold>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800095c:	f000 f8bc 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 8000962:	f004 fbbf 	bl	80050e4 <HAL_UARTEx_DisableFifoMode>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800096c:	f000 f8b4 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000164 	.word	0x20000164
 8000978:	40004800 	.word	0x40004800

0800097c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000982:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <MX_DMA_Init+0x50>)
 8000984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000986:	4a11      	ldr	r2, [pc, #68]	@ (80009cc <MX_DMA_Init+0x50>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6493      	str	r3, [r2, #72]	@ 0x48
 800098e:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <MX_DMA_Init+0x50>)
 8000990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_DMA_Init+0x50>)
 800099c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800099e:	4a0b      	ldr	r2, [pc, #44]	@ (80009cc <MX_DMA_Init+0x50>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_DMA_Init+0x50>)
 80009a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	200b      	movs	r0, #11
 80009b8:	f000 fdb5 	bl	8001526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009bc:	200b      	movs	r0, #11
 80009be:	f000 fdcc 	bl	800155a <HAL_NVIC_EnableIRQ>

}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	@ 0x28
 80009d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b39      	ldr	r3, [pc, #228]	@ (8000acc <MX_GPIO_Init+0xfc>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ea:	4a38      	ldr	r2, [pc, #224]	@ (8000acc <MX_GPIO_Init+0xfc>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f2:	4b36      	ldr	r3, [pc, #216]	@ (8000acc <MX_GPIO_Init+0xfc>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fe:	4b33      	ldr	r3, [pc, #204]	@ (8000acc <MX_GPIO_Init+0xfc>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	4a32      	ldr	r2, [pc, #200]	@ (8000acc <MX_GPIO_Init+0xfc>)
 8000a04:	f043 0320 	orr.w	r3, r3, #32
 8000a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a0a:	4b30      	ldr	r3, [pc, #192]	@ (8000acc <MX_GPIO_Init+0xfc>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	f003 0320 	and.w	r3, r3, #32
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b2d      	ldr	r3, [pc, #180]	@ (8000acc <MX_GPIO_Init+0xfc>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8000acc <MX_GPIO_Init+0xfc>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a22:	4b2a      	ldr	r3, [pc, #168]	@ (8000acc <MX_GPIO_Init+0xfc>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b27      	ldr	r3, [pc, #156]	@ (8000acc <MX_GPIO_Init+0xfc>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	4a26      	ldr	r2, [pc, #152]	@ (8000acc <MX_GPIO_Init+0xfc>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3a:	4b24      	ldr	r3, [pc, #144]	@ (8000acc <MX_GPIO_Init+0xfc>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2120      	movs	r1, #32
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a4e:	f001 f99b 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_SET);
 8000a52:	2201      	movs	r2, #1
 8000a54:	2104      	movs	r1, #4
 8000a56:	481e      	ldr	r0, [pc, #120]	@ (8000ad0 <MX_GPIO_Init+0x100>)
 8000a58:	f001 f996 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEV_EN_LIDAR_GPIO_Port, DEV_EN_LIDAR_Pin, GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a66:	f001 f98f 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a70:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4814      	ldr	r0, [pc, #80]	@ (8000ad4 <MX_GPIO_Init+0x104>)
 8000a82:	f000 ffff 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DEV_EN_LIDAR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DEV_EN_LIDAR_Pin;
 8000a86:	f248 0320 	movw	r3, #32800	@ 0x8020
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa2:	f000 ffef 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : M_EN_LIDAR_Pin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M_EN_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4804      	ldr	r0, [pc, #16]	@ (8000ad0 <MX_GPIO_Init+0x100>)
 8000abe:	f000 ffe1 	bl	8001a84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	@ 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	48000400 	.word	0x48000400
 8000ad4:	48000800 	.word	0x48000800

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <Error_Handler+0x8>

08000ae4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <HAL_MspInit+0x44>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aee:	4a0e      	ldr	r2, [pc, #56]	@ (8000b28 <HAL_MspInit+0x44>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000af6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <HAL_MspInit+0x44>)
 8000af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <HAL_MspInit+0x44>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b06:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <HAL_MspInit+0x44>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_MspInit+0x44>)
 8000b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b1a:	f001 f9f1 	bl	8001f00 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40021000 	.word	0x40021000

08000b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <HAL_TIM_Base_MspInit+0x38>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d10b      	bne.n	8000b56 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <HAL_TIM_Base_MspInit+0x3c>)
 8000b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b42:	4a09      	ldr	r2, [pc, #36]	@ (8000b68 <HAL_TIM_Base_MspInit+0x3c>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b4a:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <HAL_TIM_Base_MspInit+0x3c>)
 8000b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000b56:	bf00      	nop
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40000800 	.word	0x40000800
 8000b68:	40021000 	.word	0x40021000

08000b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a11      	ldr	r2, [pc, #68]	@ (8000bd0 <HAL_TIM_MspPostInit+0x64>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d11c      	bne.n	8000bc8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <HAL_TIM_MspPostInit+0x68>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b92:	4a10      	ldr	r2, [pc, #64]	@ (8000bd4 <HAL_TIM_MspPostInit+0x68>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <HAL_TIM_MspPostInit+0x68>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = TIM4_CH4_M_SCTR_LIDAR_Pin;
 8000ba6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000baa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH4_M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <HAL_TIM_MspPostInit+0x6c>)
 8000bc4:	f000 ff5e 	bl	8001a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000bc8:	bf00      	nop
 8000bca:	3720      	adds	r7, #32
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40000800 	.word	0x40000800
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	48000400 	.word	0x48000400

08000bdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b09c      	sub	sp, #112	@ 0x70
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf4:	f107 0318 	add.w	r3, r7, #24
 8000bf8:	2244      	movs	r2, #68	@ 0x44
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f004 fdb3 	bl	8005768 <memset>
  if(huart->Instance==USART2)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a57      	ldr	r2, [pc, #348]	@ (8000d64 <HAL_UART_MspInit+0x188>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d137      	bne.n	8000c7c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c14:	f107 0318 	add.w	r3, r7, #24
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 feaf 	bl	800297c <HAL_RCCEx_PeriphCLKConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c24:	f7ff ff58 	bl	8000ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c28:	4b4f      	ldr	r3, [pc, #316]	@ (8000d68 <HAL_UART_MspInit+0x18c>)
 8000c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c2c:	4a4e      	ldr	r2, [pc, #312]	@ (8000d68 <HAL_UART_MspInit+0x18c>)
 8000c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c32:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c34:	4b4c      	ldr	r3, [pc, #304]	@ (8000d68 <HAL_UART_MspInit+0x18c>)
 8000c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c40:	4b49      	ldr	r3, [pc, #292]	@ (8000d68 <HAL_UART_MspInit+0x18c>)
 8000c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c44:	4a48      	ldr	r2, [pc, #288]	@ (8000d68 <HAL_UART_MspInit+0x18c>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4c:	4b46      	ldr	r3, [pc, #280]	@ (8000d68 <HAL_UART_MspInit+0x18c>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c58:	230c      	movs	r3, #12
 8000c5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c68:	2307      	movs	r3, #7
 8000c6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c70:	4619      	mov	r1, r3
 8000c72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c76:	f000 ff05 	bl	8001a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c7a:	e06e      	b.n	8000d5a <HAL_UART_MspInit+0x17e>
  else if(huart->Instance==USART3)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a3a      	ldr	r2, [pc, #232]	@ (8000d6c <HAL_UART_MspInit+0x190>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d169      	bne.n	8000d5a <HAL_UART_MspInit+0x17e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c86:	2304      	movs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c8e:	f107 0318 	add.w	r3, r7, #24
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 fe72 	bl	800297c <HAL_RCCEx_PeriphCLKConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000c9e:	f7ff ff1b 	bl	8000ad8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ca2:	4b31      	ldr	r3, [pc, #196]	@ (8000d68 <HAL_UART_MspInit+0x18c>)
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ca6:	4a30      	ldr	r2, [pc, #192]	@ (8000d68 <HAL_UART_MspInit+0x18c>)
 8000ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cac:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cae:	4b2e      	ldr	r3, [pc, #184]	@ (8000d68 <HAL_UART_MspInit+0x18c>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	4b2b      	ldr	r3, [pc, #172]	@ (8000d68 <HAL_UART_MspInit+0x18c>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8000d68 <HAL_UART_MspInit+0x18c>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cc6:	4b28      	ldr	r3, [pc, #160]	@ (8000d68 <HAL_UART_MspInit+0x18c>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_LIDAR_Pin|USART3_RX_LIDAR_Pin;
 8000cd2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000cd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000cec:	4619      	mov	r1, r3
 8000cee:	4820      	ldr	r0, [pc, #128]	@ (8000d70 <HAL_UART_MspInit+0x194>)
 8000cf0:	f000 fec8 	bl	8001a84 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <HAL_UART_MspInit+0x198>)
 8000cf6:	4a20      	ldr	r2, [pc, #128]	@ (8000d78 <HAL_UART_MspInit+0x19c>)
 8000cf8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000d74 <HAL_UART_MspInit+0x198>)
 8000cfc:	221c      	movs	r2, #28
 8000cfe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d00:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <HAL_UART_MspInit+0x198>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d06:	4b1b      	ldr	r3, [pc, #108]	@ (8000d74 <HAL_UART_MspInit+0x198>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d0c:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <HAL_UART_MspInit+0x198>)
 8000d0e:	2280      	movs	r2, #128	@ 0x80
 8000d10:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d12:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <HAL_UART_MspInit+0x198>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d18:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <HAL_UART_MspInit+0x198>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000d1e:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <HAL_UART_MspInit+0x198>)
 8000d20:	2220      	movs	r2, #32
 8000d22:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <HAL_UART_MspInit+0x198>)
 8000d26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000d2c:	4811      	ldr	r0, [pc, #68]	@ (8000d74 <HAL_UART_MspInit+0x198>)
 8000d2e:	f000 fc2f 	bl	8001590 <HAL_DMA_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_UART_MspInit+0x160>
      Error_Handler();
 8000d38:	f7ff fece 	bl	8000ad8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a0d      	ldr	r2, [pc, #52]	@ (8000d74 <HAL_UART_MspInit+0x198>)
 8000d40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000d44:	4a0b      	ldr	r2, [pc, #44]	@ (8000d74 <HAL_UART_MspInit+0x198>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2027      	movs	r0, #39	@ 0x27
 8000d50:	f000 fbe9 	bl	8001526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d54:	2027      	movs	r0, #39	@ 0x27
 8000d56:	f000 fc00 	bl	800155a <HAL_NVIC_EnableIRQ>
}
 8000d5a:	bf00      	nop
 8000d5c:	3770      	adds	r7, #112	@ 0x70
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40004400 	.word	0x40004400
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40004800 	.word	0x40004800
 8000d70:	48000400 	.word	0x48000400
 8000d74:	200001f8 	.word	0x200001f8
 8000d78:	40020008 	.word	0x40020008

08000d7c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000d84:	1d39      	adds	r1, r7, #4
 8000d86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4807      	ldr	r0, [pc, #28]	@ (8000dac <__io_putchar+0x30>)
 8000d8e:	f002 ffab 	bl	8003ce8 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000d92:	1d39      	adds	r1, r7, #4
 8000d94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <__io_putchar+0x34>)
 8000d9c:	f002 ffa4 	bl	8003ce8 <HAL_UART_Transmit>

  return ch;
 8000da0:	687b      	ldr	r3, [r7, #4]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200000d0 	.word	0x200000d0
 8000db0:	20000164 	.word	0x20000164

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <NMI_Handler+0x4>

08000dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <HardFault_Handler+0x4>

08000dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <MemManage_Handler+0x4>

08000dcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0a:	f000 fa71 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000e18:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <DMA1_Channel1_IRQHandler+0x10>)
 8000e1a:	f000 fd21 	bl	8001860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200001f8 	.word	0x200001f8

08000e28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e2c:	4802      	ldr	r0, [pc, #8]	@ (8000e38 <USART3_IRQHandler+0x10>)
 8000e2e:	f003 f8b1 	bl	8003f94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000164 	.word	0x20000164

08000e3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	e00a      	b.n	8000e64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e4e:	f3af 8000 	nop.w
 8000e52:	4601      	mov	r1, r0
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	60ba      	str	r2, [r7, #8]
 8000e5a:	b2ca      	uxtb	r2, r1
 8000e5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	3301      	adds	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	dbf0      	blt.n	8000e4e <_read+0x12>
  }

  return len;
 8000e6c:	687b      	ldr	r3, [r7, #4]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	e009      	b.n	8000e9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	1c5a      	adds	r2, r3, #1
 8000e8c:	60ba      	str	r2, [r7, #8]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff73 	bl	8000d7c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	dbf1      	blt.n	8000e88 <_write+0x12>
  }
  return len;
 8000ea4:	687b      	ldr	r3, [r7, #4]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_close>:

int _close(int file)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ed6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <_isatty>:

int _isatty(int file)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f20:	4a14      	ldr	r2, [pc, #80]	@ (8000f74 <_sbrk+0x5c>)
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <_sbrk+0x60>)
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f2c:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <_sbrk+0x64>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <_sbrk+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d207      	bcs.n	8000f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f48:	f004 fc5c 	bl	8005804 <__errno>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	220c      	movs	r2, #12
 8000f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e009      	b.n	8000f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <_sbrk+0x64>)
 8000f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20008000 	.word	0x20008000
 8000f78:	00000400 	.word	0x00000400
 8000f7c:	20003450 	.word	0x20003450
 8000f80:	200035a8 	.word	0x200035a8

08000f84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <SystemInit+0x20>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f8e:	4a05      	ldr	r2, [pc, #20]	@ (8000fa4 <SystemInit+0x20>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <LIDAR_Init>:
uint16_t frame_start = 0, frame_end = 0;
/*
 * @brief Initialization of the lidar
 * @param
 */
void LIDAR_Init(LIDAR_HandleTypeDef_t * hlidar){
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	hlidar->huart = &huart3;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <LIDAR_Init+0x1c>)
 8000fb4:	601a      	str	r2, [r3, #0]
	/*
	HAL_GPIO_WritePin(GPIOA, DEV_EN_LIDAR_Pin, GPIO_PIN_SET);
	// Enable M_EN lidar
	HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_SET);*/

}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000164 	.word	0x20000164

08000fc8 <LIDAR_Get_Info>:

/*
 * @brief
 * @param
 */
HAL_StatusTypeDef LIDAR_Get_Info(LIDAR_HandleTypeDef_t * hlidar){
 8000fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fca:	b09f      	sub	sp, #124	@ 0x7c
 8000fcc:	af10      	add	r7, sp, #64	@ 0x40
 8000fce:	6278      	str	r0, [r7, #36]	@ 0x24
	uint8_t lidar_command[2] = {START_CMD_LIDAR, GET_INFO_CMD_LIDAR};
 8000fd0:	f249 03a5 	movw	r3, #37029	@ 0x90a5
 8000fd4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	LIDAR_DeviceInfo_t * device_info;
	HAL_StatusTypeDef status = HAL_UART_Transmit(hlidar->huart, lidar_command, 2, 2000);
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd8:	6818      	ldr	r0, [r3, #0]
 8000fda:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000fde:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	f002 fe80 	bl	8003ce8 <HAL_UART_Transmit>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if(status == HAL_OK){
 8000fee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f040 8093 	bne.w	800111e <LIDAR_Get_Info+0x156>
		HAL_UART_Receive(hlidar->huart, hlidar->info_buff, INFO_BUFF_SIZE_LIDAR, 2000);
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffa:	6818      	ldr	r0, [r3, #0]
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffe:	1d19      	adds	r1, r3, #4
 8001000:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001004:	221b      	movs	r2, #27
 8001006:	f002 fefd 	bl	8003e04 <HAL_UART_Receive>
		device_info->start_sign = (hlidar->info_buff[0]<<8)|hlidar->info_buff[1];
 800100a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100c:	791b      	ldrb	r3, [r3, #4]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21a      	sxth	r2, r3
 8001012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001014:	795b      	ldrb	r3, [r3, #5]
 8001016:	b21b      	sxth	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b21b      	sxth	r3, r3
 800101c:	b29a      	uxth	r2, r3
 800101e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001020:	801a      	strh	r2, [r3, #0]
		device_info->lenght = (hlidar->info_buff[2])|(hlidar->info_buff[3]<<8)|(hlidar->info_buff[4]<<16);
 8001022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001024:	799b      	ldrb	r3, [r3, #6]
 8001026:	461a      	mov	r2, r3
 8001028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102a:	79db      	ldrb	r3, [r3, #7]
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	431a      	orrs	r2, r3
 8001030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001032:	7a1b      	ldrb	r3, [r3, #8]
 8001034:	041b      	lsls	r3, r3, #16
 8001036:	4313      	orrs	r3, r2
 8001038:	461a      	mov	r2, r3
 800103a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800103c:	605a      	str	r2, [r3, #4]
		device_info->mode = hlidar->info_buff[5];
 800103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001040:	7a5a      	ldrb	r2, [r3, #9]
 8001042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001044:	721a      	strb	r2, [r3, #8]
		device_info->type_code = hlidar->info_buff[6];
 8001046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001048:	7a9a      	ldrb	r2, [r3, #10]
 800104a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800104c:	725a      	strb	r2, [r3, #9]
		device_info->model = hlidar->info_buff[7];
 800104e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001050:	7ada      	ldrb	r2, [r3, #11]
 8001052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001054:	729a      	strb	r2, [r3, #10]
		snprintf(device_info->firmware_version,6,"%d.%d",hlidar->info_buff[8],hlidar->info_buff[9]);
 8001056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001058:	f103 000b 	add.w	r0, r3, #11
 800105c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105e:	7b1b      	ldrb	r3, [r3, #12]
 8001060:	461a      	mov	r2, r3
 8001062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001064:	7b5b      	ldrb	r3, [r3, #13]
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	4613      	mov	r3, r2
 800106a:	4a30      	ldr	r2, [pc, #192]	@ (800112c <LIDAR_Get_Info+0x164>)
 800106c:	2106      	movs	r1, #6
 800106e:	f004 fa6f 	bl	8005550 <sniprintf>
		device_info->hardware_version  = hlidar->info_buff[10];
 8001072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001074:	7b9a      	ldrb	r2, [r3, #14]
 8001076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001078:	745a      	strb	r2, [r3, #17]
		snprintf(device_info->serial_number,17,"%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",hlidar->info_buff[11],hlidar->info_buff[12],hlidar->info_buff[13],hlidar->info_buff[14],hlidar->info_buff[15],hlidar->info_buff[16],hlidar->info_buff[17],hlidar->info_buff[18],hlidar->info_buff[19],hlidar->info_buff[20],hlidar->info_buff[21],hlidar->info_buff[22],hlidar->info_buff[23],hlidar->info_buff[24],hlidar->info_buff[25],hlidar->info_buff[26]);
 800107a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800107c:	f103 0012 	add.w	r0, r3, #18
 8001080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001082:	7bdb      	ldrb	r3, [r3, #15]
 8001084:	469c      	mov	ip, r3
 8001086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001088:	7c1b      	ldrb	r3, [r3, #16]
 800108a:	461d      	mov	r5, r3
 800108c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108e:	7c5b      	ldrb	r3, [r3, #17]
 8001090:	461e      	mov	r6, r3
 8001092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001094:	7c9b      	ldrb	r3, [r3, #18]
 8001096:	623b      	str	r3, [r7, #32]
 8001098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109a:	7cdb      	ldrb	r3, [r3, #19]
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a0:	7d1b      	ldrb	r3, [r3, #20]
 80010a2:	61bb      	str	r3, [r7, #24]
 80010a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a6:	7d5b      	ldrb	r3, [r3, #21]
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	7d9b      	ldrb	r3, [r3, #22]
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b2:	7ddb      	ldrb	r3, [r3, #23]
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b8:	7e1b      	ldrb	r3, [r3, #24]
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010be:	7e5b      	ldrb	r3, [r3, #25]
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c4:	7e9b      	ldrb	r3, [r3, #26]
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ca:	7edb      	ldrb	r3, [r3, #27]
 80010cc:	461c      	mov	r4, r3
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	7f1b      	ldrb	r3, [r3, #28]
 80010d2:	4619      	mov	r1, r3
 80010d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d6:	7f5b      	ldrb	r3, [r3, #29]
 80010d8:	461a      	mov	r2, r3
 80010da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010dc:	7f9b      	ldrb	r3, [r3, #30]
 80010de:	930e      	str	r3, [sp, #56]	@ 0x38
 80010e0:	920d      	str	r2, [sp, #52]	@ 0x34
 80010e2:	910c      	str	r1, [sp, #48]	@ 0x30
 80010e4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	920a      	str	r2, [sp, #40]	@ 0x28
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	9208      	str	r2, [sp, #32]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	9207      	str	r2, [sp, #28]
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	9206      	str	r2, [sp, #24]
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	9205      	str	r2, [sp, #20]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	9204      	str	r2, [sp, #16]
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	9203      	str	r2, [sp, #12]
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	9302      	str	r3, [sp, #8]
 800110a:	9601      	str	r6, [sp, #4]
 800110c:	9500      	str	r5, [sp, #0]
 800110e:	4663      	mov	r3, ip
 8001110:	4a07      	ldr	r2, [pc, #28]	@ (8001130 <LIDAR_Get_Info+0x168>)
 8001112:	2111      	movs	r1, #17
 8001114:	f004 fa1c 	bl	8005550 <sniprintf>

		return status;
 8001118:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800111c:	e001      	b.n	8001122 <LIDAR_Get_Info+0x15a>
	}
	else{
		return status;
 800111e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
	}
}
 8001122:	4618      	mov	r0, r3
 8001124:	373c      	adds	r7, #60	@ 0x3c
 8001126:	46bd      	mov	sp, r7
 8001128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800112a:	bf00      	nop
 800112c:	08006644 	.word	0x08006644
 8001130:	0800664c 	.word	0x0800664c

08001134 <LIDAR_Get_Health_Status>:

/*
 * @brief
 * @param
 */
HAL_StatusTypeDef LIDAR_Get_Health_Status(LIDAR_HandleTypeDef_t * hlidar){
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	uint8_t lidar_command[2] = {START_CMD_LIDAR, GET_HEALTH_CMD_LIDAR};
 800113c:	f249 13a5 	movw	r3, #37285	@ 0x91a5
 8001140:	81bb      	strh	r3, [r7, #12]
	LIDAR_HealthStatus_t * health_status;
	HAL_StatusTypeDef status = HAL_UART_Transmit(hlidar->huart, lidar_command, 2, 2000);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	f107 010c 	add.w	r1, r7, #12
 800114a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800114e:	2202      	movs	r2, #2
 8001150:	f002 fdca 	bl	8003ce8 <HAL_UART_Transmit>
 8001154:	4603      	mov	r3, r0
 8001156:	75fb      	strb	r3, [r7, #23]
	if(status == HAL_OK){
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d146      	bne.n	80011ec <LIDAR_Get_Health_Status+0xb8>
		HAL_UART_Receive(hlidar->huart, hlidar->health_buff, HEALTH_BUFF_SIZE_LIDAR, 2000);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f103 011f 	add.w	r1, r3, #31
 8001168:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800116c:	220a      	movs	r2, #10
 800116e:	f002 fe49 	bl	8003e04 <HAL_UART_Receive>
		health_status->start_sign = (hlidar->health_buff[0]<<8)|hlidar->health_buff[1];
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	7fdb      	ldrb	r3, [r3, #31]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	b21a      	sxth	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001180:	b21b      	sxth	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b21b      	sxth	r3, r3
 8001186:	b29a      	uxth	r2, r3
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	801a      	strh	r2, [r3, #0]
		health_status->lenght = (hlidar->health_buff[2])|(hlidar->health_buff[3]<<8)|(hlidar->health_buff[4]<<16);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001192:	461a      	mov	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	431a      	orrs	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80011a4:	041b      	lsls	r3, r3, #16
 80011a6:	4313      	orrs	r3, r2
 80011a8:	461a      	mov	r2, r3
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	605a      	str	r2, [r3, #4]
		health_status->mode = hlidar->health_buff[5];
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	721a      	strb	r2, [r3, #8]
		health_status->type_code = hlidar->health_buff[6];
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	725a      	strb	r2, [r3, #9]
		health_status->status_code = hlidar->health_buff[7];
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	729a      	strb	r2, [r3, #10]
		health_status->error_code = hlidar->health_buff[8]|(hlidar->health_buff[9]<<8);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	b21b      	sxth	r3, r3
 80011de:	4313      	orrs	r3, r2
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	819a      	strh	r2, [r3, #12]

		return status;
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	e000      	b.n	80011ee <LIDAR_Get_Health_Status+0xba>
	}
	else{
		return status;
 80011ec:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011f8:	480d      	ldr	r0, [pc, #52]	@ (8001230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011fa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011fc:	f7ff fec2 	bl	8000f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001200:	480c      	ldr	r0, [pc, #48]	@ (8001234 <LoopForever+0x6>)
  ldr r1, =_edata
 8001202:	490d      	ldr	r1, [pc, #52]	@ (8001238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001204:	4a0d      	ldr	r2, [pc, #52]	@ (800123c <LoopForever+0xe>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001218:	4c0a      	ldr	r4, [pc, #40]	@ (8001244 <LoopForever+0x16>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001226:	f004 faf3 	bl	8005810 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800122a:	f7ff fa01 	bl	8000630 <main>

0800122e <LoopForever>:

LoopForever:
    b LoopForever
 800122e:	e7fe      	b.n	800122e <LoopForever>
  ldr   r0, =_estack
 8001230:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001238:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800123c:	08006708 	.word	0x08006708
  ldr r2, =_sbss
 8001240:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001244:	200035a4 	.word	0x200035a4

08001248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC1_2_IRQHandler>

0800124a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001254:	2003      	movs	r0, #3
 8001256:	f000 f95b 	bl	8001510 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125a:	2000      	movs	r0, #0
 800125c:	f000 f80e 	bl	800127c <HAL_InitTick>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d002      	beq.n	800126c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	71fb      	strb	r3, [r7, #7]
 800126a:	e001      	b.n	8001270 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800126c:	f7ff fc3a 	bl	8000ae4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001270:	79fb      	ldrb	r3, [r7, #7]

}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001288:	4b16      	ldr	r3, [pc, #88]	@ (80012e4 <HAL_InitTick+0x68>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d022      	beq.n	80012d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001290:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <HAL_InitTick+0x6c>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <HAL_InitTick+0x68>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800129c:	fbb1 f3f3 	udiv	r3, r1, r3
 80012a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f966 	bl	8001576 <HAL_SYSTICK_Config>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10f      	bne.n	80012d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b0f      	cmp	r3, #15
 80012b4:	d809      	bhi.n	80012ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b6:	2200      	movs	r2, #0
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	f04f 30ff 	mov.w	r0, #4294967295
 80012be:	f000 f932 	bl	8001526 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c2:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <HAL_InitTick+0x70>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	e007      	b.n	80012da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	e004      	b.n	80012da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e001      	b.n	80012da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000008 	.word	0x20000008
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000004 	.word	0x20000004

080012f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b05      	ldr	r3, [pc, #20]	@ (800130c <HAL_IncTick+0x1c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <HAL_IncTick+0x20>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4413      	add	r3, r2
 80012fe:	4a03      	ldr	r2, [pc, #12]	@ (800130c <HAL_IncTick+0x1c>)
 8001300:	6013      	str	r3, [r2, #0]
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	20003454 	.word	0x20003454
 8001310:	20000008 	.word	0x20000008

08001314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return uwTick;
 8001318:	4b03      	ldr	r3, [pc, #12]	@ (8001328 <HAL_GetTick+0x14>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20003454 	.word	0x20003454

0800132c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001334:	f7ff ffee 	bl	8001314 <HAL_GetTick>
 8001338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001344:	d004      	beq.n	8001350 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <HAL_Delay+0x40>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	4413      	add	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001350:	bf00      	nop
 8001352:	f7ff ffdf 	bl	8001314 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	429a      	cmp	r2, r3
 8001360:	d8f7      	bhi.n	8001352 <HAL_Delay+0x26>
  {
  }
}
 8001362:	bf00      	nop
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000008 	.word	0x20000008

08001370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800138c:	4013      	ands	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800139c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a2:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	60d3      	str	r3, [r2, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013bc:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <__NVIC_GetPriorityGrouping+0x18>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	f003 0307 	and.w	r3, r3, #7
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	db0b      	blt.n	80013fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f003 021f 	and.w	r2, r3, #31
 80013ec:	4907      	ldr	r1, [pc, #28]	@ (800140c <__NVIC_EnableIRQ+0x38>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	095b      	lsrs	r3, r3, #5
 80013f4:	2001      	movs	r0, #1
 80013f6:	fa00 f202 	lsl.w	r2, r0, r2
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000e100 	.word	0xe000e100

08001410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	db0a      	blt.n	800143a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	490c      	ldr	r1, [pc, #48]	@ (800145c <__NVIC_SetPriority+0x4c>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	0112      	lsls	r2, r2, #4
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	440b      	add	r3, r1
 8001434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001438:	e00a      	b.n	8001450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4908      	ldr	r1, [pc, #32]	@ (8001460 <__NVIC_SetPriority+0x50>)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	3b04      	subs	r3, #4
 8001448:	0112      	lsls	r2, r2, #4
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	440b      	add	r3, r1
 800144e:	761a      	strb	r2, [r3, #24]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000e100 	.word	0xe000e100
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	@ 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f1c3 0307 	rsb	r3, r3, #7
 800147e:	2b04      	cmp	r3, #4
 8001480:	bf28      	it	cs
 8001482:	2304      	movcs	r3, #4
 8001484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3304      	adds	r3, #4
 800148a:	2b06      	cmp	r3, #6
 800148c:	d902      	bls.n	8001494 <NVIC_EncodePriority+0x30>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3b03      	subs	r3, #3
 8001492:	e000      	b.n	8001496 <NVIC_EncodePriority+0x32>
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	f04f 32ff 	mov.w	r2, #4294967295
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	401a      	ands	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43d9      	mvns	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	4313      	orrs	r3, r2
         );
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3724      	adds	r7, #36	@ 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014dc:	d301      	bcc.n	80014e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014de:	2301      	movs	r3, #1
 80014e0:	e00f      	b.n	8001502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e2:	4a0a      	ldr	r2, [pc, #40]	@ (800150c <SysTick_Config+0x40>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ea:	210f      	movs	r1, #15
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	f7ff ff8e 	bl	8001410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f4:	4b05      	ldr	r3, [pc, #20]	@ (800150c <SysTick_Config+0x40>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fa:	4b04      	ldr	r3, [pc, #16]	@ (800150c <SysTick_Config+0x40>)
 80014fc:	2207      	movs	r2, #7
 80014fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	e000e010 	.word	0xe000e010

08001510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff29 	bl	8001370 <__NVIC_SetPriorityGrouping>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001534:	f7ff ff40 	bl	80013b8 <__NVIC_GetPriorityGrouping>
 8001538:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	6978      	ldr	r0, [r7, #20]
 8001540:	f7ff ff90 	bl	8001464 <NVIC_EncodePriority>
 8001544:	4602      	mov	r2, r0
 8001546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff5f 	bl	8001410 <__NVIC_SetPriority>
}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff33 	bl	80013d4 <__NVIC_EnableIRQ>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ffa4 	bl	80014cc <SysTick_Config>
 8001584:	4603      	mov	r3, r0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e08d      	b.n	80016be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b47      	ldr	r3, [pc, #284]	@ (80016c8 <HAL_DMA_Init+0x138>)
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d80f      	bhi.n	80015ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b45      	ldr	r3, [pc, #276]	@ (80016cc <HAL_DMA_Init+0x13c>)
 80015b6:	4413      	add	r3, r2
 80015b8:	4a45      	ldr	r2, [pc, #276]	@ (80016d0 <HAL_DMA_Init+0x140>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	009a      	lsls	r2, r3, #2
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a42      	ldr	r2, [pc, #264]	@ (80016d4 <HAL_DMA_Init+0x144>)
 80015ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80015cc:	e00e      	b.n	80015ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b40      	ldr	r3, [pc, #256]	@ (80016d8 <HAL_DMA_Init+0x148>)
 80015d6:	4413      	add	r3, r2
 80015d8:	4a3d      	ldr	r2, [pc, #244]	@ (80016d0 <HAL_DMA_Init+0x140>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	091b      	lsrs	r3, r3, #4
 80015e0:	009a      	lsls	r2, r3, #2
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a3c      	ldr	r2, [pc, #240]	@ (80016dc <HAL_DMA_Init+0x14c>)
 80015ea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2202      	movs	r2, #2
 80015f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001606:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001610:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800161c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001628:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f9be 	bl	80019c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800164c:	d102      	bne.n	8001654 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001668:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d010      	beq.n	8001694 <HAL_DMA_Init+0x104>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b04      	cmp	r3, #4
 8001678:	d80c      	bhi.n	8001694 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f9de 	bl	8001a3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	e008      	b.n	80016a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40020407 	.word	0x40020407
 80016cc:	bffdfff8 	.word	0xbffdfff8
 80016d0:	cccccccd 	.word	0xcccccccd
 80016d4:	40020000 	.word	0x40020000
 80016d8:	bffdfbf8 	.word	0xbffdfbf8
 80016dc:	40020400 	.word	0x40020400

080016e0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d005      	beq.n	8001704 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2204      	movs	r2, #4
 80016fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	73fb      	strb	r3, [r7, #15]
 8001702:	e037      	b.n	8001774 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 020e 	bic.w	r2, r2, #14
 8001712:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800171e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001722:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001738:	f003 021f 	and.w	r2, r3, #31
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	2101      	movs	r1, #1
 8001742:	fa01 f202 	lsl.w	r2, r1, r2
 8001746:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001750:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00c      	beq.n	8001774 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001764:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001768:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001772:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d00d      	beq.n	80017c6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2204      	movs	r2, #4
 80017ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	e047      	b.n	8001856 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 020e 	bic.w	r2, r2, #14
 80017d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0201 	bic.w	r2, r2, #1
 80017e4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fa:	f003 021f 	and.w	r2, r3, #31
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	2101      	movs	r1, #1
 8001804:	fa01 f202 	lsl.w	r2, r1, r2
 8001808:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001812:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00c      	beq.n	8001836 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001826:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800182a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001834:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	4798      	blx	r3
    }
  }
  return status;
 8001856:	7bfb      	ldrb	r3, [r7, #15]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187c:	f003 031f 	and.w	r3, r3, #31
 8001880:	2204      	movs	r2, #4
 8001882:	409a      	lsls	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4013      	ands	r3, r2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d026      	beq.n	80018da <HAL_DMA_IRQHandler+0x7a>
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b00      	cmp	r3, #0
 8001894:	d021      	beq.n	80018da <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d107      	bne.n	80018b4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0204 	bic.w	r2, r2, #4
 80018b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b8:	f003 021f 	and.w	r2, r3, #31
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c0:	2104      	movs	r1, #4
 80018c2:	fa01 f202 	lsl.w	r2, r1, r2
 80018c6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d071      	beq.n	80019b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80018d8:	e06c      	b.n	80019b4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	2202      	movs	r2, #2
 80018e4:	409a      	lsls	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d02e      	beq.n	800194c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d029      	beq.n	800194c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0320 	and.w	r3, r3, #32
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10b      	bne.n	800191e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 020a 	bic.w	r2, r2, #10
 8001914:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001922:	f003 021f 	and.w	r2, r3, #31
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	2102      	movs	r1, #2
 800192c:	fa01 f202 	lsl.w	r2, r1, r2
 8001930:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193e:	2b00      	cmp	r3, #0
 8001940:	d038      	beq.n	80019b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800194a:	e033      	b.n	80019b4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001950:	f003 031f 	and.w	r3, r3, #31
 8001954:	2208      	movs	r2, #8
 8001956:	409a      	lsls	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d02a      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d025      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 020e 	bic.w	r2, r2, #14
 8001978:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197e:	f003 021f 	and.w	r2, r3, #31
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	2101      	movs	r1, #1
 8001988:	fa01 f202 	lsl.w	r2, r1, r2
 800198c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d004      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
}
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d802      	bhi.n	80019da <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80019d4:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	e001      	b.n	80019de <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80019da:	4b15      	ldr	r3, [pc, #84]	@ (8001a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80019dc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	3b08      	subs	r3, #8
 80019ea:	4a12      	ldr	r2, [pc, #72]	@ (8001a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80019ec:	fba2 2303 	umull	r2, r3, r2, r3
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	009a      	lsls	r2, r3, #2
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4413      	add	r3, r2
 8001a00:	461a      	mov	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a0b      	ldr	r2, [pc, #44]	@ (8001a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001a0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 031f 	and.w	r3, r3, #31
 8001a12:	2201      	movs	r2, #1
 8001a14:	409a      	lsls	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001a1a:	bf00      	nop
 8001a1c:	371c      	adds	r7, #28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40020407 	.word	0x40020407
 8001a2c:	40020800 	.word	0x40020800
 8001a30:	40020820 	.word	0x40020820
 8001a34:	cccccccd 	.word	0xcccccccd
 8001a38:	40020880 	.word	0x40020880

08001a3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001a50:	4413      	add	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	461a      	mov	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a08      	ldr	r2, [pc, #32]	@ (8001a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a5e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	f003 031f 	and.w	r3, r3, #31
 8001a68:	2201      	movs	r2, #1
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	1000823f 	.word	0x1000823f
 8001a80:	40020940 	.word	0x40020940

08001a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a92:	e15a      	b.n	8001d4a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2101      	movs	r1, #1
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 814c 	beq.w	8001d44 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d005      	beq.n	8001ac4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d130      	bne.n	8001b26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001afa:	2201      	movs	r2, #1
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	091b      	lsrs	r3, r3, #4
 8001b10:	f003 0201 	and.w	r2, r3, #1
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d017      	beq.n	8001b62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d123      	bne.n	8001bb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	08da      	lsrs	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3208      	adds	r2, #8
 8001b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	220f      	movs	r2, #15
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	08da      	lsrs	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3208      	adds	r2, #8
 8001bb0:	6939      	ldr	r1, [r7, #16]
 8001bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0203 	and.w	r2, r3, #3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 80a6 	beq.w	8001d44 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf8:	4b5b      	ldr	r3, [pc, #364]	@ (8001d68 <HAL_GPIO_Init+0x2e4>)
 8001bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bfc:	4a5a      	ldr	r2, [pc, #360]	@ (8001d68 <HAL_GPIO_Init+0x2e4>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c04:	4b58      	ldr	r3, [pc, #352]	@ (8001d68 <HAL_GPIO_Init+0x2e4>)
 8001c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c10:	4a56      	ldr	r2, [pc, #344]	@ (8001d6c <HAL_GPIO_Init+0x2e8>)
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	089b      	lsrs	r3, r3, #2
 8001c16:	3302      	adds	r3, #2
 8001c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	220f      	movs	r2, #15
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c3a:	d01f      	beq.n	8001c7c <HAL_GPIO_Init+0x1f8>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a4c      	ldr	r2, [pc, #304]	@ (8001d70 <HAL_GPIO_Init+0x2ec>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d019      	beq.n	8001c78 <HAL_GPIO_Init+0x1f4>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a4b      	ldr	r2, [pc, #300]	@ (8001d74 <HAL_GPIO_Init+0x2f0>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d013      	beq.n	8001c74 <HAL_GPIO_Init+0x1f0>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a4a      	ldr	r2, [pc, #296]	@ (8001d78 <HAL_GPIO_Init+0x2f4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d00d      	beq.n	8001c70 <HAL_GPIO_Init+0x1ec>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a49      	ldr	r2, [pc, #292]	@ (8001d7c <HAL_GPIO_Init+0x2f8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d007      	beq.n	8001c6c <HAL_GPIO_Init+0x1e8>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a48      	ldr	r2, [pc, #288]	@ (8001d80 <HAL_GPIO_Init+0x2fc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d101      	bne.n	8001c68 <HAL_GPIO_Init+0x1e4>
 8001c64:	2305      	movs	r3, #5
 8001c66:	e00a      	b.n	8001c7e <HAL_GPIO_Init+0x1fa>
 8001c68:	2306      	movs	r3, #6
 8001c6a:	e008      	b.n	8001c7e <HAL_GPIO_Init+0x1fa>
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	e006      	b.n	8001c7e <HAL_GPIO_Init+0x1fa>
 8001c70:	2303      	movs	r3, #3
 8001c72:	e004      	b.n	8001c7e <HAL_GPIO_Init+0x1fa>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e002      	b.n	8001c7e <HAL_GPIO_Init+0x1fa>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <HAL_GPIO_Init+0x1fa>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	f002 0203 	and.w	r2, r2, #3
 8001c84:	0092      	lsls	r2, r2, #2
 8001c86:	4093      	lsls	r3, r2
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c8e:	4937      	ldr	r1, [pc, #220]	@ (8001d6c <HAL_GPIO_Init+0x2e8>)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	089b      	lsrs	r3, r3, #2
 8001c94:	3302      	adds	r3, #2
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c9c:	4b39      	ldr	r3, [pc, #228]	@ (8001d84 <HAL_GPIO_Init+0x300>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cc0:	4a30      	ldr	r2, [pc, #192]	@ (8001d84 <HAL_GPIO_Init+0x300>)
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cc6:	4b2f      	ldr	r3, [pc, #188]	@ (8001d84 <HAL_GPIO_Init+0x300>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cea:	4a26      	ldr	r2, [pc, #152]	@ (8001d84 <HAL_GPIO_Init+0x300>)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001cf0:	4b24      	ldr	r3, [pc, #144]	@ (8001d84 <HAL_GPIO_Init+0x300>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d14:	4a1b      	ldr	r2, [pc, #108]	@ (8001d84 <HAL_GPIO_Init+0x300>)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <HAL_GPIO_Init+0x300>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d3e:	4a11      	ldr	r2, [pc, #68]	@ (8001d84 <HAL_GPIO_Init+0x300>)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3301      	adds	r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	fa22 f303 	lsr.w	r3, r2, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f47f ae9d 	bne.w	8001a94 <HAL_GPIO_Init+0x10>
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	bf00      	nop
 8001d5e:	371c      	adds	r7, #28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40010000 	.word	0x40010000
 8001d70:	48000400 	.word	0x48000400
 8001d74:	48000800 	.word	0x48000800
 8001d78:	48000c00 	.word	0x48000c00
 8001d7c:	48001000 	.word	0x48001000
 8001d80:	48001400 	.word	0x48001400
 8001d84:	40010400 	.word	0x40010400

08001d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
 8001d94:	4613      	mov	r3, r2
 8001d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d98:	787b      	ldrb	r3, [r7, #1]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001da4:	e002      	b.n	8001dac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d141      	bne.n	8001e4a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dc6:	4b4b      	ldr	r3, [pc, #300]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dd2:	d131      	bne.n	8001e38 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dd4:	4b47      	ldr	r3, [pc, #284]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dda:	4a46      	ldr	r2, [pc, #280]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ddc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001de0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de4:	4b43      	ldr	r3, [pc, #268]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001dec:	4a41      	ldr	r2, [pc, #260]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001df2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001df4:	4b40      	ldr	r3, [pc, #256]	@ (8001ef8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2232      	movs	r2, #50	@ 0x32
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	4a3f      	ldr	r2, [pc, #252]	@ (8001efc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e00:	fba2 2303 	umull	r2, r3, r2, r3
 8001e04:	0c9b      	lsrs	r3, r3, #18
 8001e06:	3301      	adds	r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e0a:	e002      	b.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e12:	4b38      	ldr	r3, [pc, #224]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e1e:	d102      	bne.n	8001e26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f2      	bne.n	8001e0c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e26:	4b33      	ldr	r3, [pc, #204]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e32:	d158      	bne.n	8001ee6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e057      	b.n	8001ee8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e38:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e3e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e48:	e04d      	b.n	8001ee6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e50:	d141      	bne.n	8001ed6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e52:	4b28      	ldr	r3, [pc, #160]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e5e:	d131      	bne.n	8001ec4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e60:	4b24      	ldr	r3, [pc, #144]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e66:	4a23      	ldr	r2, [pc, #140]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e70:	4b20      	ldr	r3, [pc, #128]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e78:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e80:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2232      	movs	r2, #50	@ 0x32
 8001e86:	fb02 f303 	mul.w	r3, r2, r3
 8001e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001efc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e90:	0c9b      	lsrs	r3, r3, #18
 8001e92:	3301      	adds	r3, #1
 8001e94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e96:	e002      	b.n	8001e9e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eaa:	d102      	bne.n	8001eb2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f2      	bne.n	8001e98 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ebe:	d112      	bne.n	8001ee6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e011      	b.n	8001ee8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eca:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ed4:	e007      	b.n	8001ee6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ed6:	4b07      	ldr	r3, [pc, #28]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ede:	4a05      	ldr	r2, [pc, #20]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ee4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	431bde83 	.word	0x431bde83

08001f00 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	4a04      	ldr	r2, [pc, #16]	@ (8001f1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f0e:	6093      	str	r3, [r2, #8]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40007000 	.word	0x40007000

08001f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e2fe      	b.n	8002530 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d075      	beq.n	800202a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f3e:	4b97      	ldr	r3, [pc, #604]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f48:	4b94      	ldr	r3, [pc, #592]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	2b0c      	cmp	r3, #12
 8001f56:	d102      	bne.n	8001f5e <HAL_RCC_OscConfig+0x3e>
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d002      	beq.n	8001f64 <HAL_RCC_OscConfig+0x44>
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d10b      	bne.n	8001f7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f64:	4b8d      	ldr	r3, [pc, #564]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d05b      	beq.n	8002028 <HAL_RCC_OscConfig+0x108>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d157      	bne.n	8002028 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e2d9      	b.n	8002530 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f84:	d106      	bne.n	8001f94 <HAL_RCC_OscConfig+0x74>
 8001f86:	4b85      	ldr	r3, [pc, #532]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a84      	ldr	r2, [pc, #528]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e01d      	b.n	8001fd0 <HAL_RCC_OscConfig+0xb0>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x98>
 8001f9e:	4b7f      	ldr	r3, [pc, #508]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a7e      	ldr	r2, [pc, #504]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8001fa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b7c      	ldr	r3, [pc, #496]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a7b      	ldr	r2, [pc, #492]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8001fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e00b      	b.n	8001fd0 <HAL_RCC_OscConfig+0xb0>
 8001fb8:	4b78      	ldr	r3, [pc, #480]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a77      	ldr	r2, [pc, #476]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8001fbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	4b75      	ldr	r3, [pc, #468]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a74      	ldr	r2, [pc, #464]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8001fca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d013      	beq.n	8002000 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7ff f99c 	bl	8001314 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe0:	f7ff f998 	bl	8001314 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	@ 0x64
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e29e      	b.n	8002530 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff2:	4b6a      	ldr	r3, [pc, #424]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0xc0>
 8001ffe:	e014      	b.n	800202a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff f988 	bl	8001314 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002008:	f7ff f984 	bl	8001314 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	@ 0x64
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e28a      	b.n	8002530 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800201a:	4b60      	ldr	r3, [pc, #384]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0xe8>
 8002026:	e000      	b.n	800202a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d075      	beq.n	8002122 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002036:	4b59      	ldr	r3, [pc, #356]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002040:	4b56      	ldr	r3, [pc, #344]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	2b0c      	cmp	r3, #12
 800204e:	d102      	bne.n	8002056 <HAL_RCC_OscConfig+0x136>
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d002      	beq.n	800205c <HAL_RCC_OscConfig+0x13c>
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d11f      	bne.n	800209c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800205c:	4b4f      	ldr	r3, [pc, #316]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_OscConfig+0x154>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e25d      	b.n	8002530 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002074:	4b49      	ldr	r3, [pc, #292]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	061b      	lsls	r3, r3, #24
 8002082:	4946      	ldr	r1, [pc, #280]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002088:	4b45      	ldr	r3, [pc, #276]	@ (80021a0 <HAL_RCC_OscConfig+0x280>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff f8f5 	bl	800127c <HAL_InitTick>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d043      	beq.n	8002120 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e249      	b.n	8002530 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d023      	beq.n	80020ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020a4:	4b3d      	ldr	r3, [pc, #244]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a3c      	ldr	r2, [pc, #240]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 80020aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7ff f930 	bl	8001314 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b8:	f7ff f92c 	bl	8001314 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e232      	b.n	8002530 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ca:	4b34      	ldr	r3, [pc, #208]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d6:	4b31      	ldr	r3, [pc, #196]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	061b      	lsls	r3, r3, #24
 80020e4:	492d      	ldr	r1, [pc, #180]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
 80020ea:	e01a      	b.n	8002122 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ec:	4b2b      	ldr	r3, [pc, #172]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a2a      	ldr	r2, [pc, #168]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 80020f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7ff f90c 	bl	8001314 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002100:	f7ff f908 	bl	8001314 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e20e      	b.n	8002530 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002112:	4b22      	ldr	r3, [pc, #136]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x1e0>
 800211e:	e000      	b.n	8002122 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002120:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d041      	beq.n	80021b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d01c      	beq.n	8002170 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002136:	4b19      	ldr	r3, [pc, #100]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8002138:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800213c:	4a17      	ldr	r2, [pc, #92]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002146:	f7ff f8e5 	bl	8001314 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214e:	f7ff f8e1 	bl	8001314 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e1e7      	b.n	8002530 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002160:	4b0e      	ldr	r3, [pc, #56]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8002162:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0ef      	beq.n	800214e <HAL_RCC_OscConfig+0x22e>
 800216e:	e020      	b.n	80021b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002170:	4b0a      	ldr	r3, [pc, #40]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8002172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002176:	4a09      	ldr	r2, [pc, #36]	@ (800219c <HAL_RCC_OscConfig+0x27c>)
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7ff f8c8 	bl	8001314 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002186:	e00d      	b.n	80021a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002188:	f7ff f8c4 	bl	8001314 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d906      	bls.n	80021a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e1ca      	b.n	8002530 <HAL_RCC_OscConfig+0x610>
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
 80021a0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021a4:	4b8c      	ldr	r3, [pc, #560]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 80021a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1ea      	bne.n	8002188 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 80a6 	beq.w	800230c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c0:	2300      	movs	r3, #0
 80021c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021c4:	4b84      	ldr	r3, [pc, #528]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 80021c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_OscConfig+0x2b4>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x2b6>
 80021d4:	2300      	movs	r3, #0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00d      	beq.n	80021f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021da:	4b7f      	ldr	r3, [pc, #508]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 80021dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021de:	4a7e      	ldr	r2, [pc, #504]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 80021e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80021e6:	4b7c      	ldr	r3, [pc, #496]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 80021e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021f2:	2301      	movs	r3, #1
 80021f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f6:	4b79      	ldr	r3, [pc, #484]	@ (80023dc <HAL_RCC_OscConfig+0x4bc>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d118      	bne.n	8002234 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002202:	4b76      	ldr	r3, [pc, #472]	@ (80023dc <HAL_RCC_OscConfig+0x4bc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a75      	ldr	r2, [pc, #468]	@ (80023dc <HAL_RCC_OscConfig+0x4bc>)
 8002208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800220c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800220e:	f7ff f881 	bl	8001314 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002216:	f7ff f87d 	bl	8001314 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e183      	b.n	8002530 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002228:	4b6c      	ldr	r3, [pc, #432]	@ (80023dc <HAL_RCC_OscConfig+0x4bc>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d108      	bne.n	800224e <HAL_RCC_OscConfig+0x32e>
 800223c:	4b66      	ldr	r3, [pc, #408]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002242:	4a65      	ldr	r2, [pc, #404]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800224c:	e024      	b.n	8002298 <HAL_RCC_OscConfig+0x378>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b05      	cmp	r3, #5
 8002254:	d110      	bne.n	8002278 <HAL_RCC_OscConfig+0x358>
 8002256:	4b60      	ldr	r3, [pc, #384]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800225c:	4a5e      	ldr	r2, [pc, #376]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 800225e:	f043 0304 	orr.w	r3, r3, #4
 8002262:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002266:	4b5c      	ldr	r3, [pc, #368]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 8002268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800226c:	4a5a      	ldr	r2, [pc, #360]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002276:	e00f      	b.n	8002298 <HAL_RCC_OscConfig+0x378>
 8002278:	4b57      	ldr	r3, [pc, #348]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800227e:	4a56      	ldr	r2, [pc, #344]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 8002280:	f023 0301 	bic.w	r3, r3, #1
 8002284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002288:	4b53      	ldr	r3, [pc, #332]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 800228a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800228e:	4a52      	ldr	r2, [pc, #328]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 8002290:	f023 0304 	bic.w	r3, r3, #4
 8002294:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d016      	beq.n	80022ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a0:	f7ff f838 	bl	8001314 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022a6:	e00a      	b.n	80022be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a8:	f7ff f834 	bl	8001314 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e138      	b.n	8002530 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022be:	4b46      	ldr	r3, [pc, #280]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0ed      	beq.n	80022a8 <HAL_RCC_OscConfig+0x388>
 80022cc:	e015      	b.n	80022fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ce:	f7ff f821 	bl	8001314 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022d4:	e00a      	b.n	80022ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d6:	f7ff f81d 	bl	8001314 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e121      	b.n	8002530 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022ec:	4b3a      	ldr	r3, [pc, #232]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1ed      	bne.n	80022d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022fa:	7ffb      	ldrb	r3, [r7, #31]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d105      	bne.n	800230c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002300:	4b35      	ldr	r3, [pc, #212]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 8002302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002304:	4a34      	ldr	r2, [pc, #208]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 8002306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800230a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b00      	cmp	r3, #0
 8002316:	d03c      	beq.n	8002392 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d01c      	beq.n	800235a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002320:	4b2d      	ldr	r3, [pc, #180]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 8002322:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002326:	4a2c      	ldr	r2, [pc, #176]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002330:	f7fe fff0 	bl	8001314 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002338:	f7fe ffec 	bl	8001314 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e0f2      	b.n	8002530 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800234a:	4b23      	ldr	r3, [pc, #140]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 800234c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0ef      	beq.n	8002338 <HAL_RCC_OscConfig+0x418>
 8002358:	e01b      	b.n	8002392 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800235a:	4b1f      	ldr	r3, [pc, #124]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 800235c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002360:	4a1d      	ldr	r2, [pc, #116]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236a:	f7fe ffd3 	bl	8001314 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002372:	f7fe ffcf 	bl	8001314 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e0d5      	b.n	8002530 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002384:	4b14      	ldr	r3, [pc, #80]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 8002386:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1ef      	bne.n	8002372 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 80c9 	beq.w	800252e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800239c:	4b0e      	ldr	r3, [pc, #56]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 030c 	and.w	r3, r3, #12
 80023a4:	2b0c      	cmp	r3, #12
 80023a6:	f000 8083 	beq.w	80024b0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d15e      	bne.n	8002470 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b2:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a08      	ldr	r2, [pc, #32]	@ (80023d8 <HAL_RCC_OscConfig+0x4b8>)
 80023b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023be:	f7fe ffa9 	bl	8001314 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c4:	e00c      	b.n	80023e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c6:	f7fe ffa5 	bl	8001314 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d905      	bls.n	80023e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e0ab      	b.n	8002530 <HAL_RCC_OscConfig+0x610>
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e0:	4b55      	ldr	r3, [pc, #340]	@ (8002538 <HAL_RCC_OscConfig+0x618>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1ec      	bne.n	80023c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ec:	4b52      	ldr	r3, [pc, #328]	@ (8002538 <HAL_RCC_OscConfig+0x618>)
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	4b52      	ldr	r3, [pc, #328]	@ (800253c <HAL_RCC_OscConfig+0x61c>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6a11      	ldr	r1, [r2, #32]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023fc:	3a01      	subs	r2, #1
 80023fe:	0112      	lsls	r2, r2, #4
 8002400:	4311      	orrs	r1, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002406:	0212      	lsls	r2, r2, #8
 8002408:	4311      	orrs	r1, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800240e:	0852      	lsrs	r2, r2, #1
 8002410:	3a01      	subs	r2, #1
 8002412:	0552      	lsls	r2, r2, #21
 8002414:	4311      	orrs	r1, r2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800241a:	0852      	lsrs	r2, r2, #1
 800241c:	3a01      	subs	r2, #1
 800241e:	0652      	lsls	r2, r2, #25
 8002420:	4311      	orrs	r1, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002426:	06d2      	lsls	r2, r2, #27
 8002428:	430a      	orrs	r2, r1
 800242a:	4943      	ldr	r1, [pc, #268]	@ (8002538 <HAL_RCC_OscConfig+0x618>)
 800242c:	4313      	orrs	r3, r2
 800242e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002430:	4b41      	ldr	r3, [pc, #260]	@ (8002538 <HAL_RCC_OscConfig+0x618>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a40      	ldr	r2, [pc, #256]	@ (8002538 <HAL_RCC_OscConfig+0x618>)
 8002436:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800243a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800243c:	4b3e      	ldr	r3, [pc, #248]	@ (8002538 <HAL_RCC_OscConfig+0x618>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4a3d      	ldr	r2, [pc, #244]	@ (8002538 <HAL_RCC_OscConfig+0x618>)
 8002442:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002446:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe ff64 	bl	8001314 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002450:	f7fe ff60 	bl	8001314 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e066      	b.n	8002530 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002462:	4b35      	ldr	r3, [pc, #212]	@ (8002538 <HAL_RCC_OscConfig+0x618>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x530>
 800246e:	e05e      	b.n	800252e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002470:	4b31      	ldr	r3, [pc, #196]	@ (8002538 <HAL_RCC_OscConfig+0x618>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a30      	ldr	r2, [pc, #192]	@ (8002538 <HAL_RCC_OscConfig+0x618>)
 8002476:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800247a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7fe ff4a 	bl	8001314 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002484:	f7fe ff46 	bl	8001314 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e04c      	b.n	8002530 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002496:	4b28      	ldr	r3, [pc, #160]	@ (8002538 <HAL_RCC_OscConfig+0x618>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80024a2:	4b25      	ldr	r3, [pc, #148]	@ (8002538 <HAL_RCC_OscConfig+0x618>)
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	4924      	ldr	r1, [pc, #144]	@ (8002538 <HAL_RCC_OscConfig+0x618>)
 80024a8:	4b25      	ldr	r3, [pc, #148]	@ (8002540 <HAL_RCC_OscConfig+0x620>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	60cb      	str	r3, [r1, #12]
 80024ae:	e03e      	b.n	800252e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e039      	b.n	8002530 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80024bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002538 <HAL_RCC_OscConfig+0x618>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f003 0203 	and.w	r2, r3, #3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d12c      	bne.n	800252a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024da:	3b01      	subs	r3, #1
 80024dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024de:	429a      	cmp	r2, r3
 80024e0:	d123      	bne.n	800252a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d11b      	bne.n	800252a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024fe:	429a      	cmp	r2, r3
 8002500:	d113      	bne.n	800252a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250c:	085b      	lsrs	r3, r3, #1
 800250e:	3b01      	subs	r3, #1
 8002510:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d109      	bne.n	800252a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002520:	085b      	lsrs	r3, r3, #1
 8002522:	3b01      	subs	r3, #1
 8002524:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002526:	429a      	cmp	r2, r3
 8002528:	d001      	beq.n	800252e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3720      	adds	r7, #32
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40021000 	.word	0x40021000
 800253c:	019f800c 	.word	0x019f800c
 8002540:	feeefffc 	.word	0xfeeefffc

08002544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e11e      	b.n	800279a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800255c:	4b91      	ldr	r3, [pc, #580]	@ (80027a4 <HAL_RCC_ClockConfig+0x260>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d910      	bls.n	800258c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256a:	4b8e      	ldr	r3, [pc, #568]	@ (80027a4 <HAL_RCC_ClockConfig+0x260>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 020f 	bic.w	r2, r3, #15
 8002572:	498c      	ldr	r1, [pc, #560]	@ (80027a4 <HAL_RCC_ClockConfig+0x260>)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b8a      	ldr	r3, [pc, #552]	@ (80027a4 <HAL_RCC_ClockConfig+0x260>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e106      	b.n	800279a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d073      	beq.n	8002680 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d129      	bne.n	80025f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a0:	4b81      	ldr	r3, [pc, #516]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0f4      	b.n	800279a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80025b0:	f000 f99e 	bl	80028f0 <RCC_GetSysClockFreqFromPLLSource>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4a7c      	ldr	r2, [pc, #496]	@ (80027ac <HAL_RCC_ClockConfig+0x268>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d93f      	bls.n	800263e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025be:	4b7a      	ldr	r3, [pc, #488]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d009      	beq.n	80025de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d033      	beq.n	800263e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d12f      	bne.n	800263e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025de:	4b72      	ldr	r3, [pc, #456]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025e6:	4a70      	ldr	r2, [pc, #448]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 80025e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80025ee:	2380      	movs	r3, #128	@ 0x80
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	e024      	b.n	800263e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d107      	bne.n	800260c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025fc:	4b6a      	ldr	r3, [pc, #424]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d109      	bne.n	800261c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0c6      	b.n	800279a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800260c:	4b66      	ldr	r3, [pc, #408]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0be      	b.n	800279a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800261c:	f000 f8ce 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 8002620:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4a61      	ldr	r2, [pc, #388]	@ (80027ac <HAL_RCC_ClockConfig+0x268>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d909      	bls.n	800263e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800262a:	4b5f      	ldr	r3, [pc, #380]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002632:	4a5d      	ldr	r2, [pc, #372]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 8002634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002638:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800263a:	2380      	movs	r3, #128	@ 0x80
 800263c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800263e:	4b5a      	ldr	r3, [pc, #360]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f023 0203 	bic.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4957      	ldr	r1, [pc, #348]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 800264c:	4313      	orrs	r3, r2
 800264e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002650:	f7fe fe60 	bl	8001314 <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	e00a      	b.n	800266e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002658:	f7fe fe5c 	bl	8001314 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e095      	b.n	800279a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	4b4e      	ldr	r3, [pc, #312]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 020c 	and.w	r2, r3, #12
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	429a      	cmp	r2, r3
 800267e:	d1eb      	bne.n	8002658 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d023      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002698:	4b43      	ldr	r3, [pc, #268]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	4a42      	ldr	r2, [pc, #264]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 800269e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d007      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80026b0:	4b3d      	ldr	r3, [pc, #244]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80026b8:	4a3b      	ldr	r2, [pc, #236]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 80026ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c0:	4b39      	ldr	r3, [pc, #228]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4936      	ldr	r1, [pc, #216]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2b80      	cmp	r3, #128	@ 0x80
 80026d8:	d105      	bne.n	80026e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80026da:	4b33      	ldr	r3, [pc, #204]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	4a32      	ldr	r2, [pc, #200]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 80026e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e6:	4b2f      	ldr	r3, [pc, #188]	@ (80027a4 <HAL_RCC_ClockConfig+0x260>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d21d      	bcs.n	8002730 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f4:	4b2b      	ldr	r3, [pc, #172]	@ (80027a4 <HAL_RCC_ClockConfig+0x260>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 020f 	bic.w	r2, r3, #15
 80026fc:	4929      	ldr	r1, [pc, #164]	@ (80027a4 <HAL_RCC_ClockConfig+0x260>)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002704:	f7fe fe06 	bl	8001314 <HAL_GetTick>
 8002708:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	e00a      	b.n	8002722 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270c:	f7fe fe02 	bl	8001314 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271a:	4293      	cmp	r3, r2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e03b      	b.n	800279a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b20      	ldr	r3, [pc, #128]	@ (80027a4 <HAL_RCC_ClockConfig+0x260>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d1ed      	bne.n	800270c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800273c:	4b1a      	ldr	r3, [pc, #104]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4917      	ldr	r1, [pc, #92]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 800274a:	4313      	orrs	r3, r2
 800274c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800275a:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	490f      	ldr	r1, [pc, #60]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800276e:	f000 f825 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 8002772:	4602      	mov	r2, r0
 8002774:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <HAL_RCC_ClockConfig+0x264>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	490c      	ldr	r1, [pc, #48]	@ (80027b0 <HAL_RCC_ClockConfig+0x26c>)
 8002780:	5ccb      	ldrb	r3, [r1, r3]
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	fa22 f303 	lsr.w	r3, r2, r3
 800278a:	4a0a      	ldr	r2, [pc, #40]	@ (80027b4 <HAL_RCC_ClockConfig+0x270>)
 800278c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800278e:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <HAL_RCC_ClockConfig+0x274>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fd72 	bl	800127c <HAL_InitTick>
 8002798:	4603      	mov	r3, r0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40022000 	.word	0x40022000
 80027a8:	40021000 	.word	0x40021000
 80027ac:	04c4b400 	.word	0x04c4b400
 80027b0:	08006684 	.word	0x08006684
 80027b4:	20000000 	.word	0x20000000
 80027b8:	20000004 	.word	0x20000004

080027bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002874 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d102      	bne.n	80027d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002878 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	e047      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027d4:	4b27      	ldr	r3, [pc, #156]	@ (8002874 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d102      	bne.n	80027e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027e0:	4b26      	ldr	r3, [pc, #152]	@ (800287c <HAL_RCC_GetSysClockFreq+0xc0>)
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	e03e      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80027e6:	4b23      	ldr	r3, [pc, #140]	@ (8002874 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b0c      	cmp	r3, #12
 80027f0:	d136      	bne.n	8002860 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027f2:	4b20      	ldr	r3, [pc, #128]	@ (8002874 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002874 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	3301      	adds	r3, #1
 8002808:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d10c      	bne.n	800282a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002810:	4a1a      	ldr	r2, [pc, #104]	@ (800287c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	fbb2 f3f3 	udiv	r3, r2, r3
 8002818:	4a16      	ldr	r2, [pc, #88]	@ (8002874 <HAL_RCC_GetSysClockFreq+0xb8>)
 800281a:	68d2      	ldr	r2, [r2, #12]
 800281c:	0a12      	lsrs	r2, r2, #8
 800281e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002822:	fb02 f303 	mul.w	r3, r2, r3
 8002826:	617b      	str	r3, [r7, #20]
      break;
 8002828:	e00c      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800282a:	4a13      	ldr	r2, [pc, #76]	@ (8002878 <HAL_RCC_GetSysClockFreq+0xbc>)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002832:	4a10      	ldr	r2, [pc, #64]	@ (8002874 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002834:	68d2      	ldr	r2, [r2, #12]
 8002836:	0a12      	lsrs	r2, r2, #8
 8002838:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800283c:	fb02 f303 	mul.w	r3, r2, r3
 8002840:	617b      	str	r3, [r7, #20]
      break;
 8002842:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002844:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	0e5b      	lsrs	r3, r3, #25
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	3301      	adds	r3, #1
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	e001      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002864:	693b      	ldr	r3, [r7, #16]
}
 8002866:	4618      	mov	r0, r3
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000
 8002878:	00f42400 	.word	0x00f42400
 800287c:	016e3600 	.word	0x016e3600

08002880 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002884:	4b03      	ldr	r3, [pc, #12]	@ (8002894 <HAL_RCC_GetHCLKFreq+0x14>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20000000 	.word	0x20000000

08002898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800289c:	f7ff fff0 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b06      	ldr	r3, [pc, #24]	@ (80028bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	0a1b      	lsrs	r3, r3, #8
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4904      	ldr	r1, [pc, #16]	@ (80028c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021000 	.word	0x40021000
 80028c0:	08006694 	.word	0x08006694

080028c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028c8:	f7ff ffda 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	0adb      	lsrs	r3, r3, #11
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	4904      	ldr	r1, [pc, #16]	@ (80028ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80028da:	5ccb      	ldrb	r3, [r1, r3]
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40021000 	.word	0x40021000
 80028ec:	08006694 	.word	0x08006694

080028f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002970 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002900:	4b1b      	ldr	r3, [pc, #108]	@ (8002970 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	3301      	adds	r3, #1
 800290c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	2b03      	cmp	r3, #3
 8002912:	d10c      	bne.n	800292e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002914:	4a17      	ldr	r2, [pc, #92]	@ (8002974 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	fbb2 f3f3 	udiv	r3, r2, r3
 800291c:	4a14      	ldr	r2, [pc, #80]	@ (8002970 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800291e:	68d2      	ldr	r2, [r2, #12]
 8002920:	0a12      	lsrs	r2, r2, #8
 8002922:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002926:	fb02 f303 	mul.w	r3, r2, r3
 800292a:	617b      	str	r3, [r7, #20]
    break;
 800292c:	e00c      	b.n	8002948 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800292e:	4a12      	ldr	r2, [pc, #72]	@ (8002978 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	4a0e      	ldr	r2, [pc, #56]	@ (8002970 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002938:	68d2      	ldr	r2, [r2, #12]
 800293a:	0a12      	lsrs	r2, r2, #8
 800293c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002940:	fb02 f303 	mul.w	r3, r2, r3
 8002944:	617b      	str	r3, [r7, #20]
    break;
 8002946:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002948:	4b09      	ldr	r3, [pc, #36]	@ (8002970 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	0e5b      	lsrs	r3, r3, #25
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	3301      	adds	r3, #1
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002960:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002962:	687b      	ldr	r3, [r7, #4]
}
 8002964:	4618      	mov	r0, r3
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	40021000 	.word	0x40021000
 8002974:	016e3600 	.word	0x016e3600
 8002978:	00f42400 	.word	0x00f42400

0800297c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002984:	2300      	movs	r3, #0
 8002986:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002988:	2300      	movs	r3, #0
 800298a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8098 	beq.w	8002aca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299e:	4b43      	ldr	r3, [pc, #268]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10d      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	4b40      	ldr	r3, [pc, #256]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ae:	4a3f      	ldr	r2, [pc, #252]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80029b6:	4b3d      	ldr	r3, [pc, #244]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c2:	2301      	movs	r3, #1
 80029c4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029c6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a39      	ldr	r2, [pc, #228]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029d2:	f7fe fc9f 	bl	8001314 <HAL_GetTick>
 80029d6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029d8:	e009      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029da:	f7fe fc9b 	bl	8001314 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d902      	bls.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	74fb      	strb	r3, [r7, #19]
        break;
 80029ec:	e005      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029ee:	4b30      	ldr	r3, [pc, #192]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0ef      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80029fa:	7cfb      	ldrb	r3, [r7, #19]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d159      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a00:	4b2a      	ldr	r3, [pc, #168]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a0a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d01e      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d019      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a1c:	4b23      	ldr	r3, [pc, #140]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a28:	4b20      	ldr	r3, [pc, #128]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a38:	4b1c      	ldr	r3, [pc, #112]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a48:	4a18      	ldr	r2, [pc, #96]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d016      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5a:	f7fe fc5b 	bl	8001314 <HAL_GetTick>
 8002a5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a60:	e00b      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7fe fc57 	bl	8001314 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d902      	bls.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	74fb      	strb	r3, [r7, #19]
            break;
 8002a78:	e006      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0ec      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002a88:	7cfb      	ldrb	r3, [r7, #19]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10b      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a8e:	4b07      	ldr	r3, [pc, #28]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9c:	4903      	ldr	r1, [pc, #12]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002aa6:	7cfb      	ldrb	r3, [r7, #19]
 8002aa8:	74bb      	strb	r3, [r7, #18]
 8002aaa:	e005      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ab8:	7c7b      	ldrb	r3, [r7, #17]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d105      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002abe:	4ba6      	ldr	r3, [pc, #664]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac2:	4aa5      	ldr	r2, [pc, #660]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ac8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ad6:	4ba0      	ldr	r3, [pc, #640]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002adc:	f023 0203 	bic.w	r2, r3, #3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	499c      	ldr	r1, [pc, #624]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002af8:	4b97      	ldr	r3, [pc, #604]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afe:	f023 020c 	bic.w	r2, r3, #12
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	4994      	ldr	r1, [pc, #592]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b1a:	4b8f      	ldr	r3, [pc, #572]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b20:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	498b      	ldr	r1, [pc, #556]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b3c:	4b86      	ldr	r3, [pc, #536]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	4983      	ldr	r1, [pc, #524]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b5e:	4b7e      	ldr	r3, [pc, #504]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b64:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	497a      	ldr	r1, [pc, #488]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b80:	4b75      	ldr	r3, [pc, #468]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b86:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	4972      	ldr	r1, [pc, #456]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ba2:	4b6d      	ldr	r3, [pc, #436]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	4969      	ldr	r1, [pc, #420]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bc4:	4b64      	ldr	r3, [pc, #400]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	4961      	ldr	r1, [pc, #388]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002be6:	4b5c      	ldr	r3, [pc, #368]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	4958      	ldr	r1, [pc, #352]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d015      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c08:	4b53      	ldr	r3, [pc, #332]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c16:	4950      	ldr	r1, [pc, #320]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c26:	d105      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c28:	4b4b      	ldr	r3, [pc, #300]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4a4a      	ldr	r2, [pc, #296]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c32:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d015      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c40:	4b45      	ldr	r3, [pc, #276]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c46:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4e:	4942      	ldr	r1, [pc, #264]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c5e:	d105      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c60:	4b3d      	ldr	r3, [pc, #244]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4a3c      	ldr	r2, [pc, #240]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c6a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d015      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c78:	4b37      	ldr	r3, [pc, #220]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	4934      	ldr	r1, [pc, #208]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c96:	d105      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c98:	4b2f      	ldr	r3, [pc, #188]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4a2e      	ldr	r2, [pc, #184]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ca2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d015      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cb0:	4b29      	ldr	r3, [pc, #164]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cbe:	4926      	ldr	r1, [pc, #152]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cce:	d105      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cd0:	4b21      	ldr	r3, [pc, #132]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4a20      	ldr	r2, [pc, #128]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cda:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d015      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf6:	4918      	ldr	r1, [pc, #96]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d06:	d105      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d08:	4b13      	ldr	r3, [pc, #76]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4a12      	ldr	r2, [pc, #72]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d015      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d20:	4b0d      	ldr	r3, [pc, #52]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d2e:	490a      	ldr	r1, [pc, #40]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d40:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4a04      	ldr	r2, [pc, #16]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d4a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002d4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000

08002d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e049      	b.n	8002e02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fd fed2 	bl	8000b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3304      	adds	r3, #4
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	f000 faa4 	bl	80032e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e049      	b.n	8002eb0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d106      	bne.n	8002e36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f841 	bl	8002eb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3304      	adds	r3, #4
 8002e46:	4619      	mov	r1, r3
 8002e48:	4610      	mov	r0, r2
 8002e4a:	f000 fa4d 	bl	80032e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e0ff      	b.n	80030ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b14      	cmp	r3, #20
 8002ef6:	f200 80f0 	bhi.w	80030da <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002efa:	a201      	add	r2, pc, #4	@ (adr r2, 8002f00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f00:	08002f55 	.word	0x08002f55
 8002f04:	080030db 	.word	0x080030db
 8002f08:	080030db 	.word	0x080030db
 8002f0c:	080030db 	.word	0x080030db
 8002f10:	08002f95 	.word	0x08002f95
 8002f14:	080030db 	.word	0x080030db
 8002f18:	080030db 	.word	0x080030db
 8002f1c:	080030db 	.word	0x080030db
 8002f20:	08002fd7 	.word	0x08002fd7
 8002f24:	080030db 	.word	0x080030db
 8002f28:	080030db 	.word	0x080030db
 8002f2c:	080030db 	.word	0x080030db
 8002f30:	08003017 	.word	0x08003017
 8002f34:	080030db 	.word	0x080030db
 8002f38:	080030db 	.word	0x080030db
 8002f3c:	080030db 	.word	0x080030db
 8002f40:	08003059 	.word	0x08003059
 8002f44:	080030db 	.word	0x080030db
 8002f48:	080030db 	.word	0x080030db
 8002f4c:	080030db 	.word	0x080030db
 8002f50:	08003099 	.word	0x08003099
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fa60 	bl	8003420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0208 	orr.w	r2, r2, #8
 8002f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0204 	bic.w	r2, r2, #4
 8002f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6999      	ldr	r1, [r3, #24]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	619a      	str	r2, [r3, #24]
      break;
 8002f92:	e0a5      	b.n	80030e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fad0 	bl	8003540 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6999      	ldr	r1, [r3, #24]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	021a      	lsls	r2, r3, #8
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	619a      	str	r2, [r3, #24]
      break;
 8002fd4:	e084      	b.n	80030e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fb39 	bl	8003654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69da      	ldr	r2, [r3, #28]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0208 	orr.w	r2, r2, #8
 8002ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69da      	ldr	r2, [r3, #28]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0204 	bic.w	r2, r2, #4
 8003000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69d9      	ldr	r1, [r3, #28]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	61da      	str	r2, [r3, #28]
      break;
 8003014:	e064      	b.n	80030e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fba1 	bl	8003764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69d9      	ldr	r1, [r3, #28]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	021a      	lsls	r2, r3, #8
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	61da      	str	r2, [r3, #28]
      break;
 8003056:	e043      	b.n	80030e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fc0a 	bl	8003878 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0208 	orr.w	r2, r2, #8
 8003072:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0204 	bic.w	r2, r2, #4
 8003082:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003096:	e023      	b.n	80030e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68b9      	ldr	r1, [r7, #8]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fc4e 	bl	8003940 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030c2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	021a      	lsls	r2, r3, #8
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80030d8:	e002      	b.n	80030e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	75fb      	strb	r3, [r7, #23]
      break;
 80030de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop

080030f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_TIM_ConfigClockSource+0x1c>
 800310c:	2302      	movs	r3, #2
 800310e:	e0de      	b.n	80032ce <HAL_TIM_ConfigClockSource+0x1da>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800312e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800313a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a63      	ldr	r2, [pc, #396]	@ (80032d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	f000 80a9 	beq.w	80032a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003150:	4a61      	ldr	r2, [pc, #388]	@ (80032d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	f200 80ae 	bhi.w	80032b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003158:	4a60      	ldr	r2, [pc, #384]	@ (80032dc <HAL_TIM_ConfigClockSource+0x1e8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	f000 80a1 	beq.w	80032a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003160:	4a5e      	ldr	r2, [pc, #376]	@ (80032dc <HAL_TIM_ConfigClockSource+0x1e8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	f200 80a6 	bhi.w	80032b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003168:	4a5d      	ldr	r2, [pc, #372]	@ (80032e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800316a:	4293      	cmp	r3, r2
 800316c:	f000 8099 	beq.w	80032a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003170:	4a5b      	ldr	r2, [pc, #364]	@ (80032e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003172:	4293      	cmp	r3, r2
 8003174:	f200 809e 	bhi.w	80032b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003178:	4a5a      	ldr	r2, [pc, #360]	@ (80032e4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	f000 8091 	beq.w	80032a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003180:	4a58      	ldr	r2, [pc, #352]	@ (80032e4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	f200 8096 	bhi.w	80032b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003188:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800318c:	f000 8089 	beq.w	80032a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003190:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003194:	f200 808e 	bhi.w	80032b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003198:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800319c:	d03e      	beq.n	800321c <HAL_TIM_ConfigClockSource+0x128>
 800319e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031a2:	f200 8087 	bhi.w	80032b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80031a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031aa:	f000 8086 	beq.w	80032ba <HAL_TIM_ConfigClockSource+0x1c6>
 80031ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031b2:	d87f      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80031b4:	2b70      	cmp	r3, #112	@ 0x70
 80031b6:	d01a      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0xfa>
 80031b8:	2b70      	cmp	r3, #112	@ 0x70
 80031ba:	d87b      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80031bc:	2b60      	cmp	r3, #96	@ 0x60
 80031be:	d050      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0x16e>
 80031c0:	2b60      	cmp	r3, #96	@ 0x60
 80031c2:	d877      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80031c4:	2b50      	cmp	r3, #80	@ 0x50
 80031c6:	d03c      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0x14e>
 80031c8:	2b50      	cmp	r3, #80	@ 0x50
 80031ca:	d873      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80031cc:	2b40      	cmp	r3, #64	@ 0x40
 80031ce:	d058      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x18e>
 80031d0:	2b40      	cmp	r3, #64	@ 0x40
 80031d2:	d86f      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80031d4:	2b30      	cmp	r3, #48	@ 0x30
 80031d6:	d064      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80031d8:	2b30      	cmp	r3, #48	@ 0x30
 80031da:	d86b      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d060      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d867      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d05c      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d05a      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80031ec:	e062      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031fe:	f000 fc81 	bl	8003b04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003210:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	609a      	str	r2, [r3, #8]
      break;
 800321a:	e04f      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800322c:	f000 fc6a 	bl	8003b04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800323e:	609a      	str	r2, [r3, #8]
      break;
 8003240:	e03c      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800324e:	461a      	mov	r2, r3
 8003250:	f000 fbdc 	bl	8003a0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2150      	movs	r1, #80	@ 0x50
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fc35 	bl	8003aca <TIM_ITRx_SetConfig>
      break;
 8003260:	e02c      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800326e:	461a      	mov	r2, r3
 8003270:	f000 fbfb 	bl	8003a6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2160      	movs	r1, #96	@ 0x60
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fc25 	bl	8003aca <TIM_ITRx_SetConfig>
      break;
 8003280:	e01c      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800328e:	461a      	mov	r2, r3
 8003290:	f000 fbbc 	bl	8003a0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2140      	movs	r1, #64	@ 0x40
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fc15 	bl	8003aca <TIM_ITRx_SetConfig>
      break;
 80032a0:	e00c      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4619      	mov	r1, r3
 80032ac:	4610      	mov	r0, r2
 80032ae:	f000 fc0c 	bl	8003aca <TIM_ITRx_SetConfig>
      break;
 80032b2:	e003      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
      break;
 80032b8:	e000      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80032ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	00100070 	.word	0x00100070
 80032dc:	00100040 	.word	0x00100040
 80032e0:	00100030 	.word	0x00100030
 80032e4:	00100020 	.word	0x00100020

080032e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a42      	ldr	r2, [pc, #264]	@ (8003404 <TIM_Base_SetConfig+0x11c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00f      	beq.n	8003320 <TIM_Base_SetConfig+0x38>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003306:	d00b      	beq.n	8003320 <TIM_Base_SetConfig+0x38>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a3f      	ldr	r2, [pc, #252]	@ (8003408 <TIM_Base_SetConfig+0x120>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d007      	beq.n	8003320 <TIM_Base_SetConfig+0x38>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a3e      	ldr	r2, [pc, #248]	@ (800340c <TIM_Base_SetConfig+0x124>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d003      	beq.n	8003320 <TIM_Base_SetConfig+0x38>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a3d      	ldr	r2, [pc, #244]	@ (8003410 <TIM_Base_SetConfig+0x128>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d108      	bne.n	8003332 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a33      	ldr	r2, [pc, #204]	@ (8003404 <TIM_Base_SetConfig+0x11c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d01b      	beq.n	8003372 <TIM_Base_SetConfig+0x8a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003340:	d017      	beq.n	8003372 <TIM_Base_SetConfig+0x8a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a30      	ldr	r2, [pc, #192]	@ (8003408 <TIM_Base_SetConfig+0x120>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d013      	beq.n	8003372 <TIM_Base_SetConfig+0x8a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a2f      	ldr	r2, [pc, #188]	@ (800340c <TIM_Base_SetConfig+0x124>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00f      	beq.n	8003372 <TIM_Base_SetConfig+0x8a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a2e      	ldr	r2, [pc, #184]	@ (8003410 <TIM_Base_SetConfig+0x128>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00b      	beq.n	8003372 <TIM_Base_SetConfig+0x8a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a2d      	ldr	r2, [pc, #180]	@ (8003414 <TIM_Base_SetConfig+0x12c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <TIM_Base_SetConfig+0x8a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a2c      	ldr	r2, [pc, #176]	@ (8003418 <TIM_Base_SetConfig+0x130>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d003      	beq.n	8003372 <TIM_Base_SetConfig+0x8a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a2b      	ldr	r2, [pc, #172]	@ (800341c <TIM_Base_SetConfig+0x134>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d108      	bne.n	8003384 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a16      	ldr	r2, [pc, #88]	@ (8003404 <TIM_Base_SetConfig+0x11c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00f      	beq.n	80033d0 <TIM_Base_SetConfig+0xe8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a17      	ldr	r2, [pc, #92]	@ (8003410 <TIM_Base_SetConfig+0x128>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00b      	beq.n	80033d0 <TIM_Base_SetConfig+0xe8>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a16      	ldr	r2, [pc, #88]	@ (8003414 <TIM_Base_SetConfig+0x12c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d007      	beq.n	80033d0 <TIM_Base_SetConfig+0xe8>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a15      	ldr	r2, [pc, #84]	@ (8003418 <TIM_Base_SetConfig+0x130>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d003      	beq.n	80033d0 <TIM_Base_SetConfig+0xe8>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a14      	ldr	r2, [pc, #80]	@ (800341c <TIM_Base_SetConfig+0x134>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d103      	bne.n	80033d8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d105      	bne.n	80033f6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f023 0201 	bic.w	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	611a      	str	r2, [r3, #16]
  }
}
 80033f6:	bf00      	nop
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40012c00 	.word	0x40012c00
 8003408:	40000400 	.word	0x40000400
 800340c:	40000800 	.word	0x40000800
 8003410:	40013400 	.word	0x40013400
 8003414:	40014000 	.word	0x40014000
 8003418:	40014400 	.word	0x40014400
 800341c:	40014800 	.word	0x40014800

08003420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f023 0201 	bic.w	r2, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800344e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0303 	bic.w	r3, r3, #3
 800345a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f023 0302 	bic.w	r3, r3, #2
 800346c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a2c      	ldr	r2, [pc, #176]	@ (800352c <TIM_OC1_SetConfig+0x10c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00f      	beq.n	80034a0 <TIM_OC1_SetConfig+0x80>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a2b      	ldr	r2, [pc, #172]	@ (8003530 <TIM_OC1_SetConfig+0x110>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00b      	beq.n	80034a0 <TIM_OC1_SetConfig+0x80>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a2a      	ldr	r2, [pc, #168]	@ (8003534 <TIM_OC1_SetConfig+0x114>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d007      	beq.n	80034a0 <TIM_OC1_SetConfig+0x80>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a29      	ldr	r2, [pc, #164]	@ (8003538 <TIM_OC1_SetConfig+0x118>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d003      	beq.n	80034a0 <TIM_OC1_SetConfig+0x80>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a28      	ldr	r2, [pc, #160]	@ (800353c <TIM_OC1_SetConfig+0x11c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d10c      	bne.n	80034ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f023 0308 	bic.w	r3, r3, #8
 80034a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f023 0304 	bic.w	r3, r3, #4
 80034b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a1b      	ldr	r2, [pc, #108]	@ (800352c <TIM_OC1_SetConfig+0x10c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00f      	beq.n	80034e2 <TIM_OC1_SetConfig+0xc2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003530 <TIM_OC1_SetConfig+0x110>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00b      	beq.n	80034e2 <TIM_OC1_SetConfig+0xc2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a19      	ldr	r2, [pc, #100]	@ (8003534 <TIM_OC1_SetConfig+0x114>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d007      	beq.n	80034e2 <TIM_OC1_SetConfig+0xc2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a18      	ldr	r2, [pc, #96]	@ (8003538 <TIM_OC1_SetConfig+0x118>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d003      	beq.n	80034e2 <TIM_OC1_SetConfig+0xc2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a17      	ldr	r2, [pc, #92]	@ (800353c <TIM_OC1_SetConfig+0x11c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d111      	bne.n	8003506 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	621a      	str	r2, [r3, #32]
}
 8003520:	bf00      	nop
 8003522:	371c      	adds	r7, #28
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	40012c00 	.word	0x40012c00
 8003530:	40013400 	.word	0x40013400
 8003534:	40014000 	.word	0x40014000
 8003538:	40014400 	.word	0x40014400
 800353c:	40014800 	.word	0x40014800

08003540 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f023 0210 	bic.w	r2, r3, #16
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800356e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800357a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	021b      	lsls	r3, r3, #8
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4313      	orrs	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f023 0320 	bic.w	r3, r3, #32
 800358e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a28      	ldr	r2, [pc, #160]	@ (8003640 <TIM_OC2_SetConfig+0x100>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <TIM_OC2_SetConfig+0x6c>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a27      	ldr	r2, [pc, #156]	@ (8003644 <TIM_OC2_SetConfig+0x104>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d10d      	bne.n	80035c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003640 <TIM_OC2_SetConfig+0x100>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00f      	beq.n	80035f0 <TIM_OC2_SetConfig+0xb0>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003644 <TIM_OC2_SetConfig+0x104>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00b      	beq.n	80035f0 <TIM_OC2_SetConfig+0xb0>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a1b      	ldr	r2, [pc, #108]	@ (8003648 <TIM_OC2_SetConfig+0x108>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d007      	beq.n	80035f0 <TIM_OC2_SetConfig+0xb0>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a1a      	ldr	r2, [pc, #104]	@ (800364c <TIM_OC2_SetConfig+0x10c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d003      	beq.n	80035f0 <TIM_OC2_SetConfig+0xb0>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a19      	ldr	r2, [pc, #100]	@ (8003650 <TIM_OC2_SetConfig+0x110>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d113      	bne.n	8003618 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	621a      	str	r2, [r3, #32]
}
 8003632:	bf00      	nop
 8003634:	371c      	adds	r7, #28
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40012c00 	.word	0x40012c00
 8003644:	40013400 	.word	0x40013400
 8003648:	40014000 	.word	0x40014000
 800364c:	40014400 	.word	0x40014400
 8003650:	40014800 	.word	0x40014800

08003654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 0303 	bic.w	r3, r3, #3
 800368e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	021b      	lsls	r3, r3, #8
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a27      	ldr	r2, [pc, #156]	@ (8003750 <TIM_OC3_SetConfig+0xfc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d003      	beq.n	80036be <TIM_OC3_SetConfig+0x6a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a26      	ldr	r2, [pc, #152]	@ (8003754 <TIM_OC3_SetConfig+0x100>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d10d      	bne.n	80036da <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	021b      	lsls	r3, r3, #8
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003750 <TIM_OC3_SetConfig+0xfc>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00f      	beq.n	8003702 <TIM_OC3_SetConfig+0xae>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003754 <TIM_OC3_SetConfig+0x100>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00b      	beq.n	8003702 <TIM_OC3_SetConfig+0xae>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003758 <TIM_OC3_SetConfig+0x104>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d007      	beq.n	8003702 <TIM_OC3_SetConfig+0xae>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a19      	ldr	r2, [pc, #100]	@ (800375c <TIM_OC3_SetConfig+0x108>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d003      	beq.n	8003702 <TIM_OC3_SetConfig+0xae>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a18      	ldr	r2, [pc, #96]	@ (8003760 <TIM_OC3_SetConfig+0x10c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d113      	bne.n	800372a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	621a      	str	r2, [r3, #32]
}
 8003744:	bf00      	nop
 8003746:	371c      	adds	r7, #28
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	40012c00 	.word	0x40012c00
 8003754:	40013400 	.word	0x40013400
 8003758:	40014000 	.word	0x40014000
 800375c:	40014400 	.word	0x40014400
 8003760:	40014800 	.word	0x40014800

08003764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800379e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	031b      	lsls	r3, r3, #12
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a28      	ldr	r2, [pc, #160]	@ (8003864 <TIM_OC4_SetConfig+0x100>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d003      	beq.n	80037d0 <TIM_OC4_SetConfig+0x6c>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a27      	ldr	r2, [pc, #156]	@ (8003868 <TIM_OC4_SetConfig+0x104>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d10d      	bne.n	80037ec <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80037d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	031b      	lsls	r3, r3, #12
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003864 <TIM_OC4_SetConfig+0x100>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00f      	beq.n	8003814 <TIM_OC4_SetConfig+0xb0>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003868 <TIM_OC4_SetConfig+0x104>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00b      	beq.n	8003814 <TIM_OC4_SetConfig+0xb0>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a1b      	ldr	r2, [pc, #108]	@ (800386c <TIM_OC4_SetConfig+0x108>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d007      	beq.n	8003814 <TIM_OC4_SetConfig+0xb0>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a1a      	ldr	r2, [pc, #104]	@ (8003870 <TIM_OC4_SetConfig+0x10c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d003      	beq.n	8003814 <TIM_OC4_SetConfig+0xb0>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a19      	ldr	r2, [pc, #100]	@ (8003874 <TIM_OC4_SetConfig+0x110>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d113      	bne.n	800383c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800381a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003822:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	019b      	lsls	r3, r3, #6
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	019b      	lsls	r3, r3, #6
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	621a      	str	r2, [r3, #32]
}
 8003856:	bf00      	nop
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40012c00 	.word	0x40012c00
 8003868:	40013400 	.word	0x40013400
 800386c:	40014000 	.word	0x40014000
 8003870:	40014400 	.word	0x40014400
 8003874:	40014800 	.word	0x40014800

08003878 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800389e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80038bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	041b      	lsls	r3, r3, #16
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a17      	ldr	r2, [pc, #92]	@ (800392c <TIM_OC5_SetConfig+0xb4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00f      	beq.n	80038f2 <TIM_OC5_SetConfig+0x7a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a16      	ldr	r2, [pc, #88]	@ (8003930 <TIM_OC5_SetConfig+0xb8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00b      	beq.n	80038f2 <TIM_OC5_SetConfig+0x7a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a15      	ldr	r2, [pc, #84]	@ (8003934 <TIM_OC5_SetConfig+0xbc>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d007      	beq.n	80038f2 <TIM_OC5_SetConfig+0x7a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a14      	ldr	r2, [pc, #80]	@ (8003938 <TIM_OC5_SetConfig+0xc0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d003      	beq.n	80038f2 <TIM_OC5_SetConfig+0x7a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a13      	ldr	r2, [pc, #76]	@ (800393c <TIM_OC5_SetConfig+0xc4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d109      	bne.n	8003906 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	021b      	lsls	r3, r3, #8
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	4313      	orrs	r3, r2
 8003904:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	621a      	str	r2, [r3, #32]
}
 8003920:	bf00      	nop
 8003922:	371c      	adds	r7, #28
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	40012c00 	.word	0x40012c00
 8003930:	40013400 	.word	0x40013400
 8003934:	40014000 	.word	0x40014000
 8003938:	40014400 	.word	0x40014400
 800393c:	40014800 	.word	0x40014800

08003940 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800396e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4313      	orrs	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003986:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	051b      	lsls	r3, r3, #20
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a18      	ldr	r2, [pc, #96]	@ (80039f8 <TIM_OC6_SetConfig+0xb8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00f      	beq.n	80039bc <TIM_OC6_SetConfig+0x7c>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a17      	ldr	r2, [pc, #92]	@ (80039fc <TIM_OC6_SetConfig+0xbc>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00b      	beq.n	80039bc <TIM_OC6_SetConfig+0x7c>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a16      	ldr	r2, [pc, #88]	@ (8003a00 <TIM_OC6_SetConfig+0xc0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d007      	beq.n	80039bc <TIM_OC6_SetConfig+0x7c>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a15      	ldr	r2, [pc, #84]	@ (8003a04 <TIM_OC6_SetConfig+0xc4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d003      	beq.n	80039bc <TIM_OC6_SetConfig+0x7c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a14      	ldr	r2, [pc, #80]	@ (8003a08 <TIM_OC6_SetConfig+0xc8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d109      	bne.n	80039d0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	029b      	lsls	r3, r3, #10
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	621a      	str	r2, [r3, #32]
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40012c00 	.word	0x40012c00
 80039fc:	40013400 	.word	0x40013400
 8003a00:	40014000 	.word	0x40014000
 8003a04:	40014400 	.word	0x40014400
 8003a08:	40014800 	.word	0x40014800

08003a0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	f023 0201 	bic.w	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f023 030a 	bic.w	r3, r3, #10
 8003a48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	621a      	str	r2, [r3, #32]
}
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b087      	sub	sp, #28
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	f023 0210 	bic.w	r2, r3, #16
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	031b      	lsls	r3, r3, #12
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003aa6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	621a      	str	r2, [r3, #32]
}
 8003abe:	bf00      	nop
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b085      	sub	sp, #20
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003ae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ae4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f043 0307 	orr.w	r3, r3, #7
 8003af0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	609a      	str	r2, [r3, #8]
}
 8003af8:	bf00      	nop
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	021a      	lsls	r2, r3, #8
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	609a      	str	r2, [r3, #8]
}
 8003b38:	bf00      	nop
 8003b3a:	371c      	adds	r7, #28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e065      	b.n	8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a2c      	ldr	r2, [pc, #176]	@ (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d004      	beq.n	8003b90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a2b      	ldr	r2, [pc, #172]	@ (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d108      	bne.n	8003ba2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003b96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003ba8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d018      	beq.n	8003bfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd2:	d013      	beq.n	8003bfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a18      	ldr	r2, [pc, #96]	@ (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00e      	beq.n	8003bfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a17      	ldr	r2, [pc, #92]	@ (8003c40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d009      	beq.n	8003bfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a12      	ldr	r2, [pc, #72]	@ (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d004      	beq.n	8003bfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a13      	ldr	r2, [pc, #76]	@ (8003c44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d10c      	bne.n	8003c16 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40013400 	.word	0x40013400
 8003c3c:	40000400 	.word	0x40000400
 8003c40:	40000800 	.word	0x40000800
 8003c44:	40014000 	.word	0x40014000

08003c48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e042      	b.n	8003ce0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d106      	bne.n	8003c72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7fc ffb5 	bl	8000bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2224      	movs	r2, #36	@ 0x24
 8003c76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0201 	bic.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 ffac 	bl	8004bf0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fcdd 	bl	8004658 <UART_SetConfig>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e01b      	b.n	8003ce0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f001 f82b 	bl	8004d34 <UART_CheckIdleState>
 8003cde:	4603      	mov	r3, r0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	@ 0x28
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	603b      	str	r3, [r7, #0]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	d17b      	bne.n	8003dfa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_UART_Transmit+0x26>
 8003d08:	88fb      	ldrh	r3, [r7, #6]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e074      	b.n	8003dfc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2221      	movs	r2, #33	@ 0x21
 8003d1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d22:	f7fd faf7 	bl	8001314 <HAL_GetTick>
 8003d26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	88fa      	ldrh	r2, [r7, #6]
 8003d2c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	88fa      	ldrh	r2, [r7, #6]
 8003d34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d40:	d108      	bne.n	8003d54 <HAL_UART_Transmit+0x6c>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d104      	bne.n	8003d54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	e003      	b.n	8003d5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d5c:	e030      	b.n	8003dc0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2200      	movs	r2, #0
 8003d66:	2180      	movs	r1, #128	@ 0x80
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f001 f88d 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e03d      	b.n	8003dfc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10b      	bne.n	8003d9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d94:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	3302      	adds	r3, #2
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	e007      	b.n	8003dae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	781a      	ldrb	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	3301      	adds	r3, #1
 8003dac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1c8      	bne.n	8003d5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2140      	movs	r1, #64	@ 0x40
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f001 f856 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e006      	b.n	8003dfc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	e000      	b.n	8003dfc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
  }
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3720      	adds	r7, #32
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	@ 0x28
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	f040 80b5 	bne.w	8003f8a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_UART_Receive+0x28>
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0ad      	b.n	8003f8c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2222      	movs	r2, #34	@ 0x22
 8003e3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e46:	f7fd fa65 	bl	8001314 <HAL_GetTick>
 8003e4a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	88fa      	ldrh	r2, [r7, #6]
 8003e50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	88fa      	ldrh	r2, [r7, #6]
 8003e58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e64:	d10e      	bne.n	8003e84 <HAL_UART_Receive+0x80>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d105      	bne.n	8003e7a <HAL_UART_Receive+0x76>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003e74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e78:	e02d      	b.n	8003ed6 <HAL_UART_Receive+0xd2>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	22ff      	movs	r2, #255	@ 0xff
 8003e7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e82:	e028      	b.n	8003ed6 <HAL_UART_Receive+0xd2>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10d      	bne.n	8003ea8 <HAL_UART_Receive+0xa4>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d104      	bne.n	8003e9e <HAL_UART_Receive+0x9a>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	22ff      	movs	r2, #255	@ 0xff
 8003e98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e9c:	e01b      	b.n	8003ed6 <HAL_UART_Receive+0xd2>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	227f      	movs	r2, #127	@ 0x7f
 8003ea2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003ea6:	e016      	b.n	8003ed6 <HAL_UART_Receive+0xd2>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003eb0:	d10d      	bne.n	8003ece <HAL_UART_Receive+0xca>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d104      	bne.n	8003ec4 <HAL_UART_Receive+0xc0>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	227f      	movs	r2, #127	@ 0x7f
 8003ebe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003ec2:	e008      	b.n	8003ed6 <HAL_UART_Receive+0xd2>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	223f      	movs	r2, #63	@ 0x3f
 8003ec8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003ecc:	e003      	b.n	8003ed6 <HAL_UART_Receive+0xd2>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003edc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee6:	d108      	bne.n	8003efa <HAL_UART_Receive+0xf6>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d104      	bne.n	8003efa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	61bb      	str	r3, [r7, #24]
 8003ef8:	e003      	b.n	8003f02 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003f02:	e036      	b.n	8003f72 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2120      	movs	r1, #32
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 ffba 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e032      	b.n	8003f8c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10c      	bne.n	8003f46 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	8a7b      	ldrh	r3, [r7, #18]
 8003f36:	4013      	ands	r3, r2
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	3302      	adds	r3, #2
 8003f42:	61bb      	str	r3, [r7, #24]
 8003f44:	e00c      	b.n	8003f60 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	8a7b      	ldrh	r3, [r7, #18]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	4013      	ands	r3, r2
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1c2      	bne.n	8003f04 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	e000      	b.n	8003f8c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003f8a:	2302      	movs	r3, #2
  }
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3720      	adds	r7, #32
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b0ba      	sub	sp, #232	@ 0xe8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003fba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003fbe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003fc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d11b      	bne.n	8004008 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd4:	f003 0320 	and.w	r3, r3, #32
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d015      	beq.n	8004008 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d105      	bne.n	8003ff4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d009      	beq.n	8004008 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 8300 	beq.w	80045fe <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	4798      	blx	r3
      }
      return;
 8004006:	e2fa      	b.n	80045fe <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004008:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8123 	beq.w	8004258 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004012:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004016:	4b8d      	ldr	r3, [pc, #564]	@ (800424c <HAL_UART_IRQHandler+0x2b8>)
 8004018:	4013      	ands	r3, r2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800401e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004022:	4b8b      	ldr	r3, [pc, #556]	@ (8004250 <HAL_UART_IRQHandler+0x2bc>)
 8004024:	4013      	ands	r3, r2
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 8116 	beq.w	8004258 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800402c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d011      	beq.n	800405c <HAL_UART_IRQHandler+0xc8>
 8004038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800403c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00b      	beq.n	800405c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2201      	movs	r2, #1
 800404a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004052:	f043 0201 	orr.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800405c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d011      	beq.n	800408c <HAL_UART_IRQHandler+0xf8>
 8004068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00b      	beq.n	800408c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2202      	movs	r2, #2
 800407a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004082:	f043 0204 	orr.w	r2, r3, #4
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800408c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d011      	beq.n	80040bc <HAL_UART_IRQHandler+0x128>
 8004098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00b      	beq.n	80040bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2204      	movs	r2, #4
 80040aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b2:	f043 0202 	orr.w	r2, r3, #2
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d017      	beq.n	80040f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d105      	bne.n	80040e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80040d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80040d8:	4b5c      	ldr	r3, [pc, #368]	@ (800424c <HAL_UART_IRQHandler+0x2b8>)
 80040da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00b      	beq.n	80040f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2208      	movs	r2, #8
 80040e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ee:	f043 0208 	orr.w	r2, r3, #8
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80040f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004100:	2b00      	cmp	r3, #0
 8004102:	d012      	beq.n	800412a <HAL_UART_IRQHandler+0x196>
 8004104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004108:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00c      	beq.n	800412a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004118:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004120:	f043 0220 	orr.w	r2, r3, #32
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8266 	beq.w	8004602 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d013      	beq.n	800416a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d105      	bne.n	800415a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800414e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d007      	beq.n	800416a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004170:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417e:	2b40      	cmp	r3, #64	@ 0x40
 8004180:	d005      	beq.n	800418e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004186:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800418a:	2b00      	cmp	r3, #0
 800418c:	d054      	beq.n	8004238 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fee7 	bl	8004f62 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419e:	2b40      	cmp	r3, #64	@ 0x40
 80041a0:	d146      	bne.n	8004230 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3308      	adds	r3, #8
 80041a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80041b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3308      	adds	r3, #8
 80041ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80041ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80041d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1d9      	bne.n	80041a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d017      	beq.n	8004228 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041fe:	4a15      	ldr	r2, [pc, #84]	@ (8004254 <HAL_UART_IRQHandler+0x2c0>)
 8004200:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004208:	4618      	mov	r0, r3
 800420a:	f7fd fac2 	bl	8001792 <HAL_DMA_Abort_IT>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d019      	beq.n	8004248 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800421a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004222:	4610      	mov	r0, r2
 8004224:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004226:	e00f      	b.n	8004248 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f9ff 	bl	800462c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422e:	e00b      	b.n	8004248 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f9fb 	bl	800462c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004236:	e007      	b.n	8004248 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f9f7 	bl	800462c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004246:	e1dc      	b.n	8004602 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004248:	bf00      	nop
    return;
 800424a:	e1da      	b.n	8004602 <HAL_UART_IRQHandler+0x66e>
 800424c:	10000001 	.word	0x10000001
 8004250:	04000120 	.word	0x04000120
 8004254:	0800502f 	.word	0x0800502f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800425c:	2b01      	cmp	r3, #1
 800425e:	f040 8170 	bne.w	8004542 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 8169 	beq.w	8004542 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8162 	beq.w	8004542 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2210      	movs	r2, #16
 8004284:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004290:	2b40      	cmp	r3, #64	@ 0x40
 8004292:	f040 80d8 	bne.w	8004446 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 80af 	beq.w	800440c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80042b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042b8:	429a      	cmp	r2, r3
 80042ba:	f080 80a7 	bcs.w	800440c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f040 8087 	bne.w	80043ea <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004306:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800430a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004312:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004316:	e841 2300 	strex	r3, r2, [r1]
 800431a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800431e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1da      	bne.n	80042dc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3308      	adds	r3, #8
 800432c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004336:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3308      	adds	r3, #8
 8004346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800434a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800434e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004352:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800435c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e1      	bne.n	8004326 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3308      	adds	r3, #8
 8004368:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800436c:	e853 3f00 	ldrex	r3, [r3]
 8004370:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004372:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004374:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004378:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3308      	adds	r3, #8
 8004382:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004386:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004388:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800438c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004394:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e3      	bne.n	8004362 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043b8:	f023 0310 	bic.w	r3, r3, #16
 80043bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	461a      	mov	r2, r3
 80043c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043d2:	e841 2300 	strex	r3, r2, [r1]
 80043d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1e4      	bne.n	80043a8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fd f97b 	bl	80016e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2202      	movs	r2, #2
 80043ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	b29b      	uxth	r3, r3
 8004402:	4619      	mov	r1, r3
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f91b 	bl	8004640 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800440a:	e0fc      	b.n	8004606 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004416:	429a      	cmp	r2, r3
 8004418:	f040 80f5 	bne.w	8004606 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b20      	cmp	r3, #32
 800442c:	f040 80eb 	bne.w	8004606 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800443c:	4619      	mov	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f8fe 	bl	8004640 <HAL_UARTEx_RxEventCallback>
      return;
 8004444:	e0df      	b.n	8004606 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004452:	b29b      	uxth	r3, r3
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 80d1 	beq.w	800460a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004468:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80cc 	beq.w	800460a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447a:	e853 3f00 	ldrex	r3, [r3]
 800447e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004482:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004486:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004494:	647b      	str	r3, [r7, #68]	@ 0x44
 8004496:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800449a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e4      	bne.n	8004472 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3308      	adds	r3, #8
 80044ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	623b      	str	r3, [r7, #32]
   return(result);
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044be:	f023 0301 	bic.w	r3, r3, #1
 80044c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3308      	adds	r3, #8
 80044cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80044d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80044d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044d8:	e841 2300 	strex	r3, r2, [r1]
 80044dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e1      	bne.n	80044a8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	60fb      	str	r3, [r7, #12]
   return(result);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f023 0310 	bic.w	r3, r3, #16
 800450c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	69b9      	ldr	r1, [r7, #24]
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	617b      	str	r3, [r7, #20]
   return(result);
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e4      	bne.n	80044f8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2202      	movs	r2, #2
 8004532:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004534:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004538:	4619      	mov	r1, r3
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f880 	bl	8004640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004540:	e063      	b.n	800460a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00e      	beq.n	800456c <HAL_UART_IRQHandler+0x5d8>
 800454e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d008      	beq.n	800456c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004562:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fd9f 	bl	80050a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800456a:	e051      	b.n	8004610 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800456c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004574:	2b00      	cmp	r3, #0
 8004576:	d014      	beq.n	80045a2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800457c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004588:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004594:	2b00      	cmp	r3, #0
 8004596:	d03a      	beq.n	800460e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	4798      	blx	r3
    }
    return;
 80045a0:	e035      	b.n	800460e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <HAL_UART_IRQHandler+0x62e>
 80045ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fd49 	bl	8005052 <UART_EndTransmit_IT>
    return;
 80045c0:	e026      	b.n	8004610 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80045c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d009      	beq.n	80045e2 <HAL_UART_IRQHandler+0x64e>
 80045ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fd78 	bl	80050d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045e0:	e016      	b.n	8004610 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80045e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d010      	beq.n	8004610 <HAL_UART_IRQHandler+0x67c>
 80045ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	da0c      	bge.n	8004610 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fd60 	bl	80050bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045fc:	e008      	b.n	8004610 <HAL_UART_IRQHandler+0x67c>
      return;
 80045fe:	bf00      	nop
 8004600:	e006      	b.n	8004610 <HAL_UART_IRQHandler+0x67c>
    return;
 8004602:	bf00      	nop
 8004604:	e004      	b.n	8004610 <HAL_UART_IRQHandler+0x67c>
      return;
 8004606:	bf00      	nop
 8004608:	e002      	b.n	8004610 <HAL_UART_IRQHandler+0x67c>
      return;
 800460a:	bf00      	nop
 800460c:	e000      	b.n	8004610 <HAL_UART_IRQHandler+0x67c>
    return;
 800460e:	bf00      	nop
  }
}
 8004610:	37e8      	adds	r7, #232	@ 0xe8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop

08004618 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800465c:	b08c      	sub	sp, #48	@ 0x30
 800465e:	af00      	add	r7, sp, #0
 8004660:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	431a      	orrs	r2, r3
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	431a      	orrs	r2, r3
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	4313      	orrs	r3, r2
 800467e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	4bab      	ldr	r3, [pc, #684]	@ (8004934 <UART_SetConfig+0x2dc>)
 8004688:	4013      	ands	r3, r2
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	6812      	ldr	r2, [r2, #0]
 800468e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004690:	430b      	orrs	r3, r1
 8004692:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4aa0      	ldr	r2, [pc, #640]	@ (8004938 <UART_SetConfig+0x2e0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d004      	beq.n	80046c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046c0:	4313      	orrs	r3, r2
 80046c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80046ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046d8:	430b      	orrs	r3, r1
 80046da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e2:	f023 010f 	bic.w	r1, r3, #15
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a91      	ldr	r2, [pc, #580]	@ (800493c <UART_SetConfig+0x2e4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d125      	bne.n	8004748 <UART_SetConfig+0xf0>
 80046fc:	4b90      	ldr	r3, [pc, #576]	@ (8004940 <UART_SetConfig+0x2e8>)
 80046fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	2b03      	cmp	r3, #3
 8004708:	d81a      	bhi.n	8004740 <UART_SetConfig+0xe8>
 800470a:	a201      	add	r2, pc, #4	@ (adr r2, 8004710 <UART_SetConfig+0xb8>)
 800470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004710:	08004721 	.word	0x08004721
 8004714:	08004731 	.word	0x08004731
 8004718:	08004729 	.word	0x08004729
 800471c:	08004739 	.word	0x08004739
 8004720:	2301      	movs	r3, #1
 8004722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004726:	e0d6      	b.n	80048d6 <UART_SetConfig+0x27e>
 8004728:	2302      	movs	r3, #2
 800472a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800472e:	e0d2      	b.n	80048d6 <UART_SetConfig+0x27e>
 8004730:	2304      	movs	r3, #4
 8004732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004736:	e0ce      	b.n	80048d6 <UART_SetConfig+0x27e>
 8004738:	2308      	movs	r3, #8
 800473a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800473e:	e0ca      	b.n	80048d6 <UART_SetConfig+0x27e>
 8004740:	2310      	movs	r3, #16
 8004742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004746:	e0c6      	b.n	80048d6 <UART_SetConfig+0x27e>
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a7d      	ldr	r2, [pc, #500]	@ (8004944 <UART_SetConfig+0x2ec>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d138      	bne.n	80047c4 <UART_SetConfig+0x16c>
 8004752:	4b7b      	ldr	r3, [pc, #492]	@ (8004940 <UART_SetConfig+0x2e8>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004758:	f003 030c 	and.w	r3, r3, #12
 800475c:	2b0c      	cmp	r3, #12
 800475e:	d82d      	bhi.n	80047bc <UART_SetConfig+0x164>
 8004760:	a201      	add	r2, pc, #4	@ (adr r2, 8004768 <UART_SetConfig+0x110>)
 8004762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004766:	bf00      	nop
 8004768:	0800479d 	.word	0x0800479d
 800476c:	080047bd 	.word	0x080047bd
 8004770:	080047bd 	.word	0x080047bd
 8004774:	080047bd 	.word	0x080047bd
 8004778:	080047ad 	.word	0x080047ad
 800477c:	080047bd 	.word	0x080047bd
 8004780:	080047bd 	.word	0x080047bd
 8004784:	080047bd 	.word	0x080047bd
 8004788:	080047a5 	.word	0x080047a5
 800478c:	080047bd 	.word	0x080047bd
 8004790:	080047bd 	.word	0x080047bd
 8004794:	080047bd 	.word	0x080047bd
 8004798:	080047b5 	.word	0x080047b5
 800479c:	2300      	movs	r3, #0
 800479e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047a2:	e098      	b.n	80048d6 <UART_SetConfig+0x27e>
 80047a4:	2302      	movs	r3, #2
 80047a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047aa:	e094      	b.n	80048d6 <UART_SetConfig+0x27e>
 80047ac:	2304      	movs	r3, #4
 80047ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047b2:	e090      	b.n	80048d6 <UART_SetConfig+0x27e>
 80047b4:	2308      	movs	r3, #8
 80047b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ba:	e08c      	b.n	80048d6 <UART_SetConfig+0x27e>
 80047bc:	2310      	movs	r3, #16
 80047be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047c2:	e088      	b.n	80048d6 <UART_SetConfig+0x27e>
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a5f      	ldr	r2, [pc, #380]	@ (8004948 <UART_SetConfig+0x2f0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d125      	bne.n	800481a <UART_SetConfig+0x1c2>
 80047ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004940 <UART_SetConfig+0x2e8>)
 80047d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047d8:	2b30      	cmp	r3, #48	@ 0x30
 80047da:	d016      	beq.n	800480a <UART_SetConfig+0x1b2>
 80047dc:	2b30      	cmp	r3, #48	@ 0x30
 80047de:	d818      	bhi.n	8004812 <UART_SetConfig+0x1ba>
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	d00a      	beq.n	80047fa <UART_SetConfig+0x1a2>
 80047e4:	2b20      	cmp	r3, #32
 80047e6:	d814      	bhi.n	8004812 <UART_SetConfig+0x1ba>
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <UART_SetConfig+0x19a>
 80047ec:	2b10      	cmp	r3, #16
 80047ee:	d008      	beq.n	8004802 <UART_SetConfig+0x1aa>
 80047f0:	e00f      	b.n	8004812 <UART_SetConfig+0x1ba>
 80047f2:	2300      	movs	r3, #0
 80047f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047f8:	e06d      	b.n	80048d6 <UART_SetConfig+0x27e>
 80047fa:	2302      	movs	r3, #2
 80047fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004800:	e069      	b.n	80048d6 <UART_SetConfig+0x27e>
 8004802:	2304      	movs	r3, #4
 8004804:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004808:	e065      	b.n	80048d6 <UART_SetConfig+0x27e>
 800480a:	2308      	movs	r3, #8
 800480c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004810:	e061      	b.n	80048d6 <UART_SetConfig+0x27e>
 8004812:	2310      	movs	r3, #16
 8004814:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004818:	e05d      	b.n	80048d6 <UART_SetConfig+0x27e>
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a4b      	ldr	r2, [pc, #300]	@ (800494c <UART_SetConfig+0x2f4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d125      	bne.n	8004870 <UART_SetConfig+0x218>
 8004824:	4b46      	ldr	r3, [pc, #280]	@ (8004940 <UART_SetConfig+0x2e8>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800482e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004830:	d016      	beq.n	8004860 <UART_SetConfig+0x208>
 8004832:	2bc0      	cmp	r3, #192	@ 0xc0
 8004834:	d818      	bhi.n	8004868 <UART_SetConfig+0x210>
 8004836:	2b80      	cmp	r3, #128	@ 0x80
 8004838:	d00a      	beq.n	8004850 <UART_SetConfig+0x1f8>
 800483a:	2b80      	cmp	r3, #128	@ 0x80
 800483c:	d814      	bhi.n	8004868 <UART_SetConfig+0x210>
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <UART_SetConfig+0x1f0>
 8004842:	2b40      	cmp	r3, #64	@ 0x40
 8004844:	d008      	beq.n	8004858 <UART_SetConfig+0x200>
 8004846:	e00f      	b.n	8004868 <UART_SetConfig+0x210>
 8004848:	2300      	movs	r3, #0
 800484a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800484e:	e042      	b.n	80048d6 <UART_SetConfig+0x27e>
 8004850:	2302      	movs	r3, #2
 8004852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004856:	e03e      	b.n	80048d6 <UART_SetConfig+0x27e>
 8004858:	2304      	movs	r3, #4
 800485a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800485e:	e03a      	b.n	80048d6 <UART_SetConfig+0x27e>
 8004860:	2308      	movs	r3, #8
 8004862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004866:	e036      	b.n	80048d6 <UART_SetConfig+0x27e>
 8004868:	2310      	movs	r3, #16
 800486a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800486e:	e032      	b.n	80048d6 <UART_SetConfig+0x27e>
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a30      	ldr	r2, [pc, #192]	@ (8004938 <UART_SetConfig+0x2e0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d12a      	bne.n	80048d0 <UART_SetConfig+0x278>
 800487a:	4b31      	ldr	r3, [pc, #196]	@ (8004940 <UART_SetConfig+0x2e8>)
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004880:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004884:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004888:	d01a      	beq.n	80048c0 <UART_SetConfig+0x268>
 800488a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800488e:	d81b      	bhi.n	80048c8 <UART_SetConfig+0x270>
 8004890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004894:	d00c      	beq.n	80048b0 <UART_SetConfig+0x258>
 8004896:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800489a:	d815      	bhi.n	80048c8 <UART_SetConfig+0x270>
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <UART_SetConfig+0x250>
 80048a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048a4:	d008      	beq.n	80048b8 <UART_SetConfig+0x260>
 80048a6:	e00f      	b.n	80048c8 <UART_SetConfig+0x270>
 80048a8:	2300      	movs	r3, #0
 80048aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ae:	e012      	b.n	80048d6 <UART_SetConfig+0x27e>
 80048b0:	2302      	movs	r3, #2
 80048b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048b6:	e00e      	b.n	80048d6 <UART_SetConfig+0x27e>
 80048b8:	2304      	movs	r3, #4
 80048ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048be:	e00a      	b.n	80048d6 <UART_SetConfig+0x27e>
 80048c0:	2308      	movs	r3, #8
 80048c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048c6:	e006      	b.n	80048d6 <UART_SetConfig+0x27e>
 80048c8:	2310      	movs	r3, #16
 80048ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ce:	e002      	b.n	80048d6 <UART_SetConfig+0x27e>
 80048d0:	2310      	movs	r3, #16
 80048d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a17      	ldr	r2, [pc, #92]	@ (8004938 <UART_SetConfig+0x2e0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	f040 80a8 	bne.w	8004a32 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d834      	bhi.n	8004954 <UART_SetConfig+0x2fc>
 80048ea:	a201      	add	r2, pc, #4	@ (adr r2, 80048f0 <UART_SetConfig+0x298>)
 80048ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f0:	08004915 	.word	0x08004915
 80048f4:	08004955 	.word	0x08004955
 80048f8:	0800491d 	.word	0x0800491d
 80048fc:	08004955 	.word	0x08004955
 8004900:	08004923 	.word	0x08004923
 8004904:	08004955 	.word	0x08004955
 8004908:	08004955 	.word	0x08004955
 800490c:	08004955 	.word	0x08004955
 8004910:	0800492b 	.word	0x0800492b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004914:	f7fd ffc0 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
 8004918:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800491a:	e021      	b.n	8004960 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800491c:	4b0c      	ldr	r3, [pc, #48]	@ (8004950 <UART_SetConfig+0x2f8>)
 800491e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004920:	e01e      	b.n	8004960 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004922:	f7fd ff4b 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 8004926:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004928:	e01a      	b.n	8004960 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800492e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004930:	e016      	b.n	8004960 <UART_SetConfig+0x308>
 8004932:	bf00      	nop
 8004934:	cfff69f3 	.word	0xcfff69f3
 8004938:	40008000 	.word	0x40008000
 800493c:	40013800 	.word	0x40013800
 8004940:	40021000 	.word	0x40021000
 8004944:	40004400 	.word	0x40004400
 8004948:	40004800 	.word	0x40004800
 800494c:	40004c00 	.word	0x40004c00
 8004950:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800495e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 812a 	beq.w	8004bbc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496c:	4a9e      	ldr	r2, [pc, #632]	@ (8004be8 <UART_SetConfig+0x590>)
 800496e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004972:	461a      	mov	r2, r3
 8004974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004976:	fbb3 f3f2 	udiv	r3, r3, r2
 800497a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	4613      	mov	r3, r2
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	4413      	add	r3, r2
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	429a      	cmp	r2, r3
 800498a:	d305      	bcc.n	8004998 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	429a      	cmp	r2, r3
 8004996:	d903      	bls.n	80049a0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800499e:	e10d      	b.n	8004bbc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	2200      	movs	r2, #0
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	60fa      	str	r2, [r7, #12]
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ac:	4a8e      	ldr	r2, [pc, #568]	@ (8004be8 <UART_SetConfig+0x590>)
 80049ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	2200      	movs	r2, #0
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	607a      	str	r2, [r7, #4]
 80049ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049c2:	f7fb fc7d 	bl	80002c0 <__aeabi_uldivmod>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4610      	mov	r0, r2
 80049cc:	4619      	mov	r1, r3
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	020b      	lsls	r3, r1, #8
 80049d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80049dc:	0202      	lsls	r2, r0, #8
 80049de:	6979      	ldr	r1, [r7, #20]
 80049e0:	6849      	ldr	r1, [r1, #4]
 80049e2:	0849      	lsrs	r1, r1, #1
 80049e4:	2000      	movs	r0, #0
 80049e6:	460c      	mov	r4, r1
 80049e8:	4605      	mov	r5, r0
 80049ea:	eb12 0804 	adds.w	r8, r2, r4
 80049ee:	eb43 0905 	adc.w	r9, r3, r5
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	469a      	mov	sl, r3
 80049fa:	4693      	mov	fp, r2
 80049fc:	4652      	mov	r2, sl
 80049fe:	465b      	mov	r3, fp
 8004a00:	4640      	mov	r0, r8
 8004a02:	4649      	mov	r1, r9
 8004a04:	f7fb fc5c 	bl	80002c0 <__aeabi_uldivmod>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a16:	d308      	bcc.n	8004a2a <UART_SetConfig+0x3d2>
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a1e:	d204      	bcs.n	8004a2a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6a3a      	ldr	r2, [r7, #32]
 8004a26:	60da      	str	r2, [r3, #12]
 8004a28:	e0c8      	b.n	8004bbc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a30:	e0c4      	b.n	8004bbc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a3a:	d167      	bne.n	8004b0c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004a3c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d828      	bhi.n	8004a96 <UART_SetConfig+0x43e>
 8004a44:	a201      	add	r2, pc, #4	@ (adr r2, 8004a4c <UART_SetConfig+0x3f4>)
 8004a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4a:	bf00      	nop
 8004a4c:	08004a71 	.word	0x08004a71
 8004a50:	08004a79 	.word	0x08004a79
 8004a54:	08004a81 	.word	0x08004a81
 8004a58:	08004a97 	.word	0x08004a97
 8004a5c:	08004a87 	.word	0x08004a87
 8004a60:	08004a97 	.word	0x08004a97
 8004a64:	08004a97 	.word	0x08004a97
 8004a68:	08004a97 	.word	0x08004a97
 8004a6c:	08004a8f 	.word	0x08004a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a70:	f7fd ff12 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
 8004a74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a76:	e014      	b.n	8004aa2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a78:	f7fd ff24 	bl	80028c4 <HAL_RCC_GetPCLK2Freq>
 8004a7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a7e:	e010      	b.n	8004aa2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a80:	4b5a      	ldr	r3, [pc, #360]	@ (8004bec <UART_SetConfig+0x594>)
 8004a82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a84:	e00d      	b.n	8004aa2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a86:	f7fd fe99 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 8004a8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a8c:	e009      	b.n	8004aa2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a94:	e005      	b.n	8004aa2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004aa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 8089 	beq.w	8004bbc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aae:	4a4e      	ldr	r2, [pc, #312]	@ (8004be8 <UART_SetConfig+0x590>)
 8004ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004abc:	005a      	lsls	r2, r3, #1
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	085b      	lsrs	r3, r3, #1
 8004ac4:	441a      	add	r2, r3
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ace:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	2b0f      	cmp	r3, #15
 8004ad4:	d916      	bls.n	8004b04 <UART_SetConfig+0x4ac>
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004adc:	d212      	bcs.n	8004b04 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	f023 030f 	bic.w	r3, r3, #15
 8004ae6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	085b      	lsrs	r3, r3, #1
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	8bfb      	ldrh	r3, [r7, #30]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	8bfa      	ldrh	r2, [r7, #30]
 8004b00:	60da      	str	r2, [r3, #12]
 8004b02:	e05b      	b.n	8004bbc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b0a:	e057      	b.n	8004bbc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b0c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d828      	bhi.n	8004b66 <UART_SetConfig+0x50e>
 8004b14:	a201      	add	r2, pc, #4	@ (adr r2, 8004b1c <UART_SetConfig+0x4c4>)
 8004b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1a:	bf00      	nop
 8004b1c:	08004b41 	.word	0x08004b41
 8004b20:	08004b49 	.word	0x08004b49
 8004b24:	08004b51 	.word	0x08004b51
 8004b28:	08004b67 	.word	0x08004b67
 8004b2c:	08004b57 	.word	0x08004b57
 8004b30:	08004b67 	.word	0x08004b67
 8004b34:	08004b67 	.word	0x08004b67
 8004b38:	08004b67 	.word	0x08004b67
 8004b3c:	08004b5f 	.word	0x08004b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b40:	f7fd feaa 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
 8004b44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b46:	e014      	b.n	8004b72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b48:	f7fd febc 	bl	80028c4 <HAL_RCC_GetPCLK2Freq>
 8004b4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b4e:	e010      	b.n	8004b72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b50:	4b26      	ldr	r3, [pc, #152]	@ (8004bec <UART_SetConfig+0x594>)
 8004b52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b54:	e00d      	b.n	8004b72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b56:	f7fd fe31 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 8004b5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b5c:	e009      	b.n	8004b72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b64:	e005      	b.n	8004b72 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b70:	bf00      	nop
    }

    if (pclk != 0U)
 8004b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d021      	beq.n	8004bbc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004be8 <UART_SetConfig+0x590>)
 8004b7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b82:	461a      	mov	r2, r3
 8004b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b86:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	085b      	lsrs	r3, r3, #1
 8004b90:	441a      	add	r2, r3
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	2b0f      	cmp	r3, #15
 8004ba0:	d909      	bls.n	8004bb6 <UART_SetConfig+0x55e>
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ba8:	d205      	bcs.n	8004bb6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60da      	str	r2, [r3, #12]
 8004bb4:	e002      	b.n	8004bbc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004bd8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3730      	adds	r7, #48	@ 0x30
 8004be0:	46bd      	mov	sp, r7
 8004be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004be6:	bf00      	nop
 8004be8:	0800669c 	.word	0x0800669c
 8004bec:	00f42400 	.word	0x00f42400

08004bf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c84:	f003 0310 	and.w	r3, r3, #16
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01a      	beq.n	8004d06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cee:	d10a      	bne.n	8004d06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	605a      	str	r2, [r3, #4]
  }
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b098      	sub	sp, #96	@ 0x60
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d44:	f7fc fae6 	bl	8001314 <HAL_GetTick>
 8004d48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d12f      	bne.n	8004db8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d60:	2200      	movs	r2, #0
 8004d62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f88e 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d022      	beq.n	8004db8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d86:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d90:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d98:	e841 2300 	strex	r3, r2, [r1]
 8004d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e6      	bne.n	8004d72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e063      	b.n	8004e80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d149      	bne.n	8004e5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f857 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d03c      	beq.n	8004e5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	623b      	str	r3, [r7, #32]
   return(result);
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e6      	bne.n	8004de0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3308      	adds	r3, #8
 8004e18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f023 0301 	bic.w	r3, r3, #1
 8004e28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3308      	adds	r3, #8
 8004e30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e32:	61fa      	str	r2, [r7, #28]
 8004e34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	69b9      	ldr	r1, [r7, #24]
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	617b      	str	r3, [r7, #20]
   return(result);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e5      	bne.n	8004e12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e012      	b.n	8004e80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3758      	adds	r7, #88	@ 0x58
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	4613      	mov	r3, r2
 8004e96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e98:	e04f      	b.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea0:	d04b      	beq.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea2:	f7fc fa37 	bl	8001314 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d302      	bcc.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e04e      	b.n	8004f5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d037      	beq.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b80      	cmp	r3, #128	@ 0x80
 8004ece:	d034      	beq.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b40      	cmp	r3, #64	@ 0x40
 8004ed4:	d031      	beq.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	f003 0308 	and.w	r3, r3, #8
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d110      	bne.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2208      	movs	r2, #8
 8004eea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 f838 	bl	8004f62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e029      	b.n	8004f5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f14:	d111      	bne.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f81e 	bl	8004f62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e00f      	b.n	8004f5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69da      	ldr	r2, [r3, #28]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4013      	ands	r3, r2
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	bf0c      	ite	eq
 8004f4a:	2301      	moveq	r3, #1
 8004f4c:	2300      	movne	r3, #0
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	461a      	mov	r2, r3
 8004f52:	79fb      	ldrb	r3, [r7, #7]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d0a0      	beq.n	8004e9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b095      	sub	sp, #84	@ 0x54
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f88:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e6      	bne.n	8004f6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fb2:	f023 0301 	bic.w	r3, r3, #1
 8004fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3308      	adds	r3, #8
 8004fbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fc8:	e841 2300 	strex	r3, r2, [r1]
 8004fcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e3      	bne.n	8004f9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d118      	bne.n	800500e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	e853 3f00 	ldrex	r3, [r3]
 8004fe8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f023 0310 	bic.w	r3, r3, #16
 8004ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ffa:	61bb      	str	r3, [r7, #24]
 8004ffc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	6979      	ldr	r1, [r7, #20]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	613b      	str	r3, [r7, #16]
   return(result);
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1e6      	bne.n	8004fdc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005022:	bf00      	nop
 8005024:	3754      	adds	r7, #84	@ 0x54
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f7ff faf1 	bl	800462c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b088      	sub	sp, #32
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	e853 3f00 	ldrex	r3, [r3]
 8005066:	60bb      	str	r3, [r7, #8]
   return(result);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800506e:	61fb      	str	r3, [r7, #28]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	461a      	mov	r2, r3
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	6979      	ldr	r1, [r7, #20]
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	e841 2300 	strex	r3, r2, [r1]
 8005084:	613b      	str	r3, [r7, #16]
   return(result);
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1e6      	bne.n	800505a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7ff fabc 	bl	8004618 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050a0:	bf00      	nop
 80050a2:	3720      	adds	r7, #32
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d101      	bne.n	80050fa <HAL_UARTEx_DisableFifoMode+0x16>
 80050f6:	2302      	movs	r3, #2
 80050f8:	e027      	b.n	800514a <HAL_UARTEx_DisableFifoMode+0x66>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2224      	movs	r2, #36	@ 0x24
 8005106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0201 	bic.w	r2, r2, #1
 8005120:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005128:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2220      	movs	r2, #32
 800513c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800516a:	2302      	movs	r3, #2
 800516c:	e02d      	b.n	80051ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2224      	movs	r2, #36	@ 0x24
 800517a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0201 	bic.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f850 	bl	8005250 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e02d      	b.n	8005246 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2224      	movs	r2, #36	@ 0x24
 80051f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0201 	bic.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f812 	bl	8005250 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800525c:	2b00      	cmp	r3, #0
 800525e:	d108      	bne.n	8005272 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005270:	e031      	b.n	80052d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005272:	2308      	movs	r3, #8
 8005274:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005276:	2308      	movs	r3, #8
 8005278:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	0e5b      	lsrs	r3, r3, #25
 8005282:	b2db      	uxtb	r3, r3
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	0f5b      	lsrs	r3, r3, #29
 8005292:	b2db      	uxtb	r3, r3
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800529a:	7bbb      	ldrb	r3, [r7, #14]
 800529c:	7b3a      	ldrb	r2, [r7, #12]
 800529e:	4911      	ldr	r1, [pc, #68]	@ (80052e4 <UARTEx_SetNbDataToProcess+0x94>)
 80052a0:	5c8a      	ldrb	r2, [r1, r2]
 80052a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80052a6:	7b3a      	ldrb	r2, [r7, #12]
 80052a8:	490f      	ldr	r1, [pc, #60]	@ (80052e8 <UARTEx_SetNbDataToProcess+0x98>)
 80052aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	7b7a      	ldrb	r2, [r7, #13]
 80052bc:	4909      	ldr	r1, [pc, #36]	@ (80052e4 <UARTEx_SetNbDataToProcess+0x94>)
 80052be:	5c8a      	ldrb	r2, [r1, r2]
 80052c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80052c4:	7b7a      	ldrb	r2, [r7, #13]
 80052c6:	4908      	ldr	r1, [pc, #32]	@ (80052e8 <UARTEx_SetNbDataToProcess+0x98>)
 80052c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	080066b4 	.word	0x080066b4
 80052e8:	080066bc 	.word	0x080066bc

080052ec <std>:
 80052ec:	2300      	movs	r3, #0
 80052ee:	b510      	push	{r4, lr}
 80052f0:	4604      	mov	r4, r0
 80052f2:	e9c0 3300 	strd	r3, r3, [r0]
 80052f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052fa:	6083      	str	r3, [r0, #8]
 80052fc:	8181      	strh	r1, [r0, #12]
 80052fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8005300:	81c2      	strh	r2, [r0, #14]
 8005302:	6183      	str	r3, [r0, #24]
 8005304:	4619      	mov	r1, r3
 8005306:	2208      	movs	r2, #8
 8005308:	305c      	adds	r0, #92	@ 0x5c
 800530a:	f000 fa2d 	bl	8005768 <memset>
 800530e:	4b0d      	ldr	r3, [pc, #52]	@ (8005344 <std+0x58>)
 8005310:	6263      	str	r3, [r4, #36]	@ 0x24
 8005312:	4b0d      	ldr	r3, [pc, #52]	@ (8005348 <std+0x5c>)
 8005314:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005316:	4b0d      	ldr	r3, [pc, #52]	@ (800534c <std+0x60>)
 8005318:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800531a:	4b0d      	ldr	r3, [pc, #52]	@ (8005350 <std+0x64>)
 800531c:	6323      	str	r3, [r4, #48]	@ 0x30
 800531e:	4b0d      	ldr	r3, [pc, #52]	@ (8005354 <std+0x68>)
 8005320:	6224      	str	r4, [r4, #32]
 8005322:	429c      	cmp	r4, r3
 8005324:	d006      	beq.n	8005334 <std+0x48>
 8005326:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800532a:	4294      	cmp	r4, r2
 800532c:	d002      	beq.n	8005334 <std+0x48>
 800532e:	33d0      	adds	r3, #208	@ 0xd0
 8005330:	429c      	cmp	r4, r3
 8005332:	d105      	bne.n	8005340 <std+0x54>
 8005334:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800533c:	f000 ba8c 	b.w	8005858 <__retarget_lock_init_recursive>
 8005340:	bd10      	pop	{r4, pc}
 8005342:	bf00      	nop
 8005344:	080055b9 	.word	0x080055b9
 8005348:	080055db 	.word	0x080055db
 800534c:	08005613 	.word	0x08005613
 8005350:	08005637 	.word	0x08005637
 8005354:	20003458 	.word	0x20003458

08005358 <stdio_exit_handler>:
 8005358:	4a02      	ldr	r2, [pc, #8]	@ (8005364 <stdio_exit_handler+0xc>)
 800535a:	4903      	ldr	r1, [pc, #12]	@ (8005368 <stdio_exit_handler+0x10>)
 800535c:	4803      	ldr	r0, [pc, #12]	@ (800536c <stdio_exit_handler+0x14>)
 800535e:	f000 b869 	b.w	8005434 <_fwalk_sglue>
 8005362:	bf00      	nop
 8005364:	2000000c 	.word	0x2000000c
 8005368:	080063a9 	.word	0x080063a9
 800536c:	2000001c 	.word	0x2000001c

08005370 <cleanup_stdio>:
 8005370:	6841      	ldr	r1, [r0, #4]
 8005372:	4b0c      	ldr	r3, [pc, #48]	@ (80053a4 <cleanup_stdio+0x34>)
 8005374:	4299      	cmp	r1, r3
 8005376:	b510      	push	{r4, lr}
 8005378:	4604      	mov	r4, r0
 800537a:	d001      	beq.n	8005380 <cleanup_stdio+0x10>
 800537c:	f001 f814 	bl	80063a8 <_fflush_r>
 8005380:	68a1      	ldr	r1, [r4, #8]
 8005382:	4b09      	ldr	r3, [pc, #36]	@ (80053a8 <cleanup_stdio+0x38>)
 8005384:	4299      	cmp	r1, r3
 8005386:	d002      	beq.n	800538e <cleanup_stdio+0x1e>
 8005388:	4620      	mov	r0, r4
 800538a:	f001 f80d 	bl	80063a8 <_fflush_r>
 800538e:	68e1      	ldr	r1, [r4, #12]
 8005390:	4b06      	ldr	r3, [pc, #24]	@ (80053ac <cleanup_stdio+0x3c>)
 8005392:	4299      	cmp	r1, r3
 8005394:	d004      	beq.n	80053a0 <cleanup_stdio+0x30>
 8005396:	4620      	mov	r0, r4
 8005398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800539c:	f001 b804 	b.w	80063a8 <_fflush_r>
 80053a0:	bd10      	pop	{r4, pc}
 80053a2:	bf00      	nop
 80053a4:	20003458 	.word	0x20003458
 80053a8:	200034c0 	.word	0x200034c0
 80053ac:	20003528 	.word	0x20003528

080053b0 <global_stdio_init.part.0>:
 80053b0:	b510      	push	{r4, lr}
 80053b2:	4b0b      	ldr	r3, [pc, #44]	@ (80053e0 <global_stdio_init.part.0+0x30>)
 80053b4:	4c0b      	ldr	r4, [pc, #44]	@ (80053e4 <global_stdio_init.part.0+0x34>)
 80053b6:	4a0c      	ldr	r2, [pc, #48]	@ (80053e8 <global_stdio_init.part.0+0x38>)
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	4620      	mov	r0, r4
 80053bc:	2200      	movs	r2, #0
 80053be:	2104      	movs	r1, #4
 80053c0:	f7ff ff94 	bl	80052ec <std>
 80053c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053c8:	2201      	movs	r2, #1
 80053ca:	2109      	movs	r1, #9
 80053cc:	f7ff ff8e 	bl	80052ec <std>
 80053d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053d4:	2202      	movs	r2, #2
 80053d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053da:	2112      	movs	r1, #18
 80053dc:	f7ff bf86 	b.w	80052ec <std>
 80053e0:	20003590 	.word	0x20003590
 80053e4:	20003458 	.word	0x20003458
 80053e8:	08005359 	.word	0x08005359

080053ec <__sfp_lock_acquire>:
 80053ec:	4801      	ldr	r0, [pc, #4]	@ (80053f4 <__sfp_lock_acquire+0x8>)
 80053ee:	f000 ba34 	b.w	800585a <__retarget_lock_acquire_recursive>
 80053f2:	bf00      	nop
 80053f4:	20003599 	.word	0x20003599

080053f8 <__sfp_lock_release>:
 80053f8:	4801      	ldr	r0, [pc, #4]	@ (8005400 <__sfp_lock_release+0x8>)
 80053fa:	f000 ba2f 	b.w	800585c <__retarget_lock_release_recursive>
 80053fe:	bf00      	nop
 8005400:	20003599 	.word	0x20003599

08005404 <__sinit>:
 8005404:	b510      	push	{r4, lr}
 8005406:	4604      	mov	r4, r0
 8005408:	f7ff fff0 	bl	80053ec <__sfp_lock_acquire>
 800540c:	6a23      	ldr	r3, [r4, #32]
 800540e:	b11b      	cbz	r3, 8005418 <__sinit+0x14>
 8005410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005414:	f7ff bff0 	b.w	80053f8 <__sfp_lock_release>
 8005418:	4b04      	ldr	r3, [pc, #16]	@ (800542c <__sinit+0x28>)
 800541a:	6223      	str	r3, [r4, #32]
 800541c:	4b04      	ldr	r3, [pc, #16]	@ (8005430 <__sinit+0x2c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1f5      	bne.n	8005410 <__sinit+0xc>
 8005424:	f7ff ffc4 	bl	80053b0 <global_stdio_init.part.0>
 8005428:	e7f2      	b.n	8005410 <__sinit+0xc>
 800542a:	bf00      	nop
 800542c:	08005371 	.word	0x08005371
 8005430:	20003590 	.word	0x20003590

08005434 <_fwalk_sglue>:
 8005434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005438:	4607      	mov	r7, r0
 800543a:	4688      	mov	r8, r1
 800543c:	4614      	mov	r4, r2
 800543e:	2600      	movs	r6, #0
 8005440:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005444:	f1b9 0901 	subs.w	r9, r9, #1
 8005448:	d505      	bpl.n	8005456 <_fwalk_sglue+0x22>
 800544a:	6824      	ldr	r4, [r4, #0]
 800544c:	2c00      	cmp	r4, #0
 800544e:	d1f7      	bne.n	8005440 <_fwalk_sglue+0xc>
 8005450:	4630      	mov	r0, r6
 8005452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005456:	89ab      	ldrh	r3, [r5, #12]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d907      	bls.n	800546c <_fwalk_sglue+0x38>
 800545c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005460:	3301      	adds	r3, #1
 8005462:	d003      	beq.n	800546c <_fwalk_sglue+0x38>
 8005464:	4629      	mov	r1, r5
 8005466:	4638      	mov	r0, r7
 8005468:	47c0      	blx	r8
 800546a:	4306      	orrs	r6, r0
 800546c:	3568      	adds	r5, #104	@ 0x68
 800546e:	e7e9      	b.n	8005444 <_fwalk_sglue+0x10>

08005470 <iprintf>:
 8005470:	b40f      	push	{r0, r1, r2, r3}
 8005472:	b507      	push	{r0, r1, r2, lr}
 8005474:	4906      	ldr	r1, [pc, #24]	@ (8005490 <iprintf+0x20>)
 8005476:	ab04      	add	r3, sp, #16
 8005478:	6808      	ldr	r0, [r1, #0]
 800547a:	f853 2b04 	ldr.w	r2, [r3], #4
 800547e:	6881      	ldr	r1, [r0, #8]
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	f000 fc67 	bl	8005d54 <_vfiprintf_r>
 8005486:	b003      	add	sp, #12
 8005488:	f85d eb04 	ldr.w	lr, [sp], #4
 800548c:	b004      	add	sp, #16
 800548e:	4770      	bx	lr
 8005490:	20000018 	.word	0x20000018

08005494 <_puts_r>:
 8005494:	6a03      	ldr	r3, [r0, #32]
 8005496:	b570      	push	{r4, r5, r6, lr}
 8005498:	6884      	ldr	r4, [r0, #8]
 800549a:	4605      	mov	r5, r0
 800549c:	460e      	mov	r6, r1
 800549e:	b90b      	cbnz	r3, 80054a4 <_puts_r+0x10>
 80054a0:	f7ff ffb0 	bl	8005404 <__sinit>
 80054a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054a6:	07db      	lsls	r3, r3, #31
 80054a8:	d405      	bmi.n	80054b6 <_puts_r+0x22>
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	0598      	lsls	r0, r3, #22
 80054ae:	d402      	bmi.n	80054b6 <_puts_r+0x22>
 80054b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054b2:	f000 f9d2 	bl	800585a <__retarget_lock_acquire_recursive>
 80054b6:	89a3      	ldrh	r3, [r4, #12]
 80054b8:	0719      	lsls	r1, r3, #28
 80054ba:	d502      	bpl.n	80054c2 <_puts_r+0x2e>
 80054bc:	6923      	ldr	r3, [r4, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d135      	bne.n	800552e <_puts_r+0x9a>
 80054c2:	4621      	mov	r1, r4
 80054c4:	4628      	mov	r0, r5
 80054c6:	f000 f8f9 	bl	80056bc <__swsetup_r>
 80054ca:	b380      	cbz	r0, 800552e <_puts_r+0x9a>
 80054cc:	f04f 35ff 	mov.w	r5, #4294967295
 80054d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054d2:	07da      	lsls	r2, r3, #31
 80054d4:	d405      	bmi.n	80054e2 <_puts_r+0x4e>
 80054d6:	89a3      	ldrh	r3, [r4, #12]
 80054d8:	059b      	lsls	r3, r3, #22
 80054da:	d402      	bmi.n	80054e2 <_puts_r+0x4e>
 80054dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054de:	f000 f9bd 	bl	800585c <__retarget_lock_release_recursive>
 80054e2:	4628      	mov	r0, r5
 80054e4:	bd70      	pop	{r4, r5, r6, pc}
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	da04      	bge.n	80054f4 <_puts_r+0x60>
 80054ea:	69a2      	ldr	r2, [r4, #24]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	dc17      	bgt.n	8005520 <_puts_r+0x8c>
 80054f0:	290a      	cmp	r1, #10
 80054f2:	d015      	beq.n	8005520 <_puts_r+0x8c>
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	6022      	str	r2, [r4, #0]
 80054fa:	7019      	strb	r1, [r3, #0]
 80054fc:	68a3      	ldr	r3, [r4, #8]
 80054fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005502:	3b01      	subs	r3, #1
 8005504:	60a3      	str	r3, [r4, #8]
 8005506:	2900      	cmp	r1, #0
 8005508:	d1ed      	bne.n	80054e6 <_puts_r+0x52>
 800550a:	2b00      	cmp	r3, #0
 800550c:	da11      	bge.n	8005532 <_puts_r+0x9e>
 800550e:	4622      	mov	r2, r4
 8005510:	210a      	movs	r1, #10
 8005512:	4628      	mov	r0, r5
 8005514:	f000 f893 	bl	800563e <__swbuf_r>
 8005518:	3001      	adds	r0, #1
 800551a:	d0d7      	beq.n	80054cc <_puts_r+0x38>
 800551c:	250a      	movs	r5, #10
 800551e:	e7d7      	b.n	80054d0 <_puts_r+0x3c>
 8005520:	4622      	mov	r2, r4
 8005522:	4628      	mov	r0, r5
 8005524:	f000 f88b 	bl	800563e <__swbuf_r>
 8005528:	3001      	adds	r0, #1
 800552a:	d1e7      	bne.n	80054fc <_puts_r+0x68>
 800552c:	e7ce      	b.n	80054cc <_puts_r+0x38>
 800552e:	3e01      	subs	r6, #1
 8005530:	e7e4      	b.n	80054fc <_puts_r+0x68>
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	6022      	str	r2, [r4, #0]
 8005538:	220a      	movs	r2, #10
 800553a:	701a      	strb	r2, [r3, #0]
 800553c:	e7ee      	b.n	800551c <_puts_r+0x88>
	...

08005540 <puts>:
 8005540:	4b02      	ldr	r3, [pc, #8]	@ (800554c <puts+0xc>)
 8005542:	4601      	mov	r1, r0
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	f7ff bfa5 	b.w	8005494 <_puts_r>
 800554a:	bf00      	nop
 800554c:	20000018 	.word	0x20000018

08005550 <sniprintf>:
 8005550:	b40c      	push	{r2, r3}
 8005552:	b530      	push	{r4, r5, lr}
 8005554:	4b17      	ldr	r3, [pc, #92]	@ (80055b4 <sniprintf+0x64>)
 8005556:	1e0c      	subs	r4, r1, #0
 8005558:	681d      	ldr	r5, [r3, #0]
 800555a:	b09d      	sub	sp, #116	@ 0x74
 800555c:	da08      	bge.n	8005570 <sniprintf+0x20>
 800555e:	238b      	movs	r3, #139	@ 0x8b
 8005560:	602b      	str	r3, [r5, #0]
 8005562:	f04f 30ff 	mov.w	r0, #4294967295
 8005566:	b01d      	add	sp, #116	@ 0x74
 8005568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800556c:	b002      	add	sp, #8
 800556e:	4770      	bx	lr
 8005570:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005574:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005578:	bf14      	ite	ne
 800557a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800557e:	4623      	moveq	r3, r4
 8005580:	9304      	str	r3, [sp, #16]
 8005582:	9307      	str	r3, [sp, #28]
 8005584:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005588:	9002      	str	r0, [sp, #8]
 800558a:	9006      	str	r0, [sp, #24]
 800558c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005590:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005592:	ab21      	add	r3, sp, #132	@ 0x84
 8005594:	a902      	add	r1, sp, #8
 8005596:	4628      	mov	r0, r5
 8005598:	9301      	str	r3, [sp, #4]
 800559a:	f000 fab5 	bl	8005b08 <_svfiprintf_r>
 800559e:	1c43      	adds	r3, r0, #1
 80055a0:	bfbc      	itt	lt
 80055a2:	238b      	movlt	r3, #139	@ 0x8b
 80055a4:	602b      	strlt	r3, [r5, #0]
 80055a6:	2c00      	cmp	r4, #0
 80055a8:	d0dd      	beq.n	8005566 <sniprintf+0x16>
 80055aa:	9b02      	ldr	r3, [sp, #8]
 80055ac:	2200      	movs	r2, #0
 80055ae:	701a      	strb	r2, [r3, #0]
 80055b0:	e7d9      	b.n	8005566 <sniprintf+0x16>
 80055b2:	bf00      	nop
 80055b4:	20000018 	.word	0x20000018

080055b8 <__sread>:
 80055b8:	b510      	push	{r4, lr}
 80055ba:	460c      	mov	r4, r1
 80055bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055c0:	f000 f8fc 	bl	80057bc <_read_r>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	bfab      	itete	ge
 80055c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80055ca:	89a3      	ldrhlt	r3, [r4, #12]
 80055cc:	181b      	addge	r3, r3, r0
 80055ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80055d2:	bfac      	ite	ge
 80055d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80055d6:	81a3      	strhlt	r3, [r4, #12]
 80055d8:	bd10      	pop	{r4, pc}

080055da <__swrite>:
 80055da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055de:	461f      	mov	r7, r3
 80055e0:	898b      	ldrh	r3, [r1, #12]
 80055e2:	05db      	lsls	r3, r3, #23
 80055e4:	4605      	mov	r5, r0
 80055e6:	460c      	mov	r4, r1
 80055e8:	4616      	mov	r6, r2
 80055ea:	d505      	bpl.n	80055f8 <__swrite+0x1e>
 80055ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055f0:	2302      	movs	r3, #2
 80055f2:	2200      	movs	r2, #0
 80055f4:	f000 f8d0 	bl	8005798 <_lseek_r>
 80055f8:	89a3      	ldrh	r3, [r4, #12]
 80055fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005602:	81a3      	strh	r3, [r4, #12]
 8005604:	4632      	mov	r2, r6
 8005606:	463b      	mov	r3, r7
 8005608:	4628      	mov	r0, r5
 800560a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800560e:	f000 b8e7 	b.w	80057e0 <_write_r>

08005612 <__sseek>:
 8005612:	b510      	push	{r4, lr}
 8005614:	460c      	mov	r4, r1
 8005616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800561a:	f000 f8bd 	bl	8005798 <_lseek_r>
 800561e:	1c43      	adds	r3, r0, #1
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	bf15      	itete	ne
 8005624:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005626:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800562a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800562e:	81a3      	strheq	r3, [r4, #12]
 8005630:	bf18      	it	ne
 8005632:	81a3      	strhne	r3, [r4, #12]
 8005634:	bd10      	pop	{r4, pc}

08005636 <__sclose>:
 8005636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800563a:	f000 b89d 	b.w	8005778 <_close_r>

0800563e <__swbuf_r>:
 800563e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005640:	460e      	mov	r6, r1
 8005642:	4614      	mov	r4, r2
 8005644:	4605      	mov	r5, r0
 8005646:	b118      	cbz	r0, 8005650 <__swbuf_r+0x12>
 8005648:	6a03      	ldr	r3, [r0, #32]
 800564a:	b90b      	cbnz	r3, 8005650 <__swbuf_r+0x12>
 800564c:	f7ff feda 	bl	8005404 <__sinit>
 8005650:	69a3      	ldr	r3, [r4, #24]
 8005652:	60a3      	str	r3, [r4, #8]
 8005654:	89a3      	ldrh	r3, [r4, #12]
 8005656:	071a      	lsls	r2, r3, #28
 8005658:	d501      	bpl.n	800565e <__swbuf_r+0x20>
 800565a:	6923      	ldr	r3, [r4, #16]
 800565c:	b943      	cbnz	r3, 8005670 <__swbuf_r+0x32>
 800565e:	4621      	mov	r1, r4
 8005660:	4628      	mov	r0, r5
 8005662:	f000 f82b 	bl	80056bc <__swsetup_r>
 8005666:	b118      	cbz	r0, 8005670 <__swbuf_r+0x32>
 8005668:	f04f 37ff 	mov.w	r7, #4294967295
 800566c:	4638      	mov	r0, r7
 800566e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	6922      	ldr	r2, [r4, #16]
 8005674:	1a98      	subs	r0, r3, r2
 8005676:	6963      	ldr	r3, [r4, #20]
 8005678:	b2f6      	uxtb	r6, r6
 800567a:	4283      	cmp	r3, r0
 800567c:	4637      	mov	r7, r6
 800567e:	dc05      	bgt.n	800568c <__swbuf_r+0x4e>
 8005680:	4621      	mov	r1, r4
 8005682:	4628      	mov	r0, r5
 8005684:	f000 fe90 	bl	80063a8 <_fflush_r>
 8005688:	2800      	cmp	r0, #0
 800568a:	d1ed      	bne.n	8005668 <__swbuf_r+0x2a>
 800568c:	68a3      	ldr	r3, [r4, #8]
 800568e:	3b01      	subs	r3, #1
 8005690:	60a3      	str	r3, [r4, #8]
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	6022      	str	r2, [r4, #0]
 8005698:	701e      	strb	r6, [r3, #0]
 800569a:	6962      	ldr	r2, [r4, #20]
 800569c:	1c43      	adds	r3, r0, #1
 800569e:	429a      	cmp	r2, r3
 80056a0:	d004      	beq.n	80056ac <__swbuf_r+0x6e>
 80056a2:	89a3      	ldrh	r3, [r4, #12]
 80056a4:	07db      	lsls	r3, r3, #31
 80056a6:	d5e1      	bpl.n	800566c <__swbuf_r+0x2e>
 80056a8:	2e0a      	cmp	r6, #10
 80056aa:	d1df      	bne.n	800566c <__swbuf_r+0x2e>
 80056ac:	4621      	mov	r1, r4
 80056ae:	4628      	mov	r0, r5
 80056b0:	f000 fe7a 	bl	80063a8 <_fflush_r>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	d0d9      	beq.n	800566c <__swbuf_r+0x2e>
 80056b8:	e7d6      	b.n	8005668 <__swbuf_r+0x2a>
	...

080056bc <__swsetup_r>:
 80056bc:	b538      	push	{r3, r4, r5, lr}
 80056be:	4b29      	ldr	r3, [pc, #164]	@ (8005764 <__swsetup_r+0xa8>)
 80056c0:	4605      	mov	r5, r0
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	460c      	mov	r4, r1
 80056c6:	b118      	cbz	r0, 80056d0 <__swsetup_r+0x14>
 80056c8:	6a03      	ldr	r3, [r0, #32]
 80056ca:	b90b      	cbnz	r3, 80056d0 <__swsetup_r+0x14>
 80056cc:	f7ff fe9a 	bl	8005404 <__sinit>
 80056d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056d4:	0719      	lsls	r1, r3, #28
 80056d6:	d422      	bmi.n	800571e <__swsetup_r+0x62>
 80056d8:	06da      	lsls	r2, r3, #27
 80056da:	d407      	bmi.n	80056ec <__swsetup_r+0x30>
 80056dc:	2209      	movs	r2, #9
 80056de:	602a      	str	r2, [r5, #0]
 80056e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056e4:	81a3      	strh	r3, [r4, #12]
 80056e6:	f04f 30ff 	mov.w	r0, #4294967295
 80056ea:	e033      	b.n	8005754 <__swsetup_r+0x98>
 80056ec:	0758      	lsls	r0, r3, #29
 80056ee:	d512      	bpl.n	8005716 <__swsetup_r+0x5a>
 80056f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056f2:	b141      	cbz	r1, 8005706 <__swsetup_r+0x4a>
 80056f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056f8:	4299      	cmp	r1, r3
 80056fa:	d002      	beq.n	8005702 <__swsetup_r+0x46>
 80056fc:	4628      	mov	r0, r5
 80056fe:	f000 f8af 	bl	8005860 <_free_r>
 8005702:	2300      	movs	r3, #0
 8005704:	6363      	str	r3, [r4, #52]	@ 0x34
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800570c:	81a3      	strh	r3, [r4, #12]
 800570e:	2300      	movs	r3, #0
 8005710:	6063      	str	r3, [r4, #4]
 8005712:	6923      	ldr	r3, [r4, #16]
 8005714:	6023      	str	r3, [r4, #0]
 8005716:	89a3      	ldrh	r3, [r4, #12]
 8005718:	f043 0308 	orr.w	r3, r3, #8
 800571c:	81a3      	strh	r3, [r4, #12]
 800571e:	6923      	ldr	r3, [r4, #16]
 8005720:	b94b      	cbnz	r3, 8005736 <__swsetup_r+0x7a>
 8005722:	89a3      	ldrh	r3, [r4, #12]
 8005724:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800572c:	d003      	beq.n	8005736 <__swsetup_r+0x7a>
 800572e:	4621      	mov	r1, r4
 8005730:	4628      	mov	r0, r5
 8005732:	f000 fe87 	bl	8006444 <__smakebuf_r>
 8005736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800573a:	f013 0201 	ands.w	r2, r3, #1
 800573e:	d00a      	beq.n	8005756 <__swsetup_r+0x9a>
 8005740:	2200      	movs	r2, #0
 8005742:	60a2      	str	r2, [r4, #8]
 8005744:	6962      	ldr	r2, [r4, #20]
 8005746:	4252      	negs	r2, r2
 8005748:	61a2      	str	r2, [r4, #24]
 800574a:	6922      	ldr	r2, [r4, #16]
 800574c:	b942      	cbnz	r2, 8005760 <__swsetup_r+0xa4>
 800574e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005752:	d1c5      	bne.n	80056e0 <__swsetup_r+0x24>
 8005754:	bd38      	pop	{r3, r4, r5, pc}
 8005756:	0799      	lsls	r1, r3, #30
 8005758:	bf58      	it	pl
 800575a:	6962      	ldrpl	r2, [r4, #20]
 800575c:	60a2      	str	r2, [r4, #8]
 800575e:	e7f4      	b.n	800574a <__swsetup_r+0x8e>
 8005760:	2000      	movs	r0, #0
 8005762:	e7f7      	b.n	8005754 <__swsetup_r+0x98>
 8005764:	20000018 	.word	0x20000018

08005768 <memset>:
 8005768:	4402      	add	r2, r0
 800576a:	4603      	mov	r3, r0
 800576c:	4293      	cmp	r3, r2
 800576e:	d100      	bne.n	8005772 <memset+0xa>
 8005770:	4770      	bx	lr
 8005772:	f803 1b01 	strb.w	r1, [r3], #1
 8005776:	e7f9      	b.n	800576c <memset+0x4>

08005778 <_close_r>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	4d06      	ldr	r5, [pc, #24]	@ (8005794 <_close_r+0x1c>)
 800577c:	2300      	movs	r3, #0
 800577e:	4604      	mov	r4, r0
 8005780:	4608      	mov	r0, r1
 8005782:	602b      	str	r3, [r5, #0]
 8005784:	f7fb fb93 	bl	8000eae <_close>
 8005788:	1c43      	adds	r3, r0, #1
 800578a:	d102      	bne.n	8005792 <_close_r+0x1a>
 800578c:	682b      	ldr	r3, [r5, #0]
 800578e:	b103      	cbz	r3, 8005792 <_close_r+0x1a>
 8005790:	6023      	str	r3, [r4, #0]
 8005792:	bd38      	pop	{r3, r4, r5, pc}
 8005794:	20003594 	.word	0x20003594

08005798 <_lseek_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4d07      	ldr	r5, [pc, #28]	@ (80057b8 <_lseek_r+0x20>)
 800579c:	4604      	mov	r4, r0
 800579e:	4608      	mov	r0, r1
 80057a0:	4611      	mov	r1, r2
 80057a2:	2200      	movs	r2, #0
 80057a4:	602a      	str	r2, [r5, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	f7fb fba8 	bl	8000efc <_lseek>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	d102      	bne.n	80057b6 <_lseek_r+0x1e>
 80057b0:	682b      	ldr	r3, [r5, #0]
 80057b2:	b103      	cbz	r3, 80057b6 <_lseek_r+0x1e>
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	bd38      	pop	{r3, r4, r5, pc}
 80057b8:	20003594 	.word	0x20003594

080057bc <_read_r>:
 80057bc:	b538      	push	{r3, r4, r5, lr}
 80057be:	4d07      	ldr	r5, [pc, #28]	@ (80057dc <_read_r+0x20>)
 80057c0:	4604      	mov	r4, r0
 80057c2:	4608      	mov	r0, r1
 80057c4:	4611      	mov	r1, r2
 80057c6:	2200      	movs	r2, #0
 80057c8:	602a      	str	r2, [r5, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	f7fb fb36 	bl	8000e3c <_read>
 80057d0:	1c43      	adds	r3, r0, #1
 80057d2:	d102      	bne.n	80057da <_read_r+0x1e>
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	b103      	cbz	r3, 80057da <_read_r+0x1e>
 80057d8:	6023      	str	r3, [r4, #0]
 80057da:	bd38      	pop	{r3, r4, r5, pc}
 80057dc:	20003594 	.word	0x20003594

080057e0 <_write_r>:
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	4d07      	ldr	r5, [pc, #28]	@ (8005800 <_write_r+0x20>)
 80057e4:	4604      	mov	r4, r0
 80057e6:	4608      	mov	r0, r1
 80057e8:	4611      	mov	r1, r2
 80057ea:	2200      	movs	r2, #0
 80057ec:	602a      	str	r2, [r5, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	f7fb fb41 	bl	8000e76 <_write>
 80057f4:	1c43      	adds	r3, r0, #1
 80057f6:	d102      	bne.n	80057fe <_write_r+0x1e>
 80057f8:	682b      	ldr	r3, [r5, #0]
 80057fa:	b103      	cbz	r3, 80057fe <_write_r+0x1e>
 80057fc:	6023      	str	r3, [r4, #0]
 80057fe:	bd38      	pop	{r3, r4, r5, pc}
 8005800:	20003594 	.word	0x20003594

08005804 <__errno>:
 8005804:	4b01      	ldr	r3, [pc, #4]	@ (800580c <__errno+0x8>)
 8005806:	6818      	ldr	r0, [r3, #0]
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	20000018 	.word	0x20000018

08005810 <__libc_init_array>:
 8005810:	b570      	push	{r4, r5, r6, lr}
 8005812:	4d0d      	ldr	r5, [pc, #52]	@ (8005848 <__libc_init_array+0x38>)
 8005814:	4c0d      	ldr	r4, [pc, #52]	@ (800584c <__libc_init_array+0x3c>)
 8005816:	1b64      	subs	r4, r4, r5
 8005818:	10a4      	asrs	r4, r4, #2
 800581a:	2600      	movs	r6, #0
 800581c:	42a6      	cmp	r6, r4
 800581e:	d109      	bne.n	8005834 <__libc_init_array+0x24>
 8005820:	4d0b      	ldr	r5, [pc, #44]	@ (8005850 <__libc_init_array+0x40>)
 8005822:	4c0c      	ldr	r4, [pc, #48]	@ (8005854 <__libc_init_array+0x44>)
 8005824:	f000 feda 	bl	80065dc <_init>
 8005828:	1b64      	subs	r4, r4, r5
 800582a:	10a4      	asrs	r4, r4, #2
 800582c:	2600      	movs	r6, #0
 800582e:	42a6      	cmp	r6, r4
 8005830:	d105      	bne.n	800583e <__libc_init_array+0x2e>
 8005832:	bd70      	pop	{r4, r5, r6, pc}
 8005834:	f855 3b04 	ldr.w	r3, [r5], #4
 8005838:	4798      	blx	r3
 800583a:	3601      	adds	r6, #1
 800583c:	e7ee      	b.n	800581c <__libc_init_array+0xc>
 800583e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005842:	4798      	blx	r3
 8005844:	3601      	adds	r6, #1
 8005846:	e7f2      	b.n	800582e <__libc_init_array+0x1e>
 8005848:	08006700 	.word	0x08006700
 800584c:	08006700 	.word	0x08006700
 8005850:	08006700 	.word	0x08006700
 8005854:	08006704 	.word	0x08006704

08005858 <__retarget_lock_init_recursive>:
 8005858:	4770      	bx	lr

0800585a <__retarget_lock_acquire_recursive>:
 800585a:	4770      	bx	lr

0800585c <__retarget_lock_release_recursive>:
 800585c:	4770      	bx	lr
	...

08005860 <_free_r>:
 8005860:	b538      	push	{r3, r4, r5, lr}
 8005862:	4605      	mov	r5, r0
 8005864:	2900      	cmp	r1, #0
 8005866:	d041      	beq.n	80058ec <_free_r+0x8c>
 8005868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800586c:	1f0c      	subs	r4, r1, #4
 800586e:	2b00      	cmp	r3, #0
 8005870:	bfb8      	it	lt
 8005872:	18e4      	addlt	r4, r4, r3
 8005874:	f000 f8e0 	bl	8005a38 <__malloc_lock>
 8005878:	4a1d      	ldr	r2, [pc, #116]	@ (80058f0 <_free_r+0x90>)
 800587a:	6813      	ldr	r3, [r2, #0]
 800587c:	b933      	cbnz	r3, 800588c <_free_r+0x2c>
 800587e:	6063      	str	r3, [r4, #4]
 8005880:	6014      	str	r4, [r2, #0]
 8005882:	4628      	mov	r0, r5
 8005884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005888:	f000 b8dc 	b.w	8005a44 <__malloc_unlock>
 800588c:	42a3      	cmp	r3, r4
 800588e:	d908      	bls.n	80058a2 <_free_r+0x42>
 8005890:	6820      	ldr	r0, [r4, #0]
 8005892:	1821      	adds	r1, r4, r0
 8005894:	428b      	cmp	r3, r1
 8005896:	bf01      	itttt	eq
 8005898:	6819      	ldreq	r1, [r3, #0]
 800589a:	685b      	ldreq	r3, [r3, #4]
 800589c:	1809      	addeq	r1, r1, r0
 800589e:	6021      	streq	r1, [r4, #0]
 80058a0:	e7ed      	b.n	800587e <_free_r+0x1e>
 80058a2:	461a      	mov	r2, r3
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	b10b      	cbz	r3, 80058ac <_free_r+0x4c>
 80058a8:	42a3      	cmp	r3, r4
 80058aa:	d9fa      	bls.n	80058a2 <_free_r+0x42>
 80058ac:	6811      	ldr	r1, [r2, #0]
 80058ae:	1850      	adds	r0, r2, r1
 80058b0:	42a0      	cmp	r0, r4
 80058b2:	d10b      	bne.n	80058cc <_free_r+0x6c>
 80058b4:	6820      	ldr	r0, [r4, #0]
 80058b6:	4401      	add	r1, r0
 80058b8:	1850      	adds	r0, r2, r1
 80058ba:	4283      	cmp	r3, r0
 80058bc:	6011      	str	r1, [r2, #0]
 80058be:	d1e0      	bne.n	8005882 <_free_r+0x22>
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	6053      	str	r3, [r2, #4]
 80058c6:	4408      	add	r0, r1
 80058c8:	6010      	str	r0, [r2, #0]
 80058ca:	e7da      	b.n	8005882 <_free_r+0x22>
 80058cc:	d902      	bls.n	80058d4 <_free_r+0x74>
 80058ce:	230c      	movs	r3, #12
 80058d0:	602b      	str	r3, [r5, #0]
 80058d2:	e7d6      	b.n	8005882 <_free_r+0x22>
 80058d4:	6820      	ldr	r0, [r4, #0]
 80058d6:	1821      	adds	r1, r4, r0
 80058d8:	428b      	cmp	r3, r1
 80058da:	bf04      	itt	eq
 80058dc:	6819      	ldreq	r1, [r3, #0]
 80058de:	685b      	ldreq	r3, [r3, #4]
 80058e0:	6063      	str	r3, [r4, #4]
 80058e2:	bf04      	itt	eq
 80058e4:	1809      	addeq	r1, r1, r0
 80058e6:	6021      	streq	r1, [r4, #0]
 80058e8:	6054      	str	r4, [r2, #4]
 80058ea:	e7ca      	b.n	8005882 <_free_r+0x22>
 80058ec:	bd38      	pop	{r3, r4, r5, pc}
 80058ee:	bf00      	nop
 80058f0:	200035a0 	.word	0x200035a0

080058f4 <sbrk_aligned>:
 80058f4:	b570      	push	{r4, r5, r6, lr}
 80058f6:	4e0f      	ldr	r6, [pc, #60]	@ (8005934 <sbrk_aligned+0x40>)
 80058f8:	460c      	mov	r4, r1
 80058fa:	6831      	ldr	r1, [r6, #0]
 80058fc:	4605      	mov	r5, r0
 80058fe:	b911      	cbnz	r1, 8005906 <sbrk_aligned+0x12>
 8005900:	f000 fe18 	bl	8006534 <_sbrk_r>
 8005904:	6030      	str	r0, [r6, #0]
 8005906:	4621      	mov	r1, r4
 8005908:	4628      	mov	r0, r5
 800590a:	f000 fe13 	bl	8006534 <_sbrk_r>
 800590e:	1c43      	adds	r3, r0, #1
 8005910:	d103      	bne.n	800591a <sbrk_aligned+0x26>
 8005912:	f04f 34ff 	mov.w	r4, #4294967295
 8005916:	4620      	mov	r0, r4
 8005918:	bd70      	pop	{r4, r5, r6, pc}
 800591a:	1cc4      	adds	r4, r0, #3
 800591c:	f024 0403 	bic.w	r4, r4, #3
 8005920:	42a0      	cmp	r0, r4
 8005922:	d0f8      	beq.n	8005916 <sbrk_aligned+0x22>
 8005924:	1a21      	subs	r1, r4, r0
 8005926:	4628      	mov	r0, r5
 8005928:	f000 fe04 	bl	8006534 <_sbrk_r>
 800592c:	3001      	adds	r0, #1
 800592e:	d1f2      	bne.n	8005916 <sbrk_aligned+0x22>
 8005930:	e7ef      	b.n	8005912 <sbrk_aligned+0x1e>
 8005932:	bf00      	nop
 8005934:	2000359c 	.word	0x2000359c

08005938 <_malloc_r>:
 8005938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800593c:	1ccd      	adds	r5, r1, #3
 800593e:	f025 0503 	bic.w	r5, r5, #3
 8005942:	3508      	adds	r5, #8
 8005944:	2d0c      	cmp	r5, #12
 8005946:	bf38      	it	cc
 8005948:	250c      	movcc	r5, #12
 800594a:	2d00      	cmp	r5, #0
 800594c:	4606      	mov	r6, r0
 800594e:	db01      	blt.n	8005954 <_malloc_r+0x1c>
 8005950:	42a9      	cmp	r1, r5
 8005952:	d904      	bls.n	800595e <_malloc_r+0x26>
 8005954:	230c      	movs	r3, #12
 8005956:	6033      	str	r3, [r6, #0]
 8005958:	2000      	movs	r0, #0
 800595a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800595e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a34 <_malloc_r+0xfc>
 8005962:	f000 f869 	bl	8005a38 <__malloc_lock>
 8005966:	f8d8 3000 	ldr.w	r3, [r8]
 800596a:	461c      	mov	r4, r3
 800596c:	bb44      	cbnz	r4, 80059c0 <_malloc_r+0x88>
 800596e:	4629      	mov	r1, r5
 8005970:	4630      	mov	r0, r6
 8005972:	f7ff ffbf 	bl	80058f4 <sbrk_aligned>
 8005976:	1c43      	adds	r3, r0, #1
 8005978:	4604      	mov	r4, r0
 800597a:	d158      	bne.n	8005a2e <_malloc_r+0xf6>
 800597c:	f8d8 4000 	ldr.w	r4, [r8]
 8005980:	4627      	mov	r7, r4
 8005982:	2f00      	cmp	r7, #0
 8005984:	d143      	bne.n	8005a0e <_malloc_r+0xd6>
 8005986:	2c00      	cmp	r4, #0
 8005988:	d04b      	beq.n	8005a22 <_malloc_r+0xea>
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	4639      	mov	r1, r7
 800598e:	4630      	mov	r0, r6
 8005990:	eb04 0903 	add.w	r9, r4, r3
 8005994:	f000 fdce 	bl	8006534 <_sbrk_r>
 8005998:	4581      	cmp	r9, r0
 800599a:	d142      	bne.n	8005a22 <_malloc_r+0xea>
 800599c:	6821      	ldr	r1, [r4, #0]
 800599e:	1a6d      	subs	r5, r5, r1
 80059a0:	4629      	mov	r1, r5
 80059a2:	4630      	mov	r0, r6
 80059a4:	f7ff ffa6 	bl	80058f4 <sbrk_aligned>
 80059a8:	3001      	adds	r0, #1
 80059aa:	d03a      	beq.n	8005a22 <_malloc_r+0xea>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	442b      	add	r3, r5
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	f8d8 3000 	ldr.w	r3, [r8]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	bb62      	cbnz	r2, 8005a14 <_malloc_r+0xdc>
 80059ba:	f8c8 7000 	str.w	r7, [r8]
 80059be:	e00f      	b.n	80059e0 <_malloc_r+0xa8>
 80059c0:	6822      	ldr	r2, [r4, #0]
 80059c2:	1b52      	subs	r2, r2, r5
 80059c4:	d420      	bmi.n	8005a08 <_malloc_r+0xd0>
 80059c6:	2a0b      	cmp	r2, #11
 80059c8:	d917      	bls.n	80059fa <_malloc_r+0xc2>
 80059ca:	1961      	adds	r1, r4, r5
 80059cc:	42a3      	cmp	r3, r4
 80059ce:	6025      	str	r5, [r4, #0]
 80059d0:	bf18      	it	ne
 80059d2:	6059      	strne	r1, [r3, #4]
 80059d4:	6863      	ldr	r3, [r4, #4]
 80059d6:	bf08      	it	eq
 80059d8:	f8c8 1000 	streq.w	r1, [r8]
 80059dc:	5162      	str	r2, [r4, r5]
 80059de:	604b      	str	r3, [r1, #4]
 80059e0:	4630      	mov	r0, r6
 80059e2:	f000 f82f 	bl	8005a44 <__malloc_unlock>
 80059e6:	f104 000b 	add.w	r0, r4, #11
 80059ea:	1d23      	adds	r3, r4, #4
 80059ec:	f020 0007 	bic.w	r0, r0, #7
 80059f0:	1ac2      	subs	r2, r0, r3
 80059f2:	bf1c      	itt	ne
 80059f4:	1a1b      	subne	r3, r3, r0
 80059f6:	50a3      	strne	r3, [r4, r2]
 80059f8:	e7af      	b.n	800595a <_malloc_r+0x22>
 80059fa:	6862      	ldr	r2, [r4, #4]
 80059fc:	42a3      	cmp	r3, r4
 80059fe:	bf0c      	ite	eq
 8005a00:	f8c8 2000 	streq.w	r2, [r8]
 8005a04:	605a      	strne	r2, [r3, #4]
 8005a06:	e7eb      	b.n	80059e0 <_malloc_r+0xa8>
 8005a08:	4623      	mov	r3, r4
 8005a0a:	6864      	ldr	r4, [r4, #4]
 8005a0c:	e7ae      	b.n	800596c <_malloc_r+0x34>
 8005a0e:	463c      	mov	r4, r7
 8005a10:	687f      	ldr	r7, [r7, #4]
 8005a12:	e7b6      	b.n	8005982 <_malloc_r+0x4a>
 8005a14:	461a      	mov	r2, r3
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	42a3      	cmp	r3, r4
 8005a1a:	d1fb      	bne.n	8005a14 <_malloc_r+0xdc>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	6053      	str	r3, [r2, #4]
 8005a20:	e7de      	b.n	80059e0 <_malloc_r+0xa8>
 8005a22:	230c      	movs	r3, #12
 8005a24:	6033      	str	r3, [r6, #0]
 8005a26:	4630      	mov	r0, r6
 8005a28:	f000 f80c 	bl	8005a44 <__malloc_unlock>
 8005a2c:	e794      	b.n	8005958 <_malloc_r+0x20>
 8005a2e:	6005      	str	r5, [r0, #0]
 8005a30:	e7d6      	b.n	80059e0 <_malloc_r+0xa8>
 8005a32:	bf00      	nop
 8005a34:	200035a0 	.word	0x200035a0

08005a38 <__malloc_lock>:
 8005a38:	4801      	ldr	r0, [pc, #4]	@ (8005a40 <__malloc_lock+0x8>)
 8005a3a:	f7ff bf0e 	b.w	800585a <__retarget_lock_acquire_recursive>
 8005a3e:	bf00      	nop
 8005a40:	20003598 	.word	0x20003598

08005a44 <__malloc_unlock>:
 8005a44:	4801      	ldr	r0, [pc, #4]	@ (8005a4c <__malloc_unlock+0x8>)
 8005a46:	f7ff bf09 	b.w	800585c <__retarget_lock_release_recursive>
 8005a4a:	bf00      	nop
 8005a4c:	20003598 	.word	0x20003598

08005a50 <__ssputs_r>:
 8005a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a54:	688e      	ldr	r6, [r1, #8]
 8005a56:	461f      	mov	r7, r3
 8005a58:	42be      	cmp	r6, r7
 8005a5a:	680b      	ldr	r3, [r1, #0]
 8005a5c:	4682      	mov	sl, r0
 8005a5e:	460c      	mov	r4, r1
 8005a60:	4690      	mov	r8, r2
 8005a62:	d82d      	bhi.n	8005ac0 <__ssputs_r+0x70>
 8005a64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a6c:	d026      	beq.n	8005abc <__ssputs_r+0x6c>
 8005a6e:	6965      	ldr	r5, [r4, #20]
 8005a70:	6909      	ldr	r1, [r1, #16]
 8005a72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a76:	eba3 0901 	sub.w	r9, r3, r1
 8005a7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a7e:	1c7b      	adds	r3, r7, #1
 8005a80:	444b      	add	r3, r9
 8005a82:	106d      	asrs	r5, r5, #1
 8005a84:	429d      	cmp	r5, r3
 8005a86:	bf38      	it	cc
 8005a88:	461d      	movcc	r5, r3
 8005a8a:	0553      	lsls	r3, r2, #21
 8005a8c:	d527      	bpl.n	8005ade <__ssputs_r+0x8e>
 8005a8e:	4629      	mov	r1, r5
 8005a90:	f7ff ff52 	bl	8005938 <_malloc_r>
 8005a94:	4606      	mov	r6, r0
 8005a96:	b360      	cbz	r0, 8005af2 <__ssputs_r+0xa2>
 8005a98:	6921      	ldr	r1, [r4, #16]
 8005a9a:	464a      	mov	r2, r9
 8005a9c:	f000 fd5a 	bl	8006554 <memcpy>
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005aa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aaa:	81a3      	strh	r3, [r4, #12]
 8005aac:	6126      	str	r6, [r4, #16]
 8005aae:	6165      	str	r5, [r4, #20]
 8005ab0:	444e      	add	r6, r9
 8005ab2:	eba5 0509 	sub.w	r5, r5, r9
 8005ab6:	6026      	str	r6, [r4, #0]
 8005ab8:	60a5      	str	r5, [r4, #8]
 8005aba:	463e      	mov	r6, r7
 8005abc:	42be      	cmp	r6, r7
 8005abe:	d900      	bls.n	8005ac2 <__ssputs_r+0x72>
 8005ac0:	463e      	mov	r6, r7
 8005ac2:	6820      	ldr	r0, [r4, #0]
 8005ac4:	4632      	mov	r2, r6
 8005ac6:	4641      	mov	r1, r8
 8005ac8:	f000 fcf8 	bl	80064bc <memmove>
 8005acc:	68a3      	ldr	r3, [r4, #8]
 8005ace:	1b9b      	subs	r3, r3, r6
 8005ad0:	60a3      	str	r3, [r4, #8]
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	4433      	add	r3, r6
 8005ad6:	6023      	str	r3, [r4, #0]
 8005ad8:	2000      	movs	r0, #0
 8005ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ade:	462a      	mov	r2, r5
 8005ae0:	f000 fd46 	bl	8006570 <_realloc_r>
 8005ae4:	4606      	mov	r6, r0
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d1e0      	bne.n	8005aac <__ssputs_r+0x5c>
 8005aea:	6921      	ldr	r1, [r4, #16]
 8005aec:	4650      	mov	r0, sl
 8005aee:	f7ff feb7 	bl	8005860 <_free_r>
 8005af2:	230c      	movs	r3, #12
 8005af4:	f8ca 3000 	str.w	r3, [sl]
 8005af8:	89a3      	ldrh	r3, [r4, #12]
 8005afa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005afe:	81a3      	strh	r3, [r4, #12]
 8005b00:	f04f 30ff 	mov.w	r0, #4294967295
 8005b04:	e7e9      	b.n	8005ada <__ssputs_r+0x8a>
	...

08005b08 <_svfiprintf_r>:
 8005b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0c:	4698      	mov	r8, r3
 8005b0e:	898b      	ldrh	r3, [r1, #12]
 8005b10:	061b      	lsls	r3, r3, #24
 8005b12:	b09d      	sub	sp, #116	@ 0x74
 8005b14:	4607      	mov	r7, r0
 8005b16:	460d      	mov	r5, r1
 8005b18:	4614      	mov	r4, r2
 8005b1a:	d510      	bpl.n	8005b3e <_svfiprintf_r+0x36>
 8005b1c:	690b      	ldr	r3, [r1, #16]
 8005b1e:	b973      	cbnz	r3, 8005b3e <_svfiprintf_r+0x36>
 8005b20:	2140      	movs	r1, #64	@ 0x40
 8005b22:	f7ff ff09 	bl	8005938 <_malloc_r>
 8005b26:	6028      	str	r0, [r5, #0]
 8005b28:	6128      	str	r0, [r5, #16]
 8005b2a:	b930      	cbnz	r0, 8005b3a <_svfiprintf_r+0x32>
 8005b2c:	230c      	movs	r3, #12
 8005b2e:	603b      	str	r3, [r7, #0]
 8005b30:	f04f 30ff 	mov.w	r0, #4294967295
 8005b34:	b01d      	add	sp, #116	@ 0x74
 8005b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3a:	2340      	movs	r3, #64	@ 0x40
 8005b3c:	616b      	str	r3, [r5, #20]
 8005b3e:	2300      	movs	r3, #0
 8005b40:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b42:	2320      	movs	r3, #32
 8005b44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b48:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b4c:	2330      	movs	r3, #48	@ 0x30
 8005b4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005cec <_svfiprintf_r+0x1e4>
 8005b52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b56:	f04f 0901 	mov.w	r9, #1
 8005b5a:	4623      	mov	r3, r4
 8005b5c:	469a      	mov	sl, r3
 8005b5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b62:	b10a      	cbz	r2, 8005b68 <_svfiprintf_r+0x60>
 8005b64:	2a25      	cmp	r2, #37	@ 0x25
 8005b66:	d1f9      	bne.n	8005b5c <_svfiprintf_r+0x54>
 8005b68:	ebba 0b04 	subs.w	fp, sl, r4
 8005b6c:	d00b      	beq.n	8005b86 <_svfiprintf_r+0x7e>
 8005b6e:	465b      	mov	r3, fp
 8005b70:	4622      	mov	r2, r4
 8005b72:	4629      	mov	r1, r5
 8005b74:	4638      	mov	r0, r7
 8005b76:	f7ff ff6b 	bl	8005a50 <__ssputs_r>
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	f000 80a7 	beq.w	8005cce <_svfiprintf_r+0x1c6>
 8005b80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b82:	445a      	add	r2, fp
 8005b84:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b86:	f89a 3000 	ldrb.w	r3, [sl]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 809f 	beq.w	8005cce <_svfiprintf_r+0x1c6>
 8005b90:	2300      	movs	r3, #0
 8005b92:	f04f 32ff 	mov.w	r2, #4294967295
 8005b96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b9a:	f10a 0a01 	add.w	sl, sl, #1
 8005b9e:	9304      	str	r3, [sp, #16]
 8005ba0:	9307      	str	r3, [sp, #28]
 8005ba2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ba6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ba8:	4654      	mov	r4, sl
 8005baa:	2205      	movs	r2, #5
 8005bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb0:	484e      	ldr	r0, [pc, #312]	@ (8005cec <_svfiprintf_r+0x1e4>)
 8005bb2:	f7fa fb35 	bl	8000220 <memchr>
 8005bb6:	9a04      	ldr	r2, [sp, #16]
 8005bb8:	b9d8      	cbnz	r0, 8005bf2 <_svfiprintf_r+0xea>
 8005bba:	06d0      	lsls	r0, r2, #27
 8005bbc:	bf44      	itt	mi
 8005bbe:	2320      	movmi	r3, #32
 8005bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bc4:	0711      	lsls	r1, r2, #28
 8005bc6:	bf44      	itt	mi
 8005bc8:	232b      	movmi	r3, #43	@ 0x2b
 8005bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bce:	f89a 3000 	ldrb.w	r3, [sl]
 8005bd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bd4:	d015      	beq.n	8005c02 <_svfiprintf_r+0xfa>
 8005bd6:	9a07      	ldr	r2, [sp, #28]
 8005bd8:	4654      	mov	r4, sl
 8005bda:	2000      	movs	r0, #0
 8005bdc:	f04f 0c0a 	mov.w	ip, #10
 8005be0:	4621      	mov	r1, r4
 8005be2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005be6:	3b30      	subs	r3, #48	@ 0x30
 8005be8:	2b09      	cmp	r3, #9
 8005bea:	d94b      	bls.n	8005c84 <_svfiprintf_r+0x17c>
 8005bec:	b1b0      	cbz	r0, 8005c1c <_svfiprintf_r+0x114>
 8005bee:	9207      	str	r2, [sp, #28]
 8005bf0:	e014      	b.n	8005c1c <_svfiprintf_r+0x114>
 8005bf2:	eba0 0308 	sub.w	r3, r0, r8
 8005bf6:	fa09 f303 	lsl.w	r3, r9, r3
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	9304      	str	r3, [sp, #16]
 8005bfe:	46a2      	mov	sl, r4
 8005c00:	e7d2      	b.n	8005ba8 <_svfiprintf_r+0xa0>
 8005c02:	9b03      	ldr	r3, [sp, #12]
 8005c04:	1d19      	adds	r1, r3, #4
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	9103      	str	r1, [sp, #12]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	bfbb      	ittet	lt
 8005c0e:	425b      	neglt	r3, r3
 8005c10:	f042 0202 	orrlt.w	r2, r2, #2
 8005c14:	9307      	strge	r3, [sp, #28]
 8005c16:	9307      	strlt	r3, [sp, #28]
 8005c18:	bfb8      	it	lt
 8005c1a:	9204      	strlt	r2, [sp, #16]
 8005c1c:	7823      	ldrb	r3, [r4, #0]
 8005c1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c20:	d10a      	bne.n	8005c38 <_svfiprintf_r+0x130>
 8005c22:	7863      	ldrb	r3, [r4, #1]
 8005c24:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c26:	d132      	bne.n	8005c8e <_svfiprintf_r+0x186>
 8005c28:	9b03      	ldr	r3, [sp, #12]
 8005c2a:	1d1a      	adds	r2, r3, #4
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	9203      	str	r2, [sp, #12]
 8005c30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c34:	3402      	adds	r4, #2
 8005c36:	9305      	str	r3, [sp, #20]
 8005c38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005cfc <_svfiprintf_r+0x1f4>
 8005c3c:	7821      	ldrb	r1, [r4, #0]
 8005c3e:	2203      	movs	r2, #3
 8005c40:	4650      	mov	r0, sl
 8005c42:	f7fa faed 	bl	8000220 <memchr>
 8005c46:	b138      	cbz	r0, 8005c58 <_svfiprintf_r+0x150>
 8005c48:	9b04      	ldr	r3, [sp, #16]
 8005c4a:	eba0 000a 	sub.w	r0, r0, sl
 8005c4e:	2240      	movs	r2, #64	@ 0x40
 8005c50:	4082      	lsls	r2, r0
 8005c52:	4313      	orrs	r3, r2
 8005c54:	3401      	adds	r4, #1
 8005c56:	9304      	str	r3, [sp, #16]
 8005c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c5c:	4824      	ldr	r0, [pc, #144]	@ (8005cf0 <_svfiprintf_r+0x1e8>)
 8005c5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c62:	2206      	movs	r2, #6
 8005c64:	f7fa fadc 	bl	8000220 <memchr>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d036      	beq.n	8005cda <_svfiprintf_r+0x1d2>
 8005c6c:	4b21      	ldr	r3, [pc, #132]	@ (8005cf4 <_svfiprintf_r+0x1ec>)
 8005c6e:	bb1b      	cbnz	r3, 8005cb8 <_svfiprintf_r+0x1b0>
 8005c70:	9b03      	ldr	r3, [sp, #12]
 8005c72:	3307      	adds	r3, #7
 8005c74:	f023 0307 	bic.w	r3, r3, #7
 8005c78:	3308      	adds	r3, #8
 8005c7a:	9303      	str	r3, [sp, #12]
 8005c7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c7e:	4433      	add	r3, r6
 8005c80:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c82:	e76a      	b.n	8005b5a <_svfiprintf_r+0x52>
 8005c84:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c88:	460c      	mov	r4, r1
 8005c8a:	2001      	movs	r0, #1
 8005c8c:	e7a8      	b.n	8005be0 <_svfiprintf_r+0xd8>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	3401      	adds	r4, #1
 8005c92:	9305      	str	r3, [sp, #20]
 8005c94:	4619      	mov	r1, r3
 8005c96:	f04f 0c0a 	mov.w	ip, #10
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ca0:	3a30      	subs	r2, #48	@ 0x30
 8005ca2:	2a09      	cmp	r2, #9
 8005ca4:	d903      	bls.n	8005cae <_svfiprintf_r+0x1a6>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0c6      	beq.n	8005c38 <_svfiprintf_r+0x130>
 8005caa:	9105      	str	r1, [sp, #20]
 8005cac:	e7c4      	b.n	8005c38 <_svfiprintf_r+0x130>
 8005cae:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e7f0      	b.n	8005c9a <_svfiprintf_r+0x192>
 8005cb8:	ab03      	add	r3, sp, #12
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	462a      	mov	r2, r5
 8005cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8005cf8 <_svfiprintf_r+0x1f0>)
 8005cc0:	a904      	add	r1, sp, #16
 8005cc2:	4638      	mov	r0, r7
 8005cc4:	f3af 8000 	nop.w
 8005cc8:	1c42      	adds	r2, r0, #1
 8005cca:	4606      	mov	r6, r0
 8005ccc:	d1d6      	bne.n	8005c7c <_svfiprintf_r+0x174>
 8005cce:	89ab      	ldrh	r3, [r5, #12]
 8005cd0:	065b      	lsls	r3, r3, #25
 8005cd2:	f53f af2d 	bmi.w	8005b30 <_svfiprintf_r+0x28>
 8005cd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cd8:	e72c      	b.n	8005b34 <_svfiprintf_r+0x2c>
 8005cda:	ab03      	add	r3, sp, #12
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	462a      	mov	r2, r5
 8005ce0:	4b05      	ldr	r3, [pc, #20]	@ (8005cf8 <_svfiprintf_r+0x1f0>)
 8005ce2:	a904      	add	r1, sp, #16
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	f000 f9bb 	bl	8006060 <_printf_i>
 8005cea:	e7ed      	b.n	8005cc8 <_svfiprintf_r+0x1c0>
 8005cec:	080066c4 	.word	0x080066c4
 8005cf0:	080066ce 	.word	0x080066ce
 8005cf4:	00000000 	.word	0x00000000
 8005cf8:	08005a51 	.word	0x08005a51
 8005cfc:	080066ca 	.word	0x080066ca

08005d00 <__sfputc_r>:
 8005d00:	6893      	ldr	r3, [r2, #8]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	b410      	push	{r4}
 8005d08:	6093      	str	r3, [r2, #8]
 8005d0a:	da08      	bge.n	8005d1e <__sfputc_r+0x1e>
 8005d0c:	6994      	ldr	r4, [r2, #24]
 8005d0e:	42a3      	cmp	r3, r4
 8005d10:	db01      	blt.n	8005d16 <__sfputc_r+0x16>
 8005d12:	290a      	cmp	r1, #10
 8005d14:	d103      	bne.n	8005d1e <__sfputc_r+0x1e>
 8005d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d1a:	f7ff bc90 	b.w	800563e <__swbuf_r>
 8005d1e:	6813      	ldr	r3, [r2, #0]
 8005d20:	1c58      	adds	r0, r3, #1
 8005d22:	6010      	str	r0, [r2, #0]
 8005d24:	7019      	strb	r1, [r3, #0]
 8005d26:	4608      	mov	r0, r1
 8005d28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <__sfputs_r>:
 8005d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d30:	4606      	mov	r6, r0
 8005d32:	460f      	mov	r7, r1
 8005d34:	4614      	mov	r4, r2
 8005d36:	18d5      	adds	r5, r2, r3
 8005d38:	42ac      	cmp	r4, r5
 8005d3a:	d101      	bne.n	8005d40 <__sfputs_r+0x12>
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	e007      	b.n	8005d50 <__sfputs_r+0x22>
 8005d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d44:	463a      	mov	r2, r7
 8005d46:	4630      	mov	r0, r6
 8005d48:	f7ff ffda 	bl	8005d00 <__sfputc_r>
 8005d4c:	1c43      	adds	r3, r0, #1
 8005d4e:	d1f3      	bne.n	8005d38 <__sfputs_r+0xa>
 8005d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d54 <_vfiprintf_r>:
 8005d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d58:	460d      	mov	r5, r1
 8005d5a:	b09d      	sub	sp, #116	@ 0x74
 8005d5c:	4614      	mov	r4, r2
 8005d5e:	4698      	mov	r8, r3
 8005d60:	4606      	mov	r6, r0
 8005d62:	b118      	cbz	r0, 8005d6c <_vfiprintf_r+0x18>
 8005d64:	6a03      	ldr	r3, [r0, #32]
 8005d66:	b90b      	cbnz	r3, 8005d6c <_vfiprintf_r+0x18>
 8005d68:	f7ff fb4c 	bl	8005404 <__sinit>
 8005d6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d6e:	07d9      	lsls	r1, r3, #31
 8005d70:	d405      	bmi.n	8005d7e <_vfiprintf_r+0x2a>
 8005d72:	89ab      	ldrh	r3, [r5, #12]
 8005d74:	059a      	lsls	r2, r3, #22
 8005d76:	d402      	bmi.n	8005d7e <_vfiprintf_r+0x2a>
 8005d78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d7a:	f7ff fd6e 	bl	800585a <__retarget_lock_acquire_recursive>
 8005d7e:	89ab      	ldrh	r3, [r5, #12]
 8005d80:	071b      	lsls	r3, r3, #28
 8005d82:	d501      	bpl.n	8005d88 <_vfiprintf_r+0x34>
 8005d84:	692b      	ldr	r3, [r5, #16]
 8005d86:	b99b      	cbnz	r3, 8005db0 <_vfiprintf_r+0x5c>
 8005d88:	4629      	mov	r1, r5
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	f7ff fc96 	bl	80056bc <__swsetup_r>
 8005d90:	b170      	cbz	r0, 8005db0 <_vfiprintf_r+0x5c>
 8005d92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d94:	07dc      	lsls	r4, r3, #31
 8005d96:	d504      	bpl.n	8005da2 <_vfiprintf_r+0x4e>
 8005d98:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9c:	b01d      	add	sp, #116	@ 0x74
 8005d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da2:	89ab      	ldrh	r3, [r5, #12]
 8005da4:	0598      	lsls	r0, r3, #22
 8005da6:	d4f7      	bmi.n	8005d98 <_vfiprintf_r+0x44>
 8005da8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005daa:	f7ff fd57 	bl	800585c <__retarget_lock_release_recursive>
 8005dae:	e7f3      	b.n	8005d98 <_vfiprintf_r+0x44>
 8005db0:	2300      	movs	r3, #0
 8005db2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005db4:	2320      	movs	r3, #32
 8005db6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005dba:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dbe:	2330      	movs	r3, #48	@ 0x30
 8005dc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005f70 <_vfiprintf_r+0x21c>
 8005dc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005dc8:	f04f 0901 	mov.w	r9, #1
 8005dcc:	4623      	mov	r3, r4
 8005dce:	469a      	mov	sl, r3
 8005dd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dd4:	b10a      	cbz	r2, 8005dda <_vfiprintf_r+0x86>
 8005dd6:	2a25      	cmp	r2, #37	@ 0x25
 8005dd8:	d1f9      	bne.n	8005dce <_vfiprintf_r+0x7a>
 8005dda:	ebba 0b04 	subs.w	fp, sl, r4
 8005dde:	d00b      	beq.n	8005df8 <_vfiprintf_r+0xa4>
 8005de0:	465b      	mov	r3, fp
 8005de2:	4622      	mov	r2, r4
 8005de4:	4629      	mov	r1, r5
 8005de6:	4630      	mov	r0, r6
 8005de8:	f7ff ffa1 	bl	8005d2e <__sfputs_r>
 8005dec:	3001      	adds	r0, #1
 8005dee:	f000 80a7 	beq.w	8005f40 <_vfiprintf_r+0x1ec>
 8005df2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005df4:	445a      	add	r2, fp
 8005df6:	9209      	str	r2, [sp, #36]	@ 0x24
 8005df8:	f89a 3000 	ldrb.w	r3, [sl]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 809f 	beq.w	8005f40 <_vfiprintf_r+0x1ec>
 8005e02:	2300      	movs	r3, #0
 8005e04:	f04f 32ff 	mov.w	r2, #4294967295
 8005e08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e0c:	f10a 0a01 	add.w	sl, sl, #1
 8005e10:	9304      	str	r3, [sp, #16]
 8005e12:	9307      	str	r3, [sp, #28]
 8005e14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e18:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e1a:	4654      	mov	r4, sl
 8005e1c:	2205      	movs	r2, #5
 8005e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e22:	4853      	ldr	r0, [pc, #332]	@ (8005f70 <_vfiprintf_r+0x21c>)
 8005e24:	f7fa f9fc 	bl	8000220 <memchr>
 8005e28:	9a04      	ldr	r2, [sp, #16]
 8005e2a:	b9d8      	cbnz	r0, 8005e64 <_vfiprintf_r+0x110>
 8005e2c:	06d1      	lsls	r1, r2, #27
 8005e2e:	bf44      	itt	mi
 8005e30:	2320      	movmi	r3, #32
 8005e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e36:	0713      	lsls	r3, r2, #28
 8005e38:	bf44      	itt	mi
 8005e3a:	232b      	movmi	r3, #43	@ 0x2b
 8005e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e40:	f89a 3000 	ldrb.w	r3, [sl]
 8005e44:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e46:	d015      	beq.n	8005e74 <_vfiprintf_r+0x120>
 8005e48:	9a07      	ldr	r2, [sp, #28]
 8005e4a:	4654      	mov	r4, sl
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	f04f 0c0a 	mov.w	ip, #10
 8005e52:	4621      	mov	r1, r4
 8005e54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e58:	3b30      	subs	r3, #48	@ 0x30
 8005e5a:	2b09      	cmp	r3, #9
 8005e5c:	d94b      	bls.n	8005ef6 <_vfiprintf_r+0x1a2>
 8005e5e:	b1b0      	cbz	r0, 8005e8e <_vfiprintf_r+0x13a>
 8005e60:	9207      	str	r2, [sp, #28]
 8005e62:	e014      	b.n	8005e8e <_vfiprintf_r+0x13a>
 8005e64:	eba0 0308 	sub.w	r3, r0, r8
 8005e68:	fa09 f303 	lsl.w	r3, r9, r3
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	9304      	str	r3, [sp, #16]
 8005e70:	46a2      	mov	sl, r4
 8005e72:	e7d2      	b.n	8005e1a <_vfiprintf_r+0xc6>
 8005e74:	9b03      	ldr	r3, [sp, #12]
 8005e76:	1d19      	adds	r1, r3, #4
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	9103      	str	r1, [sp, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bfbb      	ittet	lt
 8005e80:	425b      	neglt	r3, r3
 8005e82:	f042 0202 	orrlt.w	r2, r2, #2
 8005e86:	9307      	strge	r3, [sp, #28]
 8005e88:	9307      	strlt	r3, [sp, #28]
 8005e8a:	bfb8      	it	lt
 8005e8c:	9204      	strlt	r2, [sp, #16]
 8005e8e:	7823      	ldrb	r3, [r4, #0]
 8005e90:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e92:	d10a      	bne.n	8005eaa <_vfiprintf_r+0x156>
 8005e94:	7863      	ldrb	r3, [r4, #1]
 8005e96:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e98:	d132      	bne.n	8005f00 <_vfiprintf_r+0x1ac>
 8005e9a:	9b03      	ldr	r3, [sp, #12]
 8005e9c:	1d1a      	adds	r2, r3, #4
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	9203      	str	r2, [sp, #12]
 8005ea2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ea6:	3402      	adds	r4, #2
 8005ea8:	9305      	str	r3, [sp, #20]
 8005eaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005f80 <_vfiprintf_r+0x22c>
 8005eae:	7821      	ldrb	r1, [r4, #0]
 8005eb0:	2203      	movs	r2, #3
 8005eb2:	4650      	mov	r0, sl
 8005eb4:	f7fa f9b4 	bl	8000220 <memchr>
 8005eb8:	b138      	cbz	r0, 8005eca <_vfiprintf_r+0x176>
 8005eba:	9b04      	ldr	r3, [sp, #16]
 8005ebc:	eba0 000a 	sub.w	r0, r0, sl
 8005ec0:	2240      	movs	r2, #64	@ 0x40
 8005ec2:	4082      	lsls	r2, r0
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	3401      	adds	r4, #1
 8005ec8:	9304      	str	r3, [sp, #16]
 8005eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ece:	4829      	ldr	r0, [pc, #164]	@ (8005f74 <_vfiprintf_r+0x220>)
 8005ed0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ed4:	2206      	movs	r2, #6
 8005ed6:	f7fa f9a3 	bl	8000220 <memchr>
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d03f      	beq.n	8005f5e <_vfiprintf_r+0x20a>
 8005ede:	4b26      	ldr	r3, [pc, #152]	@ (8005f78 <_vfiprintf_r+0x224>)
 8005ee0:	bb1b      	cbnz	r3, 8005f2a <_vfiprintf_r+0x1d6>
 8005ee2:	9b03      	ldr	r3, [sp, #12]
 8005ee4:	3307      	adds	r3, #7
 8005ee6:	f023 0307 	bic.w	r3, r3, #7
 8005eea:	3308      	adds	r3, #8
 8005eec:	9303      	str	r3, [sp, #12]
 8005eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ef0:	443b      	add	r3, r7
 8005ef2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ef4:	e76a      	b.n	8005dcc <_vfiprintf_r+0x78>
 8005ef6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005efa:	460c      	mov	r4, r1
 8005efc:	2001      	movs	r0, #1
 8005efe:	e7a8      	b.n	8005e52 <_vfiprintf_r+0xfe>
 8005f00:	2300      	movs	r3, #0
 8005f02:	3401      	adds	r4, #1
 8005f04:	9305      	str	r3, [sp, #20]
 8005f06:	4619      	mov	r1, r3
 8005f08:	f04f 0c0a 	mov.w	ip, #10
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f12:	3a30      	subs	r2, #48	@ 0x30
 8005f14:	2a09      	cmp	r2, #9
 8005f16:	d903      	bls.n	8005f20 <_vfiprintf_r+0x1cc>
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0c6      	beq.n	8005eaa <_vfiprintf_r+0x156>
 8005f1c:	9105      	str	r1, [sp, #20]
 8005f1e:	e7c4      	b.n	8005eaa <_vfiprintf_r+0x156>
 8005f20:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f24:	4604      	mov	r4, r0
 8005f26:	2301      	movs	r3, #1
 8005f28:	e7f0      	b.n	8005f0c <_vfiprintf_r+0x1b8>
 8005f2a:	ab03      	add	r3, sp, #12
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	462a      	mov	r2, r5
 8005f30:	4b12      	ldr	r3, [pc, #72]	@ (8005f7c <_vfiprintf_r+0x228>)
 8005f32:	a904      	add	r1, sp, #16
 8005f34:	4630      	mov	r0, r6
 8005f36:	f3af 8000 	nop.w
 8005f3a:	4607      	mov	r7, r0
 8005f3c:	1c78      	adds	r0, r7, #1
 8005f3e:	d1d6      	bne.n	8005eee <_vfiprintf_r+0x19a>
 8005f40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f42:	07d9      	lsls	r1, r3, #31
 8005f44:	d405      	bmi.n	8005f52 <_vfiprintf_r+0x1fe>
 8005f46:	89ab      	ldrh	r3, [r5, #12]
 8005f48:	059a      	lsls	r2, r3, #22
 8005f4a:	d402      	bmi.n	8005f52 <_vfiprintf_r+0x1fe>
 8005f4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f4e:	f7ff fc85 	bl	800585c <__retarget_lock_release_recursive>
 8005f52:	89ab      	ldrh	r3, [r5, #12]
 8005f54:	065b      	lsls	r3, r3, #25
 8005f56:	f53f af1f 	bmi.w	8005d98 <_vfiprintf_r+0x44>
 8005f5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f5c:	e71e      	b.n	8005d9c <_vfiprintf_r+0x48>
 8005f5e:	ab03      	add	r3, sp, #12
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	462a      	mov	r2, r5
 8005f64:	4b05      	ldr	r3, [pc, #20]	@ (8005f7c <_vfiprintf_r+0x228>)
 8005f66:	a904      	add	r1, sp, #16
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f000 f879 	bl	8006060 <_printf_i>
 8005f6e:	e7e4      	b.n	8005f3a <_vfiprintf_r+0x1e6>
 8005f70:	080066c4 	.word	0x080066c4
 8005f74:	080066ce 	.word	0x080066ce
 8005f78:	00000000 	.word	0x00000000
 8005f7c:	08005d2f 	.word	0x08005d2f
 8005f80:	080066ca 	.word	0x080066ca

08005f84 <_printf_common>:
 8005f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f88:	4616      	mov	r6, r2
 8005f8a:	4698      	mov	r8, r3
 8005f8c:	688a      	ldr	r2, [r1, #8]
 8005f8e:	690b      	ldr	r3, [r1, #16]
 8005f90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f94:	4293      	cmp	r3, r2
 8005f96:	bfb8      	it	lt
 8005f98:	4613      	movlt	r3, r2
 8005f9a:	6033      	str	r3, [r6, #0]
 8005f9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fa0:	4607      	mov	r7, r0
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	b10a      	cbz	r2, 8005faa <_printf_common+0x26>
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	6033      	str	r3, [r6, #0]
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	0699      	lsls	r1, r3, #26
 8005fae:	bf42      	ittt	mi
 8005fb0:	6833      	ldrmi	r3, [r6, #0]
 8005fb2:	3302      	addmi	r3, #2
 8005fb4:	6033      	strmi	r3, [r6, #0]
 8005fb6:	6825      	ldr	r5, [r4, #0]
 8005fb8:	f015 0506 	ands.w	r5, r5, #6
 8005fbc:	d106      	bne.n	8005fcc <_printf_common+0x48>
 8005fbe:	f104 0a19 	add.w	sl, r4, #25
 8005fc2:	68e3      	ldr	r3, [r4, #12]
 8005fc4:	6832      	ldr	r2, [r6, #0]
 8005fc6:	1a9b      	subs	r3, r3, r2
 8005fc8:	42ab      	cmp	r3, r5
 8005fca:	dc26      	bgt.n	800601a <_printf_common+0x96>
 8005fcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005fd0:	6822      	ldr	r2, [r4, #0]
 8005fd2:	3b00      	subs	r3, #0
 8005fd4:	bf18      	it	ne
 8005fd6:	2301      	movne	r3, #1
 8005fd8:	0692      	lsls	r2, r2, #26
 8005fda:	d42b      	bmi.n	8006034 <_printf_common+0xb0>
 8005fdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005fe0:	4641      	mov	r1, r8
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	47c8      	blx	r9
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	d01e      	beq.n	8006028 <_printf_common+0xa4>
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	6922      	ldr	r2, [r4, #16]
 8005fee:	f003 0306 	and.w	r3, r3, #6
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	bf02      	ittt	eq
 8005ff6:	68e5      	ldreq	r5, [r4, #12]
 8005ff8:	6833      	ldreq	r3, [r6, #0]
 8005ffa:	1aed      	subeq	r5, r5, r3
 8005ffc:	68a3      	ldr	r3, [r4, #8]
 8005ffe:	bf0c      	ite	eq
 8006000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006004:	2500      	movne	r5, #0
 8006006:	4293      	cmp	r3, r2
 8006008:	bfc4      	itt	gt
 800600a:	1a9b      	subgt	r3, r3, r2
 800600c:	18ed      	addgt	r5, r5, r3
 800600e:	2600      	movs	r6, #0
 8006010:	341a      	adds	r4, #26
 8006012:	42b5      	cmp	r5, r6
 8006014:	d11a      	bne.n	800604c <_printf_common+0xc8>
 8006016:	2000      	movs	r0, #0
 8006018:	e008      	b.n	800602c <_printf_common+0xa8>
 800601a:	2301      	movs	r3, #1
 800601c:	4652      	mov	r2, sl
 800601e:	4641      	mov	r1, r8
 8006020:	4638      	mov	r0, r7
 8006022:	47c8      	blx	r9
 8006024:	3001      	adds	r0, #1
 8006026:	d103      	bne.n	8006030 <_printf_common+0xac>
 8006028:	f04f 30ff 	mov.w	r0, #4294967295
 800602c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006030:	3501      	adds	r5, #1
 8006032:	e7c6      	b.n	8005fc2 <_printf_common+0x3e>
 8006034:	18e1      	adds	r1, r4, r3
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	2030      	movs	r0, #48	@ 0x30
 800603a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800603e:	4422      	add	r2, r4
 8006040:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006044:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006048:	3302      	adds	r3, #2
 800604a:	e7c7      	b.n	8005fdc <_printf_common+0x58>
 800604c:	2301      	movs	r3, #1
 800604e:	4622      	mov	r2, r4
 8006050:	4641      	mov	r1, r8
 8006052:	4638      	mov	r0, r7
 8006054:	47c8      	blx	r9
 8006056:	3001      	adds	r0, #1
 8006058:	d0e6      	beq.n	8006028 <_printf_common+0xa4>
 800605a:	3601      	adds	r6, #1
 800605c:	e7d9      	b.n	8006012 <_printf_common+0x8e>
	...

08006060 <_printf_i>:
 8006060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006064:	7e0f      	ldrb	r7, [r1, #24]
 8006066:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006068:	2f78      	cmp	r7, #120	@ 0x78
 800606a:	4691      	mov	r9, r2
 800606c:	4680      	mov	r8, r0
 800606e:	460c      	mov	r4, r1
 8006070:	469a      	mov	sl, r3
 8006072:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006076:	d807      	bhi.n	8006088 <_printf_i+0x28>
 8006078:	2f62      	cmp	r7, #98	@ 0x62
 800607a:	d80a      	bhi.n	8006092 <_printf_i+0x32>
 800607c:	2f00      	cmp	r7, #0
 800607e:	f000 80d2 	beq.w	8006226 <_printf_i+0x1c6>
 8006082:	2f58      	cmp	r7, #88	@ 0x58
 8006084:	f000 80b9 	beq.w	80061fa <_printf_i+0x19a>
 8006088:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800608c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006090:	e03a      	b.n	8006108 <_printf_i+0xa8>
 8006092:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006096:	2b15      	cmp	r3, #21
 8006098:	d8f6      	bhi.n	8006088 <_printf_i+0x28>
 800609a:	a101      	add	r1, pc, #4	@ (adr r1, 80060a0 <_printf_i+0x40>)
 800609c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060a0:	080060f9 	.word	0x080060f9
 80060a4:	0800610d 	.word	0x0800610d
 80060a8:	08006089 	.word	0x08006089
 80060ac:	08006089 	.word	0x08006089
 80060b0:	08006089 	.word	0x08006089
 80060b4:	08006089 	.word	0x08006089
 80060b8:	0800610d 	.word	0x0800610d
 80060bc:	08006089 	.word	0x08006089
 80060c0:	08006089 	.word	0x08006089
 80060c4:	08006089 	.word	0x08006089
 80060c8:	08006089 	.word	0x08006089
 80060cc:	0800620d 	.word	0x0800620d
 80060d0:	08006137 	.word	0x08006137
 80060d4:	080061c7 	.word	0x080061c7
 80060d8:	08006089 	.word	0x08006089
 80060dc:	08006089 	.word	0x08006089
 80060e0:	0800622f 	.word	0x0800622f
 80060e4:	08006089 	.word	0x08006089
 80060e8:	08006137 	.word	0x08006137
 80060ec:	08006089 	.word	0x08006089
 80060f0:	08006089 	.word	0x08006089
 80060f4:	080061cf 	.word	0x080061cf
 80060f8:	6833      	ldr	r3, [r6, #0]
 80060fa:	1d1a      	adds	r2, r3, #4
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6032      	str	r2, [r6, #0]
 8006100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006104:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006108:	2301      	movs	r3, #1
 800610a:	e09d      	b.n	8006248 <_printf_i+0x1e8>
 800610c:	6833      	ldr	r3, [r6, #0]
 800610e:	6820      	ldr	r0, [r4, #0]
 8006110:	1d19      	adds	r1, r3, #4
 8006112:	6031      	str	r1, [r6, #0]
 8006114:	0606      	lsls	r6, r0, #24
 8006116:	d501      	bpl.n	800611c <_printf_i+0xbc>
 8006118:	681d      	ldr	r5, [r3, #0]
 800611a:	e003      	b.n	8006124 <_printf_i+0xc4>
 800611c:	0645      	lsls	r5, r0, #25
 800611e:	d5fb      	bpl.n	8006118 <_printf_i+0xb8>
 8006120:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006124:	2d00      	cmp	r5, #0
 8006126:	da03      	bge.n	8006130 <_printf_i+0xd0>
 8006128:	232d      	movs	r3, #45	@ 0x2d
 800612a:	426d      	negs	r5, r5
 800612c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006130:	4859      	ldr	r0, [pc, #356]	@ (8006298 <_printf_i+0x238>)
 8006132:	230a      	movs	r3, #10
 8006134:	e011      	b.n	800615a <_printf_i+0xfa>
 8006136:	6821      	ldr	r1, [r4, #0]
 8006138:	6833      	ldr	r3, [r6, #0]
 800613a:	0608      	lsls	r0, r1, #24
 800613c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006140:	d402      	bmi.n	8006148 <_printf_i+0xe8>
 8006142:	0649      	lsls	r1, r1, #25
 8006144:	bf48      	it	mi
 8006146:	b2ad      	uxthmi	r5, r5
 8006148:	2f6f      	cmp	r7, #111	@ 0x6f
 800614a:	4853      	ldr	r0, [pc, #332]	@ (8006298 <_printf_i+0x238>)
 800614c:	6033      	str	r3, [r6, #0]
 800614e:	bf14      	ite	ne
 8006150:	230a      	movne	r3, #10
 8006152:	2308      	moveq	r3, #8
 8006154:	2100      	movs	r1, #0
 8006156:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800615a:	6866      	ldr	r6, [r4, #4]
 800615c:	60a6      	str	r6, [r4, #8]
 800615e:	2e00      	cmp	r6, #0
 8006160:	bfa2      	ittt	ge
 8006162:	6821      	ldrge	r1, [r4, #0]
 8006164:	f021 0104 	bicge.w	r1, r1, #4
 8006168:	6021      	strge	r1, [r4, #0]
 800616a:	b90d      	cbnz	r5, 8006170 <_printf_i+0x110>
 800616c:	2e00      	cmp	r6, #0
 800616e:	d04b      	beq.n	8006208 <_printf_i+0x1a8>
 8006170:	4616      	mov	r6, r2
 8006172:	fbb5 f1f3 	udiv	r1, r5, r3
 8006176:	fb03 5711 	mls	r7, r3, r1, r5
 800617a:	5dc7      	ldrb	r7, [r0, r7]
 800617c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006180:	462f      	mov	r7, r5
 8006182:	42bb      	cmp	r3, r7
 8006184:	460d      	mov	r5, r1
 8006186:	d9f4      	bls.n	8006172 <_printf_i+0x112>
 8006188:	2b08      	cmp	r3, #8
 800618a:	d10b      	bne.n	80061a4 <_printf_i+0x144>
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	07df      	lsls	r7, r3, #31
 8006190:	d508      	bpl.n	80061a4 <_printf_i+0x144>
 8006192:	6923      	ldr	r3, [r4, #16]
 8006194:	6861      	ldr	r1, [r4, #4]
 8006196:	4299      	cmp	r1, r3
 8006198:	bfde      	ittt	le
 800619a:	2330      	movle	r3, #48	@ 0x30
 800619c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061a4:	1b92      	subs	r2, r2, r6
 80061a6:	6122      	str	r2, [r4, #16]
 80061a8:	f8cd a000 	str.w	sl, [sp]
 80061ac:	464b      	mov	r3, r9
 80061ae:	aa03      	add	r2, sp, #12
 80061b0:	4621      	mov	r1, r4
 80061b2:	4640      	mov	r0, r8
 80061b4:	f7ff fee6 	bl	8005f84 <_printf_common>
 80061b8:	3001      	adds	r0, #1
 80061ba:	d14a      	bne.n	8006252 <_printf_i+0x1f2>
 80061bc:	f04f 30ff 	mov.w	r0, #4294967295
 80061c0:	b004      	add	sp, #16
 80061c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	f043 0320 	orr.w	r3, r3, #32
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	4833      	ldr	r0, [pc, #204]	@ (800629c <_printf_i+0x23c>)
 80061d0:	2778      	movs	r7, #120	@ 0x78
 80061d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	6831      	ldr	r1, [r6, #0]
 80061da:	061f      	lsls	r7, r3, #24
 80061dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80061e0:	d402      	bmi.n	80061e8 <_printf_i+0x188>
 80061e2:	065f      	lsls	r7, r3, #25
 80061e4:	bf48      	it	mi
 80061e6:	b2ad      	uxthmi	r5, r5
 80061e8:	6031      	str	r1, [r6, #0]
 80061ea:	07d9      	lsls	r1, r3, #31
 80061ec:	bf44      	itt	mi
 80061ee:	f043 0320 	orrmi.w	r3, r3, #32
 80061f2:	6023      	strmi	r3, [r4, #0]
 80061f4:	b11d      	cbz	r5, 80061fe <_printf_i+0x19e>
 80061f6:	2310      	movs	r3, #16
 80061f8:	e7ac      	b.n	8006154 <_printf_i+0xf4>
 80061fa:	4827      	ldr	r0, [pc, #156]	@ (8006298 <_printf_i+0x238>)
 80061fc:	e7e9      	b.n	80061d2 <_printf_i+0x172>
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	f023 0320 	bic.w	r3, r3, #32
 8006204:	6023      	str	r3, [r4, #0]
 8006206:	e7f6      	b.n	80061f6 <_printf_i+0x196>
 8006208:	4616      	mov	r6, r2
 800620a:	e7bd      	b.n	8006188 <_printf_i+0x128>
 800620c:	6833      	ldr	r3, [r6, #0]
 800620e:	6825      	ldr	r5, [r4, #0]
 8006210:	6961      	ldr	r1, [r4, #20]
 8006212:	1d18      	adds	r0, r3, #4
 8006214:	6030      	str	r0, [r6, #0]
 8006216:	062e      	lsls	r6, r5, #24
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	d501      	bpl.n	8006220 <_printf_i+0x1c0>
 800621c:	6019      	str	r1, [r3, #0]
 800621e:	e002      	b.n	8006226 <_printf_i+0x1c6>
 8006220:	0668      	lsls	r0, r5, #25
 8006222:	d5fb      	bpl.n	800621c <_printf_i+0x1bc>
 8006224:	8019      	strh	r1, [r3, #0]
 8006226:	2300      	movs	r3, #0
 8006228:	6123      	str	r3, [r4, #16]
 800622a:	4616      	mov	r6, r2
 800622c:	e7bc      	b.n	80061a8 <_printf_i+0x148>
 800622e:	6833      	ldr	r3, [r6, #0]
 8006230:	1d1a      	adds	r2, r3, #4
 8006232:	6032      	str	r2, [r6, #0]
 8006234:	681e      	ldr	r6, [r3, #0]
 8006236:	6862      	ldr	r2, [r4, #4]
 8006238:	2100      	movs	r1, #0
 800623a:	4630      	mov	r0, r6
 800623c:	f7f9 fff0 	bl	8000220 <memchr>
 8006240:	b108      	cbz	r0, 8006246 <_printf_i+0x1e6>
 8006242:	1b80      	subs	r0, r0, r6
 8006244:	6060      	str	r0, [r4, #4]
 8006246:	6863      	ldr	r3, [r4, #4]
 8006248:	6123      	str	r3, [r4, #16]
 800624a:	2300      	movs	r3, #0
 800624c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006250:	e7aa      	b.n	80061a8 <_printf_i+0x148>
 8006252:	6923      	ldr	r3, [r4, #16]
 8006254:	4632      	mov	r2, r6
 8006256:	4649      	mov	r1, r9
 8006258:	4640      	mov	r0, r8
 800625a:	47d0      	blx	sl
 800625c:	3001      	adds	r0, #1
 800625e:	d0ad      	beq.n	80061bc <_printf_i+0x15c>
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	079b      	lsls	r3, r3, #30
 8006264:	d413      	bmi.n	800628e <_printf_i+0x22e>
 8006266:	68e0      	ldr	r0, [r4, #12]
 8006268:	9b03      	ldr	r3, [sp, #12]
 800626a:	4298      	cmp	r0, r3
 800626c:	bfb8      	it	lt
 800626e:	4618      	movlt	r0, r3
 8006270:	e7a6      	b.n	80061c0 <_printf_i+0x160>
 8006272:	2301      	movs	r3, #1
 8006274:	4632      	mov	r2, r6
 8006276:	4649      	mov	r1, r9
 8006278:	4640      	mov	r0, r8
 800627a:	47d0      	blx	sl
 800627c:	3001      	adds	r0, #1
 800627e:	d09d      	beq.n	80061bc <_printf_i+0x15c>
 8006280:	3501      	adds	r5, #1
 8006282:	68e3      	ldr	r3, [r4, #12]
 8006284:	9903      	ldr	r1, [sp, #12]
 8006286:	1a5b      	subs	r3, r3, r1
 8006288:	42ab      	cmp	r3, r5
 800628a:	dcf2      	bgt.n	8006272 <_printf_i+0x212>
 800628c:	e7eb      	b.n	8006266 <_printf_i+0x206>
 800628e:	2500      	movs	r5, #0
 8006290:	f104 0619 	add.w	r6, r4, #25
 8006294:	e7f5      	b.n	8006282 <_printf_i+0x222>
 8006296:	bf00      	nop
 8006298:	080066d5 	.word	0x080066d5
 800629c:	080066e6 	.word	0x080066e6

080062a0 <__sflush_r>:
 80062a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a8:	0716      	lsls	r6, r2, #28
 80062aa:	4605      	mov	r5, r0
 80062ac:	460c      	mov	r4, r1
 80062ae:	d454      	bmi.n	800635a <__sflush_r+0xba>
 80062b0:	684b      	ldr	r3, [r1, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	dc02      	bgt.n	80062bc <__sflush_r+0x1c>
 80062b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	dd48      	ble.n	800634e <__sflush_r+0xae>
 80062bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062be:	2e00      	cmp	r6, #0
 80062c0:	d045      	beq.n	800634e <__sflush_r+0xae>
 80062c2:	2300      	movs	r3, #0
 80062c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80062c8:	682f      	ldr	r7, [r5, #0]
 80062ca:	6a21      	ldr	r1, [r4, #32]
 80062cc:	602b      	str	r3, [r5, #0]
 80062ce:	d030      	beq.n	8006332 <__sflush_r+0x92>
 80062d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80062d2:	89a3      	ldrh	r3, [r4, #12]
 80062d4:	0759      	lsls	r1, r3, #29
 80062d6:	d505      	bpl.n	80062e4 <__sflush_r+0x44>
 80062d8:	6863      	ldr	r3, [r4, #4]
 80062da:	1ad2      	subs	r2, r2, r3
 80062dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062de:	b10b      	cbz	r3, 80062e4 <__sflush_r+0x44>
 80062e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80062e2:	1ad2      	subs	r2, r2, r3
 80062e4:	2300      	movs	r3, #0
 80062e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062e8:	6a21      	ldr	r1, [r4, #32]
 80062ea:	4628      	mov	r0, r5
 80062ec:	47b0      	blx	r6
 80062ee:	1c43      	adds	r3, r0, #1
 80062f0:	89a3      	ldrh	r3, [r4, #12]
 80062f2:	d106      	bne.n	8006302 <__sflush_r+0x62>
 80062f4:	6829      	ldr	r1, [r5, #0]
 80062f6:	291d      	cmp	r1, #29
 80062f8:	d82b      	bhi.n	8006352 <__sflush_r+0xb2>
 80062fa:	4a2a      	ldr	r2, [pc, #168]	@ (80063a4 <__sflush_r+0x104>)
 80062fc:	410a      	asrs	r2, r1
 80062fe:	07d6      	lsls	r6, r2, #31
 8006300:	d427      	bmi.n	8006352 <__sflush_r+0xb2>
 8006302:	2200      	movs	r2, #0
 8006304:	6062      	str	r2, [r4, #4]
 8006306:	04d9      	lsls	r1, r3, #19
 8006308:	6922      	ldr	r2, [r4, #16]
 800630a:	6022      	str	r2, [r4, #0]
 800630c:	d504      	bpl.n	8006318 <__sflush_r+0x78>
 800630e:	1c42      	adds	r2, r0, #1
 8006310:	d101      	bne.n	8006316 <__sflush_r+0x76>
 8006312:	682b      	ldr	r3, [r5, #0]
 8006314:	b903      	cbnz	r3, 8006318 <__sflush_r+0x78>
 8006316:	6560      	str	r0, [r4, #84]	@ 0x54
 8006318:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800631a:	602f      	str	r7, [r5, #0]
 800631c:	b1b9      	cbz	r1, 800634e <__sflush_r+0xae>
 800631e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006322:	4299      	cmp	r1, r3
 8006324:	d002      	beq.n	800632c <__sflush_r+0x8c>
 8006326:	4628      	mov	r0, r5
 8006328:	f7ff fa9a 	bl	8005860 <_free_r>
 800632c:	2300      	movs	r3, #0
 800632e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006330:	e00d      	b.n	800634e <__sflush_r+0xae>
 8006332:	2301      	movs	r3, #1
 8006334:	4628      	mov	r0, r5
 8006336:	47b0      	blx	r6
 8006338:	4602      	mov	r2, r0
 800633a:	1c50      	adds	r0, r2, #1
 800633c:	d1c9      	bne.n	80062d2 <__sflush_r+0x32>
 800633e:	682b      	ldr	r3, [r5, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d0c6      	beq.n	80062d2 <__sflush_r+0x32>
 8006344:	2b1d      	cmp	r3, #29
 8006346:	d001      	beq.n	800634c <__sflush_r+0xac>
 8006348:	2b16      	cmp	r3, #22
 800634a:	d11e      	bne.n	800638a <__sflush_r+0xea>
 800634c:	602f      	str	r7, [r5, #0]
 800634e:	2000      	movs	r0, #0
 8006350:	e022      	b.n	8006398 <__sflush_r+0xf8>
 8006352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006356:	b21b      	sxth	r3, r3
 8006358:	e01b      	b.n	8006392 <__sflush_r+0xf2>
 800635a:	690f      	ldr	r7, [r1, #16]
 800635c:	2f00      	cmp	r7, #0
 800635e:	d0f6      	beq.n	800634e <__sflush_r+0xae>
 8006360:	0793      	lsls	r3, r2, #30
 8006362:	680e      	ldr	r6, [r1, #0]
 8006364:	bf08      	it	eq
 8006366:	694b      	ldreq	r3, [r1, #20]
 8006368:	600f      	str	r7, [r1, #0]
 800636a:	bf18      	it	ne
 800636c:	2300      	movne	r3, #0
 800636e:	eba6 0807 	sub.w	r8, r6, r7
 8006372:	608b      	str	r3, [r1, #8]
 8006374:	f1b8 0f00 	cmp.w	r8, #0
 8006378:	dde9      	ble.n	800634e <__sflush_r+0xae>
 800637a:	6a21      	ldr	r1, [r4, #32]
 800637c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800637e:	4643      	mov	r3, r8
 8006380:	463a      	mov	r2, r7
 8006382:	4628      	mov	r0, r5
 8006384:	47b0      	blx	r6
 8006386:	2800      	cmp	r0, #0
 8006388:	dc08      	bgt.n	800639c <__sflush_r+0xfc>
 800638a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800638e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006392:	81a3      	strh	r3, [r4, #12]
 8006394:	f04f 30ff 	mov.w	r0, #4294967295
 8006398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800639c:	4407      	add	r7, r0
 800639e:	eba8 0800 	sub.w	r8, r8, r0
 80063a2:	e7e7      	b.n	8006374 <__sflush_r+0xd4>
 80063a4:	dfbffffe 	.word	0xdfbffffe

080063a8 <_fflush_r>:
 80063a8:	b538      	push	{r3, r4, r5, lr}
 80063aa:	690b      	ldr	r3, [r1, #16]
 80063ac:	4605      	mov	r5, r0
 80063ae:	460c      	mov	r4, r1
 80063b0:	b913      	cbnz	r3, 80063b8 <_fflush_r+0x10>
 80063b2:	2500      	movs	r5, #0
 80063b4:	4628      	mov	r0, r5
 80063b6:	bd38      	pop	{r3, r4, r5, pc}
 80063b8:	b118      	cbz	r0, 80063c2 <_fflush_r+0x1a>
 80063ba:	6a03      	ldr	r3, [r0, #32]
 80063bc:	b90b      	cbnz	r3, 80063c2 <_fflush_r+0x1a>
 80063be:	f7ff f821 	bl	8005404 <__sinit>
 80063c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0f3      	beq.n	80063b2 <_fflush_r+0xa>
 80063ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80063cc:	07d0      	lsls	r0, r2, #31
 80063ce:	d404      	bmi.n	80063da <_fflush_r+0x32>
 80063d0:	0599      	lsls	r1, r3, #22
 80063d2:	d402      	bmi.n	80063da <_fflush_r+0x32>
 80063d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063d6:	f7ff fa40 	bl	800585a <__retarget_lock_acquire_recursive>
 80063da:	4628      	mov	r0, r5
 80063dc:	4621      	mov	r1, r4
 80063de:	f7ff ff5f 	bl	80062a0 <__sflush_r>
 80063e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063e4:	07da      	lsls	r2, r3, #31
 80063e6:	4605      	mov	r5, r0
 80063e8:	d4e4      	bmi.n	80063b4 <_fflush_r+0xc>
 80063ea:	89a3      	ldrh	r3, [r4, #12]
 80063ec:	059b      	lsls	r3, r3, #22
 80063ee:	d4e1      	bmi.n	80063b4 <_fflush_r+0xc>
 80063f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063f2:	f7ff fa33 	bl	800585c <__retarget_lock_release_recursive>
 80063f6:	e7dd      	b.n	80063b4 <_fflush_r+0xc>

080063f8 <__swhatbuf_r>:
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	460c      	mov	r4, r1
 80063fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006400:	2900      	cmp	r1, #0
 8006402:	b096      	sub	sp, #88	@ 0x58
 8006404:	4615      	mov	r5, r2
 8006406:	461e      	mov	r6, r3
 8006408:	da0d      	bge.n	8006426 <__swhatbuf_r+0x2e>
 800640a:	89a3      	ldrh	r3, [r4, #12]
 800640c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006410:	f04f 0100 	mov.w	r1, #0
 8006414:	bf14      	ite	ne
 8006416:	2340      	movne	r3, #64	@ 0x40
 8006418:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800641c:	2000      	movs	r0, #0
 800641e:	6031      	str	r1, [r6, #0]
 8006420:	602b      	str	r3, [r5, #0]
 8006422:	b016      	add	sp, #88	@ 0x58
 8006424:	bd70      	pop	{r4, r5, r6, pc}
 8006426:	466a      	mov	r2, sp
 8006428:	f000 f862 	bl	80064f0 <_fstat_r>
 800642c:	2800      	cmp	r0, #0
 800642e:	dbec      	blt.n	800640a <__swhatbuf_r+0x12>
 8006430:	9901      	ldr	r1, [sp, #4]
 8006432:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006436:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800643a:	4259      	negs	r1, r3
 800643c:	4159      	adcs	r1, r3
 800643e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006442:	e7eb      	b.n	800641c <__swhatbuf_r+0x24>

08006444 <__smakebuf_r>:
 8006444:	898b      	ldrh	r3, [r1, #12]
 8006446:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006448:	079d      	lsls	r5, r3, #30
 800644a:	4606      	mov	r6, r0
 800644c:	460c      	mov	r4, r1
 800644e:	d507      	bpl.n	8006460 <__smakebuf_r+0x1c>
 8006450:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	6123      	str	r3, [r4, #16]
 8006458:	2301      	movs	r3, #1
 800645a:	6163      	str	r3, [r4, #20]
 800645c:	b003      	add	sp, #12
 800645e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006460:	ab01      	add	r3, sp, #4
 8006462:	466a      	mov	r2, sp
 8006464:	f7ff ffc8 	bl	80063f8 <__swhatbuf_r>
 8006468:	9f00      	ldr	r7, [sp, #0]
 800646a:	4605      	mov	r5, r0
 800646c:	4639      	mov	r1, r7
 800646e:	4630      	mov	r0, r6
 8006470:	f7ff fa62 	bl	8005938 <_malloc_r>
 8006474:	b948      	cbnz	r0, 800648a <__smakebuf_r+0x46>
 8006476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800647a:	059a      	lsls	r2, r3, #22
 800647c:	d4ee      	bmi.n	800645c <__smakebuf_r+0x18>
 800647e:	f023 0303 	bic.w	r3, r3, #3
 8006482:	f043 0302 	orr.w	r3, r3, #2
 8006486:	81a3      	strh	r3, [r4, #12]
 8006488:	e7e2      	b.n	8006450 <__smakebuf_r+0xc>
 800648a:	89a3      	ldrh	r3, [r4, #12]
 800648c:	6020      	str	r0, [r4, #0]
 800648e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006492:	81a3      	strh	r3, [r4, #12]
 8006494:	9b01      	ldr	r3, [sp, #4]
 8006496:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800649a:	b15b      	cbz	r3, 80064b4 <__smakebuf_r+0x70>
 800649c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064a0:	4630      	mov	r0, r6
 80064a2:	f000 f837 	bl	8006514 <_isatty_r>
 80064a6:	b128      	cbz	r0, 80064b4 <__smakebuf_r+0x70>
 80064a8:	89a3      	ldrh	r3, [r4, #12]
 80064aa:	f023 0303 	bic.w	r3, r3, #3
 80064ae:	f043 0301 	orr.w	r3, r3, #1
 80064b2:	81a3      	strh	r3, [r4, #12]
 80064b4:	89a3      	ldrh	r3, [r4, #12]
 80064b6:	431d      	orrs	r5, r3
 80064b8:	81a5      	strh	r5, [r4, #12]
 80064ba:	e7cf      	b.n	800645c <__smakebuf_r+0x18>

080064bc <memmove>:
 80064bc:	4288      	cmp	r0, r1
 80064be:	b510      	push	{r4, lr}
 80064c0:	eb01 0402 	add.w	r4, r1, r2
 80064c4:	d902      	bls.n	80064cc <memmove+0x10>
 80064c6:	4284      	cmp	r4, r0
 80064c8:	4623      	mov	r3, r4
 80064ca:	d807      	bhi.n	80064dc <memmove+0x20>
 80064cc:	1e43      	subs	r3, r0, #1
 80064ce:	42a1      	cmp	r1, r4
 80064d0:	d008      	beq.n	80064e4 <memmove+0x28>
 80064d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064da:	e7f8      	b.n	80064ce <memmove+0x12>
 80064dc:	4402      	add	r2, r0
 80064de:	4601      	mov	r1, r0
 80064e0:	428a      	cmp	r2, r1
 80064e2:	d100      	bne.n	80064e6 <memmove+0x2a>
 80064e4:	bd10      	pop	{r4, pc}
 80064e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064ee:	e7f7      	b.n	80064e0 <memmove+0x24>

080064f0 <_fstat_r>:
 80064f0:	b538      	push	{r3, r4, r5, lr}
 80064f2:	4d07      	ldr	r5, [pc, #28]	@ (8006510 <_fstat_r+0x20>)
 80064f4:	2300      	movs	r3, #0
 80064f6:	4604      	mov	r4, r0
 80064f8:	4608      	mov	r0, r1
 80064fa:	4611      	mov	r1, r2
 80064fc:	602b      	str	r3, [r5, #0]
 80064fe:	f7fa fce2 	bl	8000ec6 <_fstat>
 8006502:	1c43      	adds	r3, r0, #1
 8006504:	d102      	bne.n	800650c <_fstat_r+0x1c>
 8006506:	682b      	ldr	r3, [r5, #0]
 8006508:	b103      	cbz	r3, 800650c <_fstat_r+0x1c>
 800650a:	6023      	str	r3, [r4, #0]
 800650c:	bd38      	pop	{r3, r4, r5, pc}
 800650e:	bf00      	nop
 8006510:	20003594 	.word	0x20003594

08006514 <_isatty_r>:
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	4d06      	ldr	r5, [pc, #24]	@ (8006530 <_isatty_r+0x1c>)
 8006518:	2300      	movs	r3, #0
 800651a:	4604      	mov	r4, r0
 800651c:	4608      	mov	r0, r1
 800651e:	602b      	str	r3, [r5, #0]
 8006520:	f7fa fce1 	bl	8000ee6 <_isatty>
 8006524:	1c43      	adds	r3, r0, #1
 8006526:	d102      	bne.n	800652e <_isatty_r+0x1a>
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	b103      	cbz	r3, 800652e <_isatty_r+0x1a>
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	bd38      	pop	{r3, r4, r5, pc}
 8006530:	20003594 	.word	0x20003594

08006534 <_sbrk_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	4d06      	ldr	r5, [pc, #24]	@ (8006550 <_sbrk_r+0x1c>)
 8006538:	2300      	movs	r3, #0
 800653a:	4604      	mov	r4, r0
 800653c:	4608      	mov	r0, r1
 800653e:	602b      	str	r3, [r5, #0]
 8006540:	f7fa fcea 	bl	8000f18 <_sbrk>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	d102      	bne.n	800654e <_sbrk_r+0x1a>
 8006548:	682b      	ldr	r3, [r5, #0]
 800654a:	b103      	cbz	r3, 800654e <_sbrk_r+0x1a>
 800654c:	6023      	str	r3, [r4, #0]
 800654e:	bd38      	pop	{r3, r4, r5, pc}
 8006550:	20003594 	.word	0x20003594

08006554 <memcpy>:
 8006554:	440a      	add	r2, r1
 8006556:	4291      	cmp	r1, r2
 8006558:	f100 33ff 	add.w	r3, r0, #4294967295
 800655c:	d100      	bne.n	8006560 <memcpy+0xc>
 800655e:	4770      	bx	lr
 8006560:	b510      	push	{r4, lr}
 8006562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800656a:	4291      	cmp	r1, r2
 800656c:	d1f9      	bne.n	8006562 <memcpy+0xe>
 800656e:	bd10      	pop	{r4, pc}

08006570 <_realloc_r>:
 8006570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006574:	4680      	mov	r8, r0
 8006576:	4615      	mov	r5, r2
 8006578:	460c      	mov	r4, r1
 800657a:	b921      	cbnz	r1, 8006586 <_realloc_r+0x16>
 800657c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006580:	4611      	mov	r1, r2
 8006582:	f7ff b9d9 	b.w	8005938 <_malloc_r>
 8006586:	b92a      	cbnz	r2, 8006594 <_realloc_r+0x24>
 8006588:	f7ff f96a 	bl	8005860 <_free_r>
 800658c:	2400      	movs	r4, #0
 800658e:	4620      	mov	r0, r4
 8006590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006594:	f000 f81a 	bl	80065cc <_malloc_usable_size_r>
 8006598:	4285      	cmp	r5, r0
 800659a:	4606      	mov	r6, r0
 800659c:	d802      	bhi.n	80065a4 <_realloc_r+0x34>
 800659e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80065a2:	d8f4      	bhi.n	800658e <_realloc_r+0x1e>
 80065a4:	4629      	mov	r1, r5
 80065a6:	4640      	mov	r0, r8
 80065a8:	f7ff f9c6 	bl	8005938 <_malloc_r>
 80065ac:	4607      	mov	r7, r0
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d0ec      	beq.n	800658c <_realloc_r+0x1c>
 80065b2:	42b5      	cmp	r5, r6
 80065b4:	462a      	mov	r2, r5
 80065b6:	4621      	mov	r1, r4
 80065b8:	bf28      	it	cs
 80065ba:	4632      	movcs	r2, r6
 80065bc:	f7ff ffca 	bl	8006554 <memcpy>
 80065c0:	4621      	mov	r1, r4
 80065c2:	4640      	mov	r0, r8
 80065c4:	f7ff f94c 	bl	8005860 <_free_r>
 80065c8:	463c      	mov	r4, r7
 80065ca:	e7e0      	b.n	800658e <_realloc_r+0x1e>

080065cc <_malloc_usable_size_r>:
 80065cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065d0:	1f18      	subs	r0, r3, #4
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	bfbc      	itt	lt
 80065d6:	580b      	ldrlt	r3, [r1, r0]
 80065d8:	18c0      	addlt	r0, r0, r3
 80065da:	4770      	bx	lr

080065dc <_init>:
 80065dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065de:	bf00      	nop
 80065e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e2:	bc08      	pop	{r3}
 80065e4:	469e      	mov	lr, r3
 80065e6:	4770      	bx	lr

080065e8 <_fini>:
 80065e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ea:	bf00      	nop
 80065ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ee:	bc08      	pop	{r3}
 80065f0:	469e      	mov	lr, r3
 80065f2:	4770      	bx	lr
