
Test_Lidar_projet_Torero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000770c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080078f0  080078f0  000088f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a20  08007a20  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007a20  08007a20  00008a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a28  08007a28  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a28  08007a28  00008a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a2c  08007a2c  00008a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007a30  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba8  20000068  08007a98  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c10  08007a98  00009c10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013aad  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e2  00000000  00000000  0001cb45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0001f528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db3  00000000  00000000  000206b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6b7  00000000  00000000  0002146b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c65  00000000  00000000  00040b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8c8c  00000000  00000000  00055787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e413  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000565c  00000000  00000000  0011e458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  00123ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	080078d4 	.word	0x080078d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	080078d4 	.word	0x080078d4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b96a 	b.w	8000f48 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	460c      	mov	r4, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14e      	bne.n	8000d36 <__udivmoddi4+0xaa>
 8000c98:	4694      	mov	ip, r2
 8000c9a:	458c      	cmp	ip, r1
 8000c9c:	4686      	mov	lr, r0
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	d962      	bls.n	8000d6a <__udivmoddi4+0xde>
 8000ca4:	b14a      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	4091      	lsls	r1, r2
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb4:	4319      	orrs	r1, r3
 8000cb6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f f68c 	uxth.w	r6, ip
 8000cc2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cca:	fb07 1114 	mls	r1, r7, r4, r1
 8000cce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd2:	fb04 f106 	mul.w	r1, r4, r6
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d90a      	bls.n	8000cf0 <__udivmoddi4+0x64>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ce2:	f080 8112 	bcs.w	8000f0a <__udivmoddi4+0x27e>
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	f240 810f 	bls.w	8000f0a <__udivmoddi4+0x27e>
 8000cec:	3c02      	subs	r4, #2
 8000cee:	4463      	add	r3, ip
 8000cf0:	1a59      	subs	r1, r3, r1
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d02:	fb00 f606 	mul.w	r6, r0, r6
 8000d06:	429e      	cmp	r6, r3
 8000d08:	d90a      	bls.n	8000d20 <__udivmoddi4+0x94>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d12:	f080 80fc 	bcs.w	8000f0e <__udivmoddi4+0x282>
 8000d16:	429e      	cmp	r6, r3
 8000d18:	f240 80f9 	bls.w	8000f0e <__udivmoddi4+0x282>
 8000d1c:	4463      	add	r3, ip
 8000d1e:	3802      	subs	r0, #2
 8000d20:	1b9b      	subs	r3, r3, r6
 8000d22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d26:	2100      	movs	r1, #0
 8000d28:	b11d      	cbz	r5, 8000d32 <__udivmoddi4+0xa6>
 8000d2a:	40d3      	lsrs	r3, r2
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d905      	bls.n	8000d46 <__udivmoddi4+0xba>
 8000d3a:	b10d      	cbz	r5, 8000d40 <__udivmoddi4+0xb4>
 8000d3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d40:	2100      	movs	r1, #0
 8000d42:	4608      	mov	r0, r1
 8000d44:	e7f5      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000d46:	fab3 f183 	clz	r1, r3
 8000d4a:	2900      	cmp	r1, #0
 8000d4c:	d146      	bne.n	8000ddc <__udivmoddi4+0x150>
 8000d4e:	42a3      	cmp	r3, r4
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xcc>
 8000d52:	4290      	cmp	r0, r2
 8000d54:	f0c0 80f0 	bcc.w	8000f38 <__udivmoddi4+0x2ac>
 8000d58:	1a86      	subs	r6, r0, r2
 8000d5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	2d00      	cmp	r5, #0
 8000d62:	d0e6      	beq.n	8000d32 <__udivmoddi4+0xa6>
 8000d64:	e9c5 6300 	strd	r6, r3, [r5]
 8000d68:	e7e3      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	f040 8090 	bne.w	8000e90 <__udivmoddi4+0x204>
 8000d70:	eba1 040c 	sub.w	r4, r1, ip
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	fa1f f78c 	uxth.w	r7, ip
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d86:	fb08 4416 	mls	r4, r8, r6, r4
 8000d8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8e:	fb07 f006 	mul.w	r0, r7, r6
 8000d92:	4298      	cmp	r0, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x11c>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x11a>
 8000da0:	4298      	cmp	r0, r3
 8000da2:	f200 80cd 	bhi.w	8000f40 <__udivmoddi4+0x2b4>
 8000da6:	4626      	mov	r6, r4
 8000da8:	1a1c      	subs	r4, r3, r0
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000db2:	fb08 4410 	mls	r4, r8, r0, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb00 f707 	mul.w	r7, r0, r7
 8000dbe:	429f      	cmp	r7, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x148>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x146>
 8000dcc:	429f      	cmp	r7, r3
 8000dce:	f200 80b0 	bhi.w	8000f32 <__udivmoddi4+0x2a6>
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	1bdb      	subs	r3, r3, r7
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0x9c>
 8000ddc:	f1c1 0620 	rsb	r6, r1, #32
 8000de0:	408b      	lsls	r3, r1
 8000de2:	fa22 f706 	lsr.w	r7, r2, r6
 8000de6:	431f      	orrs	r7, r3
 8000de8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dec:	fa04 f301 	lsl.w	r3, r4, r1
 8000df0:	ea43 030c 	orr.w	r3, r3, ip
 8000df4:	40f4      	lsrs	r4, r6
 8000df6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dfa:	0c38      	lsrs	r0, r7, #16
 8000dfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e00:	fbb4 fef0 	udiv	lr, r4, r0
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	fb00 441e 	mls	r4, r0, lr, r4
 8000e0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e10:	fb0e f90c 	mul.w	r9, lr, ip
 8000e14:	45a1      	cmp	r9, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	d90a      	bls.n	8000e32 <__udivmoddi4+0x1a6>
 8000e1c:	193c      	adds	r4, r7, r4
 8000e1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e22:	f080 8084 	bcs.w	8000f2e <__udivmoddi4+0x2a2>
 8000e26:	45a1      	cmp	r9, r4
 8000e28:	f240 8081 	bls.w	8000f2e <__udivmoddi4+0x2a2>
 8000e2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e30:	443c      	add	r4, r7
 8000e32:	eba4 0409 	sub.w	r4, r4, r9
 8000e36:	fa1f f983 	uxth.w	r9, r3
 8000e3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e4a:	45a4      	cmp	ip, r4
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x1d2>
 8000e4e:	193c      	adds	r4, r7, r4
 8000e50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e54:	d267      	bcs.n	8000f26 <__udivmoddi4+0x29a>
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d965      	bls.n	8000f26 <__udivmoddi4+0x29a>
 8000e5a:	3b02      	subs	r3, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e62:	fba0 9302 	umull	r9, r3, r0, r2
 8000e66:	eba4 040c 	sub.w	r4, r4, ip
 8000e6a:	429c      	cmp	r4, r3
 8000e6c:	46ce      	mov	lr, r9
 8000e6e:	469c      	mov	ip, r3
 8000e70:	d351      	bcc.n	8000f16 <__udivmoddi4+0x28a>
 8000e72:	d04e      	beq.n	8000f12 <__udivmoddi4+0x286>
 8000e74:	b155      	cbz	r5, 8000e8c <__udivmoddi4+0x200>
 8000e76:	ebb8 030e 	subs.w	r3, r8, lr
 8000e7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e82:	40cb      	lsrs	r3, r1
 8000e84:	431e      	orrs	r6, r3
 8000e86:	40cc      	lsrs	r4, r1
 8000e88:	e9c5 6400 	strd	r6, r4, [r5]
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	e750      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000e90:	f1c2 0320 	rsb	r3, r2, #32
 8000e94:	fa20 f103 	lsr.w	r1, r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ea0:	4094      	lsls	r4, r2
 8000ea2:	430c      	orrs	r4, r1
 8000ea4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eac:	fa1f f78c 	uxth.w	r7, ip
 8000eb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb8:	0c23      	lsrs	r3, r4, #16
 8000eba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ebe:	fb00 f107 	mul.w	r1, r0, r7
 8000ec2:	4299      	cmp	r1, r3
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x24c>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ece:	d22c      	bcs.n	8000f2a <__udivmoddi4+0x29e>
 8000ed0:	4299      	cmp	r1, r3
 8000ed2:	d92a      	bls.n	8000f2a <__udivmoddi4+0x29e>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1a5b      	subs	r3, r3, r1
 8000eda:	b2a4      	uxth	r4, r4
 8000edc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ee0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee8:	fb01 f307 	mul.w	r3, r1, r7
 8000eec:	42a3      	cmp	r3, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x276>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef8:	d213      	bcs.n	8000f22 <__udivmoddi4+0x296>
 8000efa:	42a3      	cmp	r3, r4
 8000efc:	d911      	bls.n	8000f22 <__udivmoddi4+0x296>
 8000efe:	3902      	subs	r1, #2
 8000f00:	4464      	add	r4, ip
 8000f02:	1ae4      	subs	r4, r4, r3
 8000f04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f08:	e739      	b.n	8000d7e <__udivmoddi4+0xf2>
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	e6f0      	b.n	8000cf0 <__udivmoddi4+0x64>
 8000f0e:	4608      	mov	r0, r1
 8000f10:	e706      	b.n	8000d20 <__udivmoddi4+0x94>
 8000f12:	45c8      	cmp	r8, r9
 8000f14:	d2ae      	bcs.n	8000e74 <__udivmoddi4+0x1e8>
 8000f16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1e:	3801      	subs	r0, #1
 8000f20:	e7a8      	b.n	8000e74 <__udivmoddi4+0x1e8>
 8000f22:	4631      	mov	r1, r6
 8000f24:	e7ed      	b.n	8000f02 <__udivmoddi4+0x276>
 8000f26:	4603      	mov	r3, r0
 8000f28:	e799      	b.n	8000e5e <__udivmoddi4+0x1d2>
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	e7d4      	b.n	8000ed8 <__udivmoddi4+0x24c>
 8000f2e:	46d6      	mov	lr, sl
 8000f30:	e77f      	b.n	8000e32 <__udivmoddi4+0x1a6>
 8000f32:	4463      	add	r3, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e74d      	b.n	8000dd4 <__udivmoddi4+0x148>
 8000f38:	4606      	mov	r6, r0
 8000f3a:	4623      	mov	r3, r4
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e70f      	b.n	8000d60 <__udivmoddi4+0xd4>
 8000f40:	3e02      	subs	r6, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	e730      	b.n	8000da8 <__udivmoddi4+0x11c>
 8000f46:	bf00      	nop

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int chr){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000f54:	1d39      	adds	r1, r7, #4
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4803      	ldr	r0, [pc, #12]	@ (8000f6c <__io_putchar+0x20>)
 8000f5e:	f003 ffc1 	bl	8004ee4 <HAL_UART_Transmit>
	return chr;
 8000f62:	687b      	ldr	r3, [r7, #4]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200000d0 	.word	0x200000d0

08000f70 <print_buffer>:

void print_buffer(const char * Name, uint8_t *pData, uint16_t Size, int N_lines){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	80fb      	strh	r3, [r7, #6]
	printf("%s\r\n", Name);
 8000f80:	68f9      	ldr	r1, [r7, #12]
 8000f82:	4819      	ldr	r0, [pc, #100]	@ (8000fe8 <print_buffer+0x78>)
 8000f84:	f005 fa08 	bl	8006398 <iprintf>
	if(N_lines >= (int) Size){
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	db13      	blt.n	8000fb8 <print_buffer+0x48>
		for(int i = 0; i<Size; i++){
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	e00b      	b.n	8000fae <print_buffer+0x3e>
			printf("%d : %d\r\n", i, pData[i]);
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	68ba      	ldr	r2, [r7, #8]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	6979      	ldr	r1, [r7, #20]
 8000fa2:	4812      	ldr	r0, [pc, #72]	@ (8000fec <print_buffer+0x7c>)
 8000fa4:	f005 f9f8 	bl	8006398 <iprintf>
		for(int i = 0; i<Size; i++){
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3301      	adds	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	dbef      	blt.n	8000f96 <print_buffer+0x26>
	else{
		for(int i = 0; i<N_lines; i++){
			printf("%d : %d\r\n", i, pData[i]);
		}
	}
}
 8000fb6:	e012      	b.n	8000fde <print_buffer+0x6e>
		for(int i = 0; i<N_lines; i++){
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	e00b      	b.n	8000fd6 <print_buffer+0x66>
			printf("%d : %d\r\n", i, pData[i]);
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	6939      	ldr	r1, [r7, #16]
 8000fca:	4808      	ldr	r0, [pc, #32]	@ (8000fec <print_buffer+0x7c>)
 8000fcc:	f005 f9e4 	bl	8006398 <iprintf>
		for(int i = 0; i<N_lines; i++){
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	dbef      	blt.n	8000fbe <print_buffer+0x4e>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	080078f0 	.word	0x080078f0
 8000fec:	080078f8 	.word	0x080078f8

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff4:	f001 fa2f 	bl	8002456 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff8:	f000 f860 	bl	80010bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffc:	f000 f9e2 	bl	80013c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001000:	f000 f9b6 	bl	8001370 <MX_DMA_Init>
  MX_TIM4_Init();
 8001004:	f000 f8a4 	bl	8001150 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001008:	f000 f966 	bl	80012d8 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800100c:	f000 f918 	bl	8001240 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  LIDAR_Init(&hlidar);
 8001010:	4821      	ldr	r0, [pc, #132]	@ (8001098 <main+0xa8>)
 8001012:	f000 fcb9 	bl	8001988 <LIDAR_Init>
    HAL_Delay(500);
 8001016:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800101a:	f001 fa8d 	bl	8002538 <HAL_Delay>
    LIDAR_Stop(&hlidar);
 800101e:	481e      	ldr	r0, [pc, #120]	@ (8001098 <main+0xa8>)
 8001020:	f000 fce7 	bl	80019f2 <LIDAR_Stop>
    HAL_Delay(500);
 8001024:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001028:	f001 fa86 	bl	8002538 <HAL_Delay>
    LIDAR_Get_Health_Status(&hlidar);
 800102c:	481a      	ldr	r0, [pc, #104]	@ (8001098 <main+0xa8>)
 800102e:	f000 fdb3 	bl	8001b98 <LIDAR_Get_Health_Status>
    print_buffer("Health", hlidar.health_buff, HEALTH_BUFF_SIZE_LIDAR, HEALTH_BUFF_SIZE_LIDAR);
 8001032:	230a      	movs	r3, #10
 8001034:	220a      	movs	r2, #10
 8001036:	4919      	ldr	r1, [pc, #100]	@ (800109c <main+0xac>)
 8001038:	4819      	ldr	r0, [pc, #100]	@ (80010a0 <main+0xb0>)
 800103a:	f7ff ff99 	bl	8000f70 <print_buffer>
    HAL_Delay(500);
 800103e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001042:	f001 fa79 	bl	8002538 <HAL_Delay>
    LIDAR_Get_Info(&hlidar);
 8001046:	4814      	ldr	r0, [pc, #80]	@ (8001098 <main+0xa8>)
 8001048:	f000 fcf0 	bl	8001a2c <LIDAR_Get_Info>
    print_buffer("Info", hlidar.info_buff, INFO_BUFF_SIZE_LIDAR, INFO_BUFF_SIZE_LIDAR);
 800104c:	231b      	movs	r3, #27
 800104e:	221b      	movs	r2, #27
 8001050:	4914      	ldr	r1, [pc, #80]	@ (80010a4 <main+0xb4>)
 8001052:	4815      	ldr	r0, [pc, #84]	@ (80010a8 <main+0xb8>)
 8001054:	f7ff ff8c 	bl	8000f70 <print_buffer>
    LIDAR_Start(&hlidar);
 8001058:	480f      	ldr	r0, [pc, #60]	@ (8001098 <main+0xa8>)
 800105a:	f000 fca5 	bl	80019a8 <LIDAR_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LIDAR_get_point(&hlidar);
 800105e:	480e      	ldr	r0, [pc, #56]	@ (8001098 <main+0xa8>)
 8001060:	f000 ff26 	bl	8001eb0 <LIDAR_get_point>
	  LIDAR_process_frame(&hlidar);
 8001064:	480c      	ldr	r0, [pc, #48]	@ (8001098 <main+0xa8>)
 8001066:	f000 fdfb 	bl	8001c60 <LIDAR_process_frame>
	  print_buffer("POINT", hlidar.process_frame.point_buff, POINT_BUFF_SIZE_LIDAR, 50);
 800106a:	2332      	movs	r3, #50	@ 0x32
 800106c:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001070:	490e      	ldr	r1, [pc, #56]	@ (80010ac <main+0xbc>)
 8001072:	480f      	ldr	r0, [pc, #60]	@ (80010b0 <main+0xc0>)
 8001074:	f7ff ff7c 	bl	8000f70 <print_buffer>
	  LIDAR_median_filter(&hlidar);
 8001078:	4807      	ldr	r0, [pc, #28]	@ (8001098 <main+0xa8>)
 800107a:	f001 f8a3 	bl	80021c4 <LIDAR_median_filter>
	  print_buffer("FILTERED", hlidar.process_frame.filtered_buff, POINT_BUFF_SIZE_LIDAR, 50);
 800107e:	2332      	movs	r3, #50	@ 0x32
 8001080:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001084:	490b      	ldr	r1, [pc, #44]	@ (80010b4 <main+0xc4>)
 8001086:	480c      	ldr	r0, [pc, #48]	@ (80010b8 <main+0xc8>)
 8001088:	f7ff ff72 	bl	8000f70 <print_buffer>
	  HAL_Delay(1);
 800108c:	2001      	movs	r0, #1
 800108e:	f001 fa53 	bl	8002538 <HAL_Delay>
  {
 8001092:	bf00      	nop
 8001094:	e7e3      	b.n	800105e <main+0x6e>
 8001096:	bf00      	nop
 8001098:	20000258 	.word	0x20000258
 800109c:	20000277 	.word	0x20000277
 80010a0:	08007904 	.word	0x08007904
 80010a4:	2000025c 	.word	0x2000025c
 80010a8:	0800790c 	.word	0x0800790c
 80010ac:	20000ac4 	.word	0x20000ac4
 80010b0:	08007914 	.word	0x08007914
 80010b4:	20001064 	.word	0x20001064
 80010b8:	0800791c 	.word	0x0800791c

080010bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b094      	sub	sp, #80	@ 0x50
 80010c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c2:	f107 0318 	add.w	r3, r7, #24
 80010c6:	2238      	movs	r2, #56	@ 0x38
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f005 fae0 	bl	8006690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010de:	2000      	movs	r0, #0
 80010e0:	f001 ff68 	bl	8002fb4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e4:	2301      	movs	r3, #1
 80010e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010ec:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ee:	2302      	movs	r3, #2
 80010f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f2:	2303      	movs	r3, #3
 80010f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80010f6:	2306      	movs	r3, #6
 80010f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80010fa:	2355      	movs	r3, #85	@ 0x55
 80010fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010fe:	2302      	movs	r3, #2
 8001100:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001102:	2302      	movs	r3, #2
 8001104:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001106:	2302      	movs	r3, #2
 8001108:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	4618      	mov	r0, r3
 8001110:	f002 f804 	bl	800311c <HAL_RCC_OscConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800111a:	f000 f9e1 	bl	80014e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111e:	230f      	movs	r3, #15
 8001120:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001122:	2303      	movs	r3, #3
 8001124:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2104      	movs	r1, #4
 8001136:	4618      	mov	r0, r3
 8001138:	f002 fb02 	bl	8003740 <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001142:	f000 f9cd 	bl	80014e0 <Error_Handler>
  }
}
 8001146:	bf00      	nop
 8001148:	3750      	adds	r7, #80	@ 0x50
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08e      	sub	sp, #56	@ 0x38
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001170:	463b      	mov	r3, r7
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]
 800117e:	615a      	str	r2, [r3, #20]
 8001180:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001182:	4b2d      	ldr	r3, [pc, #180]	@ (8001238 <MX_TIM4_Init+0xe8>)
 8001184:	4a2d      	ldr	r2, [pc, #180]	@ (800123c <MX_TIM4_Init+0xec>)
 8001186:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001188:	4b2b      	ldr	r3, [pc, #172]	@ (8001238 <MX_TIM4_Init+0xe8>)
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	4b2a      	ldr	r3, [pc, #168]	@ (8001238 <MX_TIM4_Init+0xe8>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001194:	4b28      	ldr	r3, [pc, #160]	@ (8001238 <MX_TIM4_Init+0xe8>)
 8001196:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800119a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b26      	ldr	r3, [pc, #152]	@ (8001238 <MX_TIM4_Init+0xe8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a2:	4b25      	ldr	r3, [pc, #148]	@ (8001238 <MX_TIM4_Init+0xe8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011a8:	4823      	ldr	r0, [pc, #140]	@ (8001238 <MX_TIM4_Init+0xe8>)
 80011aa:	f002 fed5 	bl	8003f58 <HAL_TIM_Base_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80011b4:	f000 f994 	bl	80014e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011c2:	4619      	mov	r1, r3
 80011c4:	481c      	ldr	r0, [pc, #112]	@ (8001238 <MX_TIM4_Init+0xe8>)
 80011c6:	f003 f893 	bl	80042f0 <HAL_TIM_ConfigClockSource>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80011d0:	f000 f986 	bl	80014e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011d4:	4818      	ldr	r0, [pc, #96]	@ (8001238 <MX_TIM4_Init+0xe8>)
 80011d6:	f002 ff16 	bl	8004006 <HAL_TIM_PWM_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80011e0:	f000 f97e 	bl	80014e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	4811      	ldr	r0, [pc, #68]	@ (8001238 <MX_TIM4_Init+0xe8>)
 80011f4:	f003 fda4 	bl	8004d40 <HAL_TIMEx_MasterConfigSynchronization>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80011fe:	f000 f96f 	bl	80014e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001202:	2360      	movs	r3, #96	@ 0x60
 8001204:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001212:	463b      	mov	r3, r7
 8001214:	220c      	movs	r2, #12
 8001216:	4619      	mov	r1, r3
 8001218:	4807      	ldr	r0, [pc, #28]	@ (8001238 <MX_TIM4_Init+0xe8>)
 800121a:	f002 ff55 	bl	80040c8 <HAL_TIM_PWM_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001224:	f000 f95c 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001228:	4803      	ldr	r0, [pc, #12]	@ (8001238 <MX_TIM4_Init+0xe8>)
 800122a:	f000 f9a3 	bl	8001574 <HAL_TIM_MspPostInit>

}
 800122e:	bf00      	nop
 8001230:	3738      	adds	r7, #56	@ 0x38
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000084 	.word	0x20000084
 800123c:	40000800 	.word	0x40000800

08001240 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001244:	4b22      	ldr	r3, [pc, #136]	@ (80012d0 <MX_USART2_UART_Init+0x90>)
 8001246:	4a23      	ldr	r2, [pc, #140]	@ (80012d4 <MX_USART2_UART_Init+0x94>)
 8001248:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800124a:	4b21      	ldr	r3, [pc, #132]	@ (80012d0 <MX_USART2_UART_Init+0x90>)
 800124c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001250:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001252:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <MX_USART2_UART_Init+0x90>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001258:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <MX_USART2_UART_Init+0x90>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800125e:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <MX_USART2_UART_Init+0x90>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001264:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_USART2_UART_Init+0x90>)
 8001266:	220c      	movs	r2, #12
 8001268:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126a:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <MX_USART2_UART_Init+0x90>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001270:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <MX_USART2_UART_Init+0x90>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001276:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <MX_USART2_UART_Init+0x90>)
 8001278:	2200      	movs	r2, #0
 800127a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800127c:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <MX_USART2_UART_Init+0x90>)
 800127e:	2200      	movs	r2, #0
 8001280:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001282:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <MX_USART2_UART_Init+0x90>)
 8001284:	2200      	movs	r2, #0
 8001286:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001288:	4811      	ldr	r0, [pc, #68]	@ (80012d0 <MX_USART2_UART_Init+0x90>)
 800128a:	f003 fddb 	bl	8004e44 <HAL_UART_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001294:	f000 f924 	bl	80014e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001298:	2100      	movs	r1, #0
 800129a:	480d      	ldr	r0, [pc, #52]	@ (80012d0 <MX_USART2_UART_Init+0x90>)
 800129c:	f004 feef 	bl	800607e <HAL_UARTEx_SetTxFifoThreshold>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80012a6:	f000 f91b 	bl	80014e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012aa:	2100      	movs	r1, #0
 80012ac:	4808      	ldr	r0, [pc, #32]	@ (80012d0 <MX_USART2_UART_Init+0x90>)
 80012ae:	f004 ff24 	bl	80060fa <HAL_UARTEx_SetRxFifoThreshold>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80012b8:	f000 f912 	bl	80014e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012bc:	4804      	ldr	r0, [pc, #16]	@ (80012d0 <MX_USART2_UART_Init+0x90>)
 80012be:	f004 fea5 	bl	800600c <HAL_UARTEx_DisableFifoMode>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80012c8:	f000 f90a 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200000d0 	.word	0x200000d0
 80012d4:	40004400 	.word	0x40004400

080012d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012dc:	4b22      	ldr	r3, [pc, #136]	@ (8001368 <MX_USART3_UART_Init+0x90>)
 80012de:	4a23      	ldr	r2, [pc, #140]	@ (800136c <MX_USART3_UART_Init+0x94>)
 80012e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 128000;
 80012e2:	4b21      	ldr	r3, [pc, #132]	@ (8001368 <MX_USART3_UART_Init+0x90>)
 80012e4:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 80012e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001368 <MX_USART3_UART_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001368 <MX_USART3_UART_Init+0x90>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <MX_USART3_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001368 <MX_USART3_UART_Init+0x90>)
 80012fe:	220c      	movs	r2, #12
 8001300:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001302:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <MX_USART3_UART_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001308:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <MX_USART3_UART_Init+0x90>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130e:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <MX_USART3_UART_Init+0x90>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001314:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <MX_USART3_UART_Init+0x90>)
 8001316:	2200      	movs	r2, #0
 8001318:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800131a:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <MX_USART3_UART_Init+0x90>)
 800131c:	2200      	movs	r2, #0
 800131e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001320:	4811      	ldr	r0, [pc, #68]	@ (8001368 <MX_USART3_UART_Init+0x90>)
 8001322:	f003 fd8f 	bl	8004e44 <HAL_UART_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800132c:	f000 f8d8 	bl	80014e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001330:	2100      	movs	r1, #0
 8001332:	480d      	ldr	r0, [pc, #52]	@ (8001368 <MX_USART3_UART_Init+0x90>)
 8001334:	f004 fea3 	bl	800607e <HAL_UARTEx_SetTxFifoThreshold>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800133e:	f000 f8cf 	bl	80014e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001342:	2100      	movs	r1, #0
 8001344:	4808      	ldr	r0, [pc, #32]	@ (8001368 <MX_USART3_UART_Init+0x90>)
 8001346:	f004 fed8 	bl	80060fa <HAL_UARTEx_SetRxFifoThreshold>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001350:	f000 f8c6 	bl	80014e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001354:	4804      	ldr	r0, [pc, #16]	@ (8001368 <MX_USART3_UART_Init+0x90>)
 8001356:	f004 fe59 	bl	800600c <HAL_UARTEx_DisableFifoMode>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001360:	f000 f8be 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000164 	.word	0x20000164
 800136c:	40004800 	.word	0x40004800

08001370 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001376:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <MX_DMA_Init+0x50>)
 8001378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800137a:	4a11      	ldr	r2, [pc, #68]	@ (80013c0 <MX_DMA_Init+0x50>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	6493      	str	r3, [r2, #72]	@ 0x48
 8001382:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <MX_DMA_Init+0x50>)
 8001384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800138e:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <MX_DMA_Init+0x50>)
 8001390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001392:	4a0b      	ldr	r2, [pc, #44]	@ (80013c0 <MX_DMA_Init+0x50>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6493      	str	r3, [r2, #72]	@ 0x48
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <MX_DMA_Init+0x50>)
 800139c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	200b      	movs	r0, #11
 80013ac:	f001 f9c1 	bl	8002732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013b0:	200b      	movs	r0, #11
 80013b2:	f001 f9d8 	bl	8002766 <HAL_NVIC_EnableIRQ>

}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000

080013c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	@ 0x28
 80013c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	4b3e      	ldr	r3, [pc, #248]	@ (80014d4 <MX_GPIO_Init+0x110>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	4a3d      	ldr	r2, [pc, #244]	@ (80014d4 <MX_GPIO_Init+0x110>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e6:	4b3b      	ldr	r3, [pc, #236]	@ (80014d4 <MX_GPIO_Init+0x110>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013f2:	4b38      	ldr	r3, [pc, #224]	@ (80014d4 <MX_GPIO_Init+0x110>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	4a37      	ldr	r2, [pc, #220]	@ (80014d4 <MX_GPIO_Init+0x110>)
 80013f8:	f043 0320 	orr.w	r3, r3, #32
 80013fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fe:	4b35      	ldr	r3, [pc, #212]	@ (80014d4 <MX_GPIO_Init+0x110>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	f003 0320 	and.w	r3, r3, #32
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b32      	ldr	r3, [pc, #200]	@ (80014d4 <MX_GPIO_Init+0x110>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	4a31      	ldr	r2, [pc, #196]	@ (80014d4 <MX_GPIO_Init+0x110>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001416:	4b2f      	ldr	r3, [pc, #188]	@ (80014d4 <MX_GPIO_Init+0x110>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	4b2c      	ldr	r3, [pc, #176]	@ (80014d4 <MX_GPIO_Init+0x110>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	4a2b      	ldr	r2, [pc, #172]	@ (80014d4 <MX_GPIO_Init+0x110>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142e:	4b29      	ldr	r3, [pc, #164]	@ (80014d4 <MX_GPIO_Init+0x110>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f248 0120 	movw	r1, #32800	@ 0x8020
 8001440:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001444:	f001 fd9e 	bl	8002f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_SET);
 8001448:	2201      	movs	r2, #1
 800144a:	2104      	movs	r1, #4
 800144c:	4822      	ldr	r0, [pc, #136]	@ (80014d8 <MX_GPIO_Init+0x114>)
 800144e:	f001 fd99 	bl	8002f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001452:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001458:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800145c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	481c      	ldr	r0, [pc, #112]	@ (80014dc <MX_GPIO_Init+0x118>)
 800146a:	f001 fc09 	bl	8002c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_RX_Pin;
 800146e:	2308      	movs	r3, #8
 8001470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800147e:	230c      	movs	r3, #12
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(LPUART1_RX_GPIO_Port, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800148c:	f001 fbf8 	bl	8002c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DEV_EN_LIDAR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DEV_EN_LIDAR_Pin;
 8001490:	f248 0320 	movw	r3, #32800	@ 0x8020
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ac:	f001 fbe8 	bl	8002c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : M_EN_LIDAR_Pin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin;
 80014b0:	2304      	movs	r3, #4
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M_EN_LIDAR_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	4804      	ldr	r0, [pc, #16]	@ (80014d8 <MX_GPIO_Init+0x114>)
 80014c8:	f001 fbda 	bl	8002c80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	@ 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40021000 	.word	0x40021000
 80014d8:	48000400 	.word	0x48000400
 80014dc:	48000800 	.word	0x48000800

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <Error_Handler+0x8>

080014ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <HAL_MspInit+0x44>)
 80014f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001530 <HAL_MspInit+0x44>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80014fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <HAL_MspInit+0x44>)
 8001500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <HAL_MspInit+0x44>)
 800150c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150e:	4a08      	ldr	r2, [pc, #32]	@ (8001530 <HAL_MspInit+0x44>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001514:	6593      	str	r3, [r2, #88]	@ 0x58
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_MspInit+0x44>)
 8001518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001522:	f001 fdeb 	bl	80030fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000

08001534 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <HAL_TIM_Base_MspInit+0x38>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d10b      	bne.n	800155e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001546:	4b0a      	ldr	r3, [pc, #40]	@ (8001570 <HAL_TIM_Base_MspInit+0x3c>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154a:	4a09      	ldr	r2, [pc, #36]	@ (8001570 <HAL_TIM_Base_MspInit+0x3c>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6593      	str	r3, [r2, #88]	@ 0x58
 8001552:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <HAL_TIM_Base_MspInit+0x3c>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40000800 	.word	0x40000800
 8001570:	40021000 	.word	0x40021000

08001574 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a11      	ldr	r2, [pc, #68]	@ (80015d8 <HAL_TIM_MspPostInit+0x64>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d11c      	bne.n	80015d0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <HAL_TIM_MspPostInit+0x68>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	4a10      	ldr	r2, [pc, #64]	@ (80015dc <HAL_TIM_MspPostInit+0x68>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a2:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <HAL_TIM_MspPostInit+0x68>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = TIM4_CH4_M_SCTR_LIDAR_Pin;
 80015ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015c0:	2302      	movs	r3, #2
 80015c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH4_M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	4619      	mov	r1, r3
 80015ca:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <HAL_TIM_MspPostInit+0x6c>)
 80015cc:	f001 fb58 	bl	8002c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015d0:	bf00      	nop
 80015d2:	3720      	adds	r7, #32
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40000800 	.word	0x40000800
 80015dc:	40021000 	.word	0x40021000
 80015e0:	48000400 	.word	0x48000400

080015e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b09e      	sub	sp, #120	@ 0x78
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015fc:	f107 0320 	add.w	r3, r7, #32
 8001600:	2244      	movs	r2, #68	@ 0x44
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f005 f843 	bl	8006690 <memset>
  if(huart->Instance==USART2)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a60      	ldr	r2, [pc, #384]	@ (8001790 <HAL_UART_MspInit+0x1ac>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d153      	bne.n	80016bc <HAL_UART_MspInit+0xd8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001614:	2302      	movs	r3, #2
 8001616:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001618:	2300      	movs	r3, #0
 800161a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800161c:	f107 0320 	add.w	r3, r7, #32
 8001620:	4618      	mov	r0, r3
 8001622:	f002 faa9 	bl	8003b78 <HAL_RCCEx_PeriphCLKConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800162c:	f7ff ff58 	bl	80014e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001630:	4b58      	ldr	r3, [pc, #352]	@ (8001794 <HAL_UART_MspInit+0x1b0>)
 8001632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001634:	4a57      	ldr	r2, [pc, #348]	@ (8001794 <HAL_UART_MspInit+0x1b0>)
 8001636:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800163a:	6593      	str	r3, [r2, #88]	@ 0x58
 800163c:	4b55      	ldr	r3, [pc, #340]	@ (8001794 <HAL_UART_MspInit+0x1b0>)
 800163e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b52      	ldr	r3, [pc, #328]	@ (8001794 <HAL_UART_MspInit+0x1b0>)
 800164a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164c:	4a51      	ldr	r2, [pc, #324]	@ (8001794 <HAL_UART_MspInit+0x1b0>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001654:	4b4f      	ldr	r3, [pc, #316]	@ (8001794 <HAL_UART_MspInit+0x1b0>)
 8001656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001660:	4b4c      	ldr	r3, [pc, #304]	@ (8001794 <HAL_UART_MspInit+0x1b0>)
 8001662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001664:	4a4b      	ldr	r2, [pc, #300]	@ (8001794 <HAL_UART_MspInit+0x1b0>)
 8001666:	f043 0302 	orr.w	r3, r3, #2
 800166a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800166c:	4b49      	ldr	r3, [pc, #292]	@ (8001794 <HAL_UART_MspInit+0x1b0>)
 800166e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001678:	2304      	movs	r3, #4
 800167a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001688:	2307      	movs	r3, #7
 800168a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001690:	4619      	mov	r1, r3
 8001692:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001696:	f001 faf3 	bl	8002c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800169a:	2310      	movs	r3, #16
 800169c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016aa:	2307      	movs	r3, #7
 80016ac:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016b2:	4619      	mov	r1, r3
 80016b4:	4838      	ldr	r0, [pc, #224]	@ (8001798 <HAL_UART_MspInit+0x1b4>)
 80016b6:	f001 fae3 	bl	8002c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016ba:	e064      	b.n	8001786 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a36      	ldr	r2, [pc, #216]	@ (800179c <HAL_UART_MspInit+0x1b8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d15f      	bne.n	8001786 <HAL_UART_MspInit+0x1a2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016c6:	2304      	movs	r3, #4
 80016c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ce:	f107 0320 	add.w	r3, r7, #32
 80016d2:	4618      	mov	r0, r3
 80016d4:	f002 fa50 	bl	8003b78 <HAL_RCCEx_PeriphCLKConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 80016de:	f7ff feff 	bl	80014e0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001794 <HAL_UART_MspInit+0x1b0>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001794 <HAL_UART_MspInit+0x1b0>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ee:	4b29      	ldr	r3, [pc, #164]	@ (8001794 <HAL_UART_MspInit+0x1b0>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	4b26      	ldr	r3, [pc, #152]	@ (8001794 <HAL_UART_MspInit+0x1b0>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fe:	4a25      	ldr	r2, [pc, #148]	@ (8001794 <HAL_UART_MspInit+0x1b0>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001706:	4b23      	ldr	r3, [pc, #140]	@ (8001794 <HAL_UART_MspInit+0x1b0>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_TX_LIDAR_Pin|USART3_RX_LIDAR_Pin;
 8001712:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001716:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001724:	2307      	movs	r3, #7
 8001726:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001728:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800172c:	4619      	mov	r1, r3
 800172e:	481a      	ldr	r0, [pc, #104]	@ (8001798 <HAL_UART_MspInit+0x1b4>)
 8001730:	f001 faa6 	bl	8002c80 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel1;
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <HAL_UART_MspInit+0x1bc>)
 8001736:	4a1b      	ldr	r2, [pc, #108]	@ (80017a4 <HAL_UART_MspInit+0x1c0>)
 8001738:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800173a:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <HAL_UART_MspInit+0x1bc>)
 800173c:	221d      	movs	r2, #29
 800173e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001740:	4b17      	ldr	r3, [pc, #92]	@ (80017a0 <HAL_UART_MspInit+0x1bc>)
 8001742:	2210      	movs	r2, #16
 8001744:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001746:	4b16      	ldr	r3, [pc, #88]	@ (80017a0 <HAL_UART_MspInit+0x1bc>)
 8001748:	2200      	movs	r2, #0
 800174a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800174c:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <HAL_UART_MspInit+0x1bc>)
 800174e:	2280      	movs	r2, #128	@ 0x80
 8001750:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001752:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <HAL_UART_MspInit+0x1bc>)
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001758:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <HAL_UART_MspInit+0x1bc>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 800175e:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <HAL_UART_MspInit+0x1bc>)
 8001760:	2220      	movs	r2, #32
 8001762:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001764:	4b0e      	ldr	r3, [pc, #56]	@ (80017a0 <HAL_UART_MspInit+0x1bc>)
 8001766:	2200      	movs	r2, #0
 8001768:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800176a:	480d      	ldr	r0, [pc, #52]	@ (80017a0 <HAL_UART_MspInit+0x1bc>)
 800176c:	f001 f816 	bl	800279c <HAL_DMA_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_UART_MspInit+0x196>
      Error_Handler();
 8001776:	f7ff feb3 	bl	80014e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a08      	ldr	r2, [pc, #32]	@ (80017a0 <HAL_UART_MspInit+0x1bc>)
 800177e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001780:	4a07      	ldr	r2, [pc, #28]	@ (80017a0 <HAL_UART_MspInit+0x1bc>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001786:	bf00      	nop
 8001788:	3778      	adds	r7, #120	@ 0x78
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40004400 	.word	0x40004400
 8001794:	40021000 	.word	0x40021000
 8001798:	48000400 	.word	0x48000400
 800179c:	40004800 	.word	0x40004800
 80017a0:	200001f8 	.word	0x200001f8
 80017a4:	40020008 	.word	0x40020008

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <NMI_Handler+0x4>

080017b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <HardFault_Handler+0x4>

080017b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <MemManage_Handler+0x4>

080017c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <UsageFault_Handler+0x4>

080017d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017fe:	f000 fe7d 	bl	80024fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <DMA1_Channel1_IRQHandler+0x10>)
 800180e:	f001 f8e8 	bl	80029e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200001f8 	.word	0x200001f8

0800181c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e00a      	b.n	8001844 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800182e:	f3af 8000 	nop.w
 8001832:	4601      	mov	r1, r0
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	60ba      	str	r2, [r7, #8]
 800183a:	b2ca      	uxtb	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	3301      	adds	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	429a      	cmp	r2, r3
 800184a:	dbf0      	blt.n	800182e <_read+0x12>
  }

  return len;
 800184c:	687b      	ldr	r3, [r7, #4]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	e009      	b.n	800187c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	60ba      	str	r2, [r7, #8]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fb6b 	bl	8000f4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3301      	adds	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	429a      	cmp	r2, r3
 8001882:	dbf1      	blt.n	8001868 <_write+0x12>
  }
  return len;
 8001884:	687b      	ldr	r3, [r7, #4]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_close>:

int _close(int file)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018b6:	605a      	str	r2, [r3, #4]
  return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_isatty>:

int _isatty(int file)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001900:	4a14      	ldr	r2, [pc, #80]	@ (8001954 <_sbrk+0x5c>)
 8001902:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <_sbrk+0x60>)
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800190c:	4b13      	ldr	r3, [pc, #76]	@ (800195c <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001914:	4b11      	ldr	r3, [pc, #68]	@ (800195c <_sbrk+0x64>)
 8001916:	4a12      	ldr	r2, [pc, #72]	@ (8001960 <_sbrk+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191a:	4b10      	ldr	r3, [pc, #64]	@ (800195c <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	429a      	cmp	r2, r3
 8001926:	d207      	bcs.n	8001938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001928:	f004 ff00 	bl	800672c <__errno>
 800192c:	4603      	mov	r3, r0
 800192e:	220c      	movs	r2, #12
 8001930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	e009      	b.n	800194c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001938:	4b08      	ldr	r3, [pc, #32]	@ (800195c <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193e:	4b07      	ldr	r3, [pc, #28]	@ (800195c <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	4a05      	ldr	r2, [pc, #20]	@ (800195c <_sbrk+0x64>)
 8001948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20008000 	.word	0x20008000
 8001958:	00000400 	.word	0x00000400
 800195c:	20001ab8 	.word	0x20001ab8
 8001960:	20001c10 	.word	0x20001c10

08001964 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001968:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <SystemInit+0x20>)
 800196a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800196e:	4a05      	ldr	r2, [pc, #20]	@ (8001984 <SystemInit+0x20>)
 8001970:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001974:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <LIDAR_Init>:
uint16_t frame_start = 0, frame_end = 0;
/*
 * @brief Initialization of the lidar
 * @param
 */
void LIDAR_Init(LIDAR_HandleTypeDef_t * hlidar){
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	hlidar->huart = &huart3;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a04      	ldr	r2, [pc, #16]	@ (80019a4 <LIDAR_Init+0x1c>)
 8001994:	601a      	str	r2, [r3, #0]
	/*
	HAL_GPIO_WritePin(GPIOA, DEV_EN_LIDAR_Pin, GPIO_PIN_SET);
	// Enable M_EN lidar
	HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_SET);*/

}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000164 	.word	0x20000164

080019a8 <LIDAR_Start>:

/*
 * @brief
 * @param
 */
HAL_StatusTypeDef LIDAR_Start(LIDAR_HandleTypeDef_t * hlidar){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	uint8_t lidar_command[2] = {START_CMD_LIDAR, SCAN_CMD_LIDAR};
 80019b0:	f246 03a5 	movw	r3, #24741	@ 0x60a5
 80019b4:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_UART_Transmit(hlidar->huart, lidar_command, 2, 2000);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	f107 010c 	add.w	r1, r7, #12
 80019be:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80019c2:	2202      	movs	r2, #2
 80019c4:	f003 fa8e 	bl	8004ee4 <HAL_UART_Transmit>
 80019c8:	4603      	mov	r3, r0
 80019ca:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK){
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10a      	bne.n	80019e8 <LIDAR_Start+0x40>
		HAL_UART_Receive_DMA(hlidar->huart, hlidar->data_buff, DATA_BUFF_SIZE_LIDAR);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3329      	adds	r3, #41	@ 0x29
 80019da:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80019de:	4619      	mov	r1, r3
 80019e0:	f003 fbd6 	bl	8005190 <HAL_UART_Receive_DMA>
		return status;
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	e000      	b.n	80019ea <LIDAR_Start+0x42>
	}
	else{
		return status;
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <LIDAR_Stop>:

/*
 * @brief
 * @param
 */
HAL_StatusTypeDef LIDAR_Stop(LIDAR_HandleTypeDef_t * hlidar){
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
	uint8_t lidar_command[2] = {START_CMD_LIDAR, STOP_CMD_LIDAR};
 80019fa:	f246 53a5 	movw	r3, #26021	@ 0x65a5
 80019fe:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_UART_Transmit(hlidar->huart, lidar_command, 2, 2000);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	f107 010c 	add.w	r1, r7, #12
 8001a08:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	f003 fa69 	bl	8004ee4 <HAL_UART_Transmit>
 8001a12:	4603      	mov	r3, r0
 8001a14:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK){
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <LIDAR_Stop+0x2e>
		return status;
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	e000      	b.n	8001a22 <LIDAR_Stop+0x30>
	}
	else{
		return status;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <LIDAR_Get_Info>:

/*
 * @brief
 * @param
 */
HAL_StatusTypeDef LIDAR_Get_Info(LIDAR_HandleTypeDef_t * hlidar){
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	b09f      	sub	sp, #124	@ 0x7c
 8001a30:	af10      	add	r7, sp, #64	@ 0x40
 8001a32:	6278      	str	r0, [r7, #36]	@ 0x24
	uint8_t lidar_command[2] = {START_CMD_LIDAR, GET_INFO_CMD_LIDAR};
 8001a34:	f249 03a5 	movw	r3, #37029	@ 0x90a5
 8001a38:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	LIDAR_DeviceInfo_t * device_info;
	HAL_StatusTypeDef status = HAL_UART_Transmit(hlidar->huart, lidar_command, 2, 2000);
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001a42:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a46:	2202      	movs	r2, #2
 8001a48:	f003 fa4c 	bl	8004ee4 <HAL_UART_Transmit>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if(status == HAL_OK){
 8001a52:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f040 8093 	bne.w	8001b82 <LIDAR_Get_Info+0x156>
		HAL_UART_Receive(hlidar->huart, hlidar->info_buff, INFO_BUFF_SIZE_LIDAR, 2000);
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a62:	1d19      	adds	r1, r3, #4
 8001a64:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a68:	221b      	movs	r2, #27
 8001a6a:	f003 fac9 	bl	8005000 <HAL_UART_Receive>
		device_info->start_sign = (hlidar->info_buff[0]<<8)|hlidar->info_buff[1];
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	791b      	ldrb	r3, [r3, #4]
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	b21a      	sxth	r2, r3
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	795b      	ldrb	r3, [r3, #5]
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	b21b      	sxth	r3, r3
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a84:	801a      	strh	r2, [r3, #0]
		device_info->lenght = (hlidar->info_buff[2])|(hlidar->info_buff[3]<<8)|(hlidar->info_buff[4]<<16);
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	799b      	ldrb	r3, [r3, #6]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8e:	79db      	ldrb	r3, [r3, #7]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	431a      	orrs	r2, r3
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	7a1b      	ldrb	r3, [r3, #8]
 8001a98:	041b      	lsls	r3, r3, #16
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa0:	605a      	str	r2, [r3, #4]
		device_info->mode = hlidar->info_buff[5];
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	7a5a      	ldrb	r2, [r3, #9]
 8001aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa8:	721a      	strb	r2, [r3, #8]
		device_info->type_code = hlidar->info_buff[6];
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aac:	7a9a      	ldrb	r2, [r3, #10]
 8001aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ab0:	725a      	strb	r2, [r3, #9]
		device_info->model = hlidar->info_buff[7];
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	7ada      	ldrb	r2, [r3, #11]
 8001ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ab8:	729a      	strb	r2, [r3, #10]
		snprintf(device_info->firmware_version,6,"%d.%d",hlidar->info_buff[8],hlidar->info_buff[9]);
 8001aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001abc:	f103 000b 	add.w	r0, r3, #11
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac2:	7b1b      	ldrb	r3, [r3, #12]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	7b5b      	ldrb	r3, [r3, #13]
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	4613      	mov	r3, r2
 8001ace:	4a30      	ldr	r2, [pc, #192]	@ (8001b90 <LIDAR_Get_Info+0x164>)
 8001ad0:	2106      	movs	r1, #6
 8001ad2:	f004 fcd1 	bl	8006478 <sniprintf>
		device_info->hardware_version  = hlidar->info_buff[10];
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	7b9a      	ldrb	r2, [r3, #14]
 8001ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001adc:	745a      	strb	r2, [r3, #17]
		snprintf(device_info->serial_number,17,"%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",hlidar->info_buff[11],hlidar->info_buff[12],hlidar->info_buff[13],hlidar->info_buff[14],hlidar->info_buff[15],hlidar->info_buff[16],hlidar->info_buff[17],hlidar->info_buff[18],hlidar->info_buff[19],hlidar->info_buff[20],hlidar->info_buff[21],hlidar->info_buff[22],hlidar->info_buff[23],hlidar->info_buff[24],hlidar->info_buff[25],hlidar->info_buff[26]);
 8001ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ae0:	f103 0012 	add.w	r0, r3, #18
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae6:	7bdb      	ldrb	r3, [r3, #15]
 8001ae8:	469c      	mov	ip, r3
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	7c1b      	ldrb	r3, [r3, #16]
 8001aee:	461d      	mov	r5, r3
 8001af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af2:	7c5b      	ldrb	r3, [r3, #17]
 8001af4:	461e      	mov	r6, r3
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	7c9b      	ldrb	r3, [r3, #18]
 8001afa:	623b      	str	r3, [r7, #32]
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	7cdb      	ldrb	r3, [r3, #19]
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	7d1b      	ldrb	r3, [r3, #20]
 8001b06:	61bb      	str	r3, [r7, #24]
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	7d5b      	ldrb	r3, [r3, #21]
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b10:	7d9b      	ldrb	r3, [r3, #22]
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b16:	7ddb      	ldrb	r3, [r3, #23]
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	7e1b      	ldrb	r3, [r3, #24]
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b22:	7e5b      	ldrb	r3, [r3, #25]
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b28:	7e9b      	ldrb	r3, [r3, #26]
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	7edb      	ldrb	r3, [r3, #27]
 8001b30:	461c      	mov	r4, r3
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	7f1b      	ldrb	r3, [r3, #28]
 8001b36:	4619      	mov	r1, r3
 8001b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3a:	7f5b      	ldrb	r3, [r3, #29]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	7f9b      	ldrb	r3, [r3, #30]
 8001b42:	930e      	str	r3, [sp, #56]	@ 0x38
 8001b44:	920d      	str	r2, [sp, #52]	@ 0x34
 8001b46:	910c      	str	r1, [sp, #48]	@ 0x30
 8001b48:	940b      	str	r4, [sp, #44]	@ 0x2c
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	920a      	str	r2, [sp, #40]	@ 0x28
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	9209      	str	r2, [sp, #36]	@ 0x24
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	9208      	str	r2, [sp, #32]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	9207      	str	r2, [sp, #28]
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	9206      	str	r2, [sp, #24]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	9205      	str	r2, [sp, #20]
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	9204      	str	r2, [sp, #16]
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	9203      	str	r2, [sp, #12]
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	9302      	str	r3, [sp, #8]
 8001b6e:	9601      	str	r6, [sp, #4]
 8001b70:	9500      	str	r5, [sp, #0]
 8001b72:	4663      	mov	r3, ip
 8001b74:	4a07      	ldr	r2, [pc, #28]	@ (8001b94 <LIDAR_Get_Info+0x168>)
 8001b76:	2111      	movs	r1, #17
 8001b78:	f004 fc7e 	bl	8006478 <sniprintf>

		return status;
 8001b7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001b80:	e001      	b.n	8001b86 <LIDAR_Get_Info+0x15a>
	}
	else{
		return status;
 8001b82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
	}
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	373c      	adds	r7, #60	@ 0x3c
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	08007928 	.word	0x08007928
 8001b94:	08007930 	.word	0x08007930

08001b98 <LIDAR_Get_Health_Status>:

/*
 * @brief
 * @param
 */
HAL_StatusTypeDef LIDAR_Get_Health_Status(LIDAR_HandleTypeDef_t * hlidar){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	uint8_t lidar_command[2] = {START_CMD_LIDAR, GET_HEALTH_CMD_LIDAR};
 8001ba0:	f249 13a5 	movw	r3, #37285	@ 0x91a5
 8001ba4:	81bb      	strh	r3, [r7, #12]
	LIDAR_HealthStatus_t * health_status;
	HAL_StatusTypeDef status = HAL_UART_Transmit(hlidar->huart, lidar_command, 2, 2000);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	f107 010c 	add.w	r1, r7, #12
 8001bae:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f003 f996 	bl	8004ee4 <HAL_UART_Transmit>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	75fb      	strb	r3, [r7, #23]
	if(status == HAL_OK){
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d146      	bne.n	8001c50 <LIDAR_Get_Health_Status+0xb8>
		HAL_UART_Receive(hlidar->huart, hlidar->health_buff, HEALTH_BUFF_SIZE_LIDAR, 2000);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f103 011f 	add.w	r1, r3, #31
 8001bcc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001bd0:	220a      	movs	r2, #10
 8001bd2:	f003 fa15 	bl	8005000 <HAL_UART_Receive>
		health_status->start_sign = (hlidar->health_buff[0]<<8)|hlidar->health_buff[1];
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7fdb      	ldrb	r3, [r3, #31]
 8001bda:	021b      	lsls	r3, r3, #8
 8001bdc:	b21a      	sxth	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	4313      	orrs	r3, r2
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	801a      	strh	r2, [r3, #0]
		health_status->lenght = (hlidar->health_buff[2])|(hlidar->health_buff[3]<<8)|(hlidar->health_buff[4]<<16);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001c08:	041b      	lsls	r3, r3, #16
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	605a      	str	r2, [r3, #4]
		health_status->mode = hlidar->health_buff[5];
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	721a      	strb	r2, [r3, #8]
		health_status->type_code = hlidar->health_buff[6];
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	725a      	strb	r2, [r3, #9]
		health_status->status_code = hlidar->health_buff[7];
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	729a      	strb	r2, [r3, #10]
		health_status->error_code = hlidar->health_buff[8]|(hlidar->health_buff[9]<<8);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	4313      	orrs	r3, r2
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	819a      	strh	r2, [r3, #12]

		return status;
 8001c4c:	7dfb      	ldrb	r3, [r7, #23]
 8001c4e:	e000      	b.n	8001c52 <LIDAR_Get_Health_Status+0xba>
	}
	else{
		return status;
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	0000      	movs	r0, r0
 8001c5c:	0000      	movs	r0, r0
	...

08001c60 <LIDAR_process_frame>:

/*
 * @brief
 * @param
 */
void LIDAR_process_frame(LIDAR_HandleTypeDef_t * hlidar) {
 8001c60:	b5b0      	push	{r4, r5, r7, lr}
 8001c62:	b08c      	sub	sp, #48	@ 0x30
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
    uint16_t Si;
    float Di;
    float Ai;
    float AngleFSA = (hlidar->process_frame.FSA >> 1) / 64.0; // Angle initial (en degrés)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8001c6e:	085b      	lsrs	r3, r3, #1
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc76 	bl	8000564 <__aeabi_i2d>
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	4b88      	ldr	r3, [pc, #544]	@ (8001ea0 <LIDAR_process_frame+0x240>)
 8001c7e:	f7fe fe05 	bl	800088c <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe ff97 	bl	8000bbc <__aeabi_d2f>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
    float AngleLSA = (hlidar->process_frame.LSA >> 1) / 64.0; // Angle final (en degrés)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	@ 0x802
 8001c98:	085b      	lsrs	r3, r3, #1
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fc61 	bl	8000564 <__aeabi_i2d>
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ea0 <LIDAR_process_frame+0x240>)
 8001ca8:	f7fe fdf0 	bl	800088c <__aeabi_ddiv>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f7fe ff82 	bl	8000bbc <__aeabi_d2f>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	623b      	str	r3, [r7, #32]
    float diffAngle = AngleLSA - AngleFSA; // Différence d'angle (en degrés)
 8001cbc:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cc0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc8:	edc7 7a07 	vstr	s15, [r7, #28]
    int LSN = hlidar->process_frame.LSN;     // Nombre d'échantillons dans le paquet
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 37ff 	ldrb.w	r3, [r3, #2047]	@ 0x7ff
 8001cd2:	61bb      	str	r3, [r7, #24]
    int index;

    for (int i = 0; i < hlidar->process_frame.index / 2; i++) {
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cd8:	e0c6      	b.n	8001e68 <LIDAR_process_frame+0x208>
        // Extraction des données de distance
        Si = hlidar->process_frame.frame_buff[2 * i] | (hlidar->process_frame.frame_buff[2 * i + 1] << 8);
 8001cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f893 3807 	ldrb.w	r3, [r3, #2055]	@ 0x807
 8001ce6:	b21a      	sxth	r2, r3
 8001ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	3301      	adds	r3, #1
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	440b      	add	r3, r1
 8001cf2:	f893 3807 	ldrb.w	r3, [r3, #2055]	@ 0x807
 8001cf6:	021b      	lsls	r3, r3, #8
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	82fb      	strh	r3, [r7, #22]
        Di = Si / 4.0; // Distance en mm
 8001d00:	8afb      	ldrh	r3, [r7, #22]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fc2e 	bl	8000564 <__aeabi_i2d>
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	4b65      	ldr	r3, [pc, #404]	@ (8001ea4 <LIDAR_process_frame+0x244>)
 8001d0e:	f7fe fdbd 	bl	800088c <__aeabi_ddiv>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f7fe ff4f 	bl	8000bbc <__aeabi_d2f>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	613b      	str	r3, [r7, #16]

        // Calcul de l'angle sans correction
        Ai = (diffAngle / (LSN - 1)) * i + AngleFSA;
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	ee07 3a90 	vmov	s15, r3
 8001d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d44:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4c:	edc7 7a03 	vstr	s15, [r7, #12]

        // Correction de l'angle
        float AngCorrect = 0.0;
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (Di != 0) {
 8001d56:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	d03d      	beq.n	8001de0 <LIDAR_process_frame+0x180>
            AngCorrect = atan(21.8 * (155.3 - Di) / (155.3 * Di)) * (180.0 / 3.141592653589793); // Conversion en degrés
 8001d64:	6938      	ldr	r0, [r7, #16]
 8001d66:	f7fe fc0f 	bl	8000588 <__aeabi_f2d>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	a146      	add	r1, pc, #280	@ (adr r1, 8001e88 <LIDAR_process_frame+0x228>)
 8001d70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d74:	f7fe faa8 	bl	80002c8 <__aeabi_dsub>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	a343      	add	r3, pc, #268	@ (adr r3, 8001e90 <LIDAR_process_frame+0x230>)
 8001d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d86:	f7fe fc57 	bl	8000638 <__aeabi_dmul>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4614      	mov	r4, r2
 8001d90:	461d      	mov	r5, r3
 8001d92:	6938      	ldr	r0, [r7, #16]
 8001d94:	f7fe fbf8 	bl	8000588 <__aeabi_f2d>
 8001d98:	a33b      	add	r3, pc, #236	@ (adr r3, 8001e88 <LIDAR_process_frame+0x228>)
 8001d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9e:	f7fe fc4b 	bl	8000638 <__aeabi_dmul>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4620      	mov	r0, r4
 8001da8:	4629      	mov	r1, r5
 8001daa:	f7fe fd6f 	bl	800088c <__aeabi_ddiv>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	ec43 2b17 	vmov	d7, r2, r3
 8001db6:	eeb0 0a47 	vmov.f32	s0, s14
 8001dba:	eef0 0a67 	vmov.f32	s1, s15
 8001dbe:	f005 fba3 	bl	8007508 <atan>
 8001dc2:	ec51 0b10 	vmov	r0, r1, d0
 8001dc6:	a334      	add	r3, pc, #208	@ (adr r3, 8001e98 <LIDAR_process_frame+0x238>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fc34 	bl	8000638 <__aeabi_dmul>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f7fe fef0 	bl	8000bbc <__aeabi_d2f>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        Ai += AngCorrect;
 8001de0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001de4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dec:	edc7 7a03 	vstr	s15, [r7, #12]

        // Index du point dans le buffer circulaire
        index = (int)round(Ai);
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f7fe fbc9 	bl	8000588 <__aeabi_f2d>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	ec43 2b10 	vmov	d0, r2, r3
 8001dfe:	f005 fd23 	bl	8007848 <round>
 8001e02:	ec53 2b10 	vmov	r2, r3, d0
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f7fe feaf 	bl	8000b6c <__aeabi_d2iz>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	60bb      	str	r3, [r7, #8]

        // Filtrage des points trop proches ou trop loin
        if (Di > 1500 || Di < 40) {
 8001e12:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e16:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001ea8 <LIDAR_process_frame+0x248>
 8001e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e22:	dc08      	bgt.n	8001e36 <LIDAR_process_frame+0x1d6>
 8001e24:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e28:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001eac <LIDAR_process_frame+0x24c>
 8001e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e34:	d508      	bpl.n	8001e48 <LIDAR_process_frame+0x1e8>
            hlidar->process_frame.point_buff[index] = 0;
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f203 231a 	addw	r3, r3, #538	@ 0x21a
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	2200      	movs	r2, #0
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	e00c      	b.n	8001e62 <LIDAR_process_frame+0x202>
        } else {
            hlidar->process_frame.point_buff[index] = (int)Di;
 8001e48:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e50:	ee17 1a90 	vmov	r1, s15
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	f203 231a 	addw	r3, r3, #538	@ 0x21a
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	6059      	str	r1, [r3, #4]
    for (int i = 0; i < hlidar->process_frame.index / 2; i++) {
 8001e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e64:	3301      	adds	r3, #1
 8001e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3806 	ldrb.w	r3, [r3, #2054]	@ 0x806
 8001e6e:	085b      	lsrs	r3, r3, #1
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e76:	4293      	cmp	r3, r2
 8001e78:	f6ff af2f 	blt.w	8001cda <LIDAR_process_frame+0x7a>
        }
    }
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	3730      	adds	r7, #48	@ 0x30
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bdb0      	pop	{r4, r5, r7, pc}
 8001e86:	bf00      	nop
 8001e88:	9999999a 	.word	0x9999999a
 8001e8c:	40636999 	.word	0x40636999
 8001e90:	cccccccd 	.word	0xcccccccd
 8001e94:	4035cccc 	.word	0x4035cccc
 8001e98:	1a63c1f8 	.word	0x1a63c1f8
 8001e9c:	404ca5dc 	.word	0x404ca5dc
 8001ea0:	40500000 	.word	0x40500000
 8001ea4:	40100000 	.word	0x40100000
 8001ea8:	44bb8000 	.word	0x44bb8000
 8001eac:	42200000 	.word	0x42200000

08001eb0 <LIDAR_get_point>:

/*
 * @brief
 * @param
 */
void LIDAR_get_point(LIDAR_HandleTypeDef_t *hlidar) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]


    for (int i = 0; i < DATA_BUFF_SIZE_LIDAR; i++) {
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	e167      	b.n	800218e <LIDAR_get_point+0x2de>
        // Réponse à la commande SCAN pour détecter le début des trames
        if (i == 0) {
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d148      	bne.n	8001f56 <LIDAR_get_point+0xa6>
            if ((hlidar->data_buff[i] == 0xA5) &&
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4413      	add	r3, r2
 8001eca:	3329      	adds	r3, #41	@ 0x29
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2ba5      	cmp	r3, #165	@ 0xa5
 8001ed0:	d141      	bne.n	8001f56 <LIDAR_get_point+0xa6>
                (hlidar->data_buff[i + 1] == 0x5A) &&
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
            if ((hlidar->data_buff[i] == 0xA5) &&
 8001ede:	2b5a      	cmp	r3, #90	@ 0x5a
 8001ee0:	d139      	bne.n	8001f56 <LIDAR_get_point+0xa6>
                (hlidar->data_buff[i + 2] == 0x05) &&
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
                (hlidar->data_buff[i + 1] == 0x5A) &&
 8001eee:	2b05      	cmp	r3, #5
 8001ef0:	d131      	bne.n	8001f56 <LIDAR_get_point+0xa6>
                (hlidar->data_buff[i + 3] == 0x00) &&
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	3303      	adds	r3, #3
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
                (hlidar->data_buff[i + 2] == 0x05) &&
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d129      	bne.n	8001f56 <LIDAR_get_point+0xa6>
                (hlidar->data_buff[i + 4] == 0x00) &&
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3304      	adds	r3, #4
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
                (hlidar->data_buff[i + 3] == 0x00) &&
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d121      	bne.n	8001f56 <LIDAR_get_point+0xa6>
                (hlidar->data_buff[i + 5] == 0x40) &&
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	3305      	adds	r3, #5
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
                (hlidar->data_buff[i + 4] == 0x00) &&
 8001f1e:	2b40      	cmp	r3, #64	@ 0x40
 8001f20:	d119      	bne.n	8001f56 <LIDAR_get_point+0xa6>
                (hlidar->data_buff[i + 6] == 0x81)) {
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3306      	adds	r3, #6
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
                (hlidar->data_buff[i + 5] == 0x40) &&
 8001f2e:	2b81      	cmp	r3, #129	@ 0x81
 8001f30:	d111      	bne.n	8001f56 <LIDAR_get_point+0xa6>
                printf("Scan Command Reply\r\n");
 8001f32:	4889      	ldr	r0, [pc, #548]	@ (8002158 <LIDAR_get_point+0x2a8>)
 8001f34:	f004 fa98 	bl	8006468 <puts>
                hlidar->process_frame.index = 0;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2806 	strb.w	r2, [r3, #2054]	@ 0x806
                i = 6;
 8001f40:	2306      	movs	r3, #6
 8001f42:	60fb      	str	r3, [r7, #12]
                frame_start = 7;
 8001f44:	4b85      	ldr	r3, [pc, #532]	@ (800215c <LIDAR_get_point+0x2ac>)
 8001f46:	2207      	movs	r2, #7
 8001f48:	801a      	strh	r2, [r3, #0]
                frame_end = frame_start + 4;
 8001f4a:	4b84      	ldr	r3, [pc, #528]	@ (800215c <LIDAR_get_point+0x2ac>)
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	4b83      	ldr	r3, [pc, #524]	@ (8002160 <LIDAR_get_point+0x2b0>)
 8001f54:	801a      	strh	r2, [r3, #0]
            }
        }

        // Data frame extraction
        if (i == frame_start) {
 8001f56:	4b81      	ldr	r3, [pc, #516]	@ (800215c <LIDAR_get_point+0x2ac>)
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d109      	bne.n	8001f76 <LIDAR_get_point+0xc6>
            hlidar->process_frame.PH = hlidar->data_buff[i];
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4413      	add	r3, r2
 8001f68:	3329      	adds	r3, #41	@ 0x29
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f8a3 27fc 	strh.w	r2, [r3, #2044]	@ 0x7fc
 8001f74:	e108      	b.n	8002188 <LIDAR_get_point+0x2d8>
        }
        else if (i == frame_start + 1) {
 8001f76:	4b79      	ldr	r3, [pc, #484]	@ (800215c <LIDAR_get_point+0x2ac>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d111      	bne.n	8001fa6 <LIDAR_get_point+0xf6>
            hlidar->process_frame.PH = hlidar->process_frame.PH|(hlidar->data_buff[i] << 8);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f8b3 37fc 	ldrh.w	r3, [r3, #2044]	@ 0x7fc
 8001f88:	b21a      	sxth	r2, r3
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	440b      	add	r3, r1
 8001f90:	3329      	adds	r3, #41	@ 0x29
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f8a3 27fc 	strh.w	r2, [r3, #2044]	@ 0x7fc
 8001fa4:	e0f0      	b.n	8002188 <LIDAR_get_point+0x2d8>
        }
        else if (i == frame_start + 2) {
 8001fa6:	4b6d      	ldr	r3, [pc, #436]	@ (800215c <LIDAR_get_point+0x2ac>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	3302      	adds	r3, #2
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d108      	bne.n	8001fc4 <LIDAR_get_point+0x114>
            hlidar->process_frame.CT = hlidar->data_buff[i];
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3329      	adds	r3, #41	@ 0x29
 8001fba:	781a      	ldrb	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f883 27fe 	strb.w	r2, [r3, #2046]	@ 0x7fe
 8001fc2:	e0e1      	b.n	8002188 <LIDAR_get_point+0x2d8>
        }
        else if (i == frame_start + 3) {
 8001fc4:	4b65      	ldr	r3, [pc, #404]	@ (800215c <LIDAR_get_point+0x2ac>)
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	3303      	adds	r3, #3
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d117      	bne.n	8002000 <LIDAR_get_point+0x150>
            frame_end = frame_start + 9 + 2 * hlidar->data_buff[i];
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3329      	adds	r3, #41	@ 0x29
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	4b5f      	ldr	r3, [pc, #380]	@ (800215c <LIDAR_get_point+0x2ac>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	3309      	adds	r3, #9
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	4b5d      	ldr	r3, [pc, #372]	@ (8002160 <LIDAR_get_point+0x2b0>)
 8001fec:	801a      	strh	r2, [r3, #0]
            hlidar->process_frame.LSN = hlidar->data_buff[i];
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3329      	adds	r3, #41	@ 0x29
 8001ff6:	781a      	ldrb	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f883 27ff 	strb.w	r2, [r3, #2047]	@ 0x7ff
 8001ffe:	e0c3      	b.n	8002188 <LIDAR_get_point+0x2d8>
        }
        else if (i == frame_start + 4) {
 8002000:	4b56      	ldr	r3, [pc, #344]	@ (800215c <LIDAR_get_point+0x2ac>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	3304      	adds	r3, #4
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	429a      	cmp	r2, r3
 800200a:	d109      	bne.n	8002020 <LIDAR_get_point+0x170>
            hlidar->process_frame.FSA = hlidar->data_buff[i];
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4413      	add	r3, r2
 8002012:	3329      	adds	r3, #41	@ 0x29
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800
 800201e:	e0b3      	b.n	8002188 <LIDAR_get_point+0x2d8>
        }
        else if (i == frame_start + 5) {
 8002020:	4b4e      	ldr	r3, [pc, #312]	@ (800215c <LIDAR_get_point+0x2ac>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	3305      	adds	r3, #5
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	429a      	cmp	r2, r3
 800202a:	d111      	bne.n	8002050 <LIDAR_get_point+0x1a0>
            hlidar->process_frame.FSA = hlidar->process_frame.FSA|(hlidar->data_buff[i] << 8);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8002032:	b21a      	sxth	r2, r3
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	440b      	add	r3, r1
 800203a:	3329      	adds	r3, #41	@ 0x29
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	b21b      	sxth	r3, r3
 8002042:	4313      	orrs	r3, r2
 8002044:	b21b      	sxth	r3, r3
 8002046:	b29a      	uxth	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800
 800204e:	e09b      	b.n	8002188 <LIDAR_get_point+0x2d8>
        }
        else if (i == frame_start + 6) {
 8002050:	4b42      	ldr	r3, [pc, #264]	@ (800215c <LIDAR_get_point+0x2ac>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	3306      	adds	r3, #6
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	429a      	cmp	r2, r3
 800205a:	d109      	bne.n	8002070 <LIDAR_get_point+0x1c0>
            hlidar->process_frame.LSA = hlidar->data_buff[i];
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4413      	add	r3, r2
 8002062:	3329      	adds	r3, #41	@ 0x29
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f8a3 2802 	strh.w	r2, [r3, #2050]	@ 0x802
 800206e:	e08b      	b.n	8002188 <LIDAR_get_point+0x2d8>
        }
        else if (i == frame_start + 7) {
 8002070:	4b3a      	ldr	r3, [pc, #232]	@ (800215c <LIDAR_get_point+0x2ac>)
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	3307      	adds	r3, #7
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	429a      	cmp	r2, r3
 800207a:	d111      	bne.n	80020a0 <LIDAR_get_point+0x1f0>
            hlidar->process_frame.LSA = hlidar->process_frame.LSA|(hlidar->data_buff[i] << 8);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	@ 0x802
 8002082:	b21a      	sxth	r2, r3
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	440b      	add	r3, r1
 800208a:	3329      	adds	r3, #41	@ 0x29
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	021b      	lsls	r3, r3, #8
 8002090:	b21b      	sxth	r3, r3
 8002092:	4313      	orrs	r3, r2
 8002094:	b21b      	sxth	r3, r3
 8002096:	b29a      	uxth	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f8a3 2802 	strh.w	r2, [r3, #2050]	@ 0x802
 800209e:	e073      	b.n	8002188 <LIDAR_get_point+0x2d8>
        }
        else if (i == frame_start + 8) {
 80020a0:	4b2e      	ldr	r3, [pc, #184]	@ (800215c <LIDAR_get_point+0x2ac>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	3308      	adds	r3, #8
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d109      	bne.n	80020c0 <LIDAR_get_point+0x210>
            hlidar->process_frame.CS = hlidar->data_buff[i];
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4413      	add	r3, r2
 80020b2:	3329      	adds	r3, #41	@ 0x29
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f8a3 2804 	strh.w	r2, [r3, #2052]	@ 0x804
 80020be:	e063      	b.n	8002188 <LIDAR_get_point+0x2d8>
        }
        else if (i == frame_start + 9) {
 80020c0:	4b26      	ldr	r3, [pc, #152]	@ (800215c <LIDAR_get_point+0x2ac>)
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	3309      	adds	r3, #9
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d111      	bne.n	80020f0 <LIDAR_get_point+0x240>
            hlidar->process_frame.CS = hlidar->process_frame.CS|(hlidar->data_buff[i] << 8);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	@ 0x804
 80020d2:	b21a      	sxth	r2, r3
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	440b      	add	r3, r1
 80020da:	3329      	adds	r3, #41	@ 0x29
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	021b      	lsls	r3, r3, #8
 80020e0:	b21b      	sxth	r3, r3
 80020e2:	4313      	orrs	r3, r2
 80020e4:	b21b      	sxth	r3, r3
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f8a3 2804 	strh.w	r2, [r3, #2052]	@ 0x804
 80020ee:	e04b      	b.n	8002188 <LIDAR_get_point+0x2d8>
        }
        else if (i == frame_end) {
 80020f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002160 <LIDAR_get_point+0x2b0>)
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d133      	bne.n	8002164 <LIDAR_get_point+0x2b4>
            hlidar->process_frame.frame_buff[hlidar->process_frame.index++] = hlidar->data_buff[i];
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3806 	ldrb.w	r3, [r3, #2054]	@ 0x806
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	b2d1      	uxtb	r1, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	f882 1806 	strb.w	r1, [r2, #2054]	@ 0x806
 800210c:	4619      	mov	r1, r3
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	3329      	adds	r3, #41	@ 0x29
 8002116:	781a      	ldrb	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	440b      	add	r3, r1
 800211c:	f883 2807 	strb.w	r2, [r3, #2055]	@ 0x807

            if (frame_end - frame_start > 11) {
 8002120:	4b0f      	ldr	r3, [pc, #60]	@ (8002160 <LIDAR_get_point+0x2b0>)
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	4b0d      	ldr	r3, [pc, #52]	@ (800215c <LIDAR_get_point+0x2ac>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b0b      	cmp	r3, #11
 800212e:	dd02      	ble.n	8002136 <LIDAR_get_point+0x286>
                // Extracting the points using the frame previously calculated
                LIDAR_process_frame(hlidar);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff fd95 	bl	8001c60 <LIDAR_process_frame>
            }

            hlidar->process_frame.index = 0;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2806 	strb.w	r2, [r3, #2054]	@ 0x806
            frame_start = frame_end + 1;
 800213e:	4b08      	ldr	r3, [pc, #32]	@ (8002160 <LIDAR_get_point+0x2b0>)
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	3301      	adds	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	4b05      	ldr	r3, [pc, #20]	@ (800215c <LIDAR_get_point+0x2ac>)
 8002148:	801a      	strh	r2, [r3, #0]
            frame_end = frame_start + 5;
 800214a:	4b04      	ldr	r3, [pc, #16]	@ (800215c <LIDAR_get_point+0x2ac>)
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	3305      	adds	r3, #5
 8002150:	b29a      	uxth	r2, r3
 8002152:	4b03      	ldr	r3, [pc, #12]	@ (8002160 <LIDAR_get_point+0x2b0>)
 8002154:	801a      	strh	r2, [r3, #0]
 8002156:	e017      	b.n	8002188 <LIDAR_get_point+0x2d8>
 8002158:	08007954 	.word	0x08007954
 800215c:	20001abc 	.word	0x20001abc
 8002160:	20001abe 	.word	0x20001abe
        }
        else {
            hlidar->process_frame.frame_buff[hlidar->process_frame.index++] = hlidar->data_buff[i];
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3806 	ldrb.w	r3, [r3, #2054]	@ 0x806
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	b2d1      	uxtb	r1, r2
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	f882 1806 	strb.w	r1, [r2, #2054]	@ 0x806
 8002174:	4619      	mov	r1, r3
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4413      	add	r3, r2
 800217c:	3329      	adds	r3, #41	@ 0x29
 800217e:	781a      	ldrb	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	440b      	add	r3, r1
 8002184:	f883 2807 	strb.w	r2, [r3, #2055]	@ 0x807
    for (int i = 0; i < DATA_BUFF_SIZE_LIDAR; i++) {
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3301      	adds	r3, #1
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002194:	f6ff ae93 	blt.w	8001ebe <LIDAR_get_point+0xe>
        }
    }

    // Gérer les indices circulaires pour les buffers
    frame_start = frame_start - DATA_BUFF_SIZE_LIDAR;
 8002198:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <LIDAR_get_point+0x30c>)
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <LIDAR_get_point+0x30c>)
 80021a4:	801a      	strh	r2, [r3, #0]
    frame_end = frame_end - DATA_BUFF_SIZE_LIDAR;
 80021a6:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <LIDAR_get_point+0x310>)
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	4b03      	ldr	r3, [pc, #12]	@ (80021c0 <LIDAR_get_point+0x310>)
 80021b2:	801a      	strh	r2, [r3, #0]
}
 80021b4:	bf00      	nop
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20001abc 	.word	0x20001abc
 80021c0:	20001abe 	.word	0x20001abe

080021c4 <LIDAR_median_filter>:
/*
 * @brief Filter point buff using a median filter to eliminate the aberrant values due
 * to the noise
 * @param hlidar : pointer to the lidar handle structure
 */
void LIDAR_median_filter(LIDAR_HandleTypeDef_t *hlidar){
 80021c4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80021c8:	f2ad 5ddc 	subw	sp, sp, #1500	@ 0x5dc
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	f507 63bb 	add.w	r3, r7, #1496	@ 0x5d8
 80021d2:	f2a3 53d4 	subw	r3, r3, #1492	@ 0x5d4
 80021d6:	6018      	str	r0, [r3, #0]
    int data_to_filter[POINT_BUFF_SIZE_LIDAR];
    int block_size = 5; // Size of the sliding window
 80021d8:	2305      	movs	r3, #5
 80021da:	f8c7 35bc 	str.w	r3, [r7, #1468]	@ 0x5bc
    int middle = block_size / 2;
 80021de:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	@ 0x5bc
 80021e2:	0fda      	lsrs	r2, r3, #31
 80021e4:	4413      	add	r3, r2
 80021e6:	105b      	asrs	r3, r3, #1
 80021e8:	f8c7 35b8 	str.w	r3, [r7, #1464]	@ 0x5b8

    // Copy the original data to process
    for (int i = 0; i < POINT_BUFF_SIZE_LIDAR; i++) {
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 35d4 	str.w	r3, [r7, #1492]	@ 0x5d4
 80021f2:	e018      	b.n	8002226 <LIDAR_median_filter+0x62>
        data_to_filter[i] = hlidar->process_frame.point_buff[i];
 80021f4:	f507 63bb 	add.w	r3, r7, #1496	@ 0x5d8
 80021f8:	f2a3 53d4 	subw	r3, r3, #1492	@ 0x5d4
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	@ 0x5d4
 8002202:	f203 231a 	addw	r3, r3, #538	@ 0x21a
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	f507 63bb 	add.w	r3, r7, #1496	@ 0x5d8
 8002210:	f2a3 53cc 	subw	r3, r3, #1484	@ 0x5cc
 8002214:	f8d7 25d4 	ldr.w	r2, [r7, #1492]	@ 0x5d4
 8002218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < POINT_BUFF_SIZE_LIDAR; i++) {
 800221c:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	@ 0x5d4
 8002220:	3301      	adds	r3, #1
 8002222:	f8c7 35d4 	str.w	r3, [r7, #1492]	@ 0x5d4
 8002226:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	@ 0x5d4
 800222a:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800222e:	dbe1      	blt.n	80021f4 <LIDAR_median_filter+0x30>
    }

    // Apply the median filter
    for (int i = 0; i < POINT_BUFF_SIZE_LIDAR; i++) {
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 35d0 	str.w	r3, [r7, #1488]	@ 0x5d0
 8002236:	e0d6      	b.n	80023e6 <LIDAR_median_filter+0x222>
 8002238:	466b      	mov	r3, sp
 800223a:	4618      	mov	r0, r3
        int window[block_size];
 800223c:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	@ 0x5bc
 8002240:	1e4b      	subs	r3, r1, #1
 8002242:	f8c7 35b4 	str.w	r3, [r7, #1460]	@ 0x5b4
 8002246:	460a      	mov	r2, r1
 8002248:	2300      	movs	r3, #0
 800224a:	4614      	mov	r4, r2
 800224c:	461d      	mov	r5, r3
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	016b      	lsls	r3, r5, #5
 8002258:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800225c:	0162      	lsls	r2, r4, #5
 800225e:	460a      	mov	r2, r1
 8002260:	2300      	movs	r3, #0
 8002262:	4690      	mov	r8, r2
 8002264:	4699      	mov	r9, r3
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002272:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002276:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800227a:	460b      	mov	r3, r1
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	3307      	adds	r3, #7
 8002280:	08db      	lsrs	r3, r3, #3
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	ebad 0d03 	sub.w	sp, sp, r3
 8002288:	466b      	mov	r3, sp
 800228a:	3303      	adds	r3, #3
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	f8c7 35b0 	str.w	r3, [r7, #1456]	@ 0x5b0
        int count = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 35cc 	str.w	r3, [r7, #1484]	@ 0x5cc

        // Build the window (handle edges with zero-padding)
        for (int j = -middle; j <= middle; j++) {
 800229a:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	@ 0x5b8
 800229e:	425b      	negs	r3, r3
 80022a0:	f8c7 35c8 	str.w	r3, [r7, #1480]	@ 0x5c8
 80022a4:	e032      	b.n	800230c <LIDAR_median_filter+0x148>
            if ((i + j) >= 0 && (i + j) < POINT_BUFF_SIZE_LIDAR) {
 80022a6:	f8d7 25d0 	ldr.w	r2, [r7, #1488]	@ 0x5d0
 80022aa:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	@ 0x5c8
 80022ae:	4413      	add	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	db1c      	blt.n	80022ee <LIDAR_median_filter+0x12a>
 80022b4:	f8d7 25d0 	ldr.w	r2, [r7, #1488]	@ 0x5d0
 80022b8:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	@ 0x5c8
 80022bc:	4413      	add	r3, r2
 80022be:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80022c2:	da14      	bge.n	80022ee <LIDAR_median_filter+0x12a>
                window[count++] = data_to_filter[i + j];
 80022c4:	f8d7 25d0 	ldr.w	r2, [r7, #1488]	@ 0x5d0
 80022c8:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	@ 0x5c8
 80022cc:	18d1      	adds	r1, r2, r3
 80022ce:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	@ 0x5cc
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	f8c7 25cc 	str.w	r2, [r7, #1484]	@ 0x5cc
 80022d8:	f507 62bb 	add.w	r2, r7, #1496	@ 0x5d8
 80022dc:	f2a2 52cc 	subw	r2, r2, #1484	@ 0x5cc
 80022e0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80022e4:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	@ 0x5b0
 80022e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80022ec:	e009      	b.n	8002302 <LIDAR_median_filter+0x13e>
            } else {
                window[count++] = 0; // Zero-padding for edge cases
 80022ee:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	@ 0x5cc
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	f8c7 25cc 	str.w	r2, [r7, #1484]	@ 0x5cc
 80022f8:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	@ 0x5b0
 80022fc:	2100      	movs	r1, #0
 80022fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int j = -middle; j <= middle; j++) {
 8002302:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	@ 0x5c8
 8002306:	3301      	adds	r3, #1
 8002308:	f8c7 35c8 	str.w	r3, [r7, #1480]	@ 0x5c8
 800230c:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	@ 0x5c8
 8002310:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	@ 0x5b8
 8002314:	429a      	cmp	r2, r3
 8002316:	ddc6      	ble.n	80022a6 <LIDAR_median_filter+0xe2>
            }
        }

        // Sort the window to find the median
        for (int k = 0; k < count - 1; k++) {
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 35c4 	str.w	r3, [r7, #1476]	@ 0x5c4
 800231e:	e03f      	b.n	80023a0 <LIDAR_median_filter+0x1dc>
            for (int l = k + 1; l < count; l++) {
 8002320:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	@ 0x5c4
 8002324:	3301      	adds	r3, #1
 8002326:	f8c7 35c0 	str.w	r3, [r7, #1472]	@ 0x5c0
 800232a:	e02e      	b.n	800238a <LIDAR_median_filter+0x1c6>
                if (window[k] > window[l]) {
 800232c:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	@ 0x5b0
 8002330:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	@ 0x5c4
 8002334:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002338:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	@ 0x5b0
 800233c:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	@ 0x5c0
 8002340:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002344:	429a      	cmp	r2, r3
 8002346:	dd1b      	ble.n	8002380 <LIDAR_median_filter+0x1bc>
                    int temp = window[k];
 8002348:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	@ 0x5b0
 800234c:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	@ 0x5c4
 8002350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002354:	f8c7 35ac 	str.w	r3, [r7, #1452]	@ 0x5ac
                    window[k] = window[l];
 8002358:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	@ 0x5b0
 800235c:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	@ 0x5c0
 8002360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002364:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	@ 0x5b0
 8002368:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	@ 0x5c4
 800236c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    window[l] = temp;
 8002370:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	@ 0x5b0
 8002374:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	@ 0x5c0
 8002378:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	@ 0x5ac
 800237c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (int l = k + 1; l < count; l++) {
 8002380:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8002384:	3301      	adds	r3, #1
 8002386:	f8c7 35c0 	str.w	r3, [r7, #1472]	@ 0x5c0
 800238a:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	@ 0x5c0
 800238e:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	@ 0x5cc
 8002392:	429a      	cmp	r2, r3
 8002394:	dbca      	blt.n	800232c <LIDAR_median_filter+0x168>
        for (int k = 0; k < count - 1; k++) {
 8002396:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	@ 0x5c4
 800239a:	3301      	adds	r3, #1
 800239c:	f8c7 35c4 	str.w	r3, [r7, #1476]	@ 0x5c4
 80023a0:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	@ 0x5cc
 80023a4:	3b01      	subs	r3, #1
 80023a6:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	@ 0x5c4
 80023aa:	429a      	cmp	r2, r3
 80023ac:	dbb8      	blt.n	8002320 <LIDAR_median_filter+0x15c>
                }
            }
        }

        // Assign the median value to the filtered data
        hlidar->process_frame.filtered_buff[i] = window[count / 2];
 80023ae:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	@ 0x5cc
 80023b2:	0fda      	lsrs	r2, r3, #31
 80023b4:	4413      	add	r3, r2
 80023b6:	105b      	asrs	r3, r3, #1
 80023b8:	461a      	mov	r2, r3
 80023ba:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	@ 0x5b0
 80023be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023c2:	f507 63bb 	add.w	r3, r7, #1496	@ 0x5d8
 80023c6:	f2a3 53d4 	subw	r3, r3, #1492	@ 0x5d4
 80023ca:	6819      	ldr	r1, [r3, #0]
 80023cc:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	@ 0x5d0
 80023d0:	f203 3382 	addw	r3, r3, #898	@ 0x382
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	4685      	mov	sp, r0
    for (int i = 0; i < POINT_BUFF_SIZE_LIDAR; i++) {
 80023dc:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	@ 0x5d0
 80023e0:	3301      	adds	r3, #1
 80023e2:	f8c7 35d0 	str.w	r3, [r7, #1488]	@ 0x5d0
 80023e6:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	@ 0x5d0
 80023ea:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80023ee:	f6ff af23 	blt.w	8002238 <LIDAR_median_filter+0x74>
    }
}
 80023f2:	bf00      	nop
 80023f4:	bf00      	nop
 80023f6:	f207 57dc 	addw	r7, r7, #1500	@ 0x5dc
 80023fa:	46bd      	mov	sp, r7
 80023fc:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8002400:	4770      	bx	lr
	...

08002404 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002404:	480d      	ldr	r0, [pc, #52]	@ (800243c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002406:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002408:	f7ff faac 	bl	8001964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800240c:	480c      	ldr	r0, [pc, #48]	@ (8002440 <LoopForever+0x6>)
  ldr r1, =_edata
 800240e:	490d      	ldr	r1, [pc, #52]	@ (8002444 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002410:	4a0d      	ldr	r2, [pc, #52]	@ (8002448 <LoopForever+0xe>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002414:	e002      	b.n	800241c <LoopCopyDataInit>

08002416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800241a:	3304      	adds	r3, #4

0800241c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800241c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800241e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002420:	d3f9      	bcc.n	8002416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002422:	4a0a      	ldr	r2, [pc, #40]	@ (800244c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002424:	4c0a      	ldr	r4, [pc, #40]	@ (8002450 <LoopForever+0x16>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002428:	e001      	b.n	800242e <LoopFillZerobss>

0800242a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800242a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800242c:	3204      	adds	r2, #4

0800242e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800242e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002430:	d3fb      	bcc.n	800242a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002432:	f004 f981 	bl	8006738 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002436:	f7fe fddb 	bl	8000ff0 <main>

0800243a <LoopForever>:

LoopForever:
    b LoopForever
 800243a:	e7fe      	b.n	800243a <LoopForever>
  ldr   r0, =_estack
 800243c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002444:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002448:	08007a30 	.word	0x08007a30
  ldr r2, =_sbss
 800244c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002450:	20001c10 	.word	0x20001c10

08002454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002454:	e7fe      	b.n	8002454 <ADC1_2_IRQHandler>

08002456 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002460:	2003      	movs	r0, #3
 8002462:	f000 f95b 	bl	800271c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002466:	2000      	movs	r0, #0
 8002468:	f000 f80e 	bl	8002488 <HAL_InitTick>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	71fb      	strb	r3, [r7, #7]
 8002476:	e001      	b.n	800247c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002478:	f7ff f838 	bl	80014ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800247c:	79fb      	ldrb	r3, [r7, #7]

}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002494:	4b16      	ldr	r3, [pc, #88]	@ (80024f0 <HAL_InitTick+0x68>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d022      	beq.n	80024e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800249c:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <HAL_InitTick+0x6c>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b13      	ldr	r3, [pc, #76]	@ (80024f0 <HAL_InitTick+0x68>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80024a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 f966 	bl	8002782 <HAL_SYSTICK_Config>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10f      	bne.n	80024dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b0f      	cmp	r3, #15
 80024c0:	d809      	bhi.n	80024d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c2:	2200      	movs	r2, #0
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	f04f 30ff 	mov.w	r0, #4294967295
 80024ca:	f000 f932 	bl	8002732 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024ce:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <HAL_InitTick+0x70>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	e007      	b.n	80024e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
 80024da:	e004      	b.n	80024e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
 80024e0:	e001      	b.n	80024e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000008 	.word	0x20000008
 80024f4:	20000000 	.word	0x20000000
 80024f8:	20000004 	.word	0x20000004

080024fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002500:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <HAL_IncTick+0x1c>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b05      	ldr	r3, [pc, #20]	@ (800251c <HAL_IncTick+0x20>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4413      	add	r3, r2
 800250a:	4a03      	ldr	r2, [pc, #12]	@ (8002518 <HAL_IncTick+0x1c>)
 800250c:	6013      	str	r3, [r2, #0]
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	20001ac0 	.word	0x20001ac0
 800251c:	20000008 	.word	0x20000008

08002520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return uwTick;
 8002524:	4b03      	ldr	r3, [pc, #12]	@ (8002534 <HAL_GetTick+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20001ac0 	.word	0x20001ac0

08002538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002540:	f7ff ffee 	bl	8002520 <HAL_GetTick>
 8002544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d004      	beq.n	800255c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002552:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <HAL_Delay+0x40>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4413      	add	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800255c:	bf00      	nop
 800255e:	f7ff ffdf 	bl	8002520 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	429a      	cmp	r2, r3
 800256c:	d8f7      	bhi.n	800255e <HAL_Delay+0x26>
  {
  }
}
 800256e:	bf00      	nop
 8002570:	bf00      	nop
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000008 	.word	0x20000008

0800257c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800258c:	4b0c      	ldr	r3, [pc, #48]	@ (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002598:	4013      	ands	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ae:	4a04      	ldr	r2, [pc, #16]	@ (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	60d3      	str	r3, [r2, #12]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c8:	4b04      	ldr	r3, [pc, #16]	@ (80025dc <__NVIC_GetPriorityGrouping+0x18>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	f003 0307 	and.w	r3, r3, #7
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	db0b      	blt.n	800260a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	4907      	ldr	r1, [pc, #28]	@ (8002618 <__NVIC_EnableIRQ+0x38>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	2001      	movs	r0, #1
 8002602:	fa00 f202 	lsl.w	r2, r0, r2
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000e100 	.word	0xe000e100

0800261c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	6039      	str	r1, [r7, #0]
 8002626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	2b00      	cmp	r3, #0
 800262e:	db0a      	blt.n	8002646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	b2da      	uxtb	r2, r3
 8002634:	490c      	ldr	r1, [pc, #48]	@ (8002668 <__NVIC_SetPriority+0x4c>)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	0112      	lsls	r2, r2, #4
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	440b      	add	r3, r1
 8002640:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002644:	e00a      	b.n	800265c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4908      	ldr	r1, [pc, #32]	@ (800266c <__NVIC_SetPriority+0x50>)
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	3b04      	subs	r3, #4
 8002654:	0112      	lsls	r2, r2, #4
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	440b      	add	r3, r1
 800265a:	761a      	strb	r2, [r3, #24]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000e100 	.word	0xe000e100
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002670:	b480      	push	{r7}
 8002672:	b089      	sub	sp, #36	@ 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f1c3 0307 	rsb	r3, r3, #7
 800268a:	2b04      	cmp	r3, #4
 800268c:	bf28      	it	cs
 800268e:	2304      	movcs	r3, #4
 8002690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3304      	adds	r3, #4
 8002696:	2b06      	cmp	r3, #6
 8002698:	d902      	bls.n	80026a0 <NVIC_EncodePriority+0x30>
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3b03      	subs	r3, #3
 800269e:	e000      	b.n	80026a2 <NVIC_EncodePriority+0x32>
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	f04f 32ff 	mov.w	r2, #4294967295
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	401a      	ands	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b8:	f04f 31ff 	mov.w	r1, #4294967295
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	43d9      	mvns	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	4313      	orrs	r3, r2
         );
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3724      	adds	r7, #36	@ 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026e8:	d301      	bcc.n	80026ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ea:	2301      	movs	r3, #1
 80026ec:	e00f      	b.n	800270e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <SysTick_Config+0x40>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f6:	210f      	movs	r1, #15
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
 80026fc:	f7ff ff8e 	bl	800261c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002700:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <SysTick_Config+0x40>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002706:	4b04      	ldr	r3, [pc, #16]	@ (8002718 <SysTick_Config+0x40>)
 8002708:	2207      	movs	r2, #7
 800270a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	e000e010 	.word	0xe000e010

0800271c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ff29 	bl	800257c <__NVIC_SetPriorityGrouping>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002740:	f7ff ff40 	bl	80025c4 <__NVIC_GetPriorityGrouping>
 8002744:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	6978      	ldr	r0, [r7, #20]
 800274c:	f7ff ff90 	bl	8002670 <NVIC_EncodePriority>
 8002750:	4602      	mov	r2, r0
 8002752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff5f 	bl	800261c <__NVIC_SetPriority>
}
 800275e:	bf00      	nop
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff33 	bl	80025e0 <__NVIC_EnableIRQ>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff ffa4 	bl	80026d8 <SysTick_Config>
 8002790:	4603      	mov	r3, r0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e08d      	b.n	80028ca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	4b47      	ldr	r3, [pc, #284]	@ (80028d4 <HAL_DMA_Init+0x138>)
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d80f      	bhi.n	80027da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	4b45      	ldr	r3, [pc, #276]	@ (80028d8 <HAL_DMA_Init+0x13c>)
 80027c2:	4413      	add	r3, r2
 80027c4:	4a45      	ldr	r2, [pc, #276]	@ (80028dc <HAL_DMA_Init+0x140>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	009a      	lsls	r2, r3, #2
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a42      	ldr	r2, [pc, #264]	@ (80028e0 <HAL_DMA_Init+0x144>)
 80027d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80027d8:	e00e      	b.n	80027f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	4b40      	ldr	r3, [pc, #256]	@ (80028e4 <HAL_DMA_Init+0x148>)
 80027e2:	4413      	add	r3, r2
 80027e4:	4a3d      	ldr	r2, [pc, #244]	@ (80028dc <HAL_DMA_Init+0x140>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	009a      	lsls	r2, r3, #2
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a3c      	ldr	r2, [pc, #240]	@ (80028e8 <HAL_DMA_Init+0x14c>)
 80027f6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800280e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002812:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800281c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002828:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002834:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f9b6 	bl	8002bbc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002858:	d102      	bne.n	8002860 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002874:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d010      	beq.n	80028a0 <HAL_DMA_Init+0x104>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b04      	cmp	r3, #4
 8002884:	d80c      	bhi.n	80028a0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f9d6 	bl	8002c38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	e008      	b.n	80028b2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40020407 	.word	0x40020407
 80028d8:	bffdfff8 	.word	0xbffdfff8
 80028dc:	cccccccd 	.word	0xcccccccd
 80028e0:	40020000 	.word	0x40020000
 80028e4:	bffdfbf8 	.word	0xbffdfbf8
 80028e8:	40020400 	.word	0x40020400

080028ec <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_DMA_Start_IT+0x20>
 8002908:	2302      	movs	r3, #2
 800290a:	e066      	b.n	80029da <HAL_DMA_Start_IT+0xee>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d155      	bne.n	80029cc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0201 	bic.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68b9      	ldr	r1, [r7, #8]
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f8fb 	bl	8002b40 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 020e 	orr.w	r2, r2, #14
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	e00f      	b.n	8002984 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0204 	bic.w	r2, r2, #4
 8002972:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 020a 	orr.w	r2, r2, #10
 8002982:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d007      	beq.n	80029a2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800299c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029a0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029b8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0201 	orr.w	r2, r2, #1
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	e005      	b.n	80029d8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
 80029d6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	2204      	movs	r2, #4
 8002a04:	409a      	lsls	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d026      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x7a>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d021      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d107      	bne.n	8002a36 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0204 	bic.w	r2, r2, #4
 8002a34:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3a:	f003 021f 	and.w	r2, r3, #31
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	2104      	movs	r1, #4
 8002a44:	fa01 f202 	lsl.w	r2, r1, r2
 8002a48:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d071      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a5a:	e06c      	b.n	8002b36 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a60:	f003 031f 	and.w	r3, r3, #31
 8002a64:	2202      	movs	r2, #2
 8002a66:	409a      	lsls	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d02e      	beq.n	8002ace <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d029      	beq.n	8002ace <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10b      	bne.n	8002aa0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 020a 	bic.w	r2, r2, #10
 8002a96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa4:	f003 021f 	and.w	r2, r3, #31
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	2102      	movs	r1, #2
 8002aae:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d038      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002acc:	e033      	b.n	8002b36 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	f003 031f 	and.w	r3, r3, #31
 8002ad6:	2208      	movs	r2, #8
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d02a      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d025      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 020e 	bic.w	r2, r2, #14
 8002afa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b00:	f003 021f 	and.w	r2, r3, #31
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	2101      	movs	r1, #1
 8002b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d004      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b36:	bf00      	nop
 8002b38:	bf00      	nop
}
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b56:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d004      	beq.n	8002b6a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b68:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	f003 021f 	and.w	r2, r3, #31
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	2101      	movs	r1, #1
 8002b78:	fa01 f202 	lsl.w	r2, r1, r2
 8002b7c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2b10      	cmp	r3, #16
 8002b8c:	d108      	bne.n	8002ba0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b9e:	e007      	b.n	8002bb0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	60da      	str	r2, [r3, #12]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4b16      	ldr	r3, [pc, #88]	@ (8002c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d802      	bhi.n	8002bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002bd0:	4b15      	ldr	r3, [pc, #84]	@ (8002c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	e001      	b.n	8002bda <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002bd6:	4b15      	ldr	r3, [pc, #84]	@ (8002c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002bd8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	3b08      	subs	r3, #8
 8002be6:	4a12      	ldr	r2, [pc, #72]	@ (8002c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002be8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf4:	089b      	lsrs	r3, r3, #2
 8002bf6:	009a      	lsls	r2, r3, #2
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a0b      	ldr	r2, [pc, #44]	@ (8002c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002c06:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	2201      	movs	r2, #1
 8002c10:	409a      	lsls	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002c16:	bf00      	nop
 8002c18:	371c      	adds	r7, #28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40020407 	.word	0x40020407
 8002c28:	40020800 	.word	0x40020800
 8002c2c:	40020820 	.word	0x40020820
 8002c30:	cccccccd 	.word	0xcccccccd
 8002c34:	40020880 	.word	0x40020880

08002c38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	461a      	mov	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a08      	ldr	r2, [pc, #32]	@ (8002c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c5a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	2201      	movs	r2, #1
 8002c66:	409a      	lsls	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002c6c:	bf00      	nop
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	1000823f 	.word	0x1000823f
 8002c7c:	40020940 	.word	0x40020940

08002c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c8e:	e15a      	b.n	8002f46 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	2101      	movs	r1, #1
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 814c 	beq.w	8002f40 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d005      	beq.n	8002cc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d130      	bne.n	8002d22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	2203      	movs	r2, #3
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4013      	ands	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	091b      	lsrs	r3, r3, #4
 8002d0c:	f003 0201 	and.w	r2, r3, #1
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d017      	beq.n	8002d5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	2203      	movs	r2, #3
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4013      	ands	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d123      	bne.n	8002db2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	08da      	lsrs	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3208      	adds	r2, #8
 8002d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	220f      	movs	r2, #15
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	08da      	lsrs	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3208      	adds	r2, #8
 8002dac:	6939      	ldr	r1, [r7, #16]
 8002dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 0203 	and.w	r2, r3, #3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80a6 	beq.w	8002f40 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df4:	4b5b      	ldr	r3, [pc, #364]	@ (8002f64 <HAL_GPIO_Init+0x2e4>)
 8002df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002df8:	4a5a      	ldr	r2, [pc, #360]	@ (8002f64 <HAL_GPIO_Init+0x2e4>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e00:	4b58      	ldr	r3, [pc, #352]	@ (8002f64 <HAL_GPIO_Init+0x2e4>)
 8002e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e0c:	4a56      	ldr	r2, [pc, #344]	@ (8002f68 <HAL_GPIO_Init+0x2e8>)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	089b      	lsrs	r3, r3, #2
 8002e12:	3302      	adds	r3, #2
 8002e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	220f      	movs	r2, #15
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e36:	d01f      	beq.n	8002e78 <HAL_GPIO_Init+0x1f8>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a4c      	ldr	r2, [pc, #304]	@ (8002f6c <HAL_GPIO_Init+0x2ec>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d019      	beq.n	8002e74 <HAL_GPIO_Init+0x1f4>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a4b      	ldr	r2, [pc, #300]	@ (8002f70 <HAL_GPIO_Init+0x2f0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d013      	beq.n	8002e70 <HAL_GPIO_Init+0x1f0>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a4a      	ldr	r2, [pc, #296]	@ (8002f74 <HAL_GPIO_Init+0x2f4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00d      	beq.n	8002e6c <HAL_GPIO_Init+0x1ec>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a49      	ldr	r2, [pc, #292]	@ (8002f78 <HAL_GPIO_Init+0x2f8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d007      	beq.n	8002e68 <HAL_GPIO_Init+0x1e8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a48      	ldr	r2, [pc, #288]	@ (8002f7c <HAL_GPIO_Init+0x2fc>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d101      	bne.n	8002e64 <HAL_GPIO_Init+0x1e4>
 8002e60:	2305      	movs	r3, #5
 8002e62:	e00a      	b.n	8002e7a <HAL_GPIO_Init+0x1fa>
 8002e64:	2306      	movs	r3, #6
 8002e66:	e008      	b.n	8002e7a <HAL_GPIO_Init+0x1fa>
 8002e68:	2304      	movs	r3, #4
 8002e6a:	e006      	b.n	8002e7a <HAL_GPIO_Init+0x1fa>
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e004      	b.n	8002e7a <HAL_GPIO_Init+0x1fa>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e002      	b.n	8002e7a <HAL_GPIO_Init+0x1fa>
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <HAL_GPIO_Init+0x1fa>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	f002 0203 	and.w	r2, r2, #3
 8002e80:	0092      	lsls	r2, r2, #2
 8002e82:	4093      	lsls	r3, r2
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e8a:	4937      	ldr	r1, [pc, #220]	@ (8002f68 <HAL_GPIO_Init+0x2e8>)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	089b      	lsrs	r3, r3, #2
 8002e90:	3302      	adds	r3, #2
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e98:	4b39      	ldr	r3, [pc, #228]	@ (8002f80 <HAL_GPIO_Init+0x300>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ebc:	4a30      	ldr	r2, [pc, #192]	@ (8002f80 <HAL_GPIO_Init+0x300>)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8002f80 <HAL_GPIO_Init+0x300>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ee6:	4a26      	ldr	r2, [pc, #152]	@ (8002f80 <HAL_GPIO_Init+0x300>)
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002eec:	4b24      	ldr	r3, [pc, #144]	@ (8002f80 <HAL_GPIO_Init+0x300>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f10:	4a1b      	ldr	r2, [pc, #108]	@ (8002f80 <HAL_GPIO_Init+0x300>)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f16:	4b1a      	ldr	r3, [pc, #104]	@ (8002f80 <HAL_GPIO_Init+0x300>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4013      	ands	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f3a:	4a11      	ldr	r2, [pc, #68]	@ (8002f80 <HAL_GPIO_Init+0x300>)
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	3301      	adds	r3, #1
 8002f44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f47f ae9d 	bne.w	8002c90 <HAL_GPIO_Init+0x10>
  }
}
 8002f56:	bf00      	nop
 8002f58:	bf00      	nop
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40010000 	.word	0x40010000
 8002f6c:	48000400 	.word	0x48000400
 8002f70:	48000800 	.word	0x48000800
 8002f74:	48000c00 	.word	0x48000c00
 8002f78:	48001000 	.word	0x48001000
 8002f7c:	48001400 	.word	0x48001400
 8002f80:	40010400 	.word	0x40010400

08002f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	807b      	strh	r3, [r7, #2]
 8002f90:	4613      	mov	r3, r2
 8002f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f94:	787b      	ldrb	r3, [r7, #1]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f9a:	887a      	ldrh	r2, [r7, #2]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fa0:	e002      	b.n	8002fa8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fa2:	887a      	ldrh	r2, [r7, #2]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d141      	bne.n	8003046 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fce:	d131      	bne.n	8003034 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fd0:	4b47      	ldr	r3, [pc, #284]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fd6:	4a46      	ldr	r2, [pc, #280]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fe0:	4b43      	ldr	r3, [pc, #268]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fe8:	4a41      	ldr	r2, [pc, #260]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ff0:	4b40      	ldr	r3, [pc, #256]	@ (80030f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2232      	movs	r2, #50	@ 0x32
 8002ff6:	fb02 f303 	mul.w	r3, r2, r3
 8002ffa:	4a3f      	ldr	r2, [pc, #252]	@ (80030f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	0c9b      	lsrs	r3, r3, #18
 8003002:	3301      	adds	r3, #1
 8003004:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003006:	e002      	b.n	800300e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3b01      	subs	r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800300e:	4b38      	ldr	r3, [pc, #224]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800301a:	d102      	bne.n	8003022 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f2      	bne.n	8003008 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003022:	4b33      	ldr	r3, [pc, #204]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800302e:	d158      	bne.n	80030e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e057      	b.n	80030e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003034:	4b2e      	ldr	r3, [pc, #184]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800303a:	4a2d      	ldr	r2, [pc, #180]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003040:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003044:	e04d      	b.n	80030e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800304c:	d141      	bne.n	80030d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800304e:	4b28      	ldr	r3, [pc, #160]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800305a:	d131      	bne.n	80030c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800305c:	4b24      	ldr	r3, [pc, #144]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800305e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003062:	4a23      	ldr	r2, [pc, #140]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003068:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800306c:	4b20      	ldr	r3, [pc, #128]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003074:	4a1e      	ldr	r2, [pc, #120]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003076:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800307a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800307c:	4b1d      	ldr	r3, [pc, #116]	@ (80030f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2232      	movs	r2, #50	@ 0x32
 8003082:	fb02 f303 	mul.w	r3, r2, r3
 8003086:	4a1c      	ldr	r2, [pc, #112]	@ (80030f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003088:	fba2 2303 	umull	r2, r3, r2, r3
 800308c:	0c9b      	lsrs	r3, r3, #18
 800308e:	3301      	adds	r3, #1
 8003090:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003092:	e002      	b.n	800309a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	3b01      	subs	r3, #1
 8003098:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800309a:	4b15      	ldr	r3, [pc, #84]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030a6:	d102      	bne.n	80030ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f2      	bne.n	8003094 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030ae:	4b10      	ldr	r3, [pc, #64]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ba:	d112      	bne.n	80030e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e011      	b.n	80030e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030c0:	4b0b      	ldr	r3, [pc, #44]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030c6:	4a0a      	ldr	r2, [pc, #40]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80030d0:	e007      	b.n	80030e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030d2:	4b07      	ldr	r3, [pc, #28]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030da:	4a05      	ldr	r2, [pc, #20]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	40007000 	.word	0x40007000
 80030f4:	20000000 	.word	0x20000000
 80030f8:	431bde83 	.word	0x431bde83

080030fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003100:	4b05      	ldr	r3, [pc, #20]	@ (8003118 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4a04      	ldr	r2, [pc, #16]	@ (8003118 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003106:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800310a:	6093      	str	r3, [r2, #8]
}
 800310c:	bf00      	nop
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40007000 	.word	0x40007000

0800311c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e2fe      	b.n	800372c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d075      	beq.n	8003226 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800313a:	4b97      	ldr	r3, [pc, #604]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003144:	4b94      	ldr	r3, [pc, #592]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b0c      	cmp	r3, #12
 8003152:	d102      	bne.n	800315a <HAL_RCC_OscConfig+0x3e>
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b03      	cmp	r3, #3
 8003158:	d002      	beq.n	8003160 <HAL_RCC_OscConfig+0x44>
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2b08      	cmp	r3, #8
 800315e:	d10b      	bne.n	8003178 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	4b8d      	ldr	r3, [pc, #564]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d05b      	beq.n	8003224 <HAL_RCC_OscConfig+0x108>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d157      	bne.n	8003224 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e2d9      	b.n	800372c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003180:	d106      	bne.n	8003190 <HAL_RCC_OscConfig+0x74>
 8003182:	4b85      	ldr	r3, [pc, #532]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a84      	ldr	r2, [pc, #528]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e01d      	b.n	80031cc <HAL_RCC_OscConfig+0xb0>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x98>
 800319a:	4b7f      	ldr	r3, [pc, #508]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a7e      	ldr	r2, [pc, #504]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 80031a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	4b7c      	ldr	r3, [pc, #496]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a7b      	ldr	r2, [pc, #492]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e00b      	b.n	80031cc <HAL_RCC_OscConfig+0xb0>
 80031b4:	4b78      	ldr	r3, [pc, #480]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a77      	ldr	r2, [pc, #476]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 80031ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	4b75      	ldr	r3, [pc, #468]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a74      	ldr	r2, [pc, #464]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 80031c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d013      	beq.n	80031fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7ff f9a4 	bl	8002520 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031dc:	f7ff f9a0 	bl	8002520 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	@ 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e29e      	b.n	800372c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0xc0>
 80031fa:	e014      	b.n	8003226 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7ff f990 	bl	8002520 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003204:	f7ff f98c 	bl	8002520 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	@ 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e28a      	b.n	800372c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003216:	4b60      	ldr	r3, [pc, #384]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0xe8>
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d075      	beq.n	800331e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003232:	4b59      	ldr	r3, [pc, #356]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800323c:	4b56      	ldr	r3, [pc, #344]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	2b0c      	cmp	r3, #12
 800324a:	d102      	bne.n	8003252 <HAL_RCC_OscConfig+0x136>
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d002      	beq.n	8003258 <HAL_RCC_OscConfig+0x13c>
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	2b04      	cmp	r3, #4
 8003256:	d11f      	bne.n	8003298 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003258:	4b4f      	ldr	r3, [pc, #316]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_RCC_OscConfig+0x154>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e25d      	b.n	800372c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003270:	4b49      	ldr	r3, [pc, #292]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	061b      	lsls	r3, r3, #24
 800327e:	4946      	ldr	r1, [pc, #280]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 8003280:	4313      	orrs	r3, r2
 8003282:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003284:	4b45      	ldr	r3, [pc, #276]	@ (800339c <HAL_RCC_OscConfig+0x280>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff f8fd 	bl	8002488 <HAL_InitTick>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d043      	beq.n	800331c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e249      	b.n	800372c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d023      	beq.n	80032e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a0:	4b3d      	ldr	r3, [pc, #244]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a3c      	ldr	r2, [pc, #240]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 80032a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ac:	f7ff f938 	bl	8002520 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b4:	f7ff f934 	bl	8002520 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e232      	b.n	800372c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032c6:	4b34      	ldr	r3, [pc, #208]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d2:	4b31      	ldr	r3, [pc, #196]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	061b      	lsls	r3, r3, #24
 80032e0:	492d      	ldr	r1, [pc, #180]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	604b      	str	r3, [r1, #4]
 80032e6:	e01a      	b.n	800331e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 80032ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7ff f914 	bl	8002520 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032fc:	f7ff f910 	bl	8002520 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e20e      	b.n	800372c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800330e:	4b22      	ldr	r3, [pc, #136]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x1e0>
 800331a:	e000      	b.n	800331e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800331c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d041      	beq.n	80033ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d01c      	beq.n	800336c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003332:	4b19      	ldr	r3, [pc, #100]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 8003334:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003338:	4a17      	ldr	r2, [pc, #92]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003342:	f7ff f8ed 	bl	8002520 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800334a:	f7ff f8e9 	bl	8002520 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e1e7      	b.n	800372c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800335c:	4b0e      	ldr	r3, [pc, #56]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 800335e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0ef      	beq.n	800334a <HAL_RCC_OscConfig+0x22e>
 800336a:	e020      	b.n	80033ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800336c:	4b0a      	ldr	r3, [pc, #40]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 800336e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003372:	4a09      	ldr	r2, [pc, #36]	@ (8003398 <HAL_RCC_OscConfig+0x27c>)
 8003374:	f023 0301 	bic.w	r3, r3, #1
 8003378:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337c:	f7ff f8d0 	bl	8002520 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003382:	e00d      	b.n	80033a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003384:	f7ff f8cc 	bl	8002520 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d906      	bls.n	80033a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e1ca      	b.n	800372c <HAL_RCC_OscConfig+0x610>
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000
 800339c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033a0:	4b8c      	ldr	r3, [pc, #560]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 80033a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1ea      	bne.n	8003384 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80a6 	beq.w	8003508 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033bc:	2300      	movs	r3, #0
 80033be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033c0:	4b84      	ldr	r3, [pc, #528]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 80033c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_OscConfig+0x2b4>
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <HAL_RCC_OscConfig+0x2b6>
 80033d0:	2300      	movs	r3, #0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00d      	beq.n	80033f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d6:	4b7f      	ldr	r3, [pc, #508]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 80033d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033da:	4a7e      	ldr	r2, [pc, #504]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 80033dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80033e2:	4b7c      	ldr	r3, [pc, #496]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 80033e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80033ee:	2301      	movs	r3, #1
 80033f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f2:	4b79      	ldr	r3, [pc, #484]	@ (80035d8 <HAL_RCC_OscConfig+0x4bc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d118      	bne.n	8003430 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033fe:	4b76      	ldr	r3, [pc, #472]	@ (80035d8 <HAL_RCC_OscConfig+0x4bc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a75      	ldr	r2, [pc, #468]	@ (80035d8 <HAL_RCC_OscConfig+0x4bc>)
 8003404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340a:	f7ff f889 	bl	8002520 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003412:	f7ff f885 	bl	8002520 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e183      	b.n	800372c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003424:	4b6c      	ldr	r3, [pc, #432]	@ (80035d8 <HAL_RCC_OscConfig+0x4bc>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d108      	bne.n	800344a <HAL_RCC_OscConfig+0x32e>
 8003438:	4b66      	ldr	r3, [pc, #408]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343e:	4a65      	ldr	r2, [pc, #404]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003448:	e024      	b.n	8003494 <HAL_RCC_OscConfig+0x378>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b05      	cmp	r3, #5
 8003450:	d110      	bne.n	8003474 <HAL_RCC_OscConfig+0x358>
 8003452:	4b60      	ldr	r3, [pc, #384]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 8003454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003458:	4a5e      	ldr	r2, [pc, #376]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 800345a:	f043 0304 	orr.w	r3, r3, #4
 800345e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003462:	4b5c      	ldr	r3, [pc, #368]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003468:	4a5a      	ldr	r2, [pc, #360]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003472:	e00f      	b.n	8003494 <HAL_RCC_OscConfig+0x378>
 8003474:	4b57      	ldr	r3, [pc, #348]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347a:	4a56      	ldr	r2, [pc, #344]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 800347c:	f023 0301 	bic.w	r3, r3, #1
 8003480:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003484:	4b53      	ldr	r3, [pc, #332]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348a:	4a52      	ldr	r2, [pc, #328]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 800348c:	f023 0304 	bic.w	r3, r3, #4
 8003490:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d016      	beq.n	80034ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349c:	f7ff f840 	bl	8002520 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a4:	f7ff f83c 	bl	8002520 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e138      	b.n	800372c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ba:	4b46      	ldr	r3, [pc, #280]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0ed      	beq.n	80034a4 <HAL_RCC_OscConfig+0x388>
 80034c8:	e015      	b.n	80034f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ca:	f7ff f829 	bl	8002520 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034d0:	e00a      	b.n	80034e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d2:	f7ff f825 	bl	8002520 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e121      	b.n	800372c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034e8:	4b3a      	ldr	r3, [pc, #232]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1ed      	bne.n	80034d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034f6:	7ffb      	ldrb	r3, [r7, #31]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d105      	bne.n	8003508 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fc:	4b35      	ldr	r3, [pc, #212]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003500:	4a34      	ldr	r2, [pc, #208]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 8003502:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003506:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b00      	cmp	r3, #0
 8003512:	d03c      	beq.n	800358e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01c      	beq.n	8003556 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800351c:	4b2d      	ldr	r3, [pc, #180]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 800351e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003522:	4a2c      	ldr	r2, [pc, #176]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352c:	f7fe fff8 	bl	8002520 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003534:	f7fe fff4 	bl	8002520 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e0f2      	b.n	800372c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003546:	4b23      	ldr	r3, [pc, #140]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 8003548:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0ef      	beq.n	8003534 <HAL_RCC_OscConfig+0x418>
 8003554:	e01b      	b.n	800358e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003556:	4b1f      	ldr	r3, [pc, #124]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 8003558:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800355c:	4a1d      	ldr	r2, [pc, #116]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 800355e:	f023 0301 	bic.w	r3, r3, #1
 8003562:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003566:	f7fe ffdb 	bl	8002520 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800356e:	f7fe ffd7 	bl	8002520 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e0d5      	b.n	800372c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003580:	4b14      	ldr	r3, [pc, #80]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 8003582:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1ef      	bne.n	800356e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80c9 	beq.w	800372a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003598:	4b0e      	ldr	r3, [pc, #56]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 030c 	and.w	r3, r3, #12
 80035a0:	2b0c      	cmp	r3, #12
 80035a2:	f000 8083 	beq.w	80036ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d15e      	bne.n	800366c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ae:	4b09      	ldr	r3, [pc, #36]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a08      	ldr	r2, [pc, #32]	@ (80035d4 <HAL_RCC_OscConfig+0x4b8>)
 80035b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ba:	f7fe ffb1 	bl	8002520 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c0:	e00c      	b.n	80035dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c2:	f7fe ffad 	bl	8002520 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d905      	bls.n	80035dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e0ab      	b.n	800372c <HAL_RCC_OscConfig+0x610>
 80035d4:	40021000 	.word	0x40021000
 80035d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035dc:	4b55      	ldr	r3, [pc, #340]	@ (8003734 <HAL_RCC_OscConfig+0x618>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1ec      	bne.n	80035c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e8:	4b52      	ldr	r3, [pc, #328]	@ (8003734 <HAL_RCC_OscConfig+0x618>)
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	4b52      	ldr	r3, [pc, #328]	@ (8003738 <HAL_RCC_OscConfig+0x61c>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6a11      	ldr	r1, [r2, #32]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035f8:	3a01      	subs	r2, #1
 80035fa:	0112      	lsls	r2, r2, #4
 80035fc:	4311      	orrs	r1, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003602:	0212      	lsls	r2, r2, #8
 8003604:	4311      	orrs	r1, r2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800360a:	0852      	lsrs	r2, r2, #1
 800360c:	3a01      	subs	r2, #1
 800360e:	0552      	lsls	r2, r2, #21
 8003610:	4311      	orrs	r1, r2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003616:	0852      	lsrs	r2, r2, #1
 8003618:	3a01      	subs	r2, #1
 800361a:	0652      	lsls	r2, r2, #25
 800361c:	4311      	orrs	r1, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003622:	06d2      	lsls	r2, r2, #27
 8003624:	430a      	orrs	r2, r1
 8003626:	4943      	ldr	r1, [pc, #268]	@ (8003734 <HAL_RCC_OscConfig+0x618>)
 8003628:	4313      	orrs	r3, r2
 800362a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800362c:	4b41      	ldr	r3, [pc, #260]	@ (8003734 <HAL_RCC_OscConfig+0x618>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a40      	ldr	r2, [pc, #256]	@ (8003734 <HAL_RCC_OscConfig+0x618>)
 8003632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003636:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003638:	4b3e      	ldr	r3, [pc, #248]	@ (8003734 <HAL_RCC_OscConfig+0x618>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a3d      	ldr	r2, [pc, #244]	@ (8003734 <HAL_RCC_OscConfig+0x618>)
 800363e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003642:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fe ff6c 	bl	8002520 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364c:	f7fe ff68 	bl	8002520 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e066      	b.n	800372c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365e:	4b35      	ldr	r3, [pc, #212]	@ (8003734 <HAL_RCC_OscConfig+0x618>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0x530>
 800366a:	e05e      	b.n	800372a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366c:	4b31      	ldr	r3, [pc, #196]	@ (8003734 <HAL_RCC_OscConfig+0x618>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a30      	ldr	r2, [pc, #192]	@ (8003734 <HAL_RCC_OscConfig+0x618>)
 8003672:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fe ff52 	bl	8002520 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003680:	f7fe ff4e 	bl	8002520 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e04c      	b.n	800372c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003692:	4b28      	ldr	r3, [pc, #160]	@ (8003734 <HAL_RCC_OscConfig+0x618>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800369e:	4b25      	ldr	r3, [pc, #148]	@ (8003734 <HAL_RCC_OscConfig+0x618>)
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	4924      	ldr	r1, [pc, #144]	@ (8003734 <HAL_RCC_OscConfig+0x618>)
 80036a4:	4b25      	ldr	r3, [pc, #148]	@ (800373c <HAL_RCC_OscConfig+0x620>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	60cb      	str	r3, [r1, #12]
 80036aa:	e03e      	b.n	800372a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e039      	b.n	800372c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80036b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003734 <HAL_RCC_OscConfig+0x618>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f003 0203 	and.w	r2, r3, #3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d12c      	bne.n	8003726 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	3b01      	subs	r3, #1
 80036d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036da:	429a      	cmp	r2, r3
 80036dc:	d123      	bne.n	8003726 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d11b      	bne.n	8003726 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d113      	bne.n	8003726 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003708:	085b      	lsrs	r3, r3, #1
 800370a:	3b01      	subs	r3, #1
 800370c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800370e:	429a      	cmp	r2, r3
 8003710:	d109      	bne.n	8003726 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800371c:	085b      	lsrs	r3, r3, #1
 800371e:	3b01      	subs	r3, #1
 8003720:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003722:	429a      	cmp	r2, r3
 8003724:	d001      	beq.n	800372a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3720      	adds	r7, #32
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40021000 	.word	0x40021000
 8003738:	019f800c 	.word	0x019f800c
 800373c:	feeefffc 	.word	0xfeeefffc

08003740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e11e      	b.n	8003996 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003758:	4b91      	ldr	r3, [pc, #580]	@ (80039a0 <HAL_RCC_ClockConfig+0x260>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d910      	bls.n	8003788 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b8e      	ldr	r3, [pc, #568]	@ (80039a0 <HAL_RCC_ClockConfig+0x260>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 020f 	bic.w	r2, r3, #15
 800376e:	498c      	ldr	r1, [pc, #560]	@ (80039a0 <HAL_RCC_ClockConfig+0x260>)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	4313      	orrs	r3, r2
 8003774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b8a      	ldr	r3, [pc, #552]	@ (80039a0 <HAL_RCC_ClockConfig+0x260>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e106      	b.n	8003996 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d073      	beq.n	800387c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d129      	bne.n	80037f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379c:	4b81      	ldr	r3, [pc, #516]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0f4      	b.n	8003996 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80037ac:	f000 f99e 	bl	8003aec <RCC_GetSysClockFreqFromPLLSource>
 80037b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4a7c      	ldr	r2, [pc, #496]	@ (80039a8 <HAL_RCC_ClockConfig+0x268>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d93f      	bls.n	800383a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037ba:	4b7a      	ldr	r3, [pc, #488]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d009      	beq.n	80037da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d033      	beq.n	800383a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d12f      	bne.n	800383a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037da:	4b72      	ldr	r3, [pc, #456]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037e2:	4a70      	ldr	r2, [pc, #448]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 80037e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037ea:	2380      	movs	r3, #128	@ 0x80
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	e024      	b.n	800383a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d107      	bne.n	8003808 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037f8:	4b6a      	ldr	r3, [pc, #424]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d109      	bne.n	8003818 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0c6      	b.n	8003996 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003808:	4b66      	ldr	r3, [pc, #408]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0be      	b.n	8003996 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003818:	f000 f8ce 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 800381c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4a61      	ldr	r2, [pc, #388]	@ (80039a8 <HAL_RCC_ClockConfig+0x268>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d909      	bls.n	800383a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003826:	4b5f      	ldr	r3, [pc, #380]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800382e:	4a5d      	ldr	r2, [pc, #372]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 8003830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003834:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003836:	2380      	movs	r3, #128	@ 0x80
 8003838:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800383a:	4b5a      	ldr	r3, [pc, #360]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f023 0203 	bic.w	r2, r3, #3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4957      	ldr	r1, [pc, #348]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 8003848:	4313      	orrs	r3, r2
 800384a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800384c:	f7fe fe68 	bl	8002520 <HAL_GetTick>
 8003850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003852:	e00a      	b.n	800386a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003854:	f7fe fe64 	bl	8002520 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e095      	b.n	8003996 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386a:	4b4e      	ldr	r3, [pc, #312]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 020c 	and.w	r2, r3, #12
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	429a      	cmp	r2, r3
 800387a:	d1eb      	bne.n	8003854 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d023      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003894:	4b43      	ldr	r3, [pc, #268]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4a42      	ldr	r2, [pc, #264]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 800389a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800389e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d007      	beq.n	80038bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80038ac:	4b3d      	ldr	r3, [pc, #244]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80038b4:	4a3b      	ldr	r2, [pc, #236]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 80038b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038bc:	4b39      	ldr	r3, [pc, #228]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4936      	ldr	r1, [pc, #216]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2b80      	cmp	r3, #128	@ 0x80
 80038d4:	d105      	bne.n	80038e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80038d6:	4b33      	ldr	r3, [pc, #204]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	4a32      	ldr	r2, [pc, #200]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 80038dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038e2:	4b2f      	ldr	r3, [pc, #188]	@ (80039a0 <HAL_RCC_ClockConfig+0x260>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d21d      	bcs.n	800392c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f0:	4b2b      	ldr	r3, [pc, #172]	@ (80039a0 <HAL_RCC_ClockConfig+0x260>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f023 020f 	bic.w	r2, r3, #15
 80038f8:	4929      	ldr	r1, [pc, #164]	@ (80039a0 <HAL_RCC_ClockConfig+0x260>)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003900:	f7fe fe0e 	bl	8002520 <HAL_GetTick>
 8003904:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003906:	e00a      	b.n	800391e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003908:	f7fe fe0a 	bl	8002520 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003916:	4293      	cmp	r3, r2
 8003918:	d901      	bls.n	800391e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e03b      	b.n	8003996 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391e:	4b20      	ldr	r3, [pc, #128]	@ (80039a0 <HAL_RCC_ClockConfig+0x260>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d1ed      	bne.n	8003908 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003938:	4b1a      	ldr	r3, [pc, #104]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4917      	ldr	r1, [pc, #92]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 8003946:	4313      	orrs	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003956:	4b13      	ldr	r3, [pc, #76]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	490f      	ldr	r1, [pc, #60]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 8003966:	4313      	orrs	r3, r2
 8003968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800396a:	f000 f825 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 800396e:	4602      	mov	r2, r0
 8003970:	4b0c      	ldr	r3, [pc, #48]	@ (80039a4 <HAL_RCC_ClockConfig+0x264>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	490c      	ldr	r1, [pc, #48]	@ (80039ac <HAL_RCC_ClockConfig+0x26c>)
 800397c:	5ccb      	ldrb	r3, [r1, r3]
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	fa22 f303 	lsr.w	r3, r2, r3
 8003986:	4a0a      	ldr	r2, [pc, #40]	@ (80039b0 <HAL_RCC_ClockConfig+0x270>)
 8003988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800398a:	4b0a      	ldr	r3, [pc, #40]	@ (80039b4 <HAL_RCC_ClockConfig+0x274>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe fd7a 	bl	8002488 <HAL_InitTick>
 8003994:	4603      	mov	r3, r0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40022000 	.word	0x40022000
 80039a4:	40021000 	.word	0x40021000
 80039a8:	04c4b400 	.word	0x04c4b400
 80039ac:	08007968 	.word	0x08007968
 80039b0:	20000000 	.word	0x20000000
 80039b4:	20000004 	.word	0x20000004

080039b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039be:	4b2c      	ldr	r3, [pc, #176]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d102      	bne.n	80039d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	e047      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80039d0:	4b27      	ldr	r3, [pc, #156]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d102      	bne.n	80039e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039dc:	4b26      	ldr	r3, [pc, #152]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	e03e      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80039e2:	4b23      	ldr	r3, [pc, #140]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b0c      	cmp	r3, #12
 80039ec:	d136      	bne.n	8003a5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039ee:	4b20      	ldr	r3, [pc, #128]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	091b      	lsrs	r3, r3, #4
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	3301      	adds	r3, #1
 8003a04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d10c      	bne.n	8003a26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a14:	4a16      	ldr	r2, [pc, #88]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a16:	68d2      	ldr	r2, [r2, #12]
 8003a18:	0a12      	lsrs	r2, r2, #8
 8003a1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	617b      	str	r3, [r7, #20]
      break;
 8003a24:	e00c      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a26:	4a13      	ldr	r2, [pc, #76]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	4a10      	ldr	r2, [pc, #64]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a30:	68d2      	ldr	r2, [r2, #12]
 8003a32:	0a12      	lsrs	r2, r2, #8
 8003a34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a38:	fb02 f303 	mul.w	r3, r2, r3
 8003a3c:	617b      	str	r3, [r7, #20]
      break;
 8003a3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a40:	4b0b      	ldr	r3, [pc, #44]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	0e5b      	lsrs	r3, r3, #25
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	e001      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a60:	693b      	ldr	r3, [r7, #16]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40021000 	.word	0x40021000
 8003a74:	00f42400 	.word	0x00f42400
 8003a78:	016e3600 	.word	0x016e3600

08003a7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a80:	4b03      	ldr	r3, [pc, #12]	@ (8003a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a82:	681b      	ldr	r3, [r3, #0]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000000 	.word	0x20000000

08003a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a98:	f7ff fff0 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	0a1b      	lsrs	r3, r3, #8
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	4904      	ldr	r1, [pc, #16]	@ (8003abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003aaa:	5ccb      	ldrb	r3, [r1, r3]
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	08007978 	.word	0x08007978

08003ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ac4:	f7ff ffda 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4b06      	ldr	r3, [pc, #24]	@ (8003ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	0adb      	lsrs	r3, r3, #11
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	4904      	ldr	r1, [pc, #16]	@ (8003ae8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ad6:	5ccb      	ldrb	r3, [r1, r3]
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	08007978 	.word	0x08007978

08003aec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003af2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003afc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	3301      	adds	r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d10c      	bne.n	8003b2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b10:	4a17      	ldr	r2, [pc, #92]	@ (8003b70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b18:	4a14      	ldr	r2, [pc, #80]	@ (8003b6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b1a:	68d2      	ldr	r2, [r2, #12]
 8003b1c:	0a12      	lsrs	r2, r2, #8
 8003b1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	617b      	str	r3, [r7, #20]
    break;
 8003b28:	e00c      	b.n	8003b44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b2a:	4a12      	ldr	r2, [pc, #72]	@ (8003b74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b32:	4a0e      	ldr	r2, [pc, #56]	@ (8003b6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b34:	68d2      	ldr	r2, [r2, #12]
 8003b36:	0a12      	lsrs	r2, r2, #8
 8003b38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b3c:	fb02 f303 	mul.w	r3, r2, r3
 8003b40:	617b      	str	r3, [r7, #20]
    break;
 8003b42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b44:	4b09      	ldr	r3, [pc, #36]	@ (8003b6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	0e5b      	lsrs	r3, r3, #25
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	3301      	adds	r3, #1
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b5e:	687b      	ldr	r3, [r7, #4]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	371c      	adds	r7, #28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	016e3600 	.word	0x016e3600
 8003b74:	00f42400 	.word	0x00f42400

08003b78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b80:	2300      	movs	r3, #0
 8003b82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b84:	2300      	movs	r3, #0
 8003b86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 8098 	beq.w	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b96:	2300      	movs	r3, #0
 8003b98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b9a:	4b43      	ldr	r3, [pc, #268]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10d      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba6:	4b40      	ldr	r3, [pc, #256]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003baa:	4a3f      	ldr	r2, [pc, #252]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bb2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a39      	ldr	r2, [pc, #228]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bce:	f7fe fca7 	bl	8002520 <HAL_GetTick>
 8003bd2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bd4:	e009      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd6:	f7fe fca3 	bl	8002520 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d902      	bls.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	74fb      	strb	r3, [r7, #19]
        break;
 8003be8:	e005      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bea:	4b30      	ldr	r3, [pc, #192]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0ef      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003bf6:	7cfb      	ldrb	r3, [r7, #19]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d159      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c06:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01e      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d019      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c18:	4b23      	ldr	r3, [pc, #140]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c24:	4b20      	ldr	r3, [pc, #128]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c34:	4b1c      	ldr	r3, [pc, #112]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c44:	4a18      	ldr	r2, [pc, #96]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d016      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c56:	f7fe fc63 	bl	8002520 <HAL_GetTick>
 8003c5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c5c:	e00b      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5e:	f7fe fc5f 	bl	8002520 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d902      	bls.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	74fb      	strb	r3, [r7, #19]
            break;
 8003c74:	e006      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c76:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0ec      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c84:	7cfb      	ldrb	r3, [r7, #19]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10b      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c8a:	4b07      	ldr	r3, [pc, #28]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c98:	4903      	ldr	r1, [pc, #12]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ca2:	7cfb      	ldrb	r3, [r7, #19]
 8003ca4:	74bb      	strb	r3, [r7, #18]
 8003ca6:	e005      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cb4:	7c7b      	ldrb	r3, [r7, #17]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d105      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cba:	4ba6      	ldr	r3, [pc, #664]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cbe:	4aa5      	ldr	r2, [pc, #660]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cc4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cd2:	4ba0      	ldr	r3, [pc, #640]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd8:	f023 0203 	bic.w	r2, r3, #3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	499c      	ldr	r1, [pc, #624]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cf4:	4b97      	ldr	r3, [pc, #604]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfa:	f023 020c 	bic.w	r2, r3, #12
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	4994      	ldr	r1, [pc, #592]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d16:	4b8f      	ldr	r3, [pc, #572]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	498b      	ldr	r1, [pc, #556]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d38:	4b86      	ldr	r3, [pc, #536]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	4983      	ldr	r1, [pc, #524]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d5a:	4b7e      	ldr	r3, [pc, #504]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d60:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	497a      	ldr	r1, [pc, #488]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d7c:	4b75      	ldr	r3, [pc, #468]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d82:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	4972      	ldr	r1, [pc, #456]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d9e:	4b6d      	ldr	r3, [pc, #436]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	4969      	ldr	r1, [pc, #420]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dc0:	4b64      	ldr	r3, [pc, #400]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	4961      	ldr	r1, [pc, #388]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003de2:	4b5c      	ldr	r3, [pc, #368]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	4958      	ldr	r1, [pc, #352]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d015      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e04:	4b53      	ldr	r3, [pc, #332]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e12:	4950      	ldr	r1, [pc, #320]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e22:	d105      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e24:	4b4b      	ldr	r3, [pc, #300]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4a4a      	ldr	r2, [pc, #296]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e2e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d015      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e3c:	4b45      	ldr	r3, [pc, #276]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4a:	4942      	ldr	r1, [pc, #264]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e5a:	d105      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e5c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4a3c      	ldr	r2, [pc, #240]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e66:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d015      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e74:	4b37      	ldr	r3, [pc, #220]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e82:	4934      	ldr	r1, [pc, #208]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e92:	d105      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e94:	4b2f      	ldr	r3, [pc, #188]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4a2e      	ldr	r2, [pc, #184]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e9e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d015      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003eac:	4b29      	ldr	r3, [pc, #164]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eba:	4926      	ldr	r1, [pc, #152]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eca:	d105      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ecc:	4b21      	ldr	r3, [pc, #132]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4a20      	ldr	r2, [pc, #128]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ed6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d015      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef2:	4918      	ldr	r1, [pc, #96]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f02:	d105      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f04:	4b13      	ldr	r3, [pc, #76]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	4a12      	ldr	r2, [pc, #72]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d015      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f22:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f2a:	490a      	ldr	r1, [pc, #40]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f3a:	d105      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f3c:	4b05      	ldr	r3, [pc, #20]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4a04      	ldr	r2, [pc, #16]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f48:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000

08003f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e049      	b.n	8003ffe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d106      	bne.n	8003f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7fd fad8 	bl	8001534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3304      	adds	r3, #4
 8003f94:	4619      	mov	r1, r3
 8003f96:	4610      	mov	r0, r2
 8003f98:	f000 faa4 	bl	80044e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b082      	sub	sp, #8
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e049      	b.n	80040ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d106      	bne.n	8004032 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f841 	bl	80040b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2202      	movs	r2, #2
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3304      	adds	r3, #4
 8004042:	4619      	mov	r1, r3
 8004044:	4610      	mov	r0, r2
 8004046:	f000 fa4d 	bl	80044e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e0ff      	b.n	80042e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b14      	cmp	r3, #20
 80040f2:	f200 80f0 	bhi.w	80042d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80040f6:	a201      	add	r2, pc, #4	@ (adr r2, 80040fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fc:	08004151 	.word	0x08004151
 8004100:	080042d7 	.word	0x080042d7
 8004104:	080042d7 	.word	0x080042d7
 8004108:	080042d7 	.word	0x080042d7
 800410c:	08004191 	.word	0x08004191
 8004110:	080042d7 	.word	0x080042d7
 8004114:	080042d7 	.word	0x080042d7
 8004118:	080042d7 	.word	0x080042d7
 800411c:	080041d3 	.word	0x080041d3
 8004120:	080042d7 	.word	0x080042d7
 8004124:	080042d7 	.word	0x080042d7
 8004128:	080042d7 	.word	0x080042d7
 800412c:	08004213 	.word	0x08004213
 8004130:	080042d7 	.word	0x080042d7
 8004134:	080042d7 	.word	0x080042d7
 8004138:	080042d7 	.word	0x080042d7
 800413c:	08004255 	.word	0x08004255
 8004140:	080042d7 	.word	0x080042d7
 8004144:	080042d7 	.word	0x080042d7
 8004148:	080042d7 	.word	0x080042d7
 800414c:	08004295 	.word	0x08004295
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fa60 	bl	800461c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0208 	orr.w	r2, r2, #8
 800416a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0204 	bic.w	r2, r2, #4
 800417a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6999      	ldr	r1, [r3, #24]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	619a      	str	r2, [r3, #24]
      break;
 800418e:	e0a5      	b.n	80042dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68b9      	ldr	r1, [r7, #8]
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fad0 	bl	800473c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6999      	ldr	r1, [r3, #24]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	021a      	lsls	r2, r3, #8
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	619a      	str	r2, [r3, #24]
      break;
 80041d0:	e084      	b.n	80042dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68b9      	ldr	r1, [r7, #8]
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fb39 	bl	8004850 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69da      	ldr	r2, [r3, #28]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0208 	orr.w	r2, r2, #8
 80041ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69da      	ldr	r2, [r3, #28]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0204 	bic.w	r2, r2, #4
 80041fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69d9      	ldr	r1, [r3, #28]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	61da      	str	r2, [r3, #28]
      break;
 8004210:	e064      	b.n	80042dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	4618      	mov	r0, r3
 800421a:	f000 fba1 	bl	8004960 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69da      	ldr	r2, [r3, #28]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800422c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69da      	ldr	r2, [r3, #28]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800423c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69d9      	ldr	r1, [r3, #28]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	021a      	lsls	r2, r3, #8
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	61da      	str	r2, [r3, #28]
      break;
 8004252:	e043      	b.n	80042dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fc0a 	bl	8004a74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0208 	orr.w	r2, r2, #8
 800426e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0204 	bic.w	r2, r2, #4
 800427e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004292:	e023      	b.n	80042dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68b9      	ldr	r1, [r7, #8]
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fc4e 	bl	8004b3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042be:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	021a      	lsls	r2, r3, #8
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80042d4:	e002      	b.n	80042dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	75fb      	strb	r3, [r7, #23]
      break;
 80042da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop

080042f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_TIM_ConfigClockSource+0x1c>
 8004308:	2302      	movs	r3, #2
 800430a:	e0de      	b.n	80044ca <HAL_TIM_ConfigClockSource+0x1da>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800432a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800432e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a63      	ldr	r2, [pc, #396]	@ (80044d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	f000 80a9 	beq.w	800449e <HAL_TIM_ConfigClockSource+0x1ae>
 800434c:	4a61      	ldr	r2, [pc, #388]	@ (80044d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	f200 80ae 	bhi.w	80044b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004354:	4a60      	ldr	r2, [pc, #384]	@ (80044d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	f000 80a1 	beq.w	800449e <HAL_TIM_ConfigClockSource+0x1ae>
 800435c:	4a5e      	ldr	r2, [pc, #376]	@ (80044d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	f200 80a6 	bhi.w	80044b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004364:	4a5d      	ldr	r2, [pc, #372]	@ (80044dc <HAL_TIM_ConfigClockSource+0x1ec>)
 8004366:	4293      	cmp	r3, r2
 8004368:	f000 8099 	beq.w	800449e <HAL_TIM_ConfigClockSource+0x1ae>
 800436c:	4a5b      	ldr	r2, [pc, #364]	@ (80044dc <HAL_TIM_ConfigClockSource+0x1ec>)
 800436e:	4293      	cmp	r3, r2
 8004370:	f200 809e 	bhi.w	80044b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004374:	4a5a      	ldr	r2, [pc, #360]	@ (80044e0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	f000 8091 	beq.w	800449e <HAL_TIM_ConfigClockSource+0x1ae>
 800437c:	4a58      	ldr	r2, [pc, #352]	@ (80044e0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	f200 8096 	bhi.w	80044b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004384:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004388:	f000 8089 	beq.w	800449e <HAL_TIM_ConfigClockSource+0x1ae>
 800438c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004390:	f200 808e 	bhi.w	80044b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004394:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004398:	d03e      	beq.n	8004418 <HAL_TIM_ConfigClockSource+0x128>
 800439a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800439e:	f200 8087 	bhi.w	80044b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a6:	f000 8086 	beq.w	80044b6 <HAL_TIM_ConfigClockSource+0x1c6>
 80043aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ae:	d87f      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043b0:	2b70      	cmp	r3, #112	@ 0x70
 80043b2:	d01a      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0xfa>
 80043b4:	2b70      	cmp	r3, #112	@ 0x70
 80043b6:	d87b      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043b8:	2b60      	cmp	r3, #96	@ 0x60
 80043ba:	d050      	beq.n	800445e <HAL_TIM_ConfigClockSource+0x16e>
 80043bc:	2b60      	cmp	r3, #96	@ 0x60
 80043be:	d877      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043c0:	2b50      	cmp	r3, #80	@ 0x50
 80043c2:	d03c      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x14e>
 80043c4:	2b50      	cmp	r3, #80	@ 0x50
 80043c6:	d873      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043c8:	2b40      	cmp	r3, #64	@ 0x40
 80043ca:	d058      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x18e>
 80043cc:	2b40      	cmp	r3, #64	@ 0x40
 80043ce:	d86f      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043d0:	2b30      	cmp	r3, #48	@ 0x30
 80043d2:	d064      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x1ae>
 80043d4:	2b30      	cmp	r3, #48	@ 0x30
 80043d6:	d86b      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d060      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x1ae>
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d867      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d05c      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x1ae>
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d05a      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x1ae>
 80043e8:	e062      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043fa:	f000 fc81 	bl	8004d00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800440c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	609a      	str	r2, [r3, #8]
      break;
 8004416:	e04f      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004428:	f000 fc6a 	bl	8004d00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800443a:	609a      	str	r2, [r3, #8]
      break;
 800443c:	e03c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800444a:	461a      	mov	r2, r3
 800444c:	f000 fbdc 	bl	8004c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2150      	movs	r1, #80	@ 0x50
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fc35 	bl	8004cc6 <TIM_ITRx_SetConfig>
      break;
 800445c:	e02c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800446a:	461a      	mov	r2, r3
 800446c:	f000 fbfb 	bl	8004c66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2160      	movs	r1, #96	@ 0x60
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fc25 	bl	8004cc6 <TIM_ITRx_SetConfig>
      break;
 800447c:	e01c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800448a:	461a      	mov	r2, r3
 800448c:	f000 fbbc 	bl	8004c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2140      	movs	r1, #64	@ 0x40
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fc15 	bl	8004cc6 <TIM_ITRx_SetConfig>
      break;
 800449c:	e00c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4619      	mov	r1, r3
 80044a8:	4610      	mov	r0, r2
 80044aa:	f000 fc0c 	bl	8004cc6 <TIM_ITRx_SetConfig>
      break;
 80044ae:	e003      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
      break;
 80044b4:	e000      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80044b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	00100070 	.word	0x00100070
 80044d8:	00100040 	.word	0x00100040
 80044dc:	00100030 	.word	0x00100030
 80044e0:	00100020 	.word	0x00100020

080044e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a42      	ldr	r2, [pc, #264]	@ (8004600 <TIM_Base_SetConfig+0x11c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00f      	beq.n	800451c <TIM_Base_SetConfig+0x38>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004502:	d00b      	beq.n	800451c <TIM_Base_SetConfig+0x38>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a3f      	ldr	r2, [pc, #252]	@ (8004604 <TIM_Base_SetConfig+0x120>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d007      	beq.n	800451c <TIM_Base_SetConfig+0x38>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a3e      	ldr	r2, [pc, #248]	@ (8004608 <TIM_Base_SetConfig+0x124>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d003      	beq.n	800451c <TIM_Base_SetConfig+0x38>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a3d      	ldr	r2, [pc, #244]	@ (800460c <TIM_Base_SetConfig+0x128>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d108      	bne.n	800452e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a33      	ldr	r2, [pc, #204]	@ (8004600 <TIM_Base_SetConfig+0x11c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d01b      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800453c:	d017      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a30      	ldr	r2, [pc, #192]	@ (8004604 <TIM_Base_SetConfig+0x120>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d013      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a2f      	ldr	r2, [pc, #188]	@ (8004608 <TIM_Base_SetConfig+0x124>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00f      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a2e      	ldr	r2, [pc, #184]	@ (800460c <TIM_Base_SetConfig+0x128>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00b      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a2d      	ldr	r2, [pc, #180]	@ (8004610 <TIM_Base_SetConfig+0x12c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d007      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a2c      	ldr	r2, [pc, #176]	@ (8004614 <TIM_Base_SetConfig+0x130>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d003      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a2b      	ldr	r2, [pc, #172]	@ (8004618 <TIM_Base_SetConfig+0x134>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d108      	bne.n	8004580 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a16      	ldr	r2, [pc, #88]	@ (8004600 <TIM_Base_SetConfig+0x11c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00f      	beq.n	80045cc <TIM_Base_SetConfig+0xe8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a17      	ldr	r2, [pc, #92]	@ (800460c <TIM_Base_SetConfig+0x128>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00b      	beq.n	80045cc <TIM_Base_SetConfig+0xe8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a16      	ldr	r2, [pc, #88]	@ (8004610 <TIM_Base_SetConfig+0x12c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d007      	beq.n	80045cc <TIM_Base_SetConfig+0xe8>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a15      	ldr	r2, [pc, #84]	@ (8004614 <TIM_Base_SetConfig+0x130>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d003      	beq.n	80045cc <TIM_Base_SetConfig+0xe8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a14      	ldr	r2, [pc, #80]	@ (8004618 <TIM_Base_SetConfig+0x134>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d103      	bne.n	80045d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d105      	bne.n	80045f2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f023 0201 	bic.w	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	611a      	str	r2, [r3, #16]
  }
}
 80045f2:	bf00      	nop
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40012c00 	.word	0x40012c00
 8004604:	40000400 	.word	0x40000400
 8004608:	40000800 	.word	0x40000800
 800460c:	40013400 	.word	0x40013400
 8004610:	40014000 	.word	0x40014000
 8004614:	40014400 	.word	0x40014400
 8004618:	40014800 	.word	0x40014800

0800461c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f023 0201 	bic.w	r2, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800464a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800464e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0303 	bic.w	r3, r3, #3
 8004656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f023 0302 	bic.w	r3, r3, #2
 8004668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a2c      	ldr	r2, [pc, #176]	@ (8004728 <TIM_OC1_SetConfig+0x10c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00f      	beq.n	800469c <TIM_OC1_SetConfig+0x80>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a2b      	ldr	r2, [pc, #172]	@ (800472c <TIM_OC1_SetConfig+0x110>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00b      	beq.n	800469c <TIM_OC1_SetConfig+0x80>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a2a      	ldr	r2, [pc, #168]	@ (8004730 <TIM_OC1_SetConfig+0x114>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d007      	beq.n	800469c <TIM_OC1_SetConfig+0x80>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a29      	ldr	r2, [pc, #164]	@ (8004734 <TIM_OC1_SetConfig+0x118>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d003      	beq.n	800469c <TIM_OC1_SetConfig+0x80>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a28      	ldr	r2, [pc, #160]	@ (8004738 <TIM_OC1_SetConfig+0x11c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d10c      	bne.n	80046b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f023 0308 	bic.w	r3, r3, #8
 80046a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f023 0304 	bic.w	r3, r3, #4
 80046b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004728 <TIM_OC1_SetConfig+0x10c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00f      	beq.n	80046de <TIM_OC1_SetConfig+0xc2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1a      	ldr	r2, [pc, #104]	@ (800472c <TIM_OC1_SetConfig+0x110>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00b      	beq.n	80046de <TIM_OC1_SetConfig+0xc2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a19      	ldr	r2, [pc, #100]	@ (8004730 <TIM_OC1_SetConfig+0x114>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d007      	beq.n	80046de <TIM_OC1_SetConfig+0xc2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a18      	ldr	r2, [pc, #96]	@ (8004734 <TIM_OC1_SetConfig+0x118>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d003      	beq.n	80046de <TIM_OC1_SetConfig+0xc2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a17      	ldr	r2, [pc, #92]	@ (8004738 <TIM_OC1_SetConfig+0x11c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d111      	bne.n	8004702 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	621a      	str	r2, [r3, #32]
}
 800471c:	bf00      	nop
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	40012c00 	.word	0x40012c00
 800472c:	40013400 	.word	0x40013400
 8004730:	40014000 	.word	0x40014000
 8004734:	40014400 	.word	0x40014400
 8004738:	40014800 	.word	0x40014800

0800473c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	f023 0210 	bic.w	r2, r3, #16
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800476a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800476e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f023 0320 	bic.w	r3, r3, #32
 800478a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a28      	ldr	r2, [pc, #160]	@ (800483c <TIM_OC2_SetConfig+0x100>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d003      	beq.n	80047a8 <TIM_OC2_SetConfig+0x6c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a27      	ldr	r2, [pc, #156]	@ (8004840 <TIM_OC2_SetConfig+0x104>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d10d      	bne.n	80047c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a1d      	ldr	r2, [pc, #116]	@ (800483c <TIM_OC2_SetConfig+0x100>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d00f      	beq.n	80047ec <TIM_OC2_SetConfig+0xb0>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004840 <TIM_OC2_SetConfig+0x104>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00b      	beq.n	80047ec <TIM_OC2_SetConfig+0xb0>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004844 <TIM_OC2_SetConfig+0x108>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d007      	beq.n	80047ec <TIM_OC2_SetConfig+0xb0>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a1a      	ldr	r2, [pc, #104]	@ (8004848 <TIM_OC2_SetConfig+0x10c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d003      	beq.n	80047ec <TIM_OC2_SetConfig+0xb0>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a19      	ldr	r2, [pc, #100]	@ (800484c <TIM_OC2_SetConfig+0x110>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d113      	bne.n	8004814 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	4313      	orrs	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	621a      	str	r2, [r3, #32]
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40012c00 	.word	0x40012c00
 8004840:	40013400 	.word	0x40013400
 8004844:	40014000 	.word	0x40014000
 8004848:	40014400 	.word	0x40014400
 800484c:	40014800 	.word	0x40014800

08004850 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800487e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0303 	bic.w	r3, r3, #3
 800488a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800489c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a27      	ldr	r2, [pc, #156]	@ (800494c <TIM_OC3_SetConfig+0xfc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d003      	beq.n	80048ba <TIM_OC3_SetConfig+0x6a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a26      	ldr	r2, [pc, #152]	@ (8004950 <TIM_OC3_SetConfig+0x100>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d10d      	bne.n	80048d6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	021b      	lsls	r3, r3, #8
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a1c      	ldr	r2, [pc, #112]	@ (800494c <TIM_OC3_SetConfig+0xfc>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00f      	beq.n	80048fe <TIM_OC3_SetConfig+0xae>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004950 <TIM_OC3_SetConfig+0x100>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00b      	beq.n	80048fe <TIM_OC3_SetConfig+0xae>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a1a      	ldr	r2, [pc, #104]	@ (8004954 <TIM_OC3_SetConfig+0x104>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d007      	beq.n	80048fe <TIM_OC3_SetConfig+0xae>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a19      	ldr	r2, [pc, #100]	@ (8004958 <TIM_OC3_SetConfig+0x108>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d003      	beq.n	80048fe <TIM_OC3_SetConfig+0xae>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a18      	ldr	r2, [pc, #96]	@ (800495c <TIM_OC3_SetConfig+0x10c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d113      	bne.n	8004926 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800490c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	4313      	orrs	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	621a      	str	r2, [r3, #32]
}
 8004940:	bf00      	nop
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	40012c00 	.word	0x40012c00
 8004950:	40013400 	.word	0x40013400
 8004954:	40014000 	.word	0x40014000
 8004958:	40014400 	.word	0x40014400
 800495c:	40014800 	.word	0x40014800

08004960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800498e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800499a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	031b      	lsls	r3, r3, #12
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a28      	ldr	r2, [pc, #160]	@ (8004a60 <TIM_OC4_SetConfig+0x100>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d003      	beq.n	80049cc <TIM_OC4_SetConfig+0x6c>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a27      	ldr	r2, [pc, #156]	@ (8004a64 <TIM_OC4_SetConfig+0x104>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d10d      	bne.n	80049e8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80049d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	031b      	lsls	r3, r3, #12
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004a60 <TIM_OC4_SetConfig+0x100>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00f      	beq.n	8004a10 <TIM_OC4_SetConfig+0xb0>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a64 <TIM_OC4_SetConfig+0x104>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00b      	beq.n	8004a10 <TIM_OC4_SetConfig+0xb0>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004a68 <TIM_OC4_SetConfig+0x108>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d007      	beq.n	8004a10 <TIM_OC4_SetConfig+0xb0>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a1a      	ldr	r2, [pc, #104]	@ (8004a6c <TIM_OC4_SetConfig+0x10c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d003      	beq.n	8004a10 <TIM_OC4_SetConfig+0xb0>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a19      	ldr	r2, [pc, #100]	@ (8004a70 <TIM_OC4_SetConfig+0x110>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d113      	bne.n	8004a38 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a16:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a1e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	019b      	lsls	r3, r3, #6
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	019b      	lsls	r3, r3, #6
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	621a      	str	r2, [r3, #32]
}
 8004a52:	bf00      	nop
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	40013400 	.word	0x40013400
 8004a68:	40014000 	.word	0x40014000
 8004a6c:	40014400 	.word	0x40014400
 8004a70:	40014800 	.word	0x40014800

08004a74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004ab8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	041b      	lsls	r3, r3, #16
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a17      	ldr	r2, [pc, #92]	@ (8004b28 <TIM_OC5_SetConfig+0xb4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00f      	beq.n	8004aee <TIM_OC5_SetConfig+0x7a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a16      	ldr	r2, [pc, #88]	@ (8004b2c <TIM_OC5_SetConfig+0xb8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00b      	beq.n	8004aee <TIM_OC5_SetConfig+0x7a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a15      	ldr	r2, [pc, #84]	@ (8004b30 <TIM_OC5_SetConfig+0xbc>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d007      	beq.n	8004aee <TIM_OC5_SetConfig+0x7a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a14      	ldr	r2, [pc, #80]	@ (8004b34 <TIM_OC5_SetConfig+0xc0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d003      	beq.n	8004aee <TIM_OC5_SetConfig+0x7a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a13      	ldr	r2, [pc, #76]	@ (8004b38 <TIM_OC5_SetConfig+0xc4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d109      	bne.n	8004b02 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004af4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	621a      	str	r2, [r3, #32]
}
 8004b1c:	bf00      	nop
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	40012c00 	.word	0x40012c00
 8004b2c:	40013400 	.word	0x40013400
 8004b30:	40014000 	.word	0x40014000
 8004b34:	40014400 	.word	0x40014400
 8004b38:	40014800 	.word	0x40014800

08004b3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	051b      	lsls	r3, r3, #20
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a18      	ldr	r2, [pc, #96]	@ (8004bf4 <TIM_OC6_SetConfig+0xb8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00f      	beq.n	8004bb8 <TIM_OC6_SetConfig+0x7c>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a17      	ldr	r2, [pc, #92]	@ (8004bf8 <TIM_OC6_SetConfig+0xbc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00b      	beq.n	8004bb8 <TIM_OC6_SetConfig+0x7c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a16      	ldr	r2, [pc, #88]	@ (8004bfc <TIM_OC6_SetConfig+0xc0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d007      	beq.n	8004bb8 <TIM_OC6_SetConfig+0x7c>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a15      	ldr	r2, [pc, #84]	@ (8004c00 <TIM_OC6_SetConfig+0xc4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d003      	beq.n	8004bb8 <TIM_OC6_SetConfig+0x7c>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a14      	ldr	r2, [pc, #80]	@ (8004c04 <TIM_OC6_SetConfig+0xc8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d109      	bne.n	8004bcc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	029b      	lsls	r3, r3, #10
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	621a      	str	r2, [r3, #32]
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40013400 	.word	0x40013400
 8004bfc:	40014000 	.word	0x40014000
 8004c00:	40014400 	.word	0x40014400
 8004c04:	40014800 	.word	0x40014800

08004c08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	f023 0201 	bic.w	r2, r3, #1
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f023 030a 	bic.w	r3, r3, #10
 8004c44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	621a      	str	r2, [r3, #32]
}
 8004c5a:	bf00      	nop
 8004c5c:	371c      	adds	r7, #28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b087      	sub	sp, #28
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	f023 0210 	bic.w	r2, r3, #16
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	031b      	lsls	r3, r3, #12
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ca2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	621a      	str	r2, [r3, #32]
}
 8004cba:	bf00      	nop
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b085      	sub	sp, #20
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004cdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ce0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f043 0307 	orr.w	r3, r3, #7
 8004cec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	609a      	str	r2, [r3, #8]
}
 8004cf4:	bf00      	nop
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	021a      	lsls	r2, r3, #8
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	431a      	orrs	r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	609a      	str	r2, [r3, #8]
}
 8004d34:	bf00      	nop
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e065      	b.n	8004e24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004e30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d004      	beq.n	8004d8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a2b      	ldr	r2, [pc, #172]	@ (8004e34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d108      	bne.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004d92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004da4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004da8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8004e30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d018      	beq.n	8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dce:	d013      	beq.n	8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a18      	ldr	r2, [pc, #96]	@ (8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00e      	beq.n	8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a17      	ldr	r2, [pc, #92]	@ (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d009      	beq.n	8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a12      	ldr	r2, [pc, #72]	@ (8004e34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d004      	beq.n	8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a13      	ldr	r2, [pc, #76]	@ (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d10c      	bne.n	8004e12 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dfe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	40012c00 	.word	0x40012c00
 8004e34:	40013400 	.word	0x40013400
 8004e38:	40000400 	.word	0x40000400
 8004e3c:	40000800 	.word	0x40000800
 8004e40:	40014000 	.word	0x40014000

08004e44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e042      	b.n	8004edc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d106      	bne.n	8004e6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7fc fbbb 	bl	80015e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2224      	movs	r2, #36	@ 0x24
 8004e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0201 	bic.w	r2, r2, #1
 8004e84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fcc0 	bl	8005814 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f9f1 	bl	800527c <UART_SetConfig>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e01b      	b.n	8004edc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004eb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0201 	orr.w	r2, r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fd3f 	bl	8005958 <UART_CheckIdleState>
 8004eda:	4603      	mov	r3, r0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08a      	sub	sp, #40	@ 0x28
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	603b      	str	r3, [r7, #0]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004efa:	2b20      	cmp	r3, #32
 8004efc:	d17b      	bne.n	8004ff6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <HAL_UART_Transmit+0x26>
 8004f04:	88fb      	ldrh	r3, [r7, #6]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e074      	b.n	8004ff8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2221      	movs	r2, #33	@ 0x21
 8004f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f1e:	f7fd faff 	bl	8002520 <HAL_GetTick>
 8004f22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	88fa      	ldrh	r2, [r7, #6]
 8004f28:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	88fa      	ldrh	r2, [r7, #6]
 8004f30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f3c:	d108      	bne.n	8004f50 <HAL_UART_Transmit+0x6c>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d104      	bne.n	8004f50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	61bb      	str	r3, [r7, #24]
 8004f4e:	e003      	b.n	8004f58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f54:	2300      	movs	r3, #0
 8004f56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f58:	e030      	b.n	8004fbc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2200      	movs	r2, #0
 8004f62:	2180      	movs	r1, #128	@ 0x80
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 fda1 	bl	8005aac <UART_WaitOnFlagUntilTimeout>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e03d      	b.n	8004ff8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10b      	bne.n	8004f9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f90:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	3302      	adds	r3, #2
 8004f96:	61bb      	str	r3, [r7, #24]
 8004f98:	e007      	b.n	8004faa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	781a      	ldrb	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1c8      	bne.n	8004f5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	2140      	movs	r1, #64	@ 0x40
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 fd6a 	bl	8005aac <UART_WaitOnFlagUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e006      	b.n	8004ff8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e000      	b.n	8004ff8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004ff6:	2302      	movs	r3, #2
  }
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3720      	adds	r7, #32
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	@ 0x28
 8005004:	af02      	add	r7, sp, #8
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	4613      	mov	r3, r2
 800500e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005016:	2b20      	cmp	r3, #32
 8005018:	f040 80b5 	bne.w	8005186 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <HAL_UART_Receive+0x28>
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0ad      	b.n	8005188 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2222      	movs	r2, #34	@ 0x22
 8005038:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005042:	f7fd fa6d 	bl	8002520 <HAL_GetTick>
 8005046:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	88fa      	ldrh	r2, [r7, #6]
 800504c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	88fa      	ldrh	r2, [r7, #6]
 8005054:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005060:	d10e      	bne.n	8005080 <HAL_UART_Receive+0x80>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d105      	bne.n	8005076 <HAL_UART_Receive+0x76>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005070:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005074:	e02d      	b.n	80050d2 <HAL_UART_Receive+0xd2>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	22ff      	movs	r2, #255	@ 0xff
 800507a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800507e:	e028      	b.n	80050d2 <HAL_UART_Receive+0xd2>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10d      	bne.n	80050a4 <HAL_UART_Receive+0xa4>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d104      	bne.n	800509a <HAL_UART_Receive+0x9a>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	22ff      	movs	r2, #255	@ 0xff
 8005094:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005098:	e01b      	b.n	80050d2 <HAL_UART_Receive+0xd2>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	227f      	movs	r2, #127	@ 0x7f
 800509e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80050a2:	e016      	b.n	80050d2 <HAL_UART_Receive+0xd2>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050ac:	d10d      	bne.n	80050ca <HAL_UART_Receive+0xca>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d104      	bne.n	80050c0 <HAL_UART_Receive+0xc0>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	227f      	movs	r2, #127	@ 0x7f
 80050ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80050be:	e008      	b.n	80050d2 <HAL_UART_Receive+0xd2>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	223f      	movs	r2, #63	@ 0x3f
 80050c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80050c8:	e003      	b.n	80050d2 <HAL_UART_Receive+0xd2>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80050d8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050e2:	d108      	bne.n	80050f6 <HAL_UART_Receive+0xf6>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d104      	bne.n	80050f6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	61bb      	str	r3, [r7, #24]
 80050f4:	e003      	b.n	80050fe <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80050fe:	e036      	b.n	800516e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2200      	movs	r2, #0
 8005108:	2120      	movs	r1, #32
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 fcce 	bl	8005aac <UART_WaitOnFlagUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2220      	movs	r2, #32
 800511a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e032      	b.n	8005188 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10c      	bne.n	8005142 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512e:	b29a      	uxth	r2, r3
 8005130:	8a7b      	ldrh	r3, [r7, #18]
 8005132:	4013      	ands	r3, r2
 8005134:	b29a      	uxth	r2, r3
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	3302      	adds	r3, #2
 800513e:	61bb      	str	r3, [r7, #24]
 8005140:	e00c      	b.n	800515c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005148:	b2da      	uxtb	r2, r3
 800514a:	8a7b      	ldrh	r3, [r7, #18]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	4013      	ands	r3, r2
 8005150:	b2da      	uxtb	r2, r3
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	3301      	adds	r3, #1
 800515a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29a      	uxth	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1c2      	bne.n	8005100 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2220      	movs	r2, #32
 800517e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	e000      	b.n	8005188 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005186:	2302      	movs	r3, #2
  }
}
 8005188:	4618      	mov	r0, r3
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	@ 0x28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	4613      	mov	r3, r2
 800519c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051a4:	2b20      	cmp	r3, #32
 80051a6:	d137      	bne.n	8005218 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <HAL_UART_Receive_DMA+0x24>
 80051ae:	88fb      	ldrh	r3, [r7, #6]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e030      	b.n	800521a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a18      	ldr	r2, [pc, #96]	@ (8005224 <HAL_UART_Receive_DMA+0x94>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d01f      	beq.n	8005208 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d018      	beq.n	8005208 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	613b      	str	r3, [r7, #16]
   return(result);
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	623b      	str	r3, [r7, #32]
 80051f6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	69f9      	ldr	r1, [r7, #28]
 80051fa:	6a3a      	ldr	r2, [r7, #32]
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	61bb      	str	r3, [r7, #24]
   return(result);
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e6      	bne.n	80051d6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005208:	88fb      	ldrh	r3, [r7, #6]
 800520a:	461a      	mov	r2, r3
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 fcba 	bl	8005b88 <UART_Start_Receive_DMA>
 8005214:	4603      	mov	r3, r0
 8005216:	e000      	b.n	800521a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005218:	2302      	movs	r3, #2
  }
}
 800521a:	4618      	mov	r0, r3
 800521c:	3728      	adds	r7, #40	@ 0x28
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40008000 	.word	0x40008000

08005228 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	460b      	mov	r3, r1
 800526e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800527c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005280:	b08c      	sub	sp, #48	@ 0x30
 8005282:	af00      	add	r7, sp, #0
 8005284:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	431a      	orrs	r2, r3
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	431a      	orrs	r2, r3
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4bab      	ldr	r3, [pc, #684]	@ (8005558 <UART_SetConfig+0x2dc>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052b4:	430b      	orrs	r3, r1
 80052b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4aa0      	ldr	r2, [pc, #640]	@ (800555c <UART_SetConfig+0x2e0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d004      	beq.n	80052e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052e4:	4313      	orrs	r3, r2
 80052e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80052f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	6812      	ldr	r2, [r2, #0]
 80052fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052fc:	430b      	orrs	r3, r1
 80052fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	f023 010f 	bic.w	r1, r3, #15
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a91      	ldr	r2, [pc, #580]	@ (8005560 <UART_SetConfig+0x2e4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d125      	bne.n	800536c <UART_SetConfig+0xf0>
 8005320:	4b90      	ldr	r3, [pc, #576]	@ (8005564 <UART_SetConfig+0x2e8>)
 8005322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b03      	cmp	r3, #3
 800532c:	d81a      	bhi.n	8005364 <UART_SetConfig+0xe8>
 800532e:	a201      	add	r2, pc, #4	@ (adr r2, 8005334 <UART_SetConfig+0xb8>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	08005345 	.word	0x08005345
 8005338:	08005355 	.word	0x08005355
 800533c:	0800534d 	.word	0x0800534d
 8005340:	0800535d 	.word	0x0800535d
 8005344:	2301      	movs	r3, #1
 8005346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800534a:	e0d6      	b.n	80054fa <UART_SetConfig+0x27e>
 800534c:	2302      	movs	r3, #2
 800534e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005352:	e0d2      	b.n	80054fa <UART_SetConfig+0x27e>
 8005354:	2304      	movs	r3, #4
 8005356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800535a:	e0ce      	b.n	80054fa <UART_SetConfig+0x27e>
 800535c:	2308      	movs	r3, #8
 800535e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005362:	e0ca      	b.n	80054fa <UART_SetConfig+0x27e>
 8005364:	2310      	movs	r3, #16
 8005366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800536a:	e0c6      	b.n	80054fa <UART_SetConfig+0x27e>
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a7d      	ldr	r2, [pc, #500]	@ (8005568 <UART_SetConfig+0x2ec>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d138      	bne.n	80053e8 <UART_SetConfig+0x16c>
 8005376:	4b7b      	ldr	r3, [pc, #492]	@ (8005564 <UART_SetConfig+0x2e8>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537c:	f003 030c 	and.w	r3, r3, #12
 8005380:	2b0c      	cmp	r3, #12
 8005382:	d82d      	bhi.n	80053e0 <UART_SetConfig+0x164>
 8005384:	a201      	add	r2, pc, #4	@ (adr r2, 800538c <UART_SetConfig+0x110>)
 8005386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538a:	bf00      	nop
 800538c:	080053c1 	.word	0x080053c1
 8005390:	080053e1 	.word	0x080053e1
 8005394:	080053e1 	.word	0x080053e1
 8005398:	080053e1 	.word	0x080053e1
 800539c:	080053d1 	.word	0x080053d1
 80053a0:	080053e1 	.word	0x080053e1
 80053a4:	080053e1 	.word	0x080053e1
 80053a8:	080053e1 	.word	0x080053e1
 80053ac:	080053c9 	.word	0x080053c9
 80053b0:	080053e1 	.word	0x080053e1
 80053b4:	080053e1 	.word	0x080053e1
 80053b8:	080053e1 	.word	0x080053e1
 80053bc:	080053d9 	.word	0x080053d9
 80053c0:	2300      	movs	r3, #0
 80053c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053c6:	e098      	b.n	80054fa <UART_SetConfig+0x27e>
 80053c8:	2302      	movs	r3, #2
 80053ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ce:	e094      	b.n	80054fa <UART_SetConfig+0x27e>
 80053d0:	2304      	movs	r3, #4
 80053d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053d6:	e090      	b.n	80054fa <UART_SetConfig+0x27e>
 80053d8:	2308      	movs	r3, #8
 80053da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053de:	e08c      	b.n	80054fa <UART_SetConfig+0x27e>
 80053e0:	2310      	movs	r3, #16
 80053e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053e6:	e088      	b.n	80054fa <UART_SetConfig+0x27e>
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a5f      	ldr	r2, [pc, #380]	@ (800556c <UART_SetConfig+0x2f0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d125      	bne.n	800543e <UART_SetConfig+0x1c2>
 80053f2:	4b5c      	ldr	r3, [pc, #368]	@ (8005564 <UART_SetConfig+0x2e8>)
 80053f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80053fc:	2b30      	cmp	r3, #48	@ 0x30
 80053fe:	d016      	beq.n	800542e <UART_SetConfig+0x1b2>
 8005400:	2b30      	cmp	r3, #48	@ 0x30
 8005402:	d818      	bhi.n	8005436 <UART_SetConfig+0x1ba>
 8005404:	2b20      	cmp	r3, #32
 8005406:	d00a      	beq.n	800541e <UART_SetConfig+0x1a2>
 8005408:	2b20      	cmp	r3, #32
 800540a:	d814      	bhi.n	8005436 <UART_SetConfig+0x1ba>
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <UART_SetConfig+0x19a>
 8005410:	2b10      	cmp	r3, #16
 8005412:	d008      	beq.n	8005426 <UART_SetConfig+0x1aa>
 8005414:	e00f      	b.n	8005436 <UART_SetConfig+0x1ba>
 8005416:	2300      	movs	r3, #0
 8005418:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800541c:	e06d      	b.n	80054fa <UART_SetConfig+0x27e>
 800541e:	2302      	movs	r3, #2
 8005420:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005424:	e069      	b.n	80054fa <UART_SetConfig+0x27e>
 8005426:	2304      	movs	r3, #4
 8005428:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800542c:	e065      	b.n	80054fa <UART_SetConfig+0x27e>
 800542e:	2308      	movs	r3, #8
 8005430:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005434:	e061      	b.n	80054fa <UART_SetConfig+0x27e>
 8005436:	2310      	movs	r3, #16
 8005438:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800543c:	e05d      	b.n	80054fa <UART_SetConfig+0x27e>
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a4b      	ldr	r2, [pc, #300]	@ (8005570 <UART_SetConfig+0x2f4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d125      	bne.n	8005494 <UART_SetConfig+0x218>
 8005448:	4b46      	ldr	r3, [pc, #280]	@ (8005564 <UART_SetConfig+0x2e8>)
 800544a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800544e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005452:	2bc0      	cmp	r3, #192	@ 0xc0
 8005454:	d016      	beq.n	8005484 <UART_SetConfig+0x208>
 8005456:	2bc0      	cmp	r3, #192	@ 0xc0
 8005458:	d818      	bhi.n	800548c <UART_SetConfig+0x210>
 800545a:	2b80      	cmp	r3, #128	@ 0x80
 800545c:	d00a      	beq.n	8005474 <UART_SetConfig+0x1f8>
 800545e:	2b80      	cmp	r3, #128	@ 0x80
 8005460:	d814      	bhi.n	800548c <UART_SetConfig+0x210>
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <UART_SetConfig+0x1f0>
 8005466:	2b40      	cmp	r3, #64	@ 0x40
 8005468:	d008      	beq.n	800547c <UART_SetConfig+0x200>
 800546a:	e00f      	b.n	800548c <UART_SetConfig+0x210>
 800546c:	2300      	movs	r3, #0
 800546e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005472:	e042      	b.n	80054fa <UART_SetConfig+0x27e>
 8005474:	2302      	movs	r3, #2
 8005476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800547a:	e03e      	b.n	80054fa <UART_SetConfig+0x27e>
 800547c:	2304      	movs	r3, #4
 800547e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005482:	e03a      	b.n	80054fa <UART_SetConfig+0x27e>
 8005484:	2308      	movs	r3, #8
 8005486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800548a:	e036      	b.n	80054fa <UART_SetConfig+0x27e>
 800548c:	2310      	movs	r3, #16
 800548e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005492:	e032      	b.n	80054fa <UART_SetConfig+0x27e>
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a30      	ldr	r2, [pc, #192]	@ (800555c <UART_SetConfig+0x2e0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d12a      	bne.n	80054f4 <UART_SetConfig+0x278>
 800549e:	4b31      	ldr	r3, [pc, #196]	@ (8005564 <UART_SetConfig+0x2e8>)
 80054a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80054a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054ac:	d01a      	beq.n	80054e4 <UART_SetConfig+0x268>
 80054ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054b2:	d81b      	bhi.n	80054ec <UART_SetConfig+0x270>
 80054b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054b8:	d00c      	beq.n	80054d4 <UART_SetConfig+0x258>
 80054ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054be:	d815      	bhi.n	80054ec <UART_SetConfig+0x270>
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d003      	beq.n	80054cc <UART_SetConfig+0x250>
 80054c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054c8:	d008      	beq.n	80054dc <UART_SetConfig+0x260>
 80054ca:	e00f      	b.n	80054ec <UART_SetConfig+0x270>
 80054cc:	2300      	movs	r3, #0
 80054ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054d2:	e012      	b.n	80054fa <UART_SetConfig+0x27e>
 80054d4:	2302      	movs	r3, #2
 80054d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054da:	e00e      	b.n	80054fa <UART_SetConfig+0x27e>
 80054dc:	2304      	movs	r3, #4
 80054de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054e2:	e00a      	b.n	80054fa <UART_SetConfig+0x27e>
 80054e4:	2308      	movs	r3, #8
 80054e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ea:	e006      	b.n	80054fa <UART_SetConfig+0x27e>
 80054ec:	2310      	movs	r3, #16
 80054ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054f2:	e002      	b.n	80054fa <UART_SetConfig+0x27e>
 80054f4:	2310      	movs	r3, #16
 80054f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a17      	ldr	r2, [pc, #92]	@ (800555c <UART_SetConfig+0x2e0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	f040 80a8 	bne.w	8005656 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005506:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800550a:	2b08      	cmp	r3, #8
 800550c:	d834      	bhi.n	8005578 <UART_SetConfig+0x2fc>
 800550e:	a201      	add	r2, pc, #4	@ (adr r2, 8005514 <UART_SetConfig+0x298>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	08005539 	.word	0x08005539
 8005518:	08005579 	.word	0x08005579
 800551c:	08005541 	.word	0x08005541
 8005520:	08005579 	.word	0x08005579
 8005524:	08005547 	.word	0x08005547
 8005528:	08005579 	.word	0x08005579
 800552c:	08005579 	.word	0x08005579
 8005530:	08005579 	.word	0x08005579
 8005534:	0800554f 	.word	0x0800554f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005538:	f7fe faac 	bl	8003a94 <HAL_RCC_GetPCLK1Freq>
 800553c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800553e:	e021      	b.n	8005584 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005540:	4b0c      	ldr	r3, [pc, #48]	@ (8005574 <UART_SetConfig+0x2f8>)
 8005542:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005544:	e01e      	b.n	8005584 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005546:	f7fe fa37 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 800554a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800554c:	e01a      	b.n	8005584 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800554e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005552:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005554:	e016      	b.n	8005584 <UART_SetConfig+0x308>
 8005556:	bf00      	nop
 8005558:	cfff69f3 	.word	0xcfff69f3
 800555c:	40008000 	.word	0x40008000
 8005560:	40013800 	.word	0x40013800
 8005564:	40021000 	.word	0x40021000
 8005568:	40004400 	.word	0x40004400
 800556c:	40004800 	.word	0x40004800
 8005570:	40004c00 	.word	0x40004c00
 8005574:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005582:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 812a 	beq.w	80057e0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005590:	4a9e      	ldr	r2, [pc, #632]	@ (800580c <UART_SetConfig+0x590>)
 8005592:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005596:	461a      	mov	r2, r3
 8005598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559a:	fbb3 f3f2 	udiv	r3, r3, r2
 800559e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	4613      	mov	r3, r2
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	4413      	add	r3, r2
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d305      	bcc.n	80055bc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d903      	bls.n	80055c4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80055c2:	e10d      	b.n	80057e0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c6:	2200      	movs	r2, #0
 80055c8:	60bb      	str	r3, [r7, #8]
 80055ca:	60fa      	str	r2, [r7, #12]
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d0:	4a8e      	ldr	r2, [pc, #568]	@ (800580c <UART_SetConfig+0x590>)
 80055d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2200      	movs	r2, #0
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	607a      	str	r2, [r7, #4]
 80055de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055e6:	f7fb fb39 	bl	8000c5c <__aeabi_uldivmod>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4610      	mov	r0, r2
 80055f0:	4619      	mov	r1, r3
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	f04f 0300 	mov.w	r3, #0
 80055fa:	020b      	lsls	r3, r1, #8
 80055fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005600:	0202      	lsls	r2, r0, #8
 8005602:	6979      	ldr	r1, [r7, #20]
 8005604:	6849      	ldr	r1, [r1, #4]
 8005606:	0849      	lsrs	r1, r1, #1
 8005608:	2000      	movs	r0, #0
 800560a:	460c      	mov	r4, r1
 800560c:	4605      	mov	r5, r0
 800560e:	eb12 0804 	adds.w	r8, r2, r4
 8005612:	eb43 0905 	adc.w	r9, r3, r5
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	469a      	mov	sl, r3
 800561e:	4693      	mov	fp, r2
 8005620:	4652      	mov	r2, sl
 8005622:	465b      	mov	r3, fp
 8005624:	4640      	mov	r0, r8
 8005626:	4649      	mov	r1, r9
 8005628:	f7fb fb18 	bl	8000c5c <__aeabi_uldivmod>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4613      	mov	r3, r2
 8005632:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800563a:	d308      	bcc.n	800564e <UART_SetConfig+0x3d2>
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005642:	d204      	bcs.n	800564e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6a3a      	ldr	r2, [r7, #32]
 800564a:	60da      	str	r2, [r3, #12]
 800564c:	e0c8      	b.n	80057e0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005654:	e0c4      	b.n	80057e0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800565e:	d167      	bne.n	8005730 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005660:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005664:	2b08      	cmp	r3, #8
 8005666:	d828      	bhi.n	80056ba <UART_SetConfig+0x43e>
 8005668:	a201      	add	r2, pc, #4	@ (adr r2, 8005670 <UART_SetConfig+0x3f4>)
 800566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566e:	bf00      	nop
 8005670:	08005695 	.word	0x08005695
 8005674:	0800569d 	.word	0x0800569d
 8005678:	080056a5 	.word	0x080056a5
 800567c:	080056bb 	.word	0x080056bb
 8005680:	080056ab 	.word	0x080056ab
 8005684:	080056bb 	.word	0x080056bb
 8005688:	080056bb 	.word	0x080056bb
 800568c:	080056bb 	.word	0x080056bb
 8005690:	080056b3 	.word	0x080056b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005694:	f7fe f9fe 	bl	8003a94 <HAL_RCC_GetPCLK1Freq>
 8005698:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800569a:	e014      	b.n	80056c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800569c:	f7fe fa10 	bl	8003ac0 <HAL_RCC_GetPCLK2Freq>
 80056a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056a2:	e010      	b.n	80056c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a4:	4b5a      	ldr	r3, [pc, #360]	@ (8005810 <UART_SetConfig+0x594>)
 80056a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056a8:	e00d      	b.n	80056c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056aa:	f7fe f985 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 80056ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056b0:	e009      	b.n	80056c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056b8:	e005      	b.n	80056c6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80056c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 8089 	beq.w	80057e0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d2:	4a4e      	ldr	r2, [pc, #312]	@ (800580c <UART_SetConfig+0x590>)
 80056d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056d8:	461a      	mov	r2, r3
 80056da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80056e0:	005a      	lsls	r2, r3, #1
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	085b      	lsrs	r3, r3, #1
 80056e8:	441a      	add	r2, r3
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	2b0f      	cmp	r3, #15
 80056f8:	d916      	bls.n	8005728 <UART_SetConfig+0x4ac>
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005700:	d212      	bcs.n	8005728 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	b29b      	uxth	r3, r3
 8005706:	f023 030f 	bic.w	r3, r3, #15
 800570a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	085b      	lsrs	r3, r3, #1
 8005710:	b29b      	uxth	r3, r3
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	b29a      	uxth	r2, r3
 8005718:	8bfb      	ldrh	r3, [r7, #30]
 800571a:	4313      	orrs	r3, r2
 800571c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	8bfa      	ldrh	r2, [r7, #30]
 8005724:	60da      	str	r2, [r3, #12]
 8005726:	e05b      	b.n	80057e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800572e:	e057      	b.n	80057e0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005730:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005734:	2b08      	cmp	r3, #8
 8005736:	d828      	bhi.n	800578a <UART_SetConfig+0x50e>
 8005738:	a201      	add	r2, pc, #4	@ (adr r2, 8005740 <UART_SetConfig+0x4c4>)
 800573a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573e:	bf00      	nop
 8005740:	08005765 	.word	0x08005765
 8005744:	0800576d 	.word	0x0800576d
 8005748:	08005775 	.word	0x08005775
 800574c:	0800578b 	.word	0x0800578b
 8005750:	0800577b 	.word	0x0800577b
 8005754:	0800578b 	.word	0x0800578b
 8005758:	0800578b 	.word	0x0800578b
 800575c:	0800578b 	.word	0x0800578b
 8005760:	08005783 	.word	0x08005783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005764:	f7fe f996 	bl	8003a94 <HAL_RCC_GetPCLK1Freq>
 8005768:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800576a:	e014      	b.n	8005796 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800576c:	f7fe f9a8 	bl	8003ac0 <HAL_RCC_GetPCLK2Freq>
 8005770:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005772:	e010      	b.n	8005796 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005774:	4b26      	ldr	r3, [pc, #152]	@ (8005810 <UART_SetConfig+0x594>)
 8005776:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005778:	e00d      	b.n	8005796 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800577a:	f7fe f91d 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 800577e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005780:	e009      	b.n	8005796 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005786:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005788:	e005      	b.n	8005796 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005794:	bf00      	nop
    }

    if (pclk != 0U)
 8005796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005798:	2b00      	cmp	r3, #0
 800579a:	d021      	beq.n	80057e0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a0:	4a1a      	ldr	r2, [pc, #104]	@ (800580c <UART_SetConfig+0x590>)
 80057a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057a6:	461a      	mov	r2, r3
 80057a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	085b      	lsrs	r3, r3, #1
 80057b4:	441a      	add	r2, r3
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80057be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	2b0f      	cmp	r3, #15
 80057c4:	d909      	bls.n	80057da <UART_SetConfig+0x55e>
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057cc:	d205      	bcs.n	80057da <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	60da      	str	r2, [r3, #12]
 80057d8:	e002      	b.n	80057e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2200      	movs	r2, #0
 80057f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2200      	movs	r2, #0
 80057fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80057fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005800:	4618      	mov	r0, r3
 8005802:	3730      	adds	r7, #48	@ 0x30
 8005804:	46bd      	mov	sp, r7
 8005806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800580a:	bf00      	nop
 800580c:	08007980 	.word	0x08007980
 8005810:	00f42400 	.word	0x00f42400

08005814 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005820:	f003 0308 	and.w	r3, r3, #8
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00a      	beq.n	800583e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005886:	f003 0304 	and.w	r3, r3, #4
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00a      	beq.n	80058c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d01a      	beq.n	800592a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005912:	d10a      	bne.n	800592a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	605a      	str	r2, [r3, #4]
  }
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b098      	sub	sp, #96	@ 0x60
 800595c:	af02      	add	r7, sp, #8
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005968:	f7fc fdda 	bl	8002520 <HAL_GetTick>
 800596c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b08      	cmp	r3, #8
 800597a:	d12f      	bne.n	80059dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800597c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005984:	2200      	movs	r2, #0
 8005986:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f88e 	bl	8005aac <UART_WaitOnFlagUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d022      	beq.n	80059dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80059b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e6      	bne.n	8005996 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e063      	b.n	8005aa4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0304 	and.w	r3, r3, #4
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d149      	bne.n	8005a7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059f2:	2200      	movs	r2, #0
 80059f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f857 	bl	8005aac <UART_WaitOnFlagUntilTimeout>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d03c      	beq.n	8005a7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	623b      	str	r3, [r7, #32]
   return(result);
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a22:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a24:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e6      	bne.n	8005a04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3308      	adds	r3, #8
 8005a3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f023 0301 	bic.w	r3, r3, #1
 8005a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3308      	adds	r3, #8
 8005a54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a56:	61fa      	str	r2, [r7, #28]
 8005a58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	69b9      	ldr	r1, [r7, #24]
 8005a5c:	69fa      	ldr	r2, [r7, #28]
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	617b      	str	r3, [r7, #20]
   return(result);
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e5      	bne.n	8005a36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e012      	b.n	8005aa4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3758      	adds	r7, #88	@ 0x58
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	603b      	str	r3, [r7, #0]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005abc:	e04f      	b.n	8005b5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac4:	d04b      	beq.n	8005b5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ac6:	f7fc fd2b 	bl	8002520 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d302      	bcc.n	8005adc <UART_WaitOnFlagUntilTimeout+0x30>
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e04e      	b.n	8005b7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0304 	and.w	r3, r3, #4
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d037      	beq.n	8005b5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2b80      	cmp	r3, #128	@ 0x80
 8005af2:	d034      	beq.n	8005b5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b40      	cmp	r3, #64	@ 0x40
 8005af8:	d031      	beq.n	8005b5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d110      	bne.n	8005b2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2208      	movs	r2, #8
 8005b0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f920 	bl	8005d56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2208      	movs	r2, #8
 8005b1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e029      	b.n	8005b7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b38:	d111      	bne.n	8005b5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 f906 	bl	8005d56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e00f      	b.n	8005b7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4013      	ands	r3, r2
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	bf0c      	ite	eq
 8005b6e:	2301      	moveq	r3, #1
 8005b70:	2300      	movne	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	79fb      	ldrb	r3, [r7, #7]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d0a0      	beq.n	8005abe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b096      	sub	sp, #88	@ 0x58
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	4613      	mov	r3, r2
 8005b94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	88fa      	ldrh	r2, [r7, #6]
 8005ba0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2222      	movs	r2, #34	@ 0x22
 8005bb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d02d      	beq.n	8005c1a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bc4:	4a40      	ldr	r2, [pc, #256]	@ (8005cc8 <UART_Start_Receive_DMA+0x140>)
 8005bc6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bce:	4a3f      	ldr	r2, [pc, #252]	@ (8005ccc <UART_Start_Receive_DMA+0x144>)
 8005bd0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bd8:	4a3d      	ldr	r2, [pc, #244]	@ (8005cd0 <UART_Start_Receive_DMA+0x148>)
 8005bda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005be2:	2200      	movs	r2, #0
 8005be4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3324      	adds	r3, #36	@ 0x24
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	f7fc fe76 	bl	80028ec <HAL_DMA_Start_IT>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d009      	beq.n	8005c1a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2210      	movs	r2, #16
 8005c0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2220      	movs	r2, #32
 8005c12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e051      	b.n	8005cbe <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d018      	beq.n	8005c54 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c2a:	e853 3f00 	ldrex	r3, [r3]
 8005c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c36:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c42:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c44:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c48:	e841 2300 	strex	r3, r2, [r1]
 8005c4c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1e6      	bne.n	8005c22 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3308      	adds	r3, #8
 8005c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c66:	f043 0301 	orr.w	r3, r3, #1
 8005c6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3308      	adds	r3, #8
 8005c72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c74:	637a      	str	r2, [r7, #52]	@ 0x34
 8005c76:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c7c:	e841 2300 	strex	r3, r2, [r1]
 8005c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e5      	bne.n	8005c54 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3308      	adds	r3, #8
 8005c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	e853 3f00 	ldrex	r3, [r3]
 8005c96:	613b      	str	r3, [r7, #16]
   return(result);
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ca8:	623a      	str	r2, [r7, #32]
 8005caa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cac:	69f9      	ldr	r1, [r7, #28]
 8005cae:	6a3a      	ldr	r2, [r7, #32]
 8005cb0:	e841 2300 	strex	r3, r2, [r1]
 8005cb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e5      	bne.n	8005c88 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3758      	adds	r7, #88	@ 0x58
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	08005e23 	.word	0x08005e23
 8005ccc:	08005f4f 	.word	0x08005f4f
 8005cd0:	08005f8d 	.word	0x08005f8d

08005cd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b08f      	sub	sp, #60	@ 0x3c
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	e853 3f00 	ldrex	r3, [r3]
 8005ce8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005cf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cfc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d02:	e841 2300 	strex	r3, r2, [r1]
 8005d06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1e6      	bne.n	8005cdc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3308      	adds	r3, #8
 8005d14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	e853 3f00 	ldrex	r3, [r3]
 8005d1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005d24:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3308      	adds	r3, #8
 8005d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d2e:	61ba      	str	r2, [r7, #24]
 8005d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	6979      	ldr	r1, [r7, #20]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	e841 2300 	strex	r3, r2, [r1]
 8005d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1e5      	bne.n	8005d0e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005d4a:	bf00      	nop
 8005d4c:	373c      	adds	r7, #60	@ 0x3c
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b095      	sub	sp, #84	@ 0x54
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d66:	e853 3f00 	ldrex	r3, [r3]
 8005d6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d84:	e841 2300 	strex	r3, r2, [r1]
 8005d88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e6      	bne.n	8005d5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3308      	adds	r3, #8
 8005d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	e853 3f00 	ldrex	r3, [r3]
 8005d9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005da6:	f023 0301 	bic.w	r3, r3, #1
 8005daa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3308      	adds	r3, #8
 8005db2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005db4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005db6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dbc:	e841 2300 	strex	r3, r2, [r1]
 8005dc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1e3      	bne.n	8005d90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d118      	bne.n	8005e02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f023 0310 	bic.w	r3, r3, #16
 8005de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df2:	6979      	ldr	r1, [r7, #20]
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	e841 2300 	strex	r3, r2, [r1]
 8005dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1e6      	bne.n	8005dd0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005e16:	bf00      	nop
 8005e18:	3754      	adds	r7, #84	@ 0x54
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b09c      	sub	sp, #112	@ 0x70
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d171      	bne.n	8005f22 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005e3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e40:	2200      	movs	r2, #0
 8005e42:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e4e:	e853 3f00 	ldrex	r3, [r3]
 8005e52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	461a      	mov	r2, r3
 8005e62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e66:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e6c:	e841 2300 	strex	r3, r2, [r1]
 8005e70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1e6      	bne.n	8005e46 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3308      	adds	r3, #8
 8005e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e8a:	f023 0301 	bic.w	r3, r3, #1
 8005e8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3308      	adds	r3, #8
 8005e96:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005e98:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e9a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ea0:	e841 2300 	strex	r3, r2, [r1]
 8005ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e5      	bne.n	8005e78 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	623b      	str	r3, [r7, #32]
   return(result);
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ec2:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ec4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3308      	adds	r3, #8
 8005eca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005ecc:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ed2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ed4:	e841 2300 	strex	r3, r2, [r1]
 8005ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1e5      	bne.n	8005eac <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ee0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d118      	bne.n	8005f22 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	e853 3f00 	ldrex	r3, [r3]
 8005efc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f023 0310 	bic.w	r3, r3, #16
 8005f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f0e:	61fb      	str	r3, [r7, #28]
 8005f10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f12:	69b9      	ldr	r1, [r7, #24]
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	e841 2300 	strex	r3, r2, [r1]
 8005f1a:	617b      	str	r3, [r7, #20]
   return(result);
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1e6      	bne.n	8005ef0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f24:	2200      	movs	r2, #0
 8005f26:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d107      	bne.n	8005f40 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f36:	4619      	mov	r1, r3
 8005f38:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005f3a:	f7ff f993 	bl	8005264 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f3e:	e002      	b.n	8005f46 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005f40:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005f42:	f7ff f971 	bl	8005228 <HAL_UART_RxCpltCallback>
}
 8005f46:	bf00      	nop
 8005f48:	3770      	adds	r7, #112	@ 0x70
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d109      	bne.n	8005f7e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f70:	085b      	lsrs	r3, r3, #1
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	4619      	mov	r1, r3
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f7ff f974 	bl	8005264 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f7c:	e002      	b.n	8005f84 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f7ff f95c 	bl	800523c <HAL_UART_RxHalfCpltCallback>
}
 8005f84:	bf00      	nop
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f98:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fa8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fb4:	2b80      	cmp	r3, #128	@ 0x80
 8005fb6:	d109      	bne.n	8005fcc <UART_DMAError+0x40>
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	2b21      	cmp	r3, #33	@ 0x21
 8005fbc:	d106      	bne.n	8005fcc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8005fc6:	6978      	ldr	r0, [r7, #20]
 8005fc8:	f7ff fe84 	bl	8005cd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd6:	2b40      	cmp	r3, #64	@ 0x40
 8005fd8:	d109      	bne.n	8005fee <UART_DMAError+0x62>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2b22      	cmp	r3, #34	@ 0x22
 8005fde:	d106      	bne.n	8005fee <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8005fe8:	6978      	ldr	r0, [r7, #20]
 8005fea:	f7ff feb4 	bl	8005d56 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ff4:	f043 0210 	orr.w	r2, r3, #16
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ffe:	6978      	ldr	r0, [r7, #20]
 8006000:	f7ff f926 	bl	8005250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006004:	bf00      	nop
 8006006:	3718      	adds	r7, #24
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_UARTEx_DisableFifoMode+0x16>
 800601e:	2302      	movs	r3, #2
 8006020:	e027      	b.n	8006072 <HAL_UARTEx_DisableFifoMode+0x66>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2224      	movs	r2, #36	@ 0x24
 800602e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0201 	bic.w	r2, r2, #1
 8006048:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006050:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2220      	movs	r2, #32
 8006064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b084      	sub	sp, #16
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800608e:	2b01      	cmp	r3, #1
 8006090:	d101      	bne.n	8006096 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006092:	2302      	movs	r3, #2
 8006094:	e02d      	b.n	80060f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2224      	movs	r2, #36	@ 0x24
 80060a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0201 	bic.w	r2, r2, #1
 80060bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f850 	bl	8006178 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800610a:	2b01      	cmp	r3, #1
 800610c:	d101      	bne.n	8006112 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800610e:	2302      	movs	r3, #2
 8006110:	e02d      	b.n	800616e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2224      	movs	r2, #36	@ 0x24
 800611e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0201 	bic.w	r2, r2, #1
 8006138:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f812 	bl	8006178 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2220      	movs	r2, #32
 8006160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006184:	2b00      	cmp	r3, #0
 8006186:	d108      	bne.n	800619a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006198:	e031      	b.n	80061fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800619a:	2308      	movs	r3, #8
 800619c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800619e:	2308      	movs	r3, #8
 80061a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	0e5b      	lsrs	r3, r3, #25
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	0f5b      	lsrs	r3, r3, #29
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	f003 0307 	and.w	r3, r3, #7
 80061c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061c2:	7bbb      	ldrb	r3, [r7, #14]
 80061c4:	7b3a      	ldrb	r2, [r7, #12]
 80061c6:	4911      	ldr	r1, [pc, #68]	@ (800620c <UARTEx_SetNbDataToProcess+0x94>)
 80061c8:	5c8a      	ldrb	r2, [r1, r2]
 80061ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80061ce:	7b3a      	ldrb	r2, [r7, #12]
 80061d0:	490f      	ldr	r1, [pc, #60]	@ (8006210 <UARTEx_SetNbDataToProcess+0x98>)
 80061d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80061d8:	b29a      	uxth	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061e0:	7bfb      	ldrb	r3, [r7, #15]
 80061e2:	7b7a      	ldrb	r2, [r7, #13]
 80061e4:	4909      	ldr	r1, [pc, #36]	@ (800620c <UARTEx_SetNbDataToProcess+0x94>)
 80061e6:	5c8a      	ldrb	r2, [r1, r2]
 80061e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061ec:	7b7a      	ldrb	r2, [r7, #13]
 80061ee:	4908      	ldr	r1, [pc, #32]	@ (8006210 <UARTEx_SetNbDataToProcess+0x98>)
 80061f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80061fe:	bf00      	nop
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	08007998 	.word	0x08007998
 8006210:	080079a0 	.word	0x080079a0

08006214 <std>:
 8006214:	2300      	movs	r3, #0
 8006216:	b510      	push	{r4, lr}
 8006218:	4604      	mov	r4, r0
 800621a:	e9c0 3300 	strd	r3, r3, [r0]
 800621e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006222:	6083      	str	r3, [r0, #8]
 8006224:	8181      	strh	r1, [r0, #12]
 8006226:	6643      	str	r3, [r0, #100]	@ 0x64
 8006228:	81c2      	strh	r2, [r0, #14]
 800622a:	6183      	str	r3, [r0, #24]
 800622c:	4619      	mov	r1, r3
 800622e:	2208      	movs	r2, #8
 8006230:	305c      	adds	r0, #92	@ 0x5c
 8006232:	f000 fa2d 	bl	8006690 <memset>
 8006236:	4b0d      	ldr	r3, [pc, #52]	@ (800626c <std+0x58>)
 8006238:	6263      	str	r3, [r4, #36]	@ 0x24
 800623a:	4b0d      	ldr	r3, [pc, #52]	@ (8006270 <std+0x5c>)
 800623c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800623e:	4b0d      	ldr	r3, [pc, #52]	@ (8006274 <std+0x60>)
 8006240:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006242:	4b0d      	ldr	r3, [pc, #52]	@ (8006278 <std+0x64>)
 8006244:	6323      	str	r3, [r4, #48]	@ 0x30
 8006246:	4b0d      	ldr	r3, [pc, #52]	@ (800627c <std+0x68>)
 8006248:	6224      	str	r4, [r4, #32]
 800624a:	429c      	cmp	r4, r3
 800624c:	d006      	beq.n	800625c <std+0x48>
 800624e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006252:	4294      	cmp	r4, r2
 8006254:	d002      	beq.n	800625c <std+0x48>
 8006256:	33d0      	adds	r3, #208	@ 0xd0
 8006258:	429c      	cmp	r4, r3
 800625a:	d105      	bne.n	8006268 <std+0x54>
 800625c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006264:	f000 ba8c 	b.w	8006780 <__retarget_lock_init_recursive>
 8006268:	bd10      	pop	{r4, pc}
 800626a:	bf00      	nop
 800626c:	080064e1 	.word	0x080064e1
 8006270:	08006503 	.word	0x08006503
 8006274:	0800653b 	.word	0x0800653b
 8006278:	0800655f 	.word	0x0800655f
 800627c:	20001ac4 	.word	0x20001ac4

08006280 <stdio_exit_handler>:
 8006280:	4a02      	ldr	r2, [pc, #8]	@ (800628c <stdio_exit_handler+0xc>)
 8006282:	4903      	ldr	r1, [pc, #12]	@ (8006290 <stdio_exit_handler+0x10>)
 8006284:	4803      	ldr	r0, [pc, #12]	@ (8006294 <stdio_exit_handler+0x14>)
 8006286:	f000 b869 	b.w	800635c <_fwalk_sglue>
 800628a:	bf00      	nop
 800628c:	2000000c 	.word	0x2000000c
 8006290:	080072d1 	.word	0x080072d1
 8006294:	2000001c 	.word	0x2000001c

08006298 <cleanup_stdio>:
 8006298:	6841      	ldr	r1, [r0, #4]
 800629a:	4b0c      	ldr	r3, [pc, #48]	@ (80062cc <cleanup_stdio+0x34>)
 800629c:	4299      	cmp	r1, r3
 800629e:	b510      	push	{r4, lr}
 80062a0:	4604      	mov	r4, r0
 80062a2:	d001      	beq.n	80062a8 <cleanup_stdio+0x10>
 80062a4:	f001 f814 	bl	80072d0 <_fflush_r>
 80062a8:	68a1      	ldr	r1, [r4, #8]
 80062aa:	4b09      	ldr	r3, [pc, #36]	@ (80062d0 <cleanup_stdio+0x38>)
 80062ac:	4299      	cmp	r1, r3
 80062ae:	d002      	beq.n	80062b6 <cleanup_stdio+0x1e>
 80062b0:	4620      	mov	r0, r4
 80062b2:	f001 f80d 	bl	80072d0 <_fflush_r>
 80062b6:	68e1      	ldr	r1, [r4, #12]
 80062b8:	4b06      	ldr	r3, [pc, #24]	@ (80062d4 <cleanup_stdio+0x3c>)
 80062ba:	4299      	cmp	r1, r3
 80062bc:	d004      	beq.n	80062c8 <cleanup_stdio+0x30>
 80062be:	4620      	mov	r0, r4
 80062c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062c4:	f001 b804 	b.w	80072d0 <_fflush_r>
 80062c8:	bd10      	pop	{r4, pc}
 80062ca:	bf00      	nop
 80062cc:	20001ac4 	.word	0x20001ac4
 80062d0:	20001b2c 	.word	0x20001b2c
 80062d4:	20001b94 	.word	0x20001b94

080062d8 <global_stdio_init.part.0>:
 80062d8:	b510      	push	{r4, lr}
 80062da:	4b0b      	ldr	r3, [pc, #44]	@ (8006308 <global_stdio_init.part.0+0x30>)
 80062dc:	4c0b      	ldr	r4, [pc, #44]	@ (800630c <global_stdio_init.part.0+0x34>)
 80062de:	4a0c      	ldr	r2, [pc, #48]	@ (8006310 <global_stdio_init.part.0+0x38>)
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	4620      	mov	r0, r4
 80062e4:	2200      	movs	r2, #0
 80062e6:	2104      	movs	r1, #4
 80062e8:	f7ff ff94 	bl	8006214 <std>
 80062ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80062f0:	2201      	movs	r2, #1
 80062f2:	2109      	movs	r1, #9
 80062f4:	f7ff ff8e 	bl	8006214 <std>
 80062f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80062fc:	2202      	movs	r2, #2
 80062fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006302:	2112      	movs	r1, #18
 8006304:	f7ff bf86 	b.w	8006214 <std>
 8006308:	20001bfc 	.word	0x20001bfc
 800630c:	20001ac4 	.word	0x20001ac4
 8006310:	08006281 	.word	0x08006281

08006314 <__sfp_lock_acquire>:
 8006314:	4801      	ldr	r0, [pc, #4]	@ (800631c <__sfp_lock_acquire+0x8>)
 8006316:	f000 ba34 	b.w	8006782 <__retarget_lock_acquire_recursive>
 800631a:	bf00      	nop
 800631c:	20001c05 	.word	0x20001c05

08006320 <__sfp_lock_release>:
 8006320:	4801      	ldr	r0, [pc, #4]	@ (8006328 <__sfp_lock_release+0x8>)
 8006322:	f000 ba2f 	b.w	8006784 <__retarget_lock_release_recursive>
 8006326:	bf00      	nop
 8006328:	20001c05 	.word	0x20001c05

0800632c <__sinit>:
 800632c:	b510      	push	{r4, lr}
 800632e:	4604      	mov	r4, r0
 8006330:	f7ff fff0 	bl	8006314 <__sfp_lock_acquire>
 8006334:	6a23      	ldr	r3, [r4, #32]
 8006336:	b11b      	cbz	r3, 8006340 <__sinit+0x14>
 8006338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800633c:	f7ff bff0 	b.w	8006320 <__sfp_lock_release>
 8006340:	4b04      	ldr	r3, [pc, #16]	@ (8006354 <__sinit+0x28>)
 8006342:	6223      	str	r3, [r4, #32]
 8006344:	4b04      	ldr	r3, [pc, #16]	@ (8006358 <__sinit+0x2c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1f5      	bne.n	8006338 <__sinit+0xc>
 800634c:	f7ff ffc4 	bl	80062d8 <global_stdio_init.part.0>
 8006350:	e7f2      	b.n	8006338 <__sinit+0xc>
 8006352:	bf00      	nop
 8006354:	08006299 	.word	0x08006299
 8006358:	20001bfc 	.word	0x20001bfc

0800635c <_fwalk_sglue>:
 800635c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006360:	4607      	mov	r7, r0
 8006362:	4688      	mov	r8, r1
 8006364:	4614      	mov	r4, r2
 8006366:	2600      	movs	r6, #0
 8006368:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800636c:	f1b9 0901 	subs.w	r9, r9, #1
 8006370:	d505      	bpl.n	800637e <_fwalk_sglue+0x22>
 8006372:	6824      	ldr	r4, [r4, #0]
 8006374:	2c00      	cmp	r4, #0
 8006376:	d1f7      	bne.n	8006368 <_fwalk_sglue+0xc>
 8006378:	4630      	mov	r0, r6
 800637a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800637e:	89ab      	ldrh	r3, [r5, #12]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d907      	bls.n	8006394 <_fwalk_sglue+0x38>
 8006384:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006388:	3301      	adds	r3, #1
 800638a:	d003      	beq.n	8006394 <_fwalk_sglue+0x38>
 800638c:	4629      	mov	r1, r5
 800638e:	4638      	mov	r0, r7
 8006390:	47c0      	blx	r8
 8006392:	4306      	orrs	r6, r0
 8006394:	3568      	adds	r5, #104	@ 0x68
 8006396:	e7e9      	b.n	800636c <_fwalk_sglue+0x10>

08006398 <iprintf>:
 8006398:	b40f      	push	{r0, r1, r2, r3}
 800639a:	b507      	push	{r0, r1, r2, lr}
 800639c:	4906      	ldr	r1, [pc, #24]	@ (80063b8 <iprintf+0x20>)
 800639e:	ab04      	add	r3, sp, #16
 80063a0:	6808      	ldr	r0, [r1, #0]
 80063a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80063a6:	6881      	ldr	r1, [r0, #8]
 80063a8:	9301      	str	r3, [sp, #4]
 80063aa:	f000 fc67 	bl	8006c7c <_vfiprintf_r>
 80063ae:	b003      	add	sp, #12
 80063b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80063b4:	b004      	add	sp, #16
 80063b6:	4770      	bx	lr
 80063b8:	20000018 	.word	0x20000018

080063bc <_puts_r>:
 80063bc:	6a03      	ldr	r3, [r0, #32]
 80063be:	b570      	push	{r4, r5, r6, lr}
 80063c0:	6884      	ldr	r4, [r0, #8]
 80063c2:	4605      	mov	r5, r0
 80063c4:	460e      	mov	r6, r1
 80063c6:	b90b      	cbnz	r3, 80063cc <_puts_r+0x10>
 80063c8:	f7ff ffb0 	bl	800632c <__sinit>
 80063cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063ce:	07db      	lsls	r3, r3, #31
 80063d0:	d405      	bmi.n	80063de <_puts_r+0x22>
 80063d2:	89a3      	ldrh	r3, [r4, #12]
 80063d4:	0598      	lsls	r0, r3, #22
 80063d6:	d402      	bmi.n	80063de <_puts_r+0x22>
 80063d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063da:	f000 f9d2 	bl	8006782 <__retarget_lock_acquire_recursive>
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	0719      	lsls	r1, r3, #28
 80063e2:	d502      	bpl.n	80063ea <_puts_r+0x2e>
 80063e4:	6923      	ldr	r3, [r4, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d135      	bne.n	8006456 <_puts_r+0x9a>
 80063ea:	4621      	mov	r1, r4
 80063ec:	4628      	mov	r0, r5
 80063ee:	f000 f8f9 	bl	80065e4 <__swsetup_r>
 80063f2:	b380      	cbz	r0, 8006456 <_puts_r+0x9a>
 80063f4:	f04f 35ff 	mov.w	r5, #4294967295
 80063f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063fa:	07da      	lsls	r2, r3, #31
 80063fc:	d405      	bmi.n	800640a <_puts_r+0x4e>
 80063fe:	89a3      	ldrh	r3, [r4, #12]
 8006400:	059b      	lsls	r3, r3, #22
 8006402:	d402      	bmi.n	800640a <_puts_r+0x4e>
 8006404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006406:	f000 f9bd 	bl	8006784 <__retarget_lock_release_recursive>
 800640a:	4628      	mov	r0, r5
 800640c:	bd70      	pop	{r4, r5, r6, pc}
 800640e:	2b00      	cmp	r3, #0
 8006410:	da04      	bge.n	800641c <_puts_r+0x60>
 8006412:	69a2      	ldr	r2, [r4, #24]
 8006414:	429a      	cmp	r2, r3
 8006416:	dc17      	bgt.n	8006448 <_puts_r+0x8c>
 8006418:	290a      	cmp	r1, #10
 800641a:	d015      	beq.n	8006448 <_puts_r+0x8c>
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	6022      	str	r2, [r4, #0]
 8006422:	7019      	strb	r1, [r3, #0]
 8006424:	68a3      	ldr	r3, [r4, #8]
 8006426:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800642a:	3b01      	subs	r3, #1
 800642c:	60a3      	str	r3, [r4, #8]
 800642e:	2900      	cmp	r1, #0
 8006430:	d1ed      	bne.n	800640e <_puts_r+0x52>
 8006432:	2b00      	cmp	r3, #0
 8006434:	da11      	bge.n	800645a <_puts_r+0x9e>
 8006436:	4622      	mov	r2, r4
 8006438:	210a      	movs	r1, #10
 800643a:	4628      	mov	r0, r5
 800643c:	f000 f893 	bl	8006566 <__swbuf_r>
 8006440:	3001      	adds	r0, #1
 8006442:	d0d7      	beq.n	80063f4 <_puts_r+0x38>
 8006444:	250a      	movs	r5, #10
 8006446:	e7d7      	b.n	80063f8 <_puts_r+0x3c>
 8006448:	4622      	mov	r2, r4
 800644a:	4628      	mov	r0, r5
 800644c:	f000 f88b 	bl	8006566 <__swbuf_r>
 8006450:	3001      	adds	r0, #1
 8006452:	d1e7      	bne.n	8006424 <_puts_r+0x68>
 8006454:	e7ce      	b.n	80063f4 <_puts_r+0x38>
 8006456:	3e01      	subs	r6, #1
 8006458:	e7e4      	b.n	8006424 <_puts_r+0x68>
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	6022      	str	r2, [r4, #0]
 8006460:	220a      	movs	r2, #10
 8006462:	701a      	strb	r2, [r3, #0]
 8006464:	e7ee      	b.n	8006444 <_puts_r+0x88>
	...

08006468 <puts>:
 8006468:	4b02      	ldr	r3, [pc, #8]	@ (8006474 <puts+0xc>)
 800646a:	4601      	mov	r1, r0
 800646c:	6818      	ldr	r0, [r3, #0]
 800646e:	f7ff bfa5 	b.w	80063bc <_puts_r>
 8006472:	bf00      	nop
 8006474:	20000018 	.word	0x20000018

08006478 <sniprintf>:
 8006478:	b40c      	push	{r2, r3}
 800647a:	b530      	push	{r4, r5, lr}
 800647c:	4b17      	ldr	r3, [pc, #92]	@ (80064dc <sniprintf+0x64>)
 800647e:	1e0c      	subs	r4, r1, #0
 8006480:	681d      	ldr	r5, [r3, #0]
 8006482:	b09d      	sub	sp, #116	@ 0x74
 8006484:	da08      	bge.n	8006498 <sniprintf+0x20>
 8006486:	238b      	movs	r3, #139	@ 0x8b
 8006488:	602b      	str	r3, [r5, #0]
 800648a:	f04f 30ff 	mov.w	r0, #4294967295
 800648e:	b01d      	add	sp, #116	@ 0x74
 8006490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006494:	b002      	add	sp, #8
 8006496:	4770      	bx	lr
 8006498:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800649c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80064a0:	bf14      	ite	ne
 80064a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80064a6:	4623      	moveq	r3, r4
 80064a8:	9304      	str	r3, [sp, #16]
 80064aa:	9307      	str	r3, [sp, #28]
 80064ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80064b0:	9002      	str	r0, [sp, #8]
 80064b2:	9006      	str	r0, [sp, #24]
 80064b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80064b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80064ba:	ab21      	add	r3, sp, #132	@ 0x84
 80064bc:	a902      	add	r1, sp, #8
 80064be:	4628      	mov	r0, r5
 80064c0:	9301      	str	r3, [sp, #4]
 80064c2:	f000 fab5 	bl	8006a30 <_svfiprintf_r>
 80064c6:	1c43      	adds	r3, r0, #1
 80064c8:	bfbc      	itt	lt
 80064ca:	238b      	movlt	r3, #139	@ 0x8b
 80064cc:	602b      	strlt	r3, [r5, #0]
 80064ce:	2c00      	cmp	r4, #0
 80064d0:	d0dd      	beq.n	800648e <sniprintf+0x16>
 80064d2:	9b02      	ldr	r3, [sp, #8]
 80064d4:	2200      	movs	r2, #0
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	e7d9      	b.n	800648e <sniprintf+0x16>
 80064da:	bf00      	nop
 80064dc:	20000018 	.word	0x20000018

080064e0 <__sread>:
 80064e0:	b510      	push	{r4, lr}
 80064e2:	460c      	mov	r4, r1
 80064e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064e8:	f000 f8fc 	bl	80066e4 <_read_r>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	bfab      	itete	ge
 80064f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064f2:	89a3      	ldrhlt	r3, [r4, #12]
 80064f4:	181b      	addge	r3, r3, r0
 80064f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80064fa:	bfac      	ite	ge
 80064fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80064fe:	81a3      	strhlt	r3, [r4, #12]
 8006500:	bd10      	pop	{r4, pc}

08006502 <__swrite>:
 8006502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006506:	461f      	mov	r7, r3
 8006508:	898b      	ldrh	r3, [r1, #12]
 800650a:	05db      	lsls	r3, r3, #23
 800650c:	4605      	mov	r5, r0
 800650e:	460c      	mov	r4, r1
 8006510:	4616      	mov	r6, r2
 8006512:	d505      	bpl.n	8006520 <__swrite+0x1e>
 8006514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006518:	2302      	movs	r3, #2
 800651a:	2200      	movs	r2, #0
 800651c:	f000 f8d0 	bl	80066c0 <_lseek_r>
 8006520:	89a3      	ldrh	r3, [r4, #12]
 8006522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006526:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800652a:	81a3      	strh	r3, [r4, #12]
 800652c:	4632      	mov	r2, r6
 800652e:	463b      	mov	r3, r7
 8006530:	4628      	mov	r0, r5
 8006532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006536:	f000 b8e7 	b.w	8006708 <_write_r>

0800653a <__sseek>:
 800653a:	b510      	push	{r4, lr}
 800653c:	460c      	mov	r4, r1
 800653e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006542:	f000 f8bd 	bl	80066c0 <_lseek_r>
 8006546:	1c43      	adds	r3, r0, #1
 8006548:	89a3      	ldrh	r3, [r4, #12]
 800654a:	bf15      	itete	ne
 800654c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800654e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006552:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006556:	81a3      	strheq	r3, [r4, #12]
 8006558:	bf18      	it	ne
 800655a:	81a3      	strhne	r3, [r4, #12]
 800655c:	bd10      	pop	{r4, pc}

0800655e <__sclose>:
 800655e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006562:	f000 b89d 	b.w	80066a0 <_close_r>

08006566 <__swbuf_r>:
 8006566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006568:	460e      	mov	r6, r1
 800656a:	4614      	mov	r4, r2
 800656c:	4605      	mov	r5, r0
 800656e:	b118      	cbz	r0, 8006578 <__swbuf_r+0x12>
 8006570:	6a03      	ldr	r3, [r0, #32]
 8006572:	b90b      	cbnz	r3, 8006578 <__swbuf_r+0x12>
 8006574:	f7ff feda 	bl	800632c <__sinit>
 8006578:	69a3      	ldr	r3, [r4, #24]
 800657a:	60a3      	str	r3, [r4, #8]
 800657c:	89a3      	ldrh	r3, [r4, #12]
 800657e:	071a      	lsls	r2, r3, #28
 8006580:	d501      	bpl.n	8006586 <__swbuf_r+0x20>
 8006582:	6923      	ldr	r3, [r4, #16]
 8006584:	b943      	cbnz	r3, 8006598 <__swbuf_r+0x32>
 8006586:	4621      	mov	r1, r4
 8006588:	4628      	mov	r0, r5
 800658a:	f000 f82b 	bl	80065e4 <__swsetup_r>
 800658e:	b118      	cbz	r0, 8006598 <__swbuf_r+0x32>
 8006590:	f04f 37ff 	mov.w	r7, #4294967295
 8006594:	4638      	mov	r0, r7
 8006596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	6922      	ldr	r2, [r4, #16]
 800659c:	1a98      	subs	r0, r3, r2
 800659e:	6963      	ldr	r3, [r4, #20]
 80065a0:	b2f6      	uxtb	r6, r6
 80065a2:	4283      	cmp	r3, r0
 80065a4:	4637      	mov	r7, r6
 80065a6:	dc05      	bgt.n	80065b4 <__swbuf_r+0x4e>
 80065a8:	4621      	mov	r1, r4
 80065aa:	4628      	mov	r0, r5
 80065ac:	f000 fe90 	bl	80072d0 <_fflush_r>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	d1ed      	bne.n	8006590 <__swbuf_r+0x2a>
 80065b4:	68a3      	ldr	r3, [r4, #8]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	60a3      	str	r3, [r4, #8]
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	6022      	str	r2, [r4, #0]
 80065c0:	701e      	strb	r6, [r3, #0]
 80065c2:	6962      	ldr	r2, [r4, #20]
 80065c4:	1c43      	adds	r3, r0, #1
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d004      	beq.n	80065d4 <__swbuf_r+0x6e>
 80065ca:	89a3      	ldrh	r3, [r4, #12]
 80065cc:	07db      	lsls	r3, r3, #31
 80065ce:	d5e1      	bpl.n	8006594 <__swbuf_r+0x2e>
 80065d0:	2e0a      	cmp	r6, #10
 80065d2:	d1df      	bne.n	8006594 <__swbuf_r+0x2e>
 80065d4:	4621      	mov	r1, r4
 80065d6:	4628      	mov	r0, r5
 80065d8:	f000 fe7a 	bl	80072d0 <_fflush_r>
 80065dc:	2800      	cmp	r0, #0
 80065de:	d0d9      	beq.n	8006594 <__swbuf_r+0x2e>
 80065e0:	e7d6      	b.n	8006590 <__swbuf_r+0x2a>
	...

080065e4 <__swsetup_r>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	4b29      	ldr	r3, [pc, #164]	@ (800668c <__swsetup_r+0xa8>)
 80065e8:	4605      	mov	r5, r0
 80065ea:	6818      	ldr	r0, [r3, #0]
 80065ec:	460c      	mov	r4, r1
 80065ee:	b118      	cbz	r0, 80065f8 <__swsetup_r+0x14>
 80065f0:	6a03      	ldr	r3, [r0, #32]
 80065f2:	b90b      	cbnz	r3, 80065f8 <__swsetup_r+0x14>
 80065f4:	f7ff fe9a 	bl	800632c <__sinit>
 80065f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065fc:	0719      	lsls	r1, r3, #28
 80065fe:	d422      	bmi.n	8006646 <__swsetup_r+0x62>
 8006600:	06da      	lsls	r2, r3, #27
 8006602:	d407      	bmi.n	8006614 <__swsetup_r+0x30>
 8006604:	2209      	movs	r2, #9
 8006606:	602a      	str	r2, [r5, #0]
 8006608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800660c:	81a3      	strh	r3, [r4, #12]
 800660e:	f04f 30ff 	mov.w	r0, #4294967295
 8006612:	e033      	b.n	800667c <__swsetup_r+0x98>
 8006614:	0758      	lsls	r0, r3, #29
 8006616:	d512      	bpl.n	800663e <__swsetup_r+0x5a>
 8006618:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800661a:	b141      	cbz	r1, 800662e <__swsetup_r+0x4a>
 800661c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006620:	4299      	cmp	r1, r3
 8006622:	d002      	beq.n	800662a <__swsetup_r+0x46>
 8006624:	4628      	mov	r0, r5
 8006626:	f000 f8af 	bl	8006788 <_free_r>
 800662a:	2300      	movs	r3, #0
 800662c:	6363      	str	r3, [r4, #52]	@ 0x34
 800662e:	89a3      	ldrh	r3, [r4, #12]
 8006630:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006634:	81a3      	strh	r3, [r4, #12]
 8006636:	2300      	movs	r3, #0
 8006638:	6063      	str	r3, [r4, #4]
 800663a:	6923      	ldr	r3, [r4, #16]
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	89a3      	ldrh	r3, [r4, #12]
 8006640:	f043 0308 	orr.w	r3, r3, #8
 8006644:	81a3      	strh	r3, [r4, #12]
 8006646:	6923      	ldr	r3, [r4, #16]
 8006648:	b94b      	cbnz	r3, 800665e <__swsetup_r+0x7a>
 800664a:	89a3      	ldrh	r3, [r4, #12]
 800664c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006654:	d003      	beq.n	800665e <__swsetup_r+0x7a>
 8006656:	4621      	mov	r1, r4
 8006658:	4628      	mov	r0, r5
 800665a:	f000 fe87 	bl	800736c <__smakebuf_r>
 800665e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006662:	f013 0201 	ands.w	r2, r3, #1
 8006666:	d00a      	beq.n	800667e <__swsetup_r+0x9a>
 8006668:	2200      	movs	r2, #0
 800666a:	60a2      	str	r2, [r4, #8]
 800666c:	6962      	ldr	r2, [r4, #20]
 800666e:	4252      	negs	r2, r2
 8006670:	61a2      	str	r2, [r4, #24]
 8006672:	6922      	ldr	r2, [r4, #16]
 8006674:	b942      	cbnz	r2, 8006688 <__swsetup_r+0xa4>
 8006676:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800667a:	d1c5      	bne.n	8006608 <__swsetup_r+0x24>
 800667c:	bd38      	pop	{r3, r4, r5, pc}
 800667e:	0799      	lsls	r1, r3, #30
 8006680:	bf58      	it	pl
 8006682:	6962      	ldrpl	r2, [r4, #20]
 8006684:	60a2      	str	r2, [r4, #8]
 8006686:	e7f4      	b.n	8006672 <__swsetup_r+0x8e>
 8006688:	2000      	movs	r0, #0
 800668a:	e7f7      	b.n	800667c <__swsetup_r+0x98>
 800668c:	20000018 	.word	0x20000018

08006690 <memset>:
 8006690:	4402      	add	r2, r0
 8006692:	4603      	mov	r3, r0
 8006694:	4293      	cmp	r3, r2
 8006696:	d100      	bne.n	800669a <memset+0xa>
 8006698:	4770      	bx	lr
 800669a:	f803 1b01 	strb.w	r1, [r3], #1
 800669e:	e7f9      	b.n	8006694 <memset+0x4>

080066a0 <_close_r>:
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	4d06      	ldr	r5, [pc, #24]	@ (80066bc <_close_r+0x1c>)
 80066a4:	2300      	movs	r3, #0
 80066a6:	4604      	mov	r4, r0
 80066a8:	4608      	mov	r0, r1
 80066aa:	602b      	str	r3, [r5, #0]
 80066ac:	f7fb f8ef 	bl	800188e <_close>
 80066b0:	1c43      	adds	r3, r0, #1
 80066b2:	d102      	bne.n	80066ba <_close_r+0x1a>
 80066b4:	682b      	ldr	r3, [r5, #0]
 80066b6:	b103      	cbz	r3, 80066ba <_close_r+0x1a>
 80066b8:	6023      	str	r3, [r4, #0]
 80066ba:	bd38      	pop	{r3, r4, r5, pc}
 80066bc:	20001c00 	.word	0x20001c00

080066c0 <_lseek_r>:
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	4d07      	ldr	r5, [pc, #28]	@ (80066e0 <_lseek_r+0x20>)
 80066c4:	4604      	mov	r4, r0
 80066c6:	4608      	mov	r0, r1
 80066c8:	4611      	mov	r1, r2
 80066ca:	2200      	movs	r2, #0
 80066cc:	602a      	str	r2, [r5, #0]
 80066ce:	461a      	mov	r2, r3
 80066d0:	f7fb f904 	bl	80018dc <_lseek>
 80066d4:	1c43      	adds	r3, r0, #1
 80066d6:	d102      	bne.n	80066de <_lseek_r+0x1e>
 80066d8:	682b      	ldr	r3, [r5, #0]
 80066da:	b103      	cbz	r3, 80066de <_lseek_r+0x1e>
 80066dc:	6023      	str	r3, [r4, #0]
 80066de:	bd38      	pop	{r3, r4, r5, pc}
 80066e0:	20001c00 	.word	0x20001c00

080066e4 <_read_r>:
 80066e4:	b538      	push	{r3, r4, r5, lr}
 80066e6:	4d07      	ldr	r5, [pc, #28]	@ (8006704 <_read_r+0x20>)
 80066e8:	4604      	mov	r4, r0
 80066ea:	4608      	mov	r0, r1
 80066ec:	4611      	mov	r1, r2
 80066ee:	2200      	movs	r2, #0
 80066f0:	602a      	str	r2, [r5, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	f7fb f892 	bl	800181c <_read>
 80066f8:	1c43      	adds	r3, r0, #1
 80066fa:	d102      	bne.n	8006702 <_read_r+0x1e>
 80066fc:	682b      	ldr	r3, [r5, #0]
 80066fe:	b103      	cbz	r3, 8006702 <_read_r+0x1e>
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	bd38      	pop	{r3, r4, r5, pc}
 8006704:	20001c00 	.word	0x20001c00

08006708 <_write_r>:
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	4d07      	ldr	r5, [pc, #28]	@ (8006728 <_write_r+0x20>)
 800670c:	4604      	mov	r4, r0
 800670e:	4608      	mov	r0, r1
 8006710:	4611      	mov	r1, r2
 8006712:	2200      	movs	r2, #0
 8006714:	602a      	str	r2, [r5, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	f7fb f89d 	bl	8001856 <_write>
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	d102      	bne.n	8006726 <_write_r+0x1e>
 8006720:	682b      	ldr	r3, [r5, #0]
 8006722:	b103      	cbz	r3, 8006726 <_write_r+0x1e>
 8006724:	6023      	str	r3, [r4, #0]
 8006726:	bd38      	pop	{r3, r4, r5, pc}
 8006728:	20001c00 	.word	0x20001c00

0800672c <__errno>:
 800672c:	4b01      	ldr	r3, [pc, #4]	@ (8006734 <__errno+0x8>)
 800672e:	6818      	ldr	r0, [r3, #0]
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	20000018 	.word	0x20000018

08006738 <__libc_init_array>:
 8006738:	b570      	push	{r4, r5, r6, lr}
 800673a:	4d0d      	ldr	r5, [pc, #52]	@ (8006770 <__libc_init_array+0x38>)
 800673c:	4c0d      	ldr	r4, [pc, #52]	@ (8006774 <__libc_init_array+0x3c>)
 800673e:	1b64      	subs	r4, r4, r5
 8006740:	10a4      	asrs	r4, r4, #2
 8006742:	2600      	movs	r6, #0
 8006744:	42a6      	cmp	r6, r4
 8006746:	d109      	bne.n	800675c <__libc_init_array+0x24>
 8006748:	4d0b      	ldr	r5, [pc, #44]	@ (8006778 <__libc_init_array+0x40>)
 800674a:	4c0c      	ldr	r4, [pc, #48]	@ (800677c <__libc_init_array+0x44>)
 800674c:	f001 f8c2 	bl	80078d4 <_init>
 8006750:	1b64      	subs	r4, r4, r5
 8006752:	10a4      	asrs	r4, r4, #2
 8006754:	2600      	movs	r6, #0
 8006756:	42a6      	cmp	r6, r4
 8006758:	d105      	bne.n	8006766 <__libc_init_array+0x2e>
 800675a:	bd70      	pop	{r4, r5, r6, pc}
 800675c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006760:	4798      	blx	r3
 8006762:	3601      	adds	r6, #1
 8006764:	e7ee      	b.n	8006744 <__libc_init_array+0xc>
 8006766:	f855 3b04 	ldr.w	r3, [r5], #4
 800676a:	4798      	blx	r3
 800676c:	3601      	adds	r6, #1
 800676e:	e7f2      	b.n	8006756 <__libc_init_array+0x1e>
 8006770:	08007a28 	.word	0x08007a28
 8006774:	08007a28 	.word	0x08007a28
 8006778:	08007a28 	.word	0x08007a28
 800677c:	08007a2c 	.word	0x08007a2c

08006780 <__retarget_lock_init_recursive>:
 8006780:	4770      	bx	lr

08006782 <__retarget_lock_acquire_recursive>:
 8006782:	4770      	bx	lr

08006784 <__retarget_lock_release_recursive>:
 8006784:	4770      	bx	lr
	...

08006788 <_free_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	4605      	mov	r5, r0
 800678c:	2900      	cmp	r1, #0
 800678e:	d041      	beq.n	8006814 <_free_r+0x8c>
 8006790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006794:	1f0c      	subs	r4, r1, #4
 8006796:	2b00      	cmp	r3, #0
 8006798:	bfb8      	it	lt
 800679a:	18e4      	addlt	r4, r4, r3
 800679c:	f000 f8e0 	bl	8006960 <__malloc_lock>
 80067a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006818 <_free_r+0x90>)
 80067a2:	6813      	ldr	r3, [r2, #0]
 80067a4:	b933      	cbnz	r3, 80067b4 <_free_r+0x2c>
 80067a6:	6063      	str	r3, [r4, #4]
 80067a8:	6014      	str	r4, [r2, #0]
 80067aa:	4628      	mov	r0, r5
 80067ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067b0:	f000 b8dc 	b.w	800696c <__malloc_unlock>
 80067b4:	42a3      	cmp	r3, r4
 80067b6:	d908      	bls.n	80067ca <_free_r+0x42>
 80067b8:	6820      	ldr	r0, [r4, #0]
 80067ba:	1821      	adds	r1, r4, r0
 80067bc:	428b      	cmp	r3, r1
 80067be:	bf01      	itttt	eq
 80067c0:	6819      	ldreq	r1, [r3, #0]
 80067c2:	685b      	ldreq	r3, [r3, #4]
 80067c4:	1809      	addeq	r1, r1, r0
 80067c6:	6021      	streq	r1, [r4, #0]
 80067c8:	e7ed      	b.n	80067a6 <_free_r+0x1e>
 80067ca:	461a      	mov	r2, r3
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	b10b      	cbz	r3, 80067d4 <_free_r+0x4c>
 80067d0:	42a3      	cmp	r3, r4
 80067d2:	d9fa      	bls.n	80067ca <_free_r+0x42>
 80067d4:	6811      	ldr	r1, [r2, #0]
 80067d6:	1850      	adds	r0, r2, r1
 80067d8:	42a0      	cmp	r0, r4
 80067da:	d10b      	bne.n	80067f4 <_free_r+0x6c>
 80067dc:	6820      	ldr	r0, [r4, #0]
 80067de:	4401      	add	r1, r0
 80067e0:	1850      	adds	r0, r2, r1
 80067e2:	4283      	cmp	r3, r0
 80067e4:	6011      	str	r1, [r2, #0]
 80067e6:	d1e0      	bne.n	80067aa <_free_r+0x22>
 80067e8:	6818      	ldr	r0, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	6053      	str	r3, [r2, #4]
 80067ee:	4408      	add	r0, r1
 80067f0:	6010      	str	r0, [r2, #0]
 80067f2:	e7da      	b.n	80067aa <_free_r+0x22>
 80067f4:	d902      	bls.n	80067fc <_free_r+0x74>
 80067f6:	230c      	movs	r3, #12
 80067f8:	602b      	str	r3, [r5, #0]
 80067fa:	e7d6      	b.n	80067aa <_free_r+0x22>
 80067fc:	6820      	ldr	r0, [r4, #0]
 80067fe:	1821      	adds	r1, r4, r0
 8006800:	428b      	cmp	r3, r1
 8006802:	bf04      	itt	eq
 8006804:	6819      	ldreq	r1, [r3, #0]
 8006806:	685b      	ldreq	r3, [r3, #4]
 8006808:	6063      	str	r3, [r4, #4]
 800680a:	bf04      	itt	eq
 800680c:	1809      	addeq	r1, r1, r0
 800680e:	6021      	streq	r1, [r4, #0]
 8006810:	6054      	str	r4, [r2, #4]
 8006812:	e7ca      	b.n	80067aa <_free_r+0x22>
 8006814:	bd38      	pop	{r3, r4, r5, pc}
 8006816:	bf00      	nop
 8006818:	20001c0c 	.word	0x20001c0c

0800681c <sbrk_aligned>:
 800681c:	b570      	push	{r4, r5, r6, lr}
 800681e:	4e0f      	ldr	r6, [pc, #60]	@ (800685c <sbrk_aligned+0x40>)
 8006820:	460c      	mov	r4, r1
 8006822:	6831      	ldr	r1, [r6, #0]
 8006824:	4605      	mov	r5, r0
 8006826:	b911      	cbnz	r1, 800682e <sbrk_aligned+0x12>
 8006828:	f000 fe18 	bl	800745c <_sbrk_r>
 800682c:	6030      	str	r0, [r6, #0]
 800682e:	4621      	mov	r1, r4
 8006830:	4628      	mov	r0, r5
 8006832:	f000 fe13 	bl	800745c <_sbrk_r>
 8006836:	1c43      	adds	r3, r0, #1
 8006838:	d103      	bne.n	8006842 <sbrk_aligned+0x26>
 800683a:	f04f 34ff 	mov.w	r4, #4294967295
 800683e:	4620      	mov	r0, r4
 8006840:	bd70      	pop	{r4, r5, r6, pc}
 8006842:	1cc4      	adds	r4, r0, #3
 8006844:	f024 0403 	bic.w	r4, r4, #3
 8006848:	42a0      	cmp	r0, r4
 800684a:	d0f8      	beq.n	800683e <sbrk_aligned+0x22>
 800684c:	1a21      	subs	r1, r4, r0
 800684e:	4628      	mov	r0, r5
 8006850:	f000 fe04 	bl	800745c <_sbrk_r>
 8006854:	3001      	adds	r0, #1
 8006856:	d1f2      	bne.n	800683e <sbrk_aligned+0x22>
 8006858:	e7ef      	b.n	800683a <sbrk_aligned+0x1e>
 800685a:	bf00      	nop
 800685c:	20001c08 	.word	0x20001c08

08006860 <_malloc_r>:
 8006860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006864:	1ccd      	adds	r5, r1, #3
 8006866:	f025 0503 	bic.w	r5, r5, #3
 800686a:	3508      	adds	r5, #8
 800686c:	2d0c      	cmp	r5, #12
 800686e:	bf38      	it	cc
 8006870:	250c      	movcc	r5, #12
 8006872:	2d00      	cmp	r5, #0
 8006874:	4606      	mov	r6, r0
 8006876:	db01      	blt.n	800687c <_malloc_r+0x1c>
 8006878:	42a9      	cmp	r1, r5
 800687a:	d904      	bls.n	8006886 <_malloc_r+0x26>
 800687c:	230c      	movs	r3, #12
 800687e:	6033      	str	r3, [r6, #0]
 8006880:	2000      	movs	r0, #0
 8006882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006886:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800695c <_malloc_r+0xfc>
 800688a:	f000 f869 	bl	8006960 <__malloc_lock>
 800688e:	f8d8 3000 	ldr.w	r3, [r8]
 8006892:	461c      	mov	r4, r3
 8006894:	bb44      	cbnz	r4, 80068e8 <_malloc_r+0x88>
 8006896:	4629      	mov	r1, r5
 8006898:	4630      	mov	r0, r6
 800689a:	f7ff ffbf 	bl	800681c <sbrk_aligned>
 800689e:	1c43      	adds	r3, r0, #1
 80068a0:	4604      	mov	r4, r0
 80068a2:	d158      	bne.n	8006956 <_malloc_r+0xf6>
 80068a4:	f8d8 4000 	ldr.w	r4, [r8]
 80068a8:	4627      	mov	r7, r4
 80068aa:	2f00      	cmp	r7, #0
 80068ac:	d143      	bne.n	8006936 <_malloc_r+0xd6>
 80068ae:	2c00      	cmp	r4, #0
 80068b0:	d04b      	beq.n	800694a <_malloc_r+0xea>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	4639      	mov	r1, r7
 80068b6:	4630      	mov	r0, r6
 80068b8:	eb04 0903 	add.w	r9, r4, r3
 80068bc:	f000 fdce 	bl	800745c <_sbrk_r>
 80068c0:	4581      	cmp	r9, r0
 80068c2:	d142      	bne.n	800694a <_malloc_r+0xea>
 80068c4:	6821      	ldr	r1, [r4, #0]
 80068c6:	1a6d      	subs	r5, r5, r1
 80068c8:	4629      	mov	r1, r5
 80068ca:	4630      	mov	r0, r6
 80068cc:	f7ff ffa6 	bl	800681c <sbrk_aligned>
 80068d0:	3001      	adds	r0, #1
 80068d2:	d03a      	beq.n	800694a <_malloc_r+0xea>
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	442b      	add	r3, r5
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	f8d8 3000 	ldr.w	r3, [r8]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	bb62      	cbnz	r2, 800693c <_malloc_r+0xdc>
 80068e2:	f8c8 7000 	str.w	r7, [r8]
 80068e6:	e00f      	b.n	8006908 <_malloc_r+0xa8>
 80068e8:	6822      	ldr	r2, [r4, #0]
 80068ea:	1b52      	subs	r2, r2, r5
 80068ec:	d420      	bmi.n	8006930 <_malloc_r+0xd0>
 80068ee:	2a0b      	cmp	r2, #11
 80068f0:	d917      	bls.n	8006922 <_malloc_r+0xc2>
 80068f2:	1961      	adds	r1, r4, r5
 80068f4:	42a3      	cmp	r3, r4
 80068f6:	6025      	str	r5, [r4, #0]
 80068f8:	bf18      	it	ne
 80068fa:	6059      	strne	r1, [r3, #4]
 80068fc:	6863      	ldr	r3, [r4, #4]
 80068fe:	bf08      	it	eq
 8006900:	f8c8 1000 	streq.w	r1, [r8]
 8006904:	5162      	str	r2, [r4, r5]
 8006906:	604b      	str	r3, [r1, #4]
 8006908:	4630      	mov	r0, r6
 800690a:	f000 f82f 	bl	800696c <__malloc_unlock>
 800690e:	f104 000b 	add.w	r0, r4, #11
 8006912:	1d23      	adds	r3, r4, #4
 8006914:	f020 0007 	bic.w	r0, r0, #7
 8006918:	1ac2      	subs	r2, r0, r3
 800691a:	bf1c      	itt	ne
 800691c:	1a1b      	subne	r3, r3, r0
 800691e:	50a3      	strne	r3, [r4, r2]
 8006920:	e7af      	b.n	8006882 <_malloc_r+0x22>
 8006922:	6862      	ldr	r2, [r4, #4]
 8006924:	42a3      	cmp	r3, r4
 8006926:	bf0c      	ite	eq
 8006928:	f8c8 2000 	streq.w	r2, [r8]
 800692c:	605a      	strne	r2, [r3, #4]
 800692e:	e7eb      	b.n	8006908 <_malloc_r+0xa8>
 8006930:	4623      	mov	r3, r4
 8006932:	6864      	ldr	r4, [r4, #4]
 8006934:	e7ae      	b.n	8006894 <_malloc_r+0x34>
 8006936:	463c      	mov	r4, r7
 8006938:	687f      	ldr	r7, [r7, #4]
 800693a:	e7b6      	b.n	80068aa <_malloc_r+0x4a>
 800693c:	461a      	mov	r2, r3
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	42a3      	cmp	r3, r4
 8006942:	d1fb      	bne.n	800693c <_malloc_r+0xdc>
 8006944:	2300      	movs	r3, #0
 8006946:	6053      	str	r3, [r2, #4]
 8006948:	e7de      	b.n	8006908 <_malloc_r+0xa8>
 800694a:	230c      	movs	r3, #12
 800694c:	6033      	str	r3, [r6, #0]
 800694e:	4630      	mov	r0, r6
 8006950:	f000 f80c 	bl	800696c <__malloc_unlock>
 8006954:	e794      	b.n	8006880 <_malloc_r+0x20>
 8006956:	6005      	str	r5, [r0, #0]
 8006958:	e7d6      	b.n	8006908 <_malloc_r+0xa8>
 800695a:	bf00      	nop
 800695c:	20001c0c 	.word	0x20001c0c

08006960 <__malloc_lock>:
 8006960:	4801      	ldr	r0, [pc, #4]	@ (8006968 <__malloc_lock+0x8>)
 8006962:	f7ff bf0e 	b.w	8006782 <__retarget_lock_acquire_recursive>
 8006966:	bf00      	nop
 8006968:	20001c04 	.word	0x20001c04

0800696c <__malloc_unlock>:
 800696c:	4801      	ldr	r0, [pc, #4]	@ (8006974 <__malloc_unlock+0x8>)
 800696e:	f7ff bf09 	b.w	8006784 <__retarget_lock_release_recursive>
 8006972:	bf00      	nop
 8006974:	20001c04 	.word	0x20001c04

08006978 <__ssputs_r>:
 8006978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800697c:	688e      	ldr	r6, [r1, #8]
 800697e:	461f      	mov	r7, r3
 8006980:	42be      	cmp	r6, r7
 8006982:	680b      	ldr	r3, [r1, #0]
 8006984:	4682      	mov	sl, r0
 8006986:	460c      	mov	r4, r1
 8006988:	4690      	mov	r8, r2
 800698a:	d82d      	bhi.n	80069e8 <__ssputs_r+0x70>
 800698c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006990:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006994:	d026      	beq.n	80069e4 <__ssputs_r+0x6c>
 8006996:	6965      	ldr	r5, [r4, #20]
 8006998:	6909      	ldr	r1, [r1, #16]
 800699a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800699e:	eba3 0901 	sub.w	r9, r3, r1
 80069a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069a6:	1c7b      	adds	r3, r7, #1
 80069a8:	444b      	add	r3, r9
 80069aa:	106d      	asrs	r5, r5, #1
 80069ac:	429d      	cmp	r5, r3
 80069ae:	bf38      	it	cc
 80069b0:	461d      	movcc	r5, r3
 80069b2:	0553      	lsls	r3, r2, #21
 80069b4:	d527      	bpl.n	8006a06 <__ssputs_r+0x8e>
 80069b6:	4629      	mov	r1, r5
 80069b8:	f7ff ff52 	bl	8006860 <_malloc_r>
 80069bc:	4606      	mov	r6, r0
 80069be:	b360      	cbz	r0, 8006a1a <__ssputs_r+0xa2>
 80069c0:	6921      	ldr	r1, [r4, #16]
 80069c2:	464a      	mov	r2, r9
 80069c4:	f000 fd5a 	bl	800747c <memcpy>
 80069c8:	89a3      	ldrh	r3, [r4, #12]
 80069ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80069ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069d2:	81a3      	strh	r3, [r4, #12]
 80069d4:	6126      	str	r6, [r4, #16]
 80069d6:	6165      	str	r5, [r4, #20]
 80069d8:	444e      	add	r6, r9
 80069da:	eba5 0509 	sub.w	r5, r5, r9
 80069de:	6026      	str	r6, [r4, #0]
 80069e0:	60a5      	str	r5, [r4, #8]
 80069e2:	463e      	mov	r6, r7
 80069e4:	42be      	cmp	r6, r7
 80069e6:	d900      	bls.n	80069ea <__ssputs_r+0x72>
 80069e8:	463e      	mov	r6, r7
 80069ea:	6820      	ldr	r0, [r4, #0]
 80069ec:	4632      	mov	r2, r6
 80069ee:	4641      	mov	r1, r8
 80069f0:	f000 fcf8 	bl	80073e4 <memmove>
 80069f4:	68a3      	ldr	r3, [r4, #8]
 80069f6:	1b9b      	subs	r3, r3, r6
 80069f8:	60a3      	str	r3, [r4, #8]
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	4433      	add	r3, r6
 80069fe:	6023      	str	r3, [r4, #0]
 8006a00:	2000      	movs	r0, #0
 8006a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a06:	462a      	mov	r2, r5
 8006a08:	f000 fd46 	bl	8007498 <_realloc_r>
 8006a0c:	4606      	mov	r6, r0
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	d1e0      	bne.n	80069d4 <__ssputs_r+0x5c>
 8006a12:	6921      	ldr	r1, [r4, #16]
 8006a14:	4650      	mov	r0, sl
 8006a16:	f7ff feb7 	bl	8006788 <_free_r>
 8006a1a:	230c      	movs	r3, #12
 8006a1c:	f8ca 3000 	str.w	r3, [sl]
 8006a20:	89a3      	ldrh	r3, [r4, #12]
 8006a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a26:	81a3      	strh	r3, [r4, #12]
 8006a28:	f04f 30ff 	mov.w	r0, #4294967295
 8006a2c:	e7e9      	b.n	8006a02 <__ssputs_r+0x8a>
	...

08006a30 <_svfiprintf_r>:
 8006a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a34:	4698      	mov	r8, r3
 8006a36:	898b      	ldrh	r3, [r1, #12]
 8006a38:	061b      	lsls	r3, r3, #24
 8006a3a:	b09d      	sub	sp, #116	@ 0x74
 8006a3c:	4607      	mov	r7, r0
 8006a3e:	460d      	mov	r5, r1
 8006a40:	4614      	mov	r4, r2
 8006a42:	d510      	bpl.n	8006a66 <_svfiprintf_r+0x36>
 8006a44:	690b      	ldr	r3, [r1, #16]
 8006a46:	b973      	cbnz	r3, 8006a66 <_svfiprintf_r+0x36>
 8006a48:	2140      	movs	r1, #64	@ 0x40
 8006a4a:	f7ff ff09 	bl	8006860 <_malloc_r>
 8006a4e:	6028      	str	r0, [r5, #0]
 8006a50:	6128      	str	r0, [r5, #16]
 8006a52:	b930      	cbnz	r0, 8006a62 <_svfiprintf_r+0x32>
 8006a54:	230c      	movs	r3, #12
 8006a56:	603b      	str	r3, [r7, #0]
 8006a58:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5c:	b01d      	add	sp, #116	@ 0x74
 8006a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a62:	2340      	movs	r3, #64	@ 0x40
 8006a64:	616b      	str	r3, [r5, #20]
 8006a66:	2300      	movs	r3, #0
 8006a68:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a6a:	2320      	movs	r3, #32
 8006a6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a70:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a74:	2330      	movs	r3, #48	@ 0x30
 8006a76:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006c14 <_svfiprintf_r+0x1e4>
 8006a7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a7e:	f04f 0901 	mov.w	r9, #1
 8006a82:	4623      	mov	r3, r4
 8006a84:	469a      	mov	sl, r3
 8006a86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a8a:	b10a      	cbz	r2, 8006a90 <_svfiprintf_r+0x60>
 8006a8c:	2a25      	cmp	r2, #37	@ 0x25
 8006a8e:	d1f9      	bne.n	8006a84 <_svfiprintf_r+0x54>
 8006a90:	ebba 0b04 	subs.w	fp, sl, r4
 8006a94:	d00b      	beq.n	8006aae <_svfiprintf_r+0x7e>
 8006a96:	465b      	mov	r3, fp
 8006a98:	4622      	mov	r2, r4
 8006a9a:	4629      	mov	r1, r5
 8006a9c:	4638      	mov	r0, r7
 8006a9e:	f7ff ff6b 	bl	8006978 <__ssputs_r>
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	f000 80a7 	beq.w	8006bf6 <_svfiprintf_r+0x1c6>
 8006aa8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006aaa:	445a      	add	r2, fp
 8006aac:	9209      	str	r2, [sp, #36]	@ 0x24
 8006aae:	f89a 3000 	ldrb.w	r3, [sl]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 809f 	beq.w	8006bf6 <_svfiprintf_r+0x1c6>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f04f 32ff 	mov.w	r2, #4294967295
 8006abe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ac2:	f10a 0a01 	add.w	sl, sl, #1
 8006ac6:	9304      	str	r3, [sp, #16]
 8006ac8:	9307      	str	r3, [sp, #28]
 8006aca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ace:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ad0:	4654      	mov	r4, sl
 8006ad2:	2205      	movs	r2, #5
 8006ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad8:	484e      	ldr	r0, [pc, #312]	@ (8006c14 <_svfiprintf_r+0x1e4>)
 8006ada:	f7f9 fba1 	bl	8000220 <memchr>
 8006ade:	9a04      	ldr	r2, [sp, #16]
 8006ae0:	b9d8      	cbnz	r0, 8006b1a <_svfiprintf_r+0xea>
 8006ae2:	06d0      	lsls	r0, r2, #27
 8006ae4:	bf44      	itt	mi
 8006ae6:	2320      	movmi	r3, #32
 8006ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006aec:	0711      	lsls	r1, r2, #28
 8006aee:	bf44      	itt	mi
 8006af0:	232b      	movmi	r3, #43	@ 0x2b
 8006af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006af6:	f89a 3000 	ldrb.w	r3, [sl]
 8006afa:	2b2a      	cmp	r3, #42	@ 0x2a
 8006afc:	d015      	beq.n	8006b2a <_svfiprintf_r+0xfa>
 8006afe:	9a07      	ldr	r2, [sp, #28]
 8006b00:	4654      	mov	r4, sl
 8006b02:	2000      	movs	r0, #0
 8006b04:	f04f 0c0a 	mov.w	ip, #10
 8006b08:	4621      	mov	r1, r4
 8006b0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b0e:	3b30      	subs	r3, #48	@ 0x30
 8006b10:	2b09      	cmp	r3, #9
 8006b12:	d94b      	bls.n	8006bac <_svfiprintf_r+0x17c>
 8006b14:	b1b0      	cbz	r0, 8006b44 <_svfiprintf_r+0x114>
 8006b16:	9207      	str	r2, [sp, #28]
 8006b18:	e014      	b.n	8006b44 <_svfiprintf_r+0x114>
 8006b1a:	eba0 0308 	sub.w	r3, r0, r8
 8006b1e:	fa09 f303 	lsl.w	r3, r9, r3
 8006b22:	4313      	orrs	r3, r2
 8006b24:	9304      	str	r3, [sp, #16]
 8006b26:	46a2      	mov	sl, r4
 8006b28:	e7d2      	b.n	8006ad0 <_svfiprintf_r+0xa0>
 8006b2a:	9b03      	ldr	r3, [sp, #12]
 8006b2c:	1d19      	adds	r1, r3, #4
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	9103      	str	r1, [sp, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	bfbb      	ittet	lt
 8006b36:	425b      	neglt	r3, r3
 8006b38:	f042 0202 	orrlt.w	r2, r2, #2
 8006b3c:	9307      	strge	r3, [sp, #28]
 8006b3e:	9307      	strlt	r3, [sp, #28]
 8006b40:	bfb8      	it	lt
 8006b42:	9204      	strlt	r2, [sp, #16]
 8006b44:	7823      	ldrb	r3, [r4, #0]
 8006b46:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b48:	d10a      	bne.n	8006b60 <_svfiprintf_r+0x130>
 8006b4a:	7863      	ldrb	r3, [r4, #1]
 8006b4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b4e:	d132      	bne.n	8006bb6 <_svfiprintf_r+0x186>
 8006b50:	9b03      	ldr	r3, [sp, #12]
 8006b52:	1d1a      	adds	r2, r3, #4
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	9203      	str	r2, [sp, #12]
 8006b58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b5c:	3402      	adds	r4, #2
 8006b5e:	9305      	str	r3, [sp, #20]
 8006b60:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006c24 <_svfiprintf_r+0x1f4>
 8006b64:	7821      	ldrb	r1, [r4, #0]
 8006b66:	2203      	movs	r2, #3
 8006b68:	4650      	mov	r0, sl
 8006b6a:	f7f9 fb59 	bl	8000220 <memchr>
 8006b6e:	b138      	cbz	r0, 8006b80 <_svfiprintf_r+0x150>
 8006b70:	9b04      	ldr	r3, [sp, #16]
 8006b72:	eba0 000a 	sub.w	r0, r0, sl
 8006b76:	2240      	movs	r2, #64	@ 0x40
 8006b78:	4082      	lsls	r2, r0
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	3401      	adds	r4, #1
 8006b7e:	9304      	str	r3, [sp, #16]
 8006b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b84:	4824      	ldr	r0, [pc, #144]	@ (8006c18 <_svfiprintf_r+0x1e8>)
 8006b86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b8a:	2206      	movs	r2, #6
 8006b8c:	f7f9 fb48 	bl	8000220 <memchr>
 8006b90:	2800      	cmp	r0, #0
 8006b92:	d036      	beq.n	8006c02 <_svfiprintf_r+0x1d2>
 8006b94:	4b21      	ldr	r3, [pc, #132]	@ (8006c1c <_svfiprintf_r+0x1ec>)
 8006b96:	bb1b      	cbnz	r3, 8006be0 <_svfiprintf_r+0x1b0>
 8006b98:	9b03      	ldr	r3, [sp, #12]
 8006b9a:	3307      	adds	r3, #7
 8006b9c:	f023 0307 	bic.w	r3, r3, #7
 8006ba0:	3308      	adds	r3, #8
 8006ba2:	9303      	str	r3, [sp, #12]
 8006ba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ba6:	4433      	add	r3, r6
 8006ba8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006baa:	e76a      	b.n	8006a82 <_svfiprintf_r+0x52>
 8006bac:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	2001      	movs	r0, #1
 8006bb4:	e7a8      	b.n	8006b08 <_svfiprintf_r+0xd8>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	3401      	adds	r4, #1
 8006bba:	9305      	str	r3, [sp, #20]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	f04f 0c0a 	mov.w	ip, #10
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bc8:	3a30      	subs	r2, #48	@ 0x30
 8006bca:	2a09      	cmp	r2, #9
 8006bcc:	d903      	bls.n	8006bd6 <_svfiprintf_r+0x1a6>
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d0c6      	beq.n	8006b60 <_svfiprintf_r+0x130>
 8006bd2:	9105      	str	r1, [sp, #20]
 8006bd4:	e7c4      	b.n	8006b60 <_svfiprintf_r+0x130>
 8006bd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bda:	4604      	mov	r4, r0
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e7f0      	b.n	8006bc2 <_svfiprintf_r+0x192>
 8006be0:	ab03      	add	r3, sp, #12
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	462a      	mov	r2, r5
 8006be6:	4b0e      	ldr	r3, [pc, #56]	@ (8006c20 <_svfiprintf_r+0x1f0>)
 8006be8:	a904      	add	r1, sp, #16
 8006bea:	4638      	mov	r0, r7
 8006bec:	f3af 8000 	nop.w
 8006bf0:	1c42      	adds	r2, r0, #1
 8006bf2:	4606      	mov	r6, r0
 8006bf4:	d1d6      	bne.n	8006ba4 <_svfiprintf_r+0x174>
 8006bf6:	89ab      	ldrh	r3, [r5, #12]
 8006bf8:	065b      	lsls	r3, r3, #25
 8006bfa:	f53f af2d 	bmi.w	8006a58 <_svfiprintf_r+0x28>
 8006bfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c00:	e72c      	b.n	8006a5c <_svfiprintf_r+0x2c>
 8006c02:	ab03      	add	r3, sp, #12
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	462a      	mov	r2, r5
 8006c08:	4b05      	ldr	r3, [pc, #20]	@ (8006c20 <_svfiprintf_r+0x1f0>)
 8006c0a:	a904      	add	r1, sp, #16
 8006c0c:	4638      	mov	r0, r7
 8006c0e:	f000 f9bb 	bl	8006f88 <_printf_i>
 8006c12:	e7ed      	b.n	8006bf0 <_svfiprintf_r+0x1c0>
 8006c14:	080079a8 	.word	0x080079a8
 8006c18:	080079b2 	.word	0x080079b2
 8006c1c:	00000000 	.word	0x00000000
 8006c20:	08006979 	.word	0x08006979
 8006c24:	080079ae 	.word	0x080079ae

08006c28 <__sfputc_r>:
 8006c28:	6893      	ldr	r3, [r2, #8]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	b410      	push	{r4}
 8006c30:	6093      	str	r3, [r2, #8]
 8006c32:	da08      	bge.n	8006c46 <__sfputc_r+0x1e>
 8006c34:	6994      	ldr	r4, [r2, #24]
 8006c36:	42a3      	cmp	r3, r4
 8006c38:	db01      	blt.n	8006c3e <__sfputc_r+0x16>
 8006c3a:	290a      	cmp	r1, #10
 8006c3c:	d103      	bne.n	8006c46 <__sfputc_r+0x1e>
 8006c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c42:	f7ff bc90 	b.w	8006566 <__swbuf_r>
 8006c46:	6813      	ldr	r3, [r2, #0]
 8006c48:	1c58      	adds	r0, r3, #1
 8006c4a:	6010      	str	r0, [r2, #0]
 8006c4c:	7019      	strb	r1, [r3, #0]
 8006c4e:	4608      	mov	r0, r1
 8006c50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <__sfputs_r>:
 8006c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c58:	4606      	mov	r6, r0
 8006c5a:	460f      	mov	r7, r1
 8006c5c:	4614      	mov	r4, r2
 8006c5e:	18d5      	adds	r5, r2, r3
 8006c60:	42ac      	cmp	r4, r5
 8006c62:	d101      	bne.n	8006c68 <__sfputs_r+0x12>
 8006c64:	2000      	movs	r0, #0
 8006c66:	e007      	b.n	8006c78 <__sfputs_r+0x22>
 8006c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c6c:	463a      	mov	r2, r7
 8006c6e:	4630      	mov	r0, r6
 8006c70:	f7ff ffda 	bl	8006c28 <__sfputc_r>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	d1f3      	bne.n	8006c60 <__sfputs_r+0xa>
 8006c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c7c <_vfiprintf_r>:
 8006c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c80:	460d      	mov	r5, r1
 8006c82:	b09d      	sub	sp, #116	@ 0x74
 8006c84:	4614      	mov	r4, r2
 8006c86:	4698      	mov	r8, r3
 8006c88:	4606      	mov	r6, r0
 8006c8a:	b118      	cbz	r0, 8006c94 <_vfiprintf_r+0x18>
 8006c8c:	6a03      	ldr	r3, [r0, #32]
 8006c8e:	b90b      	cbnz	r3, 8006c94 <_vfiprintf_r+0x18>
 8006c90:	f7ff fb4c 	bl	800632c <__sinit>
 8006c94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c96:	07d9      	lsls	r1, r3, #31
 8006c98:	d405      	bmi.n	8006ca6 <_vfiprintf_r+0x2a>
 8006c9a:	89ab      	ldrh	r3, [r5, #12]
 8006c9c:	059a      	lsls	r2, r3, #22
 8006c9e:	d402      	bmi.n	8006ca6 <_vfiprintf_r+0x2a>
 8006ca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ca2:	f7ff fd6e 	bl	8006782 <__retarget_lock_acquire_recursive>
 8006ca6:	89ab      	ldrh	r3, [r5, #12]
 8006ca8:	071b      	lsls	r3, r3, #28
 8006caa:	d501      	bpl.n	8006cb0 <_vfiprintf_r+0x34>
 8006cac:	692b      	ldr	r3, [r5, #16]
 8006cae:	b99b      	cbnz	r3, 8006cd8 <_vfiprintf_r+0x5c>
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	f7ff fc96 	bl	80065e4 <__swsetup_r>
 8006cb8:	b170      	cbz	r0, 8006cd8 <_vfiprintf_r+0x5c>
 8006cba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cbc:	07dc      	lsls	r4, r3, #31
 8006cbe:	d504      	bpl.n	8006cca <_vfiprintf_r+0x4e>
 8006cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc4:	b01d      	add	sp, #116	@ 0x74
 8006cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cca:	89ab      	ldrh	r3, [r5, #12]
 8006ccc:	0598      	lsls	r0, r3, #22
 8006cce:	d4f7      	bmi.n	8006cc0 <_vfiprintf_r+0x44>
 8006cd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cd2:	f7ff fd57 	bl	8006784 <__retarget_lock_release_recursive>
 8006cd6:	e7f3      	b.n	8006cc0 <_vfiprintf_r+0x44>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cdc:	2320      	movs	r3, #32
 8006cde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ce2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ce6:	2330      	movs	r3, #48	@ 0x30
 8006ce8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006e98 <_vfiprintf_r+0x21c>
 8006cec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006cf0:	f04f 0901 	mov.w	r9, #1
 8006cf4:	4623      	mov	r3, r4
 8006cf6:	469a      	mov	sl, r3
 8006cf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cfc:	b10a      	cbz	r2, 8006d02 <_vfiprintf_r+0x86>
 8006cfe:	2a25      	cmp	r2, #37	@ 0x25
 8006d00:	d1f9      	bne.n	8006cf6 <_vfiprintf_r+0x7a>
 8006d02:	ebba 0b04 	subs.w	fp, sl, r4
 8006d06:	d00b      	beq.n	8006d20 <_vfiprintf_r+0xa4>
 8006d08:	465b      	mov	r3, fp
 8006d0a:	4622      	mov	r2, r4
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f7ff ffa1 	bl	8006c56 <__sfputs_r>
 8006d14:	3001      	adds	r0, #1
 8006d16:	f000 80a7 	beq.w	8006e68 <_vfiprintf_r+0x1ec>
 8006d1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d1c:	445a      	add	r2, fp
 8006d1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d20:	f89a 3000 	ldrb.w	r3, [sl]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 809f 	beq.w	8006e68 <_vfiprintf_r+0x1ec>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d34:	f10a 0a01 	add.w	sl, sl, #1
 8006d38:	9304      	str	r3, [sp, #16]
 8006d3a:	9307      	str	r3, [sp, #28]
 8006d3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d40:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d42:	4654      	mov	r4, sl
 8006d44:	2205      	movs	r2, #5
 8006d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d4a:	4853      	ldr	r0, [pc, #332]	@ (8006e98 <_vfiprintf_r+0x21c>)
 8006d4c:	f7f9 fa68 	bl	8000220 <memchr>
 8006d50:	9a04      	ldr	r2, [sp, #16]
 8006d52:	b9d8      	cbnz	r0, 8006d8c <_vfiprintf_r+0x110>
 8006d54:	06d1      	lsls	r1, r2, #27
 8006d56:	bf44      	itt	mi
 8006d58:	2320      	movmi	r3, #32
 8006d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d5e:	0713      	lsls	r3, r2, #28
 8006d60:	bf44      	itt	mi
 8006d62:	232b      	movmi	r3, #43	@ 0x2b
 8006d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d68:	f89a 3000 	ldrb.w	r3, [sl]
 8006d6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d6e:	d015      	beq.n	8006d9c <_vfiprintf_r+0x120>
 8006d70:	9a07      	ldr	r2, [sp, #28]
 8006d72:	4654      	mov	r4, sl
 8006d74:	2000      	movs	r0, #0
 8006d76:	f04f 0c0a 	mov.w	ip, #10
 8006d7a:	4621      	mov	r1, r4
 8006d7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d80:	3b30      	subs	r3, #48	@ 0x30
 8006d82:	2b09      	cmp	r3, #9
 8006d84:	d94b      	bls.n	8006e1e <_vfiprintf_r+0x1a2>
 8006d86:	b1b0      	cbz	r0, 8006db6 <_vfiprintf_r+0x13a>
 8006d88:	9207      	str	r2, [sp, #28]
 8006d8a:	e014      	b.n	8006db6 <_vfiprintf_r+0x13a>
 8006d8c:	eba0 0308 	sub.w	r3, r0, r8
 8006d90:	fa09 f303 	lsl.w	r3, r9, r3
 8006d94:	4313      	orrs	r3, r2
 8006d96:	9304      	str	r3, [sp, #16]
 8006d98:	46a2      	mov	sl, r4
 8006d9a:	e7d2      	b.n	8006d42 <_vfiprintf_r+0xc6>
 8006d9c:	9b03      	ldr	r3, [sp, #12]
 8006d9e:	1d19      	adds	r1, r3, #4
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	9103      	str	r1, [sp, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	bfbb      	ittet	lt
 8006da8:	425b      	neglt	r3, r3
 8006daa:	f042 0202 	orrlt.w	r2, r2, #2
 8006dae:	9307      	strge	r3, [sp, #28]
 8006db0:	9307      	strlt	r3, [sp, #28]
 8006db2:	bfb8      	it	lt
 8006db4:	9204      	strlt	r2, [sp, #16]
 8006db6:	7823      	ldrb	r3, [r4, #0]
 8006db8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006dba:	d10a      	bne.n	8006dd2 <_vfiprintf_r+0x156>
 8006dbc:	7863      	ldrb	r3, [r4, #1]
 8006dbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dc0:	d132      	bne.n	8006e28 <_vfiprintf_r+0x1ac>
 8006dc2:	9b03      	ldr	r3, [sp, #12]
 8006dc4:	1d1a      	adds	r2, r3, #4
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	9203      	str	r2, [sp, #12]
 8006dca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006dce:	3402      	adds	r4, #2
 8006dd0:	9305      	str	r3, [sp, #20]
 8006dd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006ea8 <_vfiprintf_r+0x22c>
 8006dd6:	7821      	ldrb	r1, [r4, #0]
 8006dd8:	2203      	movs	r2, #3
 8006dda:	4650      	mov	r0, sl
 8006ddc:	f7f9 fa20 	bl	8000220 <memchr>
 8006de0:	b138      	cbz	r0, 8006df2 <_vfiprintf_r+0x176>
 8006de2:	9b04      	ldr	r3, [sp, #16]
 8006de4:	eba0 000a 	sub.w	r0, r0, sl
 8006de8:	2240      	movs	r2, #64	@ 0x40
 8006dea:	4082      	lsls	r2, r0
 8006dec:	4313      	orrs	r3, r2
 8006dee:	3401      	adds	r4, #1
 8006df0:	9304      	str	r3, [sp, #16]
 8006df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006df6:	4829      	ldr	r0, [pc, #164]	@ (8006e9c <_vfiprintf_r+0x220>)
 8006df8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006dfc:	2206      	movs	r2, #6
 8006dfe:	f7f9 fa0f 	bl	8000220 <memchr>
 8006e02:	2800      	cmp	r0, #0
 8006e04:	d03f      	beq.n	8006e86 <_vfiprintf_r+0x20a>
 8006e06:	4b26      	ldr	r3, [pc, #152]	@ (8006ea0 <_vfiprintf_r+0x224>)
 8006e08:	bb1b      	cbnz	r3, 8006e52 <_vfiprintf_r+0x1d6>
 8006e0a:	9b03      	ldr	r3, [sp, #12]
 8006e0c:	3307      	adds	r3, #7
 8006e0e:	f023 0307 	bic.w	r3, r3, #7
 8006e12:	3308      	adds	r3, #8
 8006e14:	9303      	str	r3, [sp, #12]
 8006e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e18:	443b      	add	r3, r7
 8006e1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e1c:	e76a      	b.n	8006cf4 <_vfiprintf_r+0x78>
 8006e1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e22:	460c      	mov	r4, r1
 8006e24:	2001      	movs	r0, #1
 8006e26:	e7a8      	b.n	8006d7a <_vfiprintf_r+0xfe>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	3401      	adds	r4, #1
 8006e2c:	9305      	str	r3, [sp, #20]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	f04f 0c0a 	mov.w	ip, #10
 8006e34:	4620      	mov	r0, r4
 8006e36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e3a:	3a30      	subs	r2, #48	@ 0x30
 8006e3c:	2a09      	cmp	r2, #9
 8006e3e:	d903      	bls.n	8006e48 <_vfiprintf_r+0x1cc>
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d0c6      	beq.n	8006dd2 <_vfiprintf_r+0x156>
 8006e44:	9105      	str	r1, [sp, #20]
 8006e46:	e7c4      	b.n	8006dd2 <_vfiprintf_r+0x156>
 8006e48:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e7f0      	b.n	8006e34 <_vfiprintf_r+0x1b8>
 8006e52:	ab03      	add	r3, sp, #12
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	462a      	mov	r2, r5
 8006e58:	4b12      	ldr	r3, [pc, #72]	@ (8006ea4 <_vfiprintf_r+0x228>)
 8006e5a:	a904      	add	r1, sp, #16
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	f3af 8000 	nop.w
 8006e62:	4607      	mov	r7, r0
 8006e64:	1c78      	adds	r0, r7, #1
 8006e66:	d1d6      	bne.n	8006e16 <_vfiprintf_r+0x19a>
 8006e68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e6a:	07d9      	lsls	r1, r3, #31
 8006e6c:	d405      	bmi.n	8006e7a <_vfiprintf_r+0x1fe>
 8006e6e:	89ab      	ldrh	r3, [r5, #12]
 8006e70:	059a      	lsls	r2, r3, #22
 8006e72:	d402      	bmi.n	8006e7a <_vfiprintf_r+0x1fe>
 8006e74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e76:	f7ff fc85 	bl	8006784 <__retarget_lock_release_recursive>
 8006e7a:	89ab      	ldrh	r3, [r5, #12]
 8006e7c:	065b      	lsls	r3, r3, #25
 8006e7e:	f53f af1f 	bmi.w	8006cc0 <_vfiprintf_r+0x44>
 8006e82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e84:	e71e      	b.n	8006cc4 <_vfiprintf_r+0x48>
 8006e86:	ab03      	add	r3, sp, #12
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	462a      	mov	r2, r5
 8006e8c:	4b05      	ldr	r3, [pc, #20]	@ (8006ea4 <_vfiprintf_r+0x228>)
 8006e8e:	a904      	add	r1, sp, #16
 8006e90:	4630      	mov	r0, r6
 8006e92:	f000 f879 	bl	8006f88 <_printf_i>
 8006e96:	e7e4      	b.n	8006e62 <_vfiprintf_r+0x1e6>
 8006e98:	080079a8 	.word	0x080079a8
 8006e9c:	080079b2 	.word	0x080079b2
 8006ea0:	00000000 	.word	0x00000000
 8006ea4:	08006c57 	.word	0x08006c57
 8006ea8:	080079ae 	.word	0x080079ae

08006eac <_printf_common>:
 8006eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb0:	4616      	mov	r6, r2
 8006eb2:	4698      	mov	r8, r3
 8006eb4:	688a      	ldr	r2, [r1, #8]
 8006eb6:	690b      	ldr	r3, [r1, #16]
 8006eb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	bfb8      	it	lt
 8006ec0:	4613      	movlt	r3, r2
 8006ec2:	6033      	str	r3, [r6, #0]
 8006ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ec8:	4607      	mov	r7, r0
 8006eca:	460c      	mov	r4, r1
 8006ecc:	b10a      	cbz	r2, 8006ed2 <_printf_common+0x26>
 8006ece:	3301      	adds	r3, #1
 8006ed0:	6033      	str	r3, [r6, #0]
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	0699      	lsls	r1, r3, #26
 8006ed6:	bf42      	ittt	mi
 8006ed8:	6833      	ldrmi	r3, [r6, #0]
 8006eda:	3302      	addmi	r3, #2
 8006edc:	6033      	strmi	r3, [r6, #0]
 8006ede:	6825      	ldr	r5, [r4, #0]
 8006ee0:	f015 0506 	ands.w	r5, r5, #6
 8006ee4:	d106      	bne.n	8006ef4 <_printf_common+0x48>
 8006ee6:	f104 0a19 	add.w	sl, r4, #25
 8006eea:	68e3      	ldr	r3, [r4, #12]
 8006eec:	6832      	ldr	r2, [r6, #0]
 8006eee:	1a9b      	subs	r3, r3, r2
 8006ef0:	42ab      	cmp	r3, r5
 8006ef2:	dc26      	bgt.n	8006f42 <_printf_common+0x96>
 8006ef4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ef8:	6822      	ldr	r2, [r4, #0]
 8006efa:	3b00      	subs	r3, #0
 8006efc:	bf18      	it	ne
 8006efe:	2301      	movne	r3, #1
 8006f00:	0692      	lsls	r2, r2, #26
 8006f02:	d42b      	bmi.n	8006f5c <_printf_common+0xb0>
 8006f04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f08:	4641      	mov	r1, r8
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	47c8      	blx	r9
 8006f0e:	3001      	adds	r0, #1
 8006f10:	d01e      	beq.n	8006f50 <_printf_common+0xa4>
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	6922      	ldr	r2, [r4, #16]
 8006f16:	f003 0306 	and.w	r3, r3, #6
 8006f1a:	2b04      	cmp	r3, #4
 8006f1c:	bf02      	ittt	eq
 8006f1e:	68e5      	ldreq	r5, [r4, #12]
 8006f20:	6833      	ldreq	r3, [r6, #0]
 8006f22:	1aed      	subeq	r5, r5, r3
 8006f24:	68a3      	ldr	r3, [r4, #8]
 8006f26:	bf0c      	ite	eq
 8006f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f2c:	2500      	movne	r5, #0
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	bfc4      	itt	gt
 8006f32:	1a9b      	subgt	r3, r3, r2
 8006f34:	18ed      	addgt	r5, r5, r3
 8006f36:	2600      	movs	r6, #0
 8006f38:	341a      	adds	r4, #26
 8006f3a:	42b5      	cmp	r5, r6
 8006f3c:	d11a      	bne.n	8006f74 <_printf_common+0xc8>
 8006f3e:	2000      	movs	r0, #0
 8006f40:	e008      	b.n	8006f54 <_printf_common+0xa8>
 8006f42:	2301      	movs	r3, #1
 8006f44:	4652      	mov	r2, sl
 8006f46:	4641      	mov	r1, r8
 8006f48:	4638      	mov	r0, r7
 8006f4a:	47c8      	blx	r9
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	d103      	bne.n	8006f58 <_printf_common+0xac>
 8006f50:	f04f 30ff 	mov.w	r0, #4294967295
 8006f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f58:	3501      	adds	r5, #1
 8006f5a:	e7c6      	b.n	8006eea <_printf_common+0x3e>
 8006f5c:	18e1      	adds	r1, r4, r3
 8006f5e:	1c5a      	adds	r2, r3, #1
 8006f60:	2030      	movs	r0, #48	@ 0x30
 8006f62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f66:	4422      	add	r2, r4
 8006f68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f70:	3302      	adds	r3, #2
 8006f72:	e7c7      	b.n	8006f04 <_printf_common+0x58>
 8006f74:	2301      	movs	r3, #1
 8006f76:	4622      	mov	r2, r4
 8006f78:	4641      	mov	r1, r8
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	47c8      	blx	r9
 8006f7e:	3001      	adds	r0, #1
 8006f80:	d0e6      	beq.n	8006f50 <_printf_common+0xa4>
 8006f82:	3601      	adds	r6, #1
 8006f84:	e7d9      	b.n	8006f3a <_printf_common+0x8e>
	...

08006f88 <_printf_i>:
 8006f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f8c:	7e0f      	ldrb	r7, [r1, #24]
 8006f8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f90:	2f78      	cmp	r7, #120	@ 0x78
 8006f92:	4691      	mov	r9, r2
 8006f94:	4680      	mov	r8, r0
 8006f96:	460c      	mov	r4, r1
 8006f98:	469a      	mov	sl, r3
 8006f9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f9e:	d807      	bhi.n	8006fb0 <_printf_i+0x28>
 8006fa0:	2f62      	cmp	r7, #98	@ 0x62
 8006fa2:	d80a      	bhi.n	8006fba <_printf_i+0x32>
 8006fa4:	2f00      	cmp	r7, #0
 8006fa6:	f000 80d2 	beq.w	800714e <_printf_i+0x1c6>
 8006faa:	2f58      	cmp	r7, #88	@ 0x58
 8006fac:	f000 80b9 	beq.w	8007122 <_printf_i+0x19a>
 8006fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fb8:	e03a      	b.n	8007030 <_printf_i+0xa8>
 8006fba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fbe:	2b15      	cmp	r3, #21
 8006fc0:	d8f6      	bhi.n	8006fb0 <_printf_i+0x28>
 8006fc2:	a101      	add	r1, pc, #4	@ (adr r1, 8006fc8 <_printf_i+0x40>)
 8006fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fc8:	08007021 	.word	0x08007021
 8006fcc:	08007035 	.word	0x08007035
 8006fd0:	08006fb1 	.word	0x08006fb1
 8006fd4:	08006fb1 	.word	0x08006fb1
 8006fd8:	08006fb1 	.word	0x08006fb1
 8006fdc:	08006fb1 	.word	0x08006fb1
 8006fe0:	08007035 	.word	0x08007035
 8006fe4:	08006fb1 	.word	0x08006fb1
 8006fe8:	08006fb1 	.word	0x08006fb1
 8006fec:	08006fb1 	.word	0x08006fb1
 8006ff0:	08006fb1 	.word	0x08006fb1
 8006ff4:	08007135 	.word	0x08007135
 8006ff8:	0800705f 	.word	0x0800705f
 8006ffc:	080070ef 	.word	0x080070ef
 8007000:	08006fb1 	.word	0x08006fb1
 8007004:	08006fb1 	.word	0x08006fb1
 8007008:	08007157 	.word	0x08007157
 800700c:	08006fb1 	.word	0x08006fb1
 8007010:	0800705f 	.word	0x0800705f
 8007014:	08006fb1 	.word	0x08006fb1
 8007018:	08006fb1 	.word	0x08006fb1
 800701c:	080070f7 	.word	0x080070f7
 8007020:	6833      	ldr	r3, [r6, #0]
 8007022:	1d1a      	adds	r2, r3, #4
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6032      	str	r2, [r6, #0]
 8007028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800702c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007030:	2301      	movs	r3, #1
 8007032:	e09d      	b.n	8007170 <_printf_i+0x1e8>
 8007034:	6833      	ldr	r3, [r6, #0]
 8007036:	6820      	ldr	r0, [r4, #0]
 8007038:	1d19      	adds	r1, r3, #4
 800703a:	6031      	str	r1, [r6, #0]
 800703c:	0606      	lsls	r6, r0, #24
 800703e:	d501      	bpl.n	8007044 <_printf_i+0xbc>
 8007040:	681d      	ldr	r5, [r3, #0]
 8007042:	e003      	b.n	800704c <_printf_i+0xc4>
 8007044:	0645      	lsls	r5, r0, #25
 8007046:	d5fb      	bpl.n	8007040 <_printf_i+0xb8>
 8007048:	f9b3 5000 	ldrsh.w	r5, [r3]
 800704c:	2d00      	cmp	r5, #0
 800704e:	da03      	bge.n	8007058 <_printf_i+0xd0>
 8007050:	232d      	movs	r3, #45	@ 0x2d
 8007052:	426d      	negs	r5, r5
 8007054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007058:	4859      	ldr	r0, [pc, #356]	@ (80071c0 <_printf_i+0x238>)
 800705a:	230a      	movs	r3, #10
 800705c:	e011      	b.n	8007082 <_printf_i+0xfa>
 800705e:	6821      	ldr	r1, [r4, #0]
 8007060:	6833      	ldr	r3, [r6, #0]
 8007062:	0608      	lsls	r0, r1, #24
 8007064:	f853 5b04 	ldr.w	r5, [r3], #4
 8007068:	d402      	bmi.n	8007070 <_printf_i+0xe8>
 800706a:	0649      	lsls	r1, r1, #25
 800706c:	bf48      	it	mi
 800706e:	b2ad      	uxthmi	r5, r5
 8007070:	2f6f      	cmp	r7, #111	@ 0x6f
 8007072:	4853      	ldr	r0, [pc, #332]	@ (80071c0 <_printf_i+0x238>)
 8007074:	6033      	str	r3, [r6, #0]
 8007076:	bf14      	ite	ne
 8007078:	230a      	movne	r3, #10
 800707a:	2308      	moveq	r3, #8
 800707c:	2100      	movs	r1, #0
 800707e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007082:	6866      	ldr	r6, [r4, #4]
 8007084:	60a6      	str	r6, [r4, #8]
 8007086:	2e00      	cmp	r6, #0
 8007088:	bfa2      	ittt	ge
 800708a:	6821      	ldrge	r1, [r4, #0]
 800708c:	f021 0104 	bicge.w	r1, r1, #4
 8007090:	6021      	strge	r1, [r4, #0]
 8007092:	b90d      	cbnz	r5, 8007098 <_printf_i+0x110>
 8007094:	2e00      	cmp	r6, #0
 8007096:	d04b      	beq.n	8007130 <_printf_i+0x1a8>
 8007098:	4616      	mov	r6, r2
 800709a:	fbb5 f1f3 	udiv	r1, r5, r3
 800709e:	fb03 5711 	mls	r7, r3, r1, r5
 80070a2:	5dc7      	ldrb	r7, [r0, r7]
 80070a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070a8:	462f      	mov	r7, r5
 80070aa:	42bb      	cmp	r3, r7
 80070ac:	460d      	mov	r5, r1
 80070ae:	d9f4      	bls.n	800709a <_printf_i+0x112>
 80070b0:	2b08      	cmp	r3, #8
 80070b2:	d10b      	bne.n	80070cc <_printf_i+0x144>
 80070b4:	6823      	ldr	r3, [r4, #0]
 80070b6:	07df      	lsls	r7, r3, #31
 80070b8:	d508      	bpl.n	80070cc <_printf_i+0x144>
 80070ba:	6923      	ldr	r3, [r4, #16]
 80070bc:	6861      	ldr	r1, [r4, #4]
 80070be:	4299      	cmp	r1, r3
 80070c0:	bfde      	ittt	le
 80070c2:	2330      	movle	r3, #48	@ 0x30
 80070c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070cc:	1b92      	subs	r2, r2, r6
 80070ce:	6122      	str	r2, [r4, #16]
 80070d0:	f8cd a000 	str.w	sl, [sp]
 80070d4:	464b      	mov	r3, r9
 80070d6:	aa03      	add	r2, sp, #12
 80070d8:	4621      	mov	r1, r4
 80070da:	4640      	mov	r0, r8
 80070dc:	f7ff fee6 	bl	8006eac <_printf_common>
 80070e0:	3001      	adds	r0, #1
 80070e2:	d14a      	bne.n	800717a <_printf_i+0x1f2>
 80070e4:	f04f 30ff 	mov.w	r0, #4294967295
 80070e8:	b004      	add	sp, #16
 80070ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	f043 0320 	orr.w	r3, r3, #32
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	4833      	ldr	r0, [pc, #204]	@ (80071c4 <_printf_i+0x23c>)
 80070f8:	2778      	movs	r7, #120	@ 0x78
 80070fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	6831      	ldr	r1, [r6, #0]
 8007102:	061f      	lsls	r7, r3, #24
 8007104:	f851 5b04 	ldr.w	r5, [r1], #4
 8007108:	d402      	bmi.n	8007110 <_printf_i+0x188>
 800710a:	065f      	lsls	r7, r3, #25
 800710c:	bf48      	it	mi
 800710e:	b2ad      	uxthmi	r5, r5
 8007110:	6031      	str	r1, [r6, #0]
 8007112:	07d9      	lsls	r1, r3, #31
 8007114:	bf44      	itt	mi
 8007116:	f043 0320 	orrmi.w	r3, r3, #32
 800711a:	6023      	strmi	r3, [r4, #0]
 800711c:	b11d      	cbz	r5, 8007126 <_printf_i+0x19e>
 800711e:	2310      	movs	r3, #16
 8007120:	e7ac      	b.n	800707c <_printf_i+0xf4>
 8007122:	4827      	ldr	r0, [pc, #156]	@ (80071c0 <_printf_i+0x238>)
 8007124:	e7e9      	b.n	80070fa <_printf_i+0x172>
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	f023 0320 	bic.w	r3, r3, #32
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	e7f6      	b.n	800711e <_printf_i+0x196>
 8007130:	4616      	mov	r6, r2
 8007132:	e7bd      	b.n	80070b0 <_printf_i+0x128>
 8007134:	6833      	ldr	r3, [r6, #0]
 8007136:	6825      	ldr	r5, [r4, #0]
 8007138:	6961      	ldr	r1, [r4, #20]
 800713a:	1d18      	adds	r0, r3, #4
 800713c:	6030      	str	r0, [r6, #0]
 800713e:	062e      	lsls	r6, r5, #24
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	d501      	bpl.n	8007148 <_printf_i+0x1c0>
 8007144:	6019      	str	r1, [r3, #0]
 8007146:	e002      	b.n	800714e <_printf_i+0x1c6>
 8007148:	0668      	lsls	r0, r5, #25
 800714a:	d5fb      	bpl.n	8007144 <_printf_i+0x1bc>
 800714c:	8019      	strh	r1, [r3, #0]
 800714e:	2300      	movs	r3, #0
 8007150:	6123      	str	r3, [r4, #16]
 8007152:	4616      	mov	r6, r2
 8007154:	e7bc      	b.n	80070d0 <_printf_i+0x148>
 8007156:	6833      	ldr	r3, [r6, #0]
 8007158:	1d1a      	adds	r2, r3, #4
 800715a:	6032      	str	r2, [r6, #0]
 800715c:	681e      	ldr	r6, [r3, #0]
 800715e:	6862      	ldr	r2, [r4, #4]
 8007160:	2100      	movs	r1, #0
 8007162:	4630      	mov	r0, r6
 8007164:	f7f9 f85c 	bl	8000220 <memchr>
 8007168:	b108      	cbz	r0, 800716e <_printf_i+0x1e6>
 800716a:	1b80      	subs	r0, r0, r6
 800716c:	6060      	str	r0, [r4, #4]
 800716e:	6863      	ldr	r3, [r4, #4]
 8007170:	6123      	str	r3, [r4, #16]
 8007172:	2300      	movs	r3, #0
 8007174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007178:	e7aa      	b.n	80070d0 <_printf_i+0x148>
 800717a:	6923      	ldr	r3, [r4, #16]
 800717c:	4632      	mov	r2, r6
 800717e:	4649      	mov	r1, r9
 8007180:	4640      	mov	r0, r8
 8007182:	47d0      	blx	sl
 8007184:	3001      	adds	r0, #1
 8007186:	d0ad      	beq.n	80070e4 <_printf_i+0x15c>
 8007188:	6823      	ldr	r3, [r4, #0]
 800718a:	079b      	lsls	r3, r3, #30
 800718c:	d413      	bmi.n	80071b6 <_printf_i+0x22e>
 800718e:	68e0      	ldr	r0, [r4, #12]
 8007190:	9b03      	ldr	r3, [sp, #12]
 8007192:	4298      	cmp	r0, r3
 8007194:	bfb8      	it	lt
 8007196:	4618      	movlt	r0, r3
 8007198:	e7a6      	b.n	80070e8 <_printf_i+0x160>
 800719a:	2301      	movs	r3, #1
 800719c:	4632      	mov	r2, r6
 800719e:	4649      	mov	r1, r9
 80071a0:	4640      	mov	r0, r8
 80071a2:	47d0      	blx	sl
 80071a4:	3001      	adds	r0, #1
 80071a6:	d09d      	beq.n	80070e4 <_printf_i+0x15c>
 80071a8:	3501      	adds	r5, #1
 80071aa:	68e3      	ldr	r3, [r4, #12]
 80071ac:	9903      	ldr	r1, [sp, #12]
 80071ae:	1a5b      	subs	r3, r3, r1
 80071b0:	42ab      	cmp	r3, r5
 80071b2:	dcf2      	bgt.n	800719a <_printf_i+0x212>
 80071b4:	e7eb      	b.n	800718e <_printf_i+0x206>
 80071b6:	2500      	movs	r5, #0
 80071b8:	f104 0619 	add.w	r6, r4, #25
 80071bc:	e7f5      	b.n	80071aa <_printf_i+0x222>
 80071be:	bf00      	nop
 80071c0:	080079b9 	.word	0x080079b9
 80071c4:	080079ca 	.word	0x080079ca

080071c8 <__sflush_r>:
 80071c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071d0:	0716      	lsls	r6, r2, #28
 80071d2:	4605      	mov	r5, r0
 80071d4:	460c      	mov	r4, r1
 80071d6:	d454      	bmi.n	8007282 <__sflush_r+0xba>
 80071d8:	684b      	ldr	r3, [r1, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	dc02      	bgt.n	80071e4 <__sflush_r+0x1c>
 80071de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	dd48      	ble.n	8007276 <__sflush_r+0xae>
 80071e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071e6:	2e00      	cmp	r6, #0
 80071e8:	d045      	beq.n	8007276 <__sflush_r+0xae>
 80071ea:	2300      	movs	r3, #0
 80071ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80071f0:	682f      	ldr	r7, [r5, #0]
 80071f2:	6a21      	ldr	r1, [r4, #32]
 80071f4:	602b      	str	r3, [r5, #0]
 80071f6:	d030      	beq.n	800725a <__sflush_r+0x92>
 80071f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	0759      	lsls	r1, r3, #29
 80071fe:	d505      	bpl.n	800720c <__sflush_r+0x44>
 8007200:	6863      	ldr	r3, [r4, #4]
 8007202:	1ad2      	subs	r2, r2, r3
 8007204:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007206:	b10b      	cbz	r3, 800720c <__sflush_r+0x44>
 8007208:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800720a:	1ad2      	subs	r2, r2, r3
 800720c:	2300      	movs	r3, #0
 800720e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007210:	6a21      	ldr	r1, [r4, #32]
 8007212:	4628      	mov	r0, r5
 8007214:	47b0      	blx	r6
 8007216:	1c43      	adds	r3, r0, #1
 8007218:	89a3      	ldrh	r3, [r4, #12]
 800721a:	d106      	bne.n	800722a <__sflush_r+0x62>
 800721c:	6829      	ldr	r1, [r5, #0]
 800721e:	291d      	cmp	r1, #29
 8007220:	d82b      	bhi.n	800727a <__sflush_r+0xb2>
 8007222:	4a2a      	ldr	r2, [pc, #168]	@ (80072cc <__sflush_r+0x104>)
 8007224:	410a      	asrs	r2, r1
 8007226:	07d6      	lsls	r6, r2, #31
 8007228:	d427      	bmi.n	800727a <__sflush_r+0xb2>
 800722a:	2200      	movs	r2, #0
 800722c:	6062      	str	r2, [r4, #4]
 800722e:	04d9      	lsls	r1, r3, #19
 8007230:	6922      	ldr	r2, [r4, #16]
 8007232:	6022      	str	r2, [r4, #0]
 8007234:	d504      	bpl.n	8007240 <__sflush_r+0x78>
 8007236:	1c42      	adds	r2, r0, #1
 8007238:	d101      	bne.n	800723e <__sflush_r+0x76>
 800723a:	682b      	ldr	r3, [r5, #0]
 800723c:	b903      	cbnz	r3, 8007240 <__sflush_r+0x78>
 800723e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007240:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007242:	602f      	str	r7, [r5, #0]
 8007244:	b1b9      	cbz	r1, 8007276 <__sflush_r+0xae>
 8007246:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800724a:	4299      	cmp	r1, r3
 800724c:	d002      	beq.n	8007254 <__sflush_r+0x8c>
 800724e:	4628      	mov	r0, r5
 8007250:	f7ff fa9a 	bl	8006788 <_free_r>
 8007254:	2300      	movs	r3, #0
 8007256:	6363      	str	r3, [r4, #52]	@ 0x34
 8007258:	e00d      	b.n	8007276 <__sflush_r+0xae>
 800725a:	2301      	movs	r3, #1
 800725c:	4628      	mov	r0, r5
 800725e:	47b0      	blx	r6
 8007260:	4602      	mov	r2, r0
 8007262:	1c50      	adds	r0, r2, #1
 8007264:	d1c9      	bne.n	80071fa <__sflush_r+0x32>
 8007266:	682b      	ldr	r3, [r5, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d0c6      	beq.n	80071fa <__sflush_r+0x32>
 800726c:	2b1d      	cmp	r3, #29
 800726e:	d001      	beq.n	8007274 <__sflush_r+0xac>
 8007270:	2b16      	cmp	r3, #22
 8007272:	d11e      	bne.n	80072b2 <__sflush_r+0xea>
 8007274:	602f      	str	r7, [r5, #0]
 8007276:	2000      	movs	r0, #0
 8007278:	e022      	b.n	80072c0 <__sflush_r+0xf8>
 800727a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800727e:	b21b      	sxth	r3, r3
 8007280:	e01b      	b.n	80072ba <__sflush_r+0xf2>
 8007282:	690f      	ldr	r7, [r1, #16]
 8007284:	2f00      	cmp	r7, #0
 8007286:	d0f6      	beq.n	8007276 <__sflush_r+0xae>
 8007288:	0793      	lsls	r3, r2, #30
 800728a:	680e      	ldr	r6, [r1, #0]
 800728c:	bf08      	it	eq
 800728e:	694b      	ldreq	r3, [r1, #20]
 8007290:	600f      	str	r7, [r1, #0]
 8007292:	bf18      	it	ne
 8007294:	2300      	movne	r3, #0
 8007296:	eba6 0807 	sub.w	r8, r6, r7
 800729a:	608b      	str	r3, [r1, #8]
 800729c:	f1b8 0f00 	cmp.w	r8, #0
 80072a0:	dde9      	ble.n	8007276 <__sflush_r+0xae>
 80072a2:	6a21      	ldr	r1, [r4, #32]
 80072a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80072a6:	4643      	mov	r3, r8
 80072a8:	463a      	mov	r2, r7
 80072aa:	4628      	mov	r0, r5
 80072ac:	47b0      	blx	r6
 80072ae:	2800      	cmp	r0, #0
 80072b0:	dc08      	bgt.n	80072c4 <__sflush_r+0xfc>
 80072b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072ba:	81a3      	strh	r3, [r4, #12]
 80072bc:	f04f 30ff 	mov.w	r0, #4294967295
 80072c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072c4:	4407      	add	r7, r0
 80072c6:	eba8 0800 	sub.w	r8, r8, r0
 80072ca:	e7e7      	b.n	800729c <__sflush_r+0xd4>
 80072cc:	dfbffffe 	.word	0xdfbffffe

080072d0 <_fflush_r>:
 80072d0:	b538      	push	{r3, r4, r5, lr}
 80072d2:	690b      	ldr	r3, [r1, #16]
 80072d4:	4605      	mov	r5, r0
 80072d6:	460c      	mov	r4, r1
 80072d8:	b913      	cbnz	r3, 80072e0 <_fflush_r+0x10>
 80072da:	2500      	movs	r5, #0
 80072dc:	4628      	mov	r0, r5
 80072de:	bd38      	pop	{r3, r4, r5, pc}
 80072e0:	b118      	cbz	r0, 80072ea <_fflush_r+0x1a>
 80072e2:	6a03      	ldr	r3, [r0, #32]
 80072e4:	b90b      	cbnz	r3, 80072ea <_fflush_r+0x1a>
 80072e6:	f7ff f821 	bl	800632c <__sinit>
 80072ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0f3      	beq.n	80072da <_fflush_r+0xa>
 80072f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80072f4:	07d0      	lsls	r0, r2, #31
 80072f6:	d404      	bmi.n	8007302 <_fflush_r+0x32>
 80072f8:	0599      	lsls	r1, r3, #22
 80072fa:	d402      	bmi.n	8007302 <_fflush_r+0x32>
 80072fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072fe:	f7ff fa40 	bl	8006782 <__retarget_lock_acquire_recursive>
 8007302:	4628      	mov	r0, r5
 8007304:	4621      	mov	r1, r4
 8007306:	f7ff ff5f 	bl	80071c8 <__sflush_r>
 800730a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800730c:	07da      	lsls	r2, r3, #31
 800730e:	4605      	mov	r5, r0
 8007310:	d4e4      	bmi.n	80072dc <_fflush_r+0xc>
 8007312:	89a3      	ldrh	r3, [r4, #12]
 8007314:	059b      	lsls	r3, r3, #22
 8007316:	d4e1      	bmi.n	80072dc <_fflush_r+0xc>
 8007318:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800731a:	f7ff fa33 	bl	8006784 <__retarget_lock_release_recursive>
 800731e:	e7dd      	b.n	80072dc <_fflush_r+0xc>

08007320 <__swhatbuf_r>:
 8007320:	b570      	push	{r4, r5, r6, lr}
 8007322:	460c      	mov	r4, r1
 8007324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007328:	2900      	cmp	r1, #0
 800732a:	b096      	sub	sp, #88	@ 0x58
 800732c:	4615      	mov	r5, r2
 800732e:	461e      	mov	r6, r3
 8007330:	da0d      	bge.n	800734e <__swhatbuf_r+0x2e>
 8007332:	89a3      	ldrh	r3, [r4, #12]
 8007334:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007338:	f04f 0100 	mov.w	r1, #0
 800733c:	bf14      	ite	ne
 800733e:	2340      	movne	r3, #64	@ 0x40
 8007340:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007344:	2000      	movs	r0, #0
 8007346:	6031      	str	r1, [r6, #0]
 8007348:	602b      	str	r3, [r5, #0]
 800734a:	b016      	add	sp, #88	@ 0x58
 800734c:	bd70      	pop	{r4, r5, r6, pc}
 800734e:	466a      	mov	r2, sp
 8007350:	f000 f862 	bl	8007418 <_fstat_r>
 8007354:	2800      	cmp	r0, #0
 8007356:	dbec      	blt.n	8007332 <__swhatbuf_r+0x12>
 8007358:	9901      	ldr	r1, [sp, #4]
 800735a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800735e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007362:	4259      	negs	r1, r3
 8007364:	4159      	adcs	r1, r3
 8007366:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800736a:	e7eb      	b.n	8007344 <__swhatbuf_r+0x24>

0800736c <__smakebuf_r>:
 800736c:	898b      	ldrh	r3, [r1, #12]
 800736e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007370:	079d      	lsls	r5, r3, #30
 8007372:	4606      	mov	r6, r0
 8007374:	460c      	mov	r4, r1
 8007376:	d507      	bpl.n	8007388 <__smakebuf_r+0x1c>
 8007378:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	6123      	str	r3, [r4, #16]
 8007380:	2301      	movs	r3, #1
 8007382:	6163      	str	r3, [r4, #20]
 8007384:	b003      	add	sp, #12
 8007386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007388:	ab01      	add	r3, sp, #4
 800738a:	466a      	mov	r2, sp
 800738c:	f7ff ffc8 	bl	8007320 <__swhatbuf_r>
 8007390:	9f00      	ldr	r7, [sp, #0]
 8007392:	4605      	mov	r5, r0
 8007394:	4639      	mov	r1, r7
 8007396:	4630      	mov	r0, r6
 8007398:	f7ff fa62 	bl	8006860 <_malloc_r>
 800739c:	b948      	cbnz	r0, 80073b2 <__smakebuf_r+0x46>
 800739e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a2:	059a      	lsls	r2, r3, #22
 80073a4:	d4ee      	bmi.n	8007384 <__smakebuf_r+0x18>
 80073a6:	f023 0303 	bic.w	r3, r3, #3
 80073aa:	f043 0302 	orr.w	r3, r3, #2
 80073ae:	81a3      	strh	r3, [r4, #12]
 80073b0:	e7e2      	b.n	8007378 <__smakebuf_r+0xc>
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	6020      	str	r0, [r4, #0]
 80073b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073ba:	81a3      	strh	r3, [r4, #12]
 80073bc:	9b01      	ldr	r3, [sp, #4]
 80073be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80073c2:	b15b      	cbz	r3, 80073dc <__smakebuf_r+0x70>
 80073c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073c8:	4630      	mov	r0, r6
 80073ca:	f000 f837 	bl	800743c <_isatty_r>
 80073ce:	b128      	cbz	r0, 80073dc <__smakebuf_r+0x70>
 80073d0:	89a3      	ldrh	r3, [r4, #12]
 80073d2:	f023 0303 	bic.w	r3, r3, #3
 80073d6:	f043 0301 	orr.w	r3, r3, #1
 80073da:	81a3      	strh	r3, [r4, #12]
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	431d      	orrs	r5, r3
 80073e0:	81a5      	strh	r5, [r4, #12]
 80073e2:	e7cf      	b.n	8007384 <__smakebuf_r+0x18>

080073e4 <memmove>:
 80073e4:	4288      	cmp	r0, r1
 80073e6:	b510      	push	{r4, lr}
 80073e8:	eb01 0402 	add.w	r4, r1, r2
 80073ec:	d902      	bls.n	80073f4 <memmove+0x10>
 80073ee:	4284      	cmp	r4, r0
 80073f0:	4623      	mov	r3, r4
 80073f2:	d807      	bhi.n	8007404 <memmove+0x20>
 80073f4:	1e43      	subs	r3, r0, #1
 80073f6:	42a1      	cmp	r1, r4
 80073f8:	d008      	beq.n	800740c <memmove+0x28>
 80073fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007402:	e7f8      	b.n	80073f6 <memmove+0x12>
 8007404:	4402      	add	r2, r0
 8007406:	4601      	mov	r1, r0
 8007408:	428a      	cmp	r2, r1
 800740a:	d100      	bne.n	800740e <memmove+0x2a>
 800740c:	bd10      	pop	{r4, pc}
 800740e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007412:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007416:	e7f7      	b.n	8007408 <memmove+0x24>

08007418 <_fstat_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	4d07      	ldr	r5, [pc, #28]	@ (8007438 <_fstat_r+0x20>)
 800741c:	2300      	movs	r3, #0
 800741e:	4604      	mov	r4, r0
 8007420:	4608      	mov	r0, r1
 8007422:	4611      	mov	r1, r2
 8007424:	602b      	str	r3, [r5, #0]
 8007426:	f7fa fa3e 	bl	80018a6 <_fstat>
 800742a:	1c43      	adds	r3, r0, #1
 800742c:	d102      	bne.n	8007434 <_fstat_r+0x1c>
 800742e:	682b      	ldr	r3, [r5, #0]
 8007430:	b103      	cbz	r3, 8007434 <_fstat_r+0x1c>
 8007432:	6023      	str	r3, [r4, #0]
 8007434:	bd38      	pop	{r3, r4, r5, pc}
 8007436:	bf00      	nop
 8007438:	20001c00 	.word	0x20001c00

0800743c <_isatty_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	4d06      	ldr	r5, [pc, #24]	@ (8007458 <_isatty_r+0x1c>)
 8007440:	2300      	movs	r3, #0
 8007442:	4604      	mov	r4, r0
 8007444:	4608      	mov	r0, r1
 8007446:	602b      	str	r3, [r5, #0]
 8007448:	f7fa fa3d 	bl	80018c6 <_isatty>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d102      	bne.n	8007456 <_isatty_r+0x1a>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	b103      	cbz	r3, 8007456 <_isatty_r+0x1a>
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	bd38      	pop	{r3, r4, r5, pc}
 8007458:	20001c00 	.word	0x20001c00

0800745c <_sbrk_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	4d06      	ldr	r5, [pc, #24]	@ (8007478 <_sbrk_r+0x1c>)
 8007460:	2300      	movs	r3, #0
 8007462:	4604      	mov	r4, r0
 8007464:	4608      	mov	r0, r1
 8007466:	602b      	str	r3, [r5, #0]
 8007468:	f7fa fa46 	bl	80018f8 <_sbrk>
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	d102      	bne.n	8007476 <_sbrk_r+0x1a>
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	b103      	cbz	r3, 8007476 <_sbrk_r+0x1a>
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	bd38      	pop	{r3, r4, r5, pc}
 8007478:	20001c00 	.word	0x20001c00

0800747c <memcpy>:
 800747c:	440a      	add	r2, r1
 800747e:	4291      	cmp	r1, r2
 8007480:	f100 33ff 	add.w	r3, r0, #4294967295
 8007484:	d100      	bne.n	8007488 <memcpy+0xc>
 8007486:	4770      	bx	lr
 8007488:	b510      	push	{r4, lr}
 800748a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800748e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007492:	4291      	cmp	r1, r2
 8007494:	d1f9      	bne.n	800748a <memcpy+0xe>
 8007496:	bd10      	pop	{r4, pc}

08007498 <_realloc_r>:
 8007498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800749c:	4680      	mov	r8, r0
 800749e:	4615      	mov	r5, r2
 80074a0:	460c      	mov	r4, r1
 80074a2:	b921      	cbnz	r1, 80074ae <_realloc_r+0x16>
 80074a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074a8:	4611      	mov	r1, r2
 80074aa:	f7ff b9d9 	b.w	8006860 <_malloc_r>
 80074ae:	b92a      	cbnz	r2, 80074bc <_realloc_r+0x24>
 80074b0:	f7ff f96a 	bl	8006788 <_free_r>
 80074b4:	2400      	movs	r4, #0
 80074b6:	4620      	mov	r0, r4
 80074b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074bc:	f000 f81a 	bl	80074f4 <_malloc_usable_size_r>
 80074c0:	4285      	cmp	r5, r0
 80074c2:	4606      	mov	r6, r0
 80074c4:	d802      	bhi.n	80074cc <_realloc_r+0x34>
 80074c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80074ca:	d8f4      	bhi.n	80074b6 <_realloc_r+0x1e>
 80074cc:	4629      	mov	r1, r5
 80074ce:	4640      	mov	r0, r8
 80074d0:	f7ff f9c6 	bl	8006860 <_malloc_r>
 80074d4:	4607      	mov	r7, r0
 80074d6:	2800      	cmp	r0, #0
 80074d8:	d0ec      	beq.n	80074b4 <_realloc_r+0x1c>
 80074da:	42b5      	cmp	r5, r6
 80074dc:	462a      	mov	r2, r5
 80074de:	4621      	mov	r1, r4
 80074e0:	bf28      	it	cs
 80074e2:	4632      	movcs	r2, r6
 80074e4:	f7ff ffca 	bl	800747c <memcpy>
 80074e8:	4621      	mov	r1, r4
 80074ea:	4640      	mov	r0, r8
 80074ec:	f7ff f94c 	bl	8006788 <_free_r>
 80074f0:	463c      	mov	r4, r7
 80074f2:	e7e0      	b.n	80074b6 <_realloc_r+0x1e>

080074f4 <_malloc_usable_size_r>:
 80074f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074f8:	1f18      	subs	r0, r3, #4
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	bfbc      	itt	lt
 80074fe:	580b      	ldrlt	r3, [r1, r0]
 8007500:	18c0      	addlt	r0, r0, r3
 8007502:	4770      	bx	lr
 8007504:	0000      	movs	r0, r0
	...

08007508 <atan>:
 8007508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750c:	ec55 4b10 	vmov	r4, r5, d0
 8007510:	4bbf      	ldr	r3, [pc, #764]	@ (8007810 <atan+0x308>)
 8007512:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007516:	429e      	cmp	r6, r3
 8007518:	46ab      	mov	fp, r5
 800751a:	d918      	bls.n	800754e <atan+0x46>
 800751c:	4bbd      	ldr	r3, [pc, #756]	@ (8007814 <atan+0x30c>)
 800751e:	429e      	cmp	r6, r3
 8007520:	d801      	bhi.n	8007526 <atan+0x1e>
 8007522:	d109      	bne.n	8007538 <atan+0x30>
 8007524:	b144      	cbz	r4, 8007538 <atan+0x30>
 8007526:	4622      	mov	r2, r4
 8007528:	462b      	mov	r3, r5
 800752a:	4620      	mov	r0, r4
 800752c:	4629      	mov	r1, r5
 800752e:	f7f8 fecd 	bl	80002cc <__adddf3>
 8007532:	4604      	mov	r4, r0
 8007534:	460d      	mov	r5, r1
 8007536:	e006      	b.n	8007546 <atan+0x3e>
 8007538:	f1bb 0f00 	cmp.w	fp, #0
 800753c:	f340 812b 	ble.w	8007796 <atan+0x28e>
 8007540:	a597      	add	r5, pc, #604	@ (adr r5, 80077a0 <atan+0x298>)
 8007542:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007546:	ec45 4b10 	vmov	d0, r4, r5
 800754a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800754e:	4bb2      	ldr	r3, [pc, #712]	@ (8007818 <atan+0x310>)
 8007550:	429e      	cmp	r6, r3
 8007552:	d813      	bhi.n	800757c <atan+0x74>
 8007554:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007558:	429e      	cmp	r6, r3
 800755a:	d80c      	bhi.n	8007576 <atan+0x6e>
 800755c:	a392      	add	r3, pc, #584	@ (adr r3, 80077a8 <atan+0x2a0>)
 800755e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007562:	4620      	mov	r0, r4
 8007564:	4629      	mov	r1, r5
 8007566:	f7f8 feb1 	bl	80002cc <__adddf3>
 800756a:	4bac      	ldr	r3, [pc, #688]	@ (800781c <atan+0x314>)
 800756c:	2200      	movs	r2, #0
 800756e:	f7f9 faf3 	bl	8000b58 <__aeabi_dcmpgt>
 8007572:	2800      	cmp	r0, #0
 8007574:	d1e7      	bne.n	8007546 <atan+0x3e>
 8007576:	f04f 3aff 	mov.w	sl, #4294967295
 800757a:	e029      	b.n	80075d0 <atan+0xc8>
 800757c:	f000 f95c 	bl	8007838 <fabs>
 8007580:	4ba7      	ldr	r3, [pc, #668]	@ (8007820 <atan+0x318>)
 8007582:	429e      	cmp	r6, r3
 8007584:	ec55 4b10 	vmov	r4, r5, d0
 8007588:	f200 80bc 	bhi.w	8007704 <atan+0x1fc>
 800758c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007590:	429e      	cmp	r6, r3
 8007592:	f200 809e 	bhi.w	80076d2 <atan+0x1ca>
 8007596:	4622      	mov	r2, r4
 8007598:	462b      	mov	r3, r5
 800759a:	4620      	mov	r0, r4
 800759c:	4629      	mov	r1, r5
 800759e:	f7f8 fe95 	bl	80002cc <__adddf3>
 80075a2:	4b9e      	ldr	r3, [pc, #632]	@ (800781c <atan+0x314>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	f7f8 fe8f 	bl	80002c8 <__aeabi_dsub>
 80075aa:	2200      	movs	r2, #0
 80075ac:	4606      	mov	r6, r0
 80075ae:	460f      	mov	r7, r1
 80075b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80075b4:	4620      	mov	r0, r4
 80075b6:	4629      	mov	r1, r5
 80075b8:	f7f8 fe88 	bl	80002cc <__adddf3>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	4630      	mov	r0, r6
 80075c2:	4639      	mov	r1, r7
 80075c4:	f7f9 f962 	bl	800088c <__aeabi_ddiv>
 80075c8:	f04f 0a00 	mov.w	sl, #0
 80075cc:	4604      	mov	r4, r0
 80075ce:	460d      	mov	r5, r1
 80075d0:	4622      	mov	r2, r4
 80075d2:	462b      	mov	r3, r5
 80075d4:	4620      	mov	r0, r4
 80075d6:	4629      	mov	r1, r5
 80075d8:	f7f9 f82e 	bl	8000638 <__aeabi_dmul>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4680      	mov	r8, r0
 80075e2:	4689      	mov	r9, r1
 80075e4:	f7f9 f828 	bl	8000638 <__aeabi_dmul>
 80075e8:	a371      	add	r3, pc, #452	@ (adr r3, 80077b0 <atan+0x2a8>)
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	4606      	mov	r6, r0
 80075f0:	460f      	mov	r7, r1
 80075f2:	f7f9 f821 	bl	8000638 <__aeabi_dmul>
 80075f6:	a370      	add	r3, pc, #448	@ (adr r3, 80077b8 <atan+0x2b0>)
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	f7f8 fe66 	bl	80002cc <__adddf3>
 8007600:	4632      	mov	r2, r6
 8007602:	463b      	mov	r3, r7
 8007604:	f7f9 f818 	bl	8000638 <__aeabi_dmul>
 8007608:	a36d      	add	r3, pc, #436	@ (adr r3, 80077c0 <atan+0x2b8>)
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	f7f8 fe5d 	bl	80002cc <__adddf3>
 8007612:	4632      	mov	r2, r6
 8007614:	463b      	mov	r3, r7
 8007616:	f7f9 f80f 	bl	8000638 <__aeabi_dmul>
 800761a:	a36b      	add	r3, pc, #428	@ (adr r3, 80077c8 <atan+0x2c0>)
 800761c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007620:	f7f8 fe54 	bl	80002cc <__adddf3>
 8007624:	4632      	mov	r2, r6
 8007626:	463b      	mov	r3, r7
 8007628:	f7f9 f806 	bl	8000638 <__aeabi_dmul>
 800762c:	a368      	add	r3, pc, #416	@ (adr r3, 80077d0 <atan+0x2c8>)
 800762e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007632:	f7f8 fe4b 	bl	80002cc <__adddf3>
 8007636:	4632      	mov	r2, r6
 8007638:	463b      	mov	r3, r7
 800763a:	f7f8 fffd 	bl	8000638 <__aeabi_dmul>
 800763e:	a366      	add	r3, pc, #408	@ (adr r3, 80077d8 <atan+0x2d0>)
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	f7f8 fe42 	bl	80002cc <__adddf3>
 8007648:	4642      	mov	r2, r8
 800764a:	464b      	mov	r3, r9
 800764c:	f7f8 fff4 	bl	8000638 <__aeabi_dmul>
 8007650:	a363      	add	r3, pc, #396	@ (adr r3, 80077e0 <atan+0x2d8>)
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	4680      	mov	r8, r0
 8007658:	4689      	mov	r9, r1
 800765a:	4630      	mov	r0, r6
 800765c:	4639      	mov	r1, r7
 800765e:	f7f8 ffeb 	bl	8000638 <__aeabi_dmul>
 8007662:	a361      	add	r3, pc, #388	@ (adr r3, 80077e8 <atan+0x2e0>)
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	f7f8 fe2e 	bl	80002c8 <__aeabi_dsub>
 800766c:	4632      	mov	r2, r6
 800766e:	463b      	mov	r3, r7
 8007670:	f7f8 ffe2 	bl	8000638 <__aeabi_dmul>
 8007674:	a35e      	add	r3, pc, #376	@ (adr r3, 80077f0 <atan+0x2e8>)
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	f7f8 fe25 	bl	80002c8 <__aeabi_dsub>
 800767e:	4632      	mov	r2, r6
 8007680:	463b      	mov	r3, r7
 8007682:	f7f8 ffd9 	bl	8000638 <__aeabi_dmul>
 8007686:	a35c      	add	r3, pc, #368	@ (adr r3, 80077f8 <atan+0x2f0>)
 8007688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768c:	f7f8 fe1c 	bl	80002c8 <__aeabi_dsub>
 8007690:	4632      	mov	r2, r6
 8007692:	463b      	mov	r3, r7
 8007694:	f7f8 ffd0 	bl	8000638 <__aeabi_dmul>
 8007698:	a359      	add	r3, pc, #356	@ (adr r3, 8007800 <atan+0x2f8>)
 800769a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769e:	f7f8 fe13 	bl	80002c8 <__aeabi_dsub>
 80076a2:	4632      	mov	r2, r6
 80076a4:	463b      	mov	r3, r7
 80076a6:	f7f8 ffc7 	bl	8000638 <__aeabi_dmul>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4640      	mov	r0, r8
 80076b0:	4649      	mov	r1, r9
 80076b2:	f7f8 fe0b 	bl	80002cc <__adddf3>
 80076b6:	4622      	mov	r2, r4
 80076b8:	462b      	mov	r3, r5
 80076ba:	f7f8 ffbd 	bl	8000638 <__aeabi_dmul>
 80076be:	f1ba 3fff 	cmp.w	sl, #4294967295
 80076c2:	4602      	mov	r2, r0
 80076c4:	460b      	mov	r3, r1
 80076c6:	d148      	bne.n	800775a <atan+0x252>
 80076c8:	4620      	mov	r0, r4
 80076ca:	4629      	mov	r1, r5
 80076cc:	f7f8 fdfc 	bl	80002c8 <__aeabi_dsub>
 80076d0:	e72f      	b.n	8007532 <atan+0x2a>
 80076d2:	4b52      	ldr	r3, [pc, #328]	@ (800781c <atan+0x314>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	4620      	mov	r0, r4
 80076d8:	4629      	mov	r1, r5
 80076da:	f7f8 fdf5 	bl	80002c8 <__aeabi_dsub>
 80076de:	4b4f      	ldr	r3, [pc, #316]	@ (800781c <atan+0x314>)
 80076e0:	4606      	mov	r6, r0
 80076e2:	460f      	mov	r7, r1
 80076e4:	2200      	movs	r2, #0
 80076e6:	4620      	mov	r0, r4
 80076e8:	4629      	mov	r1, r5
 80076ea:	f7f8 fdef 	bl	80002cc <__adddf3>
 80076ee:	4602      	mov	r2, r0
 80076f0:	460b      	mov	r3, r1
 80076f2:	4630      	mov	r0, r6
 80076f4:	4639      	mov	r1, r7
 80076f6:	f7f9 f8c9 	bl	800088c <__aeabi_ddiv>
 80076fa:	f04f 0a01 	mov.w	sl, #1
 80076fe:	4604      	mov	r4, r0
 8007700:	460d      	mov	r5, r1
 8007702:	e765      	b.n	80075d0 <atan+0xc8>
 8007704:	4b47      	ldr	r3, [pc, #284]	@ (8007824 <atan+0x31c>)
 8007706:	429e      	cmp	r6, r3
 8007708:	d21c      	bcs.n	8007744 <atan+0x23c>
 800770a:	4b47      	ldr	r3, [pc, #284]	@ (8007828 <atan+0x320>)
 800770c:	2200      	movs	r2, #0
 800770e:	4620      	mov	r0, r4
 8007710:	4629      	mov	r1, r5
 8007712:	f7f8 fdd9 	bl	80002c8 <__aeabi_dsub>
 8007716:	4b44      	ldr	r3, [pc, #272]	@ (8007828 <atan+0x320>)
 8007718:	4606      	mov	r6, r0
 800771a:	460f      	mov	r7, r1
 800771c:	2200      	movs	r2, #0
 800771e:	4620      	mov	r0, r4
 8007720:	4629      	mov	r1, r5
 8007722:	f7f8 ff89 	bl	8000638 <__aeabi_dmul>
 8007726:	4b3d      	ldr	r3, [pc, #244]	@ (800781c <atan+0x314>)
 8007728:	2200      	movs	r2, #0
 800772a:	f7f8 fdcf 	bl	80002cc <__adddf3>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4630      	mov	r0, r6
 8007734:	4639      	mov	r1, r7
 8007736:	f7f9 f8a9 	bl	800088c <__aeabi_ddiv>
 800773a:	f04f 0a02 	mov.w	sl, #2
 800773e:	4604      	mov	r4, r0
 8007740:	460d      	mov	r5, r1
 8007742:	e745      	b.n	80075d0 <atan+0xc8>
 8007744:	4622      	mov	r2, r4
 8007746:	462b      	mov	r3, r5
 8007748:	4938      	ldr	r1, [pc, #224]	@ (800782c <atan+0x324>)
 800774a:	2000      	movs	r0, #0
 800774c:	f7f9 f89e 	bl	800088c <__aeabi_ddiv>
 8007750:	f04f 0a03 	mov.w	sl, #3
 8007754:	4604      	mov	r4, r0
 8007756:	460d      	mov	r5, r1
 8007758:	e73a      	b.n	80075d0 <atan+0xc8>
 800775a:	4b35      	ldr	r3, [pc, #212]	@ (8007830 <atan+0x328>)
 800775c:	4e35      	ldr	r6, [pc, #212]	@ (8007834 <atan+0x32c>)
 800775e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007766:	f7f8 fdaf 	bl	80002c8 <__aeabi_dsub>
 800776a:	4622      	mov	r2, r4
 800776c:	462b      	mov	r3, r5
 800776e:	f7f8 fdab 	bl	80002c8 <__aeabi_dsub>
 8007772:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800777e:	f7f8 fda3 	bl	80002c8 <__aeabi_dsub>
 8007782:	f1bb 0f00 	cmp.w	fp, #0
 8007786:	4604      	mov	r4, r0
 8007788:	460d      	mov	r5, r1
 800778a:	f6bf aedc 	bge.w	8007546 <atan+0x3e>
 800778e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007792:	461d      	mov	r5, r3
 8007794:	e6d7      	b.n	8007546 <atan+0x3e>
 8007796:	a51c      	add	r5, pc, #112	@ (adr r5, 8007808 <atan+0x300>)
 8007798:	e9d5 4500 	ldrd	r4, r5, [r5]
 800779c:	e6d3      	b.n	8007546 <atan+0x3e>
 800779e:	bf00      	nop
 80077a0:	54442d18 	.word	0x54442d18
 80077a4:	3ff921fb 	.word	0x3ff921fb
 80077a8:	8800759c 	.word	0x8800759c
 80077ac:	7e37e43c 	.word	0x7e37e43c
 80077b0:	e322da11 	.word	0xe322da11
 80077b4:	3f90ad3a 	.word	0x3f90ad3a
 80077b8:	24760deb 	.word	0x24760deb
 80077bc:	3fa97b4b 	.word	0x3fa97b4b
 80077c0:	a0d03d51 	.word	0xa0d03d51
 80077c4:	3fb10d66 	.word	0x3fb10d66
 80077c8:	c54c206e 	.word	0xc54c206e
 80077cc:	3fb745cd 	.word	0x3fb745cd
 80077d0:	920083ff 	.word	0x920083ff
 80077d4:	3fc24924 	.word	0x3fc24924
 80077d8:	5555550d 	.word	0x5555550d
 80077dc:	3fd55555 	.word	0x3fd55555
 80077e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80077e4:	bfa2b444 	.word	0xbfa2b444
 80077e8:	52defd9a 	.word	0x52defd9a
 80077ec:	3fadde2d 	.word	0x3fadde2d
 80077f0:	af749a6d 	.word	0xaf749a6d
 80077f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80077f8:	fe231671 	.word	0xfe231671
 80077fc:	3fbc71c6 	.word	0x3fbc71c6
 8007800:	9998ebc4 	.word	0x9998ebc4
 8007804:	3fc99999 	.word	0x3fc99999
 8007808:	54442d18 	.word	0x54442d18
 800780c:	bff921fb 	.word	0xbff921fb
 8007810:	440fffff 	.word	0x440fffff
 8007814:	7ff00000 	.word	0x7ff00000
 8007818:	3fdbffff 	.word	0x3fdbffff
 800781c:	3ff00000 	.word	0x3ff00000
 8007820:	3ff2ffff 	.word	0x3ff2ffff
 8007824:	40038000 	.word	0x40038000
 8007828:	3ff80000 	.word	0x3ff80000
 800782c:	bff00000 	.word	0xbff00000
 8007830:	080079e0 	.word	0x080079e0
 8007834:	08007a00 	.word	0x08007a00

08007838 <fabs>:
 8007838:	ec51 0b10 	vmov	r0, r1, d0
 800783c:	4602      	mov	r2, r0
 800783e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007842:	ec43 2b10 	vmov	d0, r2, r3
 8007846:	4770      	bx	lr

08007848 <round>:
 8007848:	ec51 0b10 	vmov	r0, r1, d0
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8007852:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8007856:	2a13      	cmp	r2, #19
 8007858:	460b      	mov	r3, r1
 800785a:	4605      	mov	r5, r0
 800785c:	dc1b      	bgt.n	8007896 <round+0x4e>
 800785e:	2a00      	cmp	r2, #0
 8007860:	da0b      	bge.n	800787a <round+0x32>
 8007862:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8007866:	3201      	adds	r2, #1
 8007868:	bf04      	itt	eq
 800786a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800786e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8007872:	2200      	movs	r2, #0
 8007874:	4619      	mov	r1, r3
 8007876:	4610      	mov	r0, r2
 8007878:	e015      	b.n	80078a6 <round+0x5e>
 800787a:	4c15      	ldr	r4, [pc, #84]	@ (80078d0 <round+0x88>)
 800787c:	4114      	asrs	r4, r2
 800787e:	ea04 0601 	and.w	r6, r4, r1
 8007882:	4306      	orrs	r6, r0
 8007884:	d00f      	beq.n	80078a6 <round+0x5e>
 8007886:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800788a:	fa41 f202 	asr.w	r2, r1, r2
 800788e:	4413      	add	r3, r2
 8007890:	ea23 0304 	bic.w	r3, r3, r4
 8007894:	e7ed      	b.n	8007872 <round+0x2a>
 8007896:	2a33      	cmp	r2, #51	@ 0x33
 8007898:	dd08      	ble.n	80078ac <round+0x64>
 800789a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800789e:	d102      	bne.n	80078a6 <round+0x5e>
 80078a0:	4602      	mov	r2, r0
 80078a2:	f7f8 fd13 	bl	80002cc <__adddf3>
 80078a6:	ec41 0b10 	vmov	d0, r0, r1
 80078aa:	bd70      	pop	{r4, r5, r6, pc}
 80078ac:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 80078b0:	f04f 34ff 	mov.w	r4, #4294967295
 80078b4:	40f4      	lsrs	r4, r6
 80078b6:	4204      	tst	r4, r0
 80078b8:	d0f5      	beq.n	80078a6 <round+0x5e>
 80078ba:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 80078be:	2201      	movs	r2, #1
 80078c0:	408a      	lsls	r2, r1
 80078c2:	1952      	adds	r2, r2, r5
 80078c4:	bf28      	it	cs
 80078c6:	3301      	addcs	r3, #1
 80078c8:	ea22 0204 	bic.w	r2, r2, r4
 80078cc:	e7d2      	b.n	8007874 <round+0x2c>
 80078ce:	bf00      	nop
 80078d0:	000fffff 	.word	0x000fffff

080078d4 <_init>:
 80078d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d6:	bf00      	nop
 80078d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078da:	bc08      	pop	{r3}
 80078dc:	469e      	mov	lr, r3
 80078de:	4770      	bx	lr

080078e0 <_fini>:
 80078e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e2:	bf00      	nop
 80078e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078e6:	bc08      	pop	{r3}
 80078e8:	469e      	mov	lr, r3
 80078ea:	4770      	bx	lr
