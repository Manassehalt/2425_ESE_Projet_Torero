
Test_Lidar_projet_Torero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000546c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800564c  0800564c  0000664c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005710  08005710  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005710  08005710  00006710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005718  08005718  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005718  08005718  00006718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800571c  0800571c  0000671c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005720  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002284  20000068  08005788  00007068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200022ec  08005788  000072ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127a6  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c9  00000000  00000000  0001983e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  0001bf08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d68  00000000  00000000  0001d038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f209  00000000  00000000  0001dda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d02  00000000  00000000  0003cfa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c802f  00000000  00000000  00050cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118cda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005080  00000000  00000000  00118d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  0011dda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005634 	.word	0x08005634

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08005634 	.word	0x08005634

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <lidar_Init>:
void get_lidar_data(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void lidar_Init(void){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	// Enable DEV_EN lidar
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f248 0120 	movw	r1, #32800	@ 0x8020
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005be:	f001 f9b7 	bl	8001930 <HAL_GPIO_WritePin>

	// Enable M_EN lidar
	HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2104      	movs	r1, #4
 80005c6:	4802      	ldr	r0, [pc, #8]	@ (80005d0 <lidar_Init+0x20>)
 80005c8:	f001 f9b2 	bl	8001930 <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	48000400 	.word	0x48000400

080005d4 <lidar_Start>:
	else{
		printf("Erreur de com lidar\r\n");
	}
}

int lidar_Start(){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
	uint8_t lidar_command[2] = {START_CMD_LIDAR, GET_INFO_CMD_LIDAR};
 80005da:	f249 03a5 	movw	r3, #37029	@ 0x90a5
 80005de:	80bb      	strh	r3, [r7, #4]
	if(HAL_UART_Transmit(&huart3, lidar_command, 1, (uint8_t)1000)== HAL_OK){
 80005e0:	1d39      	adds	r1, r7, #4
 80005e2:	23e8      	movs	r3, #232	@ 0xe8
 80005e4:	2201      	movs	r2, #1
 80005e6:	480e      	ldr	r0, [pc, #56]	@ (8000620 <lidar_Start+0x4c>)
 80005e8:	f003 f952 	bl	8003890 <HAL_UART_Transmit>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d10e      	bne.n	8000610 <lidar_Start+0x3c>
		HAL_UART_Receive(&huart3, data_lidar, DATA_SIZE_LIDAR, (uint8_t)1000);
 80005f2:	23e8      	movs	r3, #232	@ 0xe8
 80005f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005f8:	490a      	ldr	r1, [pc, #40]	@ (8000624 <lidar_Start+0x50>)
 80005fa:	4809      	ldr	r0, [pc, #36]	@ (8000620 <lidar_Start+0x4c>)
 80005fc:	f003 f9d6 	bl	80039ac <HAL_UART_Receive>
		printf(" data lidar : %d\r\n", data_lidar[0]);
 8000600:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <lidar_Start+0x50>)
 8000602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000606:	4808      	ldr	r0, [pc, #32]	@ (8000628 <lidar_Start+0x54>)
 8000608:	f004 f948 	bl	800489c <iprintf>
		return 1;
 800060c:	2301      	movs	r3, #1
 800060e:	e003      	b.n	8000618 <lidar_Start+0x44>
	}
	else{
		printf("Erreur de com lidar\r\n");
 8000610:	4806      	ldr	r0, [pc, #24]	@ (800062c <lidar_Start+0x58>)
 8000612:	f004 f9ab 	bl	800496c <puts>
		return 0;
 8000616:	2300      	movs	r3, #0
	}
}
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000164 	.word	0x20000164
 8000624:	20000258 	.word	0x20000258
 8000628:	0800564c 	.word	0x0800564c
 800062c:	08005660 	.word	0x08005660

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 fc9d 	bl	8000f72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f81a 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 f99e 	bl	800097c <MX_GPIO_Init>
  MX_DMA_Init();
 8000640:	f000 f972 	bl	8000928 <MX_DMA_Init>
  MX_TIM4_Init();
 8000644:	f000 f85e 	bl	8000704 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000648:	f000 f920 	bl	800088c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800064c:	f000 f8d2 	bl	80007f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lidar_Init();
 8000650:	f7ff ffae 	bl	80005b0 <lidar_Init>
  printf("==============START==============\r\n");
 8000654:	4805      	ldr	r0, [pc, #20]	@ (800066c <main+0x3c>)
 8000656:	f004 f989 	bl	800496c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lidar_Start();
 800065a:	f7ff ffbb 	bl	80005d4 <lidar_Start>
	  HAL_Delay(1000);
 800065e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000662:	f000 fcf7 	bl	8001054 <HAL_Delay>
	  lidar_Start();
 8000666:	bf00      	nop
 8000668:	e7f7      	b.n	800065a <main+0x2a>
 800066a:	bf00      	nop
 800066c:	08005678 	.word	0x08005678

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	@ 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0318 	add.w	r3, r7, #24
 800067a:	2238      	movs	r2, #56	@ 0x38
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f004 fa54 	bl	8004b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000692:	2000      	movs	r0, #0
 8000694:	f001 f964 	bl	8001960 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800069c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	2303      	movs	r3, #3
 80006a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80006aa:	2306      	movs	r3, #6
 80006ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006ae:	2355      	movs	r3, #85	@ 0x55
 80006b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 0318 	add.w	r3, r7, #24
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fa00 	bl	8001ac8 <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80006ce:	f000 f9d3 	bl	8000a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2303      	movs	r3, #3
 80006d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2104      	movs	r1, #4
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 fcfe 	bl	80020ec <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006f6:	f000 f9bf 	bl	8000a78 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	@ 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08e      	sub	sp, #56	@ 0x38
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
 8000732:	615a      	str	r2, [r3, #20]
 8000734:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000736:	4b2d      	ldr	r3, [pc, #180]	@ (80007ec <MX_TIM4_Init+0xe8>)
 8000738:	4a2d      	ldr	r2, [pc, #180]	@ (80007f0 <MX_TIM4_Init+0xec>)
 800073a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800073c:	4b2b      	ldr	r3, [pc, #172]	@ (80007ec <MX_TIM4_Init+0xe8>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000742:	4b2a      	ldr	r3, [pc, #168]	@ (80007ec <MX_TIM4_Init+0xe8>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000748:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <MX_TIM4_Init+0xe8>)
 800074a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800074e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000750:	4b26      	ldr	r3, [pc, #152]	@ (80007ec <MX_TIM4_Init+0xe8>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000756:	4b25      	ldr	r3, [pc, #148]	@ (80007ec <MX_TIM4_Init+0xe8>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800075c:	4823      	ldr	r0, [pc, #140]	@ (80007ec <MX_TIM4_Init+0xe8>)
 800075e:	f002 f8d1 	bl	8002904 <HAL_TIM_Base_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000768:	f000 f986 	bl	8000a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000770:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000772:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000776:	4619      	mov	r1, r3
 8000778:	481c      	ldr	r0, [pc, #112]	@ (80007ec <MX_TIM4_Init+0xe8>)
 800077a:	f002 fa8f 	bl	8002c9c <HAL_TIM_ConfigClockSource>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000784:	f000 f978 	bl	8000a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000788:	4818      	ldr	r0, [pc, #96]	@ (80007ec <MX_TIM4_Init+0xe8>)
 800078a:	f002 f912 	bl	80029b2 <HAL_TIM_PWM_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000794:	f000 f970 	bl	8000a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	4811      	ldr	r0, [pc, #68]	@ (80007ec <MX_TIM4_Init+0xe8>)
 80007a8:	f002 ffa0 	bl	80036ec <HAL_TIMEx_MasterConfigSynchronization>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80007b2:	f000 f961 	bl	8000a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b6:	2360      	movs	r3, #96	@ 0x60
 80007b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007c6:	463b      	mov	r3, r7
 80007c8:	220c      	movs	r2, #12
 80007ca:	4619      	mov	r1, r3
 80007cc:	4807      	ldr	r0, [pc, #28]	@ (80007ec <MX_TIM4_Init+0xe8>)
 80007ce:	f002 f951 	bl	8002a74 <HAL_TIM_PWM_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80007d8:	f000 f94e 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80007dc:	4803      	ldr	r0, [pc, #12]	@ (80007ec <MX_TIM4_Init+0xe8>)
 80007de:	f000 f995 	bl	8000b0c <HAL_TIM_MspPostInit>

}
 80007e2:	bf00      	nop
 80007e4:	3738      	adds	r7, #56	@ 0x38
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000084 	.word	0x20000084
 80007f0:	40000800 	.word	0x40000800

080007f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f8:	4b22      	ldr	r3, [pc, #136]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 80007fa:	4a23      	ldr	r2, [pc, #140]	@ (8000888 <MX_USART2_UART_Init+0x94>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000812:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082a:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000836:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083c:	4811      	ldr	r0, [pc, #68]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 800083e:	f002 ffd7 	bl	80037f0 <HAL_UART_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000848:	f000 f916 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084c:	2100      	movs	r1, #0
 800084e:	480d      	ldr	r0, [pc, #52]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 8000850:	f003 fe98 	bl	8004584 <HAL_UARTEx_SetTxFifoThreshold>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800085a:	f000 f90d 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085e:	2100      	movs	r1, #0
 8000860:	4808      	ldr	r0, [pc, #32]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 8000862:	f003 fecd 	bl	8004600 <HAL_UARTEx_SetRxFifoThreshold>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800086c:	f000 f904 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	@ (8000884 <MX_USART2_UART_Init+0x90>)
 8000872:	f003 fe4e 	bl	8004512 <HAL_UARTEx_DisableFifoMode>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800087c:	f000 f8fc 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200000d0 	.word	0x200000d0
 8000888:	40004400 	.word	0x40004400

0800088c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000890:	4b23      	ldr	r3, [pc, #140]	@ (8000920 <MX_USART3_UART_Init+0x94>)
 8000892:	4a24      	ldr	r2, [pc, #144]	@ (8000924 <MX_USART3_UART_Init+0x98>)
 8000894:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 128000;
 8000896:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <MX_USART3_UART_Init+0x94>)
 8000898:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 800089c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 800089e:	4b20      	ldr	r3, [pc, #128]	@ (8000920 <MX_USART3_UART_Init+0x94>)
 80008a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008a4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <MX_USART3_UART_Init+0x94>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <MX_USART3_UART_Init+0x94>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <MX_USART3_UART_Init+0x94>)
 80008b4:	220c      	movs	r2, #12
 80008b6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b8:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <MX_USART3_UART_Init+0x94>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008be:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <MX_USART3_UART_Init+0x94>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c4:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <MX_USART3_UART_Init+0x94>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <MX_USART3_UART_Init+0x94>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d0:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <MX_USART3_UART_Init+0x94>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008d6:	4812      	ldr	r0, [pc, #72]	@ (8000920 <MX_USART3_UART_Init+0x94>)
 80008d8:	f002 ff8a 	bl	80037f0 <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 80008e2:	f000 f8c9 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e6:	2100      	movs	r1, #0
 80008e8:	480d      	ldr	r0, [pc, #52]	@ (8000920 <MX_USART3_UART_Init+0x94>)
 80008ea:	f003 fe4b 	bl	8004584 <HAL_UARTEx_SetTxFifoThreshold>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 80008f4:	f000 f8c0 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f8:	2100      	movs	r1, #0
 80008fa:	4809      	ldr	r0, [pc, #36]	@ (8000920 <MX_USART3_UART_Init+0x94>)
 80008fc:	f003 fe80 	bl	8004600 <HAL_UARTEx_SetRxFifoThreshold>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8000906:	f000 f8b7 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_USART3_UART_Init+0x94>)
 800090c:	f003 fe01 	bl	8004512 <HAL_UARTEx_DisableFifoMode>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8000916:	f000 f8af 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000164 	.word	0x20000164
 8000924:	40004800 	.word	0x40004800

08000928 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800092e:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_DMA_Init+0x50>)
 8000930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000932:	4a11      	ldr	r2, [pc, #68]	@ (8000978 <MX_DMA_Init+0x50>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6493      	str	r3, [r2, #72]	@ 0x48
 800093a:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_DMA_Init+0x50>)
 800093c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_DMA_Init+0x50>)
 8000948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800094a:	4a0b      	ldr	r2, [pc, #44]	@ (8000978 <MX_DMA_Init+0x50>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6493      	str	r3, [r2, #72]	@ 0x48
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_DMA_Init+0x50>)
 8000954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	200b      	movs	r0, #11
 8000964:	f000 fc73 	bl	800124e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000968:	200b      	movs	r0, #11
 800096a:	f000 fc8a 	bl	8001282 <HAL_NVIC_EnableIRQ>

}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	4b36      	ldr	r3, [pc, #216]	@ (8000a6c <MX_GPIO_Init+0xf0>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000996:	4a35      	ldr	r2, [pc, #212]	@ (8000a6c <MX_GPIO_Init+0xf0>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800099e:	4b33      	ldr	r3, [pc, #204]	@ (8000a6c <MX_GPIO_Init+0xf0>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009aa:	4b30      	ldr	r3, [pc, #192]	@ (8000a6c <MX_GPIO_Init+0xf0>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	4a2f      	ldr	r2, [pc, #188]	@ (8000a6c <MX_GPIO_Init+0xf0>)
 80009b0:	f043 0320 	orr.w	r3, r3, #32
 80009b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a6c <MX_GPIO_Init+0xf0>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	f003 0320 	and.w	r3, r3, #32
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a6c <MX_GPIO_Init+0xf0>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	4a29      	ldr	r2, [pc, #164]	@ (8000a6c <MX_GPIO_Init+0xf0>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ce:	4b27      	ldr	r3, [pc, #156]	@ (8000a6c <MX_GPIO_Init+0xf0>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	4b24      	ldr	r3, [pc, #144]	@ (8000a6c <MX_GPIO_Init+0xf0>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009de:	4a23      	ldr	r2, [pc, #140]	@ (8000a6c <MX_GPIO_Init+0xf0>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e6:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <MX_GPIO_Init+0xf0>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f248 0120 	movw	r1, #32800	@ 0x8020
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009fc:	f000 ff98 	bl	8001930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2104      	movs	r1, #4
 8000a04:	481a      	ldr	r0, [pc, #104]	@ (8000a70 <MX_GPIO_Init+0xf4>)
 8000a06:	f000 ff93 	bl	8001930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a10:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4814      	ldr	r0, [pc, #80]	@ (8000a74 <MX_GPIO_Init+0xf8>)
 8000a22:	f000 fe03 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DEV_EN_LIDAR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DEV_EN_LIDAR_Pin;
 8000a26:	f248 0320 	movw	r3, #32800	@ 0x8020
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a42:	f000 fdf3 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : M_EN_LIDAR_Pin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin;
 8000a46:	2304      	movs	r3, #4
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M_EN_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4804      	ldr	r0, [pc, #16]	@ (8000a70 <MX_GPIO_Init+0xf4>)
 8000a5e:	f000 fde5 	bl	800162c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	@ 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	48000400 	.word	0x48000400
 8000a74:	48000800 	.word	0x48000800

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <Error_Handler+0x8>

08000a84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa6:	4a08      	ldr	r2, [pc, #32]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_MspInit+0x44>)
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000aba:	f000 fff5 	bl	8001aa8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000

08000acc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <HAL_TIM_Base_MspInit+0x38>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d10b      	bne.n	8000af6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ade:	4b0a      	ldr	r3, [pc, #40]	@ (8000b08 <HAL_TIM_Base_MspInit+0x3c>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae2:	4a09      	ldr	r2, [pc, #36]	@ (8000b08 <HAL_TIM_Base_MspInit+0x3c>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aea:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <HAL_TIM_Base_MspInit+0x3c>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000af6:	bf00      	nop
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40000800 	.word	0x40000800
 8000b08:	40021000 	.word	0x40021000

08000b0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a11      	ldr	r2, [pc, #68]	@ (8000b70 <HAL_TIM_MspPostInit+0x64>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d11c      	bne.n	8000b68 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <HAL_TIM_MspPostInit+0x68>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	4a10      	ldr	r2, [pc, #64]	@ (8000b74 <HAL_TIM_MspPostInit+0x68>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <HAL_TIM_MspPostInit+0x68>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = TIM4_CH4_M_SCTR_LIDAR_Pin;
 8000b46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH4_M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	4619      	mov	r1, r3
 8000b62:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <HAL_TIM_MspPostInit+0x6c>)
 8000b64:	f000 fd62 	bl	800162c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3720      	adds	r7, #32
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40000800 	.word	0x40000800
 8000b74:	40021000 	.word	0x40021000
 8000b78:	48000400 	.word	0x48000400

08000b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b09c      	sub	sp, #112	@ 0x70
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b94:	f107 0318 	add.w	r3, r7, #24
 8000b98:	2244      	movs	r2, #68	@ 0x44
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f003 ffc5 	bl	8004b2c <memset>
  if(huart->Instance==USART2)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a52      	ldr	r2, [pc, #328]	@ (8000cf0 <HAL_UART_MspInit+0x174>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d137      	bne.n	8000c1c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb4:	f107 0318 	add.w	r3, r7, #24
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 fcb3 	bl	8002524 <HAL_RCCEx_PeriphCLKConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bc4:	f7ff ff58 	bl	8000a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc8:	4b4a      	ldr	r3, [pc, #296]	@ (8000cf4 <HAL_UART_MspInit+0x178>)
 8000bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bcc:	4a49      	ldr	r2, [pc, #292]	@ (8000cf4 <HAL_UART_MspInit+0x178>)
 8000bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bd4:	4b47      	ldr	r3, [pc, #284]	@ (8000cf4 <HAL_UART_MspInit+0x178>)
 8000bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	4b44      	ldr	r3, [pc, #272]	@ (8000cf4 <HAL_UART_MspInit+0x178>)
 8000be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be4:	4a43      	ldr	r2, [pc, #268]	@ (8000cf4 <HAL_UART_MspInit+0x178>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bec:	4b41      	ldr	r3, [pc, #260]	@ (8000cf4 <HAL_UART_MspInit+0x178>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bf8:	230c      	movs	r3, #12
 8000bfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c08:	2307      	movs	r3, #7
 8000c0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c10:	4619      	mov	r1, r3
 8000c12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c16:	f000 fd09 	bl	800162c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c1a:	e065      	b.n	8000ce8 <HAL_UART_MspInit+0x16c>
  else if(huart->Instance==USART3)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a35      	ldr	r2, [pc, #212]	@ (8000cf8 <HAL_UART_MspInit+0x17c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d160      	bne.n	8000ce8 <HAL_UART_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c26:	2304      	movs	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2e:	f107 0318 	add.w	r3, r7, #24
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 fc76 	bl	8002524 <HAL_RCCEx_PeriphCLKConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000c3e:	f7ff ff1b 	bl	8000a78 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c42:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf4 <HAL_UART_MspInit+0x178>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c46:	4a2b      	ldr	r2, [pc, #172]	@ (8000cf4 <HAL_UART_MspInit+0x178>)
 8000c48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c4e:	4b29      	ldr	r3, [pc, #164]	@ (8000cf4 <HAL_UART_MspInit+0x178>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	4b26      	ldr	r3, [pc, #152]	@ (8000cf4 <HAL_UART_MspInit+0x178>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5e:	4a25      	ldr	r2, [pc, #148]	@ (8000cf4 <HAL_UART_MspInit+0x178>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c66:	4b23      	ldr	r3, [pc, #140]	@ (8000cf4 <HAL_UART_MspInit+0x178>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_LIDAR_Pin|USART3_RX_LIDAR_Pin;
 8000c72:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c76:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c84:	2307      	movs	r3, #7
 8000c86:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	481b      	ldr	r0, [pc, #108]	@ (8000cfc <HAL_UART_MspInit+0x180>)
 8000c90:	f000 fccc 	bl	800162c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	@ (8000d00 <HAL_UART_MspInit+0x184>)
 8000c96:	4a1b      	ldr	r2, [pc, #108]	@ (8000d04 <HAL_UART_MspInit+0x188>)
 8000c98:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <HAL_UART_MspInit+0x184>)
 8000c9c:	221c      	movs	r2, #28
 8000c9e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	@ (8000d00 <HAL_UART_MspInit+0x184>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <HAL_UART_MspInit+0x184>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cac:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <HAL_UART_MspInit+0x184>)
 8000cae:	2280      	movs	r2, #128	@ 0x80
 8000cb0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <HAL_UART_MspInit+0x184>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <HAL_UART_MspInit+0x184>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <HAL_UART_MspInit+0x184>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <HAL_UART_MspInit+0x184>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000cca:	480d      	ldr	r0, [pc, #52]	@ (8000d00 <HAL_UART_MspInit+0x184>)
 8000ccc:	f000 faf4 	bl	80012b8 <HAL_DMA_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_UART_MspInit+0x15e>
      Error_Handler();
 8000cd6:	f7ff fecf 	bl	8000a78 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a08      	ldr	r2, [pc, #32]	@ (8000d00 <HAL_UART_MspInit+0x184>)
 8000cde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000ce2:	4a07      	ldr	r2, [pc, #28]	@ (8000d00 <HAL_UART_MspInit+0x184>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000ce8:	bf00      	nop
 8000cea:	3770      	adds	r7, #112	@ 0x70
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40004400 	.word	0x40004400
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40004800 	.word	0x40004800
 8000cfc:	48000400 	.word	0x48000400
 8000d00:	200001f8 	.word	0x200001f8
 8000d04:	40020008 	.word	0x40020008

08000d08 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000d10:	1d39      	adds	r1, r7, #4
 8000d12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d16:	2201      	movs	r2, #1
 8000d18:	4807      	ldr	r0, [pc, #28]	@ (8000d38 <__io_putchar+0x30>)
 8000d1a:	f002 fdb9 	bl	8003890 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000d1e:	1d39      	adds	r1, r7, #4
 8000d20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d24:	2201      	movs	r2, #1
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <__io_putchar+0x34>)
 8000d28:	f002 fdb2 	bl	8003890 <HAL_UART_Transmit>

  return ch;
 8000d2c:	687b      	ldr	r3, [r7, #4]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200000d0 	.word	0x200000d0
 8000d3c:	20000164 	.word	0x20000164

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <NMI_Handler+0x4>

08000d48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <MemManage_Handler+0x4>

08000d58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d96:	f000 f93f 	bl	8001018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000da4:	4802      	ldr	r0, [pc, #8]	@ (8000db0 <DMA1_Channel1_IRQHandler+0x10>)
 8000da6:	f000 fb2f 	bl	8001408 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200001f8 	.word	0x200001f8

08000db4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	e00a      	b.n	8000ddc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dc6:	f3af 8000 	nop.w
 8000dca:	4601      	mov	r1, r0
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	60ba      	str	r2, [r7, #8]
 8000dd2:	b2ca      	uxtb	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dbf0      	blt.n	8000dc6 <_read+0x12>
  }

  return len;
 8000de4:	687b      	ldr	r3, [r7, #4]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	e009      	b.n	8000e14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	60ba      	str	r2, [r7, #8]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff7d 	bl	8000d08 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3301      	adds	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	dbf1      	blt.n	8000e00 <_write+0x12>
  }
  return len;
 8000e1c:	687b      	ldr	r3, [r7, #4]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_close>:

int _close(int file)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <_isatty>:

int _isatty(int file)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e98:	4a14      	ldr	r2, [pc, #80]	@ (8000eec <_sbrk+0x5c>)
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <_sbrk+0x60>)
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eac:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <_sbrk+0x64>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	@ (8000ef8 <_sbrk+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec0:	f003 fe82 	bl	8004bc8 <__errno>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	e009      	b.n	8000ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <_sbrk+0x64>)
 8000ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20008000 	.word	0x20008000
 8000ef0:	00000400 	.word	0x00000400
 8000ef4:	20002198 	.word	0x20002198
 8000ef8:	200022f0 	.word	0x200022f0

08000efc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f20:	480d      	ldr	r0, [pc, #52]	@ (8000f58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f22:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f24:	f7ff ffea 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	@ (8000f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	@ (8000f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f64 <LoopForever+0xe>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	@ (8000f6c <LoopForever+0x16>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f003 fe41 	bl	8004bd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f52:	f7ff fb6d 	bl	8000630 <main>

08000f56 <LoopForever>:

LoopForever:
    b LoopForever
 8000f56:	e7fe      	b.n	8000f56 <LoopForever>
  ldr   r0, =_estack
 8000f58:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f64:	08005720 	.word	0x08005720
  ldr r2, =_sbss
 8000f68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f6c:	200022ec 	.word	0x200022ec

08000f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC1_2_IRQHandler>

08000f72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 f95b 	bl	8001238 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 f80e 	bl	8000fa4 <HAL_InitTick>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	e001      	b.n	8000f98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f94:	f7ff fd76 	bl	8000a84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f98:	79fb      	ldrb	r3, [r7, #7]

}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fb0:	4b16      	ldr	r3, [pc, #88]	@ (800100c <HAL_InitTick+0x68>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d022      	beq.n	8000ffe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb8:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <HAL_InitTick+0x6c>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b13      	ldr	r3, [pc, #76]	@ (800100c <HAL_InitTick+0x68>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 f966 	bl	800129e <HAL_SYSTICK_Config>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d10f      	bne.n	8000ff8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b0f      	cmp	r3, #15
 8000fdc:	d809      	bhi.n	8000ff2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe6:	f000 f932 	bl	800124e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <HAL_InitTick+0x70>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	e007      	b.n	8001002 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	e004      	b.n	8001002 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	e001      	b.n	8001002 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001002:	7bfb      	ldrb	r3, [r7, #15]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000008 	.word	0x20000008
 8001010:	20000000 	.word	0x20000000
 8001014:	20000004 	.word	0x20000004

08001018 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800101c:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <HAL_IncTick+0x1c>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <HAL_IncTick+0x20>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4413      	add	r3, r2
 8001026:	4a03      	ldr	r2, [pc, #12]	@ (8001034 <HAL_IncTick+0x1c>)
 8001028:	6013      	str	r3, [r2, #0]
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	2000219c 	.word	0x2000219c
 8001038:	20000008 	.word	0x20000008

0800103c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return uwTick;
 8001040:	4b03      	ldr	r3, [pc, #12]	@ (8001050 <HAL_GetTick+0x14>)
 8001042:	681b      	ldr	r3, [r3, #0]
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	2000219c 	.word	0x2000219c

08001054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800105c:	f7ff ffee 	bl	800103c <HAL_GetTick>
 8001060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800106c:	d004      	beq.n	8001078 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106e:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <HAL_Delay+0x40>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	4413      	add	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001078:	bf00      	nop
 800107a:	f7ff ffdf 	bl	800103c <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	429a      	cmp	r2, r3
 8001088:	d8f7      	bhi.n	800107a <HAL_Delay+0x26>
  {
  }
}
 800108a:	bf00      	nop
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000008 	.word	0x20000008

08001098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a8:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <__NVIC_SetPriorityGrouping+0x44>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010b4:	4013      	ands	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ca:	4a04      	ldr	r2, [pc, #16]	@ (80010dc <__NVIC_SetPriorityGrouping+0x44>)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	60d3      	str	r3, [r2, #12]
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e4:	4b04      	ldr	r3, [pc, #16]	@ (80010f8 <__NVIC_GetPriorityGrouping+0x18>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	f003 0307 	and.w	r3, r3, #7
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	2b00      	cmp	r3, #0
 800110c:	db0b      	blt.n	8001126 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	f003 021f 	and.w	r2, r3, #31
 8001114:	4907      	ldr	r1, [pc, #28]	@ (8001134 <__NVIC_EnableIRQ+0x38>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	095b      	lsrs	r3, r3, #5
 800111c:	2001      	movs	r0, #1
 800111e:	fa00 f202 	lsl.w	r2, r0, r2
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000e100 	.word	0xe000e100

08001138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	db0a      	blt.n	8001162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	b2da      	uxtb	r2, r3
 8001150:	490c      	ldr	r1, [pc, #48]	@ (8001184 <__NVIC_SetPriority+0x4c>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	440b      	add	r3, r1
 800115c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001160:	e00a      	b.n	8001178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4908      	ldr	r1, [pc, #32]	@ (8001188 <__NVIC_SetPriority+0x50>)
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	3b04      	subs	r3, #4
 8001170:	0112      	lsls	r2, r2, #4
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	440b      	add	r3, r1
 8001176:	761a      	strb	r2, [r3, #24]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000e100 	.word	0xe000e100
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	@ 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f1c3 0307 	rsb	r3, r3, #7
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	bf28      	it	cs
 80011aa:	2304      	movcs	r3, #4
 80011ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3304      	adds	r3, #4
 80011b2:	2b06      	cmp	r3, #6
 80011b4:	d902      	bls.n	80011bc <NVIC_EncodePriority+0x30>
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3b03      	subs	r3, #3
 80011ba:	e000      	b.n	80011be <NVIC_EncodePriority+0x32>
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	f04f 32ff 	mov.w	r2, #4294967295
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43da      	mvns	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	401a      	ands	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d4:	f04f 31ff 	mov.w	r1, #4294967295
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	43d9      	mvns	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	4313      	orrs	r3, r2
         );
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3724      	adds	r7, #36	@ 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001204:	d301      	bcc.n	800120a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001206:	2301      	movs	r3, #1
 8001208:	e00f      	b.n	800122a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120a:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <SysTick_Config+0x40>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001212:	210f      	movs	r1, #15
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f7ff ff8e 	bl	8001138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800121c:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <SysTick_Config+0x40>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001222:	4b04      	ldr	r3, [pc, #16]	@ (8001234 <SysTick_Config+0x40>)
 8001224:	2207      	movs	r2, #7
 8001226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	e000e010 	.word	0xe000e010

08001238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff29 	bl	8001098 <__NVIC_SetPriorityGrouping>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800125c:	f7ff ff40 	bl	80010e0 <__NVIC_GetPriorityGrouping>
 8001260:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	6978      	ldr	r0, [r7, #20]
 8001268:	f7ff ff90 	bl	800118c <NVIC_EncodePriority>
 800126c:	4602      	mov	r2, r0
 800126e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff5f 	bl	8001138 <__NVIC_SetPriority>
}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff33 	bl	80010fc <__NVIC_EnableIRQ>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ffa4 	bl	80011f4 <SysTick_Config>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e08d      	b.n	80013e6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b47      	ldr	r3, [pc, #284]	@ (80013f0 <HAL_DMA_Init+0x138>)
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d80f      	bhi.n	80012f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	4b45      	ldr	r3, [pc, #276]	@ (80013f4 <HAL_DMA_Init+0x13c>)
 80012de:	4413      	add	r3, r2
 80012e0:	4a45      	ldr	r2, [pc, #276]	@ (80013f8 <HAL_DMA_Init+0x140>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	009a      	lsls	r2, r3, #2
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a42      	ldr	r2, [pc, #264]	@ (80013fc <HAL_DMA_Init+0x144>)
 80012f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80012f4:	e00e      	b.n	8001314 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b40      	ldr	r3, [pc, #256]	@ (8001400 <HAL_DMA_Init+0x148>)
 80012fe:	4413      	add	r3, r2
 8001300:	4a3d      	ldr	r2, [pc, #244]	@ (80013f8 <HAL_DMA_Init+0x140>)
 8001302:	fba2 2303 	umull	r2, r3, r2, r3
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	009a      	lsls	r2, r3, #2
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a3c      	ldr	r2, [pc, #240]	@ (8001404 <HAL_DMA_Init+0x14c>)
 8001312:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2202      	movs	r2, #2
 8001318:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800132a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800132e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001338:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001344:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001350:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	4313      	orrs	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f8fe 	bl	8001568 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001374:	d102      	bne.n	800137c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001390:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d010      	beq.n	80013bc <HAL_DMA_Init+0x104>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d80c      	bhi.n	80013bc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 f91e 	bl	80015e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	e008      	b.n	80013ce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40020407 	.word	0x40020407
 80013f4:	bffdfff8 	.word	0xbffdfff8
 80013f8:	cccccccd 	.word	0xcccccccd
 80013fc:	40020000 	.word	0x40020000
 8001400:	bffdfbf8 	.word	0xbffdfbf8
 8001404:	40020400 	.word	0x40020400

08001408 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001424:	f003 031f 	and.w	r3, r3, #31
 8001428:	2204      	movs	r2, #4
 800142a:	409a      	lsls	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4013      	ands	r3, r2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d026      	beq.n	8001482 <HAL_DMA_IRQHandler+0x7a>
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	2b00      	cmp	r3, #0
 800143c:	d021      	beq.n	8001482 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0320 	and.w	r3, r3, #32
 8001448:	2b00      	cmp	r3, #0
 800144a:	d107      	bne.n	800145c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0204 	bic.w	r2, r2, #4
 800145a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001460:	f003 021f 	and.w	r2, r3, #31
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001468:	2104      	movs	r1, #4
 800146a:	fa01 f202 	lsl.w	r2, r1, r2
 800146e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001474:	2b00      	cmp	r3, #0
 8001476:	d071      	beq.n	800155c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001480:	e06c      	b.n	800155c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001486:	f003 031f 	and.w	r3, r3, #31
 800148a:	2202      	movs	r2, #2
 800148c:	409a      	lsls	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d02e      	beq.n	80014f4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d029      	beq.n	80014f4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0320 	and.w	r3, r3, #32
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10b      	bne.n	80014c6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 020a 	bic.w	r2, r2, #10
 80014bc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	f003 021f 	and.w	r2, r3, #31
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	2102      	movs	r1, #2
 80014d4:	fa01 f202 	lsl.w	r2, r1, r2
 80014d8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d038      	beq.n	800155c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80014f2:	e033      	b.n	800155c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f8:	f003 031f 	and.w	r3, r3, #31
 80014fc:	2208      	movs	r2, #8
 80014fe:	409a      	lsls	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4013      	ands	r3, r2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d02a      	beq.n	800155e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d025      	beq.n	800155e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 020e 	bic.w	r2, r2, #14
 8001520:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001526:	f003 021f 	and.w	r2, r3, #31
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	2101      	movs	r1, #1
 8001530:	fa01 f202 	lsl.w	r2, r1, r2
 8001534:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001550:	2b00      	cmp	r3, #0
 8001552:	d004      	beq.n	800155e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800155c:	bf00      	nop
 800155e:	bf00      	nop
}
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001568:	b480      	push	{r7}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001578:	429a      	cmp	r2, r3
 800157a:	d802      	bhi.n	8001582 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800157c:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	e001      	b.n	8001586 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001584:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	3b08      	subs	r3, #8
 8001592:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001594:	fba2 2303 	umull	r2, r3, r2, r3
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	009a      	lsls	r2, r3, #2
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4413      	add	r3, r2
 80015a8:	461a      	mov	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a0b      	ldr	r2, [pc, #44]	@ (80015e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80015b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	2201      	movs	r2, #1
 80015bc:	409a      	lsls	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80015c2:	bf00      	nop
 80015c4:	371c      	adds	r7, #28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40020407 	.word	0x40020407
 80015d4:	40020800 	.word	0x40020800
 80015d8:	40020820 	.word	0x40020820
 80015dc:	cccccccd 	.word	0xcccccccd
 80015e0:	40020880 	.word	0x40020880

080015e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	461a      	mov	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a08      	ldr	r2, [pc, #32]	@ (8001628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001606:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3b01      	subs	r3, #1
 800160c:	f003 031f 	and.w	r3, r3, #31
 8001610:	2201      	movs	r2, #1
 8001612:	409a      	lsls	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	1000823f 	.word	0x1000823f
 8001628:	40020940 	.word	0x40020940

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800163a:	e15a      	b.n	80018f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2101      	movs	r1, #1
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 814c 	beq.w	80018ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d005      	beq.n	800166c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001668:	2b02      	cmp	r3, #2
 800166a:	d130      	bne.n	80016ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016a2:	2201      	movs	r2, #1
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	091b      	lsrs	r3, r3, #4
 80016b8:	f003 0201 	and.w	r2, r3, #1
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d017      	beq.n	800170a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	2203      	movs	r2, #3
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d123      	bne.n	800175e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	08da      	lsrs	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3208      	adds	r2, #8
 800171e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	220f      	movs	r2, #15
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	691a      	ldr	r2, [r3, #16]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	6939      	ldr	r1, [r7, #16]
 800175a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2203      	movs	r2, #3
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0203 	and.w	r2, r3, #3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 80a6 	beq.w	80018ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a0:	4b5b      	ldr	r3, [pc, #364]	@ (8001910 <HAL_GPIO_Init+0x2e4>)
 80017a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a4:	4a5a      	ldr	r2, [pc, #360]	@ (8001910 <HAL_GPIO_Init+0x2e4>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ac:	4b58      	ldr	r3, [pc, #352]	@ (8001910 <HAL_GPIO_Init+0x2e4>)
 80017ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017b8:	4a56      	ldr	r2, [pc, #344]	@ (8001914 <HAL_GPIO_Init+0x2e8>)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	3302      	adds	r3, #2
 80017c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	220f      	movs	r2, #15
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017e2:	d01f      	beq.n	8001824 <HAL_GPIO_Init+0x1f8>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a4c      	ldr	r2, [pc, #304]	@ (8001918 <HAL_GPIO_Init+0x2ec>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d019      	beq.n	8001820 <HAL_GPIO_Init+0x1f4>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a4b      	ldr	r2, [pc, #300]	@ (800191c <HAL_GPIO_Init+0x2f0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d013      	beq.n	800181c <HAL_GPIO_Init+0x1f0>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a4a      	ldr	r2, [pc, #296]	@ (8001920 <HAL_GPIO_Init+0x2f4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d00d      	beq.n	8001818 <HAL_GPIO_Init+0x1ec>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a49      	ldr	r2, [pc, #292]	@ (8001924 <HAL_GPIO_Init+0x2f8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d007      	beq.n	8001814 <HAL_GPIO_Init+0x1e8>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a48      	ldr	r2, [pc, #288]	@ (8001928 <HAL_GPIO_Init+0x2fc>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d101      	bne.n	8001810 <HAL_GPIO_Init+0x1e4>
 800180c:	2305      	movs	r3, #5
 800180e:	e00a      	b.n	8001826 <HAL_GPIO_Init+0x1fa>
 8001810:	2306      	movs	r3, #6
 8001812:	e008      	b.n	8001826 <HAL_GPIO_Init+0x1fa>
 8001814:	2304      	movs	r3, #4
 8001816:	e006      	b.n	8001826 <HAL_GPIO_Init+0x1fa>
 8001818:	2303      	movs	r3, #3
 800181a:	e004      	b.n	8001826 <HAL_GPIO_Init+0x1fa>
 800181c:	2302      	movs	r3, #2
 800181e:	e002      	b.n	8001826 <HAL_GPIO_Init+0x1fa>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <HAL_GPIO_Init+0x1fa>
 8001824:	2300      	movs	r3, #0
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	f002 0203 	and.w	r2, r2, #3
 800182c:	0092      	lsls	r2, r2, #2
 800182e:	4093      	lsls	r3, r2
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001836:	4937      	ldr	r1, [pc, #220]	@ (8001914 <HAL_GPIO_Init+0x2e8>)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	3302      	adds	r3, #2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001844:	4b39      	ldr	r3, [pc, #228]	@ (800192c <HAL_GPIO_Init+0x300>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001868:	4a30      	ldr	r2, [pc, #192]	@ (800192c <HAL_GPIO_Init+0x300>)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800186e:	4b2f      	ldr	r3, [pc, #188]	@ (800192c <HAL_GPIO_Init+0x300>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001892:	4a26      	ldr	r2, [pc, #152]	@ (800192c <HAL_GPIO_Init+0x300>)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001898:	4b24      	ldr	r3, [pc, #144]	@ (800192c <HAL_GPIO_Init+0x300>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018bc:	4a1b      	ldr	r2, [pc, #108]	@ (800192c <HAL_GPIO_Init+0x300>)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	@ (800192c <HAL_GPIO_Init+0x300>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018e6:	4a11      	ldr	r2, [pc, #68]	@ (800192c <HAL_GPIO_Init+0x300>)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	3301      	adds	r3, #1
 80018f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	fa22 f303 	lsr.w	r3, r2, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f47f ae9d 	bne.w	800163c <HAL_GPIO_Init+0x10>
  }
}
 8001902:	bf00      	nop
 8001904:	bf00      	nop
 8001906:	371c      	adds	r7, #28
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40021000 	.word	0x40021000
 8001914:	40010000 	.word	0x40010000
 8001918:	48000400 	.word	0x48000400
 800191c:	48000800 	.word	0x48000800
 8001920:	48000c00 	.word	0x48000c00
 8001924:	48001000 	.word	0x48001000
 8001928:	48001400 	.word	0x48001400
 800192c:	40010400 	.word	0x40010400

08001930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
 800193c:	4613      	mov	r3, r2
 800193e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001940:	787b      	ldrb	r3, [r7, #1]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001946:	887a      	ldrh	r2, [r7, #2]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800194c:	e002      	b.n	8001954 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d141      	bne.n	80019f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800196e:	4b4b      	ldr	r3, [pc, #300]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800197a:	d131      	bne.n	80019e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800197c:	4b47      	ldr	r3, [pc, #284]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800197e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001982:	4a46      	ldr	r2, [pc, #280]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001988:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800198c:	4b43      	ldr	r3, [pc, #268]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001994:	4a41      	ldr	r2, [pc, #260]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001996:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800199a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800199c:	4b40      	ldr	r3, [pc, #256]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2232      	movs	r2, #50	@ 0x32
 80019a2:	fb02 f303 	mul.w	r3, r2, r3
 80019a6:	4a3f      	ldr	r2, [pc, #252]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019a8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ac:	0c9b      	lsrs	r3, r3, #18
 80019ae:	3301      	adds	r3, #1
 80019b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019b2:	e002      	b.n	80019ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ba:	4b38      	ldr	r3, [pc, #224]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019c6:	d102      	bne.n	80019ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f2      	bne.n	80019b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019ce:	4b33      	ldr	r3, [pc, #204]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019da:	d158      	bne.n	8001a8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e057      	b.n	8001a90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019e0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019e6:	4a2d      	ldr	r2, [pc, #180]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80019f0:	e04d      	b.n	8001a8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019f8:	d141      	bne.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019fa:	4b28      	ldr	r3, [pc, #160]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a06:	d131      	bne.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a08:	4b24      	ldr	r3, [pc, #144]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a0e:	4a23      	ldr	r2, [pc, #140]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a18:	4b20      	ldr	r3, [pc, #128]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a20:	4a1e      	ldr	r2, [pc, #120]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a28:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2232      	movs	r2, #50	@ 0x32
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a34:	fba2 2303 	umull	r2, r3, r2, r3
 8001a38:	0c9b      	lsrs	r3, r3, #18
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a3e:	e002      	b.n	8001a46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a46:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a52:	d102      	bne.n	8001a5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f2      	bne.n	8001a40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a5a:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a66:	d112      	bne.n	8001a8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e011      	b.n	8001a90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a72:	4a0a      	ldr	r2, [pc, #40]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a7c:	e007      	b.n	8001a8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a7e:	4b07      	ldr	r3, [pc, #28]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a86:	4a05      	ldr	r2, [pc, #20]	@ (8001a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40007000 	.word	0x40007000
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	431bde83 	.word	0x431bde83

08001aa8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001aac:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	4a04      	ldr	r2, [pc, #16]	@ (8001ac4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ab2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab6:	6093      	str	r3, [r2, #8]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40007000 	.word	0x40007000

08001ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e2fe      	b.n	80020d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d075      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ae6:	4b97      	ldr	r3, [pc, #604]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001af0:	4b94      	ldr	r3, [pc, #592]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b0c      	cmp	r3, #12
 8001afe:	d102      	bne.n	8001b06 <HAL_RCC_OscConfig+0x3e>
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d002      	beq.n	8001b0c <HAL_RCC_OscConfig+0x44>
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d10b      	bne.n	8001b24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0c:	4b8d      	ldr	r3, [pc, #564]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d05b      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x108>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d157      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e2d9      	b.n	80020d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b2c:	d106      	bne.n	8001b3c <HAL_RCC_OscConfig+0x74>
 8001b2e:	4b85      	ldr	r3, [pc, #532]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a84      	ldr	r2, [pc, #528]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e01d      	b.n	8001b78 <HAL_RCC_OscConfig+0xb0>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b44:	d10c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x98>
 8001b46:	4b7f      	ldr	r3, [pc, #508]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001b4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	4b7c      	ldr	r3, [pc, #496]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a7b      	ldr	r2, [pc, #492]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e00b      	b.n	8001b78 <HAL_RCC_OscConfig+0xb0>
 8001b60:	4b78      	ldr	r3, [pc, #480]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a77      	ldr	r2, [pc, #476]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001b66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4b75      	ldr	r3, [pc, #468]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a74      	ldr	r2, [pc, #464]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001b72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d013      	beq.n	8001ba8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7ff fa5c 	bl	800103c <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b88:	f7ff fa58 	bl	800103c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	@ 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e29e      	b.n	80020d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b9a:	4b6a      	ldr	r3, [pc, #424]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0xc0>
 8001ba6:	e014      	b.n	8001bd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fa48 	bl	800103c <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fa44 	bl	800103c <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	@ 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e28a      	b.n	80020d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bc2:	4b60      	ldr	r3, [pc, #384]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0xe8>
 8001bce:	e000      	b.n	8001bd2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d075      	beq.n	8001cca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bde:	4b59      	ldr	r3, [pc, #356]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001be8:	4b56      	ldr	r3, [pc, #344]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	2b0c      	cmp	r3, #12
 8001bf6:	d102      	bne.n	8001bfe <HAL_RCC_OscConfig+0x136>
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d002      	beq.n	8001c04 <HAL_RCC_OscConfig+0x13c>
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d11f      	bne.n	8001c44 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c04:	4b4f      	ldr	r3, [pc, #316]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_OscConfig+0x154>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e25d      	b.n	80020d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1c:	4b49      	ldr	r3, [pc, #292]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	061b      	lsls	r3, r3, #24
 8001c2a:	4946      	ldr	r1, [pc, #280]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c30:	4b45      	ldr	r3, [pc, #276]	@ (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff f9b5 	bl	8000fa4 <HAL_InitTick>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d043      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e249      	b.n	80020d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d023      	beq.n	8001c94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a3c      	ldr	r2, [pc, #240]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff f9f0 	bl	800103c <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c60:	f7ff f9ec 	bl	800103c <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e232      	b.n	80020d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c72:	4b34      	ldr	r3, [pc, #208]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7e:	4b31      	ldr	r3, [pc, #196]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	061b      	lsls	r3, r3, #24
 8001c8c:	492d      	ldr	r1, [pc, #180]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	604b      	str	r3, [r1, #4]
 8001c92:	e01a      	b.n	8001cca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c94:	4b2b      	ldr	r3, [pc, #172]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a2a      	ldr	r2, [pc, #168]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001c9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff f9cc 	bl	800103c <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca8:	f7ff f9c8 	bl	800103c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e20e      	b.n	80020d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cba:	4b22      	ldr	r3, [pc, #136]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x1e0>
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d041      	beq.n	8001d5a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d01c      	beq.n	8001d18 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cde:	4b19      	ldr	r3, [pc, #100]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ce4:	4a17      	ldr	r2, [pc, #92]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cee:	f7ff f9a5 	bl	800103c <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf6:	f7ff f9a1 	bl	800103c <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e1e7      	b.n	80020d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d08:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0ef      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x22e>
 8001d16:	e020      	b.n	8001d5a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d18:	4b0a      	ldr	r3, [pc, #40]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d1e:	4a09      	ldr	r2, [pc, #36]	@ (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d28:	f7ff f988 	bl	800103c <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d2e:	e00d      	b.n	8001d4c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d30:	f7ff f984 	bl	800103c <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d906      	bls.n	8001d4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e1ca      	b.n	80020d8 <HAL_RCC_OscConfig+0x610>
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000
 8001d48:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d4c:	4b8c      	ldr	r3, [pc, #560]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1ea      	bne.n	8001d30 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 80a6 	beq.w	8001eb4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d6c:	4b84      	ldr	r3, [pc, #528]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_OscConfig+0x2b4>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x2b6>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00d      	beq.n	8001d9e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	4b7f      	ldr	r3, [pc, #508]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d86:	4a7e      	ldr	r2, [pc, #504]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d8e:	4b7c      	ldr	r3, [pc, #496]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d9e:	4b79      	ldr	r3, [pc, #484]	@ (8001f84 <HAL_RCC_OscConfig+0x4bc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d118      	bne.n	8001ddc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001daa:	4b76      	ldr	r3, [pc, #472]	@ (8001f84 <HAL_RCC_OscConfig+0x4bc>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a75      	ldr	r2, [pc, #468]	@ (8001f84 <HAL_RCC_OscConfig+0x4bc>)
 8001db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db6:	f7ff f941 	bl	800103c <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dbe:	f7ff f93d 	bl	800103c <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e183      	b.n	80020d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd0:	4b6c      	ldr	r3, [pc, #432]	@ (8001f84 <HAL_RCC_OscConfig+0x4bc>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d108      	bne.n	8001df6 <HAL_RCC_OscConfig+0x32e>
 8001de4:	4b66      	ldr	r3, [pc, #408]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dea:	4a65      	ldr	r2, [pc, #404]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001df4:	e024      	b.n	8001e40 <HAL_RCC_OscConfig+0x378>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b05      	cmp	r3, #5
 8001dfc:	d110      	bne.n	8001e20 <HAL_RCC_OscConfig+0x358>
 8001dfe:	4b60      	ldr	r3, [pc, #384]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e04:	4a5e      	ldr	r2, [pc, #376]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e0e:	4b5c      	ldr	r3, [pc, #368]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e14:	4a5a      	ldr	r2, [pc, #360]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e1e:	e00f      	b.n	8001e40 <HAL_RCC_OscConfig+0x378>
 8001e20:	4b57      	ldr	r3, [pc, #348]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e26:	4a56      	ldr	r2, [pc, #344]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e30:	4b53      	ldr	r3, [pc, #332]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e36:	4a52      	ldr	r2, [pc, #328]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d016      	beq.n	8001e76 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e48:	f7ff f8f8 	bl	800103c <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e50:	f7ff f8f4 	bl	800103c <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e138      	b.n	80020d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e66:	4b46      	ldr	r3, [pc, #280]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0ed      	beq.n	8001e50 <HAL_RCC_OscConfig+0x388>
 8001e74:	e015      	b.n	8001ea2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e76:	f7ff f8e1 	bl	800103c <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7ff f8dd 	bl	800103c <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e121      	b.n	80020d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e94:	4b3a      	ldr	r3, [pc, #232]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1ed      	bne.n	8001e7e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ea2:	7ffb      	ldrb	r3, [r7, #31]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d105      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea8:	4b35      	ldr	r3, [pc, #212]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eac:	4a34      	ldr	r2, [pc, #208]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001eae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d03c      	beq.n	8001f3a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01c      	beq.n	8001f02 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001eca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ece:	4a2c      	ldr	r2, [pc, #176]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed8:	f7ff f8b0 	bl	800103c <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ee0:	f7ff f8ac 	bl	800103c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e0f2      	b.n	80020d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ef2:	4b23      	ldr	r3, [pc, #140]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001ef4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0ef      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x418>
 8001f00:	e01b      	b.n	8001f3a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f02:	4b1f      	ldr	r3, [pc, #124]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001f04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f08:	4a1d      	ldr	r2, [pc, #116]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001f0a:	f023 0301 	bic.w	r3, r3, #1
 8001f0e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f12:	f7ff f893 	bl	800103c <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f1a:	f7ff f88f 	bl	800103c <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e0d5      	b.n	80020d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f2c:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1ef      	bne.n	8001f1a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 80c9 	beq.w	80020d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f44:	4b0e      	ldr	r3, [pc, #56]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	2b0c      	cmp	r3, #12
 8001f4e:	f000 8083 	beq.w	8002058 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d15e      	bne.n	8002018 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5a:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a08      	ldr	r2, [pc, #32]	@ (8001f80 <HAL_RCC_OscConfig+0x4b8>)
 8001f60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7ff f869 	bl	800103c <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f6c:	e00c      	b.n	8001f88 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7ff f865 	bl	800103c <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d905      	bls.n	8001f88 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e0ab      	b.n	80020d8 <HAL_RCC_OscConfig+0x610>
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f88:	4b55      	ldr	r3, [pc, #340]	@ (80020e0 <HAL_RCC_OscConfig+0x618>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1ec      	bne.n	8001f6e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f94:	4b52      	ldr	r3, [pc, #328]	@ (80020e0 <HAL_RCC_OscConfig+0x618>)
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	4b52      	ldr	r3, [pc, #328]	@ (80020e4 <HAL_RCC_OscConfig+0x61c>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6a11      	ldr	r1, [r2, #32]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fa4:	3a01      	subs	r2, #1
 8001fa6:	0112      	lsls	r2, r2, #4
 8001fa8:	4311      	orrs	r1, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001fae:	0212      	lsls	r2, r2, #8
 8001fb0:	4311      	orrs	r1, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001fb6:	0852      	lsrs	r2, r2, #1
 8001fb8:	3a01      	subs	r2, #1
 8001fba:	0552      	lsls	r2, r2, #21
 8001fbc:	4311      	orrs	r1, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001fc2:	0852      	lsrs	r2, r2, #1
 8001fc4:	3a01      	subs	r2, #1
 8001fc6:	0652      	lsls	r2, r2, #25
 8001fc8:	4311      	orrs	r1, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001fce:	06d2      	lsls	r2, r2, #27
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	4943      	ldr	r1, [pc, #268]	@ (80020e0 <HAL_RCC_OscConfig+0x618>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd8:	4b41      	ldr	r3, [pc, #260]	@ (80020e0 <HAL_RCC_OscConfig+0x618>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a40      	ldr	r2, [pc, #256]	@ (80020e0 <HAL_RCC_OscConfig+0x618>)
 8001fde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fe2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fe4:	4b3e      	ldr	r3, [pc, #248]	@ (80020e0 <HAL_RCC_OscConfig+0x618>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4a3d      	ldr	r2, [pc, #244]	@ (80020e0 <HAL_RCC_OscConfig+0x618>)
 8001fea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7ff f824 	bl	800103c <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7ff f820 	bl	800103c <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e066      	b.n	80020d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200a:	4b35      	ldr	r3, [pc, #212]	@ (80020e0 <HAL_RCC_OscConfig+0x618>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x530>
 8002016:	e05e      	b.n	80020d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002018:	4b31      	ldr	r3, [pc, #196]	@ (80020e0 <HAL_RCC_OscConfig+0x618>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a30      	ldr	r2, [pc, #192]	@ (80020e0 <HAL_RCC_OscConfig+0x618>)
 800201e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002024:	f7ff f80a 	bl	800103c <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202c:	f7ff f806 	bl	800103c <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e04c      	b.n	80020d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800203e:	4b28      	ldr	r3, [pc, #160]	@ (80020e0 <HAL_RCC_OscConfig+0x618>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800204a:	4b25      	ldr	r3, [pc, #148]	@ (80020e0 <HAL_RCC_OscConfig+0x618>)
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	4924      	ldr	r1, [pc, #144]	@ (80020e0 <HAL_RCC_OscConfig+0x618>)
 8002050:	4b25      	ldr	r3, [pc, #148]	@ (80020e8 <HAL_RCC_OscConfig+0x620>)
 8002052:	4013      	ands	r3, r2
 8002054:	60cb      	str	r3, [r1, #12]
 8002056:	e03e      	b.n	80020d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e039      	b.n	80020d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002064:	4b1e      	ldr	r3, [pc, #120]	@ (80020e0 <HAL_RCC_OscConfig+0x618>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 0203 	and.w	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	429a      	cmp	r2, r3
 8002076:	d12c      	bne.n	80020d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002082:	3b01      	subs	r3, #1
 8002084:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d123      	bne.n	80020d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002094:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002096:	429a      	cmp	r2, r3
 8002098:	d11b      	bne.n	80020d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d113      	bne.n	80020d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b4:	085b      	lsrs	r3, r3, #1
 80020b6:	3b01      	subs	r3, #1
 80020b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d109      	bne.n	80020d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c8:	085b      	lsrs	r3, r3, #1
 80020ca:	3b01      	subs	r3, #1
 80020cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d001      	beq.n	80020d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000
 80020e4:	019f800c 	.word	0x019f800c
 80020e8:	feeefffc 	.word	0xfeeefffc

080020ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e11e      	b.n	8002342 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002104:	4b91      	ldr	r3, [pc, #580]	@ (800234c <HAL_RCC_ClockConfig+0x260>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d910      	bls.n	8002134 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002112:	4b8e      	ldr	r3, [pc, #568]	@ (800234c <HAL_RCC_ClockConfig+0x260>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 020f 	bic.w	r2, r3, #15
 800211a:	498c      	ldr	r1, [pc, #560]	@ (800234c <HAL_RCC_ClockConfig+0x260>)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	4b8a      	ldr	r3, [pc, #552]	@ (800234c <HAL_RCC_ClockConfig+0x260>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e106      	b.n	8002342 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d073      	beq.n	8002228 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d129      	bne.n	800219c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002148:	4b81      	ldr	r3, [pc, #516]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0f4      	b.n	8002342 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002158:	f000 f99e 	bl	8002498 <RCC_GetSysClockFreqFromPLLSource>
 800215c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4a7c      	ldr	r2, [pc, #496]	@ (8002354 <HAL_RCC_ClockConfig+0x268>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d93f      	bls.n	80021e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002166:	4b7a      	ldr	r3, [pc, #488]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800217a:	2b00      	cmp	r3, #0
 800217c:	d033      	beq.n	80021e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002182:	2b00      	cmp	r3, #0
 8002184:	d12f      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002186:	4b72      	ldr	r3, [pc, #456]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800218e:	4a70      	ldr	r2, [pc, #448]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 8002190:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002194:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002196:	2380      	movs	r3, #128	@ 0x80
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	e024      	b.n	80021e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d107      	bne.n	80021b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d109      	bne.n	80021c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0c6      	b.n	8002342 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021b4:	4b66      	ldr	r3, [pc, #408]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0be      	b.n	8002342 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80021c4:	f000 f8ce 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4a61      	ldr	r2, [pc, #388]	@ (8002354 <HAL_RCC_ClockConfig+0x268>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d909      	bls.n	80021e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021d2:	4b5f      	ldr	r3, [pc, #380]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021da:	4a5d      	ldr	r2, [pc, #372]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 80021dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80021e2:	2380      	movs	r3, #128	@ 0x80
 80021e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f023 0203 	bic.w	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4957      	ldr	r1, [pc, #348]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f8:	f7fe ff20 	bl	800103c <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002200:	f7fe ff1c 	bl	800103c <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e095      	b.n	8002342 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	4b4e      	ldr	r3, [pc, #312]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 020c 	and.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	429a      	cmp	r2, r3
 8002226:	d1eb      	bne.n	8002200 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d023      	beq.n	800227c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002240:	4b43      	ldr	r3, [pc, #268]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4a42      	ldr	r2, [pc, #264]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 8002246:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800224a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d007      	beq.n	8002268 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002258:	4b3d      	ldr	r3, [pc, #244]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002260:	4a3b      	ldr	r2, [pc, #236]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 8002262:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002266:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002268:	4b39      	ldr	r3, [pc, #228]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4936      	ldr	r1, [pc, #216]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
 800227a:	e008      	b.n	800228e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b80      	cmp	r3, #128	@ 0x80
 8002280:	d105      	bne.n	800228e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002282:	4b33      	ldr	r3, [pc, #204]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	4a32      	ldr	r2, [pc, #200]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 8002288:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800228c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800228e:	4b2f      	ldr	r3, [pc, #188]	@ (800234c <HAL_RCC_ClockConfig+0x260>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d21d      	bcs.n	80022d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229c:	4b2b      	ldr	r3, [pc, #172]	@ (800234c <HAL_RCC_ClockConfig+0x260>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 020f 	bic.w	r2, r3, #15
 80022a4:	4929      	ldr	r1, [pc, #164]	@ (800234c <HAL_RCC_ClockConfig+0x260>)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022ac:	f7fe fec6 	bl	800103c <HAL_GetTick>
 80022b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b2:	e00a      	b.n	80022ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b4:	f7fe fec2 	bl	800103c <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e03b      	b.n	8002342 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b20      	ldr	r3, [pc, #128]	@ (800234c <HAL_RCC_ClockConfig+0x260>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d1ed      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4917      	ldr	r1, [pc, #92]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002302:	4b13      	ldr	r3, [pc, #76]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	490f      	ldr	r1, [pc, #60]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 8002312:	4313      	orrs	r3, r2
 8002314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002316:	f000 f825 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 800231a:	4602      	mov	r2, r0
 800231c:	4b0c      	ldr	r3, [pc, #48]	@ (8002350 <HAL_RCC_ClockConfig+0x264>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	490c      	ldr	r1, [pc, #48]	@ (8002358 <HAL_RCC_ClockConfig+0x26c>)
 8002328:	5ccb      	ldrb	r3, [r1, r3]
 800232a:	f003 031f 	and.w	r3, r3, #31
 800232e:	fa22 f303 	lsr.w	r3, r2, r3
 8002332:	4a0a      	ldr	r2, [pc, #40]	@ (800235c <HAL_RCC_ClockConfig+0x270>)
 8002334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002336:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <HAL_RCC_ClockConfig+0x274>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fe32 	bl	8000fa4 <HAL_InitTick>
 8002340:	4603      	mov	r3, r0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40022000 	.word	0x40022000
 8002350:	40021000 	.word	0x40021000
 8002354:	04c4b400 	.word	0x04c4b400
 8002358:	0800569c 	.word	0x0800569c
 800235c:	20000000 	.word	0x20000000
 8002360:	20000004 	.word	0x20000004

08002364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800236a:	4b2c      	ldr	r3, [pc, #176]	@ (800241c <HAL_RCC_GetSysClockFreq+0xb8>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b04      	cmp	r3, #4
 8002374:	d102      	bne.n	800237c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002376:	4b2a      	ldr	r3, [pc, #168]	@ (8002420 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	e047      	b.n	800240c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800237c:	4b27      	ldr	r3, [pc, #156]	@ (800241c <HAL_RCC_GetSysClockFreq+0xb8>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b08      	cmp	r3, #8
 8002386:	d102      	bne.n	800238e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002388:	4b26      	ldr	r3, [pc, #152]	@ (8002424 <HAL_RCC_GetSysClockFreq+0xc0>)
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	e03e      	b.n	800240c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800238e:	4b23      	ldr	r3, [pc, #140]	@ (800241c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b0c      	cmp	r3, #12
 8002398:	d136      	bne.n	8002408 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800239a:	4b20      	ldr	r3, [pc, #128]	@ (800241c <HAL_RCC_GetSysClockFreq+0xb8>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023a4:	4b1d      	ldr	r3, [pc, #116]	@ (800241c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	3301      	adds	r3, #1
 80023b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d10c      	bne.n	80023d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023b8:	4a1a      	ldr	r2, [pc, #104]	@ (8002424 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c0:	4a16      	ldr	r2, [pc, #88]	@ (800241c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c2:	68d2      	ldr	r2, [r2, #12]
 80023c4:	0a12      	lsrs	r2, r2, #8
 80023c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	617b      	str	r3, [r7, #20]
      break;
 80023d0:	e00c      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023d2:	4a13      	ldr	r2, [pc, #76]	@ (8002420 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	4a10      	ldr	r2, [pc, #64]	@ (800241c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023dc:	68d2      	ldr	r2, [r2, #12]
 80023de:	0a12      	lsrs	r2, r2, #8
 80023e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80023e4:	fb02 f303 	mul.w	r3, r2, r3
 80023e8:	617b      	str	r3, [r7, #20]
      break;
 80023ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023ec:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	0e5b      	lsrs	r3, r3, #25
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	3301      	adds	r3, #1
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	fbb2 f3f3 	udiv	r3, r2, r3
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	e001      	b.n	800240c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800240c:	693b      	ldr	r3, [r7, #16]
}
 800240e:	4618      	mov	r0, r3
 8002410:	371c      	adds	r7, #28
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
 8002420:	00f42400 	.word	0x00f42400
 8002424:	016e3600 	.word	0x016e3600

08002428 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800242c:	4b03      	ldr	r3, [pc, #12]	@ (800243c <HAL_RCC_GetHCLKFreq+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20000000 	.word	0x20000000

08002440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002444:	f7ff fff0 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8002448:	4602      	mov	r2, r0
 800244a:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <HAL_RCC_GetPCLK1Freq+0x24>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	0a1b      	lsrs	r3, r3, #8
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4904      	ldr	r1, [pc, #16]	@ (8002468 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002456:	5ccb      	ldrb	r3, [r1, r3]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000
 8002468:	080056ac 	.word	0x080056ac

0800246c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002470:	f7ff ffda 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	0adb      	lsrs	r3, r3, #11
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	4904      	ldr	r1, [pc, #16]	@ (8002494 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	f003 031f 	and.w	r3, r3, #31
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800248c:	4618      	mov	r0, r3
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40021000 	.word	0x40021000
 8002494:	080056ac 	.word	0x080056ac

08002498 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800249e:	4b1e      	ldr	r3, [pc, #120]	@ (8002518 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002518 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	3301      	adds	r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d10c      	bne.n	80024d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024bc:	4a17      	ldr	r2, [pc, #92]	@ (800251c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c4:	4a14      	ldr	r2, [pc, #80]	@ (8002518 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024c6:	68d2      	ldr	r2, [r2, #12]
 80024c8:	0a12      	lsrs	r2, r2, #8
 80024ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024ce:	fb02 f303 	mul.w	r3, r2, r3
 80024d2:	617b      	str	r3, [r7, #20]
    break;
 80024d4:	e00c      	b.n	80024f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024d6:	4a12      	ldr	r2, [pc, #72]	@ (8002520 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	fbb2 f3f3 	udiv	r3, r2, r3
 80024de:	4a0e      	ldr	r2, [pc, #56]	@ (8002518 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024e0:	68d2      	ldr	r2, [r2, #12]
 80024e2:	0a12      	lsrs	r2, r2, #8
 80024e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024e8:	fb02 f303 	mul.w	r3, r2, r3
 80024ec:	617b      	str	r3, [r7, #20]
    break;
 80024ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024f0:	4b09      	ldr	r3, [pc, #36]	@ (8002518 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	0e5b      	lsrs	r3, r3, #25
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	3301      	adds	r3, #1
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	fbb2 f3f3 	udiv	r3, r2, r3
 8002508:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800250a:	687b      	ldr	r3, [r7, #4]
}
 800250c:	4618      	mov	r0, r3
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	40021000 	.word	0x40021000
 800251c:	016e3600 	.word	0x016e3600
 8002520:	00f42400 	.word	0x00f42400

08002524 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800252c:	2300      	movs	r3, #0
 800252e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002530:	2300      	movs	r3, #0
 8002532:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 8098 	beq.w	8002672 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002546:	4b43      	ldr	r3, [pc, #268]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10d      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	4b40      	ldr	r3, [pc, #256]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002556:	4a3f      	ldr	r2, [pc, #252]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800255c:	6593      	str	r3, [r2, #88]	@ 0x58
 800255e:	4b3d      	ldr	r3, [pc, #244]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256a:	2301      	movs	r3, #1
 800256c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800256e:	4b3a      	ldr	r3, [pc, #232]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a39      	ldr	r2, [pc, #228]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002578:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800257a:	f7fe fd5f 	bl	800103c <HAL_GetTick>
 800257e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002580:	e009      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002582:	f7fe fd5b 	bl	800103c <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d902      	bls.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	74fb      	strb	r3, [r7, #19]
        break;
 8002594:	e005      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002596:	4b30      	ldr	r3, [pc, #192]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0ef      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80025a2:	7cfb      	ldrb	r3, [r7, #19]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d159      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d01e      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d019      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025c4:	4b23      	ldr	r3, [pc, #140]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025d0:	4b20      	ldr	r3, [pc, #128]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025f0:	4a18      	ldr	r2, [pc, #96]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d016      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002602:	f7fe fd1b 	bl	800103c <HAL_GetTick>
 8002606:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002608:	e00b      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7fe fd17 	bl	800103c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d902      	bls.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	74fb      	strb	r3, [r7, #19]
            break;
 8002620:	e006      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002622:	4b0c      	ldr	r3, [pc, #48]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0ec      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002630:	7cfb      	ldrb	r3, [r7, #19]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10b      	bne.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002636:	4b07      	ldr	r3, [pc, #28]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	4903      	ldr	r1, [pc, #12]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800264c:	e008      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800264e:	7cfb      	ldrb	r3, [r7, #19]
 8002650:	74bb      	strb	r3, [r7, #18]
 8002652:	e005      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002654:	40021000 	.word	0x40021000
 8002658:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800265c:	7cfb      	ldrb	r3, [r7, #19]
 800265e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002660:	7c7b      	ldrb	r3, [r7, #17]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d105      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002666:	4ba6      	ldr	r3, [pc, #664]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266a:	4aa5      	ldr	r2, [pc, #660]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800266c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002670:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00a      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800267e:	4ba0      	ldr	r3, [pc, #640]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002684:	f023 0203 	bic.w	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	499c      	ldr	r1, [pc, #624]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00a      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026a0:	4b97      	ldr	r3, [pc, #604]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a6:	f023 020c 	bic.w	r2, r3, #12
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	4994      	ldr	r1, [pc, #592]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00a      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026c2:	4b8f      	ldr	r3, [pc, #572]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	498b      	ldr	r1, [pc, #556]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00a      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026e4:	4b86      	ldr	r3, [pc, #536]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	4983      	ldr	r1, [pc, #524]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002706:	4b7e      	ldr	r3, [pc, #504]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	497a      	ldr	r1, [pc, #488]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00a      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002728:	4b75      	ldr	r3, [pc, #468]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	4972      	ldr	r1, [pc, #456]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800274a:	4b6d      	ldr	r3, [pc, #436]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002750:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	4969      	ldr	r1, [pc, #420]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800276c:	4b64      	ldr	r3, [pc, #400]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002772:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	4961      	ldr	r1, [pc, #388]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800278e:	4b5c      	ldr	r3, [pc, #368]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002794:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279c:	4958      	ldr	r1, [pc, #352]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d015      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027b0:	4b53      	ldr	r3, [pc, #332]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027be:	4950      	ldr	r1, [pc, #320]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027ce:	d105      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027da:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d015      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027e8:	4b45      	ldr	r3, [pc, #276]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f6:	4942      	ldr	r1, [pc, #264]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002802:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002806:	d105      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002808:	4b3d      	ldr	r3, [pc, #244]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4a3c      	ldr	r2, [pc, #240]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002812:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d015      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002820:	4b37      	ldr	r3, [pc, #220]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002826:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	4934      	ldr	r1, [pc, #208]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800283e:	d105      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002840:	4b2f      	ldr	r3, [pc, #188]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4a2e      	ldr	r2, [pc, #184]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002846:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800284a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d015      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002858:	4b29      	ldr	r3, [pc, #164]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002866:	4926      	ldr	r1, [pc, #152]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002872:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002876:	d105      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002878:	4b21      	ldr	r3, [pc, #132]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4a20      	ldr	r2, [pc, #128]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002882:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d015      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002890:	4b1b      	ldr	r3, [pc, #108]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002896:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289e:	4918      	ldr	r1, [pc, #96]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028ae:	d105      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028b0:	4b13      	ldr	r3, [pc, #76]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4a12      	ldr	r2, [pc, #72]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d015      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d6:	490a      	ldr	r1, [pc, #40]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028e6:	d105      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028e8:	4b05      	ldr	r3, [pc, #20]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4a04      	ldr	r2, [pc, #16]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80028f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000

08002904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e049      	b.n	80029aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7fe f8ce 	bl	8000acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3304      	adds	r3, #4
 8002940:	4619      	mov	r1, r3
 8002942:	4610      	mov	r0, r2
 8002944:	f000 faa4 	bl	8002e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e049      	b.n	8002a58 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d106      	bne.n	80029de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f841 	bl	8002a60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2202      	movs	r2, #2
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3304      	adds	r3, #4
 80029ee:	4619      	mov	r1, r3
 80029f0:	4610      	mov	r0, r2
 80029f2:	f000 fa4d 	bl	8002e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e0ff      	b.n	8002c92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b14      	cmp	r3, #20
 8002a9e:	f200 80f0 	bhi.w	8002c82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa8:	08002afd 	.word	0x08002afd
 8002aac:	08002c83 	.word	0x08002c83
 8002ab0:	08002c83 	.word	0x08002c83
 8002ab4:	08002c83 	.word	0x08002c83
 8002ab8:	08002b3d 	.word	0x08002b3d
 8002abc:	08002c83 	.word	0x08002c83
 8002ac0:	08002c83 	.word	0x08002c83
 8002ac4:	08002c83 	.word	0x08002c83
 8002ac8:	08002b7f 	.word	0x08002b7f
 8002acc:	08002c83 	.word	0x08002c83
 8002ad0:	08002c83 	.word	0x08002c83
 8002ad4:	08002c83 	.word	0x08002c83
 8002ad8:	08002bbf 	.word	0x08002bbf
 8002adc:	08002c83 	.word	0x08002c83
 8002ae0:	08002c83 	.word	0x08002c83
 8002ae4:	08002c83 	.word	0x08002c83
 8002ae8:	08002c01 	.word	0x08002c01
 8002aec:	08002c83 	.word	0x08002c83
 8002af0:	08002c83 	.word	0x08002c83
 8002af4:	08002c83 	.word	0x08002c83
 8002af8:	08002c41 	.word	0x08002c41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fa60 	bl	8002fc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0208 	orr.w	r2, r2, #8
 8002b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0204 	bic.w	r2, r2, #4
 8002b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6999      	ldr	r1, [r3, #24]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	619a      	str	r2, [r3, #24]
      break;
 8002b3a:	e0a5      	b.n	8002c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fad0 	bl	80030e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6999      	ldr	r1, [r3, #24]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	021a      	lsls	r2, r3, #8
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	619a      	str	r2, [r3, #24]
      break;
 8002b7c:	e084      	b.n	8002c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 fb39 	bl	80031fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69da      	ldr	r2, [r3, #28]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 0208 	orr.w	r2, r2, #8
 8002b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0204 	bic.w	r2, r2, #4
 8002ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69d9      	ldr	r1, [r3, #28]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	61da      	str	r2, [r3, #28]
      break;
 8002bbc:	e064      	b.n	8002c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 fba1 	bl	800330c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	69da      	ldr	r2, [r3, #28]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69d9      	ldr	r1, [r3, #28]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	021a      	lsls	r2, r3, #8
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	61da      	str	r2, [r3, #28]
      break;
 8002bfe:	e043      	b.n	8002c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fc0a 	bl	8003420 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0208 	orr.w	r2, r2, #8
 8002c1a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0204 	bic.w	r2, r2, #4
 8002c2a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002c3e:	e023      	b.n	8002c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fc4e 	bl	80034e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c5a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c6a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	021a      	lsls	r2, r3, #8
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002c80:	e002      	b.n	8002c88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	75fb      	strb	r3, [r7, #23]
      break;
 8002c86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop

08002c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_TIM_ConfigClockSource+0x1c>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e0de      	b.n	8002e76 <HAL_TIM_ConfigClockSource+0x1da>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002cd6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ce2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a63      	ldr	r2, [pc, #396]	@ (8002e80 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	f000 80a9 	beq.w	8002e4a <HAL_TIM_ConfigClockSource+0x1ae>
 8002cf8:	4a61      	ldr	r2, [pc, #388]	@ (8002e80 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	f200 80ae 	bhi.w	8002e5c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d00:	4a60      	ldr	r2, [pc, #384]	@ (8002e84 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	f000 80a1 	beq.w	8002e4a <HAL_TIM_ConfigClockSource+0x1ae>
 8002d08:	4a5e      	ldr	r2, [pc, #376]	@ (8002e84 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	f200 80a6 	bhi.w	8002e5c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d10:	4a5d      	ldr	r2, [pc, #372]	@ (8002e88 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	f000 8099 	beq.w	8002e4a <HAL_TIM_ConfigClockSource+0x1ae>
 8002d18:	4a5b      	ldr	r2, [pc, #364]	@ (8002e88 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	f200 809e 	bhi.w	8002e5c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d20:	4a5a      	ldr	r2, [pc, #360]	@ (8002e8c <HAL_TIM_ConfigClockSource+0x1f0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	f000 8091 	beq.w	8002e4a <HAL_TIM_ConfigClockSource+0x1ae>
 8002d28:	4a58      	ldr	r2, [pc, #352]	@ (8002e8c <HAL_TIM_ConfigClockSource+0x1f0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	f200 8096 	bhi.w	8002e5c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d30:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002d34:	f000 8089 	beq.w	8002e4a <HAL_TIM_ConfigClockSource+0x1ae>
 8002d38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002d3c:	f200 808e 	bhi.w	8002e5c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d44:	d03e      	beq.n	8002dc4 <HAL_TIM_ConfigClockSource+0x128>
 8002d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d4a:	f200 8087 	bhi.w	8002e5c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d52:	f000 8086 	beq.w	8002e62 <HAL_TIM_ConfigClockSource+0x1c6>
 8002d56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d5a:	d87f      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d5c:	2b70      	cmp	r3, #112	@ 0x70
 8002d5e:	d01a      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0xfa>
 8002d60:	2b70      	cmp	r3, #112	@ 0x70
 8002d62:	d87b      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d64:	2b60      	cmp	r3, #96	@ 0x60
 8002d66:	d050      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0x16e>
 8002d68:	2b60      	cmp	r3, #96	@ 0x60
 8002d6a:	d877      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d6c:	2b50      	cmp	r3, #80	@ 0x50
 8002d6e:	d03c      	beq.n	8002dea <HAL_TIM_ConfigClockSource+0x14e>
 8002d70:	2b50      	cmp	r3, #80	@ 0x50
 8002d72:	d873      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d74:	2b40      	cmp	r3, #64	@ 0x40
 8002d76:	d058      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x18e>
 8002d78:	2b40      	cmp	r3, #64	@ 0x40
 8002d7a:	d86f      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d7c:	2b30      	cmp	r3, #48	@ 0x30
 8002d7e:	d064      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0x1ae>
 8002d80:	2b30      	cmp	r3, #48	@ 0x30
 8002d82:	d86b      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d060      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0x1ae>
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d867      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d05c      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0x1ae>
 8002d90:	2b10      	cmp	r3, #16
 8002d92:	d05a      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0x1ae>
 8002d94:	e062      	b.n	8002e5c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002da6:	f000 fc81 	bl	80036ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002db8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	609a      	str	r2, [r3, #8]
      break;
 8002dc2:	e04f      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dd4:	f000 fc6a 	bl	80036ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002de6:	609a      	str	r2, [r3, #8]
      break;
 8002de8:	e03c      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df6:	461a      	mov	r2, r3
 8002df8:	f000 fbdc 	bl	80035b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2150      	movs	r1, #80	@ 0x50
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fc35 	bl	8003672 <TIM_ITRx_SetConfig>
      break;
 8002e08:	e02c      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e16:	461a      	mov	r2, r3
 8002e18:	f000 fbfb 	bl	8003612 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2160      	movs	r1, #96	@ 0x60
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fc25 	bl	8003672 <TIM_ITRx_SetConfig>
      break;
 8002e28:	e01c      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e36:	461a      	mov	r2, r3
 8002e38:	f000 fbbc 	bl	80035b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2140      	movs	r1, #64	@ 0x40
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fc15 	bl	8003672 <TIM_ITRx_SetConfig>
      break;
 8002e48:	e00c      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4619      	mov	r1, r3
 8002e54:	4610      	mov	r0, r2
 8002e56:	f000 fc0c 	bl	8003672 <TIM_ITRx_SetConfig>
      break;
 8002e5a:	e003      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e60:	e000      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002e62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	00100070 	.word	0x00100070
 8002e84:	00100040 	.word	0x00100040
 8002e88:	00100030 	.word	0x00100030
 8002e8c:	00100020 	.word	0x00100020

08002e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a42      	ldr	r2, [pc, #264]	@ (8002fac <TIM_Base_SetConfig+0x11c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00f      	beq.n	8002ec8 <TIM_Base_SetConfig+0x38>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eae:	d00b      	beq.n	8002ec8 <TIM_Base_SetConfig+0x38>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a3f      	ldr	r2, [pc, #252]	@ (8002fb0 <TIM_Base_SetConfig+0x120>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d007      	beq.n	8002ec8 <TIM_Base_SetConfig+0x38>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a3e      	ldr	r2, [pc, #248]	@ (8002fb4 <TIM_Base_SetConfig+0x124>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d003      	beq.n	8002ec8 <TIM_Base_SetConfig+0x38>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a3d      	ldr	r2, [pc, #244]	@ (8002fb8 <TIM_Base_SetConfig+0x128>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d108      	bne.n	8002eda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a33      	ldr	r2, [pc, #204]	@ (8002fac <TIM_Base_SetConfig+0x11c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d01b      	beq.n	8002f1a <TIM_Base_SetConfig+0x8a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ee8:	d017      	beq.n	8002f1a <TIM_Base_SetConfig+0x8a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a30      	ldr	r2, [pc, #192]	@ (8002fb0 <TIM_Base_SetConfig+0x120>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <TIM_Base_SetConfig+0x8a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a2f      	ldr	r2, [pc, #188]	@ (8002fb4 <TIM_Base_SetConfig+0x124>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00f      	beq.n	8002f1a <TIM_Base_SetConfig+0x8a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a2e      	ldr	r2, [pc, #184]	@ (8002fb8 <TIM_Base_SetConfig+0x128>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00b      	beq.n	8002f1a <TIM_Base_SetConfig+0x8a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a2d      	ldr	r2, [pc, #180]	@ (8002fbc <TIM_Base_SetConfig+0x12c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d007      	beq.n	8002f1a <TIM_Base_SetConfig+0x8a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a2c      	ldr	r2, [pc, #176]	@ (8002fc0 <TIM_Base_SetConfig+0x130>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d003      	beq.n	8002f1a <TIM_Base_SetConfig+0x8a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a2b      	ldr	r2, [pc, #172]	@ (8002fc4 <TIM_Base_SetConfig+0x134>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d108      	bne.n	8002f2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a16      	ldr	r2, [pc, #88]	@ (8002fac <TIM_Base_SetConfig+0x11c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d00f      	beq.n	8002f78 <TIM_Base_SetConfig+0xe8>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a17      	ldr	r2, [pc, #92]	@ (8002fb8 <TIM_Base_SetConfig+0x128>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00b      	beq.n	8002f78 <TIM_Base_SetConfig+0xe8>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a16      	ldr	r2, [pc, #88]	@ (8002fbc <TIM_Base_SetConfig+0x12c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d007      	beq.n	8002f78 <TIM_Base_SetConfig+0xe8>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a15      	ldr	r2, [pc, #84]	@ (8002fc0 <TIM_Base_SetConfig+0x130>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d003      	beq.n	8002f78 <TIM_Base_SetConfig+0xe8>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a14      	ldr	r2, [pc, #80]	@ (8002fc4 <TIM_Base_SetConfig+0x134>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d103      	bne.n	8002f80 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d105      	bne.n	8002f9e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f023 0201 	bic.w	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	611a      	str	r2, [r3, #16]
  }
}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40012c00 	.word	0x40012c00
 8002fb0:	40000400 	.word	0x40000400
 8002fb4:	40000800 	.word	0x40000800
 8002fb8:	40013400 	.word	0x40013400
 8002fbc:	40014000 	.word	0x40014000
 8002fc0:	40014400 	.word	0x40014400
 8002fc4:	40014800 	.word	0x40014800

08002fc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	f023 0201 	bic.w	r2, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f023 0302 	bic.w	r3, r3, #2
 8003014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a2c      	ldr	r2, [pc, #176]	@ (80030d4 <TIM_OC1_SetConfig+0x10c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d00f      	beq.n	8003048 <TIM_OC1_SetConfig+0x80>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a2b      	ldr	r2, [pc, #172]	@ (80030d8 <TIM_OC1_SetConfig+0x110>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00b      	beq.n	8003048 <TIM_OC1_SetConfig+0x80>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a2a      	ldr	r2, [pc, #168]	@ (80030dc <TIM_OC1_SetConfig+0x114>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d007      	beq.n	8003048 <TIM_OC1_SetConfig+0x80>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a29      	ldr	r2, [pc, #164]	@ (80030e0 <TIM_OC1_SetConfig+0x118>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d003      	beq.n	8003048 <TIM_OC1_SetConfig+0x80>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a28      	ldr	r2, [pc, #160]	@ (80030e4 <TIM_OC1_SetConfig+0x11c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d10c      	bne.n	8003062 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f023 0308 	bic.w	r3, r3, #8
 800304e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f023 0304 	bic.w	r3, r3, #4
 8003060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a1b      	ldr	r2, [pc, #108]	@ (80030d4 <TIM_OC1_SetConfig+0x10c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00f      	beq.n	800308a <TIM_OC1_SetConfig+0xc2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a1a      	ldr	r2, [pc, #104]	@ (80030d8 <TIM_OC1_SetConfig+0x110>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00b      	beq.n	800308a <TIM_OC1_SetConfig+0xc2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a19      	ldr	r2, [pc, #100]	@ (80030dc <TIM_OC1_SetConfig+0x114>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d007      	beq.n	800308a <TIM_OC1_SetConfig+0xc2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a18      	ldr	r2, [pc, #96]	@ (80030e0 <TIM_OC1_SetConfig+0x118>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d003      	beq.n	800308a <TIM_OC1_SetConfig+0xc2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a17      	ldr	r2, [pc, #92]	@ (80030e4 <TIM_OC1_SetConfig+0x11c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d111      	bne.n	80030ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	621a      	str	r2, [r3, #32]
}
 80030c8:	bf00      	nop
 80030ca:	371c      	adds	r7, #28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	40012c00 	.word	0x40012c00
 80030d8:	40013400 	.word	0x40013400
 80030dc:	40014000 	.word	0x40014000
 80030e0:	40014400 	.word	0x40014400
 80030e4:	40014800 	.word	0x40014800

080030e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f023 0210 	bic.w	r2, r3, #16
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800311a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f023 0320 	bic.w	r3, r3, #32
 8003136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a28      	ldr	r2, [pc, #160]	@ (80031e8 <TIM_OC2_SetConfig+0x100>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d003      	beq.n	8003154 <TIM_OC2_SetConfig+0x6c>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a27      	ldr	r2, [pc, #156]	@ (80031ec <TIM_OC2_SetConfig+0x104>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d10d      	bne.n	8003170 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800315a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800316e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a1d      	ldr	r2, [pc, #116]	@ (80031e8 <TIM_OC2_SetConfig+0x100>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00f      	beq.n	8003198 <TIM_OC2_SetConfig+0xb0>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a1c      	ldr	r2, [pc, #112]	@ (80031ec <TIM_OC2_SetConfig+0x104>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d00b      	beq.n	8003198 <TIM_OC2_SetConfig+0xb0>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a1b      	ldr	r2, [pc, #108]	@ (80031f0 <TIM_OC2_SetConfig+0x108>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d007      	beq.n	8003198 <TIM_OC2_SetConfig+0xb0>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a1a      	ldr	r2, [pc, #104]	@ (80031f4 <TIM_OC2_SetConfig+0x10c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d003      	beq.n	8003198 <TIM_OC2_SetConfig+0xb0>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a19      	ldr	r2, [pc, #100]	@ (80031f8 <TIM_OC2_SetConfig+0x110>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d113      	bne.n	80031c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800319e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	621a      	str	r2, [r3, #32]
}
 80031da:	bf00      	nop
 80031dc:	371c      	adds	r7, #28
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40012c00 	.word	0x40012c00
 80031ec:	40013400 	.word	0x40013400
 80031f0:	40014000 	.word	0x40014000
 80031f4:	40014400 	.word	0x40014400
 80031f8:	40014800 	.word	0x40014800

080031fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800322a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800322e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0303 	bic.w	r3, r3, #3
 8003236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a27      	ldr	r2, [pc, #156]	@ (80032f8 <TIM_OC3_SetConfig+0xfc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d003      	beq.n	8003266 <TIM_OC3_SetConfig+0x6a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a26      	ldr	r2, [pc, #152]	@ (80032fc <TIM_OC3_SetConfig+0x100>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d10d      	bne.n	8003282 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800326c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a1c      	ldr	r2, [pc, #112]	@ (80032f8 <TIM_OC3_SetConfig+0xfc>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00f      	beq.n	80032aa <TIM_OC3_SetConfig+0xae>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a1b      	ldr	r2, [pc, #108]	@ (80032fc <TIM_OC3_SetConfig+0x100>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00b      	beq.n	80032aa <TIM_OC3_SetConfig+0xae>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a1a      	ldr	r2, [pc, #104]	@ (8003300 <TIM_OC3_SetConfig+0x104>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d007      	beq.n	80032aa <TIM_OC3_SetConfig+0xae>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a19      	ldr	r2, [pc, #100]	@ (8003304 <TIM_OC3_SetConfig+0x108>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d003      	beq.n	80032aa <TIM_OC3_SetConfig+0xae>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a18      	ldr	r2, [pc, #96]	@ (8003308 <TIM_OC3_SetConfig+0x10c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d113      	bne.n	80032d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	621a      	str	r2, [r3, #32]
}
 80032ec:	bf00      	nop
 80032ee:	371c      	adds	r7, #28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40012c00 	.word	0x40012c00
 80032fc:	40013400 	.word	0x40013400
 8003300:	40014000 	.word	0x40014000
 8003304:	40014400 	.word	0x40014400
 8003308:	40014800 	.word	0x40014800

0800330c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800333a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800333e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	021b      	lsls	r3, r3, #8
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800335a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	031b      	lsls	r3, r3, #12
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a28      	ldr	r2, [pc, #160]	@ (800340c <TIM_OC4_SetConfig+0x100>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d003      	beq.n	8003378 <TIM_OC4_SetConfig+0x6c>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a27      	ldr	r2, [pc, #156]	@ (8003410 <TIM_OC4_SetConfig+0x104>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d10d      	bne.n	8003394 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800337e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	031b      	lsls	r3, r3, #12
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003392:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a1d      	ldr	r2, [pc, #116]	@ (800340c <TIM_OC4_SetConfig+0x100>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00f      	beq.n	80033bc <TIM_OC4_SetConfig+0xb0>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a1c      	ldr	r2, [pc, #112]	@ (8003410 <TIM_OC4_SetConfig+0x104>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00b      	beq.n	80033bc <TIM_OC4_SetConfig+0xb0>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003414 <TIM_OC4_SetConfig+0x108>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d007      	beq.n	80033bc <TIM_OC4_SetConfig+0xb0>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003418 <TIM_OC4_SetConfig+0x10c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d003      	beq.n	80033bc <TIM_OC4_SetConfig+0xb0>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a19      	ldr	r2, [pc, #100]	@ (800341c <TIM_OC4_SetConfig+0x110>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d113      	bne.n	80033e4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033c2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80033ca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	019b      	lsls	r3, r3, #6
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	019b      	lsls	r3, r3, #6
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	621a      	str	r2, [r3, #32]
}
 80033fe:	bf00      	nop
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40012c00 	.word	0x40012c00
 8003410:	40013400 	.word	0x40013400
 8003414:	40014000 	.word	0x40014000
 8003418:	40014400 	.word	0x40014400
 800341c:	40014800 	.word	0x40014800

08003420 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800344e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003464:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	041b      	lsls	r3, r3, #16
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a17      	ldr	r2, [pc, #92]	@ (80034d4 <TIM_OC5_SetConfig+0xb4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00f      	beq.n	800349a <TIM_OC5_SetConfig+0x7a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a16      	ldr	r2, [pc, #88]	@ (80034d8 <TIM_OC5_SetConfig+0xb8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d00b      	beq.n	800349a <TIM_OC5_SetConfig+0x7a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a15      	ldr	r2, [pc, #84]	@ (80034dc <TIM_OC5_SetConfig+0xbc>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d007      	beq.n	800349a <TIM_OC5_SetConfig+0x7a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a14      	ldr	r2, [pc, #80]	@ (80034e0 <TIM_OC5_SetConfig+0xc0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d003      	beq.n	800349a <TIM_OC5_SetConfig+0x7a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a13      	ldr	r2, [pc, #76]	@ (80034e4 <TIM_OC5_SetConfig+0xc4>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d109      	bne.n	80034ae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	021b      	lsls	r3, r3, #8
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	621a      	str	r2, [r3, #32]
}
 80034c8:	bf00      	nop
 80034ca:	371c      	adds	r7, #28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	40012c00 	.word	0x40012c00
 80034d8:	40013400 	.word	0x40013400
 80034dc:	40014000 	.word	0x40014000
 80034e0:	40014400 	.word	0x40014400
 80034e4:	40014800 	.word	0x40014800

080034e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800350e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003516:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800351a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800352e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	051b      	lsls	r3, r3, #20
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a18      	ldr	r2, [pc, #96]	@ (80035a0 <TIM_OC6_SetConfig+0xb8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00f      	beq.n	8003564 <TIM_OC6_SetConfig+0x7c>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a17      	ldr	r2, [pc, #92]	@ (80035a4 <TIM_OC6_SetConfig+0xbc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00b      	beq.n	8003564 <TIM_OC6_SetConfig+0x7c>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a16      	ldr	r2, [pc, #88]	@ (80035a8 <TIM_OC6_SetConfig+0xc0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d007      	beq.n	8003564 <TIM_OC6_SetConfig+0x7c>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a15      	ldr	r2, [pc, #84]	@ (80035ac <TIM_OC6_SetConfig+0xc4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d003      	beq.n	8003564 <TIM_OC6_SetConfig+0x7c>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a14      	ldr	r2, [pc, #80]	@ (80035b0 <TIM_OC6_SetConfig+0xc8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d109      	bne.n	8003578 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800356a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	029b      	lsls	r3, r3, #10
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	621a      	str	r2, [r3, #32]
}
 8003592:	bf00      	nop
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40012c00 	.word	0x40012c00
 80035a4:	40013400 	.word	0x40013400
 80035a8:	40014000 	.word	0x40014000
 80035ac:	40014400 	.word	0x40014400
 80035b0:	40014800 	.word	0x40014800

080035b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	f023 0201 	bic.w	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f023 030a 	bic.w	r3, r3, #10
 80035f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	621a      	str	r2, [r3, #32]
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003612:	b480      	push	{r7}
 8003614:	b087      	sub	sp, #28
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f023 0210 	bic.w	r2, r3, #16
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800363c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	031b      	lsls	r3, r3, #12
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800364e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	621a      	str	r2, [r3, #32]
}
 8003666:	bf00      	nop
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003672:	b480      	push	{r7}
 8003674:	b085      	sub	sp, #20
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003688:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800368c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	f043 0307 	orr.w	r3, r3, #7
 8003698:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	609a      	str	r2, [r3, #8]
}
 80036a0:	bf00      	nop
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	021a      	lsls	r2, r3, #8
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	609a      	str	r2, [r3, #8]
}
 80036e0:	bf00      	nop
 80036e2:	371c      	adds	r7, #28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003700:	2302      	movs	r3, #2
 8003702:	e065      	b.n	80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a2c      	ldr	r2, [pc, #176]	@ (80037dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a2b      	ldr	r2, [pc, #172]	@ (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d108      	bne.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800373e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003754:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1b      	ldr	r2, [pc, #108]	@ (80037dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d018      	beq.n	80037a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800377a:	d013      	beq.n	80037a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a18      	ldr	r2, [pc, #96]	@ (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00e      	beq.n	80037a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a17      	ldr	r2, [pc, #92]	@ (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d009      	beq.n	80037a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a12      	ldr	r2, [pc, #72]	@ (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a13      	ldr	r2, [pc, #76]	@ (80037ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d10c      	bne.n	80037be <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	40012c00 	.word	0x40012c00
 80037e0:	40013400 	.word	0x40013400
 80037e4:	40000400 	.word	0x40000400
 80037e8:	40000800 	.word	0x40000800
 80037ec:	40014000 	.word	0x40014000

080037f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e042      	b.n	8003888 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003808:	2b00      	cmp	r3, #0
 800380a:	d106      	bne.n	800381a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7fd f9b1 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2224      	movs	r2, #36	@ 0x24
 800381e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0201 	bic.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fc4a 	bl	80040d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f97b 	bl	8003b3c <UART_SetConfig>
 8003846:	4603      	mov	r3, r0
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e01b      	b.n	8003888 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800385e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800386e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fcc9 	bl	8004218 <UART_CheckIdleState>
 8003886:	4603      	mov	r3, r0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b08a      	sub	sp, #40	@ 0x28
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	4613      	mov	r3, r2
 800389e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a6:	2b20      	cmp	r3, #32
 80038a8:	d17b      	bne.n	80039a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <HAL_UART_Transmit+0x26>
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e074      	b.n	80039a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2221      	movs	r2, #33	@ 0x21
 80038c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ca:	f7fd fbb7 	bl	800103c <HAL_GetTick>
 80038ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	88fa      	ldrh	r2, [r7, #6]
 80038d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	88fa      	ldrh	r2, [r7, #6]
 80038dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038e8:	d108      	bne.n	80038fc <HAL_UART_Transmit+0x6c>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d104      	bne.n	80038fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038f2:	2300      	movs	r3, #0
 80038f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	e003      	b.n	8003904 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003900:	2300      	movs	r3, #0
 8003902:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003904:	e030      	b.n	8003968 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2200      	movs	r2, #0
 800390e:	2180      	movs	r1, #128	@ 0x80
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 fd2b 	bl	800436c <UART_WaitOnFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2220      	movs	r2, #32
 8003920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e03d      	b.n	80039a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10b      	bne.n	8003946 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800393c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	3302      	adds	r3, #2
 8003942:	61bb      	str	r3, [r7, #24]
 8003944:	e007      	b.n	8003956 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	781a      	ldrb	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	3301      	adds	r3, #1
 8003954:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800395c:	b29b      	uxth	r3, r3
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1c8      	bne.n	8003906 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2200      	movs	r2, #0
 800397c:	2140      	movs	r1, #64	@ 0x40
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 fcf4 	bl	800436c <UART_WaitOnFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2220      	movs	r2, #32
 800398e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e006      	b.n	80039a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2220      	movs	r2, #32
 800399a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	e000      	b.n	80039a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80039a2:	2302      	movs	r3, #2
  }
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3720      	adds	r7, #32
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08a      	sub	sp, #40	@ 0x28
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	f040 80b5 	bne.w	8003b32 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_UART_Receive+0x28>
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0ad      	b.n	8003b34 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2222      	movs	r2, #34	@ 0x22
 80039e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ee:	f7fd fb25 	bl	800103c <HAL_GetTick>
 80039f2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	88fa      	ldrh	r2, [r7, #6]
 80039f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	88fa      	ldrh	r2, [r7, #6]
 8003a00:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a0c:	d10e      	bne.n	8003a2c <HAL_UART_Receive+0x80>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d105      	bne.n	8003a22 <HAL_UART_Receive+0x76>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003a1c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003a20:	e02d      	b.n	8003a7e <HAL_UART_Receive+0xd2>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	22ff      	movs	r2, #255	@ 0xff
 8003a26:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003a2a:	e028      	b.n	8003a7e <HAL_UART_Receive+0xd2>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10d      	bne.n	8003a50 <HAL_UART_Receive+0xa4>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d104      	bne.n	8003a46 <HAL_UART_Receive+0x9a>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	22ff      	movs	r2, #255	@ 0xff
 8003a40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003a44:	e01b      	b.n	8003a7e <HAL_UART_Receive+0xd2>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	227f      	movs	r2, #127	@ 0x7f
 8003a4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003a4e:	e016      	b.n	8003a7e <HAL_UART_Receive+0xd2>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a58:	d10d      	bne.n	8003a76 <HAL_UART_Receive+0xca>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d104      	bne.n	8003a6c <HAL_UART_Receive+0xc0>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	227f      	movs	r2, #127	@ 0x7f
 8003a66:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003a6a:	e008      	b.n	8003a7e <HAL_UART_Receive+0xd2>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	223f      	movs	r2, #63	@ 0x3f
 8003a70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003a74:	e003      	b.n	8003a7e <HAL_UART_Receive+0xd2>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003a84:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a8e:	d108      	bne.n	8003aa2 <HAL_UART_Receive+0xf6>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d104      	bne.n	8003aa2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	e003      	b.n	8003aaa <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003aaa:	e036      	b.n	8003b1a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2120      	movs	r1, #32
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fc58 	bl	800436c <UART_WaitOnFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e032      	b.n	8003b34 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10c      	bne.n	8003aee <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	8a7b      	ldrh	r3, [r7, #18]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	3302      	adds	r3, #2
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	e00c      	b.n	8003b08 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	8a7b      	ldrh	r3, [r7, #18]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	4013      	ands	r3, r2
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	3301      	adds	r3, #1
 8003b06:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1c2      	bne.n	8003aac <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e000      	b.n	8003b34 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003b32:	2302      	movs	r3, #2
  }
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b40:	b08c      	sub	sp, #48	@ 0x30
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	431a      	orrs	r2, r3
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4bab      	ldr	r3, [pc, #684]	@ (8003e18 <UART_SetConfig+0x2dc>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b74:	430b      	orrs	r3, r1
 8003b76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4aa0      	ldr	r2, [pc, #640]	@ (8003e1c <UART_SetConfig+0x2e0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d004      	beq.n	8003ba8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003bb2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc6:	f023 010f 	bic.w	r1, r3, #15
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a91      	ldr	r2, [pc, #580]	@ (8003e20 <UART_SetConfig+0x2e4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d125      	bne.n	8003c2c <UART_SetConfig+0xf0>
 8003be0:	4b90      	ldr	r3, [pc, #576]	@ (8003e24 <UART_SetConfig+0x2e8>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d81a      	bhi.n	8003c24 <UART_SetConfig+0xe8>
 8003bee:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf4 <UART_SetConfig+0xb8>)
 8003bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf4:	08003c05 	.word	0x08003c05
 8003bf8:	08003c15 	.word	0x08003c15
 8003bfc:	08003c0d 	.word	0x08003c0d
 8003c00:	08003c1d 	.word	0x08003c1d
 8003c04:	2301      	movs	r3, #1
 8003c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c0a:	e0d6      	b.n	8003dba <UART_SetConfig+0x27e>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c12:	e0d2      	b.n	8003dba <UART_SetConfig+0x27e>
 8003c14:	2304      	movs	r3, #4
 8003c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c1a:	e0ce      	b.n	8003dba <UART_SetConfig+0x27e>
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c22:	e0ca      	b.n	8003dba <UART_SetConfig+0x27e>
 8003c24:	2310      	movs	r3, #16
 8003c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c2a:	e0c6      	b.n	8003dba <UART_SetConfig+0x27e>
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a7d      	ldr	r2, [pc, #500]	@ (8003e28 <UART_SetConfig+0x2ec>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d138      	bne.n	8003ca8 <UART_SetConfig+0x16c>
 8003c36:	4b7b      	ldr	r3, [pc, #492]	@ (8003e24 <UART_SetConfig+0x2e8>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3c:	f003 030c 	and.w	r3, r3, #12
 8003c40:	2b0c      	cmp	r3, #12
 8003c42:	d82d      	bhi.n	8003ca0 <UART_SetConfig+0x164>
 8003c44:	a201      	add	r2, pc, #4	@ (adr r2, 8003c4c <UART_SetConfig+0x110>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c81 	.word	0x08003c81
 8003c50:	08003ca1 	.word	0x08003ca1
 8003c54:	08003ca1 	.word	0x08003ca1
 8003c58:	08003ca1 	.word	0x08003ca1
 8003c5c:	08003c91 	.word	0x08003c91
 8003c60:	08003ca1 	.word	0x08003ca1
 8003c64:	08003ca1 	.word	0x08003ca1
 8003c68:	08003ca1 	.word	0x08003ca1
 8003c6c:	08003c89 	.word	0x08003c89
 8003c70:	08003ca1 	.word	0x08003ca1
 8003c74:	08003ca1 	.word	0x08003ca1
 8003c78:	08003ca1 	.word	0x08003ca1
 8003c7c:	08003c99 	.word	0x08003c99
 8003c80:	2300      	movs	r3, #0
 8003c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c86:	e098      	b.n	8003dba <UART_SetConfig+0x27e>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c8e:	e094      	b.n	8003dba <UART_SetConfig+0x27e>
 8003c90:	2304      	movs	r3, #4
 8003c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c96:	e090      	b.n	8003dba <UART_SetConfig+0x27e>
 8003c98:	2308      	movs	r3, #8
 8003c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c9e:	e08c      	b.n	8003dba <UART_SetConfig+0x27e>
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ca6:	e088      	b.n	8003dba <UART_SetConfig+0x27e>
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a5f      	ldr	r2, [pc, #380]	@ (8003e2c <UART_SetConfig+0x2f0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d125      	bne.n	8003cfe <UART_SetConfig+0x1c2>
 8003cb2:	4b5c      	ldr	r3, [pc, #368]	@ (8003e24 <UART_SetConfig+0x2e8>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003cbc:	2b30      	cmp	r3, #48	@ 0x30
 8003cbe:	d016      	beq.n	8003cee <UART_SetConfig+0x1b2>
 8003cc0:	2b30      	cmp	r3, #48	@ 0x30
 8003cc2:	d818      	bhi.n	8003cf6 <UART_SetConfig+0x1ba>
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d00a      	beq.n	8003cde <UART_SetConfig+0x1a2>
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d814      	bhi.n	8003cf6 <UART_SetConfig+0x1ba>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <UART_SetConfig+0x19a>
 8003cd0:	2b10      	cmp	r3, #16
 8003cd2:	d008      	beq.n	8003ce6 <UART_SetConfig+0x1aa>
 8003cd4:	e00f      	b.n	8003cf6 <UART_SetConfig+0x1ba>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cdc:	e06d      	b.n	8003dba <UART_SetConfig+0x27e>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ce4:	e069      	b.n	8003dba <UART_SetConfig+0x27e>
 8003ce6:	2304      	movs	r3, #4
 8003ce8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cec:	e065      	b.n	8003dba <UART_SetConfig+0x27e>
 8003cee:	2308      	movs	r3, #8
 8003cf0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cf4:	e061      	b.n	8003dba <UART_SetConfig+0x27e>
 8003cf6:	2310      	movs	r3, #16
 8003cf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cfc:	e05d      	b.n	8003dba <UART_SetConfig+0x27e>
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a4b      	ldr	r2, [pc, #300]	@ (8003e30 <UART_SetConfig+0x2f4>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d125      	bne.n	8003d54 <UART_SetConfig+0x218>
 8003d08:	4b46      	ldr	r3, [pc, #280]	@ (8003e24 <UART_SetConfig+0x2e8>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003d12:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d14:	d016      	beq.n	8003d44 <UART_SetConfig+0x208>
 8003d16:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d18:	d818      	bhi.n	8003d4c <UART_SetConfig+0x210>
 8003d1a:	2b80      	cmp	r3, #128	@ 0x80
 8003d1c:	d00a      	beq.n	8003d34 <UART_SetConfig+0x1f8>
 8003d1e:	2b80      	cmp	r3, #128	@ 0x80
 8003d20:	d814      	bhi.n	8003d4c <UART_SetConfig+0x210>
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <UART_SetConfig+0x1f0>
 8003d26:	2b40      	cmp	r3, #64	@ 0x40
 8003d28:	d008      	beq.n	8003d3c <UART_SetConfig+0x200>
 8003d2a:	e00f      	b.n	8003d4c <UART_SetConfig+0x210>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d32:	e042      	b.n	8003dba <UART_SetConfig+0x27e>
 8003d34:	2302      	movs	r3, #2
 8003d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d3a:	e03e      	b.n	8003dba <UART_SetConfig+0x27e>
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d42:	e03a      	b.n	8003dba <UART_SetConfig+0x27e>
 8003d44:	2308      	movs	r3, #8
 8003d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d4a:	e036      	b.n	8003dba <UART_SetConfig+0x27e>
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d52:	e032      	b.n	8003dba <UART_SetConfig+0x27e>
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a30      	ldr	r2, [pc, #192]	@ (8003e1c <UART_SetConfig+0x2e0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d12a      	bne.n	8003db4 <UART_SetConfig+0x278>
 8003d5e:	4b31      	ldr	r3, [pc, #196]	@ (8003e24 <UART_SetConfig+0x2e8>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d6c:	d01a      	beq.n	8003da4 <UART_SetConfig+0x268>
 8003d6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d72:	d81b      	bhi.n	8003dac <UART_SetConfig+0x270>
 8003d74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d78:	d00c      	beq.n	8003d94 <UART_SetConfig+0x258>
 8003d7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d7e:	d815      	bhi.n	8003dac <UART_SetConfig+0x270>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <UART_SetConfig+0x250>
 8003d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d88:	d008      	beq.n	8003d9c <UART_SetConfig+0x260>
 8003d8a:	e00f      	b.n	8003dac <UART_SetConfig+0x270>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d92:	e012      	b.n	8003dba <UART_SetConfig+0x27e>
 8003d94:	2302      	movs	r3, #2
 8003d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d9a:	e00e      	b.n	8003dba <UART_SetConfig+0x27e>
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003da2:	e00a      	b.n	8003dba <UART_SetConfig+0x27e>
 8003da4:	2308      	movs	r3, #8
 8003da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003daa:	e006      	b.n	8003dba <UART_SetConfig+0x27e>
 8003dac:	2310      	movs	r3, #16
 8003dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003db2:	e002      	b.n	8003dba <UART_SetConfig+0x27e>
 8003db4:	2310      	movs	r3, #16
 8003db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a17      	ldr	r2, [pc, #92]	@ (8003e1c <UART_SetConfig+0x2e0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	f040 80a8 	bne.w	8003f16 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dc6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d834      	bhi.n	8003e38 <UART_SetConfig+0x2fc>
 8003dce:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd4 <UART_SetConfig+0x298>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003df9 	.word	0x08003df9
 8003dd8:	08003e39 	.word	0x08003e39
 8003ddc:	08003e01 	.word	0x08003e01
 8003de0:	08003e39 	.word	0x08003e39
 8003de4:	08003e07 	.word	0x08003e07
 8003de8:	08003e39 	.word	0x08003e39
 8003dec:	08003e39 	.word	0x08003e39
 8003df0:	08003e39 	.word	0x08003e39
 8003df4:	08003e0f 	.word	0x08003e0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df8:	f7fe fb22 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 8003dfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dfe:	e021      	b.n	8003e44 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e00:	4b0c      	ldr	r3, [pc, #48]	@ (8003e34 <UART_SetConfig+0x2f8>)
 8003e02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e04:	e01e      	b.n	8003e44 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e06:	f7fe faad 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8003e0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e0c:	e01a      	b.n	8003e44 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e14:	e016      	b.n	8003e44 <UART_SetConfig+0x308>
 8003e16:	bf00      	nop
 8003e18:	cfff69f3 	.word	0xcfff69f3
 8003e1c:	40008000 	.word	0x40008000
 8003e20:	40013800 	.word	0x40013800
 8003e24:	40021000 	.word	0x40021000
 8003e28:	40004400 	.word	0x40004400
 8003e2c:	40004800 	.word	0x40004800
 8003e30:	40004c00 	.word	0x40004c00
 8003e34:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e42:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 812a 	beq.w	80040a0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e50:	4a9e      	ldr	r2, [pc, #632]	@ (80040cc <UART_SetConfig+0x590>)
 8003e52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e56:	461a      	mov	r2, r3
 8003e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4413      	add	r3, r2
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d305      	bcc.n	8003e7c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d903      	bls.n	8003e84 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e82:	e10d      	b.n	80040a0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e86:	2200      	movs	r2, #0
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	60fa      	str	r2, [r7, #12]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	4a8e      	ldr	r2, [pc, #568]	@ (80040cc <UART_SetConfig+0x590>)
 8003e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2200      	movs	r2, #0
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ea2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ea6:	f7fc fa0b 	bl	80002c0 <__aeabi_uldivmod>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4610      	mov	r0, r2
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	020b      	lsls	r3, r1, #8
 8003ebc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ec0:	0202      	lsls	r2, r0, #8
 8003ec2:	6979      	ldr	r1, [r7, #20]
 8003ec4:	6849      	ldr	r1, [r1, #4]
 8003ec6:	0849      	lsrs	r1, r1, #1
 8003ec8:	2000      	movs	r0, #0
 8003eca:	460c      	mov	r4, r1
 8003ecc:	4605      	mov	r5, r0
 8003ece:	eb12 0804 	adds.w	r8, r2, r4
 8003ed2:	eb43 0905 	adc.w	r9, r3, r5
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	469a      	mov	sl, r3
 8003ede:	4693      	mov	fp, r2
 8003ee0:	4652      	mov	r2, sl
 8003ee2:	465b      	mov	r3, fp
 8003ee4:	4640      	mov	r0, r8
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	f7fc f9ea 	bl	80002c0 <__aeabi_uldivmod>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003efa:	d308      	bcc.n	8003f0e <UART_SetConfig+0x3d2>
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f02:	d204      	bcs.n	8003f0e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6a3a      	ldr	r2, [r7, #32]
 8003f0a:	60da      	str	r2, [r3, #12]
 8003f0c:	e0c8      	b.n	80040a0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f14:	e0c4      	b.n	80040a0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f1e:	d167      	bne.n	8003ff0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003f20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d828      	bhi.n	8003f7a <UART_SetConfig+0x43e>
 8003f28:	a201      	add	r2, pc, #4	@ (adr r2, 8003f30 <UART_SetConfig+0x3f4>)
 8003f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2e:	bf00      	nop
 8003f30:	08003f55 	.word	0x08003f55
 8003f34:	08003f5d 	.word	0x08003f5d
 8003f38:	08003f65 	.word	0x08003f65
 8003f3c:	08003f7b 	.word	0x08003f7b
 8003f40:	08003f6b 	.word	0x08003f6b
 8003f44:	08003f7b 	.word	0x08003f7b
 8003f48:	08003f7b 	.word	0x08003f7b
 8003f4c:	08003f7b 	.word	0x08003f7b
 8003f50:	08003f73 	.word	0x08003f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f54:	f7fe fa74 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 8003f58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f5a:	e014      	b.n	8003f86 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f5c:	f7fe fa86 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 8003f60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f62:	e010      	b.n	8003f86 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f64:	4b5a      	ldr	r3, [pc, #360]	@ (80040d0 <UART_SetConfig+0x594>)
 8003f66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f68:	e00d      	b.n	8003f86 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6a:	f7fe f9fb 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8003f6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f70:	e009      	b.n	8003f86 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f78:	e005      	b.n	8003f86 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 8089 	beq.w	80040a0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	4a4e      	ldr	r2, [pc, #312]	@ (80040cc <UART_SetConfig+0x590>)
 8003f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fa0:	005a      	lsls	r2, r3, #1
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	441a      	add	r2, r3
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	2b0f      	cmp	r3, #15
 8003fb8:	d916      	bls.n	8003fe8 <UART_SetConfig+0x4ac>
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fc0:	d212      	bcs.n	8003fe8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	f023 030f 	bic.w	r3, r3, #15
 8003fca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	085b      	lsrs	r3, r3, #1
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	8bfb      	ldrh	r3, [r7, #30]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	8bfa      	ldrh	r2, [r7, #30]
 8003fe4:	60da      	str	r2, [r3, #12]
 8003fe6:	e05b      	b.n	80040a0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003fee:	e057      	b.n	80040a0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ff0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d828      	bhi.n	800404a <UART_SetConfig+0x50e>
 8003ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8004000 <UART_SetConfig+0x4c4>)
 8003ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffe:	bf00      	nop
 8004000:	08004025 	.word	0x08004025
 8004004:	0800402d 	.word	0x0800402d
 8004008:	08004035 	.word	0x08004035
 800400c:	0800404b 	.word	0x0800404b
 8004010:	0800403b 	.word	0x0800403b
 8004014:	0800404b 	.word	0x0800404b
 8004018:	0800404b 	.word	0x0800404b
 800401c:	0800404b 	.word	0x0800404b
 8004020:	08004043 	.word	0x08004043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004024:	f7fe fa0c 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 8004028:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800402a:	e014      	b.n	8004056 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800402c:	f7fe fa1e 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 8004030:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004032:	e010      	b.n	8004056 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004034:	4b26      	ldr	r3, [pc, #152]	@ (80040d0 <UART_SetConfig+0x594>)
 8004036:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004038:	e00d      	b.n	8004056 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800403a:	f7fe f993 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 800403e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004040:	e009      	b.n	8004056 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004046:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004048:	e005      	b.n	8004056 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004054:	bf00      	nop
    }

    if (pclk != 0U)
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	2b00      	cmp	r3, #0
 800405a:	d021      	beq.n	80040a0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	4a1a      	ldr	r2, [pc, #104]	@ (80040cc <UART_SetConfig+0x590>)
 8004062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004066:	461a      	mov	r2, r3
 8004068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406a:	fbb3 f2f2 	udiv	r2, r3, r2
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	085b      	lsrs	r3, r3, #1
 8004074:	441a      	add	r2, r3
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	fbb2 f3f3 	udiv	r3, r2, r3
 800407e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	2b0f      	cmp	r3, #15
 8004084:	d909      	bls.n	800409a <UART_SetConfig+0x55e>
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800408c:	d205      	bcs.n	800409a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	b29a      	uxth	r2, r3
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60da      	str	r2, [r3, #12]
 8004098:	e002      	b.n	80040a0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2200      	movs	r2, #0
 80040b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2200      	movs	r2, #0
 80040ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80040bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3730      	adds	r7, #48	@ 0x30
 80040c4:	46bd      	mov	sp, r7
 80040c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ca:	bf00      	nop
 80040cc:	080056b4 	.word	0x080056b4
 80040d0:	00f42400 	.word	0x00f42400

080040d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004168:	f003 0310 	and.w	r3, r3, #16
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01a      	beq.n	80041ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041d2:	d10a      	bne.n	80041ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	605a      	str	r2, [r3, #4]
  }
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b098      	sub	sp, #96	@ 0x60
 800421c:	af02      	add	r7, sp, #8
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004228:	f7fc ff08 	bl	800103c <HAL_GetTick>
 800422c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b08      	cmp	r3, #8
 800423a:	d12f      	bne.n	800429c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800423c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004244:	2200      	movs	r2, #0
 8004246:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f88e 	bl	800436c <UART_WaitOnFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d022      	beq.n	800429c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425e:	e853 3f00 	ldrex	r3, [r3]
 8004262:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004266:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800426a:	653b      	str	r3, [r7, #80]	@ 0x50
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004274:	647b      	str	r3, [r7, #68]	@ 0x44
 8004276:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800427a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e6      	bne.n	8004256 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e063      	b.n	8004364 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d149      	bne.n	800433e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042b2:	2200      	movs	r2, #0
 80042b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f857 	bl	800436c <UART_WaitOnFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d03c      	beq.n	800433e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	623b      	str	r3, [r7, #32]
   return(result);
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80042e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1e6      	bne.n	80042c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3308      	adds	r3, #8
 80042fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	e853 3f00 	ldrex	r3, [r3]
 8004304:	60fb      	str	r3, [r7, #12]
   return(result);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f023 0301 	bic.w	r3, r3, #1
 800430c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3308      	adds	r3, #8
 8004314:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004316:	61fa      	str	r2, [r7, #28]
 8004318:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431a:	69b9      	ldr	r1, [r7, #24]
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	e841 2300 	strex	r3, r2, [r1]
 8004322:	617b      	str	r3, [r7, #20]
   return(result);
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1e5      	bne.n	80042f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e012      	b.n	8004364 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2220      	movs	r2, #32
 8004342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2220      	movs	r2, #32
 800434a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3758      	adds	r7, #88	@ 0x58
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	4613      	mov	r3, r2
 800437a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800437c:	e04f      	b.n	800441e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004384:	d04b      	beq.n	800441e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004386:	f7fc fe59 	bl	800103c <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	429a      	cmp	r2, r3
 8004394:	d302      	bcc.n	800439c <UART_WaitOnFlagUntilTimeout+0x30>
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e04e      	b.n	800443e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d037      	beq.n	800441e <UART_WaitOnFlagUntilTimeout+0xb2>
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b80      	cmp	r3, #128	@ 0x80
 80043b2:	d034      	beq.n	800441e <UART_WaitOnFlagUntilTimeout+0xb2>
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b40      	cmp	r3, #64	@ 0x40
 80043b8:	d031      	beq.n	800441e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d110      	bne.n	80043ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2208      	movs	r2, #8
 80043ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f838 	bl	8004446 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2208      	movs	r2, #8
 80043da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e029      	b.n	800443e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043f8:	d111      	bne.n	800441e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004402:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f81e 	bl	8004446 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e00f      	b.n	800443e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	69da      	ldr	r2, [r3, #28]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4013      	ands	r3, r2
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	429a      	cmp	r2, r3
 800442c:	bf0c      	ite	eq
 800442e:	2301      	moveq	r3, #1
 8004430:	2300      	movne	r3, #0
 8004432:	b2db      	uxtb	r3, r3
 8004434:	461a      	mov	r2, r3
 8004436:	79fb      	ldrb	r3, [r7, #7]
 8004438:	429a      	cmp	r2, r3
 800443a:	d0a0      	beq.n	800437e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004446:	b480      	push	{r7}
 8004448:	b095      	sub	sp, #84	@ 0x54
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004456:	e853 3f00 	ldrex	r3, [r3]
 800445a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800445c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800446c:	643b      	str	r3, [r7, #64]	@ 0x40
 800446e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004470:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004472:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004474:	e841 2300 	strex	r3, r2, [r1]
 8004478:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800447a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1e6      	bne.n	800444e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3308      	adds	r3, #8
 8004486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004496:	f023 0301 	bic.w	r3, r3, #1
 800449a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3308      	adds	r3, #8
 80044a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e3      	bne.n	8004480 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d118      	bne.n	80044f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	e853 3f00 	ldrex	r3, [r3]
 80044cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f023 0310 	bic.w	r3, r3, #16
 80044d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044de:	61bb      	str	r3, [r7, #24]
 80044e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	6979      	ldr	r1, [r7, #20]
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	613b      	str	r3, [r7, #16]
   return(result);
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e6      	bne.n	80044c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004506:	bf00      	nop
 8004508:	3754      	adds	r7, #84	@ 0x54
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004512:	b480      	push	{r7}
 8004514:	b085      	sub	sp, #20
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_UARTEx_DisableFifoMode+0x16>
 8004524:	2302      	movs	r3, #2
 8004526:	e027      	b.n	8004578 <HAL_UARTEx_DisableFifoMode+0x66>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2224      	movs	r2, #36	@ 0x24
 8004534:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0201 	bic.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004556:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004598:	2302      	movs	r3, #2
 800459a:	e02d      	b.n	80045f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2224      	movs	r2, #36	@ 0x24
 80045a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0201 	bic.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f84f 	bl	800467c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004614:	2302      	movs	r3, #2
 8004616:	e02d      	b.n	8004674 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2224      	movs	r2, #36	@ 0x24
 8004624:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0201 	bic.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f811 	bl	800467c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004688:	2b00      	cmp	r3, #0
 800468a:	d108      	bne.n	800469e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800469c:	e031      	b.n	8004702 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800469e:	2308      	movs	r3, #8
 80046a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80046a2:	2308      	movs	r3, #8
 80046a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	0e5b      	lsrs	r3, r3, #25
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	0f5b      	lsrs	r3, r3, #29
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046c6:	7bbb      	ldrb	r3, [r7, #14]
 80046c8:	7b3a      	ldrb	r2, [r7, #12]
 80046ca:	4911      	ldr	r1, [pc, #68]	@ (8004710 <UARTEx_SetNbDataToProcess+0x94>)
 80046cc:	5c8a      	ldrb	r2, [r1, r2]
 80046ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80046d2:	7b3a      	ldrb	r2, [r7, #12]
 80046d4:	490f      	ldr	r1, [pc, #60]	@ (8004714 <UARTEx_SetNbDataToProcess+0x98>)
 80046d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80046dc:	b29a      	uxth	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	7b7a      	ldrb	r2, [r7, #13]
 80046e8:	4909      	ldr	r1, [pc, #36]	@ (8004710 <UARTEx_SetNbDataToProcess+0x94>)
 80046ea:	5c8a      	ldrb	r2, [r1, r2]
 80046ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80046f0:	7b7a      	ldrb	r2, [r7, #13]
 80046f2:	4908      	ldr	r1, [pc, #32]	@ (8004714 <UARTEx_SetNbDataToProcess+0x98>)
 80046f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004702:	bf00      	nop
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	080056cc 	.word	0x080056cc
 8004714:	080056d4 	.word	0x080056d4

08004718 <std>:
 8004718:	2300      	movs	r3, #0
 800471a:	b510      	push	{r4, lr}
 800471c:	4604      	mov	r4, r0
 800471e:	e9c0 3300 	strd	r3, r3, [r0]
 8004722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004726:	6083      	str	r3, [r0, #8]
 8004728:	8181      	strh	r1, [r0, #12]
 800472a:	6643      	str	r3, [r0, #100]	@ 0x64
 800472c:	81c2      	strh	r2, [r0, #14]
 800472e:	6183      	str	r3, [r0, #24]
 8004730:	4619      	mov	r1, r3
 8004732:	2208      	movs	r2, #8
 8004734:	305c      	adds	r0, #92	@ 0x5c
 8004736:	f000 f9f9 	bl	8004b2c <memset>
 800473a:	4b0d      	ldr	r3, [pc, #52]	@ (8004770 <std+0x58>)
 800473c:	6263      	str	r3, [r4, #36]	@ 0x24
 800473e:	4b0d      	ldr	r3, [pc, #52]	@ (8004774 <std+0x5c>)
 8004740:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004742:	4b0d      	ldr	r3, [pc, #52]	@ (8004778 <std+0x60>)
 8004744:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004746:	4b0d      	ldr	r3, [pc, #52]	@ (800477c <std+0x64>)
 8004748:	6323      	str	r3, [r4, #48]	@ 0x30
 800474a:	4b0d      	ldr	r3, [pc, #52]	@ (8004780 <std+0x68>)
 800474c:	6224      	str	r4, [r4, #32]
 800474e:	429c      	cmp	r4, r3
 8004750:	d006      	beq.n	8004760 <std+0x48>
 8004752:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004756:	4294      	cmp	r4, r2
 8004758:	d002      	beq.n	8004760 <std+0x48>
 800475a:	33d0      	adds	r3, #208	@ 0xd0
 800475c:	429c      	cmp	r4, r3
 800475e:	d105      	bne.n	800476c <std+0x54>
 8004760:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004768:	f000 ba58 	b.w	8004c1c <__retarget_lock_init_recursive>
 800476c:	bd10      	pop	{r4, pc}
 800476e:	bf00      	nop
 8004770:	0800497d 	.word	0x0800497d
 8004774:	0800499f 	.word	0x0800499f
 8004778:	080049d7 	.word	0x080049d7
 800477c:	080049fb 	.word	0x080049fb
 8004780:	200021a0 	.word	0x200021a0

08004784 <stdio_exit_handler>:
 8004784:	4a02      	ldr	r2, [pc, #8]	@ (8004790 <stdio_exit_handler+0xc>)
 8004786:	4903      	ldr	r1, [pc, #12]	@ (8004794 <stdio_exit_handler+0x10>)
 8004788:	4803      	ldr	r0, [pc, #12]	@ (8004798 <stdio_exit_handler+0x14>)
 800478a:	f000 b869 	b.w	8004860 <_fwalk_sglue>
 800478e:	bf00      	nop
 8004790:	2000000c 	.word	0x2000000c
 8004794:	080054bd 	.word	0x080054bd
 8004798:	2000001c 	.word	0x2000001c

0800479c <cleanup_stdio>:
 800479c:	6841      	ldr	r1, [r0, #4]
 800479e:	4b0c      	ldr	r3, [pc, #48]	@ (80047d0 <cleanup_stdio+0x34>)
 80047a0:	4299      	cmp	r1, r3
 80047a2:	b510      	push	{r4, lr}
 80047a4:	4604      	mov	r4, r0
 80047a6:	d001      	beq.n	80047ac <cleanup_stdio+0x10>
 80047a8:	f000 fe88 	bl	80054bc <_fflush_r>
 80047ac:	68a1      	ldr	r1, [r4, #8]
 80047ae:	4b09      	ldr	r3, [pc, #36]	@ (80047d4 <cleanup_stdio+0x38>)
 80047b0:	4299      	cmp	r1, r3
 80047b2:	d002      	beq.n	80047ba <cleanup_stdio+0x1e>
 80047b4:	4620      	mov	r0, r4
 80047b6:	f000 fe81 	bl	80054bc <_fflush_r>
 80047ba:	68e1      	ldr	r1, [r4, #12]
 80047bc:	4b06      	ldr	r3, [pc, #24]	@ (80047d8 <cleanup_stdio+0x3c>)
 80047be:	4299      	cmp	r1, r3
 80047c0:	d004      	beq.n	80047cc <cleanup_stdio+0x30>
 80047c2:	4620      	mov	r0, r4
 80047c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047c8:	f000 be78 	b.w	80054bc <_fflush_r>
 80047cc:	bd10      	pop	{r4, pc}
 80047ce:	bf00      	nop
 80047d0:	200021a0 	.word	0x200021a0
 80047d4:	20002208 	.word	0x20002208
 80047d8:	20002270 	.word	0x20002270

080047dc <global_stdio_init.part.0>:
 80047dc:	b510      	push	{r4, lr}
 80047de:	4b0b      	ldr	r3, [pc, #44]	@ (800480c <global_stdio_init.part.0+0x30>)
 80047e0:	4c0b      	ldr	r4, [pc, #44]	@ (8004810 <global_stdio_init.part.0+0x34>)
 80047e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004814 <global_stdio_init.part.0+0x38>)
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	4620      	mov	r0, r4
 80047e8:	2200      	movs	r2, #0
 80047ea:	2104      	movs	r1, #4
 80047ec:	f7ff ff94 	bl	8004718 <std>
 80047f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80047f4:	2201      	movs	r2, #1
 80047f6:	2109      	movs	r1, #9
 80047f8:	f7ff ff8e 	bl	8004718 <std>
 80047fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004800:	2202      	movs	r2, #2
 8004802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004806:	2112      	movs	r1, #18
 8004808:	f7ff bf86 	b.w	8004718 <std>
 800480c:	200022d8 	.word	0x200022d8
 8004810:	200021a0 	.word	0x200021a0
 8004814:	08004785 	.word	0x08004785

08004818 <__sfp_lock_acquire>:
 8004818:	4801      	ldr	r0, [pc, #4]	@ (8004820 <__sfp_lock_acquire+0x8>)
 800481a:	f000 ba00 	b.w	8004c1e <__retarget_lock_acquire_recursive>
 800481e:	bf00      	nop
 8004820:	200022e1 	.word	0x200022e1

08004824 <__sfp_lock_release>:
 8004824:	4801      	ldr	r0, [pc, #4]	@ (800482c <__sfp_lock_release+0x8>)
 8004826:	f000 b9fb 	b.w	8004c20 <__retarget_lock_release_recursive>
 800482a:	bf00      	nop
 800482c:	200022e1 	.word	0x200022e1

08004830 <__sinit>:
 8004830:	b510      	push	{r4, lr}
 8004832:	4604      	mov	r4, r0
 8004834:	f7ff fff0 	bl	8004818 <__sfp_lock_acquire>
 8004838:	6a23      	ldr	r3, [r4, #32]
 800483a:	b11b      	cbz	r3, 8004844 <__sinit+0x14>
 800483c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004840:	f7ff bff0 	b.w	8004824 <__sfp_lock_release>
 8004844:	4b04      	ldr	r3, [pc, #16]	@ (8004858 <__sinit+0x28>)
 8004846:	6223      	str	r3, [r4, #32]
 8004848:	4b04      	ldr	r3, [pc, #16]	@ (800485c <__sinit+0x2c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1f5      	bne.n	800483c <__sinit+0xc>
 8004850:	f7ff ffc4 	bl	80047dc <global_stdio_init.part.0>
 8004854:	e7f2      	b.n	800483c <__sinit+0xc>
 8004856:	bf00      	nop
 8004858:	0800479d 	.word	0x0800479d
 800485c:	200022d8 	.word	0x200022d8

08004860 <_fwalk_sglue>:
 8004860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004864:	4607      	mov	r7, r0
 8004866:	4688      	mov	r8, r1
 8004868:	4614      	mov	r4, r2
 800486a:	2600      	movs	r6, #0
 800486c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004870:	f1b9 0901 	subs.w	r9, r9, #1
 8004874:	d505      	bpl.n	8004882 <_fwalk_sglue+0x22>
 8004876:	6824      	ldr	r4, [r4, #0]
 8004878:	2c00      	cmp	r4, #0
 800487a:	d1f7      	bne.n	800486c <_fwalk_sglue+0xc>
 800487c:	4630      	mov	r0, r6
 800487e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004882:	89ab      	ldrh	r3, [r5, #12]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d907      	bls.n	8004898 <_fwalk_sglue+0x38>
 8004888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800488c:	3301      	adds	r3, #1
 800488e:	d003      	beq.n	8004898 <_fwalk_sglue+0x38>
 8004890:	4629      	mov	r1, r5
 8004892:	4638      	mov	r0, r7
 8004894:	47c0      	blx	r8
 8004896:	4306      	orrs	r6, r0
 8004898:	3568      	adds	r5, #104	@ 0x68
 800489a:	e7e9      	b.n	8004870 <_fwalk_sglue+0x10>

0800489c <iprintf>:
 800489c:	b40f      	push	{r0, r1, r2, r3}
 800489e:	b507      	push	{r0, r1, r2, lr}
 80048a0:	4906      	ldr	r1, [pc, #24]	@ (80048bc <iprintf+0x20>)
 80048a2:	ab04      	add	r3, sp, #16
 80048a4:	6808      	ldr	r0, [r1, #0]
 80048a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80048aa:	6881      	ldr	r1, [r0, #8]
 80048ac:	9301      	str	r3, [sp, #4]
 80048ae:	f000 fadb 	bl	8004e68 <_vfiprintf_r>
 80048b2:	b003      	add	sp, #12
 80048b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80048b8:	b004      	add	sp, #16
 80048ba:	4770      	bx	lr
 80048bc:	20000018 	.word	0x20000018

080048c0 <_puts_r>:
 80048c0:	6a03      	ldr	r3, [r0, #32]
 80048c2:	b570      	push	{r4, r5, r6, lr}
 80048c4:	6884      	ldr	r4, [r0, #8]
 80048c6:	4605      	mov	r5, r0
 80048c8:	460e      	mov	r6, r1
 80048ca:	b90b      	cbnz	r3, 80048d0 <_puts_r+0x10>
 80048cc:	f7ff ffb0 	bl	8004830 <__sinit>
 80048d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048d2:	07db      	lsls	r3, r3, #31
 80048d4:	d405      	bmi.n	80048e2 <_puts_r+0x22>
 80048d6:	89a3      	ldrh	r3, [r4, #12]
 80048d8:	0598      	lsls	r0, r3, #22
 80048da:	d402      	bmi.n	80048e2 <_puts_r+0x22>
 80048dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048de:	f000 f99e 	bl	8004c1e <__retarget_lock_acquire_recursive>
 80048e2:	89a3      	ldrh	r3, [r4, #12]
 80048e4:	0719      	lsls	r1, r3, #28
 80048e6:	d502      	bpl.n	80048ee <_puts_r+0x2e>
 80048e8:	6923      	ldr	r3, [r4, #16]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d135      	bne.n	800495a <_puts_r+0x9a>
 80048ee:	4621      	mov	r1, r4
 80048f0:	4628      	mov	r0, r5
 80048f2:	f000 f8c5 	bl	8004a80 <__swsetup_r>
 80048f6:	b380      	cbz	r0, 800495a <_puts_r+0x9a>
 80048f8:	f04f 35ff 	mov.w	r5, #4294967295
 80048fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048fe:	07da      	lsls	r2, r3, #31
 8004900:	d405      	bmi.n	800490e <_puts_r+0x4e>
 8004902:	89a3      	ldrh	r3, [r4, #12]
 8004904:	059b      	lsls	r3, r3, #22
 8004906:	d402      	bmi.n	800490e <_puts_r+0x4e>
 8004908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800490a:	f000 f989 	bl	8004c20 <__retarget_lock_release_recursive>
 800490e:	4628      	mov	r0, r5
 8004910:	bd70      	pop	{r4, r5, r6, pc}
 8004912:	2b00      	cmp	r3, #0
 8004914:	da04      	bge.n	8004920 <_puts_r+0x60>
 8004916:	69a2      	ldr	r2, [r4, #24]
 8004918:	429a      	cmp	r2, r3
 800491a:	dc17      	bgt.n	800494c <_puts_r+0x8c>
 800491c:	290a      	cmp	r1, #10
 800491e:	d015      	beq.n	800494c <_puts_r+0x8c>
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	6022      	str	r2, [r4, #0]
 8004926:	7019      	strb	r1, [r3, #0]
 8004928:	68a3      	ldr	r3, [r4, #8]
 800492a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800492e:	3b01      	subs	r3, #1
 8004930:	60a3      	str	r3, [r4, #8]
 8004932:	2900      	cmp	r1, #0
 8004934:	d1ed      	bne.n	8004912 <_puts_r+0x52>
 8004936:	2b00      	cmp	r3, #0
 8004938:	da11      	bge.n	800495e <_puts_r+0x9e>
 800493a:	4622      	mov	r2, r4
 800493c:	210a      	movs	r1, #10
 800493e:	4628      	mov	r0, r5
 8004940:	f000 f85f 	bl	8004a02 <__swbuf_r>
 8004944:	3001      	adds	r0, #1
 8004946:	d0d7      	beq.n	80048f8 <_puts_r+0x38>
 8004948:	250a      	movs	r5, #10
 800494a:	e7d7      	b.n	80048fc <_puts_r+0x3c>
 800494c:	4622      	mov	r2, r4
 800494e:	4628      	mov	r0, r5
 8004950:	f000 f857 	bl	8004a02 <__swbuf_r>
 8004954:	3001      	adds	r0, #1
 8004956:	d1e7      	bne.n	8004928 <_puts_r+0x68>
 8004958:	e7ce      	b.n	80048f8 <_puts_r+0x38>
 800495a:	3e01      	subs	r6, #1
 800495c:	e7e4      	b.n	8004928 <_puts_r+0x68>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	6022      	str	r2, [r4, #0]
 8004964:	220a      	movs	r2, #10
 8004966:	701a      	strb	r2, [r3, #0]
 8004968:	e7ee      	b.n	8004948 <_puts_r+0x88>
	...

0800496c <puts>:
 800496c:	4b02      	ldr	r3, [pc, #8]	@ (8004978 <puts+0xc>)
 800496e:	4601      	mov	r1, r0
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	f7ff bfa5 	b.w	80048c0 <_puts_r>
 8004976:	bf00      	nop
 8004978:	20000018 	.word	0x20000018

0800497c <__sread>:
 800497c:	b510      	push	{r4, lr}
 800497e:	460c      	mov	r4, r1
 8004980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004984:	f000 f8fc 	bl	8004b80 <_read_r>
 8004988:	2800      	cmp	r0, #0
 800498a:	bfab      	itete	ge
 800498c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800498e:	89a3      	ldrhlt	r3, [r4, #12]
 8004990:	181b      	addge	r3, r3, r0
 8004992:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004996:	bfac      	ite	ge
 8004998:	6563      	strge	r3, [r4, #84]	@ 0x54
 800499a:	81a3      	strhlt	r3, [r4, #12]
 800499c:	bd10      	pop	{r4, pc}

0800499e <__swrite>:
 800499e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049a2:	461f      	mov	r7, r3
 80049a4:	898b      	ldrh	r3, [r1, #12]
 80049a6:	05db      	lsls	r3, r3, #23
 80049a8:	4605      	mov	r5, r0
 80049aa:	460c      	mov	r4, r1
 80049ac:	4616      	mov	r6, r2
 80049ae:	d505      	bpl.n	80049bc <__swrite+0x1e>
 80049b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b4:	2302      	movs	r3, #2
 80049b6:	2200      	movs	r2, #0
 80049b8:	f000 f8d0 	bl	8004b5c <_lseek_r>
 80049bc:	89a3      	ldrh	r3, [r4, #12]
 80049be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049c6:	81a3      	strh	r3, [r4, #12]
 80049c8:	4632      	mov	r2, r6
 80049ca:	463b      	mov	r3, r7
 80049cc:	4628      	mov	r0, r5
 80049ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049d2:	f000 b8e7 	b.w	8004ba4 <_write_r>

080049d6 <__sseek>:
 80049d6:	b510      	push	{r4, lr}
 80049d8:	460c      	mov	r4, r1
 80049da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049de:	f000 f8bd 	bl	8004b5c <_lseek_r>
 80049e2:	1c43      	adds	r3, r0, #1
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	bf15      	itete	ne
 80049e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80049ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80049ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80049f2:	81a3      	strheq	r3, [r4, #12]
 80049f4:	bf18      	it	ne
 80049f6:	81a3      	strhne	r3, [r4, #12]
 80049f8:	bd10      	pop	{r4, pc}

080049fa <__sclose>:
 80049fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049fe:	f000 b89d 	b.w	8004b3c <_close_r>

08004a02 <__swbuf_r>:
 8004a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a04:	460e      	mov	r6, r1
 8004a06:	4614      	mov	r4, r2
 8004a08:	4605      	mov	r5, r0
 8004a0a:	b118      	cbz	r0, 8004a14 <__swbuf_r+0x12>
 8004a0c:	6a03      	ldr	r3, [r0, #32]
 8004a0e:	b90b      	cbnz	r3, 8004a14 <__swbuf_r+0x12>
 8004a10:	f7ff ff0e 	bl	8004830 <__sinit>
 8004a14:	69a3      	ldr	r3, [r4, #24]
 8004a16:	60a3      	str	r3, [r4, #8]
 8004a18:	89a3      	ldrh	r3, [r4, #12]
 8004a1a:	071a      	lsls	r2, r3, #28
 8004a1c:	d501      	bpl.n	8004a22 <__swbuf_r+0x20>
 8004a1e:	6923      	ldr	r3, [r4, #16]
 8004a20:	b943      	cbnz	r3, 8004a34 <__swbuf_r+0x32>
 8004a22:	4621      	mov	r1, r4
 8004a24:	4628      	mov	r0, r5
 8004a26:	f000 f82b 	bl	8004a80 <__swsetup_r>
 8004a2a:	b118      	cbz	r0, 8004a34 <__swbuf_r+0x32>
 8004a2c:	f04f 37ff 	mov.w	r7, #4294967295
 8004a30:	4638      	mov	r0, r7
 8004a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	6922      	ldr	r2, [r4, #16]
 8004a38:	1a98      	subs	r0, r3, r2
 8004a3a:	6963      	ldr	r3, [r4, #20]
 8004a3c:	b2f6      	uxtb	r6, r6
 8004a3e:	4283      	cmp	r3, r0
 8004a40:	4637      	mov	r7, r6
 8004a42:	dc05      	bgt.n	8004a50 <__swbuf_r+0x4e>
 8004a44:	4621      	mov	r1, r4
 8004a46:	4628      	mov	r0, r5
 8004a48:	f000 fd38 	bl	80054bc <_fflush_r>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	d1ed      	bne.n	8004a2c <__swbuf_r+0x2a>
 8004a50:	68a3      	ldr	r3, [r4, #8]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	60a3      	str	r3, [r4, #8]
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	6022      	str	r2, [r4, #0]
 8004a5c:	701e      	strb	r6, [r3, #0]
 8004a5e:	6962      	ldr	r2, [r4, #20]
 8004a60:	1c43      	adds	r3, r0, #1
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d004      	beq.n	8004a70 <__swbuf_r+0x6e>
 8004a66:	89a3      	ldrh	r3, [r4, #12]
 8004a68:	07db      	lsls	r3, r3, #31
 8004a6a:	d5e1      	bpl.n	8004a30 <__swbuf_r+0x2e>
 8004a6c:	2e0a      	cmp	r6, #10
 8004a6e:	d1df      	bne.n	8004a30 <__swbuf_r+0x2e>
 8004a70:	4621      	mov	r1, r4
 8004a72:	4628      	mov	r0, r5
 8004a74:	f000 fd22 	bl	80054bc <_fflush_r>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	d0d9      	beq.n	8004a30 <__swbuf_r+0x2e>
 8004a7c:	e7d6      	b.n	8004a2c <__swbuf_r+0x2a>
	...

08004a80 <__swsetup_r>:
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	4b29      	ldr	r3, [pc, #164]	@ (8004b28 <__swsetup_r+0xa8>)
 8004a84:	4605      	mov	r5, r0
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	460c      	mov	r4, r1
 8004a8a:	b118      	cbz	r0, 8004a94 <__swsetup_r+0x14>
 8004a8c:	6a03      	ldr	r3, [r0, #32]
 8004a8e:	b90b      	cbnz	r3, 8004a94 <__swsetup_r+0x14>
 8004a90:	f7ff fece 	bl	8004830 <__sinit>
 8004a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a98:	0719      	lsls	r1, r3, #28
 8004a9a:	d422      	bmi.n	8004ae2 <__swsetup_r+0x62>
 8004a9c:	06da      	lsls	r2, r3, #27
 8004a9e:	d407      	bmi.n	8004ab0 <__swsetup_r+0x30>
 8004aa0:	2209      	movs	r2, #9
 8004aa2:	602a      	str	r2, [r5, #0]
 8004aa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aa8:	81a3      	strh	r3, [r4, #12]
 8004aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8004aae:	e033      	b.n	8004b18 <__swsetup_r+0x98>
 8004ab0:	0758      	lsls	r0, r3, #29
 8004ab2:	d512      	bpl.n	8004ada <__swsetup_r+0x5a>
 8004ab4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ab6:	b141      	cbz	r1, 8004aca <__swsetup_r+0x4a>
 8004ab8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004abc:	4299      	cmp	r1, r3
 8004abe:	d002      	beq.n	8004ac6 <__swsetup_r+0x46>
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	f000 f8af 	bl	8004c24 <_free_r>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004aca:	89a3      	ldrh	r3, [r4, #12]
 8004acc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ad0:	81a3      	strh	r3, [r4, #12]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	6063      	str	r3, [r4, #4]
 8004ad6:	6923      	ldr	r3, [r4, #16]
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	89a3      	ldrh	r3, [r4, #12]
 8004adc:	f043 0308 	orr.w	r3, r3, #8
 8004ae0:	81a3      	strh	r3, [r4, #12]
 8004ae2:	6923      	ldr	r3, [r4, #16]
 8004ae4:	b94b      	cbnz	r3, 8004afa <__swsetup_r+0x7a>
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004af0:	d003      	beq.n	8004afa <__swsetup_r+0x7a>
 8004af2:	4621      	mov	r1, r4
 8004af4:	4628      	mov	r0, r5
 8004af6:	f000 fd2f 	bl	8005558 <__smakebuf_r>
 8004afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004afe:	f013 0201 	ands.w	r2, r3, #1
 8004b02:	d00a      	beq.n	8004b1a <__swsetup_r+0x9a>
 8004b04:	2200      	movs	r2, #0
 8004b06:	60a2      	str	r2, [r4, #8]
 8004b08:	6962      	ldr	r2, [r4, #20]
 8004b0a:	4252      	negs	r2, r2
 8004b0c:	61a2      	str	r2, [r4, #24]
 8004b0e:	6922      	ldr	r2, [r4, #16]
 8004b10:	b942      	cbnz	r2, 8004b24 <__swsetup_r+0xa4>
 8004b12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004b16:	d1c5      	bne.n	8004aa4 <__swsetup_r+0x24>
 8004b18:	bd38      	pop	{r3, r4, r5, pc}
 8004b1a:	0799      	lsls	r1, r3, #30
 8004b1c:	bf58      	it	pl
 8004b1e:	6962      	ldrpl	r2, [r4, #20]
 8004b20:	60a2      	str	r2, [r4, #8]
 8004b22:	e7f4      	b.n	8004b0e <__swsetup_r+0x8e>
 8004b24:	2000      	movs	r0, #0
 8004b26:	e7f7      	b.n	8004b18 <__swsetup_r+0x98>
 8004b28:	20000018 	.word	0x20000018

08004b2c <memset>:
 8004b2c:	4402      	add	r2, r0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d100      	bne.n	8004b36 <memset+0xa>
 8004b34:	4770      	bx	lr
 8004b36:	f803 1b01 	strb.w	r1, [r3], #1
 8004b3a:	e7f9      	b.n	8004b30 <memset+0x4>

08004b3c <_close_r>:
 8004b3c:	b538      	push	{r3, r4, r5, lr}
 8004b3e:	4d06      	ldr	r5, [pc, #24]	@ (8004b58 <_close_r+0x1c>)
 8004b40:	2300      	movs	r3, #0
 8004b42:	4604      	mov	r4, r0
 8004b44:	4608      	mov	r0, r1
 8004b46:	602b      	str	r3, [r5, #0]
 8004b48:	f7fc f96d 	bl	8000e26 <_close>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d102      	bne.n	8004b56 <_close_r+0x1a>
 8004b50:	682b      	ldr	r3, [r5, #0]
 8004b52:	b103      	cbz	r3, 8004b56 <_close_r+0x1a>
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	bd38      	pop	{r3, r4, r5, pc}
 8004b58:	200022dc 	.word	0x200022dc

08004b5c <_lseek_r>:
 8004b5c:	b538      	push	{r3, r4, r5, lr}
 8004b5e:	4d07      	ldr	r5, [pc, #28]	@ (8004b7c <_lseek_r+0x20>)
 8004b60:	4604      	mov	r4, r0
 8004b62:	4608      	mov	r0, r1
 8004b64:	4611      	mov	r1, r2
 8004b66:	2200      	movs	r2, #0
 8004b68:	602a      	str	r2, [r5, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f7fc f982 	bl	8000e74 <_lseek>
 8004b70:	1c43      	adds	r3, r0, #1
 8004b72:	d102      	bne.n	8004b7a <_lseek_r+0x1e>
 8004b74:	682b      	ldr	r3, [r5, #0]
 8004b76:	b103      	cbz	r3, 8004b7a <_lseek_r+0x1e>
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	bd38      	pop	{r3, r4, r5, pc}
 8004b7c:	200022dc 	.word	0x200022dc

08004b80 <_read_r>:
 8004b80:	b538      	push	{r3, r4, r5, lr}
 8004b82:	4d07      	ldr	r5, [pc, #28]	@ (8004ba0 <_read_r+0x20>)
 8004b84:	4604      	mov	r4, r0
 8004b86:	4608      	mov	r0, r1
 8004b88:	4611      	mov	r1, r2
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	602a      	str	r2, [r5, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f7fc f910 	bl	8000db4 <_read>
 8004b94:	1c43      	adds	r3, r0, #1
 8004b96:	d102      	bne.n	8004b9e <_read_r+0x1e>
 8004b98:	682b      	ldr	r3, [r5, #0]
 8004b9a:	b103      	cbz	r3, 8004b9e <_read_r+0x1e>
 8004b9c:	6023      	str	r3, [r4, #0]
 8004b9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ba0:	200022dc 	.word	0x200022dc

08004ba4 <_write_r>:
 8004ba4:	b538      	push	{r3, r4, r5, lr}
 8004ba6:	4d07      	ldr	r5, [pc, #28]	@ (8004bc4 <_write_r+0x20>)
 8004ba8:	4604      	mov	r4, r0
 8004baa:	4608      	mov	r0, r1
 8004bac:	4611      	mov	r1, r2
 8004bae:	2200      	movs	r2, #0
 8004bb0:	602a      	str	r2, [r5, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f7fc f91b 	bl	8000dee <_write>
 8004bb8:	1c43      	adds	r3, r0, #1
 8004bba:	d102      	bne.n	8004bc2 <_write_r+0x1e>
 8004bbc:	682b      	ldr	r3, [r5, #0]
 8004bbe:	b103      	cbz	r3, 8004bc2 <_write_r+0x1e>
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	bd38      	pop	{r3, r4, r5, pc}
 8004bc4:	200022dc 	.word	0x200022dc

08004bc8 <__errno>:
 8004bc8:	4b01      	ldr	r3, [pc, #4]	@ (8004bd0 <__errno+0x8>)
 8004bca:	6818      	ldr	r0, [r3, #0]
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	20000018 	.word	0x20000018

08004bd4 <__libc_init_array>:
 8004bd4:	b570      	push	{r4, r5, r6, lr}
 8004bd6:	4d0d      	ldr	r5, [pc, #52]	@ (8004c0c <__libc_init_array+0x38>)
 8004bd8:	4c0d      	ldr	r4, [pc, #52]	@ (8004c10 <__libc_init_array+0x3c>)
 8004bda:	1b64      	subs	r4, r4, r5
 8004bdc:	10a4      	asrs	r4, r4, #2
 8004bde:	2600      	movs	r6, #0
 8004be0:	42a6      	cmp	r6, r4
 8004be2:	d109      	bne.n	8004bf8 <__libc_init_array+0x24>
 8004be4:	4d0b      	ldr	r5, [pc, #44]	@ (8004c14 <__libc_init_array+0x40>)
 8004be6:	4c0c      	ldr	r4, [pc, #48]	@ (8004c18 <__libc_init_array+0x44>)
 8004be8:	f000 fd24 	bl	8005634 <_init>
 8004bec:	1b64      	subs	r4, r4, r5
 8004bee:	10a4      	asrs	r4, r4, #2
 8004bf0:	2600      	movs	r6, #0
 8004bf2:	42a6      	cmp	r6, r4
 8004bf4:	d105      	bne.n	8004c02 <__libc_init_array+0x2e>
 8004bf6:	bd70      	pop	{r4, r5, r6, pc}
 8004bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bfc:	4798      	blx	r3
 8004bfe:	3601      	adds	r6, #1
 8004c00:	e7ee      	b.n	8004be0 <__libc_init_array+0xc>
 8004c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c06:	4798      	blx	r3
 8004c08:	3601      	adds	r6, #1
 8004c0a:	e7f2      	b.n	8004bf2 <__libc_init_array+0x1e>
 8004c0c:	08005718 	.word	0x08005718
 8004c10:	08005718 	.word	0x08005718
 8004c14:	08005718 	.word	0x08005718
 8004c18:	0800571c 	.word	0x0800571c

08004c1c <__retarget_lock_init_recursive>:
 8004c1c:	4770      	bx	lr

08004c1e <__retarget_lock_acquire_recursive>:
 8004c1e:	4770      	bx	lr

08004c20 <__retarget_lock_release_recursive>:
 8004c20:	4770      	bx	lr
	...

08004c24 <_free_r>:
 8004c24:	b538      	push	{r3, r4, r5, lr}
 8004c26:	4605      	mov	r5, r0
 8004c28:	2900      	cmp	r1, #0
 8004c2a:	d041      	beq.n	8004cb0 <_free_r+0x8c>
 8004c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c30:	1f0c      	subs	r4, r1, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	bfb8      	it	lt
 8004c36:	18e4      	addlt	r4, r4, r3
 8004c38:	f000 f8e0 	bl	8004dfc <__malloc_lock>
 8004c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb4 <_free_r+0x90>)
 8004c3e:	6813      	ldr	r3, [r2, #0]
 8004c40:	b933      	cbnz	r3, 8004c50 <_free_r+0x2c>
 8004c42:	6063      	str	r3, [r4, #4]
 8004c44:	6014      	str	r4, [r2, #0]
 8004c46:	4628      	mov	r0, r5
 8004c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c4c:	f000 b8dc 	b.w	8004e08 <__malloc_unlock>
 8004c50:	42a3      	cmp	r3, r4
 8004c52:	d908      	bls.n	8004c66 <_free_r+0x42>
 8004c54:	6820      	ldr	r0, [r4, #0]
 8004c56:	1821      	adds	r1, r4, r0
 8004c58:	428b      	cmp	r3, r1
 8004c5a:	bf01      	itttt	eq
 8004c5c:	6819      	ldreq	r1, [r3, #0]
 8004c5e:	685b      	ldreq	r3, [r3, #4]
 8004c60:	1809      	addeq	r1, r1, r0
 8004c62:	6021      	streq	r1, [r4, #0]
 8004c64:	e7ed      	b.n	8004c42 <_free_r+0x1e>
 8004c66:	461a      	mov	r2, r3
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	b10b      	cbz	r3, 8004c70 <_free_r+0x4c>
 8004c6c:	42a3      	cmp	r3, r4
 8004c6e:	d9fa      	bls.n	8004c66 <_free_r+0x42>
 8004c70:	6811      	ldr	r1, [r2, #0]
 8004c72:	1850      	adds	r0, r2, r1
 8004c74:	42a0      	cmp	r0, r4
 8004c76:	d10b      	bne.n	8004c90 <_free_r+0x6c>
 8004c78:	6820      	ldr	r0, [r4, #0]
 8004c7a:	4401      	add	r1, r0
 8004c7c:	1850      	adds	r0, r2, r1
 8004c7e:	4283      	cmp	r3, r0
 8004c80:	6011      	str	r1, [r2, #0]
 8004c82:	d1e0      	bne.n	8004c46 <_free_r+0x22>
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	6053      	str	r3, [r2, #4]
 8004c8a:	4408      	add	r0, r1
 8004c8c:	6010      	str	r0, [r2, #0]
 8004c8e:	e7da      	b.n	8004c46 <_free_r+0x22>
 8004c90:	d902      	bls.n	8004c98 <_free_r+0x74>
 8004c92:	230c      	movs	r3, #12
 8004c94:	602b      	str	r3, [r5, #0]
 8004c96:	e7d6      	b.n	8004c46 <_free_r+0x22>
 8004c98:	6820      	ldr	r0, [r4, #0]
 8004c9a:	1821      	adds	r1, r4, r0
 8004c9c:	428b      	cmp	r3, r1
 8004c9e:	bf04      	itt	eq
 8004ca0:	6819      	ldreq	r1, [r3, #0]
 8004ca2:	685b      	ldreq	r3, [r3, #4]
 8004ca4:	6063      	str	r3, [r4, #4]
 8004ca6:	bf04      	itt	eq
 8004ca8:	1809      	addeq	r1, r1, r0
 8004caa:	6021      	streq	r1, [r4, #0]
 8004cac:	6054      	str	r4, [r2, #4]
 8004cae:	e7ca      	b.n	8004c46 <_free_r+0x22>
 8004cb0:	bd38      	pop	{r3, r4, r5, pc}
 8004cb2:	bf00      	nop
 8004cb4:	200022e8 	.word	0x200022e8

08004cb8 <sbrk_aligned>:
 8004cb8:	b570      	push	{r4, r5, r6, lr}
 8004cba:	4e0f      	ldr	r6, [pc, #60]	@ (8004cf8 <sbrk_aligned+0x40>)
 8004cbc:	460c      	mov	r4, r1
 8004cbe:	6831      	ldr	r1, [r6, #0]
 8004cc0:	4605      	mov	r5, r0
 8004cc2:	b911      	cbnz	r1, 8004cca <sbrk_aligned+0x12>
 8004cc4:	f000 fca6 	bl	8005614 <_sbrk_r>
 8004cc8:	6030      	str	r0, [r6, #0]
 8004cca:	4621      	mov	r1, r4
 8004ccc:	4628      	mov	r0, r5
 8004cce:	f000 fca1 	bl	8005614 <_sbrk_r>
 8004cd2:	1c43      	adds	r3, r0, #1
 8004cd4:	d103      	bne.n	8004cde <sbrk_aligned+0x26>
 8004cd6:	f04f 34ff 	mov.w	r4, #4294967295
 8004cda:	4620      	mov	r0, r4
 8004cdc:	bd70      	pop	{r4, r5, r6, pc}
 8004cde:	1cc4      	adds	r4, r0, #3
 8004ce0:	f024 0403 	bic.w	r4, r4, #3
 8004ce4:	42a0      	cmp	r0, r4
 8004ce6:	d0f8      	beq.n	8004cda <sbrk_aligned+0x22>
 8004ce8:	1a21      	subs	r1, r4, r0
 8004cea:	4628      	mov	r0, r5
 8004cec:	f000 fc92 	bl	8005614 <_sbrk_r>
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	d1f2      	bne.n	8004cda <sbrk_aligned+0x22>
 8004cf4:	e7ef      	b.n	8004cd6 <sbrk_aligned+0x1e>
 8004cf6:	bf00      	nop
 8004cf8:	200022e4 	.word	0x200022e4

08004cfc <_malloc_r>:
 8004cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d00:	1ccd      	adds	r5, r1, #3
 8004d02:	f025 0503 	bic.w	r5, r5, #3
 8004d06:	3508      	adds	r5, #8
 8004d08:	2d0c      	cmp	r5, #12
 8004d0a:	bf38      	it	cc
 8004d0c:	250c      	movcc	r5, #12
 8004d0e:	2d00      	cmp	r5, #0
 8004d10:	4606      	mov	r6, r0
 8004d12:	db01      	blt.n	8004d18 <_malloc_r+0x1c>
 8004d14:	42a9      	cmp	r1, r5
 8004d16:	d904      	bls.n	8004d22 <_malloc_r+0x26>
 8004d18:	230c      	movs	r3, #12
 8004d1a:	6033      	str	r3, [r6, #0]
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004df8 <_malloc_r+0xfc>
 8004d26:	f000 f869 	bl	8004dfc <__malloc_lock>
 8004d2a:	f8d8 3000 	ldr.w	r3, [r8]
 8004d2e:	461c      	mov	r4, r3
 8004d30:	bb44      	cbnz	r4, 8004d84 <_malloc_r+0x88>
 8004d32:	4629      	mov	r1, r5
 8004d34:	4630      	mov	r0, r6
 8004d36:	f7ff ffbf 	bl	8004cb8 <sbrk_aligned>
 8004d3a:	1c43      	adds	r3, r0, #1
 8004d3c:	4604      	mov	r4, r0
 8004d3e:	d158      	bne.n	8004df2 <_malloc_r+0xf6>
 8004d40:	f8d8 4000 	ldr.w	r4, [r8]
 8004d44:	4627      	mov	r7, r4
 8004d46:	2f00      	cmp	r7, #0
 8004d48:	d143      	bne.n	8004dd2 <_malloc_r+0xd6>
 8004d4a:	2c00      	cmp	r4, #0
 8004d4c:	d04b      	beq.n	8004de6 <_malloc_r+0xea>
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	4639      	mov	r1, r7
 8004d52:	4630      	mov	r0, r6
 8004d54:	eb04 0903 	add.w	r9, r4, r3
 8004d58:	f000 fc5c 	bl	8005614 <_sbrk_r>
 8004d5c:	4581      	cmp	r9, r0
 8004d5e:	d142      	bne.n	8004de6 <_malloc_r+0xea>
 8004d60:	6821      	ldr	r1, [r4, #0]
 8004d62:	1a6d      	subs	r5, r5, r1
 8004d64:	4629      	mov	r1, r5
 8004d66:	4630      	mov	r0, r6
 8004d68:	f7ff ffa6 	bl	8004cb8 <sbrk_aligned>
 8004d6c:	3001      	adds	r0, #1
 8004d6e:	d03a      	beq.n	8004de6 <_malloc_r+0xea>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	442b      	add	r3, r5
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	f8d8 3000 	ldr.w	r3, [r8]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	bb62      	cbnz	r2, 8004dd8 <_malloc_r+0xdc>
 8004d7e:	f8c8 7000 	str.w	r7, [r8]
 8004d82:	e00f      	b.n	8004da4 <_malloc_r+0xa8>
 8004d84:	6822      	ldr	r2, [r4, #0]
 8004d86:	1b52      	subs	r2, r2, r5
 8004d88:	d420      	bmi.n	8004dcc <_malloc_r+0xd0>
 8004d8a:	2a0b      	cmp	r2, #11
 8004d8c:	d917      	bls.n	8004dbe <_malloc_r+0xc2>
 8004d8e:	1961      	adds	r1, r4, r5
 8004d90:	42a3      	cmp	r3, r4
 8004d92:	6025      	str	r5, [r4, #0]
 8004d94:	bf18      	it	ne
 8004d96:	6059      	strne	r1, [r3, #4]
 8004d98:	6863      	ldr	r3, [r4, #4]
 8004d9a:	bf08      	it	eq
 8004d9c:	f8c8 1000 	streq.w	r1, [r8]
 8004da0:	5162      	str	r2, [r4, r5]
 8004da2:	604b      	str	r3, [r1, #4]
 8004da4:	4630      	mov	r0, r6
 8004da6:	f000 f82f 	bl	8004e08 <__malloc_unlock>
 8004daa:	f104 000b 	add.w	r0, r4, #11
 8004dae:	1d23      	adds	r3, r4, #4
 8004db0:	f020 0007 	bic.w	r0, r0, #7
 8004db4:	1ac2      	subs	r2, r0, r3
 8004db6:	bf1c      	itt	ne
 8004db8:	1a1b      	subne	r3, r3, r0
 8004dba:	50a3      	strne	r3, [r4, r2]
 8004dbc:	e7af      	b.n	8004d1e <_malloc_r+0x22>
 8004dbe:	6862      	ldr	r2, [r4, #4]
 8004dc0:	42a3      	cmp	r3, r4
 8004dc2:	bf0c      	ite	eq
 8004dc4:	f8c8 2000 	streq.w	r2, [r8]
 8004dc8:	605a      	strne	r2, [r3, #4]
 8004dca:	e7eb      	b.n	8004da4 <_malloc_r+0xa8>
 8004dcc:	4623      	mov	r3, r4
 8004dce:	6864      	ldr	r4, [r4, #4]
 8004dd0:	e7ae      	b.n	8004d30 <_malloc_r+0x34>
 8004dd2:	463c      	mov	r4, r7
 8004dd4:	687f      	ldr	r7, [r7, #4]
 8004dd6:	e7b6      	b.n	8004d46 <_malloc_r+0x4a>
 8004dd8:	461a      	mov	r2, r3
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	42a3      	cmp	r3, r4
 8004dde:	d1fb      	bne.n	8004dd8 <_malloc_r+0xdc>
 8004de0:	2300      	movs	r3, #0
 8004de2:	6053      	str	r3, [r2, #4]
 8004de4:	e7de      	b.n	8004da4 <_malloc_r+0xa8>
 8004de6:	230c      	movs	r3, #12
 8004de8:	6033      	str	r3, [r6, #0]
 8004dea:	4630      	mov	r0, r6
 8004dec:	f000 f80c 	bl	8004e08 <__malloc_unlock>
 8004df0:	e794      	b.n	8004d1c <_malloc_r+0x20>
 8004df2:	6005      	str	r5, [r0, #0]
 8004df4:	e7d6      	b.n	8004da4 <_malloc_r+0xa8>
 8004df6:	bf00      	nop
 8004df8:	200022e8 	.word	0x200022e8

08004dfc <__malloc_lock>:
 8004dfc:	4801      	ldr	r0, [pc, #4]	@ (8004e04 <__malloc_lock+0x8>)
 8004dfe:	f7ff bf0e 	b.w	8004c1e <__retarget_lock_acquire_recursive>
 8004e02:	bf00      	nop
 8004e04:	200022e0 	.word	0x200022e0

08004e08 <__malloc_unlock>:
 8004e08:	4801      	ldr	r0, [pc, #4]	@ (8004e10 <__malloc_unlock+0x8>)
 8004e0a:	f7ff bf09 	b.w	8004c20 <__retarget_lock_release_recursive>
 8004e0e:	bf00      	nop
 8004e10:	200022e0 	.word	0x200022e0

08004e14 <__sfputc_r>:
 8004e14:	6893      	ldr	r3, [r2, #8]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	b410      	push	{r4}
 8004e1c:	6093      	str	r3, [r2, #8]
 8004e1e:	da08      	bge.n	8004e32 <__sfputc_r+0x1e>
 8004e20:	6994      	ldr	r4, [r2, #24]
 8004e22:	42a3      	cmp	r3, r4
 8004e24:	db01      	blt.n	8004e2a <__sfputc_r+0x16>
 8004e26:	290a      	cmp	r1, #10
 8004e28:	d103      	bne.n	8004e32 <__sfputc_r+0x1e>
 8004e2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e2e:	f7ff bde8 	b.w	8004a02 <__swbuf_r>
 8004e32:	6813      	ldr	r3, [r2, #0]
 8004e34:	1c58      	adds	r0, r3, #1
 8004e36:	6010      	str	r0, [r2, #0]
 8004e38:	7019      	strb	r1, [r3, #0]
 8004e3a:	4608      	mov	r0, r1
 8004e3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <__sfputs_r>:
 8004e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e44:	4606      	mov	r6, r0
 8004e46:	460f      	mov	r7, r1
 8004e48:	4614      	mov	r4, r2
 8004e4a:	18d5      	adds	r5, r2, r3
 8004e4c:	42ac      	cmp	r4, r5
 8004e4e:	d101      	bne.n	8004e54 <__sfputs_r+0x12>
 8004e50:	2000      	movs	r0, #0
 8004e52:	e007      	b.n	8004e64 <__sfputs_r+0x22>
 8004e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e58:	463a      	mov	r2, r7
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f7ff ffda 	bl	8004e14 <__sfputc_r>
 8004e60:	1c43      	adds	r3, r0, #1
 8004e62:	d1f3      	bne.n	8004e4c <__sfputs_r+0xa>
 8004e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e68 <_vfiprintf_r>:
 8004e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6c:	460d      	mov	r5, r1
 8004e6e:	b09d      	sub	sp, #116	@ 0x74
 8004e70:	4614      	mov	r4, r2
 8004e72:	4698      	mov	r8, r3
 8004e74:	4606      	mov	r6, r0
 8004e76:	b118      	cbz	r0, 8004e80 <_vfiprintf_r+0x18>
 8004e78:	6a03      	ldr	r3, [r0, #32]
 8004e7a:	b90b      	cbnz	r3, 8004e80 <_vfiprintf_r+0x18>
 8004e7c:	f7ff fcd8 	bl	8004830 <__sinit>
 8004e80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e82:	07d9      	lsls	r1, r3, #31
 8004e84:	d405      	bmi.n	8004e92 <_vfiprintf_r+0x2a>
 8004e86:	89ab      	ldrh	r3, [r5, #12]
 8004e88:	059a      	lsls	r2, r3, #22
 8004e8a:	d402      	bmi.n	8004e92 <_vfiprintf_r+0x2a>
 8004e8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e8e:	f7ff fec6 	bl	8004c1e <__retarget_lock_acquire_recursive>
 8004e92:	89ab      	ldrh	r3, [r5, #12]
 8004e94:	071b      	lsls	r3, r3, #28
 8004e96:	d501      	bpl.n	8004e9c <_vfiprintf_r+0x34>
 8004e98:	692b      	ldr	r3, [r5, #16]
 8004e9a:	b99b      	cbnz	r3, 8004ec4 <_vfiprintf_r+0x5c>
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	f7ff fdee 	bl	8004a80 <__swsetup_r>
 8004ea4:	b170      	cbz	r0, 8004ec4 <_vfiprintf_r+0x5c>
 8004ea6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ea8:	07dc      	lsls	r4, r3, #31
 8004eaa:	d504      	bpl.n	8004eb6 <_vfiprintf_r+0x4e>
 8004eac:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb0:	b01d      	add	sp, #116	@ 0x74
 8004eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eb6:	89ab      	ldrh	r3, [r5, #12]
 8004eb8:	0598      	lsls	r0, r3, #22
 8004eba:	d4f7      	bmi.n	8004eac <_vfiprintf_r+0x44>
 8004ebc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ebe:	f7ff feaf 	bl	8004c20 <__retarget_lock_release_recursive>
 8004ec2:	e7f3      	b.n	8004eac <_vfiprintf_r+0x44>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ec8:	2320      	movs	r3, #32
 8004eca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ece:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ed2:	2330      	movs	r3, #48	@ 0x30
 8004ed4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005084 <_vfiprintf_r+0x21c>
 8004ed8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004edc:	f04f 0901 	mov.w	r9, #1
 8004ee0:	4623      	mov	r3, r4
 8004ee2:	469a      	mov	sl, r3
 8004ee4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ee8:	b10a      	cbz	r2, 8004eee <_vfiprintf_r+0x86>
 8004eea:	2a25      	cmp	r2, #37	@ 0x25
 8004eec:	d1f9      	bne.n	8004ee2 <_vfiprintf_r+0x7a>
 8004eee:	ebba 0b04 	subs.w	fp, sl, r4
 8004ef2:	d00b      	beq.n	8004f0c <_vfiprintf_r+0xa4>
 8004ef4:	465b      	mov	r3, fp
 8004ef6:	4622      	mov	r2, r4
 8004ef8:	4629      	mov	r1, r5
 8004efa:	4630      	mov	r0, r6
 8004efc:	f7ff ffa1 	bl	8004e42 <__sfputs_r>
 8004f00:	3001      	adds	r0, #1
 8004f02:	f000 80a7 	beq.w	8005054 <_vfiprintf_r+0x1ec>
 8004f06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f08:	445a      	add	r2, fp
 8004f0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 809f 	beq.w	8005054 <_vfiprintf_r+0x1ec>
 8004f16:	2300      	movs	r3, #0
 8004f18:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f20:	f10a 0a01 	add.w	sl, sl, #1
 8004f24:	9304      	str	r3, [sp, #16]
 8004f26:	9307      	str	r3, [sp, #28]
 8004f28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f2e:	4654      	mov	r4, sl
 8004f30:	2205      	movs	r2, #5
 8004f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f36:	4853      	ldr	r0, [pc, #332]	@ (8005084 <_vfiprintf_r+0x21c>)
 8004f38:	f7fb f972 	bl	8000220 <memchr>
 8004f3c:	9a04      	ldr	r2, [sp, #16]
 8004f3e:	b9d8      	cbnz	r0, 8004f78 <_vfiprintf_r+0x110>
 8004f40:	06d1      	lsls	r1, r2, #27
 8004f42:	bf44      	itt	mi
 8004f44:	2320      	movmi	r3, #32
 8004f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f4a:	0713      	lsls	r3, r2, #28
 8004f4c:	bf44      	itt	mi
 8004f4e:	232b      	movmi	r3, #43	@ 0x2b
 8004f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f54:	f89a 3000 	ldrb.w	r3, [sl]
 8004f58:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f5a:	d015      	beq.n	8004f88 <_vfiprintf_r+0x120>
 8004f5c:	9a07      	ldr	r2, [sp, #28]
 8004f5e:	4654      	mov	r4, sl
 8004f60:	2000      	movs	r0, #0
 8004f62:	f04f 0c0a 	mov.w	ip, #10
 8004f66:	4621      	mov	r1, r4
 8004f68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f6c:	3b30      	subs	r3, #48	@ 0x30
 8004f6e:	2b09      	cmp	r3, #9
 8004f70:	d94b      	bls.n	800500a <_vfiprintf_r+0x1a2>
 8004f72:	b1b0      	cbz	r0, 8004fa2 <_vfiprintf_r+0x13a>
 8004f74:	9207      	str	r2, [sp, #28]
 8004f76:	e014      	b.n	8004fa2 <_vfiprintf_r+0x13a>
 8004f78:	eba0 0308 	sub.w	r3, r0, r8
 8004f7c:	fa09 f303 	lsl.w	r3, r9, r3
 8004f80:	4313      	orrs	r3, r2
 8004f82:	9304      	str	r3, [sp, #16]
 8004f84:	46a2      	mov	sl, r4
 8004f86:	e7d2      	b.n	8004f2e <_vfiprintf_r+0xc6>
 8004f88:	9b03      	ldr	r3, [sp, #12]
 8004f8a:	1d19      	adds	r1, r3, #4
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	9103      	str	r1, [sp, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	bfbb      	ittet	lt
 8004f94:	425b      	neglt	r3, r3
 8004f96:	f042 0202 	orrlt.w	r2, r2, #2
 8004f9a:	9307      	strge	r3, [sp, #28]
 8004f9c:	9307      	strlt	r3, [sp, #28]
 8004f9e:	bfb8      	it	lt
 8004fa0:	9204      	strlt	r2, [sp, #16]
 8004fa2:	7823      	ldrb	r3, [r4, #0]
 8004fa4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fa6:	d10a      	bne.n	8004fbe <_vfiprintf_r+0x156>
 8004fa8:	7863      	ldrb	r3, [r4, #1]
 8004faa:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fac:	d132      	bne.n	8005014 <_vfiprintf_r+0x1ac>
 8004fae:	9b03      	ldr	r3, [sp, #12]
 8004fb0:	1d1a      	adds	r2, r3, #4
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	9203      	str	r2, [sp, #12]
 8004fb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004fba:	3402      	adds	r4, #2
 8004fbc:	9305      	str	r3, [sp, #20]
 8004fbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005094 <_vfiprintf_r+0x22c>
 8004fc2:	7821      	ldrb	r1, [r4, #0]
 8004fc4:	2203      	movs	r2, #3
 8004fc6:	4650      	mov	r0, sl
 8004fc8:	f7fb f92a 	bl	8000220 <memchr>
 8004fcc:	b138      	cbz	r0, 8004fde <_vfiprintf_r+0x176>
 8004fce:	9b04      	ldr	r3, [sp, #16]
 8004fd0:	eba0 000a 	sub.w	r0, r0, sl
 8004fd4:	2240      	movs	r2, #64	@ 0x40
 8004fd6:	4082      	lsls	r2, r0
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	3401      	adds	r4, #1
 8004fdc:	9304      	str	r3, [sp, #16]
 8004fde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fe2:	4829      	ldr	r0, [pc, #164]	@ (8005088 <_vfiprintf_r+0x220>)
 8004fe4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fe8:	2206      	movs	r2, #6
 8004fea:	f7fb f919 	bl	8000220 <memchr>
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	d03f      	beq.n	8005072 <_vfiprintf_r+0x20a>
 8004ff2:	4b26      	ldr	r3, [pc, #152]	@ (800508c <_vfiprintf_r+0x224>)
 8004ff4:	bb1b      	cbnz	r3, 800503e <_vfiprintf_r+0x1d6>
 8004ff6:	9b03      	ldr	r3, [sp, #12]
 8004ff8:	3307      	adds	r3, #7
 8004ffa:	f023 0307 	bic.w	r3, r3, #7
 8004ffe:	3308      	adds	r3, #8
 8005000:	9303      	str	r3, [sp, #12]
 8005002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005004:	443b      	add	r3, r7
 8005006:	9309      	str	r3, [sp, #36]	@ 0x24
 8005008:	e76a      	b.n	8004ee0 <_vfiprintf_r+0x78>
 800500a:	fb0c 3202 	mla	r2, ip, r2, r3
 800500e:	460c      	mov	r4, r1
 8005010:	2001      	movs	r0, #1
 8005012:	e7a8      	b.n	8004f66 <_vfiprintf_r+0xfe>
 8005014:	2300      	movs	r3, #0
 8005016:	3401      	adds	r4, #1
 8005018:	9305      	str	r3, [sp, #20]
 800501a:	4619      	mov	r1, r3
 800501c:	f04f 0c0a 	mov.w	ip, #10
 8005020:	4620      	mov	r0, r4
 8005022:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005026:	3a30      	subs	r2, #48	@ 0x30
 8005028:	2a09      	cmp	r2, #9
 800502a:	d903      	bls.n	8005034 <_vfiprintf_r+0x1cc>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0c6      	beq.n	8004fbe <_vfiprintf_r+0x156>
 8005030:	9105      	str	r1, [sp, #20]
 8005032:	e7c4      	b.n	8004fbe <_vfiprintf_r+0x156>
 8005034:	fb0c 2101 	mla	r1, ip, r1, r2
 8005038:	4604      	mov	r4, r0
 800503a:	2301      	movs	r3, #1
 800503c:	e7f0      	b.n	8005020 <_vfiprintf_r+0x1b8>
 800503e:	ab03      	add	r3, sp, #12
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	462a      	mov	r2, r5
 8005044:	4b12      	ldr	r3, [pc, #72]	@ (8005090 <_vfiprintf_r+0x228>)
 8005046:	a904      	add	r1, sp, #16
 8005048:	4630      	mov	r0, r6
 800504a:	f3af 8000 	nop.w
 800504e:	4607      	mov	r7, r0
 8005050:	1c78      	adds	r0, r7, #1
 8005052:	d1d6      	bne.n	8005002 <_vfiprintf_r+0x19a>
 8005054:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005056:	07d9      	lsls	r1, r3, #31
 8005058:	d405      	bmi.n	8005066 <_vfiprintf_r+0x1fe>
 800505a:	89ab      	ldrh	r3, [r5, #12]
 800505c:	059a      	lsls	r2, r3, #22
 800505e:	d402      	bmi.n	8005066 <_vfiprintf_r+0x1fe>
 8005060:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005062:	f7ff fddd 	bl	8004c20 <__retarget_lock_release_recursive>
 8005066:	89ab      	ldrh	r3, [r5, #12]
 8005068:	065b      	lsls	r3, r3, #25
 800506a:	f53f af1f 	bmi.w	8004eac <_vfiprintf_r+0x44>
 800506e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005070:	e71e      	b.n	8004eb0 <_vfiprintf_r+0x48>
 8005072:	ab03      	add	r3, sp, #12
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	462a      	mov	r2, r5
 8005078:	4b05      	ldr	r3, [pc, #20]	@ (8005090 <_vfiprintf_r+0x228>)
 800507a:	a904      	add	r1, sp, #16
 800507c:	4630      	mov	r0, r6
 800507e:	f000 f879 	bl	8005174 <_printf_i>
 8005082:	e7e4      	b.n	800504e <_vfiprintf_r+0x1e6>
 8005084:	080056dc 	.word	0x080056dc
 8005088:	080056e6 	.word	0x080056e6
 800508c:	00000000 	.word	0x00000000
 8005090:	08004e43 	.word	0x08004e43
 8005094:	080056e2 	.word	0x080056e2

08005098 <_printf_common>:
 8005098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800509c:	4616      	mov	r6, r2
 800509e:	4698      	mov	r8, r3
 80050a0:	688a      	ldr	r2, [r1, #8]
 80050a2:	690b      	ldr	r3, [r1, #16]
 80050a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050a8:	4293      	cmp	r3, r2
 80050aa:	bfb8      	it	lt
 80050ac:	4613      	movlt	r3, r2
 80050ae:	6033      	str	r3, [r6, #0]
 80050b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050b4:	4607      	mov	r7, r0
 80050b6:	460c      	mov	r4, r1
 80050b8:	b10a      	cbz	r2, 80050be <_printf_common+0x26>
 80050ba:	3301      	adds	r3, #1
 80050bc:	6033      	str	r3, [r6, #0]
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	0699      	lsls	r1, r3, #26
 80050c2:	bf42      	ittt	mi
 80050c4:	6833      	ldrmi	r3, [r6, #0]
 80050c6:	3302      	addmi	r3, #2
 80050c8:	6033      	strmi	r3, [r6, #0]
 80050ca:	6825      	ldr	r5, [r4, #0]
 80050cc:	f015 0506 	ands.w	r5, r5, #6
 80050d0:	d106      	bne.n	80050e0 <_printf_common+0x48>
 80050d2:	f104 0a19 	add.w	sl, r4, #25
 80050d6:	68e3      	ldr	r3, [r4, #12]
 80050d8:	6832      	ldr	r2, [r6, #0]
 80050da:	1a9b      	subs	r3, r3, r2
 80050dc:	42ab      	cmp	r3, r5
 80050de:	dc26      	bgt.n	800512e <_printf_common+0x96>
 80050e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050e4:	6822      	ldr	r2, [r4, #0]
 80050e6:	3b00      	subs	r3, #0
 80050e8:	bf18      	it	ne
 80050ea:	2301      	movne	r3, #1
 80050ec:	0692      	lsls	r2, r2, #26
 80050ee:	d42b      	bmi.n	8005148 <_printf_common+0xb0>
 80050f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050f4:	4641      	mov	r1, r8
 80050f6:	4638      	mov	r0, r7
 80050f8:	47c8      	blx	r9
 80050fa:	3001      	adds	r0, #1
 80050fc:	d01e      	beq.n	800513c <_printf_common+0xa4>
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	6922      	ldr	r2, [r4, #16]
 8005102:	f003 0306 	and.w	r3, r3, #6
 8005106:	2b04      	cmp	r3, #4
 8005108:	bf02      	ittt	eq
 800510a:	68e5      	ldreq	r5, [r4, #12]
 800510c:	6833      	ldreq	r3, [r6, #0]
 800510e:	1aed      	subeq	r5, r5, r3
 8005110:	68a3      	ldr	r3, [r4, #8]
 8005112:	bf0c      	ite	eq
 8005114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005118:	2500      	movne	r5, #0
 800511a:	4293      	cmp	r3, r2
 800511c:	bfc4      	itt	gt
 800511e:	1a9b      	subgt	r3, r3, r2
 8005120:	18ed      	addgt	r5, r5, r3
 8005122:	2600      	movs	r6, #0
 8005124:	341a      	adds	r4, #26
 8005126:	42b5      	cmp	r5, r6
 8005128:	d11a      	bne.n	8005160 <_printf_common+0xc8>
 800512a:	2000      	movs	r0, #0
 800512c:	e008      	b.n	8005140 <_printf_common+0xa8>
 800512e:	2301      	movs	r3, #1
 8005130:	4652      	mov	r2, sl
 8005132:	4641      	mov	r1, r8
 8005134:	4638      	mov	r0, r7
 8005136:	47c8      	blx	r9
 8005138:	3001      	adds	r0, #1
 800513a:	d103      	bne.n	8005144 <_printf_common+0xac>
 800513c:	f04f 30ff 	mov.w	r0, #4294967295
 8005140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005144:	3501      	adds	r5, #1
 8005146:	e7c6      	b.n	80050d6 <_printf_common+0x3e>
 8005148:	18e1      	adds	r1, r4, r3
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	2030      	movs	r0, #48	@ 0x30
 800514e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005152:	4422      	add	r2, r4
 8005154:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005158:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800515c:	3302      	adds	r3, #2
 800515e:	e7c7      	b.n	80050f0 <_printf_common+0x58>
 8005160:	2301      	movs	r3, #1
 8005162:	4622      	mov	r2, r4
 8005164:	4641      	mov	r1, r8
 8005166:	4638      	mov	r0, r7
 8005168:	47c8      	blx	r9
 800516a:	3001      	adds	r0, #1
 800516c:	d0e6      	beq.n	800513c <_printf_common+0xa4>
 800516e:	3601      	adds	r6, #1
 8005170:	e7d9      	b.n	8005126 <_printf_common+0x8e>
	...

08005174 <_printf_i>:
 8005174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005178:	7e0f      	ldrb	r7, [r1, #24]
 800517a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800517c:	2f78      	cmp	r7, #120	@ 0x78
 800517e:	4691      	mov	r9, r2
 8005180:	4680      	mov	r8, r0
 8005182:	460c      	mov	r4, r1
 8005184:	469a      	mov	sl, r3
 8005186:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800518a:	d807      	bhi.n	800519c <_printf_i+0x28>
 800518c:	2f62      	cmp	r7, #98	@ 0x62
 800518e:	d80a      	bhi.n	80051a6 <_printf_i+0x32>
 8005190:	2f00      	cmp	r7, #0
 8005192:	f000 80d2 	beq.w	800533a <_printf_i+0x1c6>
 8005196:	2f58      	cmp	r7, #88	@ 0x58
 8005198:	f000 80b9 	beq.w	800530e <_printf_i+0x19a>
 800519c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80051a4:	e03a      	b.n	800521c <_printf_i+0xa8>
 80051a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80051aa:	2b15      	cmp	r3, #21
 80051ac:	d8f6      	bhi.n	800519c <_printf_i+0x28>
 80051ae:	a101      	add	r1, pc, #4	@ (adr r1, 80051b4 <_printf_i+0x40>)
 80051b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051b4:	0800520d 	.word	0x0800520d
 80051b8:	08005221 	.word	0x08005221
 80051bc:	0800519d 	.word	0x0800519d
 80051c0:	0800519d 	.word	0x0800519d
 80051c4:	0800519d 	.word	0x0800519d
 80051c8:	0800519d 	.word	0x0800519d
 80051cc:	08005221 	.word	0x08005221
 80051d0:	0800519d 	.word	0x0800519d
 80051d4:	0800519d 	.word	0x0800519d
 80051d8:	0800519d 	.word	0x0800519d
 80051dc:	0800519d 	.word	0x0800519d
 80051e0:	08005321 	.word	0x08005321
 80051e4:	0800524b 	.word	0x0800524b
 80051e8:	080052db 	.word	0x080052db
 80051ec:	0800519d 	.word	0x0800519d
 80051f0:	0800519d 	.word	0x0800519d
 80051f4:	08005343 	.word	0x08005343
 80051f8:	0800519d 	.word	0x0800519d
 80051fc:	0800524b 	.word	0x0800524b
 8005200:	0800519d 	.word	0x0800519d
 8005204:	0800519d 	.word	0x0800519d
 8005208:	080052e3 	.word	0x080052e3
 800520c:	6833      	ldr	r3, [r6, #0]
 800520e:	1d1a      	adds	r2, r3, #4
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6032      	str	r2, [r6, #0]
 8005214:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005218:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800521c:	2301      	movs	r3, #1
 800521e:	e09d      	b.n	800535c <_printf_i+0x1e8>
 8005220:	6833      	ldr	r3, [r6, #0]
 8005222:	6820      	ldr	r0, [r4, #0]
 8005224:	1d19      	adds	r1, r3, #4
 8005226:	6031      	str	r1, [r6, #0]
 8005228:	0606      	lsls	r6, r0, #24
 800522a:	d501      	bpl.n	8005230 <_printf_i+0xbc>
 800522c:	681d      	ldr	r5, [r3, #0]
 800522e:	e003      	b.n	8005238 <_printf_i+0xc4>
 8005230:	0645      	lsls	r5, r0, #25
 8005232:	d5fb      	bpl.n	800522c <_printf_i+0xb8>
 8005234:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005238:	2d00      	cmp	r5, #0
 800523a:	da03      	bge.n	8005244 <_printf_i+0xd0>
 800523c:	232d      	movs	r3, #45	@ 0x2d
 800523e:	426d      	negs	r5, r5
 8005240:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005244:	4859      	ldr	r0, [pc, #356]	@ (80053ac <_printf_i+0x238>)
 8005246:	230a      	movs	r3, #10
 8005248:	e011      	b.n	800526e <_printf_i+0xfa>
 800524a:	6821      	ldr	r1, [r4, #0]
 800524c:	6833      	ldr	r3, [r6, #0]
 800524e:	0608      	lsls	r0, r1, #24
 8005250:	f853 5b04 	ldr.w	r5, [r3], #4
 8005254:	d402      	bmi.n	800525c <_printf_i+0xe8>
 8005256:	0649      	lsls	r1, r1, #25
 8005258:	bf48      	it	mi
 800525a:	b2ad      	uxthmi	r5, r5
 800525c:	2f6f      	cmp	r7, #111	@ 0x6f
 800525e:	4853      	ldr	r0, [pc, #332]	@ (80053ac <_printf_i+0x238>)
 8005260:	6033      	str	r3, [r6, #0]
 8005262:	bf14      	ite	ne
 8005264:	230a      	movne	r3, #10
 8005266:	2308      	moveq	r3, #8
 8005268:	2100      	movs	r1, #0
 800526a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800526e:	6866      	ldr	r6, [r4, #4]
 8005270:	60a6      	str	r6, [r4, #8]
 8005272:	2e00      	cmp	r6, #0
 8005274:	bfa2      	ittt	ge
 8005276:	6821      	ldrge	r1, [r4, #0]
 8005278:	f021 0104 	bicge.w	r1, r1, #4
 800527c:	6021      	strge	r1, [r4, #0]
 800527e:	b90d      	cbnz	r5, 8005284 <_printf_i+0x110>
 8005280:	2e00      	cmp	r6, #0
 8005282:	d04b      	beq.n	800531c <_printf_i+0x1a8>
 8005284:	4616      	mov	r6, r2
 8005286:	fbb5 f1f3 	udiv	r1, r5, r3
 800528a:	fb03 5711 	mls	r7, r3, r1, r5
 800528e:	5dc7      	ldrb	r7, [r0, r7]
 8005290:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005294:	462f      	mov	r7, r5
 8005296:	42bb      	cmp	r3, r7
 8005298:	460d      	mov	r5, r1
 800529a:	d9f4      	bls.n	8005286 <_printf_i+0x112>
 800529c:	2b08      	cmp	r3, #8
 800529e:	d10b      	bne.n	80052b8 <_printf_i+0x144>
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	07df      	lsls	r7, r3, #31
 80052a4:	d508      	bpl.n	80052b8 <_printf_i+0x144>
 80052a6:	6923      	ldr	r3, [r4, #16]
 80052a8:	6861      	ldr	r1, [r4, #4]
 80052aa:	4299      	cmp	r1, r3
 80052ac:	bfde      	ittt	le
 80052ae:	2330      	movle	r3, #48	@ 0x30
 80052b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052b8:	1b92      	subs	r2, r2, r6
 80052ba:	6122      	str	r2, [r4, #16]
 80052bc:	f8cd a000 	str.w	sl, [sp]
 80052c0:	464b      	mov	r3, r9
 80052c2:	aa03      	add	r2, sp, #12
 80052c4:	4621      	mov	r1, r4
 80052c6:	4640      	mov	r0, r8
 80052c8:	f7ff fee6 	bl	8005098 <_printf_common>
 80052cc:	3001      	adds	r0, #1
 80052ce:	d14a      	bne.n	8005366 <_printf_i+0x1f2>
 80052d0:	f04f 30ff 	mov.w	r0, #4294967295
 80052d4:	b004      	add	sp, #16
 80052d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	f043 0320 	orr.w	r3, r3, #32
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	4833      	ldr	r0, [pc, #204]	@ (80053b0 <_printf_i+0x23c>)
 80052e4:	2778      	movs	r7, #120	@ 0x78
 80052e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	6831      	ldr	r1, [r6, #0]
 80052ee:	061f      	lsls	r7, r3, #24
 80052f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80052f4:	d402      	bmi.n	80052fc <_printf_i+0x188>
 80052f6:	065f      	lsls	r7, r3, #25
 80052f8:	bf48      	it	mi
 80052fa:	b2ad      	uxthmi	r5, r5
 80052fc:	6031      	str	r1, [r6, #0]
 80052fe:	07d9      	lsls	r1, r3, #31
 8005300:	bf44      	itt	mi
 8005302:	f043 0320 	orrmi.w	r3, r3, #32
 8005306:	6023      	strmi	r3, [r4, #0]
 8005308:	b11d      	cbz	r5, 8005312 <_printf_i+0x19e>
 800530a:	2310      	movs	r3, #16
 800530c:	e7ac      	b.n	8005268 <_printf_i+0xf4>
 800530e:	4827      	ldr	r0, [pc, #156]	@ (80053ac <_printf_i+0x238>)
 8005310:	e7e9      	b.n	80052e6 <_printf_i+0x172>
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	f023 0320 	bic.w	r3, r3, #32
 8005318:	6023      	str	r3, [r4, #0]
 800531a:	e7f6      	b.n	800530a <_printf_i+0x196>
 800531c:	4616      	mov	r6, r2
 800531e:	e7bd      	b.n	800529c <_printf_i+0x128>
 8005320:	6833      	ldr	r3, [r6, #0]
 8005322:	6825      	ldr	r5, [r4, #0]
 8005324:	6961      	ldr	r1, [r4, #20]
 8005326:	1d18      	adds	r0, r3, #4
 8005328:	6030      	str	r0, [r6, #0]
 800532a:	062e      	lsls	r6, r5, #24
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	d501      	bpl.n	8005334 <_printf_i+0x1c0>
 8005330:	6019      	str	r1, [r3, #0]
 8005332:	e002      	b.n	800533a <_printf_i+0x1c6>
 8005334:	0668      	lsls	r0, r5, #25
 8005336:	d5fb      	bpl.n	8005330 <_printf_i+0x1bc>
 8005338:	8019      	strh	r1, [r3, #0]
 800533a:	2300      	movs	r3, #0
 800533c:	6123      	str	r3, [r4, #16]
 800533e:	4616      	mov	r6, r2
 8005340:	e7bc      	b.n	80052bc <_printf_i+0x148>
 8005342:	6833      	ldr	r3, [r6, #0]
 8005344:	1d1a      	adds	r2, r3, #4
 8005346:	6032      	str	r2, [r6, #0]
 8005348:	681e      	ldr	r6, [r3, #0]
 800534a:	6862      	ldr	r2, [r4, #4]
 800534c:	2100      	movs	r1, #0
 800534e:	4630      	mov	r0, r6
 8005350:	f7fa ff66 	bl	8000220 <memchr>
 8005354:	b108      	cbz	r0, 800535a <_printf_i+0x1e6>
 8005356:	1b80      	subs	r0, r0, r6
 8005358:	6060      	str	r0, [r4, #4]
 800535a:	6863      	ldr	r3, [r4, #4]
 800535c:	6123      	str	r3, [r4, #16]
 800535e:	2300      	movs	r3, #0
 8005360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005364:	e7aa      	b.n	80052bc <_printf_i+0x148>
 8005366:	6923      	ldr	r3, [r4, #16]
 8005368:	4632      	mov	r2, r6
 800536a:	4649      	mov	r1, r9
 800536c:	4640      	mov	r0, r8
 800536e:	47d0      	blx	sl
 8005370:	3001      	adds	r0, #1
 8005372:	d0ad      	beq.n	80052d0 <_printf_i+0x15c>
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	079b      	lsls	r3, r3, #30
 8005378:	d413      	bmi.n	80053a2 <_printf_i+0x22e>
 800537a:	68e0      	ldr	r0, [r4, #12]
 800537c:	9b03      	ldr	r3, [sp, #12]
 800537e:	4298      	cmp	r0, r3
 8005380:	bfb8      	it	lt
 8005382:	4618      	movlt	r0, r3
 8005384:	e7a6      	b.n	80052d4 <_printf_i+0x160>
 8005386:	2301      	movs	r3, #1
 8005388:	4632      	mov	r2, r6
 800538a:	4649      	mov	r1, r9
 800538c:	4640      	mov	r0, r8
 800538e:	47d0      	blx	sl
 8005390:	3001      	adds	r0, #1
 8005392:	d09d      	beq.n	80052d0 <_printf_i+0x15c>
 8005394:	3501      	adds	r5, #1
 8005396:	68e3      	ldr	r3, [r4, #12]
 8005398:	9903      	ldr	r1, [sp, #12]
 800539a:	1a5b      	subs	r3, r3, r1
 800539c:	42ab      	cmp	r3, r5
 800539e:	dcf2      	bgt.n	8005386 <_printf_i+0x212>
 80053a0:	e7eb      	b.n	800537a <_printf_i+0x206>
 80053a2:	2500      	movs	r5, #0
 80053a4:	f104 0619 	add.w	r6, r4, #25
 80053a8:	e7f5      	b.n	8005396 <_printf_i+0x222>
 80053aa:	bf00      	nop
 80053ac:	080056ed 	.word	0x080056ed
 80053b0:	080056fe 	.word	0x080056fe

080053b4 <__sflush_r>:
 80053b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053bc:	0716      	lsls	r6, r2, #28
 80053be:	4605      	mov	r5, r0
 80053c0:	460c      	mov	r4, r1
 80053c2:	d454      	bmi.n	800546e <__sflush_r+0xba>
 80053c4:	684b      	ldr	r3, [r1, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	dc02      	bgt.n	80053d0 <__sflush_r+0x1c>
 80053ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	dd48      	ble.n	8005462 <__sflush_r+0xae>
 80053d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053d2:	2e00      	cmp	r6, #0
 80053d4:	d045      	beq.n	8005462 <__sflush_r+0xae>
 80053d6:	2300      	movs	r3, #0
 80053d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80053dc:	682f      	ldr	r7, [r5, #0]
 80053de:	6a21      	ldr	r1, [r4, #32]
 80053e0:	602b      	str	r3, [r5, #0]
 80053e2:	d030      	beq.n	8005446 <__sflush_r+0x92>
 80053e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80053e6:	89a3      	ldrh	r3, [r4, #12]
 80053e8:	0759      	lsls	r1, r3, #29
 80053ea:	d505      	bpl.n	80053f8 <__sflush_r+0x44>
 80053ec:	6863      	ldr	r3, [r4, #4]
 80053ee:	1ad2      	subs	r2, r2, r3
 80053f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80053f2:	b10b      	cbz	r3, 80053f8 <__sflush_r+0x44>
 80053f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053f6:	1ad2      	subs	r2, r2, r3
 80053f8:	2300      	movs	r3, #0
 80053fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053fc:	6a21      	ldr	r1, [r4, #32]
 80053fe:	4628      	mov	r0, r5
 8005400:	47b0      	blx	r6
 8005402:	1c43      	adds	r3, r0, #1
 8005404:	89a3      	ldrh	r3, [r4, #12]
 8005406:	d106      	bne.n	8005416 <__sflush_r+0x62>
 8005408:	6829      	ldr	r1, [r5, #0]
 800540a:	291d      	cmp	r1, #29
 800540c:	d82b      	bhi.n	8005466 <__sflush_r+0xb2>
 800540e:	4a2a      	ldr	r2, [pc, #168]	@ (80054b8 <__sflush_r+0x104>)
 8005410:	410a      	asrs	r2, r1
 8005412:	07d6      	lsls	r6, r2, #31
 8005414:	d427      	bmi.n	8005466 <__sflush_r+0xb2>
 8005416:	2200      	movs	r2, #0
 8005418:	6062      	str	r2, [r4, #4]
 800541a:	04d9      	lsls	r1, r3, #19
 800541c:	6922      	ldr	r2, [r4, #16]
 800541e:	6022      	str	r2, [r4, #0]
 8005420:	d504      	bpl.n	800542c <__sflush_r+0x78>
 8005422:	1c42      	adds	r2, r0, #1
 8005424:	d101      	bne.n	800542a <__sflush_r+0x76>
 8005426:	682b      	ldr	r3, [r5, #0]
 8005428:	b903      	cbnz	r3, 800542c <__sflush_r+0x78>
 800542a:	6560      	str	r0, [r4, #84]	@ 0x54
 800542c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800542e:	602f      	str	r7, [r5, #0]
 8005430:	b1b9      	cbz	r1, 8005462 <__sflush_r+0xae>
 8005432:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005436:	4299      	cmp	r1, r3
 8005438:	d002      	beq.n	8005440 <__sflush_r+0x8c>
 800543a:	4628      	mov	r0, r5
 800543c:	f7ff fbf2 	bl	8004c24 <_free_r>
 8005440:	2300      	movs	r3, #0
 8005442:	6363      	str	r3, [r4, #52]	@ 0x34
 8005444:	e00d      	b.n	8005462 <__sflush_r+0xae>
 8005446:	2301      	movs	r3, #1
 8005448:	4628      	mov	r0, r5
 800544a:	47b0      	blx	r6
 800544c:	4602      	mov	r2, r0
 800544e:	1c50      	adds	r0, r2, #1
 8005450:	d1c9      	bne.n	80053e6 <__sflush_r+0x32>
 8005452:	682b      	ldr	r3, [r5, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0c6      	beq.n	80053e6 <__sflush_r+0x32>
 8005458:	2b1d      	cmp	r3, #29
 800545a:	d001      	beq.n	8005460 <__sflush_r+0xac>
 800545c:	2b16      	cmp	r3, #22
 800545e:	d11e      	bne.n	800549e <__sflush_r+0xea>
 8005460:	602f      	str	r7, [r5, #0]
 8005462:	2000      	movs	r0, #0
 8005464:	e022      	b.n	80054ac <__sflush_r+0xf8>
 8005466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800546a:	b21b      	sxth	r3, r3
 800546c:	e01b      	b.n	80054a6 <__sflush_r+0xf2>
 800546e:	690f      	ldr	r7, [r1, #16]
 8005470:	2f00      	cmp	r7, #0
 8005472:	d0f6      	beq.n	8005462 <__sflush_r+0xae>
 8005474:	0793      	lsls	r3, r2, #30
 8005476:	680e      	ldr	r6, [r1, #0]
 8005478:	bf08      	it	eq
 800547a:	694b      	ldreq	r3, [r1, #20]
 800547c:	600f      	str	r7, [r1, #0]
 800547e:	bf18      	it	ne
 8005480:	2300      	movne	r3, #0
 8005482:	eba6 0807 	sub.w	r8, r6, r7
 8005486:	608b      	str	r3, [r1, #8]
 8005488:	f1b8 0f00 	cmp.w	r8, #0
 800548c:	dde9      	ble.n	8005462 <__sflush_r+0xae>
 800548e:	6a21      	ldr	r1, [r4, #32]
 8005490:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005492:	4643      	mov	r3, r8
 8005494:	463a      	mov	r2, r7
 8005496:	4628      	mov	r0, r5
 8005498:	47b0      	blx	r6
 800549a:	2800      	cmp	r0, #0
 800549c:	dc08      	bgt.n	80054b0 <__sflush_r+0xfc>
 800549e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054a6:	81a3      	strh	r3, [r4, #12]
 80054a8:	f04f 30ff 	mov.w	r0, #4294967295
 80054ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054b0:	4407      	add	r7, r0
 80054b2:	eba8 0800 	sub.w	r8, r8, r0
 80054b6:	e7e7      	b.n	8005488 <__sflush_r+0xd4>
 80054b8:	dfbffffe 	.word	0xdfbffffe

080054bc <_fflush_r>:
 80054bc:	b538      	push	{r3, r4, r5, lr}
 80054be:	690b      	ldr	r3, [r1, #16]
 80054c0:	4605      	mov	r5, r0
 80054c2:	460c      	mov	r4, r1
 80054c4:	b913      	cbnz	r3, 80054cc <_fflush_r+0x10>
 80054c6:	2500      	movs	r5, #0
 80054c8:	4628      	mov	r0, r5
 80054ca:	bd38      	pop	{r3, r4, r5, pc}
 80054cc:	b118      	cbz	r0, 80054d6 <_fflush_r+0x1a>
 80054ce:	6a03      	ldr	r3, [r0, #32]
 80054d0:	b90b      	cbnz	r3, 80054d6 <_fflush_r+0x1a>
 80054d2:	f7ff f9ad 	bl	8004830 <__sinit>
 80054d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0f3      	beq.n	80054c6 <_fflush_r+0xa>
 80054de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80054e0:	07d0      	lsls	r0, r2, #31
 80054e2:	d404      	bmi.n	80054ee <_fflush_r+0x32>
 80054e4:	0599      	lsls	r1, r3, #22
 80054e6:	d402      	bmi.n	80054ee <_fflush_r+0x32>
 80054e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054ea:	f7ff fb98 	bl	8004c1e <__retarget_lock_acquire_recursive>
 80054ee:	4628      	mov	r0, r5
 80054f0:	4621      	mov	r1, r4
 80054f2:	f7ff ff5f 	bl	80053b4 <__sflush_r>
 80054f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054f8:	07da      	lsls	r2, r3, #31
 80054fa:	4605      	mov	r5, r0
 80054fc:	d4e4      	bmi.n	80054c8 <_fflush_r+0xc>
 80054fe:	89a3      	ldrh	r3, [r4, #12]
 8005500:	059b      	lsls	r3, r3, #22
 8005502:	d4e1      	bmi.n	80054c8 <_fflush_r+0xc>
 8005504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005506:	f7ff fb8b 	bl	8004c20 <__retarget_lock_release_recursive>
 800550a:	e7dd      	b.n	80054c8 <_fflush_r+0xc>

0800550c <__swhatbuf_r>:
 800550c:	b570      	push	{r4, r5, r6, lr}
 800550e:	460c      	mov	r4, r1
 8005510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005514:	2900      	cmp	r1, #0
 8005516:	b096      	sub	sp, #88	@ 0x58
 8005518:	4615      	mov	r5, r2
 800551a:	461e      	mov	r6, r3
 800551c:	da0d      	bge.n	800553a <__swhatbuf_r+0x2e>
 800551e:	89a3      	ldrh	r3, [r4, #12]
 8005520:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005524:	f04f 0100 	mov.w	r1, #0
 8005528:	bf14      	ite	ne
 800552a:	2340      	movne	r3, #64	@ 0x40
 800552c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005530:	2000      	movs	r0, #0
 8005532:	6031      	str	r1, [r6, #0]
 8005534:	602b      	str	r3, [r5, #0]
 8005536:	b016      	add	sp, #88	@ 0x58
 8005538:	bd70      	pop	{r4, r5, r6, pc}
 800553a:	466a      	mov	r2, sp
 800553c:	f000 f848 	bl	80055d0 <_fstat_r>
 8005540:	2800      	cmp	r0, #0
 8005542:	dbec      	blt.n	800551e <__swhatbuf_r+0x12>
 8005544:	9901      	ldr	r1, [sp, #4]
 8005546:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800554a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800554e:	4259      	negs	r1, r3
 8005550:	4159      	adcs	r1, r3
 8005552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005556:	e7eb      	b.n	8005530 <__swhatbuf_r+0x24>

08005558 <__smakebuf_r>:
 8005558:	898b      	ldrh	r3, [r1, #12]
 800555a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800555c:	079d      	lsls	r5, r3, #30
 800555e:	4606      	mov	r6, r0
 8005560:	460c      	mov	r4, r1
 8005562:	d507      	bpl.n	8005574 <__smakebuf_r+0x1c>
 8005564:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	6123      	str	r3, [r4, #16]
 800556c:	2301      	movs	r3, #1
 800556e:	6163      	str	r3, [r4, #20]
 8005570:	b003      	add	sp, #12
 8005572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005574:	ab01      	add	r3, sp, #4
 8005576:	466a      	mov	r2, sp
 8005578:	f7ff ffc8 	bl	800550c <__swhatbuf_r>
 800557c:	9f00      	ldr	r7, [sp, #0]
 800557e:	4605      	mov	r5, r0
 8005580:	4639      	mov	r1, r7
 8005582:	4630      	mov	r0, r6
 8005584:	f7ff fbba 	bl	8004cfc <_malloc_r>
 8005588:	b948      	cbnz	r0, 800559e <__smakebuf_r+0x46>
 800558a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800558e:	059a      	lsls	r2, r3, #22
 8005590:	d4ee      	bmi.n	8005570 <__smakebuf_r+0x18>
 8005592:	f023 0303 	bic.w	r3, r3, #3
 8005596:	f043 0302 	orr.w	r3, r3, #2
 800559a:	81a3      	strh	r3, [r4, #12]
 800559c:	e7e2      	b.n	8005564 <__smakebuf_r+0xc>
 800559e:	89a3      	ldrh	r3, [r4, #12]
 80055a0:	6020      	str	r0, [r4, #0]
 80055a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055a6:	81a3      	strh	r3, [r4, #12]
 80055a8:	9b01      	ldr	r3, [sp, #4]
 80055aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80055ae:	b15b      	cbz	r3, 80055c8 <__smakebuf_r+0x70>
 80055b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055b4:	4630      	mov	r0, r6
 80055b6:	f000 f81d 	bl	80055f4 <_isatty_r>
 80055ba:	b128      	cbz	r0, 80055c8 <__smakebuf_r+0x70>
 80055bc:	89a3      	ldrh	r3, [r4, #12]
 80055be:	f023 0303 	bic.w	r3, r3, #3
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	81a3      	strh	r3, [r4, #12]
 80055c8:	89a3      	ldrh	r3, [r4, #12]
 80055ca:	431d      	orrs	r5, r3
 80055cc:	81a5      	strh	r5, [r4, #12]
 80055ce:	e7cf      	b.n	8005570 <__smakebuf_r+0x18>

080055d0 <_fstat_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	4d07      	ldr	r5, [pc, #28]	@ (80055f0 <_fstat_r+0x20>)
 80055d4:	2300      	movs	r3, #0
 80055d6:	4604      	mov	r4, r0
 80055d8:	4608      	mov	r0, r1
 80055da:	4611      	mov	r1, r2
 80055dc:	602b      	str	r3, [r5, #0]
 80055de:	f7fb fc2e 	bl	8000e3e <_fstat>
 80055e2:	1c43      	adds	r3, r0, #1
 80055e4:	d102      	bne.n	80055ec <_fstat_r+0x1c>
 80055e6:	682b      	ldr	r3, [r5, #0]
 80055e8:	b103      	cbz	r3, 80055ec <_fstat_r+0x1c>
 80055ea:	6023      	str	r3, [r4, #0]
 80055ec:	bd38      	pop	{r3, r4, r5, pc}
 80055ee:	bf00      	nop
 80055f0:	200022dc 	.word	0x200022dc

080055f4 <_isatty_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4d06      	ldr	r5, [pc, #24]	@ (8005610 <_isatty_r+0x1c>)
 80055f8:	2300      	movs	r3, #0
 80055fa:	4604      	mov	r4, r0
 80055fc:	4608      	mov	r0, r1
 80055fe:	602b      	str	r3, [r5, #0]
 8005600:	f7fb fc2d 	bl	8000e5e <_isatty>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d102      	bne.n	800560e <_isatty_r+0x1a>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	b103      	cbz	r3, 800560e <_isatty_r+0x1a>
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	200022dc 	.word	0x200022dc

08005614 <_sbrk_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4d06      	ldr	r5, [pc, #24]	@ (8005630 <_sbrk_r+0x1c>)
 8005618:	2300      	movs	r3, #0
 800561a:	4604      	mov	r4, r0
 800561c:	4608      	mov	r0, r1
 800561e:	602b      	str	r3, [r5, #0]
 8005620:	f7fb fc36 	bl	8000e90 <_sbrk>
 8005624:	1c43      	adds	r3, r0, #1
 8005626:	d102      	bne.n	800562e <_sbrk_r+0x1a>
 8005628:	682b      	ldr	r3, [r5, #0]
 800562a:	b103      	cbz	r3, 800562e <_sbrk_r+0x1a>
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	bd38      	pop	{r3, r4, r5, pc}
 8005630:	200022dc 	.word	0x200022dc

08005634 <_init>:
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	bf00      	nop
 8005638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563a:	bc08      	pop	{r3}
 800563c:	469e      	mov	lr, r3
 800563e:	4770      	bx	lr

08005640 <_fini>:
 8005640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005642:	bf00      	nop
 8005644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005646:	bc08      	pop	{r3}
 8005648:	469e      	mov	lr, r3
 800564a:	4770      	bx	lr
