
Test_Lidar_projet_Torero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005470  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005650  08005650  00006650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005714  08005714  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005714  08005714  00006714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800571c  0800571c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800571c  0800571c  0000671c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005720  08005720  00006720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005724  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000730  20000068  0800578c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000798  0800578c  00007798  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001278c  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c7  00000000  00000000  00019824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  0001bef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d68  00000000  00000000  0001d020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f1fd  00000000  00000000  0001dd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d06  00000000  00000000  0003cf85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8004  00000000  00000000  00050c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118c8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005078  00000000  00000000  00118cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  0011dd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005638 	.word	0x08005638

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08005638 	.word	0x08005638

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <lidar_Init>:
void get_lidar_data(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void lidar_Init(void){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	// Enable DEV_EN lidar
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f248 0120 	movw	r1, #32800	@ 0x8020
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005be:	f001 f9b9 	bl	8001934 <HAL_GPIO_WritePin>

	// Enable M_EN lidar
	HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2104      	movs	r1, #4
 80005c6:	4802      	ldr	r0, [pc, #8]	@ (80005d0 <lidar_Init+0x20>)
 80005c8:	f001 f9b4 	bl	8001934 <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	48000400 	.word	0x48000400

080005d4 <lidar_Start>:
	else{
		printf("Erreur de com lidar\r\n");
	}
}

int lidar_Start(){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	lidar_command[0] = SCAN_CMD_LIDAR;
 80005d8:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <lidar_Start+0x4c>)
 80005da:	f24a 5260 	movw	r2, #42336	@ 0xa560
 80005de:	801a      	strh	r2, [r3, #0]
	if(HAL_UART_Transmit(&huart3, lidar_command, 1, HAL_MAX_DELAY)== HAL_OK){
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295
 80005e4:	2201      	movs	r2, #1
 80005e6:	490e      	ldr	r1, [pc, #56]	@ (8000620 <lidar_Start+0x4c>)
 80005e8:	480e      	ldr	r0, [pc, #56]	@ (8000624 <lidar_Start+0x50>)
 80005ea:	f003 f953 	bl	8003894 <HAL_UART_Transmit>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d10f      	bne.n	8000614 <lidar_Start+0x40>
		HAL_UART_Receive(&huart3, data_lidar, DATA_SIZE_LIDAR, (uint32_t) 1000);
 80005f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005fc:	490a      	ldr	r1, [pc, #40]	@ (8000628 <lidar_Start+0x54>)
 80005fe:	4809      	ldr	r0, [pc, #36]	@ (8000624 <lidar_Start+0x50>)
 8000600:	f003 f9d6 	bl	80039b0 <HAL_UART_Receive>
		printf(" data lidar : %d\r\n", data_lidar[1]);
 8000604:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <lidar_Start+0x54>)
 8000606:	785b      	ldrb	r3, [r3, #1]
 8000608:	4619      	mov	r1, r3
 800060a:	4808      	ldr	r0, [pc, #32]	@ (800062c <lidar_Start+0x58>)
 800060c:	f004 f948 	bl	80048a0 <iprintf>
		return 1;
 8000610:	2301      	movs	r3, #1
 8000612:	e003      	b.n	800061c <lidar_Start+0x48>
	}
	else{
		printf("Erreur de com lidar\r\n");
 8000614:	4806      	ldr	r0, [pc, #24]	@ (8000630 <lidar_Start+0x5c>)
 8000616:	f004 f9ab 	bl	8004970 <puts>
		return 0;
 800061a:	2300      	movs	r3, #0
	}
}
 800061c:	4618      	mov	r0, r3
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000640 	.word	0x20000640
 8000624:	20000164 	.word	0x20000164
 8000628:	20000258 	.word	0x20000258
 800062c:	08005650 	.word	0x08005650
 8000630:	08005664 	.word	0x08005664

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 fc9d 	bl	8000f76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f81a 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f000 f99e 	bl	8000980 <MX_GPIO_Init>
  MX_DMA_Init();
 8000644:	f000 f972 	bl	800092c <MX_DMA_Init>
  MX_TIM4_Init();
 8000648:	f000 f85e 	bl	8000708 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 800064c:	f000 f920 	bl	8000890 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000650:	f000 f8d2 	bl	80007f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lidar_Init();
 8000654:	f7ff ffac 	bl	80005b0 <lidar_Init>
  printf("==============START==============\r\n");
 8000658:	4805      	ldr	r0, [pc, #20]	@ (8000670 <main+0x3c>)
 800065a:	f004 f989 	bl	8004970 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lidar_Start();
 800065e:	f7ff ffb9 	bl	80005d4 <lidar_Start>
	  HAL_Delay(1000);
 8000662:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000666:	f000 fcf7 	bl	8001058 <HAL_Delay>
	  lidar_Start();
 800066a:	bf00      	nop
 800066c:	e7f7      	b.n	800065e <main+0x2a>
 800066e:	bf00      	nop
 8000670:	0800567c 	.word	0x0800567c

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	@ 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0318 	add.w	r3, r7, #24
 800067e:	2238      	movs	r2, #56	@ 0x38
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f004 fa54 	bl	8004b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000696:	2000      	movs	r0, #0
 8000698:	f001 f964 	bl	8001964 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	2303      	movs	r3, #3
 80006ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80006ae:	2306      	movs	r3, #6
 80006b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006b2:	2355      	movs	r3, #85	@ 0x55
 80006b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006be:	2302      	movs	r3, #2
 80006c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0318 	add.w	r3, r7, #24
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fa00 	bl	8001acc <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80006d2:	f000 f9d3 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2303      	movs	r3, #3
 80006dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2104      	movs	r1, #4
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fcfe 	bl	80020f0 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006fa:	f000 f9bf 	bl	8000a7c <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	@ 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08e      	sub	sp, #56	@ 0x38
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
 8000736:	615a      	str	r2, [r3, #20]
 8000738:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800073a:	4b2d      	ldr	r3, [pc, #180]	@ (80007f0 <MX_TIM4_Init+0xe8>)
 800073c:	4a2d      	ldr	r2, [pc, #180]	@ (80007f4 <MX_TIM4_Init+0xec>)
 800073e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000740:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <MX_TIM4_Init+0xe8>)
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000746:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <MX_TIM4_Init+0xe8>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800074c:	4b28      	ldr	r3, [pc, #160]	@ (80007f0 <MX_TIM4_Init+0xe8>)
 800074e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000752:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000754:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <MX_TIM4_Init+0xe8>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075a:	4b25      	ldr	r3, [pc, #148]	@ (80007f0 <MX_TIM4_Init+0xe8>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000760:	4823      	ldr	r0, [pc, #140]	@ (80007f0 <MX_TIM4_Init+0xe8>)
 8000762:	f002 f8d1 	bl	8002908 <HAL_TIM_Base_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800076c:	f000 f986 	bl	8000a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000774:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000776:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800077a:	4619      	mov	r1, r3
 800077c:	481c      	ldr	r0, [pc, #112]	@ (80007f0 <MX_TIM4_Init+0xe8>)
 800077e:	f002 fa8f 	bl	8002ca0 <HAL_TIM_ConfigClockSource>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000788:	f000 f978 	bl	8000a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800078c:	4818      	ldr	r0, [pc, #96]	@ (80007f0 <MX_TIM4_Init+0xe8>)
 800078e:	f002 f912 	bl	80029b6 <HAL_TIM_PWM_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000798:	f000 f970 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4811      	ldr	r0, [pc, #68]	@ (80007f0 <MX_TIM4_Init+0xe8>)
 80007ac:	f002 ffa0 	bl	80036f0 <HAL_TIMEx_MasterConfigSynchronization>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80007b6:	f000 f961 	bl	8000a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ba:	2360      	movs	r3, #96	@ 0x60
 80007bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	220c      	movs	r2, #12
 80007ce:	4619      	mov	r1, r3
 80007d0:	4807      	ldr	r0, [pc, #28]	@ (80007f0 <MX_TIM4_Init+0xe8>)
 80007d2:	f002 f951 	bl	8002a78 <HAL_TIM_PWM_ConfigChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80007dc:	f000 f94e 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80007e0:	4803      	ldr	r0, [pc, #12]	@ (80007f0 <MX_TIM4_Init+0xe8>)
 80007e2:	f000 f995 	bl	8000b10 <HAL_TIM_MspPostInit>

}
 80007e6:	bf00      	nop
 80007e8:	3738      	adds	r7, #56	@ 0x38
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000084 	.word	0x20000084
 80007f4:	40000800 	.word	0x40000800

080007f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007fc:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 80007fe:	4a23      	ldr	r2, [pc, #140]	@ (800088c <MX_USART2_UART_Init+0x94>)
 8000800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000802:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000816:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082e:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000834:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083a:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 800083c:	2200      	movs	r2, #0
 800083e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000840:	4811      	ldr	r0, [pc, #68]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000842:	f002 ffd7 	bl	80037f4 <HAL_UART_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800084c:	f000 f916 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000850:	2100      	movs	r1, #0
 8000852:	480d      	ldr	r0, [pc, #52]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000854:	f003 fe98 	bl	8004588 <HAL_UARTEx_SetTxFifoThreshold>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800085e:	f000 f90d 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000862:	2100      	movs	r1, #0
 8000864:	4808      	ldr	r0, [pc, #32]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000866:	f003 fecd 	bl	8004604 <HAL_UARTEx_SetRxFifoThreshold>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000870:	f000 f904 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	@ (8000888 <MX_USART2_UART_Init+0x90>)
 8000876:	f003 fe4e 	bl	8004516 <HAL_UARTEx_DisableFifoMode>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000880:	f000 f8fc 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000d0 	.word	0x200000d0
 800088c:	40004400 	.word	0x40004400

08000890 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000894:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <MX_USART3_UART_Init+0x94>)
 8000896:	4a24      	ldr	r2, [pc, #144]	@ (8000928 <MX_USART3_UART_Init+0x98>)
 8000898:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 128000;
 800089a:	4b22      	ldr	r3, [pc, #136]	@ (8000924 <MX_USART3_UART_Init+0x94>)
 800089c:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 80008a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 80008a2:	4b20      	ldr	r3, [pc, #128]	@ (8000924 <MX_USART3_UART_Init+0x94>)
 80008a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008a8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000924 <MX_USART3_UART_Init+0x94>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <MX_USART3_UART_Init+0x94>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000924 <MX_USART3_UART_Init+0x94>)
 80008b8:	220c      	movs	r2, #12
 80008ba:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008bc:	4b19      	ldr	r3, [pc, #100]	@ (8000924 <MX_USART3_UART_Init+0x94>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c2:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <MX_USART3_UART_Init+0x94>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c8:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <MX_USART3_UART_Init+0x94>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ce:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <MX_USART3_UART_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d4:	4b13      	ldr	r3, [pc, #76]	@ (8000924 <MX_USART3_UART_Init+0x94>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008da:	4812      	ldr	r0, [pc, #72]	@ (8000924 <MX_USART3_UART_Init+0x94>)
 80008dc:	f002 ff8a 	bl	80037f4 <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 80008e6:	f000 f8c9 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ea:	2100      	movs	r1, #0
 80008ec:	480d      	ldr	r0, [pc, #52]	@ (8000924 <MX_USART3_UART_Init+0x94>)
 80008ee:	f003 fe4b 	bl	8004588 <HAL_UARTEx_SetTxFifoThreshold>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 80008f8:	f000 f8c0 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008fc:	2100      	movs	r1, #0
 80008fe:	4809      	ldr	r0, [pc, #36]	@ (8000924 <MX_USART3_UART_Init+0x94>)
 8000900:	f003 fe80 	bl	8004604 <HAL_UARTEx_SetRxFifoThreshold>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 800090a:	f000 f8b7 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	@ (8000924 <MX_USART3_UART_Init+0x94>)
 8000910:	f003 fe01 	bl	8004516 <HAL_UARTEx_DisableFifoMode>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 800091a:	f000 f8af 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000164 	.word	0x20000164
 8000928:	40004800 	.word	0x40004800

0800092c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000932:	4b12      	ldr	r3, [pc, #72]	@ (800097c <MX_DMA_Init+0x50>)
 8000934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000936:	4a11      	ldr	r2, [pc, #68]	@ (800097c <MX_DMA_Init+0x50>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6493      	str	r3, [r2, #72]	@ 0x48
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <MX_DMA_Init+0x50>)
 8000940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800094a:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <MX_DMA_Init+0x50>)
 800094c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800094e:	4a0b      	ldr	r2, [pc, #44]	@ (800097c <MX_DMA_Init+0x50>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6493      	str	r3, [r2, #72]	@ 0x48
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <MX_DMA_Init+0x50>)
 8000958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	200b      	movs	r0, #11
 8000968:	f000 fc73 	bl	8001252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800096c:	200b      	movs	r0, #11
 800096e:	f000 fc8a 	bl	8001286 <HAL_NVIC_EnableIRQ>

}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4b36      	ldr	r3, [pc, #216]	@ (8000a70 <MX_GPIO_Init+0xf0>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	4a35      	ldr	r2, [pc, #212]	@ (8000a70 <MX_GPIO_Init+0xf0>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a2:	4b33      	ldr	r3, [pc, #204]	@ (8000a70 <MX_GPIO_Init+0xf0>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ae:	4b30      	ldr	r3, [pc, #192]	@ (8000a70 <MX_GPIO_Init+0xf0>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a70 <MX_GPIO_Init+0xf0>)
 80009b4:	f043 0320 	orr.w	r3, r3, #32
 80009b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000a70 <MX_GPIO_Init+0xf0>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	f003 0320 	and.w	r3, r3, #32
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a70 <MX_GPIO_Init+0xf0>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	4a29      	ldr	r2, [pc, #164]	@ (8000a70 <MX_GPIO_Init+0xf0>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d2:	4b27      	ldr	r3, [pc, #156]	@ (8000a70 <MX_GPIO_Init+0xf0>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b24      	ldr	r3, [pc, #144]	@ (8000a70 <MX_GPIO_Init+0xf0>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	4a23      	ldr	r2, [pc, #140]	@ (8000a70 <MX_GPIO_Init+0xf0>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ea:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <MX_GPIO_Init+0xf0>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f248 0120 	movw	r1, #32800	@ 0x8020
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a00:	f000 ff98 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2104      	movs	r1, #4
 8000a08:	481a      	ldr	r0, [pc, #104]	@ (8000a74 <MX_GPIO_Init+0xf4>)
 8000a0a:	f000 ff93 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a14:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4814      	ldr	r0, [pc, #80]	@ (8000a78 <MX_GPIO_Init+0xf8>)
 8000a26:	f000 fe03 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DEV_EN_LIDAR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DEV_EN_LIDAR_Pin;
 8000a2a:	f248 0320 	movw	r3, #32800	@ 0x8020
 8000a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a46:	f000 fdf3 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : M_EN_LIDAR_Pin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M_EN_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <MX_GPIO_Init+0xf4>)
 8000a62:	f000 fde5 	bl	8001630 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a66:	bf00      	nop
 8000a68:	3728      	adds	r7, #40	@ 0x28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40021000 	.word	0x40021000
 8000a74:	48000400 	.word	0x48000400
 8000a78:	48000800 	.word	0x48000800

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <Error_Handler+0x8>

08000a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <HAL_MspInit+0x44>)
 8000a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a92:	4a0e      	ldr	r2, [pc, #56]	@ (8000acc <HAL_MspInit+0x44>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <HAL_MspInit+0x44>)
 8000a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <HAL_MspInit+0x44>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aaa:	4a08      	ldr	r2, [pc, #32]	@ (8000acc <HAL_MspInit+0x44>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ab0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <HAL_MspInit+0x44>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000abe:	f000 fff5 	bl	8001aac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	@ (8000b08 <HAL_TIM_Base_MspInit+0x38>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d10b      	bne.n	8000afa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae6:	4a09      	ldr	r2, [pc, #36]	@ (8000b0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aee:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <HAL_TIM_Base_MspInit+0x3c>)
 8000af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40000800 	.word	0x40000800
 8000b0c:	40021000 	.word	0x40021000

08000b10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a11      	ldr	r2, [pc, #68]	@ (8000b74 <HAL_TIM_MspPostInit+0x64>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d11c      	bne.n	8000b6c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <HAL_TIM_MspPostInit+0x68>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b36:	4a10      	ldr	r2, [pc, #64]	@ (8000b78 <HAL_TIM_MspPostInit+0x68>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <HAL_TIM_MspPostInit+0x68>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = TIM4_CH4_M_SCTR_LIDAR_Pin;
 8000b4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH4_M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	4619      	mov	r1, r3
 8000b66:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <HAL_TIM_MspPostInit+0x6c>)
 8000b68:	f000 fd62 	bl	8001630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000b6c:	bf00      	nop
 8000b6e:	3720      	adds	r7, #32
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40000800 	.word	0x40000800
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	48000400 	.word	0x48000400

08000b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b09c      	sub	sp, #112	@ 0x70
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b98:	f107 0318 	add.w	r3, r7, #24
 8000b9c:	2244      	movs	r2, #68	@ 0x44
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 ffc5 	bl	8004b30 <memset>
  if(huart->Instance==USART2)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a52      	ldr	r2, [pc, #328]	@ (8000cf4 <HAL_UART_MspInit+0x174>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d137      	bne.n	8000c20 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb8:	f107 0318 	add.w	r3, r7, #24
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f001 fcb3 	bl	8002528 <HAL_RCCEx_PeriphCLKConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bc8:	f7ff ff58 	bl	8000a7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bcc:	4b4a      	ldr	r3, [pc, #296]	@ (8000cf8 <HAL_UART_MspInit+0x178>)
 8000bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bd0:	4a49      	ldr	r2, [pc, #292]	@ (8000cf8 <HAL_UART_MspInit+0x178>)
 8000bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bd8:	4b47      	ldr	r3, [pc, #284]	@ (8000cf8 <HAL_UART_MspInit+0x178>)
 8000bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	4b44      	ldr	r3, [pc, #272]	@ (8000cf8 <HAL_UART_MspInit+0x178>)
 8000be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be8:	4a43      	ldr	r2, [pc, #268]	@ (8000cf8 <HAL_UART_MspInit+0x178>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf0:	4b41      	ldr	r3, [pc, #260]	@ (8000cf8 <HAL_UART_MspInit+0x178>)
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bfc:	230c      	movs	r3, #12
 8000bfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c14:	4619      	mov	r1, r3
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1a:	f000 fd09 	bl	8001630 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c1e:	e065      	b.n	8000cec <HAL_UART_MspInit+0x16c>
  else if(huart->Instance==USART3)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a35      	ldr	r2, [pc, #212]	@ (8000cfc <HAL_UART_MspInit+0x17c>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d160      	bne.n	8000cec <HAL_UART_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c32:	f107 0318 	add.w	r3, r7, #24
 8000c36:	4618      	mov	r0, r3
 8000c38:	f001 fc76 	bl	8002528 <HAL_RCCEx_PeriphCLKConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000c42:	f7ff ff1b 	bl	8000a7c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c46:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf8 <HAL_UART_MspInit+0x178>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8000cf8 <HAL_UART_MspInit+0x178>)
 8000c4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c52:	4b29      	ldr	r3, [pc, #164]	@ (8000cf8 <HAL_UART_MspInit+0x178>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	4b26      	ldr	r3, [pc, #152]	@ (8000cf8 <HAL_UART_MspInit+0x178>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c62:	4a25      	ldr	r2, [pc, #148]	@ (8000cf8 <HAL_UART_MspInit+0x178>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c6a:	4b23      	ldr	r3, [pc, #140]	@ (8000cf8 <HAL_UART_MspInit+0x178>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_LIDAR_Pin|USART3_RX_LIDAR_Pin;
 8000c76:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c88:	2307      	movs	r3, #7
 8000c8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c90:	4619      	mov	r1, r3
 8000c92:	481b      	ldr	r0, [pc, #108]	@ (8000d00 <HAL_UART_MspInit+0x180>)
 8000c94:	f000 fccc 	bl	8001630 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8000c98:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <HAL_UART_MspInit+0x184>)
 8000c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8000d08 <HAL_UART_MspInit+0x188>)
 8000c9c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <HAL_UART_MspInit+0x184>)
 8000ca0:	221c      	movs	r2, #28
 8000ca2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca4:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <HAL_UART_MspInit+0x184>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000caa:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <HAL_UART_MspInit+0x184>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb0:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <HAL_UART_MspInit+0x184>)
 8000cb2:	2280      	movs	r2, #128	@ 0x80
 8000cb4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cb6:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <HAL_UART_MspInit+0x184>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <HAL_UART_MspInit+0x184>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000cc2:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <HAL_UART_MspInit+0x184>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <HAL_UART_MspInit+0x184>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000cce:	480d      	ldr	r0, [pc, #52]	@ (8000d04 <HAL_UART_MspInit+0x184>)
 8000cd0:	f000 faf4 	bl	80012bc <HAL_DMA_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_UART_MspInit+0x15e>
      Error_Handler();
 8000cda:	f7ff fecf 	bl	8000a7c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a08      	ldr	r2, [pc, #32]	@ (8000d04 <HAL_UART_MspInit+0x184>)
 8000ce2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000ce6:	4a07      	ldr	r2, [pc, #28]	@ (8000d04 <HAL_UART_MspInit+0x184>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000cec:	bf00      	nop
 8000cee:	3770      	adds	r7, #112	@ 0x70
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40004400 	.word	0x40004400
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40004800 	.word	0x40004800
 8000d00:	48000400 	.word	0x48000400
 8000d04:	200001f8 	.word	0x200001f8
 8000d08:	40020008 	.word	0x40020008

08000d0c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000d14:	1d39      	adds	r1, r7, #4
 8000d16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4807      	ldr	r0, [pc, #28]	@ (8000d3c <__io_putchar+0x30>)
 8000d1e:	f002 fdb9 	bl	8003894 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000d22:	1d39      	adds	r1, r7, #4
 8000d24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <__io_putchar+0x34>)
 8000d2c:	f002 fdb2 	bl	8003894 <HAL_UART_Transmit>

  return ch;
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200000d0 	.word	0x200000d0
 8000d40:	20000164 	.word	0x20000164

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <NMI_Handler+0x4>

08000d4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <BusFault_Handler+0x4>

08000d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <UsageFault_Handler+0x4>

08000d6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9a:	f000 f93f 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000da8:	4802      	ldr	r0, [pc, #8]	@ (8000db4 <DMA1_Channel1_IRQHandler+0x10>)
 8000daa:	f000 fb2f 	bl	800140c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200001f8 	.word	0x200001f8

08000db8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	e00a      	b.n	8000de0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dca:	f3af 8000 	nop.w
 8000dce:	4601      	mov	r1, r0
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	60ba      	str	r2, [r7, #8]
 8000dd6:	b2ca      	uxtb	r2, r1
 8000dd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dbf0      	blt.n	8000dca <_read+0x12>
  }

  return len;
 8000de8:	687b      	ldr	r3, [r7, #4]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	60f8      	str	r0, [r7, #12]
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	e009      	b.n	8000e18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	60ba      	str	r2, [r7, #8]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff7d 	bl	8000d0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3301      	adds	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	dbf1      	blt.n	8000e04 <_write+0x12>
  }
  return len;
 8000e20:	687b      	ldr	r3, [r7, #4]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_close>:

int _close(int file)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e52:	605a      	str	r2, [r3, #4]
  return 0;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_isatty>:

int _isatty(int file)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ef0 <_sbrk+0x5c>)
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <_sbrk+0x60>)
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea8:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <_sbrk+0x64>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	@ (8000efc <_sbrk+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d207      	bcs.n	8000ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec4:	f003 fe82 	bl	8004bcc <__errno>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	220c      	movs	r2, #12
 8000ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	e009      	b.n	8000ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eda:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4a05      	ldr	r2, [pc, #20]	@ (8000ef8 <_sbrk+0x64>)
 8000ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20008000 	.word	0x20008000
 8000ef4:	00000400 	.word	0x00000400
 8000ef8:	20000644 	.word	0x20000644
 8000efc:	20000798 	.word	0x20000798

08000f00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f24:	480d      	ldr	r0, [pc, #52]	@ (8000f5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f26:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f28:	f7ff ffea 	bl	8000f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f2c:	480c      	ldr	r0, [pc, #48]	@ (8000f60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2e:	490d      	ldr	r1, [pc, #52]	@ (8000f64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f30:	4a0d      	ldr	r2, [pc, #52]	@ (8000f68 <LoopForever+0xe>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f44:	4c0a      	ldr	r4, [pc, #40]	@ (8000f70 <LoopForever+0x16>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000f52:	f003 fe41 	bl	8004bd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f56:	f7ff fb6d 	bl	8000634 <main>

08000f5a <LoopForever>:

LoopForever:
    b LoopForever
 8000f5a:	e7fe      	b.n	8000f5a <LoopForever>
  ldr   r0, =_estack
 8000f5c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f68:	08005724 	.word	0x08005724
  ldr r2, =_sbss
 8000f6c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f70:	20000798 	.word	0x20000798

08000f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC1_2_IRQHandler>

08000f76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 f95b 	bl	800123c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f86:	2000      	movs	r0, #0
 8000f88:	f000 f80e 	bl	8000fa8 <HAL_InitTick>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d002      	beq.n	8000f98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	71fb      	strb	r3, [r7, #7]
 8000f96:	e001      	b.n	8000f9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f98:	f7ff fd76 	bl	8000a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]

}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fb4:	4b16      	ldr	r3, [pc, #88]	@ (8001010 <HAL_InitTick+0x68>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d022      	beq.n	8001002 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fbc:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <HAL_InitTick+0x6c>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <HAL_InitTick+0x68>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f966 	bl	80012a2 <HAL_SYSTICK_Config>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10f      	bne.n	8000ffc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b0f      	cmp	r3, #15
 8000fe0:	d809      	bhi.n	8000ff6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fea:	f000 f932 	bl	8001252 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fee:	4a0a      	ldr	r2, [pc, #40]	@ (8001018 <HAL_InitTick+0x70>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	e007      	b.n	8001006 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	e004      	b.n	8001006 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	73fb      	strb	r3, [r7, #15]
 8001000:	e001      	b.n	8001006 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001006:	7bfb      	ldrb	r3, [r7, #15]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000008 	.word	0x20000008
 8001014:	20000000 	.word	0x20000000
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <HAL_IncTick+0x1c>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b05      	ldr	r3, [pc, #20]	@ (800103c <HAL_IncTick+0x20>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4413      	add	r3, r2
 800102a:	4a03      	ldr	r2, [pc, #12]	@ (8001038 <HAL_IncTick+0x1c>)
 800102c:	6013      	str	r3, [r2, #0]
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	20000648 	.word	0x20000648
 800103c:	20000008 	.word	0x20000008

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b03      	ldr	r3, [pc, #12]	@ (8001054 <HAL_GetTick+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000648 	.word	0x20000648

08001058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001060:	f7ff ffee 	bl	8001040 <HAL_GetTick>
 8001064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001070:	d004      	beq.n	800107c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <HAL_Delay+0x40>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	4413      	add	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800107c:	bf00      	nop
 800107e:	f7ff ffdf 	bl	8001040 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	429a      	cmp	r2, r3
 800108c:	d8f7      	bhi.n	800107e <HAL_Delay+0x26>
  {
  }
}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000008 	.word	0x20000008

0800109c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ce:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	60d3      	str	r3, [r2, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db0b      	blt.n	800112a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	4907      	ldr	r1, [pc, #28]	@ (8001138 <__NVIC_EnableIRQ+0x38>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	2001      	movs	r0, #1
 8001122:	fa00 f202 	lsl.w	r2, r0, r2
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000e100 	.word	0xe000e100

0800113c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	db0a      	blt.n	8001166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	490c      	ldr	r1, [pc, #48]	@ (8001188 <__NVIC_SetPriority+0x4c>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	440b      	add	r3, r1
 8001160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001164:	e00a      	b.n	800117c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4908      	ldr	r1, [pc, #32]	@ (800118c <__NVIC_SetPriority+0x50>)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	3b04      	subs	r3, #4
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	440b      	add	r3, r1
 800117a:	761a      	strb	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	@ 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f1c3 0307 	rsb	r3, r3, #7
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf28      	it	cs
 80011ae:	2304      	movcs	r3, #4
 80011b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3304      	adds	r3, #4
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d902      	bls.n	80011c0 <NVIC_EncodePriority+0x30>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3b03      	subs	r3, #3
 80011be:	e000      	b.n	80011c2 <NVIC_EncodePriority+0x32>
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43d9      	mvns	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	4313      	orrs	r3, r2
         );
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	@ 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001208:	d301      	bcc.n	800120e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120a:	2301      	movs	r3, #1
 800120c:	e00f      	b.n	800122e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120e:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <SysTick_Config+0x40>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001216:	210f      	movs	r1, #15
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f7ff ff8e 	bl	800113c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001220:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <SysTick_Config+0x40>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001226:	4b04      	ldr	r3, [pc, #16]	@ (8001238 <SysTick_Config+0x40>)
 8001228:	2207      	movs	r2, #7
 800122a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	e000e010 	.word	0xe000e010

0800123c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff29 	bl	800109c <__NVIC_SetPriorityGrouping>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001260:	f7ff ff40 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 8001264:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	68b9      	ldr	r1, [r7, #8]
 800126a:	6978      	ldr	r0, [r7, #20]
 800126c:	f7ff ff90 	bl	8001190 <NVIC_EncodePriority>
 8001270:	4602      	mov	r2, r0
 8001272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff5f 	bl	800113c <__NVIC_SetPriority>
}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff33 	bl	8001100 <__NVIC_EnableIRQ>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ffa4 	bl	80011f8 <SysTick_Config>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e08d      	b.n	80013ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b47      	ldr	r3, [pc, #284]	@ (80013f4 <HAL_DMA_Init+0x138>)
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d80f      	bhi.n	80012fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	4b45      	ldr	r3, [pc, #276]	@ (80013f8 <HAL_DMA_Init+0x13c>)
 80012e2:	4413      	add	r3, r2
 80012e4:	4a45      	ldr	r2, [pc, #276]	@ (80013fc <HAL_DMA_Init+0x140>)
 80012e6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	009a      	lsls	r2, r3, #2
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a42      	ldr	r2, [pc, #264]	@ (8001400 <HAL_DMA_Init+0x144>)
 80012f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80012f8:	e00e      	b.n	8001318 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	4b40      	ldr	r3, [pc, #256]	@ (8001404 <HAL_DMA_Init+0x148>)
 8001302:	4413      	add	r3, r2
 8001304:	4a3d      	ldr	r2, [pc, #244]	@ (80013fc <HAL_DMA_Init+0x140>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	009a      	lsls	r2, r3, #2
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a3c      	ldr	r2, [pc, #240]	@ (8001408 <HAL_DMA_Init+0x14c>)
 8001316:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2202      	movs	r2, #2
 800131c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800132e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001332:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800133c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001348:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001354:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	4313      	orrs	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f8fe 	bl	800156c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001378:	d102      	bne.n	8001380 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001394:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d010      	beq.n	80013c0 <HAL_DMA_Init+0x104>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d80c      	bhi.n	80013c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f91e 	bl	80015e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	e008      	b.n	80013d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40020407 	.word	0x40020407
 80013f8:	bffdfff8 	.word	0xbffdfff8
 80013fc:	cccccccd 	.word	0xcccccccd
 8001400:	40020000 	.word	0x40020000
 8001404:	bffdfbf8 	.word	0xbffdfbf8
 8001408:	40020400 	.word	0x40020400

0800140c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001428:	f003 031f 	and.w	r3, r3, #31
 800142c:	2204      	movs	r2, #4
 800142e:	409a      	lsls	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4013      	ands	r3, r2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d026      	beq.n	8001486 <HAL_DMA_IRQHandler+0x7a>
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	2b00      	cmp	r3, #0
 8001440:	d021      	beq.n	8001486 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0320 	and.w	r3, r3, #32
 800144c:	2b00      	cmp	r3, #0
 800144e:	d107      	bne.n	8001460 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 0204 	bic.w	r2, r2, #4
 800145e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001464:	f003 021f 	and.w	r2, r3, #31
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	2104      	movs	r1, #4
 800146e:	fa01 f202 	lsl.w	r2, r1, r2
 8001472:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001478:	2b00      	cmp	r3, #0
 800147a:	d071      	beq.n	8001560 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001484:	e06c      	b.n	8001560 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148a:	f003 031f 	and.w	r3, r3, #31
 800148e:	2202      	movs	r2, #2
 8001490:	409a      	lsls	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4013      	ands	r3, r2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d02e      	beq.n	80014f8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d029      	beq.n	80014f8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10b      	bne.n	80014ca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 020a 	bic.w	r2, r2, #10
 80014c0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ce:	f003 021f 	and.w	r2, r3, #31
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	2102      	movs	r1, #2
 80014d8:	fa01 f202 	lsl.w	r2, r1, r2
 80014dc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d038      	beq.n	8001560 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80014f6:	e033      	b.n	8001560 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fc:	f003 031f 	and.w	r3, r3, #31
 8001500:	2208      	movs	r2, #8
 8001502:	409a      	lsls	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4013      	ands	r3, r2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d02a      	beq.n	8001562 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d025      	beq.n	8001562 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 020e 	bic.w	r2, r2, #14
 8001524:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152a:	f003 021f 	and.w	r2, r3, #31
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	2101      	movs	r1, #1
 8001534:	fa01 f202 	lsl.w	r2, r1, r2
 8001538:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001554:	2b00      	cmp	r3, #0
 8001556:	d004      	beq.n	8001562 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001560:	bf00      	nop
 8001562:	bf00      	nop
}
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800156c:	b480      	push	{r7}
 800156e:	b087      	sub	sp, #28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800157c:	429a      	cmp	r2, r3
 800157e:	d802      	bhi.n	8001586 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001580:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e001      	b.n	800158a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001588:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	3b08      	subs	r3, #8
 8001596:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	009a      	lsls	r2, r3, #2
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4413      	add	r3, r2
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a0b      	ldr	r2, [pc, #44]	@ (80015e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80015b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 031f 	and.w	r3, r3, #31
 80015be:	2201      	movs	r2, #1
 80015c0:	409a      	lsls	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80015c6:	bf00      	nop
 80015c8:	371c      	adds	r7, #28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40020407 	.word	0x40020407
 80015d8:	40020800 	.word	0x40020800
 80015dc:	40020820 	.word	0x40020820
 80015e0:	cccccccd 	.word	0xcccccccd
 80015e4:	40020880 	.word	0x40020880

080015e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	461a      	mov	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a08      	ldr	r2, [pc, #32]	@ (800162c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800160a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3b01      	subs	r3, #1
 8001610:	f003 031f 	and.w	r3, r3, #31
 8001614:	2201      	movs	r2, #1
 8001616:	409a      	lsls	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	1000823f 	.word	0x1000823f
 800162c:	40020940 	.word	0x40020940

08001630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800163e:	e15a      	b.n	80018f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	2101      	movs	r1, #1
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	4013      	ands	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 814c 	beq.w	80018f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b01      	cmp	r3, #1
 8001662:	d005      	beq.n	8001670 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800166c:	2b02      	cmp	r3, #2
 800166e:	d130      	bne.n	80016d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016a6:	2201      	movs	r2, #1
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	f003 0201 	and.w	r2, r3, #1
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d017      	beq.n	800170e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	2203      	movs	r2, #3
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d123      	bne.n	8001762 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	08da      	lsrs	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3208      	adds	r2, #8
 8001722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	220f      	movs	r2, #15
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	691a      	ldr	r2, [r3, #16]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	08da      	lsrs	r2, r3, #3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3208      	adds	r2, #8
 800175c:	6939      	ldr	r1, [r7, #16]
 800175e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 0203 	and.w	r2, r3, #3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 80a6 	beq.w	80018f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001914 <HAL_GPIO_Init+0x2e4>)
 80017a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a8:	4a5a      	ldr	r2, [pc, #360]	@ (8001914 <HAL_GPIO_Init+0x2e4>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80017b0:	4b58      	ldr	r3, [pc, #352]	@ (8001914 <HAL_GPIO_Init+0x2e4>)
 80017b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017bc:	4a56      	ldr	r2, [pc, #344]	@ (8001918 <HAL_GPIO_Init+0x2e8>)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	089b      	lsrs	r3, r3, #2
 80017c2:	3302      	adds	r3, #2
 80017c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	220f      	movs	r2, #15
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017e6:	d01f      	beq.n	8001828 <HAL_GPIO_Init+0x1f8>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a4c      	ldr	r2, [pc, #304]	@ (800191c <HAL_GPIO_Init+0x2ec>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d019      	beq.n	8001824 <HAL_GPIO_Init+0x1f4>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a4b      	ldr	r2, [pc, #300]	@ (8001920 <HAL_GPIO_Init+0x2f0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d013      	beq.n	8001820 <HAL_GPIO_Init+0x1f0>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001924 <HAL_GPIO_Init+0x2f4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d00d      	beq.n	800181c <HAL_GPIO_Init+0x1ec>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a49      	ldr	r2, [pc, #292]	@ (8001928 <HAL_GPIO_Init+0x2f8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d007      	beq.n	8001818 <HAL_GPIO_Init+0x1e8>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a48      	ldr	r2, [pc, #288]	@ (800192c <HAL_GPIO_Init+0x2fc>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d101      	bne.n	8001814 <HAL_GPIO_Init+0x1e4>
 8001810:	2305      	movs	r3, #5
 8001812:	e00a      	b.n	800182a <HAL_GPIO_Init+0x1fa>
 8001814:	2306      	movs	r3, #6
 8001816:	e008      	b.n	800182a <HAL_GPIO_Init+0x1fa>
 8001818:	2304      	movs	r3, #4
 800181a:	e006      	b.n	800182a <HAL_GPIO_Init+0x1fa>
 800181c:	2303      	movs	r3, #3
 800181e:	e004      	b.n	800182a <HAL_GPIO_Init+0x1fa>
 8001820:	2302      	movs	r3, #2
 8001822:	e002      	b.n	800182a <HAL_GPIO_Init+0x1fa>
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_GPIO_Init+0x1fa>
 8001828:	2300      	movs	r3, #0
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	f002 0203 	and.w	r2, r2, #3
 8001830:	0092      	lsls	r2, r2, #2
 8001832:	4093      	lsls	r3, r2
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800183a:	4937      	ldr	r1, [pc, #220]	@ (8001918 <HAL_GPIO_Init+0x2e8>)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	3302      	adds	r3, #2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001848:	4b39      	ldr	r3, [pc, #228]	@ (8001930 <HAL_GPIO_Init+0x300>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	43db      	mvns	r3, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800186c:	4a30      	ldr	r2, [pc, #192]	@ (8001930 <HAL_GPIO_Init+0x300>)
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001872:	4b2f      	ldr	r3, [pc, #188]	@ (8001930 <HAL_GPIO_Init+0x300>)
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4313      	orrs	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001896:	4a26      	ldr	r2, [pc, #152]	@ (8001930 <HAL_GPIO_Init+0x300>)
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800189c:	4b24      	ldr	r3, [pc, #144]	@ (8001930 <HAL_GPIO_Init+0x300>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001930 <HAL_GPIO_Init+0x300>)
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <HAL_GPIO_Init+0x300>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	43db      	mvns	r3, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018ea:	4a11      	ldr	r2, [pc, #68]	@ (8001930 <HAL_GPIO_Init+0x300>)
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	3301      	adds	r3, #1
 80018f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	f47f ae9d 	bne.w	8001640 <HAL_GPIO_Init+0x10>
  }
}
 8001906:	bf00      	nop
 8001908:	bf00      	nop
 800190a:	371c      	adds	r7, #28
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	40021000 	.word	0x40021000
 8001918:	40010000 	.word	0x40010000
 800191c:	48000400 	.word	0x48000400
 8001920:	48000800 	.word	0x48000800
 8001924:	48000c00 	.word	0x48000c00
 8001928:	48001000 	.word	0x48001000
 800192c:	48001400 	.word	0x48001400
 8001930:	40010400 	.word	0x40010400

08001934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
 8001940:	4613      	mov	r3, r2
 8001942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001944:	787b      	ldrb	r3, [r7, #1]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800194a:	887a      	ldrh	r2, [r7, #2]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001950:	e002      	b.n	8001958 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001952:	887a      	ldrh	r2, [r7, #2]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d141      	bne.n	80019f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001972:	4b4b      	ldr	r3, [pc, #300]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800197a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800197e:	d131      	bne.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001980:	4b47      	ldr	r3, [pc, #284]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001986:	4a46      	ldr	r2, [pc, #280]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001988:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800198c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001990:	4b43      	ldr	r3, [pc, #268]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001998:	4a41      	ldr	r2, [pc, #260]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800199e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019a0:	4b40      	ldr	r3, [pc, #256]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2232      	movs	r2, #50	@ 0x32
 80019a6:	fb02 f303 	mul.w	r3, r2, r3
 80019aa:	4a3f      	ldr	r2, [pc, #252]	@ (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019ac:	fba2 2303 	umull	r2, r3, r2, r3
 80019b0:	0c9b      	lsrs	r3, r3, #18
 80019b2:	3301      	adds	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019b6:	e002      	b.n	80019be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019be:	4b38      	ldr	r3, [pc, #224]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019ca:	d102      	bne.n	80019d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f2      	bne.n	80019b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019d2:	4b33      	ldr	r3, [pc, #204]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019de:	d158      	bne.n	8001a92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e057      	b.n	8001a94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019e4:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019ea:	4a2d      	ldr	r2, [pc, #180]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80019f4:	e04d      	b.n	8001a92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019fc:	d141      	bne.n	8001a82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019fe:	4b28      	ldr	r3, [pc, #160]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a0a:	d131      	bne.n	8001a70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a0c:	4b24      	ldr	r3, [pc, #144]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a12:	4a23      	ldr	r2, [pc, #140]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a1c:	4b20      	ldr	r3, [pc, #128]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a24:	4a1e      	ldr	r2, [pc, #120]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2232      	movs	r2, #50	@ 0x32
 8001a32:	fb02 f303 	mul.w	r3, r2, r3
 8001a36:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a38:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3c:	0c9b      	lsrs	r3, r3, #18
 8001a3e:	3301      	adds	r3, #1
 8001a40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a42:	e002      	b.n	8001a4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a56:	d102      	bne.n	8001a5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f2      	bne.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a5e:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a6a:	d112      	bne.n	8001a92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e011      	b.n	8001a94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a70:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a80:	e007      	b.n	8001a92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a82:	4b07      	ldr	r3, [pc, #28]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a8a:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a90:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	431bde83 	.word	0x431bde83

08001aac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ab0:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	4a04      	ldr	r2, [pc, #16]	@ (8001ac8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ab6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aba:	6093      	str	r3, [r2, #8]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40007000 	.word	0x40007000

08001acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e2fe      	b.n	80020dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d075      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aea:	4b97      	ldr	r3, [pc, #604]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001af4:	4b94      	ldr	r3, [pc, #592]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	2b0c      	cmp	r3, #12
 8001b02:	d102      	bne.n	8001b0a <HAL_RCC_OscConfig+0x3e>
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d002      	beq.n	8001b10 <HAL_RCC_OscConfig+0x44>
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d10b      	bne.n	8001b28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b10:	4b8d      	ldr	r3, [pc, #564]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d05b      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x108>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d157      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e2d9      	b.n	80020dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b30:	d106      	bne.n	8001b40 <HAL_RCC_OscConfig+0x74>
 8001b32:	4b85      	ldr	r3, [pc, #532]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a84      	ldr	r2, [pc, #528]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e01d      	b.n	8001b7c <HAL_RCC_OscConfig+0xb0>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x98>
 8001b4a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a7e      	ldr	r2, [pc, #504]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001b50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4b7c      	ldr	r3, [pc, #496]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a7b      	ldr	r2, [pc, #492]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e00b      	b.n	8001b7c <HAL_RCC_OscConfig+0xb0>
 8001b64:	4b78      	ldr	r3, [pc, #480]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a77      	ldr	r2, [pc, #476]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	4b75      	ldr	r3, [pc, #468]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a74      	ldr	r2, [pc, #464]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001b76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d013      	beq.n	8001bac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7ff fa5c 	bl	8001040 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b8c:	f7ff fa58 	bl	8001040 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	@ 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e29e      	b.n	80020dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b9e:	4b6a      	ldr	r3, [pc, #424]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0xc0>
 8001baa:	e014      	b.n	8001bd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff fa48 	bl	8001040 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb4:	f7ff fa44 	bl	8001040 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b64      	cmp	r3, #100	@ 0x64
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e28a      	b.n	80020dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bc6:	4b60      	ldr	r3, [pc, #384]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0xe8>
 8001bd2:	e000      	b.n	8001bd6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d075      	beq.n	8001cce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001be2:	4b59      	ldr	r3, [pc, #356]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bec:	4b56      	ldr	r3, [pc, #344]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	2b0c      	cmp	r3, #12
 8001bfa:	d102      	bne.n	8001c02 <HAL_RCC_OscConfig+0x136>
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d002      	beq.n	8001c08 <HAL_RCC_OscConfig+0x13c>
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d11f      	bne.n	8001c48 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c08:	4b4f      	ldr	r3, [pc, #316]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_OscConfig+0x154>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e25d      	b.n	80020dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c20:	4b49      	ldr	r3, [pc, #292]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	061b      	lsls	r3, r3, #24
 8001c2e:	4946      	ldr	r1, [pc, #280]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c34:	4b45      	ldr	r3, [pc, #276]	@ (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff f9b5 	bl	8000fa8 <HAL_InitTick>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d043      	beq.n	8001ccc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e249      	b.n	80020dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d023      	beq.n	8001c98 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c50:	4b3d      	ldr	r3, [pc, #244]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a3c      	ldr	r2, [pc, #240]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001c56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff f9f0 	bl	8001040 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c64:	f7ff f9ec 	bl	8001040 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e232      	b.n	80020dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c76:	4b34      	ldr	r3, [pc, #208]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c82:	4b31      	ldr	r3, [pc, #196]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	061b      	lsls	r3, r3, #24
 8001c90:	492d      	ldr	r1, [pc, #180]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	604b      	str	r3, [r1, #4]
 8001c96:	e01a      	b.n	8001cce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c98:	4b2b      	ldr	r3, [pc, #172]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a2a      	ldr	r2, [pc, #168]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001c9e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff f9cc 	bl	8001040 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cac:	f7ff f9c8 	bl	8001040 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e20e      	b.n	80020dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cbe:	4b22      	ldr	r3, [pc, #136]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x1e0>
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ccc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d041      	beq.n	8001d5e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d01c      	beq.n	8001d1c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce2:	4b19      	ldr	r3, [pc, #100]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ce8:	4a17      	ldr	r2, [pc, #92]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf2:	f7ff f9a5 	bl	8001040 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfa:	f7ff f9a1 	bl	8001040 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e1e7      	b.n	80020dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0ef      	beq.n	8001cfa <HAL_RCC_OscConfig+0x22e>
 8001d1a:	e020      	b.n	8001d5e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d22:	4a09      	ldr	r2, [pc, #36]	@ (8001d48 <HAL_RCC_OscConfig+0x27c>)
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2c:	f7ff f988 	bl	8001040 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d32:	e00d      	b.n	8001d50 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d34:	f7ff f984 	bl	8001040 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d906      	bls.n	8001d50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e1ca      	b.n	80020dc <HAL_RCC_OscConfig+0x610>
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d50:	4b8c      	ldr	r3, [pc, #560]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1ea      	bne.n	8001d34 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80a6 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d70:	4b84      	ldr	r3, [pc, #528]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_OscConfig+0x2b4>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x2b6>
 8001d80:	2300      	movs	r3, #0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00d      	beq.n	8001da2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	4b7f      	ldr	r3, [pc, #508]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d90:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d92:	4b7c      	ldr	r3, [pc, #496]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da2:	4b79      	ldr	r3, [pc, #484]	@ (8001f88 <HAL_RCC_OscConfig+0x4bc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d118      	bne.n	8001de0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dae:	4b76      	ldr	r3, [pc, #472]	@ (8001f88 <HAL_RCC_OscConfig+0x4bc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a75      	ldr	r2, [pc, #468]	@ (8001f88 <HAL_RCC_OscConfig+0x4bc>)
 8001db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dba:	f7ff f941 	bl	8001040 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc2:	f7ff f93d 	bl	8001040 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e183      	b.n	80020dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd4:	4b6c      	ldr	r3, [pc, #432]	@ (8001f88 <HAL_RCC_OscConfig+0x4bc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d108      	bne.n	8001dfa <HAL_RCC_OscConfig+0x32e>
 8001de8:	4b66      	ldr	r3, [pc, #408]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dee:	4a65      	ldr	r2, [pc, #404]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001df8:	e024      	b.n	8001e44 <HAL_RCC_OscConfig+0x378>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b05      	cmp	r3, #5
 8001e00:	d110      	bne.n	8001e24 <HAL_RCC_OscConfig+0x358>
 8001e02:	4b60      	ldr	r3, [pc, #384]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e08:	4a5e      	ldr	r2, [pc, #376]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e12:	4b5c      	ldr	r3, [pc, #368]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e18:	4a5a      	ldr	r2, [pc, #360]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e22:	e00f      	b.n	8001e44 <HAL_RCC_OscConfig+0x378>
 8001e24:	4b57      	ldr	r3, [pc, #348]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e2a:	4a56      	ldr	r2, [pc, #344]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e34:	4b53      	ldr	r3, [pc, #332]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3a:	4a52      	ldr	r2, [pc, #328]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001e3c:	f023 0304 	bic.w	r3, r3, #4
 8001e40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d016      	beq.n	8001e7a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4c:	f7ff f8f8 	bl	8001040 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e52:	e00a      	b.n	8001e6a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e54:	f7ff f8f4 	bl	8001040 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e138      	b.n	80020dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e6a:	4b46      	ldr	r3, [pc, #280]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0ed      	beq.n	8001e54 <HAL_RCC_OscConfig+0x388>
 8001e78:	e015      	b.n	8001ea6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7a:	f7ff f8e1 	bl	8001040 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e80:	e00a      	b.n	8001e98 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e82:	f7ff f8dd 	bl	8001040 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e121      	b.n	80020dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e98:	4b3a      	ldr	r3, [pc, #232]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1ed      	bne.n	8001e82 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ea6:	7ffb      	ldrb	r3, [r7, #31]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d105      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eac:	4b35      	ldr	r3, [pc, #212]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb0:	4a34      	ldr	r2, [pc, #208]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001eb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eb6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0320 	and.w	r3, r3, #32
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d03c      	beq.n	8001f3e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01c      	beq.n	8001f06 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001edc:	f7ff f8b0 	bl	8001040 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ee4:	f7ff f8ac 	bl	8001040 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e0f2      	b.n	80020dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ef6:	4b23      	ldr	r3, [pc, #140]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0ef      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x418>
 8001f04:	e01b      	b.n	8001f3e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f06:	4b1f      	ldr	r3, [pc, #124]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001f08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001f0e:	f023 0301 	bic.w	r3, r3, #1
 8001f12:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f16:	f7ff f893 	bl	8001040 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f1e:	f7ff f88f 	bl	8001040 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0d5      	b.n	80020dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f30:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001f32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1ef      	bne.n	8001f1e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 80c9 	beq.w	80020da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f48:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 030c 	and.w	r3, r3, #12
 8001f50:	2b0c      	cmp	r3, #12
 8001f52:	f000 8083 	beq.w	800205c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d15e      	bne.n	800201c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5e:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a08      	ldr	r2, [pc, #32]	@ (8001f84 <HAL_RCC_OscConfig+0x4b8>)
 8001f64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6a:	f7ff f869 	bl	8001040 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f70:	e00c      	b.n	8001f8c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f72:	f7ff f865 	bl	8001040 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d905      	bls.n	8001f8c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e0ab      	b.n	80020dc <HAL_RCC_OscConfig+0x610>
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f8c:	4b55      	ldr	r3, [pc, #340]	@ (80020e4 <HAL_RCC_OscConfig+0x618>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1ec      	bne.n	8001f72 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f98:	4b52      	ldr	r3, [pc, #328]	@ (80020e4 <HAL_RCC_OscConfig+0x618>)
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	4b52      	ldr	r3, [pc, #328]	@ (80020e8 <HAL_RCC_OscConfig+0x61c>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6a11      	ldr	r1, [r2, #32]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fa8:	3a01      	subs	r2, #1
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	4311      	orrs	r1, r2
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001fb2:	0212      	lsls	r2, r2, #8
 8001fb4:	4311      	orrs	r1, r2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001fba:	0852      	lsrs	r2, r2, #1
 8001fbc:	3a01      	subs	r2, #1
 8001fbe:	0552      	lsls	r2, r2, #21
 8001fc0:	4311      	orrs	r1, r2
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001fc6:	0852      	lsrs	r2, r2, #1
 8001fc8:	3a01      	subs	r2, #1
 8001fca:	0652      	lsls	r2, r2, #25
 8001fcc:	4311      	orrs	r1, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001fd2:	06d2      	lsls	r2, r2, #27
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	4943      	ldr	r1, [pc, #268]	@ (80020e4 <HAL_RCC_OscConfig+0x618>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fdc:	4b41      	ldr	r3, [pc, #260]	@ (80020e4 <HAL_RCC_OscConfig+0x618>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a40      	ldr	r2, [pc, #256]	@ (80020e4 <HAL_RCC_OscConfig+0x618>)
 8001fe2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fe6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80020e4 <HAL_RCC_OscConfig+0x618>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4a3d      	ldr	r2, [pc, #244]	@ (80020e4 <HAL_RCC_OscConfig+0x618>)
 8001fee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ff2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7ff f824 	bl	8001040 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7ff f820 	bl	8001040 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e066      	b.n	80020dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200e:	4b35      	ldr	r3, [pc, #212]	@ (80020e4 <HAL_RCC_OscConfig+0x618>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x530>
 800201a:	e05e      	b.n	80020da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201c:	4b31      	ldr	r3, [pc, #196]	@ (80020e4 <HAL_RCC_OscConfig+0x618>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a30      	ldr	r2, [pc, #192]	@ (80020e4 <HAL_RCC_OscConfig+0x618>)
 8002022:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7ff f80a 	bl	8001040 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002030:	f7ff f806 	bl	8001040 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e04c      	b.n	80020dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002042:	4b28      	ldr	r3, [pc, #160]	@ (80020e4 <HAL_RCC_OscConfig+0x618>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800204e:	4b25      	ldr	r3, [pc, #148]	@ (80020e4 <HAL_RCC_OscConfig+0x618>)
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	4924      	ldr	r1, [pc, #144]	@ (80020e4 <HAL_RCC_OscConfig+0x618>)
 8002054:	4b25      	ldr	r3, [pc, #148]	@ (80020ec <HAL_RCC_OscConfig+0x620>)
 8002056:	4013      	ands	r3, r2
 8002058:	60cb      	str	r3, [r1, #12]
 800205a:	e03e      	b.n	80020da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e039      	b.n	80020dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002068:	4b1e      	ldr	r3, [pc, #120]	@ (80020e4 <HAL_RCC_OscConfig+0x618>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f003 0203 	and.w	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	429a      	cmp	r2, r3
 800207a:	d12c      	bne.n	80020d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002086:	3b01      	subs	r3, #1
 8002088:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d123      	bne.n	80020d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d11b      	bne.n	80020d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d113      	bne.n	80020d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b8:	085b      	lsrs	r3, r3, #1
 80020ba:	3b01      	subs	r3, #1
 80020bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020be:	429a      	cmp	r2, r3
 80020c0:	d109      	bne.n	80020d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020cc:	085b      	lsrs	r3, r3, #1
 80020ce:	3b01      	subs	r3, #1
 80020d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3720      	adds	r7, #32
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000
 80020e8:	019f800c 	.word	0x019f800c
 80020ec:	feeefffc 	.word	0xfeeefffc

080020f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e11e      	b.n	8002346 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002108:	4b91      	ldr	r3, [pc, #580]	@ (8002350 <HAL_RCC_ClockConfig+0x260>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d910      	bls.n	8002138 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002116:	4b8e      	ldr	r3, [pc, #568]	@ (8002350 <HAL_RCC_ClockConfig+0x260>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 020f 	bic.w	r2, r3, #15
 800211e:	498c      	ldr	r1, [pc, #560]	@ (8002350 <HAL_RCC_ClockConfig+0x260>)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	4b8a      	ldr	r3, [pc, #552]	@ (8002350 <HAL_RCC_ClockConfig+0x260>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e106      	b.n	8002346 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d073      	beq.n	800222c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b03      	cmp	r3, #3
 800214a:	d129      	bne.n	80021a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800214c:	4b81      	ldr	r3, [pc, #516]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0f4      	b.n	8002346 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800215c:	f000 f99e 	bl	800249c <RCC_GetSysClockFreqFromPLLSource>
 8002160:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4a7c      	ldr	r2, [pc, #496]	@ (8002358 <HAL_RCC_ClockConfig+0x268>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d93f      	bls.n	80021ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800216a:	4b7a      	ldr	r3, [pc, #488]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d009      	beq.n	800218a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800217e:	2b00      	cmp	r3, #0
 8002180:	d033      	beq.n	80021ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002186:	2b00      	cmp	r3, #0
 8002188:	d12f      	bne.n	80021ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800218a:	4b72      	ldr	r3, [pc, #456]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002192:	4a70      	ldr	r2, [pc, #448]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 8002194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002198:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800219a:	2380      	movs	r3, #128	@ 0x80
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e024      	b.n	80021ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d107      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d109      	bne.n	80021c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0c6      	b.n	8002346 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021b8:	4b66      	ldr	r3, [pc, #408]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0be      	b.n	8002346 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80021c8:	f000 f8ce 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4a61      	ldr	r2, [pc, #388]	@ (8002358 <HAL_RCC_ClockConfig+0x268>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d909      	bls.n	80021ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021de:	4a5d      	ldr	r2, [pc, #372]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 80021e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80021e6:	2380      	movs	r3, #128	@ 0x80
 80021e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f023 0203 	bic.w	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4957      	ldr	r1, [pc, #348]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021fc:	f7fe ff20 	bl	8001040 <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	e00a      	b.n	800221a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002204:	f7fe ff1c 	bl	8001040 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e095      	b.n	8002346 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	4b4e      	ldr	r3, [pc, #312]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 020c 	and.w	r2, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	429a      	cmp	r2, r3
 800222a:	d1eb      	bne.n	8002204 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d023      	beq.n	8002280 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002244:	4b43      	ldr	r3, [pc, #268]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a42      	ldr	r2, [pc, #264]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 800224a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800224e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d007      	beq.n	800226c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800225c:	4b3d      	ldr	r3, [pc, #244]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002264:	4a3b      	ldr	r2, [pc, #236]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 8002266:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800226a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226c:	4b39      	ldr	r3, [pc, #228]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	4936      	ldr	r1, [pc, #216]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
 800227e:	e008      	b.n	8002292 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2b80      	cmp	r3, #128	@ 0x80
 8002284:	d105      	bne.n	8002292 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002286:	4b33      	ldr	r3, [pc, #204]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	4a32      	ldr	r2, [pc, #200]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 800228c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002290:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002292:	4b2f      	ldr	r3, [pc, #188]	@ (8002350 <HAL_RCC_ClockConfig+0x260>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d21d      	bcs.n	80022dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002350 <HAL_RCC_ClockConfig+0x260>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f023 020f 	bic.w	r2, r3, #15
 80022a8:	4929      	ldr	r1, [pc, #164]	@ (8002350 <HAL_RCC_ClockConfig+0x260>)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022b0:	f7fe fec6 	bl	8001040 <HAL_GetTick>
 80022b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	e00a      	b.n	80022ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b8:	f7fe fec2 	bl	8001040 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e03b      	b.n	8002346 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b20      	ldr	r3, [pc, #128]	@ (8002350 <HAL_RCC_ClockConfig+0x260>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d1ed      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4917      	ldr	r1, [pc, #92]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002306:	4b13      	ldr	r3, [pc, #76]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	490f      	ldr	r1, [pc, #60]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800231a:	f000 f825 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 800231e:	4602      	mov	r2, r0
 8002320:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <HAL_RCC_ClockConfig+0x264>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	490c      	ldr	r1, [pc, #48]	@ (800235c <HAL_RCC_ClockConfig+0x26c>)
 800232c:	5ccb      	ldrb	r3, [r1, r3]
 800232e:	f003 031f 	and.w	r3, r3, #31
 8002332:	fa22 f303 	lsr.w	r3, r2, r3
 8002336:	4a0a      	ldr	r2, [pc, #40]	@ (8002360 <HAL_RCC_ClockConfig+0x270>)
 8002338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800233a:	4b0a      	ldr	r3, [pc, #40]	@ (8002364 <HAL_RCC_ClockConfig+0x274>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fe32 	bl	8000fa8 <HAL_InitTick>
 8002344:	4603      	mov	r3, r0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40022000 	.word	0x40022000
 8002354:	40021000 	.word	0x40021000
 8002358:	04c4b400 	.word	0x04c4b400
 800235c:	080056a0 	.word	0x080056a0
 8002360:	20000000 	.word	0x20000000
 8002364:	20000004 	.word	0x20000004

08002368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002368:	b480      	push	{r7}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800236e:	4b2c      	ldr	r3, [pc, #176]	@ (8002420 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b04      	cmp	r3, #4
 8002378:	d102      	bne.n	8002380 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800237a:	4b2a      	ldr	r3, [pc, #168]	@ (8002424 <HAL_RCC_GetSysClockFreq+0xbc>)
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	e047      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002380:	4b27      	ldr	r3, [pc, #156]	@ (8002420 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b08      	cmp	r3, #8
 800238a:	d102      	bne.n	8002392 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800238c:	4b26      	ldr	r3, [pc, #152]	@ (8002428 <HAL_RCC_GetSysClockFreq+0xc0>)
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	e03e      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002392:	4b23      	ldr	r3, [pc, #140]	@ (8002420 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b0c      	cmp	r3, #12
 800239c:	d136      	bne.n	800240c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800239e:	4b20      	ldr	r3, [pc, #128]	@ (8002420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	3301      	adds	r3, #1
 80023b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d10c      	bne.n	80023d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002428 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c4:	4a16      	ldr	r2, [pc, #88]	@ (8002420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c6:	68d2      	ldr	r2, [r2, #12]
 80023c8:	0a12      	lsrs	r2, r2, #8
 80023ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	617b      	str	r3, [r7, #20]
      break;
 80023d4:	e00c      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023d6:	4a13      	ldr	r2, [pc, #76]	@ (8002424 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	fbb2 f3f3 	udiv	r3, r2, r3
 80023de:	4a10      	ldr	r2, [pc, #64]	@ (8002420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e0:	68d2      	ldr	r2, [r2, #12]
 80023e2:	0a12      	lsrs	r2, r2, #8
 80023e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80023e8:	fb02 f303 	mul.w	r3, r2, r3
 80023ec:	617b      	str	r3, [r7, #20]
      break;
 80023ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	0e5b      	lsrs	r3, r3, #25
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	3301      	adds	r3, #1
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	fbb2 f3f3 	udiv	r3, r2, r3
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	e001      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002410:	693b      	ldr	r3, [r7, #16]
}
 8002412:	4618      	mov	r0, r3
 8002414:	371c      	adds	r7, #28
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	00f42400 	.word	0x00f42400
 8002428:	016e3600 	.word	0x016e3600

0800242c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002430:	4b03      	ldr	r3, [pc, #12]	@ (8002440 <HAL_RCC_GetHCLKFreq+0x14>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000000 	.word	0x20000000

08002444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002448:	f7ff fff0 	bl	800242c <HAL_RCC_GetHCLKFreq>
 800244c:	4602      	mov	r2, r0
 800244e:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	0a1b      	lsrs	r3, r3, #8
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	4904      	ldr	r1, [pc, #16]	@ (800246c <HAL_RCC_GetPCLK1Freq+0x28>)
 800245a:	5ccb      	ldrb	r3, [r1, r3]
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002464:	4618      	mov	r0, r3
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000
 800246c:	080056b0 	.word	0x080056b0

08002470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002474:	f7ff ffda 	bl	800242c <HAL_RCC_GetHCLKFreq>
 8002478:	4602      	mov	r2, r0
 800247a:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <HAL_RCC_GetPCLK2Freq+0x24>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	0adb      	lsrs	r3, r3, #11
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	4904      	ldr	r1, [pc, #16]	@ (8002498 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002486:	5ccb      	ldrb	r3, [r1, r3]
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002490:	4618      	mov	r0, r3
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	080056b0 	.word	0x080056b0

0800249c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024a2:	4b1e      	ldr	r3, [pc, #120]	@ (800251c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024ac:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	3301      	adds	r3, #1
 80024b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d10c      	bne.n	80024da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024c0:	4a17      	ldr	r2, [pc, #92]	@ (8002520 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	4a14      	ldr	r2, [pc, #80]	@ (800251c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024ca:	68d2      	ldr	r2, [r2, #12]
 80024cc:	0a12      	lsrs	r2, r2, #8
 80024ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	617b      	str	r3, [r7, #20]
    break;
 80024d8:	e00c      	b.n	80024f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024da:	4a12      	ldr	r2, [pc, #72]	@ (8002524 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e2:	4a0e      	ldr	r2, [pc, #56]	@ (800251c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024e4:	68d2      	ldr	r2, [r2, #12]
 80024e6:	0a12      	lsrs	r2, r2, #8
 80024e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024ec:	fb02 f303 	mul.w	r3, r2, r3
 80024f0:	617b      	str	r3, [r7, #20]
    break;
 80024f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024f4:	4b09      	ldr	r3, [pc, #36]	@ (800251c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	0e5b      	lsrs	r3, r3, #25
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	3301      	adds	r3, #1
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	fbb2 f3f3 	udiv	r3, r2, r3
 800250c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800250e:	687b      	ldr	r3, [r7, #4]
}
 8002510:	4618      	mov	r0, r3
 8002512:	371c      	adds	r7, #28
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	40021000 	.word	0x40021000
 8002520:	016e3600 	.word	0x016e3600
 8002524:	00f42400 	.word	0x00f42400

08002528 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002530:	2300      	movs	r3, #0
 8002532:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002534:	2300      	movs	r3, #0
 8002536:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8098 	beq.w	8002676 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002546:	2300      	movs	r3, #0
 8002548:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254a:	4b43      	ldr	r3, [pc, #268]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800254c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10d      	bne.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	4b40      	ldr	r3, [pc, #256]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255a:	4a3f      	ldr	r2, [pc, #252]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002560:	6593      	str	r3, [r2, #88]	@ 0x58
 8002562:	4b3d      	ldr	r3, [pc, #244]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256e:	2301      	movs	r3, #1
 8002570:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002572:	4b3a      	ldr	r3, [pc, #232]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a39      	ldr	r2, [pc, #228]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800257c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800257e:	f7fe fd5f 	bl	8001040 <HAL_GetTick>
 8002582:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002584:	e009      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002586:	f7fe fd5b 	bl	8001040 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d902      	bls.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	74fb      	strb	r3, [r7, #19]
        break;
 8002598:	e005      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800259a:	4b30      	ldr	r3, [pc, #192]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0ef      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d159      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d01e      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d019      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025c8:	4b23      	ldr	r3, [pc, #140]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025d4:	4b20      	ldr	r3, [pc, #128]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025da:	4a1f      	ldr	r2, [pc, #124]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025f4:	4a18      	ldr	r2, [pc, #96]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d016      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002606:	f7fe fd1b 	bl	8001040 <HAL_GetTick>
 800260a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800260c:	e00b      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260e:	f7fe fd17 	bl	8001040 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800261c:	4293      	cmp	r3, r2
 800261e:	d902      	bls.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	74fb      	strb	r3, [r7, #19]
            break;
 8002624:	e006      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002626:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0ec      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002634:	7cfb      	ldrb	r3, [r7, #19]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10b      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800263a:	4b07      	ldr	r3, [pc, #28]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800263c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002640:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	4903      	ldr	r1, [pc, #12]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002650:	e008      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002652:	7cfb      	ldrb	r3, [r7, #19]
 8002654:	74bb      	strb	r3, [r7, #18]
 8002656:	e005      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002658:	40021000 	.word	0x40021000
 800265c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002660:	7cfb      	ldrb	r3, [r7, #19]
 8002662:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002664:	7c7b      	ldrb	r3, [r7, #17]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d105      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266a:	4ba6      	ldr	r3, [pc, #664]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800266c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266e:	4aa5      	ldr	r2, [pc, #660]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002670:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002674:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00a      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002682:	4ba0      	ldr	r3, [pc, #640]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002688:	f023 0203 	bic.w	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	499c      	ldr	r1, [pc, #624]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026a4:	4b97      	ldr	r3, [pc, #604]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026aa:	f023 020c 	bic.w	r2, r3, #12
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	4994      	ldr	r1, [pc, #592]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026c6:	4b8f      	ldr	r3, [pc, #572]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	498b      	ldr	r1, [pc, #556]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026e8:	4b86      	ldr	r3, [pc, #536]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	4983      	ldr	r1, [pc, #524]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00a      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800270a:	4b7e      	ldr	r3, [pc, #504]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002710:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	497a      	ldr	r1, [pc, #488]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800272c:	4b75      	ldr	r3, [pc, #468]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002732:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	4972      	ldr	r1, [pc, #456]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800274e:	4b6d      	ldr	r3, [pc, #436]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002754:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	4969      	ldr	r1, [pc, #420]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00a      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002770:	4b64      	ldr	r3, [pc, #400]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002776:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	4961      	ldr	r1, [pc, #388]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002792:	4b5c      	ldr	r3, [pc, #368]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002798:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a0:	4958      	ldr	r1, [pc, #352]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d015      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027b4:	4b53      	ldr	r3, [pc, #332]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c2:	4950      	ldr	r1, [pc, #320]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027d2:	d105      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027de:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d015      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027ec:	4b45      	ldr	r3, [pc, #276]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fa:	4942      	ldr	r1, [pc, #264]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002806:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800280a:	d105      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800280c:	4b3d      	ldr	r3, [pc, #244]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4a3c      	ldr	r2, [pc, #240]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002816:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d015      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002824:	4b37      	ldr	r3, [pc, #220]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	4934      	ldr	r1, [pc, #208]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002842:	d105      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002844:	4b2f      	ldr	r3, [pc, #188]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4a2e      	ldr	r2, [pc, #184]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800284a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800284e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d015      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800285c:	4b29      	ldr	r3, [pc, #164]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002862:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800286a:	4926      	ldr	r1, [pc, #152]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002876:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800287a:	d105      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800287c:	4b21      	ldr	r3, [pc, #132]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4a20      	ldr	r2, [pc, #128]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002882:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002886:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d015      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002894:	4b1b      	ldr	r3, [pc, #108]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a2:	4918      	ldr	r1, [pc, #96]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028b2:	d105      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028b4:	4b13      	ldr	r3, [pc, #76]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4a12      	ldr	r2, [pc, #72]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d015      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028da:	490a      	ldr	r1, [pc, #40]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028ea:	d105      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028ec:	4b05      	ldr	r3, [pc, #20]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4a04      	ldr	r2, [pc, #16]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80028f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000

08002908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e049      	b.n	80029ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fe f8ce 	bl	8000ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3304      	adds	r3, #4
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f000 faa4 	bl	8002e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e049      	b.n	8002a5c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d106      	bne.n	80029e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f841 	bl	8002a64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2202      	movs	r2, #2
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3304      	adds	r3, #4
 80029f2:	4619      	mov	r1, r3
 80029f4:	4610      	mov	r0, r2
 80029f6:	f000 fa4d 	bl	8002e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e0ff      	b.n	8002c96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b14      	cmp	r3, #20
 8002aa2:	f200 80f0 	bhi.w	8002c86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8002aac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aac:	08002b01 	.word	0x08002b01
 8002ab0:	08002c87 	.word	0x08002c87
 8002ab4:	08002c87 	.word	0x08002c87
 8002ab8:	08002c87 	.word	0x08002c87
 8002abc:	08002b41 	.word	0x08002b41
 8002ac0:	08002c87 	.word	0x08002c87
 8002ac4:	08002c87 	.word	0x08002c87
 8002ac8:	08002c87 	.word	0x08002c87
 8002acc:	08002b83 	.word	0x08002b83
 8002ad0:	08002c87 	.word	0x08002c87
 8002ad4:	08002c87 	.word	0x08002c87
 8002ad8:	08002c87 	.word	0x08002c87
 8002adc:	08002bc3 	.word	0x08002bc3
 8002ae0:	08002c87 	.word	0x08002c87
 8002ae4:	08002c87 	.word	0x08002c87
 8002ae8:	08002c87 	.word	0x08002c87
 8002aec:	08002c05 	.word	0x08002c05
 8002af0:	08002c87 	.word	0x08002c87
 8002af4:	08002c87 	.word	0x08002c87
 8002af8:	08002c87 	.word	0x08002c87
 8002afc:	08002c45 	.word	0x08002c45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 fa60 	bl	8002fcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0208 	orr.w	r2, r2, #8
 8002b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699a      	ldr	r2, [r3, #24]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0204 	bic.w	r2, r2, #4
 8002b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6999      	ldr	r1, [r3, #24]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	691a      	ldr	r2, [r3, #16]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	619a      	str	r2, [r3, #24]
      break;
 8002b3e:	e0a5      	b.n	8002c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 fad0 	bl	80030ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699a      	ldr	r2, [r3, #24]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6999      	ldr	r1, [r3, #24]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	021a      	lsls	r2, r3, #8
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	619a      	str	r2, [r3, #24]
      break;
 8002b80:	e084      	b.n	8002c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 fb39 	bl	8003200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69da      	ldr	r2, [r3, #28]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0208 	orr.w	r2, r2, #8
 8002b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69da      	ldr	r2, [r3, #28]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0204 	bic.w	r2, r2, #4
 8002bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69d9      	ldr	r1, [r3, #28]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	61da      	str	r2, [r3, #28]
      break;
 8002bc0:	e064      	b.n	8002c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 fba1 	bl	8003310 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69da      	ldr	r2, [r3, #28]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	69da      	ldr	r2, [r3, #28]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	69d9      	ldr	r1, [r3, #28]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	021a      	lsls	r2, r3, #8
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	61da      	str	r2, [r3, #28]
      break;
 8002c02:	e043      	b.n	8002c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fc0a 	bl	8003424 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0208 	orr.w	r2, r2, #8
 8002c1e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0204 	bic.w	r2, r2, #4
 8002c2e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002c42:	e023      	b.n	8002c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fc4e 	bl	80034ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c5e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c6e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	021a      	lsls	r2, r3, #8
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002c84:	e002      	b.n	8002c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	75fb      	strb	r3, [r7, #23]
      break;
 8002c8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop

08002ca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_TIM_ConfigClockSource+0x1c>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e0de      	b.n	8002e7a <HAL_TIM_ConfigClockSource+0x1da>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002cda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ce6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a63      	ldr	r2, [pc, #396]	@ (8002e84 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	f000 80a9 	beq.w	8002e4e <HAL_TIM_ConfigClockSource+0x1ae>
 8002cfc:	4a61      	ldr	r2, [pc, #388]	@ (8002e84 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	f200 80ae 	bhi.w	8002e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d04:	4a60      	ldr	r2, [pc, #384]	@ (8002e88 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	f000 80a1 	beq.w	8002e4e <HAL_TIM_ConfigClockSource+0x1ae>
 8002d0c:	4a5e      	ldr	r2, [pc, #376]	@ (8002e88 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	f200 80a6 	bhi.w	8002e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d14:	4a5d      	ldr	r2, [pc, #372]	@ (8002e8c <HAL_TIM_ConfigClockSource+0x1ec>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	f000 8099 	beq.w	8002e4e <HAL_TIM_ConfigClockSource+0x1ae>
 8002d1c:	4a5b      	ldr	r2, [pc, #364]	@ (8002e8c <HAL_TIM_ConfigClockSource+0x1ec>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	f200 809e 	bhi.w	8002e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d24:	4a5a      	ldr	r2, [pc, #360]	@ (8002e90 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	f000 8091 	beq.w	8002e4e <HAL_TIM_ConfigClockSource+0x1ae>
 8002d2c:	4a58      	ldr	r2, [pc, #352]	@ (8002e90 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	f200 8096 	bhi.w	8002e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d34:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002d38:	f000 8089 	beq.w	8002e4e <HAL_TIM_ConfigClockSource+0x1ae>
 8002d3c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002d40:	f200 808e 	bhi.w	8002e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d48:	d03e      	beq.n	8002dc8 <HAL_TIM_ConfigClockSource+0x128>
 8002d4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d4e:	f200 8087 	bhi.w	8002e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d56:	f000 8086 	beq.w	8002e66 <HAL_TIM_ConfigClockSource+0x1c6>
 8002d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d5e:	d87f      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d60:	2b70      	cmp	r3, #112	@ 0x70
 8002d62:	d01a      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0xfa>
 8002d64:	2b70      	cmp	r3, #112	@ 0x70
 8002d66:	d87b      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d68:	2b60      	cmp	r3, #96	@ 0x60
 8002d6a:	d050      	beq.n	8002e0e <HAL_TIM_ConfigClockSource+0x16e>
 8002d6c:	2b60      	cmp	r3, #96	@ 0x60
 8002d6e:	d877      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d70:	2b50      	cmp	r3, #80	@ 0x50
 8002d72:	d03c      	beq.n	8002dee <HAL_TIM_ConfigClockSource+0x14e>
 8002d74:	2b50      	cmp	r3, #80	@ 0x50
 8002d76:	d873      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d78:	2b40      	cmp	r3, #64	@ 0x40
 8002d7a:	d058      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0x18e>
 8002d7c:	2b40      	cmp	r3, #64	@ 0x40
 8002d7e:	d86f      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d80:	2b30      	cmp	r3, #48	@ 0x30
 8002d82:	d064      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x1ae>
 8002d84:	2b30      	cmp	r3, #48	@ 0x30
 8002d86:	d86b      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d060      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x1ae>
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d867      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d05c      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x1ae>
 8002d94:	2b10      	cmp	r3, #16
 8002d96:	d05a      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x1ae>
 8002d98:	e062      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002daa:	f000 fc81 	bl	80036b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002dbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	609a      	str	r2, [r3, #8]
      break;
 8002dc6:	e04f      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dd8:	f000 fc6a 	bl	80036b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dea:	609a      	str	r2, [r3, #8]
      break;
 8002dec:	e03c      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f000 fbdc 	bl	80035b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2150      	movs	r1, #80	@ 0x50
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fc35 	bl	8003676 <TIM_ITRx_SetConfig>
      break;
 8002e0c:	e02c      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f000 fbfb 	bl	8003616 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2160      	movs	r1, #96	@ 0x60
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fc25 	bl	8003676 <TIM_ITRx_SetConfig>
      break;
 8002e2c:	e01c      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f000 fbbc 	bl	80035b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2140      	movs	r1, #64	@ 0x40
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fc15 	bl	8003676 <TIM_ITRx_SetConfig>
      break;
 8002e4c:	e00c      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4619      	mov	r1, r3
 8002e58:	4610      	mov	r0, r2
 8002e5a:	f000 fc0c 	bl	8003676 <TIM_ITRx_SetConfig>
      break;
 8002e5e:	e003      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
      break;
 8002e64:	e000      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002e66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	00100070 	.word	0x00100070
 8002e88:	00100040 	.word	0x00100040
 8002e8c:	00100030 	.word	0x00100030
 8002e90:	00100020 	.word	0x00100020

08002e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a42      	ldr	r2, [pc, #264]	@ (8002fb0 <TIM_Base_SetConfig+0x11c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00f      	beq.n	8002ecc <TIM_Base_SetConfig+0x38>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eb2:	d00b      	beq.n	8002ecc <TIM_Base_SetConfig+0x38>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a3f      	ldr	r2, [pc, #252]	@ (8002fb4 <TIM_Base_SetConfig+0x120>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d007      	beq.n	8002ecc <TIM_Base_SetConfig+0x38>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a3e      	ldr	r2, [pc, #248]	@ (8002fb8 <TIM_Base_SetConfig+0x124>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d003      	beq.n	8002ecc <TIM_Base_SetConfig+0x38>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a3d      	ldr	r2, [pc, #244]	@ (8002fbc <TIM_Base_SetConfig+0x128>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d108      	bne.n	8002ede <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a33      	ldr	r2, [pc, #204]	@ (8002fb0 <TIM_Base_SetConfig+0x11c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d01b      	beq.n	8002f1e <TIM_Base_SetConfig+0x8a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eec:	d017      	beq.n	8002f1e <TIM_Base_SetConfig+0x8a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a30      	ldr	r2, [pc, #192]	@ (8002fb4 <TIM_Base_SetConfig+0x120>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d013      	beq.n	8002f1e <TIM_Base_SetConfig+0x8a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a2f      	ldr	r2, [pc, #188]	@ (8002fb8 <TIM_Base_SetConfig+0x124>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00f      	beq.n	8002f1e <TIM_Base_SetConfig+0x8a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a2e      	ldr	r2, [pc, #184]	@ (8002fbc <TIM_Base_SetConfig+0x128>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00b      	beq.n	8002f1e <TIM_Base_SetConfig+0x8a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a2d      	ldr	r2, [pc, #180]	@ (8002fc0 <TIM_Base_SetConfig+0x12c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d007      	beq.n	8002f1e <TIM_Base_SetConfig+0x8a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a2c      	ldr	r2, [pc, #176]	@ (8002fc4 <TIM_Base_SetConfig+0x130>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d003      	beq.n	8002f1e <TIM_Base_SetConfig+0x8a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a2b      	ldr	r2, [pc, #172]	@ (8002fc8 <TIM_Base_SetConfig+0x134>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d108      	bne.n	8002f30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a16      	ldr	r2, [pc, #88]	@ (8002fb0 <TIM_Base_SetConfig+0x11c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00f      	beq.n	8002f7c <TIM_Base_SetConfig+0xe8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a17      	ldr	r2, [pc, #92]	@ (8002fbc <TIM_Base_SetConfig+0x128>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d00b      	beq.n	8002f7c <TIM_Base_SetConfig+0xe8>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a16      	ldr	r2, [pc, #88]	@ (8002fc0 <TIM_Base_SetConfig+0x12c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d007      	beq.n	8002f7c <TIM_Base_SetConfig+0xe8>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a15      	ldr	r2, [pc, #84]	@ (8002fc4 <TIM_Base_SetConfig+0x130>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d003      	beq.n	8002f7c <TIM_Base_SetConfig+0xe8>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a14      	ldr	r2, [pc, #80]	@ (8002fc8 <TIM_Base_SetConfig+0x134>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d103      	bne.n	8002f84 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d105      	bne.n	8002fa2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f023 0201 	bic.w	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	611a      	str	r2, [r3, #16]
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40012c00 	.word	0x40012c00
 8002fb4:	40000400 	.word	0x40000400
 8002fb8:	40000800 	.word	0x40000800
 8002fbc:	40013400 	.word	0x40013400
 8002fc0:	40014000 	.word	0x40014000
 8002fc4:	40014400 	.word	0x40014400
 8002fc8:	40014800 	.word	0x40014800

08002fcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f023 0201 	bic.w	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 0303 	bic.w	r3, r3, #3
 8003006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f023 0302 	bic.w	r3, r3, #2
 8003018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4313      	orrs	r3, r2
 8003022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a2c      	ldr	r2, [pc, #176]	@ (80030d8 <TIM_OC1_SetConfig+0x10c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00f      	beq.n	800304c <TIM_OC1_SetConfig+0x80>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a2b      	ldr	r2, [pc, #172]	@ (80030dc <TIM_OC1_SetConfig+0x110>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00b      	beq.n	800304c <TIM_OC1_SetConfig+0x80>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a2a      	ldr	r2, [pc, #168]	@ (80030e0 <TIM_OC1_SetConfig+0x114>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <TIM_OC1_SetConfig+0x80>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a29      	ldr	r2, [pc, #164]	@ (80030e4 <TIM_OC1_SetConfig+0x118>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d003      	beq.n	800304c <TIM_OC1_SetConfig+0x80>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a28      	ldr	r2, [pc, #160]	@ (80030e8 <TIM_OC1_SetConfig+0x11c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d10c      	bne.n	8003066 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f023 0308 	bic.w	r3, r3, #8
 8003052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f023 0304 	bic.w	r3, r3, #4
 8003064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a1b      	ldr	r2, [pc, #108]	@ (80030d8 <TIM_OC1_SetConfig+0x10c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00f      	beq.n	800308e <TIM_OC1_SetConfig+0xc2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a1a      	ldr	r2, [pc, #104]	@ (80030dc <TIM_OC1_SetConfig+0x110>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00b      	beq.n	800308e <TIM_OC1_SetConfig+0xc2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a19      	ldr	r2, [pc, #100]	@ (80030e0 <TIM_OC1_SetConfig+0x114>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d007      	beq.n	800308e <TIM_OC1_SetConfig+0xc2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a18      	ldr	r2, [pc, #96]	@ (80030e4 <TIM_OC1_SetConfig+0x118>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d003      	beq.n	800308e <TIM_OC1_SetConfig+0xc2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a17      	ldr	r2, [pc, #92]	@ (80030e8 <TIM_OC1_SetConfig+0x11c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d111      	bne.n	80030b2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800309c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	621a      	str	r2, [r3, #32]
}
 80030cc:	bf00      	nop
 80030ce:	371c      	adds	r7, #28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	40012c00 	.word	0x40012c00
 80030dc:	40013400 	.word	0x40013400
 80030e0:	40014000 	.word	0x40014000
 80030e4:	40014400 	.word	0x40014400
 80030e8:	40014800 	.word	0x40014800

080030ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f023 0210 	bic.w	r2, r3, #16
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800311a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800311e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f023 0320 	bic.w	r3, r3, #32
 800313a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a28      	ldr	r2, [pc, #160]	@ (80031ec <TIM_OC2_SetConfig+0x100>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d003      	beq.n	8003158 <TIM_OC2_SetConfig+0x6c>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a27      	ldr	r2, [pc, #156]	@ (80031f0 <TIM_OC2_SetConfig+0x104>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d10d      	bne.n	8003174 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800315e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003172:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a1d      	ldr	r2, [pc, #116]	@ (80031ec <TIM_OC2_SetConfig+0x100>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00f      	beq.n	800319c <TIM_OC2_SetConfig+0xb0>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a1c      	ldr	r2, [pc, #112]	@ (80031f0 <TIM_OC2_SetConfig+0x104>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d00b      	beq.n	800319c <TIM_OC2_SetConfig+0xb0>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a1b      	ldr	r2, [pc, #108]	@ (80031f4 <TIM_OC2_SetConfig+0x108>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d007      	beq.n	800319c <TIM_OC2_SetConfig+0xb0>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a1a      	ldr	r2, [pc, #104]	@ (80031f8 <TIM_OC2_SetConfig+0x10c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d003      	beq.n	800319c <TIM_OC2_SetConfig+0xb0>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a19      	ldr	r2, [pc, #100]	@ (80031fc <TIM_OC2_SetConfig+0x110>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d113      	bne.n	80031c4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	621a      	str	r2, [r3, #32]
}
 80031de:	bf00      	nop
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40012c00 	.word	0x40012c00
 80031f0:	40013400 	.word	0x40013400
 80031f4:	40014000 	.word	0x40014000
 80031f8:	40014400 	.word	0x40014400
 80031fc:	40014800 	.word	0x40014800

08003200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800322e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0303 	bic.w	r3, r3, #3
 800323a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800324c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4313      	orrs	r3, r2
 8003258:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a27      	ldr	r2, [pc, #156]	@ (80032fc <TIM_OC3_SetConfig+0xfc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d003      	beq.n	800326a <TIM_OC3_SetConfig+0x6a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a26      	ldr	r2, [pc, #152]	@ (8003300 <TIM_OC3_SetConfig+0x100>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d10d      	bne.n	8003286 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	021b      	lsls	r3, r3, #8
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a1c      	ldr	r2, [pc, #112]	@ (80032fc <TIM_OC3_SetConfig+0xfc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00f      	beq.n	80032ae <TIM_OC3_SetConfig+0xae>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a1b      	ldr	r2, [pc, #108]	@ (8003300 <TIM_OC3_SetConfig+0x100>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00b      	beq.n	80032ae <TIM_OC3_SetConfig+0xae>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a1a      	ldr	r2, [pc, #104]	@ (8003304 <TIM_OC3_SetConfig+0x104>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d007      	beq.n	80032ae <TIM_OC3_SetConfig+0xae>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a19      	ldr	r2, [pc, #100]	@ (8003308 <TIM_OC3_SetConfig+0x108>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d003      	beq.n	80032ae <TIM_OC3_SetConfig+0xae>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a18      	ldr	r2, [pc, #96]	@ (800330c <TIM_OC3_SetConfig+0x10c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d113      	bne.n	80032d6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	621a      	str	r2, [r3, #32]
}
 80032f0:	bf00      	nop
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	40012c00 	.word	0x40012c00
 8003300:	40013400 	.word	0x40013400
 8003304:	40014000 	.word	0x40014000
 8003308:	40014400 	.word	0x40014400
 800330c:	40014800 	.word	0x40014800

08003310 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800333e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800334a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800335e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	031b      	lsls	r3, r3, #12
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a28      	ldr	r2, [pc, #160]	@ (8003410 <TIM_OC4_SetConfig+0x100>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d003      	beq.n	800337c <TIM_OC4_SetConfig+0x6c>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a27      	ldr	r2, [pc, #156]	@ (8003414 <TIM_OC4_SetConfig+0x104>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d10d      	bne.n	8003398 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	031b      	lsls	r3, r3, #12
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003396:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a1d      	ldr	r2, [pc, #116]	@ (8003410 <TIM_OC4_SetConfig+0x100>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d00f      	beq.n	80033c0 <TIM_OC4_SetConfig+0xb0>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003414 <TIM_OC4_SetConfig+0x104>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00b      	beq.n	80033c0 <TIM_OC4_SetConfig+0xb0>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003418 <TIM_OC4_SetConfig+0x108>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d007      	beq.n	80033c0 <TIM_OC4_SetConfig+0xb0>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a1a      	ldr	r2, [pc, #104]	@ (800341c <TIM_OC4_SetConfig+0x10c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d003      	beq.n	80033c0 <TIM_OC4_SetConfig+0xb0>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a19      	ldr	r2, [pc, #100]	@ (8003420 <TIM_OC4_SetConfig+0x110>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d113      	bne.n	80033e8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033c6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80033ce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	019b      	lsls	r3, r3, #6
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	621a      	str	r2, [r3, #32]
}
 8003402:	bf00      	nop
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40012c00 	.word	0x40012c00
 8003414:	40013400 	.word	0x40013400
 8003418:	40014000 	.word	0x40014000
 800341c:	40014400 	.word	0x40014400
 8003420:	40014800 	.word	0x40014800

08003424 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800344a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003468:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	041b      	lsls	r3, r3, #16
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a17      	ldr	r2, [pc, #92]	@ (80034d8 <TIM_OC5_SetConfig+0xb4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00f      	beq.n	800349e <TIM_OC5_SetConfig+0x7a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a16      	ldr	r2, [pc, #88]	@ (80034dc <TIM_OC5_SetConfig+0xb8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00b      	beq.n	800349e <TIM_OC5_SetConfig+0x7a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a15      	ldr	r2, [pc, #84]	@ (80034e0 <TIM_OC5_SetConfig+0xbc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d007      	beq.n	800349e <TIM_OC5_SetConfig+0x7a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a14      	ldr	r2, [pc, #80]	@ (80034e4 <TIM_OC5_SetConfig+0xc0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d003      	beq.n	800349e <TIM_OC5_SetConfig+0x7a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a13      	ldr	r2, [pc, #76]	@ (80034e8 <TIM_OC5_SetConfig+0xc4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d109      	bne.n	80034b2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	621a      	str	r2, [r3, #32]
}
 80034cc:	bf00      	nop
 80034ce:	371c      	adds	r7, #28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	40012c00 	.word	0x40012c00
 80034dc:	40013400 	.word	0x40013400
 80034e0:	40014000 	.word	0x40014000
 80034e4:	40014400 	.word	0x40014400
 80034e8:	40014800 	.word	0x40014800

080034ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800351a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800351e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	051b      	lsls	r3, r3, #20
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a18      	ldr	r2, [pc, #96]	@ (80035a4 <TIM_OC6_SetConfig+0xb8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00f      	beq.n	8003568 <TIM_OC6_SetConfig+0x7c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a17      	ldr	r2, [pc, #92]	@ (80035a8 <TIM_OC6_SetConfig+0xbc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00b      	beq.n	8003568 <TIM_OC6_SetConfig+0x7c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a16      	ldr	r2, [pc, #88]	@ (80035ac <TIM_OC6_SetConfig+0xc0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d007      	beq.n	8003568 <TIM_OC6_SetConfig+0x7c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a15      	ldr	r2, [pc, #84]	@ (80035b0 <TIM_OC6_SetConfig+0xc4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d003      	beq.n	8003568 <TIM_OC6_SetConfig+0x7c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a14      	ldr	r2, [pc, #80]	@ (80035b4 <TIM_OC6_SetConfig+0xc8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d109      	bne.n	800357c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800356e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	029b      	lsls	r3, r3, #10
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	621a      	str	r2, [r3, #32]
}
 8003596:	bf00      	nop
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40012c00 	.word	0x40012c00
 80035a8:	40013400 	.word	0x40013400
 80035ac:	40014000 	.word	0x40014000
 80035b0:	40014400 	.word	0x40014400
 80035b4:	40014800 	.word	0x40014800

080035b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	f023 0201 	bic.w	r2, r3, #1
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f023 030a 	bic.w	r3, r3, #10
 80035f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	621a      	str	r2, [r3, #32]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003616:	b480      	push	{r7}
 8003618:	b087      	sub	sp, #28
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	f023 0210 	bic.w	r2, r3, #16
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003640:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	031b      	lsls	r3, r3, #12
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003652:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	621a      	str	r2, [r3, #32]
}
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003676:	b480      	push	{r7}
 8003678:	b085      	sub	sp, #20
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800368c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	f043 0307 	orr.w	r3, r3, #7
 800369c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	609a      	str	r2, [r3, #8]
}
 80036a4:	bf00      	nop
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	021a      	lsls	r2, r3, #8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	609a      	str	r2, [r3, #8]
}
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003704:	2302      	movs	r3, #2
 8003706:	e065      	b.n	80037d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a2c      	ldr	r2, [pc, #176]	@ (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d004      	beq.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a2b      	ldr	r2, [pc, #172]	@ (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d108      	bne.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003742:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003754:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003758:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4313      	orrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a1b      	ldr	r2, [pc, #108]	@ (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d018      	beq.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800377e:	d013      	beq.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a18      	ldr	r2, [pc, #96]	@ (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00e      	beq.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a17      	ldr	r2, [pc, #92]	@ (80037ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d009      	beq.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a12      	ldr	r2, [pc, #72]	@ (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d004      	beq.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a13      	ldr	r2, [pc, #76]	@ (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d10c      	bne.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	40012c00 	.word	0x40012c00
 80037e4:	40013400 	.word	0x40013400
 80037e8:	40000400 	.word	0x40000400
 80037ec:	40000800 	.word	0x40000800
 80037f0:	40014000 	.word	0x40014000

080037f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e042      	b.n	800388c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380c:	2b00      	cmp	r3, #0
 800380e:	d106      	bne.n	800381e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7fd f9b1 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2224      	movs	r2, #36	@ 0x24
 8003822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0201 	bic.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fc4a 	bl	80040d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f97b 	bl	8003b40 <UART_SetConfig>
 800384a:	4603      	mov	r3, r0
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e01b      	b.n	800388c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003862:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003872:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 fcc9 	bl	800421c <UART_CheckIdleState>
 800388a:	4603      	mov	r3, r0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	@ 0x28
 8003898:	af02      	add	r7, sp, #8
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	4613      	mov	r3, r2
 80038a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	d17b      	bne.n	80039a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_UART_Transmit+0x26>
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e074      	b.n	80039a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2221      	movs	r2, #33	@ 0x21
 80038ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ce:	f7fd fbb7 	bl	8001040 <HAL_GetTick>
 80038d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	88fa      	ldrh	r2, [r7, #6]
 80038d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	88fa      	ldrh	r2, [r7, #6]
 80038e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ec:	d108      	bne.n	8003900 <HAL_UART_Transmit+0x6c>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d104      	bne.n	8003900 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	61bb      	str	r3, [r7, #24]
 80038fe:	e003      	b.n	8003908 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003904:	2300      	movs	r3, #0
 8003906:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003908:	e030      	b.n	800396c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2200      	movs	r2, #0
 8003912:	2180      	movs	r1, #128	@ 0x80
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fd2b 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e03d      	b.n	80039a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10b      	bne.n	800394a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003940:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	3302      	adds	r3, #2
 8003946:	61bb      	str	r3, [r7, #24]
 8003948:	e007      	b.n	800395a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	781a      	ldrb	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	3301      	adds	r3, #1
 8003958:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1c8      	bne.n	800390a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2200      	movs	r2, #0
 8003980:	2140      	movs	r1, #64	@ 0x40
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 fcf4 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e006      	b.n	80039a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2220      	movs	r2, #32
 800399e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	e000      	b.n	80039a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80039a6:	2302      	movs	r3, #2
  }
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3720      	adds	r7, #32
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08a      	sub	sp, #40	@ 0x28
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	f040 80b5 	bne.w	8003b36 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <HAL_UART_Receive+0x28>
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0ad      	b.n	8003b38 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2222      	movs	r2, #34	@ 0x22
 80039e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039f2:	f7fd fb25 	bl	8001040 <HAL_GetTick>
 80039f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	88fa      	ldrh	r2, [r7, #6]
 80039fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	88fa      	ldrh	r2, [r7, #6]
 8003a04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a10:	d10e      	bne.n	8003a30 <HAL_UART_Receive+0x80>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d105      	bne.n	8003a26 <HAL_UART_Receive+0x76>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003a20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003a24:	e02d      	b.n	8003a82 <HAL_UART_Receive+0xd2>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	22ff      	movs	r2, #255	@ 0xff
 8003a2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003a2e:	e028      	b.n	8003a82 <HAL_UART_Receive+0xd2>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10d      	bne.n	8003a54 <HAL_UART_Receive+0xa4>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d104      	bne.n	8003a4a <HAL_UART_Receive+0x9a>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	22ff      	movs	r2, #255	@ 0xff
 8003a44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003a48:	e01b      	b.n	8003a82 <HAL_UART_Receive+0xd2>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	227f      	movs	r2, #127	@ 0x7f
 8003a4e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003a52:	e016      	b.n	8003a82 <HAL_UART_Receive+0xd2>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a5c:	d10d      	bne.n	8003a7a <HAL_UART_Receive+0xca>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d104      	bne.n	8003a70 <HAL_UART_Receive+0xc0>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	227f      	movs	r2, #127	@ 0x7f
 8003a6a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003a6e:	e008      	b.n	8003a82 <HAL_UART_Receive+0xd2>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	223f      	movs	r2, #63	@ 0x3f
 8003a74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003a78:	e003      	b.n	8003a82 <HAL_UART_Receive+0xd2>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003a88:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a92:	d108      	bne.n	8003aa6 <HAL_UART_Receive+0xf6>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d104      	bne.n	8003aa6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	e003      	b.n	8003aae <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003aae:	e036      	b.n	8003b1e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2120      	movs	r1, #32
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fc58 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e032      	b.n	8003b38 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10c      	bne.n	8003af2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	8a7b      	ldrh	r3, [r7, #18]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	3302      	adds	r3, #2
 8003aee:	61bb      	str	r3, [r7, #24]
 8003af0:	e00c      	b.n	8003b0c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	8a7b      	ldrh	r3, [r7, #18]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	4013      	ands	r3, r2
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1c2      	bne.n	8003ab0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	e000      	b.n	8003b38 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003b36:	2302      	movs	r3, #2
  }
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3720      	adds	r7, #32
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b44:	b08c      	sub	sp, #48	@ 0x30
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	4bab      	ldr	r3, [pc, #684]	@ (8003e1c <UART_SetConfig+0x2dc>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4aa0      	ldr	r2, [pc, #640]	@ (8003e20 <UART_SetConfig+0x2e0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d004      	beq.n	8003bac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003bb6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	6812      	ldr	r2, [r2, #0]
 8003bbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bca:	f023 010f 	bic.w	r1, r3, #15
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a91      	ldr	r2, [pc, #580]	@ (8003e24 <UART_SetConfig+0x2e4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d125      	bne.n	8003c30 <UART_SetConfig+0xf0>
 8003be4:	4b90      	ldr	r3, [pc, #576]	@ (8003e28 <UART_SetConfig+0x2e8>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d81a      	bhi.n	8003c28 <UART_SetConfig+0xe8>
 8003bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf8 <UART_SetConfig+0xb8>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c09 	.word	0x08003c09
 8003bfc:	08003c19 	.word	0x08003c19
 8003c00:	08003c11 	.word	0x08003c11
 8003c04:	08003c21 	.word	0x08003c21
 8003c08:	2301      	movs	r3, #1
 8003c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c0e:	e0d6      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003c10:	2302      	movs	r3, #2
 8003c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c16:	e0d2      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003c18:	2304      	movs	r3, #4
 8003c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c1e:	e0ce      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003c20:	2308      	movs	r3, #8
 8003c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c26:	e0ca      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003c28:	2310      	movs	r3, #16
 8003c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c2e:	e0c6      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a7d      	ldr	r2, [pc, #500]	@ (8003e2c <UART_SetConfig+0x2ec>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d138      	bne.n	8003cac <UART_SetConfig+0x16c>
 8003c3a:	4b7b      	ldr	r3, [pc, #492]	@ (8003e28 <UART_SetConfig+0x2e8>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c40:	f003 030c 	and.w	r3, r3, #12
 8003c44:	2b0c      	cmp	r3, #12
 8003c46:	d82d      	bhi.n	8003ca4 <UART_SetConfig+0x164>
 8003c48:	a201      	add	r2, pc, #4	@ (adr r2, 8003c50 <UART_SetConfig+0x110>)
 8003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4e:	bf00      	nop
 8003c50:	08003c85 	.word	0x08003c85
 8003c54:	08003ca5 	.word	0x08003ca5
 8003c58:	08003ca5 	.word	0x08003ca5
 8003c5c:	08003ca5 	.word	0x08003ca5
 8003c60:	08003c95 	.word	0x08003c95
 8003c64:	08003ca5 	.word	0x08003ca5
 8003c68:	08003ca5 	.word	0x08003ca5
 8003c6c:	08003ca5 	.word	0x08003ca5
 8003c70:	08003c8d 	.word	0x08003c8d
 8003c74:	08003ca5 	.word	0x08003ca5
 8003c78:	08003ca5 	.word	0x08003ca5
 8003c7c:	08003ca5 	.word	0x08003ca5
 8003c80:	08003c9d 	.word	0x08003c9d
 8003c84:	2300      	movs	r3, #0
 8003c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c8a:	e098      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c92:	e094      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003c94:	2304      	movs	r3, #4
 8003c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c9a:	e090      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003c9c:	2308      	movs	r3, #8
 8003c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ca2:	e08c      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003ca4:	2310      	movs	r3, #16
 8003ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003caa:	e088      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a5f      	ldr	r2, [pc, #380]	@ (8003e30 <UART_SetConfig+0x2f0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d125      	bne.n	8003d02 <UART_SetConfig+0x1c2>
 8003cb6:	4b5c      	ldr	r3, [pc, #368]	@ (8003e28 <UART_SetConfig+0x2e8>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cbc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003cc0:	2b30      	cmp	r3, #48	@ 0x30
 8003cc2:	d016      	beq.n	8003cf2 <UART_SetConfig+0x1b2>
 8003cc4:	2b30      	cmp	r3, #48	@ 0x30
 8003cc6:	d818      	bhi.n	8003cfa <UART_SetConfig+0x1ba>
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d00a      	beq.n	8003ce2 <UART_SetConfig+0x1a2>
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d814      	bhi.n	8003cfa <UART_SetConfig+0x1ba>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <UART_SetConfig+0x19a>
 8003cd4:	2b10      	cmp	r3, #16
 8003cd6:	d008      	beq.n	8003cea <UART_SetConfig+0x1aa>
 8003cd8:	e00f      	b.n	8003cfa <UART_SetConfig+0x1ba>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ce0:	e06d      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ce8:	e069      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003cea:	2304      	movs	r3, #4
 8003cec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cf0:	e065      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cf8:	e061      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003cfa:	2310      	movs	r3, #16
 8003cfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d00:	e05d      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a4b      	ldr	r2, [pc, #300]	@ (8003e34 <UART_SetConfig+0x2f4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d125      	bne.n	8003d58 <UART_SetConfig+0x218>
 8003d0c:	4b46      	ldr	r3, [pc, #280]	@ (8003e28 <UART_SetConfig+0x2e8>)
 8003d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003d16:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d18:	d016      	beq.n	8003d48 <UART_SetConfig+0x208>
 8003d1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d1c:	d818      	bhi.n	8003d50 <UART_SetConfig+0x210>
 8003d1e:	2b80      	cmp	r3, #128	@ 0x80
 8003d20:	d00a      	beq.n	8003d38 <UART_SetConfig+0x1f8>
 8003d22:	2b80      	cmp	r3, #128	@ 0x80
 8003d24:	d814      	bhi.n	8003d50 <UART_SetConfig+0x210>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <UART_SetConfig+0x1f0>
 8003d2a:	2b40      	cmp	r3, #64	@ 0x40
 8003d2c:	d008      	beq.n	8003d40 <UART_SetConfig+0x200>
 8003d2e:	e00f      	b.n	8003d50 <UART_SetConfig+0x210>
 8003d30:	2300      	movs	r3, #0
 8003d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d36:	e042      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d3e:	e03e      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003d40:	2304      	movs	r3, #4
 8003d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d46:	e03a      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003d48:	2308      	movs	r3, #8
 8003d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d4e:	e036      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003d50:	2310      	movs	r3, #16
 8003d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d56:	e032      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a30      	ldr	r2, [pc, #192]	@ (8003e20 <UART_SetConfig+0x2e0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d12a      	bne.n	8003db8 <UART_SetConfig+0x278>
 8003d62:	4b31      	ldr	r3, [pc, #196]	@ (8003e28 <UART_SetConfig+0x2e8>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d70:	d01a      	beq.n	8003da8 <UART_SetConfig+0x268>
 8003d72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d76:	d81b      	bhi.n	8003db0 <UART_SetConfig+0x270>
 8003d78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d7c:	d00c      	beq.n	8003d98 <UART_SetConfig+0x258>
 8003d7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d82:	d815      	bhi.n	8003db0 <UART_SetConfig+0x270>
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <UART_SetConfig+0x250>
 8003d88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d8c:	d008      	beq.n	8003da0 <UART_SetConfig+0x260>
 8003d8e:	e00f      	b.n	8003db0 <UART_SetConfig+0x270>
 8003d90:	2300      	movs	r3, #0
 8003d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d96:	e012      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d9e:	e00e      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003da0:	2304      	movs	r3, #4
 8003da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003da6:	e00a      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003da8:	2308      	movs	r3, #8
 8003daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dae:	e006      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003db0:	2310      	movs	r3, #16
 8003db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003db6:	e002      	b.n	8003dbe <UART_SetConfig+0x27e>
 8003db8:	2310      	movs	r3, #16
 8003dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a17      	ldr	r2, [pc, #92]	@ (8003e20 <UART_SetConfig+0x2e0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	f040 80a8 	bne.w	8003f1a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d834      	bhi.n	8003e3c <UART_SetConfig+0x2fc>
 8003dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd8 <UART_SetConfig+0x298>)
 8003dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd8:	08003dfd 	.word	0x08003dfd
 8003ddc:	08003e3d 	.word	0x08003e3d
 8003de0:	08003e05 	.word	0x08003e05
 8003de4:	08003e3d 	.word	0x08003e3d
 8003de8:	08003e0b 	.word	0x08003e0b
 8003dec:	08003e3d 	.word	0x08003e3d
 8003df0:	08003e3d 	.word	0x08003e3d
 8003df4:	08003e3d 	.word	0x08003e3d
 8003df8:	08003e13 	.word	0x08003e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dfc:	f7fe fb22 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8003e00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e02:	e021      	b.n	8003e48 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e04:	4b0c      	ldr	r3, [pc, #48]	@ (8003e38 <UART_SetConfig+0x2f8>)
 8003e06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e08:	e01e      	b.n	8003e48 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e0a:	f7fe faad 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 8003e0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e10:	e01a      	b.n	8003e48 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e18:	e016      	b.n	8003e48 <UART_SetConfig+0x308>
 8003e1a:	bf00      	nop
 8003e1c:	cfff69f3 	.word	0xcfff69f3
 8003e20:	40008000 	.word	0x40008000
 8003e24:	40013800 	.word	0x40013800
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	40004400 	.word	0x40004400
 8003e30:	40004800 	.word	0x40004800
 8003e34:	40004c00 	.word	0x40004c00
 8003e38:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e46:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 812a 	beq.w	80040a4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	4a9e      	ldr	r2, [pc, #632]	@ (80040d0 <UART_SetConfig+0x590>)
 8003e56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	4413      	add	r3, r2
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d305      	bcc.n	8003e80 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d903      	bls.n	8003e88 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e86:	e10d      	b.n	80040a4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	60fa      	str	r2, [r7, #12]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e94:	4a8e      	ldr	r2, [pc, #568]	@ (80040d0 <UART_SetConfig+0x590>)
 8003e96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ea6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003eaa:	f7fc fa09 	bl	80002c0 <__aeabi_uldivmod>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	020b      	lsls	r3, r1, #8
 8003ec0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ec4:	0202      	lsls	r2, r0, #8
 8003ec6:	6979      	ldr	r1, [r7, #20]
 8003ec8:	6849      	ldr	r1, [r1, #4]
 8003eca:	0849      	lsrs	r1, r1, #1
 8003ecc:	2000      	movs	r0, #0
 8003ece:	460c      	mov	r4, r1
 8003ed0:	4605      	mov	r5, r0
 8003ed2:	eb12 0804 	adds.w	r8, r2, r4
 8003ed6:	eb43 0905 	adc.w	r9, r3, r5
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	469a      	mov	sl, r3
 8003ee2:	4693      	mov	fp, r2
 8003ee4:	4652      	mov	r2, sl
 8003ee6:	465b      	mov	r3, fp
 8003ee8:	4640      	mov	r0, r8
 8003eea:	4649      	mov	r1, r9
 8003eec:	f7fc f9e8 	bl	80002c0 <__aeabi_uldivmod>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003efe:	d308      	bcc.n	8003f12 <UART_SetConfig+0x3d2>
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f06:	d204      	bcs.n	8003f12 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6a3a      	ldr	r2, [r7, #32]
 8003f0e:	60da      	str	r2, [r3, #12]
 8003f10:	e0c8      	b.n	80040a4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f18:	e0c4      	b.n	80040a4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f22:	d167      	bne.n	8003ff4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003f24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d828      	bhi.n	8003f7e <UART_SetConfig+0x43e>
 8003f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f34 <UART_SetConfig+0x3f4>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f59 	.word	0x08003f59
 8003f38:	08003f61 	.word	0x08003f61
 8003f3c:	08003f69 	.word	0x08003f69
 8003f40:	08003f7f 	.word	0x08003f7f
 8003f44:	08003f6f 	.word	0x08003f6f
 8003f48:	08003f7f 	.word	0x08003f7f
 8003f4c:	08003f7f 	.word	0x08003f7f
 8003f50:	08003f7f 	.word	0x08003f7f
 8003f54:	08003f77 	.word	0x08003f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f58:	f7fe fa74 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8003f5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f5e:	e014      	b.n	8003f8a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f60:	f7fe fa86 	bl	8002470 <HAL_RCC_GetPCLK2Freq>
 8003f64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f66:	e010      	b.n	8003f8a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f68:	4b5a      	ldr	r3, [pc, #360]	@ (80040d4 <UART_SetConfig+0x594>)
 8003f6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f6c:	e00d      	b.n	8003f8a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6e:	f7fe f9fb 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 8003f72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f74:	e009      	b.n	8003f8a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f7c:	e005      	b.n	8003f8a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8089 	beq.w	80040a4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f96:	4a4e      	ldr	r2, [pc, #312]	@ (80040d0 <UART_SetConfig+0x590>)
 8003f98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fa4:	005a      	lsls	r2, r3, #1
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	085b      	lsrs	r3, r3, #1
 8003fac:	441a      	add	r2, r3
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	2b0f      	cmp	r3, #15
 8003fbc:	d916      	bls.n	8003fec <UART_SetConfig+0x4ac>
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fc4:	d212      	bcs.n	8003fec <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	f023 030f 	bic.w	r3, r3, #15
 8003fce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	085b      	lsrs	r3, r3, #1
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	8bfb      	ldrh	r3, [r7, #30]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	8bfa      	ldrh	r2, [r7, #30]
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	e05b      	b.n	80040a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ff2:	e057      	b.n	80040a4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ff4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d828      	bhi.n	800404e <UART_SetConfig+0x50e>
 8003ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8004004 <UART_SetConfig+0x4c4>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004029 	.word	0x08004029
 8004008:	08004031 	.word	0x08004031
 800400c:	08004039 	.word	0x08004039
 8004010:	0800404f 	.word	0x0800404f
 8004014:	0800403f 	.word	0x0800403f
 8004018:	0800404f 	.word	0x0800404f
 800401c:	0800404f 	.word	0x0800404f
 8004020:	0800404f 	.word	0x0800404f
 8004024:	08004047 	.word	0x08004047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004028:	f7fe fa0c 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 800402c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800402e:	e014      	b.n	800405a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004030:	f7fe fa1e 	bl	8002470 <HAL_RCC_GetPCLK2Freq>
 8004034:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004036:	e010      	b.n	800405a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004038:	4b26      	ldr	r3, [pc, #152]	@ (80040d4 <UART_SetConfig+0x594>)
 800403a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800403c:	e00d      	b.n	800405a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800403e:	f7fe f993 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 8004042:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004044:	e009      	b.n	800405a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004046:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800404c:	e005      	b.n	800405a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004058:	bf00      	nop
    }

    if (pclk != 0U)
 800405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405c:	2b00      	cmp	r3, #0
 800405e:	d021      	beq.n	80040a4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	4a1a      	ldr	r2, [pc, #104]	@ (80040d0 <UART_SetConfig+0x590>)
 8004066:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800406a:	461a      	mov	r2, r3
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	085b      	lsrs	r3, r3, #1
 8004078:	441a      	add	r2, r3
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004082:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	2b0f      	cmp	r3, #15
 8004088:	d909      	bls.n	800409e <UART_SetConfig+0x55e>
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004090:	d205      	bcs.n	800409e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	b29a      	uxth	r2, r3
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60da      	str	r2, [r3, #12]
 800409c:	e002      	b.n	80040a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2200      	movs	r2, #0
 80040b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2200      	movs	r2, #0
 80040be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80040c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3730      	adds	r7, #48	@ 0x30
 80040c8:	46bd      	mov	sp, r7
 80040ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ce:	bf00      	nop
 80040d0:	080056b8 	.word	0x080056b8
 80040d4:	00f42400 	.word	0x00f42400

080040d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418e:	f003 0320 	and.w	r3, r3, #32
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d01a      	beq.n	80041ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041d6:	d10a      	bne.n	80041ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	605a      	str	r2, [r3, #4]
  }
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b098      	sub	sp, #96	@ 0x60
 8004220:	af02      	add	r7, sp, #8
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800422c:	f7fc ff08 	bl	8001040 <HAL_GetTick>
 8004230:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b08      	cmp	r3, #8
 800423e:	d12f      	bne.n	80042a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004240:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004248:	2200      	movs	r2, #0
 800424a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f88e 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d022      	beq.n	80042a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004262:	e853 3f00 	ldrex	r3, [r3]
 8004266:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800426a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800426e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004278:	647b      	str	r3, [r7, #68]	@ 0x44
 800427a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800427e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004280:	e841 2300 	strex	r3, r2, [r1]
 8004284:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1e6      	bne.n	800425a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e063      	b.n	8004368 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d149      	bne.n	8004342 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042b6:	2200      	movs	r2, #0
 80042b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f857 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d03c      	beq.n	8004342 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	623b      	str	r3, [r7, #32]
   return(result);
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80042e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e6      	bne.n	80042c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3308      	adds	r3, #8
 8004300:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	60fb      	str	r3, [r7, #12]
   return(result);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f023 0301 	bic.w	r3, r3, #1
 8004310:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3308      	adds	r3, #8
 8004318:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800431a:	61fa      	str	r2, [r7, #28]
 800431c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	69b9      	ldr	r1, [r7, #24]
 8004320:	69fa      	ldr	r2, [r7, #28]
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	617b      	str	r3, [r7, #20]
   return(result);
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e5      	bne.n	80042fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e012      	b.n	8004368 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3758      	adds	r7, #88	@ 0x58
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	4613      	mov	r3, r2
 800437e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004380:	e04f      	b.n	8004422 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004388:	d04b      	beq.n	8004422 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438a:	f7fc fe59 	bl	8001040 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	429a      	cmp	r2, r3
 8004398:	d302      	bcc.n	80043a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e04e      	b.n	8004442 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d037      	beq.n	8004422 <UART_WaitOnFlagUntilTimeout+0xb2>
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b80      	cmp	r3, #128	@ 0x80
 80043b6:	d034      	beq.n	8004422 <UART_WaitOnFlagUntilTimeout+0xb2>
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b40      	cmp	r3, #64	@ 0x40
 80043bc:	d031      	beq.n	8004422 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d110      	bne.n	80043ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2208      	movs	r2, #8
 80043d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f838 	bl	800444a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2208      	movs	r2, #8
 80043de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e029      	b.n	8004442 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043fc:	d111      	bne.n	8004422 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004406:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f81e 	bl	800444a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2220      	movs	r2, #32
 8004412:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e00f      	b.n	8004442 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69da      	ldr	r2, [r3, #28]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4013      	ands	r3, r2
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	429a      	cmp	r2, r3
 8004430:	bf0c      	ite	eq
 8004432:	2301      	moveq	r3, #1
 8004434:	2300      	movne	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	461a      	mov	r2, r3
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	429a      	cmp	r2, r3
 800443e:	d0a0      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800444a:	b480      	push	{r7}
 800444c:	b095      	sub	sp, #84	@ 0x54
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004462:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004466:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004470:	643b      	str	r3, [r7, #64]	@ 0x40
 8004472:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004476:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800447e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e6      	bne.n	8004452 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3308      	adds	r3, #8
 800448a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	e853 3f00 	ldrex	r3, [r3]
 8004492:	61fb      	str	r3, [r7, #28]
   return(result);
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3308      	adds	r3, #8
 80044a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044b0:	e841 2300 	strex	r3, r2, [r1]
 80044b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e3      	bne.n	8004484 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d118      	bne.n	80044f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f023 0310 	bic.w	r3, r3, #16
 80044d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044e2:	61bb      	str	r3, [r7, #24]
 80044e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e6:	6979      	ldr	r1, [r7, #20]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	613b      	str	r3, [r7, #16]
   return(result);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1e6      	bne.n	80044c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800450a:	bf00      	nop
 800450c:	3754      	adds	r7, #84	@ 0x54
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004516:	b480      	push	{r7}
 8004518:	b085      	sub	sp, #20
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_UARTEx_DisableFifoMode+0x16>
 8004528:	2302      	movs	r3, #2
 800452a:	e027      	b.n	800457c <HAL_UARTEx_DisableFifoMode+0x66>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2224      	movs	r2, #36	@ 0x24
 8004538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0201 	bic.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800455a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800459c:	2302      	movs	r3, #2
 800459e:	e02d      	b.n	80045fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2224      	movs	r2, #36	@ 0x24
 80045ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0201 	bic.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f84f 	bl	8004680 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004618:	2302      	movs	r3, #2
 800461a:	e02d      	b.n	8004678 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2224      	movs	r2, #36	@ 0x24
 8004628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0201 	bic.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f811 	bl	8004680 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800468c:	2b00      	cmp	r3, #0
 800468e:	d108      	bne.n	80046a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80046a0:	e031      	b.n	8004706 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80046a2:	2308      	movs	r3, #8
 80046a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80046a6:	2308      	movs	r3, #8
 80046a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	0e5b      	lsrs	r3, r3, #25
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	0f5b      	lsrs	r3, r3, #29
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046ca:	7bbb      	ldrb	r3, [r7, #14]
 80046cc:	7b3a      	ldrb	r2, [r7, #12]
 80046ce:	4911      	ldr	r1, [pc, #68]	@ (8004714 <UARTEx_SetNbDataToProcess+0x94>)
 80046d0:	5c8a      	ldrb	r2, [r1, r2]
 80046d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80046d6:	7b3a      	ldrb	r2, [r7, #12]
 80046d8:	490f      	ldr	r1, [pc, #60]	@ (8004718 <UARTEx_SetNbDataToProcess+0x98>)
 80046da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	7b7a      	ldrb	r2, [r7, #13]
 80046ec:	4909      	ldr	r1, [pc, #36]	@ (8004714 <UARTEx_SetNbDataToProcess+0x94>)
 80046ee:	5c8a      	ldrb	r2, [r1, r2]
 80046f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80046f4:	7b7a      	ldrb	r2, [r7, #13]
 80046f6:	4908      	ldr	r1, [pc, #32]	@ (8004718 <UARTEx_SetNbDataToProcess+0x98>)
 80046f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80046fe:	b29a      	uxth	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004706:	bf00      	nop
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	080056d0 	.word	0x080056d0
 8004718:	080056d8 	.word	0x080056d8

0800471c <std>:
 800471c:	2300      	movs	r3, #0
 800471e:	b510      	push	{r4, lr}
 8004720:	4604      	mov	r4, r0
 8004722:	e9c0 3300 	strd	r3, r3, [r0]
 8004726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800472a:	6083      	str	r3, [r0, #8]
 800472c:	8181      	strh	r1, [r0, #12]
 800472e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004730:	81c2      	strh	r2, [r0, #14]
 8004732:	6183      	str	r3, [r0, #24]
 8004734:	4619      	mov	r1, r3
 8004736:	2208      	movs	r2, #8
 8004738:	305c      	adds	r0, #92	@ 0x5c
 800473a:	f000 f9f9 	bl	8004b30 <memset>
 800473e:	4b0d      	ldr	r3, [pc, #52]	@ (8004774 <std+0x58>)
 8004740:	6263      	str	r3, [r4, #36]	@ 0x24
 8004742:	4b0d      	ldr	r3, [pc, #52]	@ (8004778 <std+0x5c>)
 8004744:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004746:	4b0d      	ldr	r3, [pc, #52]	@ (800477c <std+0x60>)
 8004748:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800474a:	4b0d      	ldr	r3, [pc, #52]	@ (8004780 <std+0x64>)
 800474c:	6323      	str	r3, [r4, #48]	@ 0x30
 800474e:	4b0d      	ldr	r3, [pc, #52]	@ (8004784 <std+0x68>)
 8004750:	6224      	str	r4, [r4, #32]
 8004752:	429c      	cmp	r4, r3
 8004754:	d006      	beq.n	8004764 <std+0x48>
 8004756:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800475a:	4294      	cmp	r4, r2
 800475c:	d002      	beq.n	8004764 <std+0x48>
 800475e:	33d0      	adds	r3, #208	@ 0xd0
 8004760:	429c      	cmp	r4, r3
 8004762:	d105      	bne.n	8004770 <std+0x54>
 8004764:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800476c:	f000 ba58 	b.w	8004c20 <__retarget_lock_init_recursive>
 8004770:	bd10      	pop	{r4, pc}
 8004772:	bf00      	nop
 8004774:	08004981 	.word	0x08004981
 8004778:	080049a3 	.word	0x080049a3
 800477c:	080049db 	.word	0x080049db
 8004780:	080049ff 	.word	0x080049ff
 8004784:	2000064c 	.word	0x2000064c

08004788 <stdio_exit_handler>:
 8004788:	4a02      	ldr	r2, [pc, #8]	@ (8004794 <stdio_exit_handler+0xc>)
 800478a:	4903      	ldr	r1, [pc, #12]	@ (8004798 <stdio_exit_handler+0x10>)
 800478c:	4803      	ldr	r0, [pc, #12]	@ (800479c <stdio_exit_handler+0x14>)
 800478e:	f000 b869 	b.w	8004864 <_fwalk_sglue>
 8004792:	bf00      	nop
 8004794:	2000000c 	.word	0x2000000c
 8004798:	080054c1 	.word	0x080054c1
 800479c:	2000001c 	.word	0x2000001c

080047a0 <cleanup_stdio>:
 80047a0:	6841      	ldr	r1, [r0, #4]
 80047a2:	4b0c      	ldr	r3, [pc, #48]	@ (80047d4 <cleanup_stdio+0x34>)
 80047a4:	4299      	cmp	r1, r3
 80047a6:	b510      	push	{r4, lr}
 80047a8:	4604      	mov	r4, r0
 80047aa:	d001      	beq.n	80047b0 <cleanup_stdio+0x10>
 80047ac:	f000 fe88 	bl	80054c0 <_fflush_r>
 80047b0:	68a1      	ldr	r1, [r4, #8]
 80047b2:	4b09      	ldr	r3, [pc, #36]	@ (80047d8 <cleanup_stdio+0x38>)
 80047b4:	4299      	cmp	r1, r3
 80047b6:	d002      	beq.n	80047be <cleanup_stdio+0x1e>
 80047b8:	4620      	mov	r0, r4
 80047ba:	f000 fe81 	bl	80054c0 <_fflush_r>
 80047be:	68e1      	ldr	r1, [r4, #12]
 80047c0:	4b06      	ldr	r3, [pc, #24]	@ (80047dc <cleanup_stdio+0x3c>)
 80047c2:	4299      	cmp	r1, r3
 80047c4:	d004      	beq.n	80047d0 <cleanup_stdio+0x30>
 80047c6:	4620      	mov	r0, r4
 80047c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047cc:	f000 be78 	b.w	80054c0 <_fflush_r>
 80047d0:	bd10      	pop	{r4, pc}
 80047d2:	bf00      	nop
 80047d4:	2000064c 	.word	0x2000064c
 80047d8:	200006b4 	.word	0x200006b4
 80047dc:	2000071c 	.word	0x2000071c

080047e0 <global_stdio_init.part.0>:
 80047e0:	b510      	push	{r4, lr}
 80047e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004810 <global_stdio_init.part.0+0x30>)
 80047e4:	4c0b      	ldr	r4, [pc, #44]	@ (8004814 <global_stdio_init.part.0+0x34>)
 80047e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004818 <global_stdio_init.part.0+0x38>)
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	4620      	mov	r0, r4
 80047ec:	2200      	movs	r2, #0
 80047ee:	2104      	movs	r1, #4
 80047f0:	f7ff ff94 	bl	800471c <std>
 80047f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80047f8:	2201      	movs	r2, #1
 80047fa:	2109      	movs	r1, #9
 80047fc:	f7ff ff8e 	bl	800471c <std>
 8004800:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004804:	2202      	movs	r2, #2
 8004806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800480a:	2112      	movs	r1, #18
 800480c:	f7ff bf86 	b.w	800471c <std>
 8004810:	20000784 	.word	0x20000784
 8004814:	2000064c 	.word	0x2000064c
 8004818:	08004789 	.word	0x08004789

0800481c <__sfp_lock_acquire>:
 800481c:	4801      	ldr	r0, [pc, #4]	@ (8004824 <__sfp_lock_acquire+0x8>)
 800481e:	f000 ba00 	b.w	8004c22 <__retarget_lock_acquire_recursive>
 8004822:	bf00      	nop
 8004824:	2000078d 	.word	0x2000078d

08004828 <__sfp_lock_release>:
 8004828:	4801      	ldr	r0, [pc, #4]	@ (8004830 <__sfp_lock_release+0x8>)
 800482a:	f000 b9fb 	b.w	8004c24 <__retarget_lock_release_recursive>
 800482e:	bf00      	nop
 8004830:	2000078d 	.word	0x2000078d

08004834 <__sinit>:
 8004834:	b510      	push	{r4, lr}
 8004836:	4604      	mov	r4, r0
 8004838:	f7ff fff0 	bl	800481c <__sfp_lock_acquire>
 800483c:	6a23      	ldr	r3, [r4, #32]
 800483e:	b11b      	cbz	r3, 8004848 <__sinit+0x14>
 8004840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004844:	f7ff bff0 	b.w	8004828 <__sfp_lock_release>
 8004848:	4b04      	ldr	r3, [pc, #16]	@ (800485c <__sinit+0x28>)
 800484a:	6223      	str	r3, [r4, #32]
 800484c:	4b04      	ldr	r3, [pc, #16]	@ (8004860 <__sinit+0x2c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1f5      	bne.n	8004840 <__sinit+0xc>
 8004854:	f7ff ffc4 	bl	80047e0 <global_stdio_init.part.0>
 8004858:	e7f2      	b.n	8004840 <__sinit+0xc>
 800485a:	bf00      	nop
 800485c:	080047a1 	.word	0x080047a1
 8004860:	20000784 	.word	0x20000784

08004864 <_fwalk_sglue>:
 8004864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004868:	4607      	mov	r7, r0
 800486a:	4688      	mov	r8, r1
 800486c:	4614      	mov	r4, r2
 800486e:	2600      	movs	r6, #0
 8004870:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004874:	f1b9 0901 	subs.w	r9, r9, #1
 8004878:	d505      	bpl.n	8004886 <_fwalk_sglue+0x22>
 800487a:	6824      	ldr	r4, [r4, #0]
 800487c:	2c00      	cmp	r4, #0
 800487e:	d1f7      	bne.n	8004870 <_fwalk_sglue+0xc>
 8004880:	4630      	mov	r0, r6
 8004882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004886:	89ab      	ldrh	r3, [r5, #12]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d907      	bls.n	800489c <_fwalk_sglue+0x38>
 800488c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004890:	3301      	adds	r3, #1
 8004892:	d003      	beq.n	800489c <_fwalk_sglue+0x38>
 8004894:	4629      	mov	r1, r5
 8004896:	4638      	mov	r0, r7
 8004898:	47c0      	blx	r8
 800489a:	4306      	orrs	r6, r0
 800489c:	3568      	adds	r5, #104	@ 0x68
 800489e:	e7e9      	b.n	8004874 <_fwalk_sglue+0x10>

080048a0 <iprintf>:
 80048a0:	b40f      	push	{r0, r1, r2, r3}
 80048a2:	b507      	push	{r0, r1, r2, lr}
 80048a4:	4906      	ldr	r1, [pc, #24]	@ (80048c0 <iprintf+0x20>)
 80048a6:	ab04      	add	r3, sp, #16
 80048a8:	6808      	ldr	r0, [r1, #0]
 80048aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80048ae:	6881      	ldr	r1, [r0, #8]
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	f000 fadb 	bl	8004e6c <_vfiprintf_r>
 80048b6:	b003      	add	sp, #12
 80048b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048bc:	b004      	add	sp, #16
 80048be:	4770      	bx	lr
 80048c0:	20000018 	.word	0x20000018

080048c4 <_puts_r>:
 80048c4:	6a03      	ldr	r3, [r0, #32]
 80048c6:	b570      	push	{r4, r5, r6, lr}
 80048c8:	6884      	ldr	r4, [r0, #8]
 80048ca:	4605      	mov	r5, r0
 80048cc:	460e      	mov	r6, r1
 80048ce:	b90b      	cbnz	r3, 80048d4 <_puts_r+0x10>
 80048d0:	f7ff ffb0 	bl	8004834 <__sinit>
 80048d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048d6:	07db      	lsls	r3, r3, #31
 80048d8:	d405      	bmi.n	80048e6 <_puts_r+0x22>
 80048da:	89a3      	ldrh	r3, [r4, #12]
 80048dc:	0598      	lsls	r0, r3, #22
 80048de:	d402      	bmi.n	80048e6 <_puts_r+0x22>
 80048e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048e2:	f000 f99e 	bl	8004c22 <__retarget_lock_acquire_recursive>
 80048e6:	89a3      	ldrh	r3, [r4, #12]
 80048e8:	0719      	lsls	r1, r3, #28
 80048ea:	d502      	bpl.n	80048f2 <_puts_r+0x2e>
 80048ec:	6923      	ldr	r3, [r4, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d135      	bne.n	800495e <_puts_r+0x9a>
 80048f2:	4621      	mov	r1, r4
 80048f4:	4628      	mov	r0, r5
 80048f6:	f000 f8c5 	bl	8004a84 <__swsetup_r>
 80048fa:	b380      	cbz	r0, 800495e <_puts_r+0x9a>
 80048fc:	f04f 35ff 	mov.w	r5, #4294967295
 8004900:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004902:	07da      	lsls	r2, r3, #31
 8004904:	d405      	bmi.n	8004912 <_puts_r+0x4e>
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	059b      	lsls	r3, r3, #22
 800490a:	d402      	bmi.n	8004912 <_puts_r+0x4e>
 800490c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800490e:	f000 f989 	bl	8004c24 <__retarget_lock_release_recursive>
 8004912:	4628      	mov	r0, r5
 8004914:	bd70      	pop	{r4, r5, r6, pc}
 8004916:	2b00      	cmp	r3, #0
 8004918:	da04      	bge.n	8004924 <_puts_r+0x60>
 800491a:	69a2      	ldr	r2, [r4, #24]
 800491c:	429a      	cmp	r2, r3
 800491e:	dc17      	bgt.n	8004950 <_puts_r+0x8c>
 8004920:	290a      	cmp	r1, #10
 8004922:	d015      	beq.n	8004950 <_puts_r+0x8c>
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	6022      	str	r2, [r4, #0]
 800492a:	7019      	strb	r1, [r3, #0]
 800492c:	68a3      	ldr	r3, [r4, #8]
 800492e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004932:	3b01      	subs	r3, #1
 8004934:	60a3      	str	r3, [r4, #8]
 8004936:	2900      	cmp	r1, #0
 8004938:	d1ed      	bne.n	8004916 <_puts_r+0x52>
 800493a:	2b00      	cmp	r3, #0
 800493c:	da11      	bge.n	8004962 <_puts_r+0x9e>
 800493e:	4622      	mov	r2, r4
 8004940:	210a      	movs	r1, #10
 8004942:	4628      	mov	r0, r5
 8004944:	f000 f85f 	bl	8004a06 <__swbuf_r>
 8004948:	3001      	adds	r0, #1
 800494a:	d0d7      	beq.n	80048fc <_puts_r+0x38>
 800494c:	250a      	movs	r5, #10
 800494e:	e7d7      	b.n	8004900 <_puts_r+0x3c>
 8004950:	4622      	mov	r2, r4
 8004952:	4628      	mov	r0, r5
 8004954:	f000 f857 	bl	8004a06 <__swbuf_r>
 8004958:	3001      	adds	r0, #1
 800495a:	d1e7      	bne.n	800492c <_puts_r+0x68>
 800495c:	e7ce      	b.n	80048fc <_puts_r+0x38>
 800495e:	3e01      	subs	r6, #1
 8004960:	e7e4      	b.n	800492c <_puts_r+0x68>
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	6022      	str	r2, [r4, #0]
 8004968:	220a      	movs	r2, #10
 800496a:	701a      	strb	r2, [r3, #0]
 800496c:	e7ee      	b.n	800494c <_puts_r+0x88>
	...

08004970 <puts>:
 8004970:	4b02      	ldr	r3, [pc, #8]	@ (800497c <puts+0xc>)
 8004972:	4601      	mov	r1, r0
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	f7ff bfa5 	b.w	80048c4 <_puts_r>
 800497a:	bf00      	nop
 800497c:	20000018 	.word	0x20000018

08004980 <__sread>:
 8004980:	b510      	push	{r4, lr}
 8004982:	460c      	mov	r4, r1
 8004984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004988:	f000 f8fc 	bl	8004b84 <_read_r>
 800498c:	2800      	cmp	r0, #0
 800498e:	bfab      	itete	ge
 8004990:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004992:	89a3      	ldrhlt	r3, [r4, #12]
 8004994:	181b      	addge	r3, r3, r0
 8004996:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800499a:	bfac      	ite	ge
 800499c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800499e:	81a3      	strhlt	r3, [r4, #12]
 80049a0:	bd10      	pop	{r4, pc}

080049a2 <__swrite>:
 80049a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049a6:	461f      	mov	r7, r3
 80049a8:	898b      	ldrh	r3, [r1, #12]
 80049aa:	05db      	lsls	r3, r3, #23
 80049ac:	4605      	mov	r5, r0
 80049ae:	460c      	mov	r4, r1
 80049b0:	4616      	mov	r6, r2
 80049b2:	d505      	bpl.n	80049c0 <__swrite+0x1e>
 80049b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b8:	2302      	movs	r3, #2
 80049ba:	2200      	movs	r2, #0
 80049bc:	f000 f8d0 	bl	8004b60 <_lseek_r>
 80049c0:	89a3      	ldrh	r3, [r4, #12]
 80049c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049ca:	81a3      	strh	r3, [r4, #12]
 80049cc:	4632      	mov	r2, r6
 80049ce:	463b      	mov	r3, r7
 80049d0:	4628      	mov	r0, r5
 80049d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049d6:	f000 b8e7 	b.w	8004ba8 <_write_r>

080049da <__sseek>:
 80049da:	b510      	push	{r4, lr}
 80049dc:	460c      	mov	r4, r1
 80049de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049e2:	f000 f8bd 	bl	8004b60 <_lseek_r>
 80049e6:	1c43      	adds	r3, r0, #1
 80049e8:	89a3      	ldrh	r3, [r4, #12]
 80049ea:	bf15      	itete	ne
 80049ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80049ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80049f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80049f6:	81a3      	strheq	r3, [r4, #12]
 80049f8:	bf18      	it	ne
 80049fa:	81a3      	strhne	r3, [r4, #12]
 80049fc:	bd10      	pop	{r4, pc}

080049fe <__sclose>:
 80049fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a02:	f000 b89d 	b.w	8004b40 <_close_r>

08004a06 <__swbuf_r>:
 8004a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a08:	460e      	mov	r6, r1
 8004a0a:	4614      	mov	r4, r2
 8004a0c:	4605      	mov	r5, r0
 8004a0e:	b118      	cbz	r0, 8004a18 <__swbuf_r+0x12>
 8004a10:	6a03      	ldr	r3, [r0, #32]
 8004a12:	b90b      	cbnz	r3, 8004a18 <__swbuf_r+0x12>
 8004a14:	f7ff ff0e 	bl	8004834 <__sinit>
 8004a18:	69a3      	ldr	r3, [r4, #24]
 8004a1a:	60a3      	str	r3, [r4, #8]
 8004a1c:	89a3      	ldrh	r3, [r4, #12]
 8004a1e:	071a      	lsls	r2, r3, #28
 8004a20:	d501      	bpl.n	8004a26 <__swbuf_r+0x20>
 8004a22:	6923      	ldr	r3, [r4, #16]
 8004a24:	b943      	cbnz	r3, 8004a38 <__swbuf_r+0x32>
 8004a26:	4621      	mov	r1, r4
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f000 f82b 	bl	8004a84 <__swsetup_r>
 8004a2e:	b118      	cbz	r0, 8004a38 <__swbuf_r+0x32>
 8004a30:	f04f 37ff 	mov.w	r7, #4294967295
 8004a34:	4638      	mov	r0, r7
 8004a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	6922      	ldr	r2, [r4, #16]
 8004a3c:	1a98      	subs	r0, r3, r2
 8004a3e:	6963      	ldr	r3, [r4, #20]
 8004a40:	b2f6      	uxtb	r6, r6
 8004a42:	4283      	cmp	r3, r0
 8004a44:	4637      	mov	r7, r6
 8004a46:	dc05      	bgt.n	8004a54 <__swbuf_r+0x4e>
 8004a48:	4621      	mov	r1, r4
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	f000 fd38 	bl	80054c0 <_fflush_r>
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d1ed      	bne.n	8004a30 <__swbuf_r+0x2a>
 8004a54:	68a3      	ldr	r3, [r4, #8]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	60a3      	str	r3, [r4, #8]
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	6022      	str	r2, [r4, #0]
 8004a60:	701e      	strb	r6, [r3, #0]
 8004a62:	6962      	ldr	r2, [r4, #20]
 8004a64:	1c43      	adds	r3, r0, #1
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d004      	beq.n	8004a74 <__swbuf_r+0x6e>
 8004a6a:	89a3      	ldrh	r3, [r4, #12]
 8004a6c:	07db      	lsls	r3, r3, #31
 8004a6e:	d5e1      	bpl.n	8004a34 <__swbuf_r+0x2e>
 8004a70:	2e0a      	cmp	r6, #10
 8004a72:	d1df      	bne.n	8004a34 <__swbuf_r+0x2e>
 8004a74:	4621      	mov	r1, r4
 8004a76:	4628      	mov	r0, r5
 8004a78:	f000 fd22 	bl	80054c0 <_fflush_r>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d0d9      	beq.n	8004a34 <__swbuf_r+0x2e>
 8004a80:	e7d6      	b.n	8004a30 <__swbuf_r+0x2a>
	...

08004a84 <__swsetup_r>:
 8004a84:	b538      	push	{r3, r4, r5, lr}
 8004a86:	4b29      	ldr	r3, [pc, #164]	@ (8004b2c <__swsetup_r+0xa8>)
 8004a88:	4605      	mov	r5, r0
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	b118      	cbz	r0, 8004a98 <__swsetup_r+0x14>
 8004a90:	6a03      	ldr	r3, [r0, #32]
 8004a92:	b90b      	cbnz	r3, 8004a98 <__swsetup_r+0x14>
 8004a94:	f7ff fece 	bl	8004834 <__sinit>
 8004a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a9c:	0719      	lsls	r1, r3, #28
 8004a9e:	d422      	bmi.n	8004ae6 <__swsetup_r+0x62>
 8004aa0:	06da      	lsls	r2, r3, #27
 8004aa2:	d407      	bmi.n	8004ab4 <__swsetup_r+0x30>
 8004aa4:	2209      	movs	r2, #9
 8004aa6:	602a      	str	r2, [r5, #0]
 8004aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aac:	81a3      	strh	r3, [r4, #12]
 8004aae:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab2:	e033      	b.n	8004b1c <__swsetup_r+0x98>
 8004ab4:	0758      	lsls	r0, r3, #29
 8004ab6:	d512      	bpl.n	8004ade <__swsetup_r+0x5a>
 8004ab8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004aba:	b141      	cbz	r1, 8004ace <__swsetup_r+0x4a>
 8004abc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ac0:	4299      	cmp	r1, r3
 8004ac2:	d002      	beq.n	8004aca <__swsetup_r+0x46>
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	f000 f8af 	bl	8004c28 <_free_r>
 8004aca:	2300      	movs	r3, #0
 8004acc:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ace:	89a3      	ldrh	r3, [r4, #12]
 8004ad0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ad4:	81a3      	strh	r3, [r4, #12]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	6063      	str	r3, [r4, #4]
 8004ada:	6923      	ldr	r3, [r4, #16]
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	89a3      	ldrh	r3, [r4, #12]
 8004ae0:	f043 0308 	orr.w	r3, r3, #8
 8004ae4:	81a3      	strh	r3, [r4, #12]
 8004ae6:	6923      	ldr	r3, [r4, #16]
 8004ae8:	b94b      	cbnz	r3, 8004afe <__swsetup_r+0x7a>
 8004aea:	89a3      	ldrh	r3, [r4, #12]
 8004aec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004af4:	d003      	beq.n	8004afe <__swsetup_r+0x7a>
 8004af6:	4621      	mov	r1, r4
 8004af8:	4628      	mov	r0, r5
 8004afa:	f000 fd2f 	bl	800555c <__smakebuf_r>
 8004afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b02:	f013 0201 	ands.w	r2, r3, #1
 8004b06:	d00a      	beq.n	8004b1e <__swsetup_r+0x9a>
 8004b08:	2200      	movs	r2, #0
 8004b0a:	60a2      	str	r2, [r4, #8]
 8004b0c:	6962      	ldr	r2, [r4, #20]
 8004b0e:	4252      	negs	r2, r2
 8004b10:	61a2      	str	r2, [r4, #24]
 8004b12:	6922      	ldr	r2, [r4, #16]
 8004b14:	b942      	cbnz	r2, 8004b28 <__swsetup_r+0xa4>
 8004b16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004b1a:	d1c5      	bne.n	8004aa8 <__swsetup_r+0x24>
 8004b1c:	bd38      	pop	{r3, r4, r5, pc}
 8004b1e:	0799      	lsls	r1, r3, #30
 8004b20:	bf58      	it	pl
 8004b22:	6962      	ldrpl	r2, [r4, #20]
 8004b24:	60a2      	str	r2, [r4, #8]
 8004b26:	e7f4      	b.n	8004b12 <__swsetup_r+0x8e>
 8004b28:	2000      	movs	r0, #0
 8004b2a:	e7f7      	b.n	8004b1c <__swsetup_r+0x98>
 8004b2c:	20000018 	.word	0x20000018

08004b30 <memset>:
 8004b30:	4402      	add	r2, r0
 8004b32:	4603      	mov	r3, r0
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d100      	bne.n	8004b3a <memset+0xa>
 8004b38:	4770      	bx	lr
 8004b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b3e:	e7f9      	b.n	8004b34 <memset+0x4>

08004b40 <_close_r>:
 8004b40:	b538      	push	{r3, r4, r5, lr}
 8004b42:	4d06      	ldr	r5, [pc, #24]	@ (8004b5c <_close_r+0x1c>)
 8004b44:	2300      	movs	r3, #0
 8004b46:	4604      	mov	r4, r0
 8004b48:	4608      	mov	r0, r1
 8004b4a:	602b      	str	r3, [r5, #0]
 8004b4c:	f7fc f96d 	bl	8000e2a <_close>
 8004b50:	1c43      	adds	r3, r0, #1
 8004b52:	d102      	bne.n	8004b5a <_close_r+0x1a>
 8004b54:	682b      	ldr	r3, [r5, #0]
 8004b56:	b103      	cbz	r3, 8004b5a <_close_r+0x1a>
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	bd38      	pop	{r3, r4, r5, pc}
 8004b5c:	20000788 	.word	0x20000788

08004b60 <_lseek_r>:
 8004b60:	b538      	push	{r3, r4, r5, lr}
 8004b62:	4d07      	ldr	r5, [pc, #28]	@ (8004b80 <_lseek_r+0x20>)
 8004b64:	4604      	mov	r4, r0
 8004b66:	4608      	mov	r0, r1
 8004b68:	4611      	mov	r1, r2
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	602a      	str	r2, [r5, #0]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	f7fc f982 	bl	8000e78 <_lseek>
 8004b74:	1c43      	adds	r3, r0, #1
 8004b76:	d102      	bne.n	8004b7e <_lseek_r+0x1e>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	b103      	cbz	r3, 8004b7e <_lseek_r+0x1e>
 8004b7c:	6023      	str	r3, [r4, #0]
 8004b7e:	bd38      	pop	{r3, r4, r5, pc}
 8004b80:	20000788 	.word	0x20000788

08004b84 <_read_r>:
 8004b84:	b538      	push	{r3, r4, r5, lr}
 8004b86:	4d07      	ldr	r5, [pc, #28]	@ (8004ba4 <_read_r+0x20>)
 8004b88:	4604      	mov	r4, r0
 8004b8a:	4608      	mov	r0, r1
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	2200      	movs	r2, #0
 8004b90:	602a      	str	r2, [r5, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	f7fc f910 	bl	8000db8 <_read>
 8004b98:	1c43      	adds	r3, r0, #1
 8004b9a:	d102      	bne.n	8004ba2 <_read_r+0x1e>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	b103      	cbz	r3, 8004ba2 <_read_r+0x1e>
 8004ba0:	6023      	str	r3, [r4, #0]
 8004ba2:	bd38      	pop	{r3, r4, r5, pc}
 8004ba4:	20000788 	.word	0x20000788

08004ba8 <_write_r>:
 8004ba8:	b538      	push	{r3, r4, r5, lr}
 8004baa:	4d07      	ldr	r5, [pc, #28]	@ (8004bc8 <_write_r+0x20>)
 8004bac:	4604      	mov	r4, r0
 8004bae:	4608      	mov	r0, r1
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	602a      	str	r2, [r5, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f7fc f91b 	bl	8000df2 <_write>
 8004bbc:	1c43      	adds	r3, r0, #1
 8004bbe:	d102      	bne.n	8004bc6 <_write_r+0x1e>
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	b103      	cbz	r3, 8004bc6 <_write_r+0x1e>
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	bd38      	pop	{r3, r4, r5, pc}
 8004bc8:	20000788 	.word	0x20000788

08004bcc <__errno>:
 8004bcc:	4b01      	ldr	r3, [pc, #4]	@ (8004bd4 <__errno+0x8>)
 8004bce:	6818      	ldr	r0, [r3, #0]
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000018 	.word	0x20000018

08004bd8 <__libc_init_array>:
 8004bd8:	b570      	push	{r4, r5, r6, lr}
 8004bda:	4d0d      	ldr	r5, [pc, #52]	@ (8004c10 <__libc_init_array+0x38>)
 8004bdc:	4c0d      	ldr	r4, [pc, #52]	@ (8004c14 <__libc_init_array+0x3c>)
 8004bde:	1b64      	subs	r4, r4, r5
 8004be0:	10a4      	asrs	r4, r4, #2
 8004be2:	2600      	movs	r6, #0
 8004be4:	42a6      	cmp	r6, r4
 8004be6:	d109      	bne.n	8004bfc <__libc_init_array+0x24>
 8004be8:	4d0b      	ldr	r5, [pc, #44]	@ (8004c18 <__libc_init_array+0x40>)
 8004bea:	4c0c      	ldr	r4, [pc, #48]	@ (8004c1c <__libc_init_array+0x44>)
 8004bec:	f000 fd24 	bl	8005638 <_init>
 8004bf0:	1b64      	subs	r4, r4, r5
 8004bf2:	10a4      	asrs	r4, r4, #2
 8004bf4:	2600      	movs	r6, #0
 8004bf6:	42a6      	cmp	r6, r4
 8004bf8:	d105      	bne.n	8004c06 <__libc_init_array+0x2e>
 8004bfa:	bd70      	pop	{r4, r5, r6, pc}
 8004bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c00:	4798      	blx	r3
 8004c02:	3601      	adds	r6, #1
 8004c04:	e7ee      	b.n	8004be4 <__libc_init_array+0xc>
 8004c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c0a:	4798      	blx	r3
 8004c0c:	3601      	adds	r6, #1
 8004c0e:	e7f2      	b.n	8004bf6 <__libc_init_array+0x1e>
 8004c10:	0800571c 	.word	0x0800571c
 8004c14:	0800571c 	.word	0x0800571c
 8004c18:	0800571c 	.word	0x0800571c
 8004c1c:	08005720 	.word	0x08005720

08004c20 <__retarget_lock_init_recursive>:
 8004c20:	4770      	bx	lr

08004c22 <__retarget_lock_acquire_recursive>:
 8004c22:	4770      	bx	lr

08004c24 <__retarget_lock_release_recursive>:
 8004c24:	4770      	bx	lr
	...

08004c28 <_free_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	4605      	mov	r5, r0
 8004c2c:	2900      	cmp	r1, #0
 8004c2e:	d041      	beq.n	8004cb4 <_free_r+0x8c>
 8004c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c34:	1f0c      	subs	r4, r1, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bfb8      	it	lt
 8004c3a:	18e4      	addlt	r4, r4, r3
 8004c3c:	f000 f8e0 	bl	8004e00 <__malloc_lock>
 8004c40:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb8 <_free_r+0x90>)
 8004c42:	6813      	ldr	r3, [r2, #0]
 8004c44:	b933      	cbnz	r3, 8004c54 <_free_r+0x2c>
 8004c46:	6063      	str	r3, [r4, #4]
 8004c48:	6014      	str	r4, [r2, #0]
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c50:	f000 b8dc 	b.w	8004e0c <__malloc_unlock>
 8004c54:	42a3      	cmp	r3, r4
 8004c56:	d908      	bls.n	8004c6a <_free_r+0x42>
 8004c58:	6820      	ldr	r0, [r4, #0]
 8004c5a:	1821      	adds	r1, r4, r0
 8004c5c:	428b      	cmp	r3, r1
 8004c5e:	bf01      	itttt	eq
 8004c60:	6819      	ldreq	r1, [r3, #0]
 8004c62:	685b      	ldreq	r3, [r3, #4]
 8004c64:	1809      	addeq	r1, r1, r0
 8004c66:	6021      	streq	r1, [r4, #0]
 8004c68:	e7ed      	b.n	8004c46 <_free_r+0x1e>
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	b10b      	cbz	r3, 8004c74 <_free_r+0x4c>
 8004c70:	42a3      	cmp	r3, r4
 8004c72:	d9fa      	bls.n	8004c6a <_free_r+0x42>
 8004c74:	6811      	ldr	r1, [r2, #0]
 8004c76:	1850      	adds	r0, r2, r1
 8004c78:	42a0      	cmp	r0, r4
 8004c7a:	d10b      	bne.n	8004c94 <_free_r+0x6c>
 8004c7c:	6820      	ldr	r0, [r4, #0]
 8004c7e:	4401      	add	r1, r0
 8004c80:	1850      	adds	r0, r2, r1
 8004c82:	4283      	cmp	r3, r0
 8004c84:	6011      	str	r1, [r2, #0]
 8004c86:	d1e0      	bne.n	8004c4a <_free_r+0x22>
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	6053      	str	r3, [r2, #4]
 8004c8e:	4408      	add	r0, r1
 8004c90:	6010      	str	r0, [r2, #0]
 8004c92:	e7da      	b.n	8004c4a <_free_r+0x22>
 8004c94:	d902      	bls.n	8004c9c <_free_r+0x74>
 8004c96:	230c      	movs	r3, #12
 8004c98:	602b      	str	r3, [r5, #0]
 8004c9a:	e7d6      	b.n	8004c4a <_free_r+0x22>
 8004c9c:	6820      	ldr	r0, [r4, #0]
 8004c9e:	1821      	adds	r1, r4, r0
 8004ca0:	428b      	cmp	r3, r1
 8004ca2:	bf04      	itt	eq
 8004ca4:	6819      	ldreq	r1, [r3, #0]
 8004ca6:	685b      	ldreq	r3, [r3, #4]
 8004ca8:	6063      	str	r3, [r4, #4]
 8004caa:	bf04      	itt	eq
 8004cac:	1809      	addeq	r1, r1, r0
 8004cae:	6021      	streq	r1, [r4, #0]
 8004cb0:	6054      	str	r4, [r2, #4]
 8004cb2:	e7ca      	b.n	8004c4a <_free_r+0x22>
 8004cb4:	bd38      	pop	{r3, r4, r5, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20000794 	.word	0x20000794

08004cbc <sbrk_aligned>:
 8004cbc:	b570      	push	{r4, r5, r6, lr}
 8004cbe:	4e0f      	ldr	r6, [pc, #60]	@ (8004cfc <sbrk_aligned+0x40>)
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	6831      	ldr	r1, [r6, #0]
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	b911      	cbnz	r1, 8004cce <sbrk_aligned+0x12>
 8004cc8:	f000 fca6 	bl	8005618 <_sbrk_r>
 8004ccc:	6030      	str	r0, [r6, #0]
 8004cce:	4621      	mov	r1, r4
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	f000 fca1 	bl	8005618 <_sbrk_r>
 8004cd6:	1c43      	adds	r3, r0, #1
 8004cd8:	d103      	bne.n	8004ce2 <sbrk_aligned+0x26>
 8004cda:	f04f 34ff 	mov.w	r4, #4294967295
 8004cde:	4620      	mov	r0, r4
 8004ce0:	bd70      	pop	{r4, r5, r6, pc}
 8004ce2:	1cc4      	adds	r4, r0, #3
 8004ce4:	f024 0403 	bic.w	r4, r4, #3
 8004ce8:	42a0      	cmp	r0, r4
 8004cea:	d0f8      	beq.n	8004cde <sbrk_aligned+0x22>
 8004cec:	1a21      	subs	r1, r4, r0
 8004cee:	4628      	mov	r0, r5
 8004cf0:	f000 fc92 	bl	8005618 <_sbrk_r>
 8004cf4:	3001      	adds	r0, #1
 8004cf6:	d1f2      	bne.n	8004cde <sbrk_aligned+0x22>
 8004cf8:	e7ef      	b.n	8004cda <sbrk_aligned+0x1e>
 8004cfa:	bf00      	nop
 8004cfc:	20000790 	.word	0x20000790

08004d00 <_malloc_r>:
 8004d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d04:	1ccd      	adds	r5, r1, #3
 8004d06:	f025 0503 	bic.w	r5, r5, #3
 8004d0a:	3508      	adds	r5, #8
 8004d0c:	2d0c      	cmp	r5, #12
 8004d0e:	bf38      	it	cc
 8004d10:	250c      	movcc	r5, #12
 8004d12:	2d00      	cmp	r5, #0
 8004d14:	4606      	mov	r6, r0
 8004d16:	db01      	blt.n	8004d1c <_malloc_r+0x1c>
 8004d18:	42a9      	cmp	r1, r5
 8004d1a:	d904      	bls.n	8004d26 <_malloc_r+0x26>
 8004d1c:	230c      	movs	r3, #12
 8004d1e:	6033      	str	r3, [r6, #0]
 8004d20:	2000      	movs	r0, #0
 8004d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004dfc <_malloc_r+0xfc>
 8004d2a:	f000 f869 	bl	8004e00 <__malloc_lock>
 8004d2e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d32:	461c      	mov	r4, r3
 8004d34:	bb44      	cbnz	r4, 8004d88 <_malloc_r+0x88>
 8004d36:	4629      	mov	r1, r5
 8004d38:	4630      	mov	r0, r6
 8004d3a:	f7ff ffbf 	bl	8004cbc <sbrk_aligned>
 8004d3e:	1c43      	adds	r3, r0, #1
 8004d40:	4604      	mov	r4, r0
 8004d42:	d158      	bne.n	8004df6 <_malloc_r+0xf6>
 8004d44:	f8d8 4000 	ldr.w	r4, [r8]
 8004d48:	4627      	mov	r7, r4
 8004d4a:	2f00      	cmp	r7, #0
 8004d4c:	d143      	bne.n	8004dd6 <_malloc_r+0xd6>
 8004d4e:	2c00      	cmp	r4, #0
 8004d50:	d04b      	beq.n	8004dea <_malloc_r+0xea>
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	4639      	mov	r1, r7
 8004d56:	4630      	mov	r0, r6
 8004d58:	eb04 0903 	add.w	r9, r4, r3
 8004d5c:	f000 fc5c 	bl	8005618 <_sbrk_r>
 8004d60:	4581      	cmp	r9, r0
 8004d62:	d142      	bne.n	8004dea <_malloc_r+0xea>
 8004d64:	6821      	ldr	r1, [r4, #0]
 8004d66:	1a6d      	subs	r5, r5, r1
 8004d68:	4629      	mov	r1, r5
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	f7ff ffa6 	bl	8004cbc <sbrk_aligned>
 8004d70:	3001      	adds	r0, #1
 8004d72:	d03a      	beq.n	8004dea <_malloc_r+0xea>
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	442b      	add	r3, r5
 8004d78:	6023      	str	r3, [r4, #0]
 8004d7a:	f8d8 3000 	ldr.w	r3, [r8]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	bb62      	cbnz	r2, 8004ddc <_malloc_r+0xdc>
 8004d82:	f8c8 7000 	str.w	r7, [r8]
 8004d86:	e00f      	b.n	8004da8 <_malloc_r+0xa8>
 8004d88:	6822      	ldr	r2, [r4, #0]
 8004d8a:	1b52      	subs	r2, r2, r5
 8004d8c:	d420      	bmi.n	8004dd0 <_malloc_r+0xd0>
 8004d8e:	2a0b      	cmp	r2, #11
 8004d90:	d917      	bls.n	8004dc2 <_malloc_r+0xc2>
 8004d92:	1961      	adds	r1, r4, r5
 8004d94:	42a3      	cmp	r3, r4
 8004d96:	6025      	str	r5, [r4, #0]
 8004d98:	bf18      	it	ne
 8004d9a:	6059      	strne	r1, [r3, #4]
 8004d9c:	6863      	ldr	r3, [r4, #4]
 8004d9e:	bf08      	it	eq
 8004da0:	f8c8 1000 	streq.w	r1, [r8]
 8004da4:	5162      	str	r2, [r4, r5]
 8004da6:	604b      	str	r3, [r1, #4]
 8004da8:	4630      	mov	r0, r6
 8004daa:	f000 f82f 	bl	8004e0c <__malloc_unlock>
 8004dae:	f104 000b 	add.w	r0, r4, #11
 8004db2:	1d23      	adds	r3, r4, #4
 8004db4:	f020 0007 	bic.w	r0, r0, #7
 8004db8:	1ac2      	subs	r2, r0, r3
 8004dba:	bf1c      	itt	ne
 8004dbc:	1a1b      	subne	r3, r3, r0
 8004dbe:	50a3      	strne	r3, [r4, r2]
 8004dc0:	e7af      	b.n	8004d22 <_malloc_r+0x22>
 8004dc2:	6862      	ldr	r2, [r4, #4]
 8004dc4:	42a3      	cmp	r3, r4
 8004dc6:	bf0c      	ite	eq
 8004dc8:	f8c8 2000 	streq.w	r2, [r8]
 8004dcc:	605a      	strne	r2, [r3, #4]
 8004dce:	e7eb      	b.n	8004da8 <_malloc_r+0xa8>
 8004dd0:	4623      	mov	r3, r4
 8004dd2:	6864      	ldr	r4, [r4, #4]
 8004dd4:	e7ae      	b.n	8004d34 <_malloc_r+0x34>
 8004dd6:	463c      	mov	r4, r7
 8004dd8:	687f      	ldr	r7, [r7, #4]
 8004dda:	e7b6      	b.n	8004d4a <_malloc_r+0x4a>
 8004ddc:	461a      	mov	r2, r3
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	42a3      	cmp	r3, r4
 8004de2:	d1fb      	bne.n	8004ddc <_malloc_r+0xdc>
 8004de4:	2300      	movs	r3, #0
 8004de6:	6053      	str	r3, [r2, #4]
 8004de8:	e7de      	b.n	8004da8 <_malloc_r+0xa8>
 8004dea:	230c      	movs	r3, #12
 8004dec:	6033      	str	r3, [r6, #0]
 8004dee:	4630      	mov	r0, r6
 8004df0:	f000 f80c 	bl	8004e0c <__malloc_unlock>
 8004df4:	e794      	b.n	8004d20 <_malloc_r+0x20>
 8004df6:	6005      	str	r5, [r0, #0]
 8004df8:	e7d6      	b.n	8004da8 <_malloc_r+0xa8>
 8004dfa:	bf00      	nop
 8004dfc:	20000794 	.word	0x20000794

08004e00 <__malloc_lock>:
 8004e00:	4801      	ldr	r0, [pc, #4]	@ (8004e08 <__malloc_lock+0x8>)
 8004e02:	f7ff bf0e 	b.w	8004c22 <__retarget_lock_acquire_recursive>
 8004e06:	bf00      	nop
 8004e08:	2000078c 	.word	0x2000078c

08004e0c <__malloc_unlock>:
 8004e0c:	4801      	ldr	r0, [pc, #4]	@ (8004e14 <__malloc_unlock+0x8>)
 8004e0e:	f7ff bf09 	b.w	8004c24 <__retarget_lock_release_recursive>
 8004e12:	bf00      	nop
 8004e14:	2000078c 	.word	0x2000078c

08004e18 <__sfputc_r>:
 8004e18:	6893      	ldr	r3, [r2, #8]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	b410      	push	{r4}
 8004e20:	6093      	str	r3, [r2, #8]
 8004e22:	da08      	bge.n	8004e36 <__sfputc_r+0x1e>
 8004e24:	6994      	ldr	r4, [r2, #24]
 8004e26:	42a3      	cmp	r3, r4
 8004e28:	db01      	blt.n	8004e2e <__sfputc_r+0x16>
 8004e2a:	290a      	cmp	r1, #10
 8004e2c:	d103      	bne.n	8004e36 <__sfputc_r+0x1e>
 8004e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e32:	f7ff bde8 	b.w	8004a06 <__swbuf_r>
 8004e36:	6813      	ldr	r3, [r2, #0]
 8004e38:	1c58      	adds	r0, r3, #1
 8004e3a:	6010      	str	r0, [r2, #0]
 8004e3c:	7019      	strb	r1, [r3, #0]
 8004e3e:	4608      	mov	r0, r1
 8004e40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <__sfputs_r>:
 8004e46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e48:	4606      	mov	r6, r0
 8004e4a:	460f      	mov	r7, r1
 8004e4c:	4614      	mov	r4, r2
 8004e4e:	18d5      	adds	r5, r2, r3
 8004e50:	42ac      	cmp	r4, r5
 8004e52:	d101      	bne.n	8004e58 <__sfputs_r+0x12>
 8004e54:	2000      	movs	r0, #0
 8004e56:	e007      	b.n	8004e68 <__sfputs_r+0x22>
 8004e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e5c:	463a      	mov	r2, r7
 8004e5e:	4630      	mov	r0, r6
 8004e60:	f7ff ffda 	bl	8004e18 <__sfputc_r>
 8004e64:	1c43      	adds	r3, r0, #1
 8004e66:	d1f3      	bne.n	8004e50 <__sfputs_r+0xa>
 8004e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e6c <_vfiprintf_r>:
 8004e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e70:	460d      	mov	r5, r1
 8004e72:	b09d      	sub	sp, #116	@ 0x74
 8004e74:	4614      	mov	r4, r2
 8004e76:	4698      	mov	r8, r3
 8004e78:	4606      	mov	r6, r0
 8004e7a:	b118      	cbz	r0, 8004e84 <_vfiprintf_r+0x18>
 8004e7c:	6a03      	ldr	r3, [r0, #32]
 8004e7e:	b90b      	cbnz	r3, 8004e84 <_vfiprintf_r+0x18>
 8004e80:	f7ff fcd8 	bl	8004834 <__sinit>
 8004e84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e86:	07d9      	lsls	r1, r3, #31
 8004e88:	d405      	bmi.n	8004e96 <_vfiprintf_r+0x2a>
 8004e8a:	89ab      	ldrh	r3, [r5, #12]
 8004e8c:	059a      	lsls	r2, r3, #22
 8004e8e:	d402      	bmi.n	8004e96 <_vfiprintf_r+0x2a>
 8004e90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e92:	f7ff fec6 	bl	8004c22 <__retarget_lock_acquire_recursive>
 8004e96:	89ab      	ldrh	r3, [r5, #12]
 8004e98:	071b      	lsls	r3, r3, #28
 8004e9a:	d501      	bpl.n	8004ea0 <_vfiprintf_r+0x34>
 8004e9c:	692b      	ldr	r3, [r5, #16]
 8004e9e:	b99b      	cbnz	r3, 8004ec8 <_vfiprintf_r+0x5c>
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	f7ff fdee 	bl	8004a84 <__swsetup_r>
 8004ea8:	b170      	cbz	r0, 8004ec8 <_vfiprintf_r+0x5c>
 8004eaa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004eac:	07dc      	lsls	r4, r3, #31
 8004eae:	d504      	bpl.n	8004eba <_vfiprintf_r+0x4e>
 8004eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb4:	b01d      	add	sp, #116	@ 0x74
 8004eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eba:	89ab      	ldrh	r3, [r5, #12]
 8004ebc:	0598      	lsls	r0, r3, #22
 8004ebe:	d4f7      	bmi.n	8004eb0 <_vfiprintf_r+0x44>
 8004ec0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ec2:	f7ff feaf 	bl	8004c24 <__retarget_lock_release_recursive>
 8004ec6:	e7f3      	b.n	8004eb0 <_vfiprintf_r+0x44>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ecc:	2320      	movs	r3, #32
 8004ece:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ed2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ed6:	2330      	movs	r3, #48	@ 0x30
 8004ed8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005088 <_vfiprintf_r+0x21c>
 8004edc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ee0:	f04f 0901 	mov.w	r9, #1
 8004ee4:	4623      	mov	r3, r4
 8004ee6:	469a      	mov	sl, r3
 8004ee8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eec:	b10a      	cbz	r2, 8004ef2 <_vfiprintf_r+0x86>
 8004eee:	2a25      	cmp	r2, #37	@ 0x25
 8004ef0:	d1f9      	bne.n	8004ee6 <_vfiprintf_r+0x7a>
 8004ef2:	ebba 0b04 	subs.w	fp, sl, r4
 8004ef6:	d00b      	beq.n	8004f10 <_vfiprintf_r+0xa4>
 8004ef8:	465b      	mov	r3, fp
 8004efa:	4622      	mov	r2, r4
 8004efc:	4629      	mov	r1, r5
 8004efe:	4630      	mov	r0, r6
 8004f00:	f7ff ffa1 	bl	8004e46 <__sfputs_r>
 8004f04:	3001      	adds	r0, #1
 8004f06:	f000 80a7 	beq.w	8005058 <_vfiprintf_r+0x1ec>
 8004f0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f0c:	445a      	add	r2, fp
 8004f0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f10:	f89a 3000 	ldrb.w	r3, [sl]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 809f 	beq.w	8005058 <_vfiprintf_r+0x1ec>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f24:	f10a 0a01 	add.w	sl, sl, #1
 8004f28:	9304      	str	r3, [sp, #16]
 8004f2a:	9307      	str	r3, [sp, #28]
 8004f2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f30:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f32:	4654      	mov	r4, sl
 8004f34:	2205      	movs	r2, #5
 8004f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f3a:	4853      	ldr	r0, [pc, #332]	@ (8005088 <_vfiprintf_r+0x21c>)
 8004f3c:	f7fb f970 	bl	8000220 <memchr>
 8004f40:	9a04      	ldr	r2, [sp, #16]
 8004f42:	b9d8      	cbnz	r0, 8004f7c <_vfiprintf_r+0x110>
 8004f44:	06d1      	lsls	r1, r2, #27
 8004f46:	bf44      	itt	mi
 8004f48:	2320      	movmi	r3, #32
 8004f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f4e:	0713      	lsls	r3, r2, #28
 8004f50:	bf44      	itt	mi
 8004f52:	232b      	movmi	r3, #43	@ 0x2b
 8004f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f58:	f89a 3000 	ldrb.w	r3, [sl]
 8004f5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f5e:	d015      	beq.n	8004f8c <_vfiprintf_r+0x120>
 8004f60:	9a07      	ldr	r2, [sp, #28]
 8004f62:	4654      	mov	r4, sl
 8004f64:	2000      	movs	r0, #0
 8004f66:	f04f 0c0a 	mov.w	ip, #10
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f70:	3b30      	subs	r3, #48	@ 0x30
 8004f72:	2b09      	cmp	r3, #9
 8004f74:	d94b      	bls.n	800500e <_vfiprintf_r+0x1a2>
 8004f76:	b1b0      	cbz	r0, 8004fa6 <_vfiprintf_r+0x13a>
 8004f78:	9207      	str	r2, [sp, #28]
 8004f7a:	e014      	b.n	8004fa6 <_vfiprintf_r+0x13a>
 8004f7c:	eba0 0308 	sub.w	r3, r0, r8
 8004f80:	fa09 f303 	lsl.w	r3, r9, r3
 8004f84:	4313      	orrs	r3, r2
 8004f86:	9304      	str	r3, [sp, #16]
 8004f88:	46a2      	mov	sl, r4
 8004f8a:	e7d2      	b.n	8004f32 <_vfiprintf_r+0xc6>
 8004f8c:	9b03      	ldr	r3, [sp, #12]
 8004f8e:	1d19      	adds	r1, r3, #4
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	9103      	str	r1, [sp, #12]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	bfbb      	ittet	lt
 8004f98:	425b      	neglt	r3, r3
 8004f9a:	f042 0202 	orrlt.w	r2, r2, #2
 8004f9e:	9307      	strge	r3, [sp, #28]
 8004fa0:	9307      	strlt	r3, [sp, #28]
 8004fa2:	bfb8      	it	lt
 8004fa4:	9204      	strlt	r2, [sp, #16]
 8004fa6:	7823      	ldrb	r3, [r4, #0]
 8004fa8:	2b2e      	cmp	r3, #46	@ 0x2e
 8004faa:	d10a      	bne.n	8004fc2 <_vfiprintf_r+0x156>
 8004fac:	7863      	ldrb	r3, [r4, #1]
 8004fae:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fb0:	d132      	bne.n	8005018 <_vfiprintf_r+0x1ac>
 8004fb2:	9b03      	ldr	r3, [sp, #12]
 8004fb4:	1d1a      	adds	r2, r3, #4
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	9203      	str	r2, [sp, #12]
 8004fba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004fbe:	3402      	adds	r4, #2
 8004fc0:	9305      	str	r3, [sp, #20]
 8004fc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005098 <_vfiprintf_r+0x22c>
 8004fc6:	7821      	ldrb	r1, [r4, #0]
 8004fc8:	2203      	movs	r2, #3
 8004fca:	4650      	mov	r0, sl
 8004fcc:	f7fb f928 	bl	8000220 <memchr>
 8004fd0:	b138      	cbz	r0, 8004fe2 <_vfiprintf_r+0x176>
 8004fd2:	9b04      	ldr	r3, [sp, #16]
 8004fd4:	eba0 000a 	sub.w	r0, r0, sl
 8004fd8:	2240      	movs	r2, #64	@ 0x40
 8004fda:	4082      	lsls	r2, r0
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	3401      	adds	r4, #1
 8004fe0:	9304      	str	r3, [sp, #16]
 8004fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fe6:	4829      	ldr	r0, [pc, #164]	@ (800508c <_vfiprintf_r+0x220>)
 8004fe8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fec:	2206      	movs	r2, #6
 8004fee:	f7fb f917 	bl	8000220 <memchr>
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	d03f      	beq.n	8005076 <_vfiprintf_r+0x20a>
 8004ff6:	4b26      	ldr	r3, [pc, #152]	@ (8005090 <_vfiprintf_r+0x224>)
 8004ff8:	bb1b      	cbnz	r3, 8005042 <_vfiprintf_r+0x1d6>
 8004ffa:	9b03      	ldr	r3, [sp, #12]
 8004ffc:	3307      	adds	r3, #7
 8004ffe:	f023 0307 	bic.w	r3, r3, #7
 8005002:	3308      	adds	r3, #8
 8005004:	9303      	str	r3, [sp, #12]
 8005006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005008:	443b      	add	r3, r7
 800500a:	9309      	str	r3, [sp, #36]	@ 0x24
 800500c:	e76a      	b.n	8004ee4 <_vfiprintf_r+0x78>
 800500e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005012:	460c      	mov	r4, r1
 8005014:	2001      	movs	r0, #1
 8005016:	e7a8      	b.n	8004f6a <_vfiprintf_r+0xfe>
 8005018:	2300      	movs	r3, #0
 800501a:	3401      	adds	r4, #1
 800501c:	9305      	str	r3, [sp, #20]
 800501e:	4619      	mov	r1, r3
 8005020:	f04f 0c0a 	mov.w	ip, #10
 8005024:	4620      	mov	r0, r4
 8005026:	f810 2b01 	ldrb.w	r2, [r0], #1
 800502a:	3a30      	subs	r2, #48	@ 0x30
 800502c:	2a09      	cmp	r2, #9
 800502e:	d903      	bls.n	8005038 <_vfiprintf_r+0x1cc>
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0c6      	beq.n	8004fc2 <_vfiprintf_r+0x156>
 8005034:	9105      	str	r1, [sp, #20]
 8005036:	e7c4      	b.n	8004fc2 <_vfiprintf_r+0x156>
 8005038:	fb0c 2101 	mla	r1, ip, r1, r2
 800503c:	4604      	mov	r4, r0
 800503e:	2301      	movs	r3, #1
 8005040:	e7f0      	b.n	8005024 <_vfiprintf_r+0x1b8>
 8005042:	ab03      	add	r3, sp, #12
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	462a      	mov	r2, r5
 8005048:	4b12      	ldr	r3, [pc, #72]	@ (8005094 <_vfiprintf_r+0x228>)
 800504a:	a904      	add	r1, sp, #16
 800504c:	4630      	mov	r0, r6
 800504e:	f3af 8000 	nop.w
 8005052:	4607      	mov	r7, r0
 8005054:	1c78      	adds	r0, r7, #1
 8005056:	d1d6      	bne.n	8005006 <_vfiprintf_r+0x19a>
 8005058:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800505a:	07d9      	lsls	r1, r3, #31
 800505c:	d405      	bmi.n	800506a <_vfiprintf_r+0x1fe>
 800505e:	89ab      	ldrh	r3, [r5, #12]
 8005060:	059a      	lsls	r2, r3, #22
 8005062:	d402      	bmi.n	800506a <_vfiprintf_r+0x1fe>
 8005064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005066:	f7ff fddd 	bl	8004c24 <__retarget_lock_release_recursive>
 800506a:	89ab      	ldrh	r3, [r5, #12]
 800506c:	065b      	lsls	r3, r3, #25
 800506e:	f53f af1f 	bmi.w	8004eb0 <_vfiprintf_r+0x44>
 8005072:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005074:	e71e      	b.n	8004eb4 <_vfiprintf_r+0x48>
 8005076:	ab03      	add	r3, sp, #12
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	462a      	mov	r2, r5
 800507c:	4b05      	ldr	r3, [pc, #20]	@ (8005094 <_vfiprintf_r+0x228>)
 800507e:	a904      	add	r1, sp, #16
 8005080:	4630      	mov	r0, r6
 8005082:	f000 f879 	bl	8005178 <_printf_i>
 8005086:	e7e4      	b.n	8005052 <_vfiprintf_r+0x1e6>
 8005088:	080056e0 	.word	0x080056e0
 800508c:	080056ea 	.word	0x080056ea
 8005090:	00000000 	.word	0x00000000
 8005094:	08004e47 	.word	0x08004e47
 8005098:	080056e6 	.word	0x080056e6

0800509c <_printf_common>:
 800509c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a0:	4616      	mov	r6, r2
 80050a2:	4698      	mov	r8, r3
 80050a4:	688a      	ldr	r2, [r1, #8]
 80050a6:	690b      	ldr	r3, [r1, #16]
 80050a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050ac:	4293      	cmp	r3, r2
 80050ae:	bfb8      	it	lt
 80050b0:	4613      	movlt	r3, r2
 80050b2:	6033      	str	r3, [r6, #0]
 80050b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050b8:	4607      	mov	r7, r0
 80050ba:	460c      	mov	r4, r1
 80050bc:	b10a      	cbz	r2, 80050c2 <_printf_common+0x26>
 80050be:	3301      	adds	r3, #1
 80050c0:	6033      	str	r3, [r6, #0]
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	0699      	lsls	r1, r3, #26
 80050c6:	bf42      	ittt	mi
 80050c8:	6833      	ldrmi	r3, [r6, #0]
 80050ca:	3302      	addmi	r3, #2
 80050cc:	6033      	strmi	r3, [r6, #0]
 80050ce:	6825      	ldr	r5, [r4, #0]
 80050d0:	f015 0506 	ands.w	r5, r5, #6
 80050d4:	d106      	bne.n	80050e4 <_printf_common+0x48>
 80050d6:	f104 0a19 	add.w	sl, r4, #25
 80050da:	68e3      	ldr	r3, [r4, #12]
 80050dc:	6832      	ldr	r2, [r6, #0]
 80050de:	1a9b      	subs	r3, r3, r2
 80050e0:	42ab      	cmp	r3, r5
 80050e2:	dc26      	bgt.n	8005132 <_printf_common+0x96>
 80050e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050e8:	6822      	ldr	r2, [r4, #0]
 80050ea:	3b00      	subs	r3, #0
 80050ec:	bf18      	it	ne
 80050ee:	2301      	movne	r3, #1
 80050f0:	0692      	lsls	r2, r2, #26
 80050f2:	d42b      	bmi.n	800514c <_printf_common+0xb0>
 80050f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050f8:	4641      	mov	r1, r8
 80050fa:	4638      	mov	r0, r7
 80050fc:	47c8      	blx	r9
 80050fe:	3001      	adds	r0, #1
 8005100:	d01e      	beq.n	8005140 <_printf_common+0xa4>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	6922      	ldr	r2, [r4, #16]
 8005106:	f003 0306 	and.w	r3, r3, #6
 800510a:	2b04      	cmp	r3, #4
 800510c:	bf02      	ittt	eq
 800510e:	68e5      	ldreq	r5, [r4, #12]
 8005110:	6833      	ldreq	r3, [r6, #0]
 8005112:	1aed      	subeq	r5, r5, r3
 8005114:	68a3      	ldr	r3, [r4, #8]
 8005116:	bf0c      	ite	eq
 8005118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800511c:	2500      	movne	r5, #0
 800511e:	4293      	cmp	r3, r2
 8005120:	bfc4      	itt	gt
 8005122:	1a9b      	subgt	r3, r3, r2
 8005124:	18ed      	addgt	r5, r5, r3
 8005126:	2600      	movs	r6, #0
 8005128:	341a      	adds	r4, #26
 800512a:	42b5      	cmp	r5, r6
 800512c:	d11a      	bne.n	8005164 <_printf_common+0xc8>
 800512e:	2000      	movs	r0, #0
 8005130:	e008      	b.n	8005144 <_printf_common+0xa8>
 8005132:	2301      	movs	r3, #1
 8005134:	4652      	mov	r2, sl
 8005136:	4641      	mov	r1, r8
 8005138:	4638      	mov	r0, r7
 800513a:	47c8      	blx	r9
 800513c:	3001      	adds	r0, #1
 800513e:	d103      	bne.n	8005148 <_printf_common+0xac>
 8005140:	f04f 30ff 	mov.w	r0, #4294967295
 8005144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005148:	3501      	adds	r5, #1
 800514a:	e7c6      	b.n	80050da <_printf_common+0x3e>
 800514c:	18e1      	adds	r1, r4, r3
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	2030      	movs	r0, #48	@ 0x30
 8005152:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005156:	4422      	add	r2, r4
 8005158:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800515c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005160:	3302      	adds	r3, #2
 8005162:	e7c7      	b.n	80050f4 <_printf_common+0x58>
 8005164:	2301      	movs	r3, #1
 8005166:	4622      	mov	r2, r4
 8005168:	4641      	mov	r1, r8
 800516a:	4638      	mov	r0, r7
 800516c:	47c8      	blx	r9
 800516e:	3001      	adds	r0, #1
 8005170:	d0e6      	beq.n	8005140 <_printf_common+0xa4>
 8005172:	3601      	adds	r6, #1
 8005174:	e7d9      	b.n	800512a <_printf_common+0x8e>
	...

08005178 <_printf_i>:
 8005178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800517c:	7e0f      	ldrb	r7, [r1, #24]
 800517e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005180:	2f78      	cmp	r7, #120	@ 0x78
 8005182:	4691      	mov	r9, r2
 8005184:	4680      	mov	r8, r0
 8005186:	460c      	mov	r4, r1
 8005188:	469a      	mov	sl, r3
 800518a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800518e:	d807      	bhi.n	80051a0 <_printf_i+0x28>
 8005190:	2f62      	cmp	r7, #98	@ 0x62
 8005192:	d80a      	bhi.n	80051aa <_printf_i+0x32>
 8005194:	2f00      	cmp	r7, #0
 8005196:	f000 80d2 	beq.w	800533e <_printf_i+0x1c6>
 800519a:	2f58      	cmp	r7, #88	@ 0x58
 800519c:	f000 80b9 	beq.w	8005312 <_printf_i+0x19a>
 80051a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80051a8:	e03a      	b.n	8005220 <_printf_i+0xa8>
 80051aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80051ae:	2b15      	cmp	r3, #21
 80051b0:	d8f6      	bhi.n	80051a0 <_printf_i+0x28>
 80051b2:	a101      	add	r1, pc, #4	@ (adr r1, 80051b8 <_printf_i+0x40>)
 80051b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051b8:	08005211 	.word	0x08005211
 80051bc:	08005225 	.word	0x08005225
 80051c0:	080051a1 	.word	0x080051a1
 80051c4:	080051a1 	.word	0x080051a1
 80051c8:	080051a1 	.word	0x080051a1
 80051cc:	080051a1 	.word	0x080051a1
 80051d0:	08005225 	.word	0x08005225
 80051d4:	080051a1 	.word	0x080051a1
 80051d8:	080051a1 	.word	0x080051a1
 80051dc:	080051a1 	.word	0x080051a1
 80051e0:	080051a1 	.word	0x080051a1
 80051e4:	08005325 	.word	0x08005325
 80051e8:	0800524f 	.word	0x0800524f
 80051ec:	080052df 	.word	0x080052df
 80051f0:	080051a1 	.word	0x080051a1
 80051f4:	080051a1 	.word	0x080051a1
 80051f8:	08005347 	.word	0x08005347
 80051fc:	080051a1 	.word	0x080051a1
 8005200:	0800524f 	.word	0x0800524f
 8005204:	080051a1 	.word	0x080051a1
 8005208:	080051a1 	.word	0x080051a1
 800520c:	080052e7 	.word	0x080052e7
 8005210:	6833      	ldr	r3, [r6, #0]
 8005212:	1d1a      	adds	r2, r3, #4
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6032      	str	r2, [r6, #0]
 8005218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800521c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005220:	2301      	movs	r3, #1
 8005222:	e09d      	b.n	8005360 <_printf_i+0x1e8>
 8005224:	6833      	ldr	r3, [r6, #0]
 8005226:	6820      	ldr	r0, [r4, #0]
 8005228:	1d19      	adds	r1, r3, #4
 800522a:	6031      	str	r1, [r6, #0]
 800522c:	0606      	lsls	r6, r0, #24
 800522e:	d501      	bpl.n	8005234 <_printf_i+0xbc>
 8005230:	681d      	ldr	r5, [r3, #0]
 8005232:	e003      	b.n	800523c <_printf_i+0xc4>
 8005234:	0645      	lsls	r5, r0, #25
 8005236:	d5fb      	bpl.n	8005230 <_printf_i+0xb8>
 8005238:	f9b3 5000 	ldrsh.w	r5, [r3]
 800523c:	2d00      	cmp	r5, #0
 800523e:	da03      	bge.n	8005248 <_printf_i+0xd0>
 8005240:	232d      	movs	r3, #45	@ 0x2d
 8005242:	426d      	negs	r5, r5
 8005244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005248:	4859      	ldr	r0, [pc, #356]	@ (80053b0 <_printf_i+0x238>)
 800524a:	230a      	movs	r3, #10
 800524c:	e011      	b.n	8005272 <_printf_i+0xfa>
 800524e:	6821      	ldr	r1, [r4, #0]
 8005250:	6833      	ldr	r3, [r6, #0]
 8005252:	0608      	lsls	r0, r1, #24
 8005254:	f853 5b04 	ldr.w	r5, [r3], #4
 8005258:	d402      	bmi.n	8005260 <_printf_i+0xe8>
 800525a:	0649      	lsls	r1, r1, #25
 800525c:	bf48      	it	mi
 800525e:	b2ad      	uxthmi	r5, r5
 8005260:	2f6f      	cmp	r7, #111	@ 0x6f
 8005262:	4853      	ldr	r0, [pc, #332]	@ (80053b0 <_printf_i+0x238>)
 8005264:	6033      	str	r3, [r6, #0]
 8005266:	bf14      	ite	ne
 8005268:	230a      	movne	r3, #10
 800526a:	2308      	moveq	r3, #8
 800526c:	2100      	movs	r1, #0
 800526e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005272:	6866      	ldr	r6, [r4, #4]
 8005274:	60a6      	str	r6, [r4, #8]
 8005276:	2e00      	cmp	r6, #0
 8005278:	bfa2      	ittt	ge
 800527a:	6821      	ldrge	r1, [r4, #0]
 800527c:	f021 0104 	bicge.w	r1, r1, #4
 8005280:	6021      	strge	r1, [r4, #0]
 8005282:	b90d      	cbnz	r5, 8005288 <_printf_i+0x110>
 8005284:	2e00      	cmp	r6, #0
 8005286:	d04b      	beq.n	8005320 <_printf_i+0x1a8>
 8005288:	4616      	mov	r6, r2
 800528a:	fbb5 f1f3 	udiv	r1, r5, r3
 800528e:	fb03 5711 	mls	r7, r3, r1, r5
 8005292:	5dc7      	ldrb	r7, [r0, r7]
 8005294:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005298:	462f      	mov	r7, r5
 800529a:	42bb      	cmp	r3, r7
 800529c:	460d      	mov	r5, r1
 800529e:	d9f4      	bls.n	800528a <_printf_i+0x112>
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d10b      	bne.n	80052bc <_printf_i+0x144>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	07df      	lsls	r7, r3, #31
 80052a8:	d508      	bpl.n	80052bc <_printf_i+0x144>
 80052aa:	6923      	ldr	r3, [r4, #16]
 80052ac:	6861      	ldr	r1, [r4, #4]
 80052ae:	4299      	cmp	r1, r3
 80052b0:	bfde      	ittt	le
 80052b2:	2330      	movle	r3, #48	@ 0x30
 80052b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052bc:	1b92      	subs	r2, r2, r6
 80052be:	6122      	str	r2, [r4, #16]
 80052c0:	f8cd a000 	str.w	sl, [sp]
 80052c4:	464b      	mov	r3, r9
 80052c6:	aa03      	add	r2, sp, #12
 80052c8:	4621      	mov	r1, r4
 80052ca:	4640      	mov	r0, r8
 80052cc:	f7ff fee6 	bl	800509c <_printf_common>
 80052d0:	3001      	adds	r0, #1
 80052d2:	d14a      	bne.n	800536a <_printf_i+0x1f2>
 80052d4:	f04f 30ff 	mov.w	r0, #4294967295
 80052d8:	b004      	add	sp, #16
 80052da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	f043 0320 	orr.w	r3, r3, #32
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	4833      	ldr	r0, [pc, #204]	@ (80053b4 <_printf_i+0x23c>)
 80052e8:	2778      	movs	r7, #120	@ 0x78
 80052ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	6831      	ldr	r1, [r6, #0]
 80052f2:	061f      	lsls	r7, r3, #24
 80052f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80052f8:	d402      	bmi.n	8005300 <_printf_i+0x188>
 80052fa:	065f      	lsls	r7, r3, #25
 80052fc:	bf48      	it	mi
 80052fe:	b2ad      	uxthmi	r5, r5
 8005300:	6031      	str	r1, [r6, #0]
 8005302:	07d9      	lsls	r1, r3, #31
 8005304:	bf44      	itt	mi
 8005306:	f043 0320 	orrmi.w	r3, r3, #32
 800530a:	6023      	strmi	r3, [r4, #0]
 800530c:	b11d      	cbz	r5, 8005316 <_printf_i+0x19e>
 800530e:	2310      	movs	r3, #16
 8005310:	e7ac      	b.n	800526c <_printf_i+0xf4>
 8005312:	4827      	ldr	r0, [pc, #156]	@ (80053b0 <_printf_i+0x238>)
 8005314:	e7e9      	b.n	80052ea <_printf_i+0x172>
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	f023 0320 	bic.w	r3, r3, #32
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	e7f6      	b.n	800530e <_printf_i+0x196>
 8005320:	4616      	mov	r6, r2
 8005322:	e7bd      	b.n	80052a0 <_printf_i+0x128>
 8005324:	6833      	ldr	r3, [r6, #0]
 8005326:	6825      	ldr	r5, [r4, #0]
 8005328:	6961      	ldr	r1, [r4, #20]
 800532a:	1d18      	adds	r0, r3, #4
 800532c:	6030      	str	r0, [r6, #0]
 800532e:	062e      	lsls	r6, r5, #24
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	d501      	bpl.n	8005338 <_printf_i+0x1c0>
 8005334:	6019      	str	r1, [r3, #0]
 8005336:	e002      	b.n	800533e <_printf_i+0x1c6>
 8005338:	0668      	lsls	r0, r5, #25
 800533a:	d5fb      	bpl.n	8005334 <_printf_i+0x1bc>
 800533c:	8019      	strh	r1, [r3, #0]
 800533e:	2300      	movs	r3, #0
 8005340:	6123      	str	r3, [r4, #16]
 8005342:	4616      	mov	r6, r2
 8005344:	e7bc      	b.n	80052c0 <_printf_i+0x148>
 8005346:	6833      	ldr	r3, [r6, #0]
 8005348:	1d1a      	adds	r2, r3, #4
 800534a:	6032      	str	r2, [r6, #0]
 800534c:	681e      	ldr	r6, [r3, #0]
 800534e:	6862      	ldr	r2, [r4, #4]
 8005350:	2100      	movs	r1, #0
 8005352:	4630      	mov	r0, r6
 8005354:	f7fa ff64 	bl	8000220 <memchr>
 8005358:	b108      	cbz	r0, 800535e <_printf_i+0x1e6>
 800535a:	1b80      	subs	r0, r0, r6
 800535c:	6060      	str	r0, [r4, #4]
 800535e:	6863      	ldr	r3, [r4, #4]
 8005360:	6123      	str	r3, [r4, #16]
 8005362:	2300      	movs	r3, #0
 8005364:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005368:	e7aa      	b.n	80052c0 <_printf_i+0x148>
 800536a:	6923      	ldr	r3, [r4, #16]
 800536c:	4632      	mov	r2, r6
 800536e:	4649      	mov	r1, r9
 8005370:	4640      	mov	r0, r8
 8005372:	47d0      	blx	sl
 8005374:	3001      	adds	r0, #1
 8005376:	d0ad      	beq.n	80052d4 <_printf_i+0x15c>
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	079b      	lsls	r3, r3, #30
 800537c:	d413      	bmi.n	80053a6 <_printf_i+0x22e>
 800537e:	68e0      	ldr	r0, [r4, #12]
 8005380:	9b03      	ldr	r3, [sp, #12]
 8005382:	4298      	cmp	r0, r3
 8005384:	bfb8      	it	lt
 8005386:	4618      	movlt	r0, r3
 8005388:	e7a6      	b.n	80052d8 <_printf_i+0x160>
 800538a:	2301      	movs	r3, #1
 800538c:	4632      	mov	r2, r6
 800538e:	4649      	mov	r1, r9
 8005390:	4640      	mov	r0, r8
 8005392:	47d0      	blx	sl
 8005394:	3001      	adds	r0, #1
 8005396:	d09d      	beq.n	80052d4 <_printf_i+0x15c>
 8005398:	3501      	adds	r5, #1
 800539a:	68e3      	ldr	r3, [r4, #12]
 800539c:	9903      	ldr	r1, [sp, #12]
 800539e:	1a5b      	subs	r3, r3, r1
 80053a0:	42ab      	cmp	r3, r5
 80053a2:	dcf2      	bgt.n	800538a <_printf_i+0x212>
 80053a4:	e7eb      	b.n	800537e <_printf_i+0x206>
 80053a6:	2500      	movs	r5, #0
 80053a8:	f104 0619 	add.w	r6, r4, #25
 80053ac:	e7f5      	b.n	800539a <_printf_i+0x222>
 80053ae:	bf00      	nop
 80053b0:	080056f1 	.word	0x080056f1
 80053b4:	08005702 	.word	0x08005702

080053b8 <__sflush_r>:
 80053b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c0:	0716      	lsls	r6, r2, #28
 80053c2:	4605      	mov	r5, r0
 80053c4:	460c      	mov	r4, r1
 80053c6:	d454      	bmi.n	8005472 <__sflush_r+0xba>
 80053c8:	684b      	ldr	r3, [r1, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	dc02      	bgt.n	80053d4 <__sflush_r+0x1c>
 80053ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	dd48      	ble.n	8005466 <__sflush_r+0xae>
 80053d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053d6:	2e00      	cmp	r6, #0
 80053d8:	d045      	beq.n	8005466 <__sflush_r+0xae>
 80053da:	2300      	movs	r3, #0
 80053dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80053e0:	682f      	ldr	r7, [r5, #0]
 80053e2:	6a21      	ldr	r1, [r4, #32]
 80053e4:	602b      	str	r3, [r5, #0]
 80053e6:	d030      	beq.n	800544a <__sflush_r+0x92>
 80053e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80053ea:	89a3      	ldrh	r3, [r4, #12]
 80053ec:	0759      	lsls	r1, r3, #29
 80053ee:	d505      	bpl.n	80053fc <__sflush_r+0x44>
 80053f0:	6863      	ldr	r3, [r4, #4]
 80053f2:	1ad2      	subs	r2, r2, r3
 80053f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80053f6:	b10b      	cbz	r3, 80053fc <__sflush_r+0x44>
 80053f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053fa:	1ad2      	subs	r2, r2, r3
 80053fc:	2300      	movs	r3, #0
 80053fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005400:	6a21      	ldr	r1, [r4, #32]
 8005402:	4628      	mov	r0, r5
 8005404:	47b0      	blx	r6
 8005406:	1c43      	adds	r3, r0, #1
 8005408:	89a3      	ldrh	r3, [r4, #12]
 800540a:	d106      	bne.n	800541a <__sflush_r+0x62>
 800540c:	6829      	ldr	r1, [r5, #0]
 800540e:	291d      	cmp	r1, #29
 8005410:	d82b      	bhi.n	800546a <__sflush_r+0xb2>
 8005412:	4a2a      	ldr	r2, [pc, #168]	@ (80054bc <__sflush_r+0x104>)
 8005414:	410a      	asrs	r2, r1
 8005416:	07d6      	lsls	r6, r2, #31
 8005418:	d427      	bmi.n	800546a <__sflush_r+0xb2>
 800541a:	2200      	movs	r2, #0
 800541c:	6062      	str	r2, [r4, #4]
 800541e:	04d9      	lsls	r1, r3, #19
 8005420:	6922      	ldr	r2, [r4, #16]
 8005422:	6022      	str	r2, [r4, #0]
 8005424:	d504      	bpl.n	8005430 <__sflush_r+0x78>
 8005426:	1c42      	adds	r2, r0, #1
 8005428:	d101      	bne.n	800542e <__sflush_r+0x76>
 800542a:	682b      	ldr	r3, [r5, #0]
 800542c:	b903      	cbnz	r3, 8005430 <__sflush_r+0x78>
 800542e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005430:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005432:	602f      	str	r7, [r5, #0]
 8005434:	b1b9      	cbz	r1, 8005466 <__sflush_r+0xae>
 8005436:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800543a:	4299      	cmp	r1, r3
 800543c:	d002      	beq.n	8005444 <__sflush_r+0x8c>
 800543e:	4628      	mov	r0, r5
 8005440:	f7ff fbf2 	bl	8004c28 <_free_r>
 8005444:	2300      	movs	r3, #0
 8005446:	6363      	str	r3, [r4, #52]	@ 0x34
 8005448:	e00d      	b.n	8005466 <__sflush_r+0xae>
 800544a:	2301      	movs	r3, #1
 800544c:	4628      	mov	r0, r5
 800544e:	47b0      	blx	r6
 8005450:	4602      	mov	r2, r0
 8005452:	1c50      	adds	r0, r2, #1
 8005454:	d1c9      	bne.n	80053ea <__sflush_r+0x32>
 8005456:	682b      	ldr	r3, [r5, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0c6      	beq.n	80053ea <__sflush_r+0x32>
 800545c:	2b1d      	cmp	r3, #29
 800545e:	d001      	beq.n	8005464 <__sflush_r+0xac>
 8005460:	2b16      	cmp	r3, #22
 8005462:	d11e      	bne.n	80054a2 <__sflush_r+0xea>
 8005464:	602f      	str	r7, [r5, #0]
 8005466:	2000      	movs	r0, #0
 8005468:	e022      	b.n	80054b0 <__sflush_r+0xf8>
 800546a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800546e:	b21b      	sxth	r3, r3
 8005470:	e01b      	b.n	80054aa <__sflush_r+0xf2>
 8005472:	690f      	ldr	r7, [r1, #16]
 8005474:	2f00      	cmp	r7, #0
 8005476:	d0f6      	beq.n	8005466 <__sflush_r+0xae>
 8005478:	0793      	lsls	r3, r2, #30
 800547a:	680e      	ldr	r6, [r1, #0]
 800547c:	bf08      	it	eq
 800547e:	694b      	ldreq	r3, [r1, #20]
 8005480:	600f      	str	r7, [r1, #0]
 8005482:	bf18      	it	ne
 8005484:	2300      	movne	r3, #0
 8005486:	eba6 0807 	sub.w	r8, r6, r7
 800548a:	608b      	str	r3, [r1, #8]
 800548c:	f1b8 0f00 	cmp.w	r8, #0
 8005490:	dde9      	ble.n	8005466 <__sflush_r+0xae>
 8005492:	6a21      	ldr	r1, [r4, #32]
 8005494:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005496:	4643      	mov	r3, r8
 8005498:	463a      	mov	r2, r7
 800549a:	4628      	mov	r0, r5
 800549c:	47b0      	blx	r6
 800549e:	2800      	cmp	r0, #0
 80054a0:	dc08      	bgt.n	80054b4 <__sflush_r+0xfc>
 80054a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054aa:	81a3      	strh	r3, [r4, #12]
 80054ac:	f04f 30ff 	mov.w	r0, #4294967295
 80054b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054b4:	4407      	add	r7, r0
 80054b6:	eba8 0800 	sub.w	r8, r8, r0
 80054ba:	e7e7      	b.n	800548c <__sflush_r+0xd4>
 80054bc:	dfbffffe 	.word	0xdfbffffe

080054c0 <_fflush_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	690b      	ldr	r3, [r1, #16]
 80054c4:	4605      	mov	r5, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	b913      	cbnz	r3, 80054d0 <_fflush_r+0x10>
 80054ca:	2500      	movs	r5, #0
 80054cc:	4628      	mov	r0, r5
 80054ce:	bd38      	pop	{r3, r4, r5, pc}
 80054d0:	b118      	cbz	r0, 80054da <_fflush_r+0x1a>
 80054d2:	6a03      	ldr	r3, [r0, #32]
 80054d4:	b90b      	cbnz	r3, 80054da <_fflush_r+0x1a>
 80054d6:	f7ff f9ad 	bl	8004834 <__sinit>
 80054da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0f3      	beq.n	80054ca <_fflush_r+0xa>
 80054e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80054e4:	07d0      	lsls	r0, r2, #31
 80054e6:	d404      	bmi.n	80054f2 <_fflush_r+0x32>
 80054e8:	0599      	lsls	r1, r3, #22
 80054ea:	d402      	bmi.n	80054f2 <_fflush_r+0x32>
 80054ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054ee:	f7ff fb98 	bl	8004c22 <__retarget_lock_acquire_recursive>
 80054f2:	4628      	mov	r0, r5
 80054f4:	4621      	mov	r1, r4
 80054f6:	f7ff ff5f 	bl	80053b8 <__sflush_r>
 80054fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054fc:	07da      	lsls	r2, r3, #31
 80054fe:	4605      	mov	r5, r0
 8005500:	d4e4      	bmi.n	80054cc <_fflush_r+0xc>
 8005502:	89a3      	ldrh	r3, [r4, #12]
 8005504:	059b      	lsls	r3, r3, #22
 8005506:	d4e1      	bmi.n	80054cc <_fflush_r+0xc>
 8005508:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800550a:	f7ff fb8b 	bl	8004c24 <__retarget_lock_release_recursive>
 800550e:	e7dd      	b.n	80054cc <_fflush_r+0xc>

08005510 <__swhatbuf_r>:
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	460c      	mov	r4, r1
 8005514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005518:	2900      	cmp	r1, #0
 800551a:	b096      	sub	sp, #88	@ 0x58
 800551c:	4615      	mov	r5, r2
 800551e:	461e      	mov	r6, r3
 8005520:	da0d      	bge.n	800553e <__swhatbuf_r+0x2e>
 8005522:	89a3      	ldrh	r3, [r4, #12]
 8005524:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005528:	f04f 0100 	mov.w	r1, #0
 800552c:	bf14      	ite	ne
 800552e:	2340      	movne	r3, #64	@ 0x40
 8005530:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005534:	2000      	movs	r0, #0
 8005536:	6031      	str	r1, [r6, #0]
 8005538:	602b      	str	r3, [r5, #0]
 800553a:	b016      	add	sp, #88	@ 0x58
 800553c:	bd70      	pop	{r4, r5, r6, pc}
 800553e:	466a      	mov	r2, sp
 8005540:	f000 f848 	bl	80055d4 <_fstat_r>
 8005544:	2800      	cmp	r0, #0
 8005546:	dbec      	blt.n	8005522 <__swhatbuf_r+0x12>
 8005548:	9901      	ldr	r1, [sp, #4]
 800554a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800554e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005552:	4259      	negs	r1, r3
 8005554:	4159      	adcs	r1, r3
 8005556:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800555a:	e7eb      	b.n	8005534 <__swhatbuf_r+0x24>

0800555c <__smakebuf_r>:
 800555c:	898b      	ldrh	r3, [r1, #12]
 800555e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005560:	079d      	lsls	r5, r3, #30
 8005562:	4606      	mov	r6, r0
 8005564:	460c      	mov	r4, r1
 8005566:	d507      	bpl.n	8005578 <__smakebuf_r+0x1c>
 8005568:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	6123      	str	r3, [r4, #16]
 8005570:	2301      	movs	r3, #1
 8005572:	6163      	str	r3, [r4, #20]
 8005574:	b003      	add	sp, #12
 8005576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005578:	ab01      	add	r3, sp, #4
 800557a:	466a      	mov	r2, sp
 800557c:	f7ff ffc8 	bl	8005510 <__swhatbuf_r>
 8005580:	9f00      	ldr	r7, [sp, #0]
 8005582:	4605      	mov	r5, r0
 8005584:	4639      	mov	r1, r7
 8005586:	4630      	mov	r0, r6
 8005588:	f7ff fbba 	bl	8004d00 <_malloc_r>
 800558c:	b948      	cbnz	r0, 80055a2 <__smakebuf_r+0x46>
 800558e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005592:	059a      	lsls	r2, r3, #22
 8005594:	d4ee      	bmi.n	8005574 <__smakebuf_r+0x18>
 8005596:	f023 0303 	bic.w	r3, r3, #3
 800559a:	f043 0302 	orr.w	r3, r3, #2
 800559e:	81a3      	strh	r3, [r4, #12]
 80055a0:	e7e2      	b.n	8005568 <__smakebuf_r+0xc>
 80055a2:	89a3      	ldrh	r3, [r4, #12]
 80055a4:	6020      	str	r0, [r4, #0]
 80055a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055aa:	81a3      	strh	r3, [r4, #12]
 80055ac:	9b01      	ldr	r3, [sp, #4]
 80055ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80055b2:	b15b      	cbz	r3, 80055cc <__smakebuf_r+0x70>
 80055b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055b8:	4630      	mov	r0, r6
 80055ba:	f000 f81d 	bl	80055f8 <_isatty_r>
 80055be:	b128      	cbz	r0, 80055cc <__smakebuf_r+0x70>
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	f023 0303 	bic.w	r3, r3, #3
 80055c6:	f043 0301 	orr.w	r3, r3, #1
 80055ca:	81a3      	strh	r3, [r4, #12]
 80055cc:	89a3      	ldrh	r3, [r4, #12]
 80055ce:	431d      	orrs	r5, r3
 80055d0:	81a5      	strh	r5, [r4, #12]
 80055d2:	e7cf      	b.n	8005574 <__smakebuf_r+0x18>

080055d4 <_fstat_r>:
 80055d4:	b538      	push	{r3, r4, r5, lr}
 80055d6:	4d07      	ldr	r5, [pc, #28]	@ (80055f4 <_fstat_r+0x20>)
 80055d8:	2300      	movs	r3, #0
 80055da:	4604      	mov	r4, r0
 80055dc:	4608      	mov	r0, r1
 80055de:	4611      	mov	r1, r2
 80055e0:	602b      	str	r3, [r5, #0]
 80055e2:	f7fb fc2e 	bl	8000e42 <_fstat>
 80055e6:	1c43      	adds	r3, r0, #1
 80055e8:	d102      	bne.n	80055f0 <_fstat_r+0x1c>
 80055ea:	682b      	ldr	r3, [r5, #0]
 80055ec:	b103      	cbz	r3, 80055f0 <_fstat_r+0x1c>
 80055ee:	6023      	str	r3, [r4, #0]
 80055f0:	bd38      	pop	{r3, r4, r5, pc}
 80055f2:	bf00      	nop
 80055f4:	20000788 	.word	0x20000788

080055f8 <_isatty_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4d06      	ldr	r5, [pc, #24]	@ (8005614 <_isatty_r+0x1c>)
 80055fc:	2300      	movs	r3, #0
 80055fe:	4604      	mov	r4, r0
 8005600:	4608      	mov	r0, r1
 8005602:	602b      	str	r3, [r5, #0]
 8005604:	f7fb fc2d 	bl	8000e62 <_isatty>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d102      	bne.n	8005612 <_isatty_r+0x1a>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	b103      	cbz	r3, 8005612 <_isatty_r+0x1a>
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	20000788 	.word	0x20000788

08005618 <_sbrk_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4d06      	ldr	r5, [pc, #24]	@ (8005634 <_sbrk_r+0x1c>)
 800561c:	2300      	movs	r3, #0
 800561e:	4604      	mov	r4, r0
 8005620:	4608      	mov	r0, r1
 8005622:	602b      	str	r3, [r5, #0]
 8005624:	f7fb fc36 	bl	8000e94 <_sbrk>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d102      	bne.n	8005632 <_sbrk_r+0x1a>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	b103      	cbz	r3, 8005632 <_sbrk_r+0x1a>
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	20000788 	.word	0x20000788

08005638 <_init>:
 8005638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563a:	bf00      	nop
 800563c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563e:	bc08      	pop	{r3}
 8005640:	469e      	mov	lr, r3
 8005642:	4770      	bx	lr

08005644 <_fini>:
 8005644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005646:	bf00      	nop
 8005648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564a:	bc08      	pop	{r3}
 800564c:	469e      	mov	lr, r3
 800564e:	4770      	bx	lr
