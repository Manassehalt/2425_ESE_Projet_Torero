
Projet_Torero_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1cc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800d3b0  0800d3b0  0000e3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8b8  0800d8b8  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8b8  0800d8b8  0000e8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8c0  0800d8c0  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8c0  0800d8c0  0000e8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d8c4  0800d8c4  0000e8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d8c8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001250  200001d8  0800daa0  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001428  0800daa0  0000f428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed85  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004616  00000000  00000000  0002df8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  000325a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001663  00000000  00000000  000342a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246a3  00000000  00000000  00035903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002264f  00000000  00000000  00059fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8662  00000000  00000000  0007c5f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00164c57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f74  00000000  00000000  00164c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  0016dc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d394 	.word	0x0800d394

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800d394 	.word	0x0800d394

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f008 fdca 	bl	8009be6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001054:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800105a:	4b30      	ldr	r3, [pc, #192]	@ (800111c <MX_ADC1_Init+0xe8>)
 800105c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <MX_ADC1_Init+0xe8>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001074:	4b29      	ldr	r3, [pc, #164]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b28      	ldr	r3, [pc, #160]	@ (800111c <MX_ADC1_Init+0xe8>)
 800107c:	2204      	movs	r2, #4
 800107e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001088:	2200      	movs	r2, #0
 800108a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <MX_ADC1_Init+0xe8>)
 800108e:	2201      	movs	r2, #1
 8001090:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010bc:	4817      	ldr	r0, [pc, #92]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010be:	f001 fbfd 	bl	80028bc <HAL_ADC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010c8:	f000 f9fa 	bl	80014c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d4:	4619      	mov	r1, r3
 80010d6:	4811      	ldr	r0, [pc, #68]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010d8:	f002 f98a 	bl	80033f0 <HAL_ADCEx_MultiModeConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010e2:	f000 f9ed 	bl	80014c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_ADC1_Init+0xec>)
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ea:	2306      	movs	r3, #6
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f2:	237f      	movs	r3, #127	@ 0x7f
 80010f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f6:	2304      	movs	r3, #4
 80010f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001104:	f001 fd5e 	bl	8002bc4 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800110e:	f000 f9d7 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3730      	adds	r7, #48	@ 0x30
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001f4 	.word	0x200001f4
 8001120:	32601000 	.word	0x32601000

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09a      	sub	sp, #104	@ 0x68
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	2244      	movs	r2, #68	@ 0x44
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f008 fd4e 	bl	8009be6 <memset>
  if(adcHandle->Instance==ADC1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001152:	d133      	bne.n	80011bc <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001154:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001158:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800115a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800115e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4618      	mov	r0, r3
 8001166:	f003 fc29 	bl	80049bc <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001170:	f000 f9a6 	bl	80014c0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 800117a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001190:	4a0c      	ldr	r2, [pc, #48]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 8001192:	f043 0302 	orr.w	r3, r3, #2
 8001196:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001198:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC1_IN15_AN_CB_G_Pin|ADC1_IN12_AN_CB_D_Pin;
 80011a4:	2303      	movs	r3, #3
 80011a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a8:	2303      	movs	r3, #3
 80011aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b4:	4619      	mov	r1, r3
 80011b6:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 80011b8:	f002 fc88 	bl	8003acc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011bc:	bf00      	nop
 80011be:	3768      	adds	r7, #104	@ 0x68
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021000 	.word	0x40021000
 80011c8:	48000400 	.word	0x48000400

080011cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011cc:	b5b0      	push	{r4, r5, r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80011d2:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <MX_FREERTOS_Init+0x2c>)
 80011d4:	1d3c      	adds	r4, r7, #4
 80011d6:	461d      	mov	r5, r3
 80011d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011dc:	682b      	ldr	r3, [r5, #0]
 80011de:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f006 fbd2 	bl	800798e <osThreadCreate>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a03      	ldr	r2, [pc, #12]	@ (80011fc <MX_FREERTOS_Init+0x30>)
 80011ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80011f0:	bf00      	nop
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bdb0      	pop	{r4, r5, r7, pc}
 80011f8:	0800d3bc 	.word	0x0800d3bc
 80011fc:	20000260 	.word	0x20000260

08001200 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001208:	2001      	movs	r0, #1
 800120a:	f006 fbe7 	bl	80079dc <osDelay>
 800120e:	e7fb      	b.n	8001208 <StartDefaultTask+0x8>

08001210 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001216:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_DMA_Init+0x50>)
 8001218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800121a:	4a11      	ldr	r2, [pc, #68]	@ (8001260 <MX_DMA_Init+0x50>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	6493      	str	r3, [r2, #72]	@ 0x48
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_DMA_Init+0x50>)
 8001224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_DMA_Init+0x50>)
 8001230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001232:	4a0b      	ldr	r2, [pc, #44]	@ (8001260 <MX_DMA_Init+0x50>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6493      	str	r3, [r2, #72]	@ 0x48
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_DMA_Init+0x50>)
 800123c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2105      	movs	r1, #5
 800124a:	200b      	movs	r0, #11
 800124c:	f002 fa4f 	bl	80036ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001250:	200b      	movs	r0, #11
 8001252:	f002 fa66 	bl	8003722 <HAL_NVIC_EnableIRQ>

}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000

08001264 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	@ 0x28
 8001268:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	4b50      	ldr	r3, [pc, #320]	@ (80013bc <MX_GPIO_Init+0x158>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	4a4f      	ldr	r2, [pc, #316]	@ (80013bc <MX_GPIO_Init+0x158>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001286:	4b4d      	ldr	r3, [pc, #308]	@ (80013bc <MX_GPIO_Init+0x158>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001292:	4b4a      	ldr	r3, [pc, #296]	@ (80013bc <MX_GPIO_Init+0x158>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	4a49      	ldr	r2, [pc, #292]	@ (80013bc <MX_GPIO_Init+0x158>)
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129e:	4b47      	ldr	r3, [pc, #284]	@ (80013bc <MX_GPIO_Init+0x158>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a2:	f003 0320 	and.w	r3, r3, #32
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012aa:	4b44      	ldr	r3, [pc, #272]	@ (80013bc <MX_GPIO_Init+0x158>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ae:	4a43      	ldr	r2, [pc, #268]	@ (80013bc <MX_GPIO_Init+0x158>)
 80012b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b6:	4b41      	ldr	r3, [pc, #260]	@ (80013bc <MX_GPIO_Init+0x158>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b3e      	ldr	r3, [pc, #248]	@ (80013bc <MX_GPIO_Init+0x158>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c6:	4a3d      	ldr	r2, [pc, #244]	@ (80013bc <MX_GPIO_Init+0x158>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ce:	4b3b      	ldr	r3, [pc, #236]	@ (80013bc <MX_GPIO_Init+0x158>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	4b38      	ldr	r3, [pc, #224]	@ (80013bc <MX_GPIO_Init+0x158>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	4a37      	ldr	r2, [pc, #220]	@ (80013bc <MX_GPIO_Init+0x158>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e6:	4b35      	ldr	r3, [pc, #212]	@ (80013bc <MX_GPIO_Init+0x158>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INT2_ACC_Pin|LED_SE_Pin|LED_SW_Pin|Status_LED_Pin
 80012f2:	2200      	movs	r2, #0
 80012f4:	f642 4150 	movw	r1, #11344	@ 0x2c50
 80012f8:	4831      	ldr	r0, [pc, #196]	@ (80013c0 <MX_GPIO_Init+0x15c>)
 80012fa:	f002 fd69 	bl	8003dd0 <HAL_GPIO_WritePin>
                          |Status_LED_debbug_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_SET);
 80012fe:	2201      	movs	r2, #1
 8001300:	2120      	movs	r1, #32
 8001302:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001306:	f002 fd63 	bl	8003dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_NE_Pin|INT1_ACC_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	f248 4180 	movw	r1, #33920	@ 0x8480
 8001310:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001314:	f002 fd5c 	bl	8003dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 8001318:	2200      	movs	r2, #0
 800131a:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 800131e:	4829      	ldr	r0, [pc, #164]	@ (80013c4 <MX_GPIO_Init+0x160>)
 8001320:	f002 fd56 	bl	8003dd0 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_S_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = INT2_ACC_Pin|LED_SE_Pin|LED_SW_Pin|Status_LED_Pin
 8001324:	f642 4350 	movw	r3, #11344	@ 0x2c50
 8001328:	617b      	str	r3, [r7, #20]
                          |Status_LED_debbug_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4820      	ldr	r0, [pc, #128]	@ (80013c0 <MX_GPIO_Init+0x15c>)
 800133e:	f002 fbc5 	bl	8003acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8001342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	481c      	ldr	r0, [pc, #112]	@ (80013c8 <MX_GPIO_Init+0x164>)
 8001358:	f002 fbb8 	bl	8003acc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_ACC_Pin|LED_NE_Pin|INT1_ACC_Pin|DEV_EN_LIDAR_Pin;
 800135c:	f248 43a0 	movw	r3, #33952	@ 0x84a0
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001378:	f002 fba8 	bl	8003acc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 800137c:	f241 03f4 	movw	r3, #4340	@ 0x10f4
 8001380:	617b      	str	r3, [r7, #20]
                          |LED_E_Pin|LED_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	480b      	ldr	r0, [pc, #44]	@ (80013c4 <MX_GPIO_Init+0x160>)
 8001396:	f002 fb99 	bl	8003acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT_Flash_Pin;
 800139a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT_Flash_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <MX_GPIO_Init+0x160>)
 80013b0:	f002 fb8c 	bl	8003acc <HAL_GPIO_Init>

}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	@ 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40021000 	.word	0x40021000
 80013c0:	48000800 	.word	0x48000800
 80013c4:	48000400 	.word	0x48000400
 80013c8:	48001800 	.word	0x48001800

080013cc <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 80013d4:	1d39      	adds	r1, r7, #4
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	2201      	movs	r2, #1
 80013dc:	4803      	ldr	r0, [pc, #12]	@ (80013ec <__io_putchar+0x20>)
 80013de:	f005 fc3b 	bl	8006c58 <HAL_UART_Transmit>
	return chr;
 80013e2:	687b      	ldr	r3, [r7, #4]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200003fc 	.word	0x200003fc

080013f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f4:	f000 fff9 	bl	80023ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f8:	f000 f824 	bl	8001444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fc:	f7ff ff32 	bl	8001264 <MX_GPIO_Init>
  MX_DMA_Init();
 8001400:	f7ff ff06 	bl	8001210 <MX_DMA_Init>
  MX_ADC1_Init();
 8001404:	f7ff fe16 	bl	8001034 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001408:	f000 f860 	bl	80014cc <MX_SPI2_Init>
  MX_TIM1_Init();
 800140c:	f000 fb4a 	bl	8001aa4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001410:	f000 fbe8 	bl	8001be4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001414:	f000 fc4a 	bl	8001cac <MX_TIM3_Init>
  MX_TIM4_Init();
 8001418:	f000 fc9e 	bl	8001d58 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800141c:	f000 fe5e 	bl	80020dc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001420:	f000 fea8 	bl	8002174 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Start_Motors();
 8001424:	f000 fe44 	bl	80020b0 <Start_Motors>
  ADXL343_Init();
 8001428:	f000 f9c6 	bl	80017b8 <ADXL343_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800142c:	f7ff fece 	bl	80011cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001430:	f006 faa6 	bl	8007980 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Read_Acceleration();
 8001434:	f000 f926 	bl	8001684 <Read_Acceleration>
	  HAL_Delay(1000);
 8001438:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800143c:	f001 f846 	bl	80024cc <HAL_Delay>
	  Read_Acceleration();
 8001440:	bf00      	nop
 8001442:	e7f7      	b.n	8001434 <main+0x44>

08001444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b094      	sub	sp, #80	@ 0x50
 8001448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144a:	f107 0318 	add.w	r3, r7, #24
 800144e:	2238      	movs	r2, #56	@ 0x38
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f008 fbc7 	bl	8009be6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001466:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800146a:	f002 fcc9 	bl	8003e00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800146e:	2301      	movs	r3, #1
 8001470:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001472:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001476:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001478:	2300      	movs	r3, #0
 800147a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147c:	f107 0318 	add.w	r3, r7, #24
 8001480:	4618      	mov	r0, r3
 8001482:	f002 fd71 	bl	8003f68 <HAL_RCC_OscConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0x4c>
  {
    Error_Handler();
 800148c:	f000 f818 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001490:	230f      	movs	r3, #15
 8001492:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001494:	2302      	movs	r3, #2
 8001496:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 f86f 	bl	800458c <HAL_RCC_ClockConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80014b4:	f000 f804 	bl	80014c0 <Error_Handler>
  }
}
 80014b8:	bf00      	nop
 80014ba:	3750      	adds	r7, #80	@ 0x50
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <Error_Handler+0x8>

080014cc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <MX_SPI2_Init+0x74>)
 80014d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001544 <MX_SPI2_Init+0x78>)
 80014d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <MX_SPI2_Init+0x74>)
 80014d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014de:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <MX_SPI2_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e4:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <MX_SPI2_Init+0x74>)
 80014e6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80014ea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014ec:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <MX_SPI2_Init+0x74>)
 80014ee:	2202      	movs	r2, #2
 80014f0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014f2:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <MX_SPI2_Init+0x74>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014f8:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_SPI2_Init+0x74>)
 80014fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014fe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MX_SPI2_Init+0x74>)
 8001502:	2218      	movs	r2, #24
 8001504:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001506:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <MX_SPI2_Init+0x74>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <MX_SPI2_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <MX_SPI2_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001518:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <MX_SPI2_Init+0x74>)
 800151a:	2207      	movs	r2, #7
 800151c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800151e:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <MX_SPI2_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <MX_SPI2_Init+0x74>)
 8001526:	2200      	movs	r2, #0
 8001528:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	@ (8001540 <MX_SPI2_Init+0x74>)
 800152c:	f003 fc36 	bl	8004d9c <HAL_SPI_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001536:	f7ff ffc3 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000264 	.word	0x20000264
 8001544:	40003800 	.word	0x40003800

08001548 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	@ 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a17      	ldr	r2, [pc, #92]	@ (80015c4 <HAL_SPI_MspInit+0x7c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d128      	bne.n	80015bc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800156a:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <HAL_SPI_MspInit+0x80>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156e:	4a16      	ldr	r2, [pc, #88]	@ (80015c8 <HAL_SPI_MspInit+0x80>)
 8001570:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001574:	6593      	str	r3, [r2, #88]	@ 0x58
 8001576:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <HAL_SPI_MspInit+0x80>)
 8001578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <HAL_SPI_MspInit+0x80>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	4a10      	ldr	r2, [pc, #64]	@ (80015c8 <HAL_SPI_MspInit+0x80>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <HAL_SPI_MspInit+0x80>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_TO_SCLK_ACC_Pin|SPI2_MISO_TO_SDO_ACC_Pin|SPI2_MOSI_TO_SDI_ACC_Pin;
 800159a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015ac:	2305      	movs	r3, #5
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4619      	mov	r1, r3
 80015b6:	4805      	ldr	r0, [pc, #20]	@ (80015cc <HAL_SPI_MspInit+0x84>)
 80015b8:	f002 fa88 	bl	8003acc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80015bc:	bf00      	nop
 80015be:	3728      	adds	r7, #40	@ 0x28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40003800 	.word	0x40003800
 80015c8:	40021000 	.word	0x40021000
 80015cc:	48000400 	.word	0x48000400

080015d0 <SPI_Write>:
  /* USER CODE END SPI2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void SPI_Write(uint8_t reg, uint8_t value) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	460a      	mov	r2, r1
 80015da:	71fb      	strb	r3, [r7, #7]
 80015dc:	4613      	mov	r3, r2
 80015de:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg | 0x40;
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 80015ea:	79bb      	ldrb	r3, [r7, #6]
 80015ec:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2120      	movs	r1, #32
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f6:	f002 fbeb 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
 80015fa:	f107 010c 	add.w	r1, r7, #12
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	2202      	movs	r2, #2
 8001604:	4806      	ldr	r0, [pc, #24]	@ (8001620 <SPI_Write+0x50>)
 8001606:	f003 fc74 	bl	8004ef2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 800160a:	2201      	movs	r2, #1
 800160c:	2120      	movs	r1, #32
 800160e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001612:	f002 fbdd 	bl	8003dd0 <HAL_GPIO_WritePin>
}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000264 	.word	0x20000264

08001624 <SPI_Read>:

uint8_t SPI_Read(uint8_t reg) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data = reg | 0x80;
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001634:	b2db      	uxtb	r3, r3
 8001636:	73fb      	strb	r3, [r7, #15]
    uint8_t rx_data = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 800163c:	2200      	movs	r2, #0
 800163e:	2120      	movs	r1, #32
 8001640:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001644:	f002 fbc4 	bl	8003dd0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &tx_data, 1, HAL_MAX_DELAY);
 8001648:	f107 010f 	add.w	r1, r7, #15
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
 8001650:	2201      	movs	r2, #1
 8001652:	480b      	ldr	r0, [pc, #44]	@ (8001680 <SPI_Read+0x5c>)
 8001654:	f003 fc4d 	bl	8004ef2 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, &rx_data, 1, HAL_MAX_DELAY);
 8001658:	f107 010e 	add.w	r1, r7, #14
 800165c:	f04f 33ff 	mov.w	r3, #4294967295
 8001660:	2201      	movs	r2, #1
 8001662:	4807      	ldr	r0, [pc, #28]	@ (8001680 <SPI_Read+0x5c>)
 8001664:	f003 fdba 	bl	80051dc <HAL_SPI_Receive>
    HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 8001668:	2201      	movs	r2, #1
 800166a:	2120      	movs	r1, #32
 800166c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001670:	f002 fbae 	bl	8003dd0 <HAL_GPIO_WritePin>

    return rx_data;
 8001674:	7bbb      	ldrb	r3, [r7, #14]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000264 	.word	0x20000264

08001684 <Read_Acceleration>:

void Read_Acceleration(void) {
 8001684:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001688:	b0a6      	sub	sp, #152	@ 0x98
 800168a:	af04      	add	r7, sp, #16
    uint8_t buffer[6];
    uint8_t reg = 0x32 | 0xC0;  // Commande de lecture multiple à partir de DATAX0
 800168c:	23f2      	movs	r3, #242	@ 0xf2
 800168e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

    HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2120      	movs	r1, #32
 8001696:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800169a:	f002 fb99 	bl	8003dd0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &reg, 1, HAL_MAX_DELAY);
 800169e:	f107 0167 	add.w	r1, r7, #103	@ 0x67
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
 80016a6:	2201      	movs	r2, #1
 80016a8:	483f      	ldr	r0, [pc, #252]	@ (80017a8 <Read_Acceleration+0x124>)
 80016aa:	f003 fc22 	bl	8004ef2 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, buffer, 6, HAL_MAX_DELAY);
 80016ae:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	2206      	movs	r2, #6
 80016b8:	483b      	ldr	r0, [pc, #236]	@ (80017a8 <Read_Acceleration+0x124>)
 80016ba:	f003 fd8f 	bl	80051dc <HAL_SPI_Receive>
    HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 80016be:	2201      	movs	r2, #1
 80016c0:	2120      	movs	r1, #32
 80016c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c6:	f002 fb83 	bl	8003dd0 <HAL_GPIO_WritePin>

    // Combinaison des octets pour obtenir des valeurs 16 bits signées
    int16_t x = (int16_t)((buffer[1] << 8) | buffer[0]);
 80016ca:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	b21a      	sxth	r2, r3
 80016d2:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    int16_t y = (int16_t)((buffer[3] << 8) | buffer[2]);
 80016de:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	4313      	orrs	r3, r2
 80016ee:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
    int16_t z = (int16_t)((buffer[5] << 8) | buffer[4]);
 80016f2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80016fe:	b21b      	sxth	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

    // Conversion en g (±2g, Full Resolution ou Fixed 10-bit)
    float scale = 3.9 / 1000.0;  // Sensibilité pour ±2g en g/LSB
 8001706:	4b29      	ldr	r3, [pc, #164]	@ (80017ac <Read_Acceleration+0x128>)
 8001708:	67fb      	str	r3, [r7, #124]	@ 0x7c
    float ax = x * scale;
 800170a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001716:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800171a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171e:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    float ay = y * scale;
 8001722:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	@ 0x84
 8001726:	ee07 3a90 	vmov	s15, r3
 800172a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800172e:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001736:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    float az = z * scale;
 800173a:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 800173e:	ee07 3a90 	vmov	s15, r3
 8001742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001746:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800174a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174e:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

    // Transmission des résultats via UART
    char msg[100];
    sprintf(msg, "Ax: %.3f g, Ay: %.3f g, Az: %.3f g\r\n", ax, ay, az);
 8001752:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001754:	f7fe ff20 	bl	8000598 <__aeabi_f2d>
 8001758:	4680      	mov	r8, r0
 800175a:	4689      	mov	r9, r1
 800175c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800175e:	f7fe ff1b 	bl	8000598 <__aeabi_f2d>
 8001762:	4604      	mov	r4, r0
 8001764:	460d      	mov	r5, r1
 8001766:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001768:	f7fe ff16 	bl	8000598 <__aeabi_f2d>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4638      	mov	r0, r7
 8001772:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001776:	e9cd 4500 	strd	r4, r5, [sp]
 800177a:	4642      	mov	r2, r8
 800177c:	464b      	mov	r3, r9
 800177e:	490c      	ldr	r1, [pc, #48]	@ (80017b0 <Read_Acceleration+0x12c>)
 8001780:	f008 f9ce 	bl	8009b20 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001784:	463b      	mov	r3, r7
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fd9a 	bl	80002c0 <strlen>
 800178c:	4603      	mov	r3, r0
 800178e:	b29a      	uxth	r2, r3
 8001790:	4639      	mov	r1, r7
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	4807      	ldr	r0, [pc, #28]	@ (80017b4 <Read_Acceleration+0x130>)
 8001798:	f005 fa5e 	bl	8006c58 <HAL_UART_Transmit>
}
 800179c:	bf00      	nop
 800179e:	3788      	adds	r7, #136	@ 0x88
 80017a0:	46bd      	mov	sp, r7
 80017a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017a6:	bf00      	nop
 80017a8:	20000264 	.word	0x20000264
 80017ac:	3b7f9724 	.word	0x3b7f9724
 80017b0:	0800d3d0 	.word	0x0800d3d0
 80017b4:	200003fc 	.word	0x200003fc

080017b8 <ADXL343_Init>:

void ADXL343_Init(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
    uint8_t devid = SPI_Read(0x00);  // Lire le registre DEVID (0x00)
 80017be:	2000      	movs	r0, #0
 80017c0:	f7ff ff30 	bl	8001624 <SPI_Read>
 80017c4:	4603      	mov	r3, r0
 80017c6:	73fb      	strb	r3, [r7, #15]

    if (devid == 0xE5) {
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	2be5      	cmp	r3, #229	@ 0xe5
 80017cc:	d11f      	bne.n	800180e <ADXL343_Init+0x56>
        // Le composant est détecté, procéder à l'initialisation
        SPI_Write(0x2C, 0x04);  // Configurer la bande passante à 1.56 Hz
 80017ce:	2104      	movs	r1, #4
 80017d0:	202c      	movs	r0, #44	@ 0x2c
 80017d2:	f7ff fefd 	bl	80015d0 <SPI_Write>
        SPI_Write(0x2E, 0x80);  // Activer DATA_READY
 80017d6:	2180      	movs	r1, #128	@ 0x80
 80017d8:	202e      	movs	r0, #46	@ 0x2e
 80017da:	f7ff fef9 	bl	80015d0 <SPI_Write>
        SPI_Write(0x31, 0x08);  // DATA_FORMAT : FULL_RES = 1, RANGE = ±2g
 80017de:	2108      	movs	r1, #8
 80017e0:	2031      	movs	r0, #49	@ 0x31
 80017e2:	f7ff fef5 	bl	80015d0 <SPI_Write>
        SPI_Write(0x2D, 0x08);  // Activer le mode mesure
 80017e6:	2108      	movs	r1, #8
 80017e8:	202d      	movs	r0, #45	@ 0x2d
 80017ea:	f7ff fef1 	bl	80015d0 <SPI_Write>
        Read_Acceleration();    // Lire les données pour effacer l'interruption
 80017ee:	f7ff ff49 	bl	8001684 <Read_Acceleration>

        char *msg = "ADXL343 detecte et initialise !\r\n";
 80017f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <ADXL343_Init+0x78>)
 80017f4:	607b      	str	r3, [r7, #4]
        HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7fe fd62 	bl	80002c0 <strlen>
 80017fc:	4603      	mov	r3, r0
 80017fe:	b29a      	uxth	r2, r3
 8001800:	f04f 33ff 	mov.w	r3, #4294967295
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	480b      	ldr	r0, [pc, #44]	@ (8001834 <ADXL343_Init+0x7c>)
 8001808:	f005 fa26 	bl	8006c58 <HAL_UART_Transmit>
    } else {
        char *error_msg = "Erreur : ADXL343 non detecte !\r\n";
        HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
    }
}
 800180c:	e00c      	b.n	8001828 <ADXL343_Init+0x70>
        char *error_msg = "Erreur : ADXL343 non detecte !\r\n";
 800180e:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <ADXL343_Init+0x80>)
 8001810:	60bb      	str	r3, [r7, #8]
        HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8001812:	68b8      	ldr	r0, [r7, #8]
 8001814:	f7fe fd54 	bl	80002c0 <strlen>
 8001818:	4603      	mov	r3, r0
 800181a:	b29a      	uxth	r2, r3
 800181c:	f04f 33ff 	mov.w	r3, #4294967295
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	4804      	ldr	r0, [pc, #16]	@ (8001834 <ADXL343_Init+0x7c>)
 8001824:	f005 fa18 	bl	8006c58 <HAL_UART_Transmit>
}
 8001828:	bf00      	nop
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	0800d3f8 	.word	0x0800d3f8
 8001834:	200003fc 	.word	0x200003fc
 8001838:	0800d41c 	.word	0x0800d41c

0800183c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001842:	4b12      	ldr	r3, [pc, #72]	@ (800188c <HAL_MspInit+0x50>)
 8001844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001846:	4a11      	ldr	r2, [pc, #68]	@ (800188c <HAL_MspInit+0x50>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6613      	str	r3, [r2, #96]	@ 0x60
 800184e:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <HAL_MspInit+0x50>)
 8001850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <HAL_MspInit+0x50>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185e:	4a0b      	ldr	r2, [pc, #44]	@ (800188c <HAL_MspInit+0x50>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001864:	6593      	str	r3, [r2, #88]	@ 0x58
 8001866:	4b09      	ldr	r3, [pc, #36]	@ (800188c <HAL_MspInit+0x50>)
 8001868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	210f      	movs	r1, #15
 8001876:	f06f 0001 	mvn.w	r0, #1
 800187a:	f001 ff38 	bl	80036ee <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800187e:	f002 fb63 	bl	8003f48 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000

08001890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <NMI_Handler+0x4>

08001898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <HardFault_Handler+0x4>

080018a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <MemManage_Handler+0x4>

080018a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <BusFault_Handler+0x4>

080018b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <UsageFault_Handler+0x4>

080018b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ca:	f000 fde1 	bl	8002490 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80018ce:	f006 fd77 	bl	80083c0 <xTaskGetSchedulerState>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d001      	beq.n	80018dc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80018d8:	f006 ffb6 	bl	8008848 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}

080018e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <DMA1_Channel1_IRQHandler+0x10>)
 80018e6:	f001 ffdf 	bl	80038a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000524 	.word	0x20000524

080018f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return 1;
 80018f8:	2301      	movs	r3, #1
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_kill>:

int _kill(int pid, int sig)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800190e:	f008 f9bd 	bl	8009c8c <__errno>
 8001912:	4603      	mov	r3, r0
 8001914:	2216      	movs	r2, #22
 8001916:	601a      	str	r2, [r3, #0]
  return -1;
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_exit>:

void _exit (int status)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ffe7 	bl	8001904 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001936:	bf00      	nop
 8001938:	e7fd      	b.n	8001936 <_exit+0x12>

0800193a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e00a      	b.n	8001962 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800194c:	f3af 8000 	nop.w
 8001950:	4601      	mov	r1, r0
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	60ba      	str	r2, [r7, #8]
 8001958:	b2ca      	uxtb	r2, r1
 800195a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	3301      	adds	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	429a      	cmp	r2, r3
 8001968:	dbf0      	blt.n	800194c <_read+0x12>
  }

  return len;
 800196a:	687b      	ldr	r3, [r7, #4]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	e009      	b.n	800199a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	60ba      	str	r2, [r7, #8]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fd1c 	bl	80013cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3301      	adds	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	429a      	cmp	r2, r3
 80019a0:	dbf1      	blt.n	8001986 <_write+0x12>
  }
  return len;
 80019a2:	687b      	ldr	r3, [r7, #4]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_close>:

int _close(int file)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019d4:	605a      	str	r2, [r3, #4]
  return 0;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_isatty>:

int _isatty(int file)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ec:	2301      	movs	r3, #1
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b085      	sub	sp, #20
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	@ (8001a70 <_sbrk+0x5c>)
 8001a1e:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <_sbrk+0x60>)
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a28:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a30:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <_sbrk+0x64>)
 8001a32:	4a12      	ldr	r2, [pc, #72]	@ (8001a7c <_sbrk+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a36:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d207      	bcs.n	8001a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a44:	f008 f922 	bl	8009c8c <__errno>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	e009      	b.n	8001a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a05      	ldr	r2, [pc, #20]	@ (8001a78 <_sbrk+0x64>)
 8001a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20008000 	.word	0x20008000
 8001a74:	00000400 	.word	0x00000400
 8001a78:	200002c8 	.word	0x200002c8
 8001a7c:	20001428 	.word	0x20001428

08001a80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <SystemInit+0x20>)
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a8a:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <SystemInit+0x20>)
 8001a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b098      	sub	sp, #96	@ 0x60
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aaa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	611a      	str	r2, [r3, #16]
 8001ac6:	615a      	str	r2, [r3, #20]
 8001ac8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	2234      	movs	r2, #52	@ 0x34
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f008 f888 	bl	8009be6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ad6:	4b41      	ldr	r3, [pc, #260]	@ (8001bdc <MX_TIM1_Init+0x138>)
 8001ad8:	4a41      	ldr	r2, [pc, #260]	@ (8001be0 <MX_TIM1_Init+0x13c>)
 8001ada:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001adc:	4b3f      	ldr	r3, [pc, #252]	@ (8001bdc <MX_TIM1_Init+0x138>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bdc <MX_TIM1_Init+0x138>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ae8:	4b3c      	ldr	r3, [pc, #240]	@ (8001bdc <MX_TIM1_Init+0x138>)
 8001aea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af0:	4b3a      	ldr	r3, [pc, #232]	@ (8001bdc <MX_TIM1_Init+0x138>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001af6:	4b39      	ldr	r3, [pc, #228]	@ (8001bdc <MX_TIM1_Init+0x138>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afc:	4b37      	ldr	r3, [pc, #220]	@ (8001bdc <MX_TIM1_Init+0x138>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b02:	4836      	ldr	r0, [pc, #216]	@ (8001bdc <MX_TIM1_Init+0x138>)
 8001b04:	f004 f880 	bl	8005c08 <HAL_TIM_PWM_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b0e:	f7ff fcd7 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b1e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b22:	4619      	mov	r1, r3
 8001b24:	482d      	ldr	r0, [pc, #180]	@ (8001bdc <MX_TIM1_Init+0x138>)
 8001b26:	f004 ff39 	bl	800699c <HAL_TIMEx_MasterConfigSynchronization>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b30:	f7ff fcc6 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b34:	2360      	movs	r3, #96	@ 0x60
 8001b36:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b40:	2300      	movs	r3, #0
 8001b42:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b50:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b54:	2200      	movs	r2, #0
 8001b56:	4619      	mov	r1, r3
 8001b58:	4820      	ldr	r0, [pc, #128]	@ (8001bdc <MX_TIM1_Init+0x138>)
 8001b5a:	f004 fa53 	bl	8006004 <HAL_TIM_PWM_ConfigChannel>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b64:	f7ff fcac 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b68:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	4619      	mov	r1, r3
 8001b70:	481a      	ldr	r0, [pc, #104]	@ (8001bdc <MX_TIM1_Init+0x138>)
 8001b72:	f004 fa47 	bl	8006004 <HAL_TIM_PWM_ConfigChannel>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001b7c:	f7ff fca0 	bl	80014c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b98:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ba6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001baa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4807      	ldr	r0, [pc, #28]	@ (8001bdc <MX_TIM1_Init+0x138>)
 8001bbe:	f004 ff6f 	bl	8006aa0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001bc8:	f7ff fc7a 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bcc:	4803      	ldr	r0, [pc, #12]	@ (8001bdc <MX_TIM1_Init+0x138>)
 8001bce:	f000 f9ed 	bl	8001fac <HAL_TIM_MspPostInit>

}
 8001bd2:	bf00      	nop
 8001bd4:	3760      	adds	r7, #96	@ 0x60
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200002cc 	.word	0x200002cc
 8001be0:	40012c00 	.word	0x40012c00

08001be4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	@ 0x28
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
 8001c04:	615a      	str	r2, [r3, #20]
 8001c06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c08:	4b27      	ldr	r3, [pc, #156]	@ (8001ca8 <MX_TIM2_Init+0xc4>)
 8001c0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c10:	4b25      	ldr	r3, [pc, #148]	@ (8001ca8 <MX_TIM2_Init+0xc4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c16:	4b24      	ldr	r3, [pc, #144]	@ (8001ca8 <MX_TIM2_Init+0xc4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ca8 <MX_TIM2_Init+0xc4>)
 8001c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c24:	4b20      	ldr	r3, [pc, #128]	@ (8001ca8 <MX_TIM2_Init+0xc4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca8 <MX_TIM2_Init+0xc4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c30:	481d      	ldr	r0, [pc, #116]	@ (8001ca8 <MX_TIM2_Init+0xc4>)
 8001c32:	f003 ffe9 	bl	8005c08 <HAL_TIM_PWM_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001c3c:	f7ff fc40 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c48:	f107 031c 	add.w	r3, r7, #28
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4816      	ldr	r0, [pc, #88]	@ (8001ca8 <MX_TIM2_Init+0xc4>)
 8001c50:	f004 fea4 	bl	800699c <HAL_TIMEx_MasterConfigSynchronization>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001c5a:	f7ff fc31 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c5e:	2360      	movs	r3, #96	@ 0x60
 8001c60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c6e:	463b      	mov	r3, r7
 8001c70:	2200      	movs	r2, #0
 8001c72:	4619      	mov	r1, r3
 8001c74:	480c      	ldr	r0, [pc, #48]	@ (8001ca8 <MX_TIM2_Init+0xc4>)
 8001c76:	f004 f9c5 	bl	8006004 <HAL_TIM_PWM_ConfigChannel>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001c80:	f7ff fc1e 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c84:	463b      	mov	r3, r7
 8001c86:	2204      	movs	r2, #4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4807      	ldr	r0, [pc, #28]	@ (8001ca8 <MX_TIM2_Init+0xc4>)
 8001c8c:	f004 f9ba 	bl	8006004 <HAL_TIM_PWM_ConfigChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001c96:	f7ff fc13 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c9a:	4803      	ldr	r0, [pc, #12]	@ (8001ca8 <MX_TIM2_Init+0xc4>)
 8001c9c:	f000 f986 	bl	8001fac <HAL_TIM_MspPostInit>

}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	@ 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000318 	.word	0x20000318

08001cac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08c      	sub	sp, #48	@ 0x30
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	2224      	movs	r2, #36	@ 0x24
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f007 ff93 	bl	8009be6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc0:	463b      	mov	r3, r7
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cca:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <MX_TIM3_Init+0xa4>)
 8001ccc:	4a21      	ldr	r2, [pc, #132]	@ (8001d54 <MX_TIM3_Init+0xa8>)
 8001cce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d50 <MX_TIM3_Init+0xa4>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d50 <MX_TIM3_Init+0xa4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d50 <MX_TIM3_Init+0xa4>)
 8001cde:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ce2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <MX_TIM3_Init+0xa4>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cea:	4b19      	ldr	r3, [pc, #100]	@ (8001d50 <MX_TIM3_Init+0xa4>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d04:	2300      	movs	r3, #0
 8001d06:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	4619      	mov	r1, r3
 8001d1a:	480d      	ldr	r0, [pc, #52]	@ (8001d50 <MX_TIM3_Init+0xa4>)
 8001d1c:	f004 f8cc 	bl	8005eb8 <HAL_TIM_Encoder_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001d26:	f7ff fbcb 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d32:	463b      	mov	r3, r7
 8001d34:	4619      	mov	r1, r3
 8001d36:	4806      	ldr	r0, [pc, #24]	@ (8001d50 <MX_TIM3_Init+0xa4>)
 8001d38:	f004 fe30 	bl	800699c <HAL_TIMEx_MasterConfigSynchronization>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001d42:	f7ff fbbd 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	3730      	adds	r7, #48	@ 0x30
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000364 	.word	0x20000364
 8001d54:	40000400 	.word	0x40000400

08001d58 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b094      	sub	sp, #80	@ 0x50
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d62:	2224      	movs	r2, #36	@ 0x24
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f007 ff3d 	bl	8009be6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6c:	f107 0320 	add.w	r3, r7, #32
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	60da      	str	r2, [r3, #12]
 8001d84:	611a      	str	r2, [r3, #16]
 8001d86:	615a      	str	r2, [r3, #20]
 8001d88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d8a:	4b30      	ldr	r3, [pc, #192]	@ (8001e4c <MX_TIM4_Init+0xf4>)
 8001d8c:	4a30      	ldr	r2, [pc, #192]	@ (8001e50 <MX_TIM4_Init+0xf8>)
 8001d8e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d90:	4b2e      	ldr	r3, [pc, #184]	@ (8001e4c <MX_TIM4_Init+0xf4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d96:	4b2d      	ldr	r3, [pc, #180]	@ (8001e4c <MX_TIM4_Init+0xf4>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e4c <MX_TIM4_Init+0xf4>)
 8001d9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001da2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da4:	4b29      	ldr	r3, [pc, #164]	@ (8001e4c <MX_TIM4_Init+0xf4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001daa:	4b28      	ldr	r3, [pc, #160]	@ (8001e4c <MX_TIM4_Init+0xf4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001db0:	4826      	ldr	r0, [pc, #152]	@ (8001e4c <MX_TIM4_Init+0xf4>)
 8001db2:	f003 ff29 	bl	8005c08 <HAL_TIM_PWM_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001dbc:	f7ff fb80 	bl	80014c0 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC1Filter = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.IC2Filter = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001de4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001de8:	4619      	mov	r1, r3
 8001dea:	4818      	ldr	r0, [pc, #96]	@ (8001e4c <MX_TIM4_Init+0xf4>)
 8001dec:	f004 f864 	bl	8005eb8 <HAL_TIM_Encoder_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8001df6:	f7ff fb63 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e02:	f107 0320 	add.w	r3, r7, #32
 8001e06:	4619      	mov	r1, r3
 8001e08:	4810      	ldr	r0, [pc, #64]	@ (8001e4c <MX_TIM4_Init+0xf4>)
 8001e0a:	f004 fdc7 	bl	800699c <HAL_TIMEx_MasterConfigSynchronization>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8001e14:	f7ff fb54 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e18:	2360      	movs	r3, #96	@ 0x60
 8001e1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4807      	ldr	r0, [pc, #28]	@ (8001e4c <MX_TIM4_Init+0xf4>)
 8001e30:	f004 f8e8 	bl	8006004 <HAL_TIM_PWM_ConfigChannel>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8001e3a:	f7ff fb41 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e3e:	4803      	ldr	r0, [pc, #12]	@ (8001e4c <MX_TIM4_Init+0xf4>)
 8001e40:	f000 f8b4 	bl	8001fac <HAL_TIM_MspPostInit>

}
 8001e44:	bf00      	nop
 8001e46:	3750      	adds	r7, #80	@ 0x50
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200003b0 	.word	0x200003b0
 8001e50:	40000800 	.word	0x40000800

08001e54 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08c      	sub	sp, #48	@ 0x30
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a2a      	ldr	r2, [pc, #168]	@ (8001f1c <HAL_TIM_PWM_MspInit+0xc8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d10c      	bne.n	8001e90 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e76:	4b2a      	ldr	r3, [pc, #168]	@ (8001f20 <HAL_TIM_PWM_MspInit+0xcc>)
 8001e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e7a:	4a29      	ldr	r2, [pc, #164]	@ (8001f20 <HAL_TIM_PWM_MspInit+0xcc>)
 8001e7c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e80:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e82:	4b27      	ldr	r3, [pc, #156]	@ (8001f20 <HAL_TIM_PWM_MspInit+0xcc>)
 8001e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e8a:	61bb      	str	r3, [r7, #24]
 8001e8c:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001e8e:	e040      	b.n	8001f12 <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e98:	d10c      	bne.n	8001eb4 <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e9a:	4b21      	ldr	r3, [pc, #132]	@ (8001f20 <HAL_TIM_PWM_MspInit+0xcc>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9e:	4a20      	ldr	r2, [pc, #128]	@ (8001f20 <HAL_TIM_PWM_MspInit+0xcc>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f20 <HAL_TIM_PWM_MspInit+0xcc>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697b      	ldr	r3, [r7, #20]
}
 8001eb2:	e02e      	b.n	8001f12 <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM4)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f24 <HAL_TIM_PWM_MspInit+0xd0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d129      	bne.n	8001f12 <HAL_TIM_PWM_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ebe:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <HAL_TIM_PWM_MspInit+0xcc>)
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec2:	4a17      	ldr	r2, [pc, #92]	@ (8001f20 <HAL_TIM_PWM_MspInit+0xcc>)
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_TIM_PWM_MspInit+0xcc>)
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <HAL_TIM_PWM_MspInit+0xcc>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eda:	4a11      	ldr	r2, [pc, #68]	@ (8001f20 <HAL_TIM_PWM_MspInit+0xcc>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <HAL_TIM_PWM_MspInit+0xcc>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001eee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001f00:	230a      	movs	r3, #10
 8001f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f04:	f107 031c 	add.w	r3, r7, #28
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f0e:	f001 fddd 	bl	8003acc <HAL_GPIO_Init>
}
 8001f12:	bf00      	nop
 8001f14:	3730      	adds	r7, #48	@ 0x30
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40012c00 	.word	0x40012c00
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40000800 	.word	0x40000800

08001f28 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	@ 0x28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a17      	ldr	r2, [pc, #92]	@ (8001fa4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d128      	bne.n	8001f9c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f4a:	4b17      	ldr	r3, [pc, #92]	@ (8001fa8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4e:	4a16      	ldr	r2, [pc, #88]	@ (8001fa8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f56:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f66:	4a10      	ldr	r2, [pc, #64]	@ (8001fa8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001f7a:	2350      	movs	r3, #80	@ 0x50
 8001f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f98:	f001 fd98 	bl	8003acc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	3728      	adds	r7, #40	@ 0x28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40000400 	.word	0x40000400
 8001fa8:	40021000 	.word	0x40021000

08001fac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	@ 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a35      	ldr	r2, [pc, #212]	@ (80020a0 <HAL_TIM_MspPostInit+0xf4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d11e      	bne.n	800200c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fce:	4b35      	ldr	r3, [pc, #212]	@ (80020a4 <HAL_TIM_MspPostInit+0xf8>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd2:	4a34      	ldr	r2, [pc, #208]	@ (80020a4 <HAL_TIM_MspPostInit+0xf8>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fda:	4b32      	ldr	r3, [pc, #200]	@ (80020a4 <HAL_TIM_MspPostInit+0xf8>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fe6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ff8:	2306      	movs	r3, #6
 8001ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4619      	mov	r1, r3
 8002002:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002006:	f001 fd61 	bl	8003acc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800200a:	e044      	b.n	8002096 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002014:	d11d      	bne.n	8002052 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	4b23      	ldr	r3, [pc, #140]	@ (80020a4 <HAL_TIM_MspPostInit+0xf8>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201a:	4a22      	ldr	r2, [pc, #136]	@ (80020a4 <HAL_TIM_MspPostInit+0xf8>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002022:	4b20      	ldr	r3, [pc, #128]	@ (80020a4 <HAL_TIM_MspPostInit+0xf8>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800202e:	2303      	movs	r3, #3
 8002030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800203e:	2301      	movs	r3, #1
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800204c:	f001 fd3e 	bl	8003acc <HAL_GPIO_Init>
}
 8002050:	e021      	b.n	8002096 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM4)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a14      	ldr	r2, [pc, #80]	@ (80020a8 <HAL_TIM_MspPostInit+0xfc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d11c      	bne.n	8002096 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205c:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <HAL_TIM_MspPostInit+0xf8>)
 800205e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002060:	4a10      	ldr	r2, [pc, #64]	@ (80020a4 <HAL_TIM_MspPostInit+0xf8>)
 8002062:	f043 0302 	orr.w	r3, r3, #2
 8002066:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002068:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <HAL_TIM_MspPostInit+0xf8>)
 800206a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_CH4_M_SCTR_LIDAR_Pin;
 8002074:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002086:	2302      	movs	r3, #2
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM4_CH4_M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	4806      	ldr	r0, [pc, #24]	@ (80020ac <HAL_TIM_MspPostInit+0x100>)
 8002092:	f001 fd1b 	bl	8003acc <HAL_GPIO_Init>
}
 8002096:	bf00      	nop
 8002098:	3728      	adds	r7, #40	@ 0x28
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40012c00 	.word	0x40012c00
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40000800 	.word	0x40000800
 80020ac:	48000400 	.word	0x48000400

080020b0 <Start_Motors>:
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
    TIM1->CCR1 = 0;
    TIM1->CCR2 = 0;
}

void Start_Motors(void) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80020b4:	2100      	movs	r1, #0
 80020b6:	4807      	ldr	r0, [pc, #28]	@ (80020d4 <Start_Motors+0x24>)
 80020b8:	f003 fdfe 	bl	8005cb8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80020bc:	2104      	movs	r1, #4
 80020be:	4805      	ldr	r0, [pc, #20]	@ (80020d4 <Start_Motors+0x24>)
 80020c0:	f003 fdfa 	bl	8005cb8 <HAL_TIM_PWM_Start>
    TIM1->CCR1 = 0;
 80020c4:	4b04      	ldr	r3, [pc, #16]	@ (80020d8 <Start_Motors+0x28>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = 0;
 80020ca:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <Start_Motors+0x28>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200002cc 	.word	0x200002cc
 80020d8:	40012c00 	.word	0x40012c00

080020dc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020e0:	4b22      	ldr	r3, [pc, #136]	@ (800216c <MX_USART2_UART_Init+0x90>)
 80020e2:	4a23      	ldr	r2, [pc, #140]	@ (8002170 <MX_USART2_UART_Init+0x94>)
 80020e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020e6:	4b21      	ldr	r3, [pc, #132]	@ (800216c <MX_USART2_UART_Init+0x90>)
 80020e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020ee:	4b1f      	ldr	r3, [pc, #124]	@ (800216c <MX_USART2_UART_Init+0x90>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020f4:	4b1d      	ldr	r3, [pc, #116]	@ (800216c <MX_USART2_UART_Init+0x90>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020fa:	4b1c      	ldr	r3, [pc, #112]	@ (800216c <MX_USART2_UART_Init+0x90>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002100:	4b1a      	ldr	r3, [pc, #104]	@ (800216c <MX_USART2_UART_Init+0x90>)
 8002102:	220c      	movs	r2, #12
 8002104:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002106:	4b19      	ldr	r3, [pc, #100]	@ (800216c <MX_USART2_UART_Init+0x90>)
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800210c:	4b17      	ldr	r3, [pc, #92]	@ (800216c <MX_USART2_UART_Init+0x90>)
 800210e:	2200      	movs	r2, #0
 8002110:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002112:	4b16      	ldr	r3, [pc, #88]	@ (800216c <MX_USART2_UART_Init+0x90>)
 8002114:	2200      	movs	r2, #0
 8002116:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002118:	4b14      	ldr	r3, [pc, #80]	@ (800216c <MX_USART2_UART_Init+0x90>)
 800211a:	2200      	movs	r2, #0
 800211c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800211e:	4b13      	ldr	r3, [pc, #76]	@ (800216c <MX_USART2_UART_Init+0x90>)
 8002120:	2200      	movs	r2, #0
 8002122:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002124:	4811      	ldr	r0, [pc, #68]	@ (800216c <MX_USART2_UART_Init+0x90>)
 8002126:	f004 fd47 	bl	8006bb8 <HAL_UART_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002130:	f7ff f9c6 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002134:	2100      	movs	r1, #0
 8002136:	480d      	ldr	r0, [pc, #52]	@ (800216c <MX_USART2_UART_Init+0x90>)
 8002138:	f005 fb40 	bl	80077bc <HAL_UARTEx_SetTxFifoThreshold>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002142:	f7ff f9bd 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002146:	2100      	movs	r1, #0
 8002148:	4808      	ldr	r0, [pc, #32]	@ (800216c <MX_USART2_UART_Init+0x90>)
 800214a:	f005 fb75 	bl	8007838 <HAL_UARTEx_SetRxFifoThreshold>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002154:	f7ff f9b4 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002158:	4804      	ldr	r0, [pc, #16]	@ (800216c <MX_USART2_UART_Init+0x90>)
 800215a:	f005 faf6 	bl	800774a <HAL_UARTEx_DisableFifoMode>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002164:	f7ff f9ac 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}
 800216c:	200003fc 	.word	0x200003fc
 8002170:	40004400 	.word	0x40004400

08002174 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002178:	4b22      	ldr	r3, [pc, #136]	@ (8002204 <MX_USART3_UART_Init+0x90>)
 800217a:	4a23      	ldr	r2, [pc, #140]	@ (8002208 <MX_USART3_UART_Init+0x94>)
 800217c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800217e:	4b21      	ldr	r3, [pc, #132]	@ (8002204 <MX_USART3_UART_Init+0x90>)
 8002180:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002184:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002186:	4b1f      	ldr	r3, [pc, #124]	@ (8002204 <MX_USART3_UART_Init+0x90>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800218c:	4b1d      	ldr	r3, [pc, #116]	@ (8002204 <MX_USART3_UART_Init+0x90>)
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002192:	4b1c      	ldr	r3, [pc, #112]	@ (8002204 <MX_USART3_UART_Init+0x90>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002198:	4b1a      	ldr	r3, [pc, #104]	@ (8002204 <MX_USART3_UART_Init+0x90>)
 800219a:	220c      	movs	r2, #12
 800219c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800219e:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <MX_USART3_UART_Init+0x90>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a4:	4b17      	ldr	r3, [pc, #92]	@ (8002204 <MX_USART3_UART_Init+0x90>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021aa:	4b16      	ldr	r3, [pc, #88]	@ (8002204 <MX_USART3_UART_Init+0x90>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021b0:	4b14      	ldr	r3, [pc, #80]	@ (8002204 <MX_USART3_UART_Init+0x90>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021b6:	4b13      	ldr	r3, [pc, #76]	@ (8002204 <MX_USART3_UART_Init+0x90>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021bc:	4811      	ldr	r0, [pc, #68]	@ (8002204 <MX_USART3_UART_Init+0x90>)
 80021be:	f004 fcfb 	bl	8006bb8 <HAL_UART_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80021c8:	f7ff f97a 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021cc:	2100      	movs	r1, #0
 80021ce:	480d      	ldr	r0, [pc, #52]	@ (8002204 <MX_USART3_UART_Init+0x90>)
 80021d0:	f005 faf4 	bl	80077bc <HAL_UARTEx_SetTxFifoThreshold>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80021da:	f7ff f971 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021de:	2100      	movs	r1, #0
 80021e0:	4808      	ldr	r0, [pc, #32]	@ (8002204 <MX_USART3_UART_Init+0x90>)
 80021e2:	f005 fb29 	bl	8007838 <HAL_UARTEx_SetRxFifoThreshold>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80021ec:	f7ff f968 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80021f0:	4804      	ldr	r0, [pc, #16]	@ (8002204 <MX_USART3_UART_Init+0x90>)
 80021f2:	f005 faaa 	bl	800774a <HAL_UARTEx_DisableFifoMode>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80021fc:	f7ff f960 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000490 	.word	0x20000490
 8002208:	40004800 	.word	0x40004800

0800220c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b09c      	sub	sp, #112	@ 0x70
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002224:	f107 0318 	add.w	r3, r7, #24
 8002228:	2244      	movs	r2, #68	@ 0x44
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f007 fcda 	bl	8009be6 <memset>
  if(uartHandle->Instance==USART2)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a52      	ldr	r2, [pc, #328]	@ (8002380 <HAL_UART_MspInit+0x174>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d137      	bne.n	80022ac <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800223c:	2302      	movs	r3, #2
 800223e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002240:	2300      	movs	r3, #0
 8002242:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002244:	f107 0318 	add.w	r3, r7, #24
 8002248:	4618      	mov	r0, r3
 800224a:	f002 fbb7 	bl	80049bc <HAL_RCCEx_PeriphCLKConfig>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002254:	f7ff f934 	bl	80014c0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002258:	4b4a      	ldr	r3, [pc, #296]	@ (8002384 <HAL_UART_MspInit+0x178>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225c:	4a49      	ldr	r2, [pc, #292]	@ (8002384 <HAL_UART_MspInit+0x178>)
 800225e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002262:	6593      	str	r3, [r2, #88]	@ 0x58
 8002264:	4b47      	ldr	r3, [pc, #284]	@ (8002384 <HAL_UART_MspInit+0x178>)
 8002266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002270:	4b44      	ldr	r3, [pc, #272]	@ (8002384 <HAL_UART_MspInit+0x178>)
 8002272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002274:	4a43      	ldr	r2, [pc, #268]	@ (8002384 <HAL_UART_MspInit+0x178>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800227c:	4b41      	ldr	r3, [pc, #260]	@ (8002384 <HAL_UART_MspInit+0x178>)
 800227e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002288:	230c      	movs	r3, #12
 800228a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002298:	2307      	movs	r3, #7
 800229a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80022a0:	4619      	mov	r1, r3
 80022a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022a6:	f001 fc11 	bl	8003acc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022aa:	e065      	b.n	8002378 <HAL_UART_MspInit+0x16c>
  else if(uartHandle->Instance==USART3)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a35      	ldr	r2, [pc, #212]	@ (8002388 <HAL_UART_MspInit+0x17c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d160      	bne.n	8002378 <HAL_UART_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022b6:	2304      	movs	r3, #4
 80022b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022ba:	2300      	movs	r3, #0
 80022bc:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022be:	f107 0318 	add.w	r3, r7, #24
 80022c2:	4618      	mov	r0, r3
 80022c4:	f002 fb7a 	bl	80049bc <HAL_RCCEx_PeriphCLKConfig>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80022ce:	f7ff f8f7 	bl	80014c0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002384 <HAL_UART_MspInit+0x178>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002384 <HAL_UART_MspInit+0x178>)
 80022d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80022de:	4b29      	ldr	r3, [pc, #164]	@ (8002384 <HAL_UART_MspInit+0x178>)
 80022e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ea:	4b26      	ldr	r3, [pc, #152]	@ (8002384 <HAL_UART_MspInit+0x178>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ee:	4a25      	ldr	r2, [pc, #148]	@ (8002384 <HAL_UART_MspInit+0x178>)
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022f6:	4b23      	ldr	r3, [pc, #140]	@ (8002384 <HAL_UART_MspInit+0x178>)
 80022f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_LIDAR_Pin|USART3_RX_LIDAR_Pin;
 8002302:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002306:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	2300      	movs	r3, #0
 8002312:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002314:	2307      	movs	r3, #7
 8002316:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002318:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800231c:	4619      	mov	r1, r3
 800231e:	481b      	ldr	r0, [pc, #108]	@ (800238c <HAL_UART_MspInit+0x180>)
 8002320:	f001 fbd4 	bl	8003acc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8002324:	4b1a      	ldr	r3, [pc, #104]	@ (8002390 <HAL_UART_MspInit+0x184>)
 8002326:	4a1b      	ldr	r2, [pc, #108]	@ (8002394 <HAL_UART_MspInit+0x188>)
 8002328:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800232a:	4b19      	ldr	r3, [pc, #100]	@ (8002390 <HAL_UART_MspInit+0x184>)
 800232c:	221c      	movs	r2, #28
 800232e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002330:	4b17      	ldr	r3, [pc, #92]	@ (8002390 <HAL_UART_MspInit+0x184>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002336:	4b16      	ldr	r3, [pc, #88]	@ (8002390 <HAL_UART_MspInit+0x184>)
 8002338:	2200      	movs	r2, #0
 800233a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800233c:	4b14      	ldr	r3, [pc, #80]	@ (8002390 <HAL_UART_MspInit+0x184>)
 800233e:	2280      	movs	r2, #128	@ 0x80
 8002340:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002342:	4b13      	ldr	r3, [pc, #76]	@ (8002390 <HAL_UART_MspInit+0x184>)
 8002344:	2200      	movs	r2, #0
 8002346:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002348:	4b11      	ldr	r3, [pc, #68]	@ (8002390 <HAL_UART_MspInit+0x184>)
 800234a:	2200      	movs	r2, #0
 800234c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800234e:	4b10      	ldr	r3, [pc, #64]	@ (8002390 <HAL_UART_MspInit+0x184>)
 8002350:	2220      	movs	r2, #32
 8002352:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002354:	4b0e      	ldr	r3, [pc, #56]	@ (8002390 <HAL_UART_MspInit+0x184>)
 8002356:	2200      	movs	r2, #0
 8002358:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800235a:	480d      	ldr	r0, [pc, #52]	@ (8002390 <HAL_UART_MspInit+0x184>)
 800235c:	f001 f9fc 	bl	8003758 <HAL_DMA_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_UART_MspInit+0x15e>
      Error_Handler();
 8002366:	f7ff f8ab 	bl	80014c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a08      	ldr	r2, [pc, #32]	@ (8002390 <HAL_UART_MspInit+0x184>)
 800236e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002372:	4a07      	ldr	r2, [pc, #28]	@ (8002390 <HAL_UART_MspInit+0x184>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002378:	bf00      	nop
 800237a:	3770      	adds	r7, #112	@ 0x70
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40004400 	.word	0x40004400
 8002384:	40021000 	.word	0x40021000
 8002388:	40004800 	.word	0x40004800
 800238c:	48000400 	.word	0x48000400
 8002390:	20000524 	.word	0x20000524
 8002394:	40020008 	.word	0x40020008

08002398 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002398:	480d      	ldr	r0, [pc, #52]	@ (80023d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800239a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800239c:	f7ff fb70 	bl	8001a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023a0:	480c      	ldr	r0, [pc, #48]	@ (80023d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80023a2:	490d      	ldr	r1, [pc, #52]	@ (80023d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023a4:	4a0d      	ldr	r2, [pc, #52]	@ (80023dc <LoopForever+0xe>)
  movs r3, #0
 80023a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023a8:	e002      	b.n	80023b0 <LoopCopyDataInit>

080023aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ae:	3304      	adds	r3, #4

080023b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b4:	d3f9      	bcc.n	80023aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023b6:	4a0a      	ldr	r2, [pc, #40]	@ (80023e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023b8:	4c0a      	ldr	r4, [pc, #40]	@ (80023e4 <LoopForever+0x16>)
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023bc:	e001      	b.n	80023c2 <LoopFillZerobss>

080023be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c0:	3204      	adds	r2, #4

080023c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c4:	d3fb      	bcc.n	80023be <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80023c6:	f007 fc67 	bl	8009c98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023ca:	f7ff f811 	bl	80013f0 <main>

080023ce <LoopForever>:

LoopForever:
    b LoopForever
 80023ce:	e7fe      	b.n	80023ce <LoopForever>
  ldr   r0, =_estack
 80023d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80023d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80023dc:	0800d8c8 	.word	0x0800d8c8
  ldr r2, =_sbss
 80023e0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80023e4:	20001428 	.word	0x20001428

080023e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023e8:	e7fe      	b.n	80023e8 <ADC1_2_IRQHandler>

080023ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f4:	2003      	movs	r0, #3
 80023f6:	f001 f96f 	bl	80036d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023fa:	200f      	movs	r0, #15
 80023fc:	f000 f80e 	bl	800241c <HAL_InitTick>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	71fb      	strb	r3, [r7, #7]
 800240a:	e001      	b.n	8002410 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800240c:	f7ff fa16 	bl	800183c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002410:	79fb      	ldrb	r3, [r7, #7]

}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002428:	4b16      	ldr	r3, [pc, #88]	@ (8002484 <HAL_InitTick+0x68>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d022      	beq.n	8002476 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002430:	4b15      	ldr	r3, [pc, #84]	@ (8002488 <HAL_InitTick+0x6c>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b13      	ldr	r3, [pc, #76]	@ (8002484 <HAL_InitTick+0x68>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800243c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002440:	fbb2 f3f3 	udiv	r3, r2, r3
 8002444:	4618      	mov	r0, r3
 8002446:	f001 f97a 	bl	800373e <HAL_SYSTICK_Config>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10f      	bne.n	8002470 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b0f      	cmp	r3, #15
 8002454:	d809      	bhi.n	800246a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002456:	2200      	movs	r2, #0
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	f04f 30ff 	mov.w	r0, #4294967295
 800245e:	f001 f946 	bl	80036ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002462:	4a0a      	ldr	r2, [pc, #40]	@ (800248c <HAL_InitTick+0x70>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	e007      	b.n	800247a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
 800246e:	e004      	b.n	800247a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
 8002474:	e001      	b.n	800247a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800247a:	7bfb      	ldrb	r3, [r7, #15]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000008 	.word	0x20000008
 8002488:	20000000 	.word	0x20000000
 800248c:	20000004 	.word	0x20000004

08002490 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002494:	4b05      	ldr	r3, [pc, #20]	@ (80024ac <HAL_IncTick+0x1c>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <HAL_IncTick+0x20>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4413      	add	r3, r2
 800249e:	4a03      	ldr	r2, [pc, #12]	@ (80024ac <HAL_IncTick+0x1c>)
 80024a0:	6013      	str	r3, [r2, #0]
}
 80024a2:	bf00      	nop
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	20000584 	.word	0x20000584
 80024b0:	20000008 	.word	0x20000008

080024b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return uwTick;
 80024b8:	4b03      	ldr	r3, [pc, #12]	@ (80024c8 <HAL_GetTick+0x14>)
 80024ba:	681b      	ldr	r3, [r3, #0]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000584 	.word	0x20000584

080024cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d4:	f7ff ffee 	bl	80024b4 <HAL_GetTick>
 80024d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d004      	beq.n	80024f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80024e6:	4b09      	ldr	r3, [pc, #36]	@ (800250c <HAL_Delay+0x40>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4413      	add	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024f0:	bf00      	nop
 80024f2:	f7ff ffdf 	bl	80024b4 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d8f7      	bhi.n	80024f2 <HAL_Delay+0x26>
  {
  }
}
 8002502:	bf00      	nop
 8002504:	bf00      	nop
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000008 	.word	0x20000008

08002510 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	431a      	orrs	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	609a      	str	r2, [r3, #8]
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	609a      	str	r2, [r3, #8]
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3360      	adds	r3, #96	@ 0x60
 800258a:	461a      	mov	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b08      	ldr	r3, [pc, #32]	@ (80025bc <LL_ADC_SetOffset+0x44>)
 800259a:	4013      	ands	r3, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025b0:	bf00      	nop
 80025b2:	371c      	adds	r7, #28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	03fff000 	.word	0x03fff000

080025c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3360      	adds	r3, #96	@ 0x60
 80025ce:	461a      	mov	r2, r3
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	3360      	adds	r3, #96	@ 0x60
 80025fc:	461a      	mov	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	431a      	orrs	r2, r3
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002616:	bf00      	nop
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002622:	b480      	push	{r7}
 8002624:	b087      	sub	sp, #28
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3360      	adds	r3, #96	@ 0x60
 8002632:	461a      	mov	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	431a      	orrs	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800264c:	bf00      	nop
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	3360      	adds	r3, #96	@ 0x60
 8002668:	461a      	mov	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	431a      	orrs	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002682:	bf00      	nop
 8002684:	371c      	adds	r7, #28
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	615a      	str	r2, [r3, #20]
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3330      	adds	r3, #48	@ 0x30
 80026c4:	461a      	mov	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	f003 030c 	and.w	r3, r3, #12
 80026d0:	4413      	add	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f003 031f 	and.w	r3, r3, #31
 80026de:	211f      	movs	r1, #31
 80026e0:	fa01 f303 	lsl.w	r3, r1, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	401a      	ands	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	0e9b      	lsrs	r3, r3, #26
 80026ec:	f003 011f 	and.w	r1, r3, #31
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	431a      	orrs	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002700:	bf00      	nop
 8002702:	371c      	adds	r7, #28
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	3314      	adds	r3, #20
 800271c:	461a      	mov	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	0e5b      	lsrs	r3, r3, #25
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	4413      	add	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	0d1b      	lsrs	r3, r3, #20
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	2107      	movs	r1, #7
 800273a:	fa01 f303 	lsl.w	r3, r1, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	401a      	ands	r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	0d1b      	lsrs	r3, r3, #20
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
 8002750:	431a      	orrs	r2, r3
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002756:	bf00      	nop
 8002758:	371c      	adds	r7, #28
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277c:	43db      	mvns	r3, r3
 800277e:	401a      	ands	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f003 0318 	and.w	r3, r3, #24
 8002786:	4908      	ldr	r1, [pc, #32]	@ (80027a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002788:	40d9      	lsrs	r1, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	400b      	ands	r3, r1
 800278e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002792:	431a      	orrs	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800279a:	bf00      	nop
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	0007ffff 	.word	0x0007ffff

080027ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80027bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6093      	str	r3, [r2, #8]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027e4:	d101      	bne.n	80027ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002808:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800280c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002830:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002834:	d101      	bne.n	800283a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <LL_ADC_IsEnabled+0x18>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <LL_ADC_IsEnabled+0x1a>
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b04      	cmp	r3, #4
 8002880:	d101      	bne.n	8002886 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d101      	bne.n	80028ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028bc:	b590      	push	{r4, r7, lr}
 80028be:	b089      	sub	sp, #36	@ 0x24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e167      	b.n	8002ba6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7fe fc1d 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff67 	bl	80027d0 <LL_ADC_IsDeepPowerDownEnabled>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d004      	beq.n	8002912 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff4d 	bl	80027ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ff82 	bl	8002820 <LL_ADC_IsInternalRegulatorEnabled>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d115      	bne.n	800294e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ff66 	bl	80027f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800292c:	4ba0      	ldr	r3, [pc, #640]	@ (8002bb0 <HAL_ADC_Init+0x2f4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	099b      	lsrs	r3, r3, #6
 8002932:	4aa0      	ldr	r2, [pc, #640]	@ (8002bb4 <HAL_ADC_Init+0x2f8>)
 8002934:	fba2 2303 	umull	r2, r3, r2, r3
 8002938:	099b      	lsrs	r3, r3, #6
 800293a:	3301      	adds	r3, #1
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002940:	e002      	b.n	8002948 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	3b01      	subs	r3, #1
 8002946:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f9      	bne.n	8002942 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff64 	bl	8002820 <LL_ADC_IsInternalRegulatorEnabled>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10d      	bne.n	800297a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002962:	f043 0210 	orr.w	r2, r3, #16
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800296e:	f043 0201 	orr.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff ff75 	bl	800286e <LL_ADC_REG_IsConversionOngoing>
 8002984:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	2b00      	cmp	r3, #0
 8002990:	f040 8100 	bne.w	8002b94 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	f040 80fc 	bne.w	8002b94 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80029a4:	f043 0202 	orr.w	r2, r3, #2
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff49 	bl	8002848 <LL_ADC_IsEnabled>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d111      	bne.n	80029e0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029bc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80029c0:	f7ff ff42 	bl	8002848 <LL_ADC_IsEnabled>
 80029c4:	4604      	mov	r4, r0
 80029c6:	487c      	ldr	r0, [pc, #496]	@ (8002bb8 <HAL_ADC_Init+0x2fc>)
 80029c8:	f7ff ff3e 	bl	8002848 <LL_ADC_IsEnabled>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4323      	orrs	r3, r4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d105      	bne.n	80029e0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4619      	mov	r1, r3
 80029da:	4878      	ldr	r0, [pc, #480]	@ (8002bbc <HAL_ADC_Init+0x300>)
 80029dc:	f7ff fd98 	bl	8002510 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	7f5b      	ldrb	r3, [r3, #29]
 80029e4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029ea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80029f0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80029f6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029fe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d106      	bne.n	8002a1c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a12:	3b01      	subs	r3, #1
 8002a14:	045b      	lsls	r3, r3, #17
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d009      	beq.n	8002a38 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a28:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a30:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	4b60      	ldr	r3, [pc, #384]	@ (8002bc0 <HAL_ADC_Init+0x304>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6812      	ldr	r2, [r2, #0]
 8002a46:	69b9      	ldr	r1, [r7, #24]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ff14 	bl	8002894 <LL_ADC_INJ_IsConversionOngoing>
 8002a6c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d16d      	bne.n	8002b50 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d16a      	bne.n	8002b50 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a7e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a86:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a96:	f023 0302 	bic.w	r3, r3, #2
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	69b9      	ldr	r1, [r7, #24]
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d017      	beq.n	8002adc <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691a      	ldr	r2, [r3, #16]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002aba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002ac4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ac8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6911      	ldr	r1, [r2, #16]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002ada:	e013      	b.n	8002b04 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691a      	ldr	r2, [r3, #16]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002aea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002afc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b00:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d118      	bne.n	8002b40 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002b18:	f023 0304 	bic.w	r3, r3, #4
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b24:	4311      	orrs	r1, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002b2a:	4311      	orrs	r1, r2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b30:	430a      	orrs	r2, r1
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 0201 	orr.w	r2, r2, #1
 8002b3c:	611a      	str	r2, [r3, #16]
 8002b3e:	e007      	b.n	8002b50 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0201 	bic.w	r2, r2, #1
 8002b4e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d10c      	bne.n	8002b72 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	f023 010f 	bic.w	r1, r3, #15
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	1e5a      	subs	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b70:	e007      	b.n	8002b82 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 020f 	bic.w	r2, r2, #15
 8002b80:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b86:	f023 0303 	bic.w	r3, r3, #3
 8002b8a:	f043 0201 	orr.w	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b92:	e007      	b.n	8002ba4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b98:	f043 0210 	orr.w	r2, r3, #16
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ba4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3724      	adds	r7, #36	@ 0x24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd90      	pop	{r4, r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	053e2d63 	.word	0x053e2d63
 8002bb8:	50000100 	.word	0x50000100
 8002bbc:	50000300 	.word	0x50000300
 8002bc0:	fff04007 	.word	0xfff04007

08002bc4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b0b6      	sub	sp, #216	@ 0xd8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x22>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e3c8      	b.n	8003378 <HAL_ADC_ConfigChannel+0x7b4>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fe3b 	bl	800286e <LL_ADC_REG_IsConversionOngoing>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f040 83ad 	bne.w	800335a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	f7ff fd51 	bl	80026b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff fe29 	bl	800286e <LL_ADC_REG_IsConversionOngoing>
 8002c1c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fe35 	bl	8002894 <LL_ADC_INJ_IsConversionOngoing>
 8002c2a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f040 81d9 	bne.w	8002fea <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f040 81d4 	bne.w	8002fea <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c4a:	d10f      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2200      	movs	r2, #0
 8002c56:	4619      	mov	r1, r3
 8002c58:	f7ff fd58 	bl	800270c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff fd12 	bl	800268e <LL_ADC_SetSamplingTimeCommonConfig>
 8002c6a:	e00e      	b.n	8002c8a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	6819      	ldr	r1, [r3, #0]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f7ff fd47 	bl	800270c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fd02 	bl	800268e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	08db      	lsrs	r3, r3, #3
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d022      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6818      	ldr	r0, [r3, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	6919      	ldr	r1, [r3, #16]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002cbc:	f7ff fc5c 	bl	8002578 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	6919      	ldr	r1, [r3, #16]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	f7ff fca8 	bl	8002622 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d102      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x124>
 8002ce2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ce6:	e000      	b.n	8002cea <HAL_ADC_ConfigChannel+0x126>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	461a      	mov	r2, r3
 8002cec:	f7ff fcb4 	bl	8002658 <LL_ADC_SetOffsetSaturation>
 8002cf0:	e17b      	b.n	8002fea <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff fc61 	bl	80025c0 <LL_ADC_GetOffsetChannel>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10a      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x15a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fc56 	bl	80025c0 <LL_ADC_GetOffsetChannel>
 8002d14:	4603      	mov	r3, r0
 8002d16:	0e9b      	lsrs	r3, r3, #26
 8002d18:	f003 021f 	and.w	r2, r3, #31
 8002d1c:	e01e      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x198>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2100      	movs	r1, #0
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fc4b 	bl	80025c0 <LL_ADC_GetOffsetChannel>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d34:	fa93 f3a3 	rbit	r3, r3
 8002d38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002d4c:	2320      	movs	r3, #32
 8002d4e:	e004      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002d50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d105      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x1b0>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	0e9b      	lsrs	r3, r3, #26
 8002d6e:	f003 031f 	and.w	r3, r3, #31
 8002d72:	e018      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x1e2>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002d88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002d90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002d98:	2320      	movs	r3, #32
 8002d9a:	e004      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002d9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002da0:	fab3 f383 	clz	r3, r3
 8002da4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d106      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2200      	movs	r2, #0
 8002db0:	2100      	movs	r1, #0
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fc1a 	bl	80025ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fbfe 	bl	80025c0 <LL_ADC_GetOffsetChannel>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10a      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x220>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fbf3 	bl	80025c0 <LL_ADC_GetOffsetChannel>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	0e9b      	lsrs	r3, r3, #26
 8002dde:	f003 021f 	and.w	r2, r3, #31
 8002de2:	e01e      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x25e>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2101      	movs	r1, #1
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fbe8 	bl	80025c0 <LL_ADC_GetOffsetChannel>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002e02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002e0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002e12:	2320      	movs	r3, #32
 8002e14:	e004      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002e16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e1a:	fab3 f383 	clz	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d105      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x276>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	0e9b      	lsrs	r3, r3, #26
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	e018      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x2a8>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002e4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002e56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002e5e:	2320      	movs	r3, #32
 8002e60:	e004      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002e62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d106      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2200      	movs	r2, #0
 8002e76:	2101      	movs	r1, #1
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fbb7 	bl	80025ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2102      	movs	r1, #2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fb9b 	bl	80025c0 <LL_ADC_GetOffsetChannel>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x2e6>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2102      	movs	r1, #2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fb90 	bl	80025c0 <LL_ADC_GetOffsetChannel>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	0e9b      	lsrs	r3, r3, #26
 8002ea4:	f003 021f 	and.w	r2, r3, #31
 8002ea8:	e01e      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x324>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2102      	movs	r1, #2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fb85 	bl	80025c0 <LL_ADC_GetOffsetChannel>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002ec8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ecc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002ed0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002ed8:	2320      	movs	r3, #32
 8002eda:	e004      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002edc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ee0:	fab3 f383 	clz	r3, r3
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d105      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x33c>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0e9b      	lsrs	r3, r3, #26
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	e016      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x36a>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002f12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002f18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002f20:	2320      	movs	r3, #32
 8002f22:	e004      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f28:	fab3 f383 	clz	r3, r3
 8002f2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d106      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2200      	movs	r2, #0
 8002f38:	2102      	movs	r1, #2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fb56 	bl	80025ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2103      	movs	r1, #3
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fb3a 	bl	80025c0 <LL_ADC_GetOffsetChannel>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x3a8>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2103      	movs	r1, #3
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fb2f 	bl	80025c0 <LL_ADC_GetOffsetChannel>
 8002f62:	4603      	mov	r3, r0
 8002f64:	0e9b      	lsrs	r3, r3, #26
 8002f66:	f003 021f 	and.w	r2, r3, #31
 8002f6a:	e017      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x3d8>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2103      	movs	r1, #3
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fb24 	bl	80025c0 <LL_ADC_GetOffsetChannel>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f7e:	fa93 f3a3 	rbit	r3, r3
 8002f82:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002f84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f86:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002f88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002f8e:	2320      	movs	r3, #32
 8002f90:	e003      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002f92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f94:	fab3 f383 	clz	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d105      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x3f0>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	0e9b      	lsrs	r3, r3, #26
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	e011      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x414>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fbc:	fa93 f3a3 	rbit	r3, r3
 8002fc0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002fc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002fc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002fcc:	2320      	movs	r3, #32
 8002fce:	e003      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002fd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d106      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2103      	movs	r1, #3
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fb01 	bl	80025ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fc2a 	bl	8002848 <LL_ADC_IsEnabled>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 8140 	bne.w	800327c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	6819      	ldr	r1, [r3, #0]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	461a      	mov	r2, r3
 800300a:	f7ff fbab 	bl	8002764 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	4a8f      	ldr	r2, [pc, #572]	@ (8003250 <HAL_ADC_ConfigChannel+0x68c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	f040 8131 	bne.w	800327c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10b      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x47e>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	0e9b      	lsrs	r3, r3, #26
 8003030:	3301      	adds	r3, #1
 8003032:	f003 031f 	and.w	r3, r3, #31
 8003036:	2b09      	cmp	r3, #9
 8003038:	bf94      	ite	ls
 800303a:	2301      	movls	r3, #1
 800303c:	2300      	movhi	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	e019      	b.n	8003076 <HAL_ADC_ConfigChannel+0x4b2>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800304a:	fa93 f3a3 	rbit	r3, r3
 800304e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003050:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003052:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003054:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800305a:	2320      	movs	r3, #32
 800305c:	e003      	b.n	8003066 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800305e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003060:	fab3 f383 	clz	r3, r3
 8003064:	b2db      	uxtb	r3, r3
 8003066:	3301      	adds	r3, #1
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	2b09      	cmp	r3, #9
 800306e:	bf94      	ite	ls
 8003070:	2301      	movls	r3, #1
 8003072:	2300      	movhi	r3, #0
 8003074:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003076:	2b00      	cmp	r3, #0
 8003078:	d079      	beq.n	800316e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003082:	2b00      	cmp	r3, #0
 8003084:	d107      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x4d2>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	0e9b      	lsrs	r3, r3, #26
 800308c:	3301      	adds	r3, #1
 800308e:	069b      	lsls	r3, r3, #26
 8003090:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003094:	e015      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x4fe>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80030a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030a6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80030a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80030ae:	2320      	movs	r3, #32
 80030b0:	e003      	b.n	80030ba <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80030b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	3301      	adds	r3, #1
 80030bc:	069b      	lsls	r3, r3, #26
 80030be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x51e>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	0e9b      	lsrs	r3, r3, #26
 80030d4:	3301      	adds	r3, #1
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	2101      	movs	r1, #1
 80030dc:	fa01 f303 	lsl.w	r3, r1, r3
 80030e0:	e017      	b.n	8003112 <HAL_ADC_ConfigChannel+0x54e>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80030f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80030f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80030fa:	2320      	movs	r3, #32
 80030fc:	e003      	b.n	8003106 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80030fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003100:	fab3 f383 	clz	r3, r3
 8003104:	b2db      	uxtb	r3, r3
 8003106:	3301      	adds	r3, #1
 8003108:	f003 031f 	and.w	r3, r3, #31
 800310c:	2101      	movs	r1, #1
 800310e:	fa01 f303 	lsl.w	r3, r1, r3
 8003112:	ea42 0103 	orr.w	r1, r2, r3
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10a      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x574>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	0e9b      	lsrs	r3, r3, #26
 8003128:	3301      	adds	r3, #1
 800312a:	f003 021f 	and.w	r2, r3, #31
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	051b      	lsls	r3, r3, #20
 8003136:	e018      	b.n	800316a <HAL_ADC_ConfigChannel+0x5a6>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003148:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800314a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003150:	2320      	movs	r3, #32
 8003152:	e003      	b.n	800315c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	3301      	adds	r3, #1
 800315e:	f003 021f 	and.w	r2, r3, #31
 8003162:	4613      	mov	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	4413      	add	r3, r2
 8003168:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800316a:	430b      	orrs	r3, r1
 800316c:	e081      	b.n	8003272 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003176:	2b00      	cmp	r3, #0
 8003178:	d107      	bne.n	800318a <HAL_ADC_ConfigChannel+0x5c6>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	0e9b      	lsrs	r3, r3, #26
 8003180:	3301      	adds	r3, #1
 8003182:	069b      	lsls	r3, r3, #26
 8003184:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003188:	e015      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x5f2>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800319c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80031a2:	2320      	movs	r3, #32
 80031a4:	e003      	b.n	80031ae <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80031a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a8:	fab3 f383 	clz	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	3301      	adds	r3, #1
 80031b0:	069b      	lsls	r3, r3, #26
 80031b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d109      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x612>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	0e9b      	lsrs	r3, r3, #26
 80031c8:	3301      	adds	r3, #1
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	2101      	movs	r1, #1
 80031d0:	fa01 f303 	lsl.w	r3, r1, r3
 80031d4:	e017      	b.n	8003206 <HAL_ADC_ConfigChannel+0x642>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	fa93 f3a3 	rbit	r3, r3
 80031e2:	61fb      	str	r3, [r7, #28]
  return result;
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80031ee:	2320      	movs	r3, #32
 80031f0:	e003      	b.n	80031fa <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	fab3 f383 	clz	r3, r3
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	3301      	adds	r3, #1
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	2101      	movs	r1, #1
 8003202:	fa01 f303 	lsl.w	r3, r1, r3
 8003206:	ea42 0103 	orr.w	r1, r2, r3
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10d      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x66e>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	0e9b      	lsrs	r3, r3, #26
 800321c:	3301      	adds	r3, #1
 800321e:	f003 021f 	and.w	r2, r3, #31
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	3b1e      	subs	r3, #30
 800322a:	051b      	lsls	r3, r3, #20
 800322c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003230:	e01e      	b.n	8003270 <HAL_ADC_ConfigChannel+0x6ac>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	613b      	str	r3, [r7, #16]
  return result;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d104      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800324a:	2320      	movs	r3, #32
 800324c:	e006      	b.n	800325c <HAL_ADC_ConfigChannel+0x698>
 800324e:	bf00      	nop
 8003250:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	fab3 f383 	clz	r3, r3
 800325a:	b2db      	uxtb	r3, r3
 800325c:	3301      	adds	r3, #1
 800325e:	f003 021f 	and.w	r2, r3, #31
 8003262:	4613      	mov	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4413      	add	r3, r2
 8003268:	3b1e      	subs	r3, #30
 800326a:	051b      	lsls	r3, r3, #20
 800326c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003270:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003276:	4619      	mov	r1, r3
 8003278:	f7ff fa48 	bl	800270c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	4b3f      	ldr	r3, [pc, #252]	@ (8003380 <HAL_ADC_ConfigChannel+0x7bc>)
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d071      	beq.n	800336c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003288:	483e      	ldr	r0, [pc, #248]	@ (8003384 <HAL_ADC_ConfigChannel+0x7c0>)
 800328a:	f7ff f967 	bl	800255c <LL_ADC_GetCommonPathInternalCh>
 800328e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a3c      	ldr	r2, [pc, #240]	@ (8003388 <HAL_ADC_ConfigChannel+0x7c4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d004      	beq.n	80032a6 <HAL_ADC_ConfigChannel+0x6e2>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a3a      	ldr	r2, [pc, #232]	@ (800338c <HAL_ADC_ConfigChannel+0x7c8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d127      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d121      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032ba:	d157      	bne.n	800336c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032c4:	4619      	mov	r1, r3
 80032c6:	482f      	ldr	r0, [pc, #188]	@ (8003384 <HAL_ADC_ConfigChannel+0x7c0>)
 80032c8:	f7ff f935 	bl	8002536 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032cc:	4b30      	ldr	r3, [pc, #192]	@ (8003390 <HAL_ADC_ConfigChannel+0x7cc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	099b      	lsrs	r3, r3, #6
 80032d2:	4a30      	ldr	r2, [pc, #192]	@ (8003394 <HAL_ADC_ConfigChannel+0x7d0>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	099b      	lsrs	r3, r3, #6
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	4613      	mov	r3, r2
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032e6:	e002      	b.n	80032ee <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f9      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032f4:	e03a      	b.n	800336c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a27      	ldr	r2, [pc, #156]	@ (8003398 <HAL_ADC_ConfigChannel+0x7d4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d113      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003300:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003304:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10d      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a22      	ldr	r2, [pc, #136]	@ (800339c <HAL_ADC_ConfigChannel+0x7d8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d02a      	beq.n	800336c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003316:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800331a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800331e:	4619      	mov	r1, r3
 8003320:	4818      	ldr	r0, [pc, #96]	@ (8003384 <HAL_ADC_ConfigChannel+0x7c0>)
 8003322:	f7ff f908 	bl	8002536 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003326:	e021      	b.n	800336c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1c      	ldr	r2, [pc, #112]	@ (80033a0 <HAL_ADC_ConfigChannel+0x7dc>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d11c      	bne.n	800336c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003332:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d116      	bne.n	800336c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a16      	ldr	r2, [pc, #88]	@ (800339c <HAL_ADC_ConfigChannel+0x7d8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d011      	beq.n	800336c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800334c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003350:	4619      	mov	r1, r3
 8003352:	480c      	ldr	r0, [pc, #48]	@ (8003384 <HAL_ADC_ConfigChannel+0x7c0>)
 8003354:	f7ff f8ef 	bl	8002536 <LL_ADC_SetCommonPathInternalCh>
 8003358:	e008      	b.n	800336c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335e:	f043 0220 	orr.w	r2, r3, #32
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003374:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003378:	4618      	mov	r0, r3
 800337a:	37d8      	adds	r7, #216	@ 0xd8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	80080000 	.word	0x80080000
 8003384:	50000300 	.word	0x50000300
 8003388:	c3210000 	.word	0xc3210000
 800338c:	90c00010 	.word	0x90c00010
 8003390:	20000000 	.word	0x20000000
 8003394:	053e2d63 	.word	0x053e2d63
 8003398:	c7520000 	.word	0xc7520000
 800339c:	50000100 	.word	0x50000100
 80033a0:	cb840000 	.word	0xcb840000

080033a4 <LL_ADC_IsEnabled>:
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <LL_ADC_IsEnabled+0x18>
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <LL_ADC_IsEnabled+0x1a>
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <LL_ADC_REG_IsConversionOngoing>:
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d101      	bne.n	80033e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80033f0:	b590      	push	{r4, r7, lr}
 80033f2:	b0a1      	sub	sp, #132	@ 0x84
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800340a:	2302      	movs	r3, #2
 800340c:	e08b      	b.n	8003526 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003416:	2300      	movs	r3, #0
 8003418:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800341a:	2300      	movs	r3, #0
 800341c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003426:	d102      	bne.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003428:	4b41      	ldr	r3, [pc, #260]	@ (8003530 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	e001      	b.n	8003432 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10b      	bne.n	8003450 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800343c:	f043 0220 	orr.w	r2, r3, #32
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e06a      	b.n	8003526 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff ffb9 	bl	80033ca <LL_ADC_REG_IsConversionOngoing>
 8003458:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff ffb3 	bl	80033ca <LL_ADC_REG_IsConversionOngoing>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d14c      	bne.n	8003504 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800346a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800346c:	2b00      	cmp	r3, #0
 800346e:	d149      	bne.n	8003504 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003470:	4b30      	ldr	r3, [pc, #192]	@ (8003534 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003472:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d028      	beq.n	80034ce <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800347c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6859      	ldr	r1, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800348e:	035b      	lsls	r3, r3, #13
 8003490:	430b      	orrs	r3, r1
 8003492:	431a      	orrs	r2, r3
 8003494:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003496:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003498:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800349c:	f7ff ff82 	bl	80033a4 <LL_ADC_IsEnabled>
 80034a0:	4604      	mov	r4, r0
 80034a2:	4823      	ldr	r0, [pc, #140]	@ (8003530 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80034a4:	f7ff ff7e 	bl	80033a4 <LL_ADC_IsEnabled>
 80034a8:	4603      	mov	r3, r0
 80034aa:	4323      	orrs	r3, r4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d133      	bne.n	8003518 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80034b8:	f023 030f 	bic.w	r3, r3, #15
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	6811      	ldr	r1, [r2, #0]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	6892      	ldr	r2, [r2, #8]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	431a      	orrs	r2, r3
 80034c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034ca:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034cc:	e024      	b.n	8003518 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034d8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034da:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80034de:	f7ff ff61 	bl	80033a4 <LL_ADC_IsEnabled>
 80034e2:	4604      	mov	r4, r0
 80034e4:	4812      	ldr	r0, [pc, #72]	@ (8003530 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80034e6:	f7ff ff5d 	bl	80033a4 <LL_ADC_IsEnabled>
 80034ea:	4603      	mov	r3, r0
 80034ec:	4323      	orrs	r3, r4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d112      	bne.n	8003518 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80034fa:	f023 030f 	bic.w	r3, r3, #15
 80034fe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003500:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003502:	e009      	b.n	8003518 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003508:	f043 0220 	orr.w	r2, r3, #32
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003516:	e000      	b.n	800351a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003518:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003522:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003526:	4618      	mov	r0, r3
 8003528:	3784      	adds	r7, #132	@ 0x84
 800352a:	46bd      	mov	sp, r7
 800352c:	bd90      	pop	{r4, r7, pc}
 800352e:	bf00      	nop
 8003530:	50000100 	.word	0x50000100
 8003534:	50000300 	.word	0x50000300

08003538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003548:	4b0c      	ldr	r3, [pc, #48]	@ (800357c <__NVIC_SetPriorityGrouping+0x44>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003554:	4013      	ands	r3, r2
 8003556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003560:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800356a:	4a04      	ldr	r2, [pc, #16]	@ (800357c <__NVIC_SetPriorityGrouping+0x44>)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	60d3      	str	r3, [r2, #12]
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003584:	4b04      	ldr	r3, [pc, #16]	@ (8003598 <__NVIC_GetPriorityGrouping+0x18>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	0a1b      	lsrs	r3, r3, #8
 800358a:	f003 0307 	and.w	r3, r3, #7
}
 800358e:	4618      	mov	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	db0b      	blt.n	80035c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	f003 021f 	and.w	r2, r3, #31
 80035b4:	4907      	ldr	r1, [pc, #28]	@ (80035d4 <__NVIC_EnableIRQ+0x38>)
 80035b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	2001      	movs	r0, #1
 80035be:	fa00 f202 	lsl.w	r2, r0, r2
 80035c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	e000e100 	.word	0xe000e100

080035d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	6039      	str	r1, [r7, #0]
 80035e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	db0a      	blt.n	8003602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	490c      	ldr	r1, [pc, #48]	@ (8003624 <__NVIC_SetPriority+0x4c>)
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	0112      	lsls	r2, r2, #4
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	440b      	add	r3, r1
 80035fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003600:	e00a      	b.n	8003618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	b2da      	uxtb	r2, r3
 8003606:	4908      	ldr	r1, [pc, #32]	@ (8003628 <__NVIC_SetPriority+0x50>)
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	3b04      	subs	r3, #4
 8003610:	0112      	lsls	r2, r2, #4
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	440b      	add	r3, r1
 8003616:	761a      	strb	r2, [r3, #24]
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	e000e100 	.word	0xe000e100
 8003628:	e000ed00 	.word	0xe000ed00

0800362c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800362c:	b480      	push	{r7}
 800362e:	b089      	sub	sp, #36	@ 0x24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f1c3 0307 	rsb	r3, r3, #7
 8003646:	2b04      	cmp	r3, #4
 8003648:	bf28      	it	cs
 800364a:	2304      	movcs	r3, #4
 800364c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	3304      	adds	r3, #4
 8003652:	2b06      	cmp	r3, #6
 8003654:	d902      	bls.n	800365c <NVIC_EncodePriority+0x30>
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3b03      	subs	r3, #3
 800365a:	e000      	b.n	800365e <NVIC_EncodePriority+0x32>
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003660:	f04f 32ff 	mov.w	r2, #4294967295
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43da      	mvns	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	401a      	ands	r2, r3
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003674:	f04f 31ff 	mov.w	r1, #4294967295
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	fa01 f303 	lsl.w	r3, r1, r3
 800367e:	43d9      	mvns	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003684:	4313      	orrs	r3, r2
         );
}
 8003686:	4618      	mov	r0, r3
 8003688:	3724      	adds	r7, #36	@ 0x24
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
	...

08003694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3b01      	subs	r3, #1
 80036a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036a4:	d301      	bcc.n	80036aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036a6:	2301      	movs	r3, #1
 80036a8:	e00f      	b.n	80036ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036aa:	4a0a      	ldr	r2, [pc, #40]	@ (80036d4 <SysTick_Config+0x40>)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036b2:	210f      	movs	r1, #15
 80036b4:	f04f 30ff 	mov.w	r0, #4294967295
 80036b8:	f7ff ff8e 	bl	80035d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036bc:	4b05      	ldr	r3, [pc, #20]	@ (80036d4 <SysTick_Config+0x40>)
 80036be:	2200      	movs	r2, #0
 80036c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036c2:	4b04      	ldr	r3, [pc, #16]	@ (80036d4 <SysTick_Config+0x40>)
 80036c4:	2207      	movs	r2, #7
 80036c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	e000e010 	.word	0xe000e010

080036d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7ff ff29 	bl	8003538 <__NVIC_SetPriorityGrouping>
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b086      	sub	sp, #24
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	4603      	mov	r3, r0
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	607a      	str	r2, [r7, #4]
 80036fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036fc:	f7ff ff40 	bl	8003580 <__NVIC_GetPriorityGrouping>
 8003700:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	6978      	ldr	r0, [r7, #20]
 8003708:	f7ff ff90 	bl	800362c <NVIC_EncodePriority>
 800370c:	4602      	mov	r2, r0
 800370e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003712:	4611      	mov	r1, r2
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff ff5f 	bl	80035d8 <__NVIC_SetPriority>
}
 800371a:	bf00      	nop
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	4603      	mov	r3, r0
 800372a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800372c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ff33 	bl	800359c <__NVIC_EnableIRQ>
}
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff ffa4 	bl	8003694 <SysTick_Config>
 800374c:	4603      	mov	r3, r0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e08d      	b.n	8003886 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	4b47      	ldr	r3, [pc, #284]	@ (8003890 <HAL_DMA_Init+0x138>)
 8003772:	429a      	cmp	r2, r3
 8003774:	d80f      	bhi.n	8003796 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	4b45      	ldr	r3, [pc, #276]	@ (8003894 <HAL_DMA_Init+0x13c>)
 800377e:	4413      	add	r3, r2
 8003780:	4a45      	ldr	r2, [pc, #276]	@ (8003898 <HAL_DMA_Init+0x140>)
 8003782:	fba2 2303 	umull	r2, r3, r2, r3
 8003786:	091b      	lsrs	r3, r3, #4
 8003788:	009a      	lsls	r2, r3, #2
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a42      	ldr	r2, [pc, #264]	@ (800389c <HAL_DMA_Init+0x144>)
 8003792:	641a      	str	r2, [r3, #64]	@ 0x40
 8003794:	e00e      	b.n	80037b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	4b40      	ldr	r3, [pc, #256]	@ (80038a0 <HAL_DMA_Init+0x148>)
 800379e:	4413      	add	r3, r2
 80037a0:	4a3d      	ldr	r2, [pc, #244]	@ (8003898 <HAL_DMA_Init+0x140>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	091b      	lsrs	r3, r3, #4
 80037a8:	009a      	lsls	r2, r3, #2
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a3c      	ldr	r2, [pc, #240]	@ (80038a4 <HAL_DMA_Init+0x14c>)
 80037b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80037ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f8fe 	bl	8003a08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003814:	d102      	bne.n	800381c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003830:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d010      	beq.n	800385c <HAL_DMA_Init+0x104>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b04      	cmp	r3, #4
 8003840:	d80c      	bhi.n	800385c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f91e 	bl	8003a84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	e008      	b.n	800386e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40020407 	.word	0x40020407
 8003894:	bffdfff8 	.word	0xbffdfff8
 8003898:	cccccccd 	.word	0xcccccccd
 800389c:	40020000 	.word	0x40020000
 80038a0:	bffdfbf8 	.word	0xbffdfbf8
 80038a4:	40020400 	.word	0x40020400

080038a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	2204      	movs	r2, #4
 80038ca:	409a      	lsls	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d026      	beq.n	8003922 <HAL_DMA_IRQHandler+0x7a>
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d021      	beq.n	8003922 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d107      	bne.n	80038fc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0204 	bic.w	r2, r2, #4
 80038fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003900:	f003 021f 	and.w	r2, r3, #31
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	2104      	movs	r1, #4
 800390a:	fa01 f202 	lsl.w	r2, r1, r2
 800390e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	2b00      	cmp	r3, #0
 8003916:	d071      	beq.n	80039fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003920:	e06c      	b.n	80039fc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	2202      	movs	r2, #2
 800392c:	409a      	lsls	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4013      	ands	r3, r2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d02e      	beq.n	8003994 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d029      	beq.n	8003994 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10b      	bne.n	8003966 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 020a 	bic.w	r2, r2, #10
 800395c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396a:	f003 021f 	and.w	r2, r3, #31
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	2102      	movs	r1, #2
 8003974:	fa01 f202 	lsl.w	r2, r1, r2
 8003978:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d038      	beq.n	80039fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003992:	e033      	b.n	80039fc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	2208      	movs	r2, #8
 800399e:	409a      	lsls	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d02a      	beq.n	80039fe <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d025      	beq.n	80039fe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 020e 	bic.w	r2, r2, #14
 80039c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c6:	f003 021f 	and.w	r2, r3, #31
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	2101      	movs	r1, #1
 80039d0:	fa01 f202 	lsl.w	r2, r1, r2
 80039d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d004      	beq.n	80039fe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039fc:	bf00      	nop
 80039fe:	bf00      	nop
}
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	4b16      	ldr	r3, [pc, #88]	@ (8003a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d802      	bhi.n	8003a22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003a1c:	4b15      	ldr	r3, [pc, #84]	@ (8003a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	e001      	b.n	8003a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003a22:	4b15      	ldr	r3, [pc, #84]	@ (8003a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003a24:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	3b08      	subs	r3, #8
 8003a32:	4a12      	ldr	r2, [pc, #72]	@ (8003a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003a34:	fba2 2303 	umull	r2, r3, r2, r3
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a40:	089b      	lsrs	r3, r3, #2
 8003a42:	009a      	lsls	r2, r3, #2
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	4413      	add	r3, r2
 8003a48:	461a      	mov	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a0b      	ldr	r2, [pc, #44]	@ (8003a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003a52:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a62:	bf00      	nop
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40020407 	.word	0x40020407
 8003a74:	40020800 	.word	0x40020800
 8003a78:	40020820 	.word	0x40020820
 8003a7c:	cccccccd 	.word	0xcccccccd
 8003a80:	40020880 	.word	0x40020880

08003a84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a08      	ldr	r2, [pc, #32]	@ (8003ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003aa6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003ab8:	bf00      	nop
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	1000823f 	.word	0x1000823f
 8003ac8:	40020940 	.word	0x40020940

08003acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ada:	e15a      	b.n	8003d92 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae8:	4013      	ands	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 814c 	beq.w	8003d8c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d005      	beq.n	8003b0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d130      	bne.n	8003b6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	2203      	movs	r2, #3
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4013      	ands	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b42:	2201      	movs	r2, #1
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	091b      	lsrs	r3, r3, #4
 8003b58:	f003 0201 	and.w	r2, r3, #1
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d017      	beq.n	8003baa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	2203      	movs	r2, #3
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d123      	bne.n	8003bfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	08da      	lsrs	r2, r3, #3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3208      	adds	r2, #8
 8003bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	220f      	movs	r2, #15
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	08da      	lsrs	r2, r3, #3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3208      	adds	r2, #8
 8003bf8:	6939      	ldr	r1, [r7, #16]
 8003bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	2203      	movs	r2, #3
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4013      	ands	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f003 0203 	and.w	r2, r3, #3
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 80a6 	beq.w	8003d8c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c40:	4b5b      	ldr	r3, [pc, #364]	@ (8003db0 <HAL_GPIO_Init+0x2e4>)
 8003c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c44:	4a5a      	ldr	r2, [pc, #360]	@ (8003db0 <HAL_GPIO_Init+0x2e4>)
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c4c:	4b58      	ldr	r3, [pc, #352]	@ (8003db0 <HAL_GPIO_Init+0x2e4>)
 8003c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c58:	4a56      	ldr	r2, [pc, #344]	@ (8003db4 <HAL_GPIO_Init+0x2e8>)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	089b      	lsrs	r3, r3, #2
 8003c5e:	3302      	adds	r3, #2
 8003c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	220f      	movs	r2, #15
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003c82:	d01f      	beq.n	8003cc4 <HAL_GPIO_Init+0x1f8>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a4c      	ldr	r2, [pc, #304]	@ (8003db8 <HAL_GPIO_Init+0x2ec>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d019      	beq.n	8003cc0 <HAL_GPIO_Init+0x1f4>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a4b      	ldr	r2, [pc, #300]	@ (8003dbc <HAL_GPIO_Init+0x2f0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d013      	beq.n	8003cbc <HAL_GPIO_Init+0x1f0>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a4a      	ldr	r2, [pc, #296]	@ (8003dc0 <HAL_GPIO_Init+0x2f4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00d      	beq.n	8003cb8 <HAL_GPIO_Init+0x1ec>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a49      	ldr	r2, [pc, #292]	@ (8003dc4 <HAL_GPIO_Init+0x2f8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d007      	beq.n	8003cb4 <HAL_GPIO_Init+0x1e8>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a48      	ldr	r2, [pc, #288]	@ (8003dc8 <HAL_GPIO_Init+0x2fc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d101      	bne.n	8003cb0 <HAL_GPIO_Init+0x1e4>
 8003cac:	2305      	movs	r3, #5
 8003cae:	e00a      	b.n	8003cc6 <HAL_GPIO_Init+0x1fa>
 8003cb0:	2306      	movs	r3, #6
 8003cb2:	e008      	b.n	8003cc6 <HAL_GPIO_Init+0x1fa>
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	e006      	b.n	8003cc6 <HAL_GPIO_Init+0x1fa>
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e004      	b.n	8003cc6 <HAL_GPIO_Init+0x1fa>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e002      	b.n	8003cc6 <HAL_GPIO_Init+0x1fa>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <HAL_GPIO_Init+0x1fa>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	f002 0203 	and.w	r2, r2, #3
 8003ccc:	0092      	lsls	r2, r2, #2
 8003cce:	4093      	lsls	r3, r2
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cd6:	4937      	ldr	r1, [pc, #220]	@ (8003db4 <HAL_GPIO_Init+0x2e8>)
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	089b      	lsrs	r3, r3, #2
 8003cdc:	3302      	adds	r3, #2
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ce4:	4b39      	ldr	r3, [pc, #228]	@ (8003dcc <HAL_GPIO_Init+0x300>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	43db      	mvns	r3, r3
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d08:	4a30      	ldr	r2, [pc, #192]	@ (8003dcc <HAL_GPIO_Init+0x300>)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8003dcc <HAL_GPIO_Init+0x300>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	43db      	mvns	r3, r3
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d32:	4a26      	ldr	r2, [pc, #152]	@ (8003dcc <HAL_GPIO_Init+0x300>)
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003d38:	4b24      	ldr	r3, [pc, #144]	@ (8003dcc <HAL_GPIO_Init+0x300>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4013      	ands	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003dcc <HAL_GPIO_Init+0x300>)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d62:	4b1a      	ldr	r3, [pc, #104]	@ (8003dcc <HAL_GPIO_Init+0x300>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d86:	4a11      	ldr	r2, [pc, #68]	@ (8003dcc <HAL_GPIO_Init+0x300>)
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	fa22 f303 	lsr.w	r3, r2, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f47f ae9d 	bne.w	8003adc <HAL_GPIO_Init+0x10>
  }
}
 8003da2:	bf00      	nop
 8003da4:	bf00      	nop
 8003da6:	371c      	adds	r7, #28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40010000 	.word	0x40010000
 8003db8:	48000400 	.word	0x48000400
 8003dbc:	48000800 	.word	0x48000800
 8003dc0:	48000c00 	.word	0x48000c00
 8003dc4:	48001000 	.word	0x48001000
 8003dc8:	48001400 	.word	0x48001400
 8003dcc:	40010400 	.word	0x40010400

08003dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	807b      	strh	r3, [r7, #2]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003de0:	787b      	ldrb	r3, [r7, #1]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003de6:	887a      	ldrh	r2, [r7, #2]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003dec:	e002      	b.n	8003df4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003dee:	887a      	ldrh	r2, [r7, #2]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d141      	bne.n	8003e92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e0e:	4b4b      	ldr	r3, [pc, #300]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e1a:	d131      	bne.n	8003e80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e1c:	4b47      	ldr	r3, [pc, #284]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e22:	4a46      	ldr	r2, [pc, #280]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e2c:	4b43      	ldr	r3, [pc, #268]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e34:	4a41      	ldr	r2, [pc, #260]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e3c:	4b40      	ldr	r3, [pc, #256]	@ (8003f40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2232      	movs	r2, #50	@ 0x32
 8003e42:	fb02 f303 	mul.w	r3, r2, r3
 8003e46:	4a3f      	ldr	r2, [pc, #252]	@ (8003f44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e48:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4c:	0c9b      	lsrs	r3, r3, #18
 8003e4e:	3301      	adds	r3, #1
 8003e50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e52:	e002      	b.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e5a:	4b38      	ldr	r3, [pc, #224]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e66:	d102      	bne.n	8003e6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f2      	bne.n	8003e54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e6e:	4b33      	ldr	r3, [pc, #204]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e7a:	d158      	bne.n	8003f2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e057      	b.n	8003f30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e80:	4b2e      	ldr	r3, [pc, #184]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e86:	4a2d      	ldr	r2, [pc, #180]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e90:	e04d      	b.n	8003f2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e98:	d141      	bne.n	8003f1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e9a:	4b28      	ldr	r3, [pc, #160]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea6:	d131      	bne.n	8003f0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ea8:	4b24      	ldr	r3, [pc, #144]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003eae:	4a23      	ldr	r2, [pc, #140]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003eb8:	4b20      	ldr	r3, [pc, #128]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ec0:	4a1e      	ldr	r2, [pc, #120]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ec6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8003f40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2232      	movs	r2, #50	@ 0x32
 8003ece:	fb02 f303 	mul.w	r3, r2, r3
 8003ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed8:	0c9b      	lsrs	r3, r3, #18
 8003eda:	3301      	adds	r3, #1
 8003edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ede:	e002      	b.n	8003ee6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ee6:	4b15      	ldr	r3, [pc, #84]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef2:	d102      	bne.n	8003efa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f2      	bne.n	8003ee0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003efa:	4b10      	ldr	r3, [pc, #64]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f06:	d112      	bne.n	8003f2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e011      	b.n	8003f30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f12:	4a0a      	ldr	r2, [pc, #40]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003f1c:	e007      	b.n	8003f2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f1e:	4b07      	ldr	r3, [pc, #28]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f26:	4a05      	ldr	r2, [pc, #20]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	40007000 	.word	0x40007000
 8003f40:	20000000 	.word	0x20000000
 8003f44:	431bde83 	.word	0x431bde83

08003f48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003f4c:	4b05      	ldr	r3, [pc, #20]	@ (8003f64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	4a04      	ldr	r2, [pc, #16]	@ (8003f64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f56:	6093      	str	r3, [r2, #8]
}
 8003f58:	bf00      	nop
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40007000 	.word	0x40007000

08003f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e2fe      	b.n	8004578 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d075      	beq.n	8004072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f86:	4b97      	ldr	r3, [pc, #604]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f90:	4b94      	ldr	r3, [pc, #592]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b0c      	cmp	r3, #12
 8003f9e:	d102      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x3e>
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	d002      	beq.n	8003fac <HAL_RCC_OscConfig+0x44>
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d10b      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fac:	4b8d      	ldr	r3, [pc, #564]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d05b      	beq.n	8004070 <HAL_RCC_OscConfig+0x108>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d157      	bne.n	8004070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e2d9      	b.n	8004578 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fcc:	d106      	bne.n	8003fdc <HAL_RCC_OscConfig+0x74>
 8003fce:	4b85      	ldr	r3, [pc, #532]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a84      	ldr	r2, [pc, #528]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	e01d      	b.n	8004018 <HAL_RCC_OscConfig+0xb0>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0x98>
 8003fe6:	4b7f      	ldr	r3, [pc, #508]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a7e      	ldr	r2, [pc, #504]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 8003fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	4b7c      	ldr	r3, [pc, #496]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a7b      	ldr	r2, [pc, #492]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 8003ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	e00b      	b.n	8004018 <HAL_RCC_OscConfig+0xb0>
 8004000:	4b78      	ldr	r3, [pc, #480]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a77      	ldr	r2, [pc, #476]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 8004006:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	4b75      	ldr	r3, [pc, #468]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a74      	ldr	r2, [pc, #464]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 8004012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d013      	beq.n	8004048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004020:	f7fe fa48 	bl	80024b4 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004028:	f7fe fa44 	bl	80024b4 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b64      	cmp	r3, #100	@ 0x64
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e29e      	b.n	8004578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800403a:	4b6a      	ldr	r3, [pc, #424]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0xc0>
 8004046:	e014      	b.n	8004072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7fe fa34 	bl	80024b4 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004050:	f7fe fa30 	bl	80024b4 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b64      	cmp	r3, #100	@ 0x64
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e28a      	b.n	8004578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004062:	4b60      	ldr	r3, [pc, #384]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0xe8>
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d075      	beq.n	800416a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800407e:	4b59      	ldr	r3, [pc, #356]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 030c 	and.w	r3, r3, #12
 8004086:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004088:	4b56      	ldr	r3, [pc, #344]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	2b0c      	cmp	r3, #12
 8004096:	d102      	bne.n	800409e <HAL_RCC_OscConfig+0x136>
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d002      	beq.n	80040a4 <HAL_RCC_OscConfig+0x13c>
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d11f      	bne.n	80040e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040a4:	4b4f      	ldr	r3, [pc, #316]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_OscConfig+0x154>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e25d      	b.n	8004578 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040bc:	4b49      	ldr	r3, [pc, #292]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	061b      	lsls	r3, r3, #24
 80040ca:	4946      	ldr	r1, [pc, #280]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040d0:	4b45      	ldr	r3, [pc, #276]	@ (80041e8 <HAL_RCC_OscConfig+0x280>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fe f9a1 	bl	800241c <HAL_InitTick>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d043      	beq.n	8004168 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e249      	b.n	8004578 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d023      	beq.n	8004134 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040ec:	4b3d      	ldr	r3, [pc, #244]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a3c      	ldr	r2, [pc, #240]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 80040f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f8:	f7fe f9dc 	bl	80024b4 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004100:	f7fe f9d8 	bl	80024b4 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e232      	b.n	8004578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004112:	4b34      	ldr	r3, [pc, #208]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411e:	4b31      	ldr	r3, [pc, #196]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	061b      	lsls	r3, r3, #24
 800412c:	492d      	ldr	r1, [pc, #180]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 800412e:	4313      	orrs	r3, r2
 8004130:	604b      	str	r3, [r1, #4]
 8004132:	e01a      	b.n	800416a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004134:	4b2b      	ldr	r3, [pc, #172]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a2a      	ldr	r2, [pc, #168]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 800413a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800413e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004140:	f7fe f9b8 	bl	80024b4 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004148:	f7fe f9b4 	bl	80024b4 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e20e      	b.n	8004578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800415a:	4b22      	ldr	r3, [pc, #136]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f0      	bne.n	8004148 <HAL_RCC_OscConfig+0x1e0>
 8004166:	e000      	b.n	800416a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004168:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d041      	beq.n	80041fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01c      	beq.n	80041b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800417e:	4b19      	ldr	r3, [pc, #100]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 8004180:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004184:	4a17      	ldr	r2, [pc, #92]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418e:	f7fe f991 	bl	80024b4 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004196:	f7fe f98d 	bl	80024b4 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e1e7      	b.n	8004578 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041a8:	4b0e      	ldr	r3, [pc, #56]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 80041aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0ef      	beq.n	8004196 <HAL_RCC_OscConfig+0x22e>
 80041b6:	e020      	b.n	80041fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b8:	4b0a      	ldr	r3, [pc, #40]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 80041ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041be:	4a09      	ldr	r2, [pc, #36]	@ (80041e4 <HAL_RCC_OscConfig+0x27c>)
 80041c0:	f023 0301 	bic.w	r3, r3, #1
 80041c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fe f974 	bl	80024b4 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041ce:	e00d      	b.n	80041ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d0:	f7fe f970 	bl	80024b4 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d906      	bls.n	80041ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e1ca      	b.n	8004578 <HAL_RCC_OscConfig+0x610>
 80041e2:	bf00      	nop
 80041e4:	40021000 	.word	0x40021000
 80041e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041ec:	4b8c      	ldr	r3, [pc, #560]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 80041ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1ea      	bne.n	80041d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 80a6 	beq.w	8004354 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004208:	2300      	movs	r3, #0
 800420a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800420c:	4b84      	ldr	r3, [pc, #528]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 800420e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_RCC_OscConfig+0x2b4>
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <HAL_RCC_OscConfig+0x2b6>
 800421c:	2300      	movs	r3, #0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00d      	beq.n	800423e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004222:	4b7f      	ldr	r3, [pc, #508]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 8004224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004226:	4a7e      	ldr	r2, [pc, #504]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 8004228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800422c:	6593      	str	r3, [r2, #88]	@ 0x58
 800422e:	4b7c      	ldr	r3, [pc, #496]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 8004230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800423a:	2301      	movs	r3, #1
 800423c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800423e:	4b79      	ldr	r3, [pc, #484]	@ (8004424 <HAL_RCC_OscConfig+0x4bc>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d118      	bne.n	800427c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800424a:	4b76      	ldr	r3, [pc, #472]	@ (8004424 <HAL_RCC_OscConfig+0x4bc>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a75      	ldr	r2, [pc, #468]	@ (8004424 <HAL_RCC_OscConfig+0x4bc>)
 8004250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004256:	f7fe f92d 	bl	80024b4 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800425e:	f7fe f929 	bl	80024b4 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e183      	b.n	8004578 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004270:	4b6c      	ldr	r3, [pc, #432]	@ (8004424 <HAL_RCC_OscConfig+0x4bc>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f0      	beq.n	800425e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d108      	bne.n	8004296 <HAL_RCC_OscConfig+0x32e>
 8004284:	4b66      	ldr	r3, [pc, #408]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428a:	4a65      	ldr	r2, [pc, #404]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004294:	e024      	b.n	80042e0 <HAL_RCC_OscConfig+0x378>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2b05      	cmp	r3, #5
 800429c:	d110      	bne.n	80042c0 <HAL_RCC_OscConfig+0x358>
 800429e:	4b60      	ldr	r3, [pc, #384]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a4:	4a5e      	ldr	r2, [pc, #376]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 80042a6:	f043 0304 	orr.w	r3, r3, #4
 80042aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b4:	4a5a      	ldr	r2, [pc, #360]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 80042b6:	f043 0301 	orr.w	r3, r3, #1
 80042ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042be:	e00f      	b.n	80042e0 <HAL_RCC_OscConfig+0x378>
 80042c0:	4b57      	ldr	r3, [pc, #348]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c6:	4a56      	ldr	r2, [pc, #344]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042d0:	4b53      	ldr	r3, [pc, #332]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d6:	4a52      	ldr	r2, [pc, #328]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 80042d8:	f023 0304 	bic.w	r3, r3, #4
 80042dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d016      	beq.n	8004316 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e8:	f7fe f8e4 	bl	80024b4 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f0:	f7fe f8e0 	bl	80024b4 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e138      	b.n	8004578 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004306:	4b46      	ldr	r3, [pc, #280]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 8004308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0ed      	beq.n	80042f0 <HAL_RCC_OscConfig+0x388>
 8004314:	e015      	b.n	8004342 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004316:	f7fe f8cd 	bl	80024b4 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800431c:	e00a      	b.n	8004334 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431e:	f7fe f8c9 	bl	80024b4 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	f241 3288 	movw	r2, #5000	@ 0x1388
 800432c:	4293      	cmp	r3, r2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e121      	b.n	8004578 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004334:	4b3a      	ldr	r3, [pc, #232]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1ed      	bne.n	800431e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004342:	7ffb      	ldrb	r3, [r7, #31]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d105      	bne.n	8004354 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004348:	4b35      	ldr	r3, [pc, #212]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 800434a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434c:	4a34      	ldr	r2, [pc, #208]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 800434e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004352:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d03c      	beq.n	80043da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01c      	beq.n	80043a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004368:	4b2d      	ldr	r3, [pc, #180]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 800436a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800436e:	4a2c      	ldr	r2, [pc, #176]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004378:	f7fe f89c 	bl	80024b4 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004380:	f7fe f898 	bl	80024b4 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e0f2      	b.n	8004578 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004392:	4b23      	ldr	r3, [pc, #140]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 8004394:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0ef      	beq.n	8004380 <HAL_RCC_OscConfig+0x418>
 80043a0:	e01b      	b.n	80043da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 80043a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 80043aa:	f023 0301 	bic.w	r3, r3, #1
 80043ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b2:	f7fe f87f 	bl	80024b4 <HAL_GetTick>
 80043b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043b8:	e008      	b.n	80043cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043ba:	f7fe f87b 	bl	80024b4 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e0d5      	b.n	8004578 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043cc:	4b14      	ldr	r3, [pc, #80]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 80043ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1ef      	bne.n	80043ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 80c9 	beq.w	8004576 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 030c 	and.w	r3, r3, #12
 80043ec:	2b0c      	cmp	r3, #12
 80043ee:	f000 8083 	beq.w	80044f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d15e      	bne.n	80044b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fa:	4b09      	ldr	r3, [pc, #36]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a08      	ldr	r2, [pc, #32]	@ (8004420 <HAL_RCC_OscConfig+0x4b8>)
 8004400:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004406:	f7fe f855 	bl	80024b4 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800440c:	e00c      	b.n	8004428 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800440e:	f7fe f851 	bl	80024b4 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d905      	bls.n	8004428 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e0ab      	b.n	8004578 <HAL_RCC_OscConfig+0x610>
 8004420:	40021000 	.word	0x40021000
 8004424:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004428:	4b55      	ldr	r3, [pc, #340]	@ (8004580 <HAL_RCC_OscConfig+0x618>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1ec      	bne.n	800440e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004434:	4b52      	ldr	r3, [pc, #328]	@ (8004580 <HAL_RCC_OscConfig+0x618>)
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	4b52      	ldr	r3, [pc, #328]	@ (8004584 <HAL_RCC_OscConfig+0x61c>)
 800443a:	4013      	ands	r3, r2
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6a11      	ldr	r1, [r2, #32]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004444:	3a01      	subs	r2, #1
 8004446:	0112      	lsls	r2, r2, #4
 8004448:	4311      	orrs	r1, r2
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800444e:	0212      	lsls	r2, r2, #8
 8004450:	4311      	orrs	r1, r2
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004456:	0852      	lsrs	r2, r2, #1
 8004458:	3a01      	subs	r2, #1
 800445a:	0552      	lsls	r2, r2, #21
 800445c:	4311      	orrs	r1, r2
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004462:	0852      	lsrs	r2, r2, #1
 8004464:	3a01      	subs	r2, #1
 8004466:	0652      	lsls	r2, r2, #25
 8004468:	4311      	orrs	r1, r2
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800446e:	06d2      	lsls	r2, r2, #27
 8004470:	430a      	orrs	r2, r1
 8004472:	4943      	ldr	r1, [pc, #268]	@ (8004580 <HAL_RCC_OscConfig+0x618>)
 8004474:	4313      	orrs	r3, r2
 8004476:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004478:	4b41      	ldr	r3, [pc, #260]	@ (8004580 <HAL_RCC_OscConfig+0x618>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a40      	ldr	r2, [pc, #256]	@ (8004580 <HAL_RCC_OscConfig+0x618>)
 800447e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004482:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004484:	4b3e      	ldr	r3, [pc, #248]	@ (8004580 <HAL_RCC_OscConfig+0x618>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4a3d      	ldr	r2, [pc, #244]	@ (8004580 <HAL_RCC_OscConfig+0x618>)
 800448a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800448e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004490:	f7fe f810 	bl	80024b4 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004498:	f7fe f80c 	bl	80024b4 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e066      	b.n	8004578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044aa:	4b35      	ldr	r3, [pc, #212]	@ (8004580 <HAL_RCC_OscConfig+0x618>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f0      	beq.n	8004498 <HAL_RCC_OscConfig+0x530>
 80044b6:	e05e      	b.n	8004576 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b8:	4b31      	ldr	r3, [pc, #196]	@ (8004580 <HAL_RCC_OscConfig+0x618>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a30      	ldr	r2, [pc, #192]	@ (8004580 <HAL_RCC_OscConfig+0x618>)
 80044be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c4:	f7fd fff6 	bl	80024b4 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044cc:	f7fd fff2 	bl	80024b4 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e04c      	b.n	8004578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044de:	4b28      	ldr	r3, [pc, #160]	@ (8004580 <HAL_RCC_OscConfig+0x618>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f0      	bne.n	80044cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80044ea:	4b25      	ldr	r3, [pc, #148]	@ (8004580 <HAL_RCC_OscConfig+0x618>)
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	4924      	ldr	r1, [pc, #144]	@ (8004580 <HAL_RCC_OscConfig+0x618>)
 80044f0:	4b25      	ldr	r3, [pc, #148]	@ (8004588 <HAL_RCC_OscConfig+0x620>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	60cb      	str	r3, [r1, #12]
 80044f6:	e03e      	b.n	8004576 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e039      	b.n	8004578 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004504:	4b1e      	ldr	r3, [pc, #120]	@ (8004580 <HAL_RCC_OscConfig+0x618>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f003 0203 	and.w	r2, r3, #3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	429a      	cmp	r2, r3
 8004516:	d12c      	bne.n	8004572 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004522:	3b01      	subs	r3, #1
 8004524:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004526:	429a      	cmp	r2, r3
 8004528:	d123      	bne.n	8004572 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004534:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004536:	429a      	cmp	r2, r3
 8004538:	d11b      	bne.n	8004572 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004544:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004546:	429a      	cmp	r2, r3
 8004548:	d113      	bne.n	8004572 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004554:	085b      	lsrs	r3, r3, #1
 8004556:	3b01      	subs	r3, #1
 8004558:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800455a:	429a      	cmp	r2, r3
 800455c:	d109      	bne.n	8004572 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004568:	085b      	lsrs	r3, r3, #1
 800456a:	3b01      	subs	r3, #1
 800456c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800456e:	429a      	cmp	r2, r3
 8004570:	d001      	beq.n	8004576 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3720      	adds	r7, #32
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40021000 	.word	0x40021000
 8004584:	019f800c 	.word	0x019f800c
 8004588:	feeefffc 	.word	0xfeeefffc

0800458c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e11e      	b.n	80047e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045a4:	4b91      	ldr	r3, [pc, #580]	@ (80047ec <HAL_RCC_ClockConfig+0x260>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d910      	bls.n	80045d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b2:	4b8e      	ldr	r3, [pc, #568]	@ (80047ec <HAL_RCC_ClockConfig+0x260>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f023 020f 	bic.w	r2, r3, #15
 80045ba:	498c      	ldr	r1, [pc, #560]	@ (80047ec <HAL_RCC_ClockConfig+0x260>)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	4313      	orrs	r3, r2
 80045c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c2:	4b8a      	ldr	r3, [pc, #552]	@ (80047ec <HAL_RCC_ClockConfig+0x260>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d001      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e106      	b.n	80047e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d073      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	d129      	bne.n	800463c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e8:	4b81      	ldr	r3, [pc, #516]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e0f4      	b.n	80047e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80045f8:	f000 f99c 	bl	8004934 <RCC_GetSysClockFreqFromPLLSource>
 80045fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	4a7c      	ldr	r2, [pc, #496]	@ (80047f4 <HAL_RCC_ClockConfig+0x268>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d93f      	bls.n	8004686 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004606:	4b7a      	ldr	r3, [pc, #488]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800461a:	2b00      	cmp	r3, #0
 800461c:	d033      	beq.n	8004686 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004622:	2b00      	cmp	r3, #0
 8004624:	d12f      	bne.n	8004686 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004626:	4b72      	ldr	r3, [pc, #456]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800462e:	4a70      	ldr	r2, [pc, #448]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004634:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004636:	2380      	movs	r3, #128	@ 0x80
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	e024      	b.n	8004686 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d107      	bne.n	8004654 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004644:	4b6a      	ldr	r3, [pc, #424]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d109      	bne.n	8004664 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e0c6      	b.n	80047e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004654:	4b66      	ldr	r3, [pc, #408]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e0be      	b.n	80047e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004664:	f000 f8ce 	bl	8004804 <HAL_RCC_GetSysClockFreq>
 8004668:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4a61      	ldr	r2, [pc, #388]	@ (80047f4 <HAL_RCC_ClockConfig+0x268>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d909      	bls.n	8004686 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004672:	4b5f      	ldr	r3, [pc, #380]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800467a:	4a5d      	ldr	r2, [pc, #372]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 800467c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004680:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004682:	2380      	movs	r3, #128	@ 0x80
 8004684:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004686:	4b5a      	ldr	r3, [pc, #360]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f023 0203 	bic.w	r2, r3, #3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	4957      	ldr	r1, [pc, #348]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004694:	4313      	orrs	r3, r2
 8004696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004698:	f7fd ff0c 	bl	80024b4 <HAL_GetTick>
 800469c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469e:	e00a      	b.n	80046b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a0:	f7fd ff08 	bl	80024b4 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e095      	b.n	80047e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b6:	4b4e      	ldr	r3, [pc, #312]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 020c 	and.w	r2, r3, #12
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d1eb      	bne.n	80046a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d023      	beq.n	800471c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046e0:	4b43      	ldr	r3, [pc, #268]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	4a42      	ldr	r2, [pc, #264]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 80046e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80046f8:	4b3d      	ldr	r3, [pc, #244]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004700:	4a3b      	ldr	r2, [pc, #236]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004702:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004706:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004708:	4b39      	ldr	r3, [pc, #228]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	4936      	ldr	r1, [pc, #216]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004716:	4313      	orrs	r3, r2
 8004718:	608b      	str	r3, [r1, #8]
 800471a:	e008      	b.n	800472e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b80      	cmp	r3, #128	@ 0x80
 8004720:	d105      	bne.n	800472e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004722:	4b33      	ldr	r3, [pc, #204]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	4a32      	ldr	r2, [pc, #200]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004728:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800472c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800472e:	4b2f      	ldr	r3, [pc, #188]	@ (80047ec <HAL_RCC_ClockConfig+0x260>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d21d      	bcs.n	8004778 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473c:	4b2b      	ldr	r3, [pc, #172]	@ (80047ec <HAL_RCC_ClockConfig+0x260>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f023 020f 	bic.w	r2, r3, #15
 8004744:	4929      	ldr	r1, [pc, #164]	@ (80047ec <HAL_RCC_ClockConfig+0x260>)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	4313      	orrs	r3, r2
 800474a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800474c:	f7fd feb2 	bl	80024b4 <HAL_GetTick>
 8004750:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004752:	e00a      	b.n	800476a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004754:	f7fd feae 	bl	80024b4 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e03b      	b.n	80047e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800476a:	4b20      	ldr	r3, [pc, #128]	@ (80047ec <HAL_RCC_ClockConfig+0x260>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d1ed      	bne.n	8004754 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d008      	beq.n	8004796 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004784:	4b1a      	ldr	r3, [pc, #104]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4917      	ldr	r1, [pc, #92]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004792:	4313      	orrs	r3, r2
 8004794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047a2:	4b13      	ldr	r3, [pc, #76]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	490f      	ldr	r1, [pc, #60]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047b6:	f000 f825 	bl	8004804 <HAL_RCC_GetSysClockFreq>
 80047ba:	4602      	mov	r2, r0
 80047bc:	4b0c      	ldr	r3, [pc, #48]	@ (80047f0 <HAL_RCC_ClockConfig+0x264>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	091b      	lsrs	r3, r3, #4
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	490c      	ldr	r1, [pc, #48]	@ (80047f8 <HAL_RCC_ClockConfig+0x26c>)
 80047c8:	5ccb      	ldrb	r3, [r1, r3]
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	fa22 f303 	lsr.w	r3, r2, r3
 80047d2:	4a0a      	ldr	r2, [pc, #40]	@ (80047fc <HAL_RCC_ClockConfig+0x270>)
 80047d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80047d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004800 <HAL_RCC_ClockConfig+0x274>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fd fe1e 	bl	800241c <HAL_InitTick>
 80047e0:	4603      	mov	r3, r0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40022000 	.word	0x40022000
 80047f0:	40021000 	.word	0x40021000
 80047f4:	04c4b400 	.word	0x04c4b400
 80047f8:	0800d448 	.word	0x0800d448
 80047fc:	20000000 	.word	0x20000000
 8004800:	20000004 	.word	0x20000004

08004804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800480a:	4b2c      	ldr	r3, [pc, #176]	@ (80048bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b04      	cmp	r3, #4
 8004814:	d102      	bne.n	800481c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004816:	4b2a      	ldr	r3, [pc, #168]	@ (80048c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	e047      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800481c:	4b27      	ldr	r3, [pc, #156]	@ (80048bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 030c 	and.w	r3, r3, #12
 8004824:	2b08      	cmp	r3, #8
 8004826:	d102      	bne.n	800482e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004828:	4b25      	ldr	r3, [pc, #148]	@ (80048c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	e03e      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800482e:	4b23      	ldr	r3, [pc, #140]	@ (80048bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b0c      	cmp	r3, #12
 8004838:	d136      	bne.n	80048a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800483a:	4b20      	ldr	r3, [pc, #128]	@ (80048bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004844:	4b1d      	ldr	r3, [pc, #116]	@ (80048bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	3301      	adds	r3, #1
 8004850:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b03      	cmp	r3, #3
 8004856:	d10c      	bne.n	8004872 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004858:	4a19      	ldr	r2, [pc, #100]	@ (80048c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	4a16      	ldr	r2, [pc, #88]	@ (80048bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004862:	68d2      	ldr	r2, [r2, #12]
 8004864:	0a12      	lsrs	r2, r2, #8
 8004866:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800486a:	fb02 f303 	mul.w	r3, r2, r3
 800486e:	617b      	str	r3, [r7, #20]
      break;
 8004870:	e00c      	b.n	800488c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004872:	4a13      	ldr	r2, [pc, #76]	@ (80048c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	fbb2 f3f3 	udiv	r3, r2, r3
 800487a:	4a10      	ldr	r2, [pc, #64]	@ (80048bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800487c:	68d2      	ldr	r2, [r2, #12]
 800487e:	0a12      	lsrs	r2, r2, #8
 8004880:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004884:	fb02 f303 	mul.w	r3, r2, r3
 8004888:	617b      	str	r3, [r7, #20]
      break;
 800488a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800488c:	4b0b      	ldr	r3, [pc, #44]	@ (80048bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	0e5b      	lsrs	r3, r3, #25
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	3301      	adds	r3, #1
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	e001      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80048ac:	693b      	ldr	r3, [r7, #16]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40021000 	.word	0x40021000
 80048c0:	00f42400 	.word	0x00f42400

080048c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048c8:	4b03      	ldr	r3, [pc, #12]	@ (80048d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048ca:	681b      	ldr	r3, [r3, #0]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	20000000 	.word	0x20000000

080048dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048e0:	f7ff fff0 	bl	80048c4 <HAL_RCC_GetHCLKFreq>
 80048e4:	4602      	mov	r2, r0
 80048e6:	4b06      	ldr	r3, [pc, #24]	@ (8004900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	0a1b      	lsrs	r3, r3, #8
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	4904      	ldr	r1, [pc, #16]	@ (8004904 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048f2:	5ccb      	ldrb	r3, [r1, r3]
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40021000 	.word	0x40021000
 8004904:	0800d458 	.word	0x0800d458

08004908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800490c:	f7ff ffda 	bl	80048c4 <HAL_RCC_GetHCLKFreq>
 8004910:	4602      	mov	r2, r0
 8004912:	4b06      	ldr	r3, [pc, #24]	@ (800492c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	0adb      	lsrs	r3, r3, #11
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	4904      	ldr	r1, [pc, #16]	@ (8004930 <HAL_RCC_GetPCLK2Freq+0x28>)
 800491e:	5ccb      	ldrb	r3, [r1, r3]
 8004920:	f003 031f 	and.w	r3, r3, #31
 8004924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004928:	4618      	mov	r0, r3
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40021000 	.word	0x40021000
 8004930:	0800d458 	.word	0x0800d458

08004934 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800493a:	4b1e      	ldr	r3, [pc, #120]	@ (80049b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004944:	4b1b      	ldr	r3, [pc, #108]	@ (80049b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	091b      	lsrs	r3, r3, #4
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	3301      	adds	r3, #1
 8004950:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b03      	cmp	r3, #3
 8004956:	d10c      	bne.n	8004972 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004958:	4a17      	ldr	r2, [pc, #92]	@ (80049b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004960:	4a14      	ldr	r2, [pc, #80]	@ (80049b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004962:	68d2      	ldr	r2, [r2, #12]
 8004964:	0a12      	lsrs	r2, r2, #8
 8004966:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800496a:	fb02 f303 	mul.w	r3, r2, r3
 800496e:	617b      	str	r3, [r7, #20]
    break;
 8004970:	e00c      	b.n	800498c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004972:	4a11      	ldr	r2, [pc, #68]	@ (80049b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	fbb2 f3f3 	udiv	r3, r2, r3
 800497a:	4a0e      	ldr	r2, [pc, #56]	@ (80049b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800497c:	68d2      	ldr	r2, [r2, #12]
 800497e:	0a12      	lsrs	r2, r2, #8
 8004980:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004984:	fb02 f303 	mul.w	r3, r2, r3
 8004988:	617b      	str	r3, [r7, #20]
    break;
 800498a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800498c:	4b09      	ldr	r3, [pc, #36]	@ (80049b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	0e5b      	lsrs	r3, r3, #25
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	3301      	adds	r3, #1
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80049a6:	687b      	ldr	r3, [r7, #4]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	40021000 	.word	0x40021000
 80049b8:	00f42400 	.word	0x00f42400

080049bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049c4:	2300      	movs	r3, #0
 80049c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049c8:	2300      	movs	r3, #0
 80049ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 8098 	beq.w	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049da:	2300      	movs	r3, #0
 80049dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049de:	4b43      	ldr	r3, [pc, #268]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10d      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ea:	4b40      	ldr	r3, [pc, #256]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ee:	4a3f      	ldr	r2, [pc, #252]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80049f6:	4b3d      	ldr	r3, [pc, #244]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049fe:	60bb      	str	r3, [r7, #8]
 8004a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a02:	2301      	movs	r3, #1
 8004a04:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a06:	4b3a      	ldr	r3, [pc, #232]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a39      	ldr	r2, [pc, #228]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a12:	f7fd fd4f 	bl	80024b4 <HAL_GetTick>
 8004a16:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a18:	e009      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a1a:	f7fd fd4b 	bl	80024b4 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d902      	bls.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	74fb      	strb	r3, [r7, #19]
        break;
 8004a2c:	e005      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a2e:	4b30      	ldr	r3, [pc, #192]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0ef      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a3a:	7cfb      	ldrb	r3, [r7, #19]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d159      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a40:	4b2a      	ldr	r3, [pc, #168]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a4a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d01e      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d019      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a5c:	4b23      	ldr	r3, [pc, #140]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a68:	4b20      	ldr	r3, [pc, #128]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a78:	4b1c      	ldr	r3, [pc, #112]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a88:	4a18      	ldr	r2, [pc, #96]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d016      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9a:	f7fd fd0b 	bl	80024b4 <HAL_GetTick>
 8004a9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aa0:	e00b      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa2:	f7fd fd07 	bl	80024b4 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d902      	bls.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	74fb      	strb	r3, [r7, #19]
            break;
 8004ab8:	e006      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aba:	4b0c      	ldr	r3, [pc, #48]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0ec      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ac8:	7cfb      	ldrb	r3, [r7, #19]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10b      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ace:	4b07      	ldr	r3, [pc, #28]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004adc:	4903      	ldr	r1, [pc, #12]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ae4:	e008      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ae6:	7cfb      	ldrb	r3, [r7, #19]
 8004ae8:	74bb      	strb	r3, [r7, #18]
 8004aea:	e005      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004aec:	40021000 	.word	0x40021000
 8004af0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af4:	7cfb      	ldrb	r3, [r7, #19]
 8004af6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004af8:	7c7b      	ldrb	r3, [r7, #17]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d105      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afe:	4ba6      	ldr	r3, [pc, #664]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b02:	4aa5      	ldr	r2, [pc, #660]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b08:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b16:	4ba0      	ldr	r3, [pc, #640]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1c:	f023 0203 	bic.w	r2, r3, #3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	499c      	ldr	r1, [pc, #624]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b38:	4b97      	ldr	r3, [pc, #604]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3e:	f023 020c 	bic.w	r2, r3, #12
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	4994      	ldr	r1, [pc, #592]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0304 	and.w	r3, r3, #4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b5a:	4b8f      	ldr	r3, [pc, #572]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b60:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	498b      	ldr	r1, [pc, #556]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b7c:	4b86      	ldr	r3, [pc, #536]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	4983      	ldr	r1, [pc, #524]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b9e:	4b7e      	ldr	r3, [pc, #504]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	497a      	ldr	r1, [pc, #488]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bc0:	4b75      	ldr	r3, [pc, #468]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	4972      	ldr	r1, [pc, #456]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004be2:	4b6d      	ldr	r3, [pc, #436]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	4969      	ldr	r1, [pc, #420]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c04:	4b64      	ldr	r3, [pc, #400]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c0a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	4961      	ldr	r1, [pc, #388]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c26:	4b5c      	ldr	r3, [pc, #368]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c34:	4958      	ldr	r1, [pc, #352]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d015      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c48:	4b53      	ldr	r3, [pc, #332]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c56:	4950      	ldr	r1, [pc, #320]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c66:	d105      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c68:	4b4b      	ldr	r3, [pc, #300]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	4a4a      	ldr	r2, [pc, #296]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c72:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d015      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c80:	4b45      	ldr	r3, [pc, #276]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c86:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8e:	4942      	ldr	r1, [pc, #264]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c9e:	d105      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ca0:	4b3d      	ldr	r3, [pc, #244]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	4a3c      	ldr	r2, [pc, #240]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004caa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d015      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004cb8:	4b37      	ldr	r3, [pc, #220]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cbe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc6:	4934      	ldr	r1, [pc, #208]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cd6:	d105      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ce2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d015      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cf0:	4b29      	ldr	r3, [pc, #164]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cfe:	4926      	ldr	r1, [pc, #152]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d0e:	d105      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d10:	4b21      	ldr	r3, [pc, #132]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	4a20      	ldr	r2, [pc, #128]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d1a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d015      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d28:	4b1b      	ldr	r3, [pc, #108]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d36:	4918      	ldr	r1, [pc, #96]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d46:	d105      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d48:	4b13      	ldr	r3, [pc, #76]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	4a12      	ldr	r2, [pc, #72]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d015      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d60:	4b0d      	ldr	r3, [pc, #52]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d66:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d6e:	490a      	ldr	r1, [pc, #40]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d7e:	d105      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d80:	4b05      	ldr	r3, [pc, #20]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	4a04      	ldr	r2, [pc, #16]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d8a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40021000 	.word	0x40021000

08004d9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e09d      	b.n	8004eea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d108      	bne.n	8004dc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dbe:	d009      	beq.n	8004dd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	61da      	str	r2, [r3, #28]
 8004dc6:	e005      	b.n	8004dd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d106      	bne.n	8004df4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7fc fbaa 	bl	8001548 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e14:	d902      	bls.n	8004e1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	e002      	b.n	8004e22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004e2a:	d007      	beq.n	8004e3c <HAL_SPI_Init+0xa0>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e34:	d002      	beq.n	8004e3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7e:	ea42 0103 	orr.w	r1, r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e86:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	0c1b      	lsrs	r3, r3, #16
 8004e98:	f003 0204 	and.w	r2, r3, #4
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea0:	f003 0310 	and.w	r3, r3, #16
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004eb8:	ea42 0103 	orr.w	r1, r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ed8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b088      	sub	sp, #32
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	603b      	str	r3, [r7, #0]
 8004efe:	4613      	mov	r3, r2
 8004f00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_SPI_Transmit+0x22>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e15f      	b.n	80051d4 <HAL_SPI_Transmit+0x2e2>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f1c:	f7fd faca 	bl	80024b4 <HAL_GetTick>
 8004f20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f22:	88fb      	ldrh	r3, [r7, #6]
 8004f24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d002      	beq.n	8004f38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f32:	2302      	movs	r3, #2
 8004f34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f36:	e148      	b.n	80051ca <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <HAL_SPI_Transmit+0x52>
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d102      	bne.n	8004f4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f48:	e13f      	b.n	80051ca <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	88fa      	ldrh	r2, [r7, #6]
 8004f62:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	88fa      	ldrh	r2, [r7, #6]
 8004f68:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f94:	d10f      	bne.n	8004fb6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fa4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc0:	2b40      	cmp	r3, #64	@ 0x40
 8004fc2:	d007      	beq.n	8004fd4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004fdc:	d94f      	bls.n	800507e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <HAL_SPI_Transmit+0xfa>
 8004fe6:	8afb      	ldrh	r3, [r7, #22]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d142      	bne.n	8005072 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff0:	881a      	ldrh	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffc:	1c9a      	adds	r2, r3, #2
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005010:	e02f      	b.n	8005072 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b02      	cmp	r3, #2
 800501e:	d112      	bne.n	8005046 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005024:	881a      	ldrh	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005030:	1c9a      	adds	r2, r3, #2
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005044:	e015      	b.n	8005072 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005046:	f7fd fa35 	bl	80024b4 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d803      	bhi.n	800505e <HAL_SPI_Transmit+0x16c>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505c:	d102      	bne.n	8005064 <HAL_SPI_Transmit+0x172>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d106      	bne.n	8005072 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005070:	e0ab      	b.n	80051ca <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005076:	b29b      	uxth	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1ca      	bne.n	8005012 <HAL_SPI_Transmit+0x120>
 800507c:	e080      	b.n	8005180 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <HAL_SPI_Transmit+0x19a>
 8005086:	8afb      	ldrh	r3, [r7, #22]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d174      	bne.n	8005176 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005090:	b29b      	uxth	r3, r3
 8005092:	2b01      	cmp	r3, #1
 8005094:	d912      	bls.n	80050bc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509a:	881a      	ldrh	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a6:	1c9a      	adds	r2, r3, #2
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b02      	subs	r3, #2
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050ba:	e05c      	b.n	8005176 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	330c      	adds	r3, #12
 80050c6:	7812      	ldrb	r2, [r2, #0]
 80050c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050d8:	b29b      	uxth	r3, r3
 80050da:	3b01      	subs	r3, #1
 80050dc:	b29a      	uxth	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80050e2:	e048      	b.n	8005176 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d12b      	bne.n	800514a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d912      	bls.n	8005122 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005100:	881a      	ldrh	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800510c:	1c9a      	adds	r2, r3, #2
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b02      	subs	r3, #2
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005120:	e029      	b.n	8005176 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	330c      	adds	r3, #12
 800512c:	7812      	ldrb	r2, [r2, #0]
 800512e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800513e:	b29b      	uxth	r3, r3
 8005140:	3b01      	subs	r3, #1
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005148:	e015      	b.n	8005176 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800514a:	f7fd f9b3 	bl	80024b4 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d803      	bhi.n	8005162 <HAL_SPI_Transmit+0x270>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005160:	d102      	bne.n	8005168 <HAL_SPI_Transmit+0x276>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d106      	bne.n	8005176 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005174:	e029      	b.n	80051ca <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800517a:	b29b      	uxth	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1b1      	bne.n	80050e4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	6839      	ldr	r1, [r7, #0]
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 fcf9 	bl	8005b7c <SPI_EndRxTxTransaction>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2220      	movs	r2, #32
 8005194:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10a      	bne.n	80051b4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800519e:	2300      	movs	r3, #0
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	77fb      	strb	r3, [r7, #31]
 80051c0:	e003      	b.n	80051ca <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80051d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3720      	adds	r7, #32
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b088      	sub	sp, #32
 80051e0:	af02      	add	r7, sp, #8
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	603b      	str	r3, [r7, #0]
 80051e8:	4613      	mov	r3, r2
 80051ea:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d002      	beq.n	8005202 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80051fc:	2302      	movs	r3, #2
 80051fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005200:	e11a      	b.n	8005438 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800520a:	d112      	bne.n	8005232 <HAL_SPI_Receive+0x56>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10e      	bne.n	8005232 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2204      	movs	r2, #4
 8005218:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800521c:	88fa      	ldrh	r2, [r7, #6]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	4613      	mov	r3, r2
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	68b9      	ldr	r1, [r7, #8]
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 f90e 	bl	800544a <HAL_SPI_TransmitReceive>
 800522e:	4603      	mov	r3, r0
 8005230:	e107      	b.n	8005442 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <HAL_SPI_Receive+0x64>
 800523c:	2302      	movs	r3, #2
 800523e:	e100      	b.n	8005442 <HAL_SPI_Receive+0x266>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005248:	f7fd f934 	bl	80024b4 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <HAL_SPI_Receive+0x7e>
 8005254:	88fb      	ldrh	r3, [r7, #6]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d102      	bne.n	8005260 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800525e:	e0eb      	b.n	8005438 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2204      	movs	r2, #4
 8005264:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	88fa      	ldrh	r2, [r7, #6]
 8005278:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	88fa      	ldrh	r2, [r7, #6]
 8005280:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80052aa:	d908      	bls.n	80052be <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80052ba:	605a      	str	r2, [r3, #4]
 80052bc:	e007      	b.n	80052ce <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80052cc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052d6:	d10f      	bne.n	80052f8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80052f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005302:	2b40      	cmp	r3, #64	@ 0x40
 8005304:	d007      	beq.n	8005316 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005314:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800531e:	d86f      	bhi.n	8005400 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005320:	e034      	b.n	800538c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b01      	cmp	r3, #1
 800532e:	d117      	bne.n	8005360 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f103 020c 	add.w	r2, r3, #12
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533c:	7812      	ldrb	r2, [r2, #0]
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005352:	b29b      	uxth	r3, r3
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800535e:	e015      	b.n	800538c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005360:	f7fd f8a8 	bl	80024b4 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d803      	bhi.n	8005378 <HAL_SPI_Receive+0x19c>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005376:	d102      	bne.n	800537e <HAL_SPI_Receive+0x1a2>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800538a:	e055      	b.n	8005438 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005392:	b29b      	uxth	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1c4      	bne.n	8005322 <HAL_SPI_Receive+0x146>
 8005398:	e038      	b.n	800540c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d115      	bne.n	80053d4 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b2:	b292      	uxth	r2, r2
 80053b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ba:	1c9a      	adds	r2, r3, #2
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80053d2:	e015      	b.n	8005400 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053d4:	f7fd f86e 	bl	80024b4 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d803      	bhi.n	80053ec <HAL_SPI_Receive+0x210>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ea:	d102      	bne.n	80053f2 <HAL_SPI_Receive+0x216>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80053fe:	e01b      	b.n	8005438 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1c6      	bne.n	800539a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 fb5b 	bl	8005acc <SPI_EndRxTransaction>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	75fb      	strb	r3, [r7, #23]
 800542e:	e003      	b.n	8005438 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005440:	7dfb      	ldrb	r3, [r7, #23]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b08a      	sub	sp, #40	@ 0x28
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	607a      	str	r2, [r7, #4]
 8005456:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005458:	2301      	movs	r3, #1
 800545a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_SPI_TransmitReceive+0x26>
 800546c:	2302      	movs	r3, #2
 800546e:	e20a      	b.n	8005886 <HAL_SPI_TransmitReceive+0x43c>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005478:	f7fd f81c 	bl	80024b4 <HAL_GetTick>
 800547c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005484:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800548c:	887b      	ldrh	r3, [r7, #2]
 800548e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005490:	887b      	ldrh	r3, [r7, #2]
 8005492:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005494:	7efb      	ldrb	r3, [r7, #27]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d00e      	beq.n	80054b8 <HAL_SPI_TransmitReceive+0x6e>
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054a0:	d106      	bne.n	80054b0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d102      	bne.n	80054b0 <HAL_SPI_TransmitReceive+0x66>
 80054aa:	7efb      	ldrb	r3, [r7, #27]
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d003      	beq.n	80054b8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80054b0:	2302      	movs	r3, #2
 80054b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80054b6:	e1e0      	b.n	800587a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d005      	beq.n	80054ca <HAL_SPI_TransmitReceive+0x80>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <HAL_SPI_TransmitReceive+0x80>
 80054c4:	887b      	ldrh	r3, [r7, #2]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d103      	bne.n	80054d2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80054d0:	e1d3      	b.n	800587a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d003      	beq.n	80054e6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2205      	movs	r2, #5
 80054e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	887a      	ldrh	r2, [r7, #2]
 80054f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	887a      	ldrh	r2, [r7, #2]
 80054fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	887a      	ldrh	r2, [r7, #2]
 800550c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	887a      	ldrh	r2, [r7, #2]
 8005512:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005528:	d802      	bhi.n	8005530 <HAL_SPI_TransmitReceive+0xe6>
 800552a:	8a3b      	ldrh	r3, [r7, #16]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d908      	bls.n	8005542 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800553e:	605a      	str	r2, [r3, #4]
 8005540:	e007      	b.n	8005552 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005550:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800555c:	2b40      	cmp	r3, #64	@ 0x40
 800555e:	d007      	beq.n	8005570 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800556e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005578:	f240 8081 	bls.w	800567e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <HAL_SPI_TransmitReceive+0x140>
 8005584:	8a7b      	ldrh	r3, [r7, #18]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d16d      	bne.n	8005666 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558e:	881a      	ldrh	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559a:	1c9a      	adds	r2, r3, #2
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055ae:	e05a      	b.n	8005666 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d11b      	bne.n	80055f6 <HAL_SPI_TransmitReceive+0x1ac>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d016      	beq.n	80055f6 <HAL_SPI_TransmitReceive+0x1ac>
 80055c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d113      	bne.n	80055f6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d2:	881a      	ldrh	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055de:	1c9a      	adds	r2, r3, #2
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	3b01      	subs	r3, #1
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b01      	cmp	r3, #1
 8005602:	d11c      	bne.n	800563e <HAL_SPI_TransmitReceive+0x1f4>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800560a:	b29b      	uxth	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d016      	beq.n	800563e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561a:	b292      	uxth	r2, r2
 800561c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005622:	1c9a      	adds	r2, r3, #2
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800563a:	2301      	movs	r3, #1
 800563c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800563e:	f7fc ff39 	bl	80024b4 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800564a:	429a      	cmp	r2, r3
 800564c:	d80b      	bhi.n	8005666 <HAL_SPI_TransmitReceive+0x21c>
 800564e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005654:	d007      	beq.n	8005666 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005664:	e109      	b.n	800587a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d19f      	bne.n	80055b0 <HAL_SPI_TransmitReceive+0x166>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005676:	b29b      	uxth	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d199      	bne.n	80055b0 <HAL_SPI_TransmitReceive+0x166>
 800567c:	e0e3      	b.n	8005846 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_SPI_TransmitReceive+0x244>
 8005686:	8a7b      	ldrh	r3, [r7, #18]
 8005688:	2b01      	cmp	r3, #1
 800568a:	f040 80cf 	bne.w	800582c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b01      	cmp	r3, #1
 8005696:	d912      	bls.n	80056be <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569c:	881a      	ldrh	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a8:	1c9a      	adds	r2, r3, #2
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b02      	subs	r3, #2
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056bc:	e0b6      	b.n	800582c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	330c      	adds	r3, #12
 80056c8:	7812      	ldrb	r2, [r2, #0]
 80056ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056da:	b29b      	uxth	r3, r3
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056e4:	e0a2      	b.n	800582c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d134      	bne.n	800575e <HAL_SPI_TransmitReceive+0x314>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d02f      	beq.n	800575e <HAL_SPI_TransmitReceive+0x314>
 80056fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005700:	2b01      	cmp	r3, #1
 8005702:	d12c      	bne.n	800575e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005708:	b29b      	uxth	r3, r3
 800570a:	2b01      	cmp	r3, #1
 800570c:	d912      	bls.n	8005734 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005712:	881a      	ldrh	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571e:	1c9a      	adds	r2, r3, #2
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005728:	b29b      	uxth	r3, r3
 800572a:	3b02      	subs	r3, #2
 800572c:	b29a      	uxth	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005732:	e012      	b.n	800575a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	330c      	adds	r3, #12
 800573e:	7812      	ldrb	r2, [r2, #0]
 8005740:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b01      	cmp	r3, #1
 800576a:	d148      	bne.n	80057fe <HAL_SPI_TransmitReceive+0x3b4>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d042      	beq.n	80057fe <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800577e:	b29b      	uxth	r3, r3
 8005780:	2b01      	cmp	r3, #1
 8005782:	d923      	bls.n	80057cc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578e:	b292      	uxth	r2, r2
 8005790:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005796:	1c9a      	adds	r2, r3, #2
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	3b02      	subs	r3, #2
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d81f      	bhi.n	80057fa <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80057c8:	605a      	str	r2, [r3, #4]
 80057ca:	e016      	b.n	80057fa <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f103 020c 	add.w	r2, r3, #12
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d8:	7812      	ldrb	r2, [r2, #0]
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057fa:	2301      	movs	r3, #1
 80057fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057fe:	f7fc fe59 	bl	80024b4 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800580a:	429a      	cmp	r2, r3
 800580c:	d803      	bhi.n	8005816 <HAL_SPI_TransmitReceive+0x3cc>
 800580e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005814:	d102      	bne.n	800581c <HAL_SPI_TransmitReceive+0x3d2>
 8005816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005818:	2b00      	cmp	r3, #0
 800581a:	d107      	bne.n	800582c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800582a:	e026      	b.n	800587a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	f47f af57 	bne.w	80056e6 <HAL_SPI_TransmitReceive+0x29c>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	f47f af50 	bne.w	80056e6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 f996 	bl	8005b7c <SPI_EndRxTxTransaction>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d005      	beq.n	8005862 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005870:	e003      	b.n	800587a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005882:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005886:	4618      	mov	r0, r3
 8005888:	3728      	adds	r7, #40	@ 0x28
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	603b      	str	r3, [r7, #0]
 800589c:	4613      	mov	r3, r2
 800589e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058a0:	f7fc fe08 	bl	80024b4 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a8:	1a9b      	subs	r3, r3, r2
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	4413      	add	r3, r2
 80058ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058b0:	f7fc fe00 	bl	80024b4 <HAL_GetTick>
 80058b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058b6:	4b39      	ldr	r3, [pc, #228]	@ (800599c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	015b      	lsls	r3, r3, #5
 80058bc:	0d1b      	lsrs	r3, r3, #20
 80058be:	69fa      	ldr	r2, [r7, #28]
 80058c0:	fb02 f303 	mul.w	r3, r2, r3
 80058c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058c6:	e054      	b.n	8005972 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ce:	d050      	beq.n	8005972 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058d0:	f7fc fdf0 	bl	80024b4 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	69fa      	ldr	r2, [r7, #28]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d902      	bls.n	80058e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d13d      	bne.n	8005962 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80058f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058fe:	d111      	bne.n	8005924 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005908:	d004      	beq.n	8005914 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005912:	d107      	bne.n	8005924 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005922:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005928:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800592c:	d10f      	bne.n	800594e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800594c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e017      	b.n	8005992 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	3b01      	subs	r3, #1
 8005970:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4013      	ands	r3, r2
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	429a      	cmp	r2, r3
 8005980:	bf0c      	ite	eq
 8005982:	2301      	moveq	r3, #1
 8005984:	2300      	movne	r3, #0
 8005986:	b2db      	uxtb	r3, r3
 8005988:	461a      	mov	r2, r3
 800598a:	79fb      	ldrb	r3, [r7, #7]
 800598c:	429a      	cmp	r2, r3
 800598e:	d19b      	bne.n	80058c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3720      	adds	r7, #32
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20000000 	.word	0x20000000

080059a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08a      	sub	sp, #40	@ 0x28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80059b2:	f7fc fd7f 	bl	80024b4 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ba:	1a9b      	subs	r3, r3, r2
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	4413      	add	r3, r2
 80059c0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80059c2:	f7fc fd77 	bl	80024b4 <HAL_GetTick>
 80059c6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	330c      	adds	r3, #12
 80059ce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80059d0:	4b3d      	ldr	r3, [pc, #244]	@ (8005ac8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	4613      	mov	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	00da      	lsls	r2, r3, #3
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	0d1b      	lsrs	r3, r3, #20
 80059e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e2:	fb02 f303 	mul.w	r3, r2, r3
 80059e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80059e8:	e060      	b.n	8005aac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80059f0:	d107      	bne.n	8005a02 <SPI_WaitFifoStateUntilTimeout+0x62>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d104      	bne.n	8005a02 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a08:	d050      	beq.n	8005aac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a0a:	f7fc fd53 	bl	80024b4 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d902      	bls.n	8005a20 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d13d      	bne.n	8005a9c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a38:	d111      	bne.n	8005a5e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a42:	d004      	beq.n	8005a4e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a4c:	d107      	bne.n	8005a5e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a66:	d10f      	bne.n	8005a88 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e010      	b.n	8005abe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d196      	bne.n	80059ea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3728      	adds	r7, #40	@ 0x28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000000 	.word	0x20000000

08005acc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ae0:	d111      	bne.n	8005b06 <SPI_EndRxTransaction+0x3a>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aea:	d004      	beq.n	8005af6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005af4:	d107      	bne.n	8005b06 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b04:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	2180      	movs	r1, #128	@ 0x80
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f7ff febd 	bl	8005890 <SPI_WaitFlagStateUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d007      	beq.n	8005b2c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b20:	f043 0220 	orr.w	r2, r3, #32
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e023      	b.n	8005b74 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b34:	d11d      	bne.n	8005b72 <SPI_EndRxTransaction+0xa6>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b3e:	d004      	beq.n	8005b4a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b48:	d113      	bne.n	8005b72 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7ff ff22 	bl	80059a0 <SPI_WaitFifoStateUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d007      	beq.n	8005b72 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b66:	f043 0220 	orr.w	r2, r3, #32
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e000      	b.n	8005b74 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af02      	add	r7, sp, #8
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f7ff ff03 	bl	80059a0 <SPI_WaitFifoStateUntilTimeout>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d007      	beq.n	8005bb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ba4:	f043 0220 	orr.w	r2, r3, #32
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e027      	b.n	8005c00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	2180      	movs	r1, #128	@ 0x80
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f7ff fe68 	bl	8005890 <SPI_WaitFlagStateUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d007      	beq.n	8005bd6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bca:	f043 0220 	orr.w	r2, r3, #32
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e014      	b.n	8005c00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f7ff fedc 	bl	80059a0 <SPI_WaitFifoStateUntilTimeout>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d007      	beq.n	8005bfe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bf2:	f043 0220 	orr.w	r2, r3, #32
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e000      	b.n	8005c00 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e049      	b.n	8005cae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7fc f910 	bl	8001e54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f000 faf0 	bl	800622c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d109      	bne.n	8005cdc <HAL_TIM_PWM_Start+0x24>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	bf14      	ite	ne
 8005cd4:	2301      	movne	r3, #1
 8005cd6:	2300      	moveq	r3, #0
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	e03c      	b.n	8005d56 <HAL_TIM_PWM_Start+0x9e>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d109      	bne.n	8005cf6 <HAL_TIM_PWM_Start+0x3e>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	bf14      	ite	ne
 8005cee:	2301      	movne	r3, #1
 8005cf0:	2300      	moveq	r3, #0
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	e02f      	b.n	8005d56 <HAL_TIM_PWM_Start+0x9e>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d109      	bne.n	8005d10 <HAL_TIM_PWM_Start+0x58>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	bf14      	ite	ne
 8005d08:	2301      	movne	r3, #1
 8005d0a:	2300      	moveq	r3, #0
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	e022      	b.n	8005d56 <HAL_TIM_PWM_Start+0x9e>
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2b0c      	cmp	r3, #12
 8005d14:	d109      	bne.n	8005d2a <HAL_TIM_PWM_Start+0x72>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	bf14      	ite	ne
 8005d22:	2301      	movne	r3, #1
 8005d24:	2300      	moveq	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	e015      	b.n	8005d56 <HAL_TIM_PWM_Start+0x9e>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b10      	cmp	r3, #16
 8005d2e:	d109      	bne.n	8005d44 <HAL_TIM_PWM_Start+0x8c>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	bf14      	ite	ne
 8005d3c:	2301      	movne	r3, #1
 8005d3e:	2300      	moveq	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	e008      	b.n	8005d56 <HAL_TIM_PWM_Start+0x9e>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	bf14      	ite	ne
 8005d50:	2301      	movne	r3, #1
 8005d52:	2300      	moveq	r3, #0
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e097      	b.n	8005e8e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d104      	bne.n	8005d6e <HAL_TIM_PWM_Start+0xb6>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d6c:	e023      	b.n	8005db6 <HAL_TIM_PWM_Start+0xfe>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d104      	bne.n	8005d7e <HAL_TIM_PWM_Start+0xc6>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d7c:	e01b      	b.n	8005db6 <HAL_TIM_PWM_Start+0xfe>
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	d104      	bne.n	8005d8e <HAL_TIM_PWM_Start+0xd6>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d8c:	e013      	b.n	8005db6 <HAL_TIM_PWM_Start+0xfe>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b0c      	cmp	r3, #12
 8005d92:	d104      	bne.n	8005d9e <HAL_TIM_PWM_Start+0xe6>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d9c:	e00b      	b.n	8005db6 <HAL_TIM_PWM_Start+0xfe>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b10      	cmp	r3, #16
 8005da2:	d104      	bne.n	8005dae <HAL_TIM_PWM_Start+0xf6>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dac:	e003      	b.n	8005db6 <HAL_TIM_PWM_Start+0xfe>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2202      	movs	r2, #2
 8005db2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	6839      	ldr	r1, [r7, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fdc6 	bl	8006950 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a33      	ldr	r2, [pc, #204]	@ (8005e98 <HAL_TIM_PWM_Start+0x1e0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d013      	beq.n	8005df6 <HAL_TIM_PWM_Start+0x13e>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a32      	ldr	r2, [pc, #200]	@ (8005e9c <HAL_TIM_PWM_Start+0x1e4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00e      	beq.n	8005df6 <HAL_TIM_PWM_Start+0x13e>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a30      	ldr	r2, [pc, #192]	@ (8005ea0 <HAL_TIM_PWM_Start+0x1e8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d009      	beq.n	8005df6 <HAL_TIM_PWM_Start+0x13e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a2f      	ldr	r2, [pc, #188]	@ (8005ea4 <HAL_TIM_PWM_Start+0x1ec>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d004      	beq.n	8005df6 <HAL_TIM_PWM_Start+0x13e>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a2d      	ldr	r2, [pc, #180]	@ (8005ea8 <HAL_TIM_PWM_Start+0x1f0>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d101      	bne.n	8005dfa <HAL_TIM_PWM_Start+0x142>
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <HAL_TIM_PWM_Start+0x144>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d007      	beq.n	8005e10 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e0e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a20      	ldr	r2, [pc, #128]	@ (8005e98 <HAL_TIM_PWM_Start+0x1e0>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d018      	beq.n	8005e4c <HAL_TIM_PWM_Start+0x194>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e22:	d013      	beq.n	8005e4c <HAL_TIM_PWM_Start+0x194>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a20      	ldr	r2, [pc, #128]	@ (8005eac <HAL_TIM_PWM_Start+0x1f4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d00e      	beq.n	8005e4c <HAL_TIM_PWM_Start+0x194>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a1f      	ldr	r2, [pc, #124]	@ (8005eb0 <HAL_TIM_PWM_Start+0x1f8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d009      	beq.n	8005e4c <HAL_TIM_PWM_Start+0x194>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a17      	ldr	r2, [pc, #92]	@ (8005e9c <HAL_TIM_PWM_Start+0x1e4>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d004      	beq.n	8005e4c <HAL_TIM_PWM_Start+0x194>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a16      	ldr	r2, [pc, #88]	@ (8005ea0 <HAL_TIM_PWM_Start+0x1e8>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d115      	bne.n	8005e78 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689a      	ldr	r2, [r3, #8]
 8005e52:	4b18      	ldr	r3, [pc, #96]	@ (8005eb4 <HAL_TIM_PWM_Start+0x1fc>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2b06      	cmp	r3, #6
 8005e5c:	d015      	beq.n	8005e8a <HAL_TIM_PWM_Start+0x1d2>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e64:	d011      	beq.n	8005e8a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0201 	orr.w	r2, r2, #1
 8005e74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e76:	e008      	b.n	8005e8a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0201 	orr.w	r2, r2, #1
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	e000      	b.n	8005e8c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	40012c00 	.word	0x40012c00
 8005e9c:	40013400 	.word	0x40013400
 8005ea0:	40014000 	.word	0x40014000
 8005ea4:	40014400 	.word	0x40014400
 8005ea8:	40014800 	.word	0x40014800
 8005eac:	40000400 	.word	0x40000400
 8005eb0:	40000800 	.word	0x40000800
 8005eb4:	00010007 	.word	0x00010007

08005eb8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e097      	b.n	8005ffc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d106      	bne.n	8005ee6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7fc f821 	bl	8001f28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005efc:	f023 0307 	bic.w	r3, r3, #7
 8005f00:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	3304      	adds	r3, #4
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	f000 f98d 	bl	800622c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f3a:	f023 0303 	bic.w	r3, r3, #3
 8005f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	021b      	lsls	r3, r3, #8
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005f58:	f023 030c 	bic.w	r3, r3, #12
 8005f5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	021b      	lsls	r3, r3, #8
 8005f74:	4313      	orrs	r3, r2
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	011a      	lsls	r2, r3, #4
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	031b      	lsls	r3, r3, #12
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005f96:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005f9e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	4313      	orrs	r3, r2
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006010:	2300      	movs	r3, #0
 8006012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800601e:	2302      	movs	r3, #2
 8006020:	e0ff      	b.n	8006222 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b14      	cmp	r3, #20
 800602e:	f200 80f0 	bhi.w	8006212 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006032:	a201      	add	r2, pc, #4	@ (adr r2, 8006038 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006038:	0800608d 	.word	0x0800608d
 800603c:	08006213 	.word	0x08006213
 8006040:	08006213 	.word	0x08006213
 8006044:	08006213 	.word	0x08006213
 8006048:	080060cd 	.word	0x080060cd
 800604c:	08006213 	.word	0x08006213
 8006050:	08006213 	.word	0x08006213
 8006054:	08006213 	.word	0x08006213
 8006058:	0800610f 	.word	0x0800610f
 800605c:	08006213 	.word	0x08006213
 8006060:	08006213 	.word	0x08006213
 8006064:	08006213 	.word	0x08006213
 8006068:	0800614f 	.word	0x0800614f
 800606c:	08006213 	.word	0x08006213
 8006070:	08006213 	.word	0x08006213
 8006074:	08006213 	.word	0x08006213
 8006078:	08006191 	.word	0x08006191
 800607c:	08006213 	.word	0x08006213
 8006080:	08006213 	.word	0x08006213
 8006084:	08006213 	.word	0x08006213
 8006088:	080061d1 	.word	0x080061d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68b9      	ldr	r1, [r7, #8]
 8006092:	4618      	mov	r0, r3
 8006094:	f000 f966 	bl	8006364 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699a      	ldr	r2, [r3, #24]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0208 	orr.w	r2, r2, #8
 80060a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	699a      	ldr	r2, [r3, #24]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0204 	bic.w	r2, r2, #4
 80060b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6999      	ldr	r1, [r3, #24]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	691a      	ldr	r2, [r3, #16]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	619a      	str	r2, [r3, #24]
      break;
 80060ca:	e0a5      	b.n	8006218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68b9      	ldr	r1, [r7, #8]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 f9d6 	bl	8006484 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	699a      	ldr	r2, [r3, #24]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6999      	ldr	r1, [r3, #24]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	021a      	lsls	r2, r3, #8
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	619a      	str	r2, [r3, #24]
      break;
 800610c:	e084      	b.n	8006218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68b9      	ldr	r1, [r7, #8]
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fa3f 	bl	8006598 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69da      	ldr	r2, [r3, #28]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0208 	orr.w	r2, r2, #8
 8006128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69da      	ldr	r2, [r3, #28]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0204 	bic.w	r2, r2, #4
 8006138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69d9      	ldr	r1, [r3, #28]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	61da      	str	r2, [r3, #28]
      break;
 800614c:	e064      	b.n	8006218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68b9      	ldr	r1, [r7, #8]
 8006154:	4618      	mov	r0, r3
 8006156:	f000 faa7 	bl	80066a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69da      	ldr	r2, [r3, #28]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	69da      	ldr	r2, [r3, #28]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69d9      	ldr	r1, [r3, #28]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	021a      	lsls	r2, r3, #8
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	61da      	str	r2, [r3, #28]
      break;
 800618e:	e043      	b.n	8006218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68b9      	ldr	r1, [r7, #8]
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fb10 	bl	80067bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0208 	orr.w	r2, r2, #8
 80061aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0204 	bic.w	r2, r2, #4
 80061ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	691a      	ldr	r2, [r3, #16]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80061ce:	e023      	b.n	8006218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fb54 	bl	8006884 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	021a      	lsls	r2, r3, #8
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006210:	e002      	b.n	8006218 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	75fb      	strb	r3, [r7, #23]
      break;
 8006216:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006220:	7dfb      	ldrb	r3, [r7, #23]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop

0800622c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a42      	ldr	r2, [pc, #264]	@ (8006348 <TIM_Base_SetConfig+0x11c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00f      	beq.n	8006264 <TIM_Base_SetConfig+0x38>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800624a:	d00b      	beq.n	8006264 <TIM_Base_SetConfig+0x38>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a3f      	ldr	r2, [pc, #252]	@ (800634c <TIM_Base_SetConfig+0x120>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d007      	beq.n	8006264 <TIM_Base_SetConfig+0x38>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a3e      	ldr	r2, [pc, #248]	@ (8006350 <TIM_Base_SetConfig+0x124>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d003      	beq.n	8006264 <TIM_Base_SetConfig+0x38>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a3d      	ldr	r2, [pc, #244]	@ (8006354 <TIM_Base_SetConfig+0x128>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d108      	bne.n	8006276 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800626a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a33      	ldr	r2, [pc, #204]	@ (8006348 <TIM_Base_SetConfig+0x11c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d01b      	beq.n	80062b6 <TIM_Base_SetConfig+0x8a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006284:	d017      	beq.n	80062b6 <TIM_Base_SetConfig+0x8a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a30      	ldr	r2, [pc, #192]	@ (800634c <TIM_Base_SetConfig+0x120>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d013      	beq.n	80062b6 <TIM_Base_SetConfig+0x8a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a2f      	ldr	r2, [pc, #188]	@ (8006350 <TIM_Base_SetConfig+0x124>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d00f      	beq.n	80062b6 <TIM_Base_SetConfig+0x8a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a2e      	ldr	r2, [pc, #184]	@ (8006354 <TIM_Base_SetConfig+0x128>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d00b      	beq.n	80062b6 <TIM_Base_SetConfig+0x8a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a2d      	ldr	r2, [pc, #180]	@ (8006358 <TIM_Base_SetConfig+0x12c>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d007      	beq.n	80062b6 <TIM_Base_SetConfig+0x8a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a2c      	ldr	r2, [pc, #176]	@ (800635c <TIM_Base_SetConfig+0x130>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d003      	beq.n	80062b6 <TIM_Base_SetConfig+0x8a>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a2b      	ldr	r2, [pc, #172]	@ (8006360 <TIM_Base_SetConfig+0x134>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d108      	bne.n	80062c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a16      	ldr	r2, [pc, #88]	@ (8006348 <TIM_Base_SetConfig+0x11c>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d00f      	beq.n	8006314 <TIM_Base_SetConfig+0xe8>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a17      	ldr	r2, [pc, #92]	@ (8006354 <TIM_Base_SetConfig+0x128>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00b      	beq.n	8006314 <TIM_Base_SetConfig+0xe8>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a16      	ldr	r2, [pc, #88]	@ (8006358 <TIM_Base_SetConfig+0x12c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d007      	beq.n	8006314 <TIM_Base_SetConfig+0xe8>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a15      	ldr	r2, [pc, #84]	@ (800635c <TIM_Base_SetConfig+0x130>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d003      	beq.n	8006314 <TIM_Base_SetConfig+0xe8>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a14      	ldr	r2, [pc, #80]	@ (8006360 <TIM_Base_SetConfig+0x134>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d103      	bne.n	800631c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b01      	cmp	r3, #1
 800632c:	d105      	bne.n	800633a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f023 0201 	bic.w	r2, r3, #1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	611a      	str	r2, [r3, #16]
  }
}
 800633a:	bf00      	nop
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	40012c00 	.word	0x40012c00
 800634c:	40000400 	.word	0x40000400
 8006350:	40000800 	.word	0x40000800
 8006354:	40013400 	.word	0x40013400
 8006358:	40014000 	.word	0x40014000
 800635c:	40014400 	.word	0x40014400
 8006360:	40014800 	.word	0x40014800

08006364 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006364:	b480      	push	{r7}
 8006366:	b087      	sub	sp, #28
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	f023 0201 	bic.w	r2, r3, #1
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f023 0303 	bic.w	r3, r3, #3
 800639e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f023 0302 	bic.w	r3, r3, #2
 80063b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a2c      	ldr	r2, [pc, #176]	@ (8006470 <TIM_OC1_SetConfig+0x10c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d00f      	beq.n	80063e4 <TIM_OC1_SetConfig+0x80>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a2b      	ldr	r2, [pc, #172]	@ (8006474 <TIM_OC1_SetConfig+0x110>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00b      	beq.n	80063e4 <TIM_OC1_SetConfig+0x80>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a2a      	ldr	r2, [pc, #168]	@ (8006478 <TIM_OC1_SetConfig+0x114>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d007      	beq.n	80063e4 <TIM_OC1_SetConfig+0x80>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a29      	ldr	r2, [pc, #164]	@ (800647c <TIM_OC1_SetConfig+0x118>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d003      	beq.n	80063e4 <TIM_OC1_SetConfig+0x80>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a28      	ldr	r2, [pc, #160]	@ (8006480 <TIM_OC1_SetConfig+0x11c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d10c      	bne.n	80063fe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f023 0308 	bic.w	r3, r3, #8
 80063ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f023 0304 	bic.w	r3, r3, #4
 80063fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a1b      	ldr	r2, [pc, #108]	@ (8006470 <TIM_OC1_SetConfig+0x10c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00f      	beq.n	8006426 <TIM_OC1_SetConfig+0xc2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a1a      	ldr	r2, [pc, #104]	@ (8006474 <TIM_OC1_SetConfig+0x110>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00b      	beq.n	8006426 <TIM_OC1_SetConfig+0xc2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a19      	ldr	r2, [pc, #100]	@ (8006478 <TIM_OC1_SetConfig+0x114>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d007      	beq.n	8006426 <TIM_OC1_SetConfig+0xc2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a18      	ldr	r2, [pc, #96]	@ (800647c <TIM_OC1_SetConfig+0x118>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d003      	beq.n	8006426 <TIM_OC1_SetConfig+0xc2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a17      	ldr	r2, [pc, #92]	@ (8006480 <TIM_OC1_SetConfig+0x11c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d111      	bne.n	800644a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800642c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4313      	orrs	r3, r2
 800643e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	4313      	orrs	r3, r2
 8006448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	621a      	str	r2, [r3, #32]
}
 8006464:	bf00      	nop
 8006466:	371c      	adds	r7, #28
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	40012c00 	.word	0x40012c00
 8006474:	40013400 	.word	0x40013400
 8006478:	40014000 	.word	0x40014000
 800647c:	40014400 	.word	0x40014400
 8006480:	40014800 	.word	0x40014800

08006484 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a1b      	ldr	r3, [r3, #32]
 8006498:	f023 0210 	bic.w	r2, r3, #16
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f023 0320 	bic.w	r3, r3, #32
 80064d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a28      	ldr	r2, [pc, #160]	@ (8006584 <TIM_OC2_SetConfig+0x100>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d003      	beq.n	80064f0 <TIM_OC2_SetConfig+0x6c>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a27      	ldr	r2, [pc, #156]	@ (8006588 <TIM_OC2_SetConfig+0x104>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d10d      	bne.n	800650c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800650a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a1d      	ldr	r2, [pc, #116]	@ (8006584 <TIM_OC2_SetConfig+0x100>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d00f      	beq.n	8006534 <TIM_OC2_SetConfig+0xb0>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a1c      	ldr	r2, [pc, #112]	@ (8006588 <TIM_OC2_SetConfig+0x104>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d00b      	beq.n	8006534 <TIM_OC2_SetConfig+0xb0>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a1b      	ldr	r2, [pc, #108]	@ (800658c <TIM_OC2_SetConfig+0x108>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d007      	beq.n	8006534 <TIM_OC2_SetConfig+0xb0>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a1a      	ldr	r2, [pc, #104]	@ (8006590 <TIM_OC2_SetConfig+0x10c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d003      	beq.n	8006534 <TIM_OC2_SetConfig+0xb0>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a19      	ldr	r2, [pc, #100]	@ (8006594 <TIM_OC2_SetConfig+0x110>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d113      	bne.n	800655c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800653a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006542:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4313      	orrs	r3, r2
 800654e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	621a      	str	r2, [r3, #32]
}
 8006576:	bf00      	nop
 8006578:	371c      	adds	r7, #28
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	40012c00 	.word	0x40012c00
 8006588:	40013400 	.word	0x40013400
 800658c:	40014000 	.word	0x40014000
 8006590:	40014400 	.word	0x40014400
 8006594:	40014800 	.word	0x40014800

08006598 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f023 0303 	bic.w	r3, r3, #3
 80065d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	021b      	lsls	r3, r3, #8
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a27      	ldr	r2, [pc, #156]	@ (8006694 <TIM_OC3_SetConfig+0xfc>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d003      	beq.n	8006602 <TIM_OC3_SetConfig+0x6a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a26      	ldr	r2, [pc, #152]	@ (8006698 <TIM_OC3_SetConfig+0x100>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d10d      	bne.n	800661e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	021b      	lsls	r3, r3, #8
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	4313      	orrs	r3, r2
 8006614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800661c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a1c      	ldr	r2, [pc, #112]	@ (8006694 <TIM_OC3_SetConfig+0xfc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00f      	beq.n	8006646 <TIM_OC3_SetConfig+0xae>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a1b      	ldr	r2, [pc, #108]	@ (8006698 <TIM_OC3_SetConfig+0x100>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00b      	beq.n	8006646 <TIM_OC3_SetConfig+0xae>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a1a      	ldr	r2, [pc, #104]	@ (800669c <TIM_OC3_SetConfig+0x104>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d007      	beq.n	8006646 <TIM_OC3_SetConfig+0xae>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a19      	ldr	r2, [pc, #100]	@ (80066a0 <TIM_OC3_SetConfig+0x108>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d003      	beq.n	8006646 <TIM_OC3_SetConfig+0xae>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a18      	ldr	r2, [pc, #96]	@ (80066a4 <TIM_OC3_SetConfig+0x10c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d113      	bne.n	800666e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800664c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	4313      	orrs	r3, r2
 8006660:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	011b      	lsls	r3, r3, #4
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	4313      	orrs	r3, r2
 800666c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	621a      	str	r2, [r3, #32]
}
 8006688:	bf00      	nop
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	40012c00 	.word	0x40012c00
 8006698:	40013400 	.word	0x40013400
 800669c:	40014000 	.word	0x40014000
 80066a0:	40014400 	.word	0x40014400
 80066a4:	40014800 	.word	0x40014800

080066a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	021b      	lsls	r3, r3, #8
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	031b      	lsls	r3, r3, #12
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4313      	orrs	r3, r2
 8006702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a28      	ldr	r2, [pc, #160]	@ (80067a8 <TIM_OC4_SetConfig+0x100>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d003      	beq.n	8006714 <TIM_OC4_SetConfig+0x6c>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a27      	ldr	r2, [pc, #156]	@ (80067ac <TIM_OC4_SetConfig+0x104>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d10d      	bne.n	8006730 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800671a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	031b      	lsls	r3, r3, #12
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4313      	orrs	r3, r2
 8006726:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800672e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a1d      	ldr	r2, [pc, #116]	@ (80067a8 <TIM_OC4_SetConfig+0x100>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d00f      	beq.n	8006758 <TIM_OC4_SetConfig+0xb0>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a1c      	ldr	r2, [pc, #112]	@ (80067ac <TIM_OC4_SetConfig+0x104>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d00b      	beq.n	8006758 <TIM_OC4_SetConfig+0xb0>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a1b      	ldr	r2, [pc, #108]	@ (80067b0 <TIM_OC4_SetConfig+0x108>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d007      	beq.n	8006758 <TIM_OC4_SetConfig+0xb0>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a1a      	ldr	r2, [pc, #104]	@ (80067b4 <TIM_OC4_SetConfig+0x10c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d003      	beq.n	8006758 <TIM_OC4_SetConfig+0xb0>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a19      	ldr	r2, [pc, #100]	@ (80067b8 <TIM_OC4_SetConfig+0x110>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d113      	bne.n	8006780 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800675e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006766:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	019b      	lsls	r3, r3, #6
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	4313      	orrs	r3, r2
 8006772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	019b      	lsls	r3, r3, #6
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	4313      	orrs	r3, r2
 800677e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	621a      	str	r2, [r3, #32]
}
 800679a:	bf00      	nop
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	40012c00 	.word	0x40012c00
 80067ac:	40013400 	.word	0x40013400
 80067b0:	40014000 	.word	0x40014000
 80067b4:	40014400 	.word	0x40014400
 80067b8:	40014800 	.word	0x40014800

080067bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006800:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	041b      	lsls	r3, r3, #16
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	4313      	orrs	r3, r2
 800680c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a17      	ldr	r2, [pc, #92]	@ (8006870 <TIM_OC5_SetConfig+0xb4>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00f      	beq.n	8006836 <TIM_OC5_SetConfig+0x7a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a16      	ldr	r2, [pc, #88]	@ (8006874 <TIM_OC5_SetConfig+0xb8>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d00b      	beq.n	8006836 <TIM_OC5_SetConfig+0x7a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a15      	ldr	r2, [pc, #84]	@ (8006878 <TIM_OC5_SetConfig+0xbc>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d007      	beq.n	8006836 <TIM_OC5_SetConfig+0x7a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a14      	ldr	r2, [pc, #80]	@ (800687c <TIM_OC5_SetConfig+0xc0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d003      	beq.n	8006836 <TIM_OC5_SetConfig+0x7a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a13      	ldr	r2, [pc, #76]	@ (8006880 <TIM_OC5_SetConfig+0xc4>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d109      	bne.n	800684a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800683c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	021b      	lsls	r3, r3, #8
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	4313      	orrs	r3, r2
 8006848:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	621a      	str	r2, [r3, #32]
}
 8006864:	bf00      	nop
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	40012c00 	.word	0x40012c00
 8006874:	40013400 	.word	0x40013400
 8006878:	40014000 	.word	0x40014000
 800687c:	40014400 	.word	0x40014400
 8006880:	40014800 	.word	0x40014800

08006884 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80068ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	051b      	lsls	r3, r3, #20
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a18      	ldr	r2, [pc, #96]	@ (800693c <TIM_OC6_SetConfig+0xb8>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d00f      	beq.n	8006900 <TIM_OC6_SetConfig+0x7c>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a17      	ldr	r2, [pc, #92]	@ (8006940 <TIM_OC6_SetConfig+0xbc>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d00b      	beq.n	8006900 <TIM_OC6_SetConfig+0x7c>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a16      	ldr	r2, [pc, #88]	@ (8006944 <TIM_OC6_SetConfig+0xc0>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d007      	beq.n	8006900 <TIM_OC6_SetConfig+0x7c>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a15      	ldr	r2, [pc, #84]	@ (8006948 <TIM_OC6_SetConfig+0xc4>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d003      	beq.n	8006900 <TIM_OC6_SetConfig+0x7c>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a14      	ldr	r2, [pc, #80]	@ (800694c <TIM_OC6_SetConfig+0xc8>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d109      	bne.n	8006914 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006906:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	029b      	lsls	r3, r3, #10
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	4313      	orrs	r3, r2
 8006912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	621a      	str	r2, [r3, #32]
}
 800692e:	bf00      	nop
 8006930:	371c      	adds	r7, #28
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	40012c00 	.word	0x40012c00
 8006940:	40013400 	.word	0x40013400
 8006944:	40014000 	.word	0x40014000
 8006948:	40014400 	.word	0x40014400
 800694c:	40014800 	.word	0x40014800

08006950 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f003 031f 	and.w	r3, r3, #31
 8006962:	2201      	movs	r2, #1
 8006964:	fa02 f303 	lsl.w	r3, r2, r3
 8006968:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6a1a      	ldr	r2, [r3, #32]
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	43db      	mvns	r3, r3
 8006972:	401a      	ands	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a1a      	ldr	r2, [r3, #32]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f003 031f 	and.w	r3, r3, #31
 8006982:	6879      	ldr	r1, [r7, #4]
 8006984:	fa01 f303 	lsl.w	r3, r1, r3
 8006988:	431a      	orrs	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	621a      	str	r2, [r3, #32]
}
 800698e:	bf00      	nop
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
	...

0800699c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d101      	bne.n	80069b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069b0:	2302      	movs	r3, #2
 80069b2:	e065      	b.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a2c      	ldr	r2, [pc, #176]	@ (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d004      	beq.n	80069e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d108      	bne.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80069ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006a00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d018      	beq.n	8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a2a:	d013      	beq.n	8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a18      	ldr	r2, [pc, #96]	@ (8006a94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00e      	beq.n	8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a17      	ldr	r2, [pc, #92]	@ (8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d009      	beq.n	8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a12      	ldr	r2, [pc, #72]	@ (8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d004      	beq.n	8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a13      	ldr	r2, [pc, #76]	@ (8006a9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d10c      	bne.n	8006a6e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	40012c00 	.word	0x40012c00
 8006a90:	40013400 	.word	0x40013400
 8006a94:	40000400 	.word	0x40000400
 8006a98:	40000800 	.word	0x40000800
 8006a9c:	40014000 	.word	0x40014000

08006aa0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e073      	b.n	8006ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	041b      	lsls	r3, r3, #16
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a19      	ldr	r2, [pc, #100]	@ (8006bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d004      	beq.n	8006b58 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a18      	ldr	r2, [pc, #96]	@ (8006bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d11c      	bne.n	8006b92 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b62:	051b      	lsls	r3, r3, #20
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	40012c00 	.word	0x40012c00
 8006bb4:	40013400 	.word	0x40013400

08006bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e042      	b.n	8006c50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d106      	bne.n	8006be2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7fb fb15 	bl	800220c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2224      	movs	r2, #36	@ 0x24
 8006be6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f022 0201 	bic.w	r2, r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d002      	beq.n	8006c08 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fb82 	bl	800730c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f8b3 	bl	8006d74 <UART_SetConfig>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d101      	bne.n	8006c18 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e01b      	b.n	8006c50 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689a      	ldr	r2, [r3, #8]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f042 0201 	orr.w	r2, r2, #1
 8006c46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fc01 	bl	8007450 <UART_CheckIdleState>
 8006c4e:	4603      	mov	r3, r0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08a      	sub	sp, #40	@ 0x28
 8006c5c:	af02      	add	r7, sp, #8
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	603b      	str	r3, [r7, #0]
 8006c64:	4613      	mov	r3, r2
 8006c66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c6e:	2b20      	cmp	r3, #32
 8006c70:	d17b      	bne.n	8006d6a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <HAL_UART_Transmit+0x26>
 8006c78:	88fb      	ldrh	r3, [r7, #6]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e074      	b.n	8006d6c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2221      	movs	r2, #33	@ 0x21
 8006c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c92:	f7fb fc0f 	bl	80024b4 <HAL_GetTick>
 8006c96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	88fa      	ldrh	r2, [r7, #6]
 8006c9c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	88fa      	ldrh	r2, [r7, #6]
 8006ca4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cb0:	d108      	bne.n	8006cc4 <HAL_UART_Transmit+0x6c>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d104      	bne.n	8006cc4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	61bb      	str	r3, [r7, #24]
 8006cc2:	e003      	b.n	8006ccc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ccc:	e030      	b.n	8006d30 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	2180      	movs	r1, #128	@ 0x80
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 fc63 	bl	80075a4 <UART_WaitOnFlagUntilTimeout>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d005      	beq.n	8006cf0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e03d      	b.n	8006d6c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10b      	bne.n	8006d0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d04:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	3302      	adds	r3, #2
 8006d0a:	61bb      	str	r3, [r7, #24]
 8006d0c:	e007      	b.n	8006d1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	781a      	ldrb	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	3b01      	subs	r3, #1
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1c8      	bne.n	8006cce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	2200      	movs	r2, #0
 8006d44:	2140      	movs	r1, #64	@ 0x40
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 fc2c 	bl	80075a4 <UART_WaitOnFlagUntilTimeout>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d005      	beq.n	8006d5e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2220      	movs	r2, #32
 8006d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e006      	b.n	8006d6c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2220      	movs	r2, #32
 8006d62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	e000      	b.n	8006d6c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d6a:	2302      	movs	r3, #2
  }
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3720      	adds	r7, #32
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d78:	b08c      	sub	sp, #48	@ 0x30
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	431a      	orrs	r2, r3
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	4bab      	ldr	r3, [pc, #684]	@ (8007050 <UART_SetConfig+0x2dc>)
 8006da4:	4013      	ands	r3, r2
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	6812      	ldr	r2, [r2, #0]
 8006daa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dac:	430b      	orrs	r3, r1
 8006dae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	68da      	ldr	r2, [r3, #12]
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4aa0      	ldr	r2, [pc, #640]	@ (8007054 <UART_SetConfig+0x2e0>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d004      	beq.n	8006de0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006dea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	6812      	ldr	r2, [r2, #0]
 8006df2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006df4:	430b      	orrs	r3, r1
 8006df6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfe:	f023 010f 	bic.w	r1, r3, #15
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a91      	ldr	r2, [pc, #580]	@ (8007058 <UART_SetConfig+0x2e4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d125      	bne.n	8006e64 <UART_SetConfig+0xf0>
 8006e18:	4b90      	ldr	r3, [pc, #576]	@ (800705c <UART_SetConfig+0x2e8>)
 8006e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e1e:	f003 0303 	and.w	r3, r3, #3
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d81a      	bhi.n	8006e5c <UART_SetConfig+0xe8>
 8006e26:	a201      	add	r2, pc, #4	@ (adr r2, 8006e2c <UART_SetConfig+0xb8>)
 8006e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2c:	08006e3d 	.word	0x08006e3d
 8006e30:	08006e4d 	.word	0x08006e4d
 8006e34:	08006e45 	.word	0x08006e45
 8006e38:	08006e55 	.word	0x08006e55
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e42:	e0d6      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006e44:	2302      	movs	r3, #2
 8006e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e4a:	e0d2      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006e4c:	2304      	movs	r3, #4
 8006e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e52:	e0ce      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006e54:	2308      	movs	r3, #8
 8006e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e5a:	e0ca      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006e5c:	2310      	movs	r3, #16
 8006e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e62:	e0c6      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a7d      	ldr	r2, [pc, #500]	@ (8007060 <UART_SetConfig+0x2ec>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d138      	bne.n	8006ee0 <UART_SetConfig+0x16c>
 8006e6e:	4b7b      	ldr	r3, [pc, #492]	@ (800705c <UART_SetConfig+0x2e8>)
 8006e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e74:	f003 030c 	and.w	r3, r3, #12
 8006e78:	2b0c      	cmp	r3, #12
 8006e7a:	d82d      	bhi.n	8006ed8 <UART_SetConfig+0x164>
 8006e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e84 <UART_SetConfig+0x110>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006eb9 	.word	0x08006eb9
 8006e88:	08006ed9 	.word	0x08006ed9
 8006e8c:	08006ed9 	.word	0x08006ed9
 8006e90:	08006ed9 	.word	0x08006ed9
 8006e94:	08006ec9 	.word	0x08006ec9
 8006e98:	08006ed9 	.word	0x08006ed9
 8006e9c:	08006ed9 	.word	0x08006ed9
 8006ea0:	08006ed9 	.word	0x08006ed9
 8006ea4:	08006ec1 	.word	0x08006ec1
 8006ea8:	08006ed9 	.word	0x08006ed9
 8006eac:	08006ed9 	.word	0x08006ed9
 8006eb0:	08006ed9 	.word	0x08006ed9
 8006eb4:	08006ed1 	.word	0x08006ed1
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ebe:	e098      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ec6:	e094      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006ec8:	2304      	movs	r3, #4
 8006eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ece:	e090      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006ed0:	2308      	movs	r3, #8
 8006ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ed6:	e08c      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006ed8:	2310      	movs	r3, #16
 8006eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ede:	e088      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a5f      	ldr	r2, [pc, #380]	@ (8007064 <UART_SetConfig+0x2f0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d125      	bne.n	8006f36 <UART_SetConfig+0x1c2>
 8006eea:	4b5c      	ldr	r3, [pc, #368]	@ (800705c <UART_SetConfig+0x2e8>)
 8006eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006ef4:	2b30      	cmp	r3, #48	@ 0x30
 8006ef6:	d016      	beq.n	8006f26 <UART_SetConfig+0x1b2>
 8006ef8:	2b30      	cmp	r3, #48	@ 0x30
 8006efa:	d818      	bhi.n	8006f2e <UART_SetConfig+0x1ba>
 8006efc:	2b20      	cmp	r3, #32
 8006efe:	d00a      	beq.n	8006f16 <UART_SetConfig+0x1a2>
 8006f00:	2b20      	cmp	r3, #32
 8006f02:	d814      	bhi.n	8006f2e <UART_SetConfig+0x1ba>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <UART_SetConfig+0x19a>
 8006f08:	2b10      	cmp	r3, #16
 8006f0a:	d008      	beq.n	8006f1e <UART_SetConfig+0x1aa>
 8006f0c:	e00f      	b.n	8006f2e <UART_SetConfig+0x1ba>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f14:	e06d      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006f16:	2302      	movs	r3, #2
 8006f18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f1c:	e069      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006f1e:	2304      	movs	r3, #4
 8006f20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f24:	e065      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006f26:	2308      	movs	r3, #8
 8006f28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f2c:	e061      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006f2e:	2310      	movs	r3, #16
 8006f30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f34:	e05d      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a4b      	ldr	r2, [pc, #300]	@ (8007068 <UART_SetConfig+0x2f4>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d125      	bne.n	8006f8c <UART_SetConfig+0x218>
 8006f40:	4b46      	ldr	r3, [pc, #280]	@ (800705c <UART_SetConfig+0x2e8>)
 8006f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f4c:	d016      	beq.n	8006f7c <UART_SetConfig+0x208>
 8006f4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f50:	d818      	bhi.n	8006f84 <UART_SetConfig+0x210>
 8006f52:	2b80      	cmp	r3, #128	@ 0x80
 8006f54:	d00a      	beq.n	8006f6c <UART_SetConfig+0x1f8>
 8006f56:	2b80      	cmp	r3, #128	@ 0x80
 8006f58:	d814      	bhi.n	8006f84 <UART_SetConfig+0x210>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <UART_SetConfig+0x1f0>
 8006f5e:	2b40      	cmp	r3, #64	@ 0x40
 8006f60:	d008      	beq.n	8006f74 <UART_SetConfig+0x200>
 8006f62:	e00f      	b.n	8006f84 <UART_SetConfig+0x210>
 8006f64:	2300      	movs	r3, #0
 8006f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f6a:	e042      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f72:	e03e      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006f74:	2304      	movs	r3, #4
 8006f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f7a:	e03a      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006f7c:	2308      	movs	r3, #8
 8006f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f82:	e036      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006f84:	2310      	movs	r3, #16
 8006f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f8a:	e032      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a30      	ldr	r2, [pc, #192]	@ (8007054 <UART_SetConfig+0x2e0>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d12a      	bne.n	8006fec <UART_SetConfig+0x278>
 8006f96:	4b31      	ldr	r3, [pc, #196]	@ (800705c <UART_SetConfig+0x2e8>)
 8006f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006fa0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fa4:	d01a      	beq.n	8006fdc <UART_SetConfig+0x268>
 8006fa6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006faa:	d81b      	bhi.n	8006fe4 <UART_SetConfig+0x270>
 8006fac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fb0:	d00c      	beq.n	8006fcc <UART_SetConfig+0x258>
 8006fb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fb6:	d815      	bhi.n	8006fe4 <UART_SetConfig+0x270>
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <UART_SetConfig+0x250>
 8006fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fc0:	d008      	beq.n	8006fd4 <UART_SetConfig+0x260>
 8006fc2:	e00f      	b.n	8006fe4 <UART_SetConfig+0x270>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fca:	e012      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fd2:	e00e      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006fd4:	2304      	movs	r3, #4
 8006fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fda:	e00a      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006fdc:	2308      	movs	r3, #8
 8006fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fe2:	e006      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006fe4:	2310      	movs	r3, #16
 8006fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fea:	e002      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006fec:	2310      	movs	r3, #16
 8006fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a17      	ldr	r2, [pc, #92]	@ (8007054 <UART_SetConfig+0x2e0>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	f040 80a8 	bne.w	800714e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ffe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007002:	2b08      	cmp	r3, #8
 8007004:	d834      	bhi.n	8007070 <UART_SetConfig+0x2fc>
 8007006:	a201      	add	r2, pc, #4	@ (adr r2, 800700c <UART_SetConfig+0x298>)
 8007008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700c:	08007031 	.word	0x08007031
 8007010:	08007071 	.word	0x08007071
 8007014:	08007039 	.word	0x08007039
 8007018:	08007071 	.word	0x08007071
 800701c:	0800703f 	.word	0x0800703f
 8007020:	08007071 	.word	0x08007071
 8007024:	08007071 	.word	0x08007071
 8007028:	08007071 	.word	0x08007071
 800702c:	08007047 	.word	0x08007047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007030:	f7fd fc54 	bl	80048dc <HAL_RCC_GetPCLK1Freq>
 8007034:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007036:	e021      	b.n	800707c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007038:	4b0c      	ldr	r3, [pc, #48]	@ (800706c <UART_SetConfig+0x2f8>)
 800703a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800703c:	e01e      	b.n	800707c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800703e:	f7fd fbe1 	bl	8004804 <HAL_RCC_GetSysClockFreq>
 8007042:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007044:	e01a      	b.n	800707c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007046:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800704a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800704c:	e016      	b.n	800707c <UART_SetConfig+0x308>
 800704e:	bf00      	nop
 8007050:	cfff69f3 	.word	0xcfff69f3
 8007054:	40008000 	.word	0x40008000
 8007058:	40013800 	.word	0x40013800
 800705c:	40021000 	.word	0x40021000
 8007060:	40004400 	.word	0x40004400
 8007064:	40004800 	.word	0x40004800
 8007068:	40004c00 	.word	0x40004c00
 800706c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800707a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800707c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 812a 	beq.w	80072d8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007088:	4a9e      	ldr	r2, [pc, #632]	@ (8007304 <UART_SetConfig+0x590>)
 800708a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800708e:	461a      	mov	r2, r3
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	fbb3 f3f2 	udiv	r3, r3, r2
 8007096:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	4613      	mov	r3, r2
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	4413      	add	r3, r2
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d305      	bcc.n	80070b4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d903      	bls.n	80070bc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80070ba:	e10d      	b.n	80072d8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070be:	2200      	movs	r2, #0
 80070c0:	60bb      	str	r3, [r7, #8]
 80070c2:	60fa      	str	r2, [r7, #12]
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c8:	4a8e      	ldr	r2, [pc, #568]	@ (8007304 <UART_SetConfig+0x590>)
 80070ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	2200      	movs	r2, #0
 80070d2:	603b      	str	r3, [r7, #0]
 80070d4:	607a      	str	r2, [r7, #4]
 80070d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070de:	f7f9 fdfb 	bl	8000cd8 <__aeabi_uldivmod>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	4610      	mov	r0, r2
 80070e8:	4619      	mov	r1, r3
 80070ea:	f04f 0200 	mov.w	r2, #0
 80070ee:	f04f 0300 	mov.w	r3, #0
 80070f2:	020b      	lsls	r3, r1, #8
 80070f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070f8:	0202      	lsls	r2, r0, #8
 80070fa:	6979      	ldr	r1, [r7, #20]
 80070fc:	6849      	ldr	r1, [r1, #4]
 80070fe:	0849      	lsrs	r1, r1, #1
 8007100:	2000      	movs	r0, #0
 8007102:	460c      	mov	r4, r1
 8007104:	4605      	mov	r5, r0
 8007106:	eb12 0804 	adds.w	r8, r2, r4
 800710a:	eb43 0905 	adc.w	r9, r3, r5
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	469a      	mov	sl, r3
 8007116:	4693      	mov	fp, r2
 8007118:	4652      	mov	r2, sl
 800711a:	465b      	mov	r3, fp
 800711c:	4640      	mov	r0, r8
 800711e:	4649      	mov	r1, r9
 8007120:	f7f9 fdda 	bl	8000cd8 <__aeabi_uldivmod>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4613      	mov	r3, r2
 800712a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007132:	d308      	bcc.n	8007146 <UART_SetConfig+0x3d2>
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800713a:	d204      	bcs.n	8007146 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6a3a      	ldr	r2, [r7, #32]
 8007142:	60da      	str	r2, [r3, #12]
 8007144:	e0c8      	b.n	80072d8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800714c:	e0c4      	b.n	80072d8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007156:	d167      	bne.n	8007228 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007158:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800715c:	2b08      	cmp	r3, #8
 800715e:	d828      	bhi.n	80071b2 <UART_SetConfig+0x43e>
 8007160:	a201      	add	r2, pc, #4	@ (adr r2, 8007168 <UART_SetConfig+0x3f4>)
 8007162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007166:	bf00      	nop
 8007168:	0800718d 	.word	0x0800718d
 800716c:	08007195 	.word	0x08007195
 8007170:	0800719d 	.word	0x0800719d
 8007174:	080071b3 	.word	0x080071b3
 8007178:	080071a3 	.word	0x080071a3
 800717c:	080071b3 	.word	0x080071b3
 8007180:	080071b3 	.word	0x080071b3
 8007184:	080071b3 	.word	0x080071b3
 8007188:	080071ab 	.word	0x080071ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800718c:	f7fd fba6 	bl	80048dc <HAL_RCC_GetPCLK1Freq>
 8007190:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007192:	e014      	b.n	80071be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007194:	f7fd fbb8 	bl	8004908 <HAL_RCC_GetPCLK2Freq>
 8007198:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800719a:	e010      	b.n	80071be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800719c:	4b5a      	ldr	r3, [pc, #360]	@ (8007308 <UART_SetConfig+0x594>)
 800719e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071a0:	e00d      	b.n	80071be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071a2:	f7fd fb2f 	bl	8004804 <HAL_RCC_GetSysClockFreq>
 80071a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071a8:	e009      	b.n	80071be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071b0:	e005      	b.n	80071be <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80071bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 8089 	beq.w	80072d8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ca:	4a4e      	ldr	r2, [pc, #312]	@ (8007304 <UART_SetConfig+0x590>)
 80071cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071d0:	461a      	mov	r2, r3
 80071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80071d8:	005a      	lsls	r2, r3, #1
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	085b      	lsrs	r3, r3, #1
 80071e0:	441a      	add	r2, r3
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	2b0f      	cmp	r3, #15
 80071f0:	d916      	bls.n	8007220 <UART_SetConfig+0x4ac>
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071f8:	d212      	bcs.n	8007220 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071fa:	6a3b      	ldr	r3, [r7, #32]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	f023 030f 	bic.w	r3, r3, #15
 8007202:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	085b      	lsrs	r3, r3, #1
 8007208:	b29b      	uxth	r3, r3
 800720a:	f003 0307 	and.w	r3, r3, #7
 800720e:	b29a      	uxth	r2, r3
 8007210:	8bfb      	ldrh	r3, [r7, #30]
 8007212:	4313      	orrs	r3, r2
 8007214:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	8bfa      	ldrh	r2, [r7, #30]
 800721c:	60da      	str	r2, [r3, #12]
 800721e:	e05b      	b.n	80072d8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007226:	e057      	b.n	80072d8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007228:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800722c:	2b08      	cmp	r3, #8
 800722e:	d828      	bhi.n	8007282 <UART_SetConfig+0x50e>
 8007230:	a201      	add	r2, pc, #4	@ (adr r2, 8007238 <UART_SetConfig+0x4c4>)
 8007232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007236:	bf00      	nop
 8007238:	0800725d 	.word	0x0800725d
 800723c:	08007265 	.word	0x08007265
 8007240:	0800726d 	.word	0x0800726d
 8007244:	08007283 	.word	0x08007283
 8007248:	08007273 	.word	0x08007273
 800724c:	08007283 	.word	0x08007283
 8007250:	08007283 	.word	0x08007283
 8007254:	08007283 	.word	0x08007283
 8007258:	0800727b 	.word	0x0800727b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800725c:	f7fd fb3e 	bl	80048dc <HAL_RCC_GetPCLK1Freq>
 8007260:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007262:	e014      	b.n	800728e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007264:	f7fd fb50 	bl	8004908 <HAL_RCC_GetPCLK2Freq>
 8007268:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800726a:	e010      	b.n	800728e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800726c:	4b26      	ldr	r3, [pc, #152]	@ (8007308 <UART_SetConfig+0x594>)
 800726e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007270:	e00d      	b.n	800728e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007272:	f7fd fac7 	bl	8004804 <HAL_RCC_GetSysClockFreq>
 8007276:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007278:	e009      	b.n	800728e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800727a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800727e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007280:	e005      	b.n	800728e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800728c:	bf00      	nop
    }

    if (pclk != 0U)
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007290:	2b00      	cmp	r3, #0
 8007292:	d021      	beq.n	80072d8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007298:	4a1a      	ldr	r2, [pc, #104]	@ (8007304 <UART_SetConfig+0x590>)
 800729a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800729e:	461a      	mov	r2, r3
 80072a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	085b      	lsrs	r3, r3, #1
 80072ac:	441a      	add	r2, r3
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	2b0f      	cmp	r3, #15
 80072bc:	d909      	bls.n	80072d2 <UART_SetConfig+0x55e>
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072c4:	d205      	bcs.n	80072d2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	60da      	str	r2, [r3, #12]
 80072d0:	e002      	b.n	80072d8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2201      	movs	r2, #1
 80072dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	2200      	movs	r2, #0
 80072ec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2200      	movs	r2, #0
 80072f2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80072f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3730      	adds	r7, #48	@ 0x30
 80072fc:	46bd      	mov	sp, r7
 80072fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007302:	bf00      	nop
 8007304:	0800d460 	.word	0x0800d460
 8007308:	00f42400 	.word	0x00f42400

0800730c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007318:	f003 0308 	and.w	r3, r3, #8
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00a      	beq.n	8007336 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00a      	beq.n	8007358 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00a      	beq.n	800737a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737e:	f003 0304 	and.w	r3, r3, #4
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00a      	beq.n	800739c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a0:	f003 0310 	and.w	r3, r3, #16
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00a      	beq.n	80073be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	430a      	orrs	r2, r1
 80073bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c2:	f003 0320 	and.w	r3, r3, #32
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	430a      	orrs	r2, r1
 80073de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d01a      	beq.n	8007422 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007406:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800740a:	d10a      	bne.n	8007422 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00a      	beq.n	8007444 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	430a      	orrs	r2, r1
 8007442:	605a      	str	r2, [r3, #4]
  }
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b098      	sub	sp, #96	@ 0x60
 8007454:	af02      	add	r7, sp, #8
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007460:	f7fb f828 	bl	80024b4 <HAL_GetTick>
 8007464:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0308 	and.w	r3, r3, #8
 8007470:	2b08      	cmp	r3, #8
 8007472:	d12f      	bne.n	80074d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007474:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800747c:	2200      	movs	r2, #0
 800747e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f88e 	bl	80075a4 <UART_WaitOnFlagUntilTimeout>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d022      	beq.n	80074d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800749c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800749e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	461a      	mov	r2, r3
 80074aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80074ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e6      	bne.n	800748e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e063      	b.n	800759c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d149      	bne.n	8007576 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074ea:	2200      	movs	r2, #0
 80074ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f857 	bl	80075a4 <UART_WaitOnFlagUntilTimeout>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d03c      	beq.n	8007576 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007504:	e853 3f00 	ldrex	r3, [r3]
 8007508:	623b      	str	r3, [r7, #32]
   return(result);
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007510:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800751a:	633b      	str	r3, [r7, #48]	@ 0x30
 800751c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007522:	e841 2300 	strex	r3, r2, [r1]
 8007526:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1e6      	bne.n	80074fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3308      	adds	r3, #8
 8007534:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	e853 3f00 	ldrex	r3, [r3]
 800753c:	60fb      	str	r3, [r7, #12]
   return(result);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f023 0301 	bic.w	r3, r3, #1
 8007544:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3308      	adds	r3, #8
 800754c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800754e:	61fa      	str	r2, [r7, #28]
 8007550:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	69b9      	ldr	r1, [r7, #24]
 8007554:	69fa      	ldr	r2, [r7, #28]
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	617b      	str	r3, [r7, #20]
   return(result);
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1e5      	bne.n	800752e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2220      	movs	r2, #32
 8007566:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e012      	b.n	800759c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2220      	movs	r2, #32
 8007582:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3758      	adds	r7, #88	@ 0x58
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	603b      	str	r3, [r7, #0]
 80075b0:	4613      	mov	r3, r2
 80075b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075b4:	e04f      	b.n	8007656 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075bc:	d04b      	beq.n	8007656 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075be:	f7fa ff79 	bl	80024b4 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d302      	bcc.n	80075d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e04e      	b.n	8007676 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0304 	and.w	r3, r3, #4
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d037      	beq.n	8007656 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	2b80      	cmp	r3, #128	@ 0x80
 80075ea:	d034      	beq.n	8007656 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2b40      	cmp	r3, #64	@ 0x40
 80075f0:	d031      	beq.n	8007656 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	69db      	ldr	r3, [r3, #28]
 80075f8:	f003 0308 	and.w	r3, r3, #8
 80075fc:	2b08      	cmp	r3, #8
 80075fe:	d110      	bne.n	8007622 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2208      	movs	r2, #8
 8007606:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 f838 	bl	800767e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2208      	movs	r2, #8
 8007612:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e029      	b.n	8007676 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800762c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007630:	d111      	bne.n	8007656 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800763a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 f81e 	bl	800767e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2220      	movs	r2, #32
 8007646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e00f      	b.n	8007676 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	69da      	ldr	r2, [r3, #28]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	4013      	ands	r3, r2
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	429a      	cmp	r2, r3
 8007664:	bf0c      	ite	eq
 8007666:	2301      	moveq	r3, #1
 8007668:	2300      	movne	r3, #0
 800766a:	b2db      	uxtb	r3, r3
 800766c:	461a      	mov	r2, r3
 800766e:	79fb      	ldrb	r3, [r7, #7]
 8007670:	429a      	cmp	r2, r3
 8007672:	d0a0      	beq.n	80075b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800767e:	b480      	push	{r7}
 8007680:	b095      	sub	sp, #84	@ 0x54
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800768e:	e853 3f00 	ldrex	r3, [r3]
 8007692:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007696:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800769a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	461a      	mov	r2, r3
 80076a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80076a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076ac:	e841 2300 	strex	r3, r2, [r1]
 80076b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1e6      	bne.n	8007686 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3308      	adds	r3, #8
 80076be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	e853 3f00 	ldrex	r3, [r3]
 80076c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076ce:	f023 0301 	bic.w	r3, r3, #1
 80076d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3308      	adds	r3, #8
 80076da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e3      	bne.n	80076b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d118      	bne.n	800772a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	e853 3f00 	ldrex	r3, [r3]
 8007704:	60bb      	str	r3, [r7, #8]
   return(result);
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f023 0310 	bic.w	r3, r3, #16
 800770c:	647b      	str	r3, [r7, #68]	@ 0x44
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007716:	61bb      	str	r3, [r7, #24]
 8007718:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771a:	6979      	ldr	r1, [r7, #20]
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	e841 2300 	strex	r3, r2, [r1]
 8007722:	613b      	str	r3, [r7, #16]
   return(result);
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1e6      	bne.n	80076f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2220      	movs	r2, #32
 800772e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800773e:	bf00      	nop
 8007740:	3754      	adds	r7, #84	@ 0x54
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800774a:	b480      	push	{r7}
 800774c:	b085      	sub	sp, #20
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007758:	2b01      	cmp	r3, #1
 800775a:	d101      	bne.n	8007760 <HAL_UARTEx_DisableFifoMode+0x16>
 800775c:	2302      	movs	r3, #2
 800775e:	e027      	b.n	80077b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2224      	movs	r2, #36	@ 0x24
 800776c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f022 0201 	bic.w	r2, r2, #1
 8007786:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800778e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2220      	movs	r2, #32
 80077a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d101      	bne.n	80077d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077d0:	2302      	movs	r3, #2
 80077d2:	e02d      	b.n	8007830 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2224      	movs	r2, #36	@ 0x24
 80077e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f022 0201 	bic.w	r2, r2, #1
 80077fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f84f 	bl	80078b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007848:	2b01      	cmp	r3, #1
 800784a:	d101      	bne.n	8007850 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800784c:	2302      	movs	r3, #2
 800784e:	e02d      	b.n	80078ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2224      	movs	r2, #36	@ 0x24
 800785c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 0201 	bic.w	r2, r2, #1
 8007876:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f811 	bl	80078b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d108      	bne.n	80078d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078d4:	e031      	b.n	800793a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078d6:	2308      	movs	r3, #8
 80078d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078da:	2308      	movs	r3, #8
 80078dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	0e5b      	lsrs	r3, r3, #25
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f003 0307 	and.w	r3, r3, #7
 80078ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	0f5b      	lsrs	r3, r3, #29
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	7b3a      	ldrb	r2, [r7, #12]
 8007902:	4911      	ldr	r1, [pc, #68]	@ (8007948 <UARTEx_SetNbDataToProcess+0x94>)
 8007904:	5c8a      	ldrb	r2, [r1, r2]
 8007906:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800790a:	7b3a      	ldrb	r2, [r7, #12]
 800790c:	490f      	ldr	r1, [pc, #60]	@ (800794c <UARTEx_SetNbDataToProcess+0x98>)
 800790e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007910:	fb93 f3f2 	sdiv	r3, r3, r2
 8007914:	b29a      	uxth	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	7b7a      	ldrb	r2, [r7, #13]
 8007920:	4909      	ldr	r1, [pc, #36]	@ (8007948 <UARTEx_SetNbDataToProcess+0x94>)
 8007922:	5c8a      	ldrb	r2, [r1, r2]
 8007924:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007928:	7b7a      	ldrb	r2, [r7, #13]
 800792a:	4908      	ldr	r1, [pc, #32]	@ (800794c <UARTEx_SetNbDataToProcess+0x98>)
 800792c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800792e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007932:	b29a      	uxth	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800793a:	bf00      	nop
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	0800d478 	.word	0x0800d478
 800794c:	0800d480 	.word	0x0800d480

08007950 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	4603      	mov	r3, r0
 8007958:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800795e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007962:	2b84      	cmp	r3, #132	@ 0x84
 8007964:	d005      	beq.n	8007972 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007966:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	4413      	add	r3, r2
 800796e:	3303      	adds	r3, #3
 8007970:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007972:	68fb      	ldr	r3, [r7, #12]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007984:	f000 fa5c 	bl	8007e40 <vTaskStartScheduler>
  
  return osOK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	bd80      	pop	{r7, pc}

0800798e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800798e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007990:	b087      	sub	sp, #28
 8007992:	af02      	add	r7, sp, #8
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685c      	ldr	r4, [r3, #4]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079a4:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7ff ffcf 	bl	8007950 <makeFreeRtosPriority>
 80079b2:	4602      	mov	r2, r0
 80079b4:	f107 030c 	add.w	r3, r7, #12
 80079b8:	9301      	str	r3, [sp, #4]
 80079ba:	9200      	str	r2, [sp, #0]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	4632      	mov	r2, r6
 80079c0:	4629      	mov	r1, r5
 80079c2:	4620      	mov	r0, r4
 80079c4:	f000 f8d2 	bl	8007b6c <xTaskCreate>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d001      	beq.n	80079d2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80079ce:	2300      	movs	r3, #0
 80079d0:	e000      	b.n	80079d4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80079d2:	68fb      	ldr	r3, [r7, #12]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079dc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d001      	beq.n	80079f2 <osDelay+0x16>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	e000      	b.n	80079f4 <osDelay+0x18>
 80079f2:	2301      	movs	r3, #1
 80079f4:	4618      	mov	r0, r3
 80079f6:	f000 f9ed 	bl	8007dd4 <vTaskDelay>
  
  return osOK;
 80079fa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f103 0208 	add.w	r2, r3, #8
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f04f 32ff 	mov.w	r2, #4294967295
 8007a1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f103 0208 	add.w	r2, r3, #8
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f103 0208 	add.w	r2, r3, #8
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a52:	bf00      	nop
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b085      	sub	sp, #20
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	689a      	ldr	r2, [r3, #8]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	1c5a      	adds	r2, r3, #1
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	601a      	str	r2, [r3, #0]
}
 8007a9a:	bf00      	nop
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b085      	sub	sp, #20
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abc:	d103      	bne.n	8007ac6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	e00c      	b.n	8007ae0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	3308      	adds	r3, #8
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	e002      	b.n	8007ad4 <vListInsert+0x2e>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d2f6      	bcs.n	8007ace <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	683a      	ldr	r2, [r7, #0]
 8007afa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	601a      	str	r2, [r3, #0]
}
 8007b0c:	bf00      	nop
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6892      	ldr	r2, [r2, #8]
 8007b2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	6852      	ldr	r2, [r2, #4]
 8007b38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d103      	bne.n	8007b4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	1e5a      	subs	r2, r3, #1
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b08c      	sub	sp, #48	@ 0x30
 8007b70:	af04      	add	r7, sp, #16
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	603b      	str	r3, [r7, #0]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b7c:	88fb      	ldrh	r3, [r7, #6]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 feb1 	bl	80088e8 <pvPortMalloc>
 8007b86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00e      	beq.n	8007bac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b8e:	2054      	movs	r0, #84	@ 0x54
 8007b90:	f000 feaa 	bl	80088e8 <pvPortMalloc>
 8007b94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d003      	beq.n	8007ba4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	631a      	str	r2, [r3, #48]	@ 0x30
 8007ba2:	e005      	b.n	8007bb0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ba4:	6978      	ldr	r0, [r7, #20]
 8007ba6:	f000 ff6d 	bl	8008a84 <vPortFree>
 8007baa:	e001      	b.n	8007bb0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007bac:	2300      	movs	r3, #0
 8007bae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d013      	beq.n	8007bde <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007bb6:	88fa      	ldrh	r2, [r7, #6]
 8007bb8:	2300      	movs	r3, #0
 8007bba:	9303      	str	r3, [sp, #12]
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	9302      	str	r3, [sp, #8]
 8007bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bc2:	9301      	str	r3, [sp, #4]
 8007bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	68b9      	ldr	r1, [r7, #8]
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 f80e 	bl	8007bee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bd2:	69f8      	ldr	r0, [r7, #28]
 8007bd4:	f000 f894 	bl	8007d00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	61bb      	str	r3, [r7, #24]
 8007bdc:	e002      	b.n	8007be4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007bde:	f04f 33ff 	mov.w	r3, #4294967295
 8007be2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007be4:	69bb      	ldr	r3, [r7, #24]
	}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3720      	adds	r7, #32
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b088      	sub	sp, #32
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	60f8      	str	r0, [r7, #12]
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	607a      	str	r2, [r7, #4]
 8007bfa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007c06:	3b01      	subs	r3, #1
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	f023 0307 	bic.w	r3, r3, #7
 8007c14:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	f003 0307 	and.w	r3, r3, #7
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00b      	beq.n	8007c38 <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007c32:	bf00      	nop
 8007c34:	bf00      	nop
 8007c36:	e7fd      	b.n	8007c34 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d01f      	beq.n	8007c7e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c3e:	2300      	movs	r3, #0
 8007c40:	61fb      	str	r3, [r7, #28]
 8007c42:	e012      	b.n	8007c6a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	4413      	add	r3, r2
 8007c4a:	7819      	ldrb	r1, [r3, #0]
 8007c4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	4413      	add	r3, r2
 8007c52:	3334      	adds	r3, #52	@ 0x34
 8007c54:	460a      	mov	r2, r1
 8007c56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d006      	beq.n	8007c72 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	3301      	adds	r3, #1
 8007c68:	61fb      	str	r3, [r7, #28]
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	2b0f      	cmp	r3, #15
 8007c6e:	d9e9      	bls.n	8007c44 <prvInitialiseNewTask+0x56>
 8007c70:	e000      	b.n	8007c74 <prvInitialiseNewTask+0x86>
			{
				break;
 8007c72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c7c:	e003      	b.n	8007c86 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c88:	2b06      	cmp	r3, #6
 8007c8a:	d901      	bls.n	8007c90 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c8c:	2306      	movs	r3, #6
 8007c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c94:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c9a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7ff fecc 	bl	8007a44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cae:	3318      	adds	r3, #24
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7ff fec7 	bl	8007a44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cbe:	f1c3 0207 	rsb	r2, r3, #7
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cca:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cce:	2200      	movs	r2, #0
 8007cd0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	68f9      	ldr	r1, [r7, #12]
 8007cde:	69b8      	ldr	r0, [r7, #24]
 8007ce0:	f000 fbf2 	bl	80084c8 <pxPortInitialiseStack>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d002      	beq.n	8007cf6 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cf6:	bf00      	nop
 8007cf8:	3720      	adds	r7, #32
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
	...

08007d00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d08:	f000 fd0e 	bl	8008728 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8007db8 <prvAddNewTaskToReadyList+0xb8>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3301      	adds	r3, #1
 8007d12:	4a29      	ldr	r2, [pc, #164]	@ (8007db8 <prvAddNewTaskToReadyList+0xb8>)
 8007d14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d16:	4b29      	ldr	r3, [pc, #164]	@ (8007dbc <prvAddNewTaskToReadyList+0xbc>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d109      	bne.n	8007d32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d1e:	4a27      	ldr	r2, [pc, #156]	@ (8007dbc <prvAddNewTaskToReadyList+0xbc>)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d24:	4b24      	ldr	r3, [pc, #144]	@ (8007db8 <prvAddNewTaskToReadyList+0xb8>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d110      	bne.n	8007d4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d2c:	f000 faaa 	bl	8008284 <prvInitialiseTaskLists>
 8007d30:	e00d      	b.n	8007d4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d32:	4b23      	ldr	r3, [pc, #140]	@ (8007dc0 <prvAddNewTaskToReadyList+0xc0>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d109      	bne.n	8007d4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d3a:	4b20      	ldr	r3, [pc, #128]	@ (8007dbc <prvAddNewTaskToReadyList+0xbc>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d802      	bhi.n	8007d4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d48:	4a1c      	ldr	r2, [pc, #112]	@ (8007dbc <prvAddNewTaskToReadyList+0xbc>)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8007dc4 <prvAddNewTaskToReadyList+0xc4>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3301      	adds	r3, #1
 8007d54:	4a1b      	ldr	r2, [pc, #108]	@ (8007dc4 <prvAddNewTaskToReadyList+0xc4>)
 8007d56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	409a      	lsls	r2, r3
 8007d60:	4b19      	ldr	r3, [pc, #100]	@ (8007dc8 <prvAddNewTaskToReadyList+0xc8>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	4a18      	ldr	r2, [pc, #96]	@ (8007dc8 <prvAddNewTaskToReadyList+0xc8>)
 8007d68:	6013      	str	r3, [r2, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d6e:	4613      	mov	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4a15      	ldr	r2, [pc, #84]	@ (8007dcc <prvAddNewTaskToReadyList+0xcc>)
 8007d78:	441a      	add	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	4619      	mov	r1, r3
 8007d80:	4610      	mov	r0, r2
 8007d82:	f7ff fe6c 	bl	8007a5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d86:	f000 fd01 	bl	800878c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc0 <prvAddNewTaskToReadyList+0xc0>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00e      	beq.n	8007db0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d92:	4b0a      	ldr	r3, [pc, #40]	@ (8007dbc <prvAddNewTaskToReadyList+0xbc>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d207      	bcs.n	8007db0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007da0:	4b0b      	ldr	r3, [pc, #44]	@ (8007dd0 <prvAddNewTaskToReadyList+0xd0>)
 8007da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007da6:	601a      	str	r2, [r3, #0]
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	20000688 	.word	0x20000688
 8007dbc:	20000588 	.word	0x20000588
 8007dc0:	20000694 	.word	0x20000694
 8007dc4:	200006a4 	.word	0x200006a4
 8007dc8:	20000690 	.word	0x20000690
 8007dcc:	2000058c 	.word	0x2000058c
 8007dd0:	e000ed04 	.word	0xe000ed04

08007dd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d018      	beq.n	8007e18 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007de6:	4b14      	ldr	r3, [pc, #80]	@ (8007e38 <vTaskDelay+0x64>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00b      	beq.n	8007e06 <vTaskDelay+0x32>
	__asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	60bb      	str	r3, [r7, #8]
}
 8007e00:	bf00      	nop
 8007e02:	bf00      	nop
 8007e04:	e7fd      	b.n	8007e02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e06:	f000 f863 	bl	8007ed0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 faf5 	bl	80083fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e12:	f000 f86b 	bl	8007eec <xTaskResumeAll>
 8007e16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d107      	bne.n	8007e2e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007e1e:	4b07      	ldr	r3, [pc, #28]	@ (8007e3c <vTaskDelay+0x68>)
 8007e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e2e:	bf00      	nop
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	200006b0 	.word	0x200006b0
 8007e3c:	e000ed04 	.word	0xe000ed04

08007e40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8007e46:	4b1c      	ldr	r3, [pc, #112]	@ (8007eb8 <vTaskStartScheduler+0x78>)
 8007e48:	9301      	str	r3, [sp, #4]
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	2280      	movs	r2, #128	@ 0x80
 8007e52:	491a      	ldr	r1, [pc, #104]	@ (8007ebc <vTaskStartScheduler+0x7c>)
 8007e54:	481a      	ldr	r0, [pc, #104]	@ (8007ec0 <vTaskStartScheduler+0x80>)
 8007e56:	f7ff fe89 	bl	8007b6c <xTaskCreate>
 8007e5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d116      	bne.n	8007e90 <vTaskStartScheduler+0x50>
	__asm volatile
 8007e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	60bb      	str	r3, [r7, #8]
}
 8007e74:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e76:	4b13      	ldr	r3, [pc, #76]	@ (8007ec4 <vTaskStartScheduler+0x84>)
 8007e78:	f04f 32ff 	mov.w	r2, #4294967295
 8007e7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e7e:	4b12      	ldr	r3, [pc, #72]	@ (8007ec8 <vTaskStartScheduler+0x88>)
 8007e80:	2201      	movs	r2, #1
 8007e82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007e84:	4b11      	ldr	r3, [pc, #68]	@ (8007ecc <vTaskStartScheduler+0x8c>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e8a:	f000 fba9 	bl	80085e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e8e:	e00f      	b.n	8007eb0 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e96:	d10b      	bne.n	8007eb0 <vTaskStartScheduler+0x70>
	__asm volatile
 8007e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	607b      	str	r3, [r7, #4]
}
 8007eaa:	bf00      	nop
 8007eac:	bf00      	nop
 8007eae:	e7fd      	b.n	8007eac <vTaskStartScheduler+0x6c>
}
 8007eb0:	bf00      	nop
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	200006ac 	.word	0x200006ac
 8007ebc:	0800d440 	.word	0x0800d440
 8007ec0:	08008255 	.word	0x08008255
 8007ec4:	200006a8 	.word	0x200006a8
 8007ec8:	20000694 	.word	0x20000694
 8007ecc:	2000068c 	.word	0x2000068c

08007ed0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007ed4:	4b04      	ldr	r3, [pc, #16]	@ (8007ee8 <vTaskSuspendAll+0x18>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	4a03      	ldr	r2, [pc, #12]	@ (8007ee8 <vTaskSuspendAll+0x18>)
 8007edc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007ede:	bf00      	nop
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr
 8007ee8:	200006b0 	.word	0x200006b0

08007eec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007efa:	4b42      	ldr	r3, [pc, #264]	@ (8008004 <xTaskResumeAll+0x118>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10b      	bne.n	8007f1a <xTaskResumeAll+0x2e>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	603b      	str	r3, [r7, #0]
}
 8007f14:	bf00      	nop
 8007f16:	bf00      	nop
 8007f18:	e7fd      	b.n	8007f16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f1a:	f000 fc05 	bl	8008728 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f1e:	4b39      	ldr	r3, [pc, #228]	@ (8008004 <xTaskResumeAll+0x118>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	4a37      	ldr	r2, [pc, #220]	@ (8008004 <xTaskResumeAll+0x118>)
 8007f26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f28:	4b36      	ldr	r3, [pc, #216]	@ (8008004 <xTaskResumeAll+0x118>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d161      	bne.n	8007ff4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f30:	4b35      	ldr	r3, [pc, #212]	@ (8008008 <xTaskResumeAll+0x11c>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d05d      	beq.n	8007ff4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f38:	e02e      	b.n	8007f98 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f3a:	4b34      	ldr	r3, [pc, #208]	@ (800800c <xTaskResumeAll+0x120>)
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3318      	adds	r3, #24
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7ff fde6 	bl	8007b18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3304      	adds	r3, #4
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7ff fde1 	bl	8007b18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	409a      	lsls	r2, r3
 8007f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8008010 <xTaskResumeAll+0x124>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	4a2a      	ldr	r2, [pc, #168]	@ (8008010 <xTaskResumeAll+0x124>)
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4a27      	ldr	r2, [pc, #156]	@ (8008014 <xTaskResumeAll+0x128>)
 8007f76:	441a      	add	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	4610      	mov	r0, r2
 8007f80:	f7ff fd6d 	bl	8007a5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f88:	4b23      	ldr	r3, [pc, #140]	@ (8008018 <xTaskResumeAll+0x12c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d302      	bcc.n	8007f98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007f92:	4b22      	ldr	r3, [pc, #136]	@ (800801c <xTaskResumeAll+0x130>)
 8007f94:	2201      	movs	r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f98:	4b1c      	ldr	r3, [pc, #112]	@ (800800c <xTaskResumeAll+0x120>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1cc      	bne.n	8007f3a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007fa6:	f000 f9eb 	bl	8008380 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007faa:	4b1d      	ldr	r3, [pc, #116]	@ (8008020 <xTaskResumeAll+0x134>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d010      	beq.n	8007fd8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007fb6:	f000 f837 	bl	8008028 <xTaskIncrementTick>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007fc0:	4b16      	ldr	r3, [pc, #88]	@ (800801c <xTaskResumeAll+0x130>)
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1f1      	bne.n	8007fb6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007fd2:	4b13      	ldr	r3, [pc, #76]	@ (8008020 <xTaskResumeAll+0x134>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007fd8:	4b10      	ldr	r3, [pc, #64]	@ (800801c <xTaskResumeAll+0x130>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d009      	beq.n	8007ff4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8008024 <xTaskResumeAll+0x138>)
 8007fe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fea:	601a      	str	r2, [r3, #0]
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ff4:	f000 fbca 	bl	800878c <vPortExitCritical>

	return xAlreadyYielded;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	200006b0 	.word	0x200006b0
 8008008:	20000688 	.word	0x20000688
 800800c:	20000648 	.word	0x20000648
 8008010:	20000690 	.word	0x20000690
 8008014:	2000058c 	.word	0x2000058c
 8008018:	20000588 	.word	0x20000588
 800801c:	2000069c 	.word	0x2000069c
 8008020:	20000698 	.word	0x20000698
 8008024:	e000ed04 	.word	0xe000ed04

08008028 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800802e:	2300      	movs	r3, #0
 8008030:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008032:	4b4f      	ldr	r3, [pc, #316]	@ (8008170 <xTaskIncrementTick+0x148>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	f040 808f 	bne.w	800815a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800803c:	4b4d      	ldr	r3, [pc, #308]	@ (8008174 <xTaskIncrementTick+0x14c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3301      	adds	r3, #1
 8008042:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008044:	4a4b      	ldr	r2, [pc, #300]	@ (8008174 <xTaskIncrementTick+0x14c>)
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d121      	bne.n	8008094 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008050:	4b49      	ldr	r3, [pc, #292]	@ (8008178 <xTaskIncrementTick+0x150>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00b      	beq.n	8008072 <xTaskIncrementTick+0x4a>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	603b      	str	r3, [r7, #0]
}
 800806c:	bf00      	nop
 800806e:	bf00      	nop
 8008070:	e7fd      	b.n	800806e <xTaskIncrementTick+0x46>
 8008072:	4b41      	ldr	r3, [pc, #260]	@ (8008178 <xTaskIncrementTick+0x150>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	4b40      	ldr	r3, [pc, #256]	@ (800817c <xTaskIncrementTick+0x154>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a3e      	ldr	r2, [pc, #248]	@ (8008178 <xTaskIncrementTick+0x150>)
 800807e:	6013      	str	r3, [r2, #0]
 8008080:	4a3e      	ldr	r2, [pc, #248]	@ (800817c <xTaskIncrementTick+0x154>)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6013      	str	r3, [r2, #0]
 8008086:	4b3e      	ldr	r3, [pc, #248]	@ (8008180 <xTaskIncrementTick+0x158>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3301      	adds	r3, #1
 800808c:	4a3c      	ldr	r2, [pc, #240]	@ (8008180 <xTaskIncrementTick+0x158>)
 800808e:	6013      	str	r3, [r2, #0]
 8008090:	f000 f976 	bl	8008380 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008094:	4b3b      	ldr	r3, [pc, #236]	@ (8008184 <xTaskIncrementTick+0x15c>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	429a      	cmp	r2, r3
 800809c:	d348      	bcc.n	8008130 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800809e:	4b36      	ldr	r3, [pc, #216]	@ (8008178 <xTaskIncrementTick+0x150>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d104      	bne.n	80080b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080a8:	4b36      	ldr	r3, [pc, #216]	@ (8008184 <xTaskIncrementTick+0x15c>)
 80080aa:	f04f 32ff 	mov.w	r2, #4294967295
 80080ae:	601a      	str	r2, [r3, #0]
					break;
 80080b0:	e03e      	b.n	8008130 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080b2:	4b31      	ldr	r3, [pc, #196]	@ (8008178 <xTaskIncrementTick+0x150>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d203      	bcs.n	80080d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80080ca:	4a2e      	ldr	r2, [pc, #184]	@ (8008184 <xTaskIncrementTick+0x15c>)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80080d0:	e02e      	b.n	8008130 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	3304      	adds	r3, #4
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff fd1e 	bl	8007b18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d004      	beq.n	80080ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	3318      	adds	r3, #24
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7ff fd15 	bl	8007b18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080f2:	2201      	movs	r2, #1
 80080f4:	409a      	lsls	r2, r3
 80080f6:	4b24      	ldr	r3, [pc, #144]	@ (8008188 <xTaskIncrementTick+0x160>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	4a22      	ldr	r2, [pc, #136]	@ (8008188 <xTaskIncrementTick+0x160>)
 80080fe:	6013      	str	r3, [r2, #0]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008104:	4613      	mov	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4a1f      	ldr	r2, [pc, #124]	@ (800818c <xTaskIncrementTick+0x164>)
 800810e:	441a      	add	r2, r3
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	3304      	adds	r3, #4
 8008114:	4619      	mov	r1, r3
 8008116:	4610      	mov	r0, r2
 8008118:	f7ff fca1 	bl	8007a5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008120:	4b1b      	ldr	r3, [pc, #108]	@ (8008190 <xTaskIncrementTick+0x168>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008126:	429a      	cmp	r2, r3
 8008128:	d3b9      	bcc.n	800809e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800812a:	2301      	movs	r3, #1
 800812c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800812e:	e7b6      	b.n	800809e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008130:	4b17      	ldr	r3, [pc, #92]	@ (8008190 <xTaskIncrementTick+0x168>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008136:	4915      	ldr	r1, [pc, #84]	@ (800818c <xTaskIncrementTick+0x164>)
 8008138:	4613      	mov	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4413      	add	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	440b      	add	r3, r1
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d901      	bls.n	800814c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008148:	2301      	movs	r3, #1
 800814a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800814c:	4b11      	ldr	r3, [pc, #68]	@ (8008194 <xTaskIncrementTick+0x16c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d007      	beq.n	8008164 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008154:	2301      	movs	r3, #1
 8008156:	617b      	str	r3, [r7, #20]
 8008158:	e004      	b.n	8008164 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800815a:	4b0f      	ldr	r3, [pc, #60]	@ (8008198 <xTaskIncrementTick+0x170>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3301      	adds	r3, #1
 8008160:	4a0d      	ldr	r2, [pc, #52]	@ (8008198 <xTaskIncrementTick+0x170>)
 8008162:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008164:	697b      	ldr	r3, [r7, #20]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	200006b0 	.word	0x200006b0
 8008174:	2000068c 	.word	0x2000068c
 8008178:	20000640 	.word	0x20000640
 800817c:	20000644 	.word	0x20000644
 8008180:	200006a0 	.word	0x200006a0
 8008184:	200006a8 	.word	0x200006a8
 8008188:	20000690 	.word	0x20000690
 800818c:	2000058c 	.word	0x2000058c
 8008190:	20000588 	.word	0x20000588
 8008194:	2000069c 	.word	0x2000069c
 8008198:	20000698 	.word	0x20000698

0800819c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800819c:	b480      	push	{r7}
 800819e:	b087      	sub	sp, #28
 80081a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80081a2:	4b27      	ldr	r3, [pc, #156]	@ (8008240 <vTaskSwitchContext+0xa4>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d003      	beq.n	80081b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80081aa:	4b26      	ldr	r3, [pc, #152]	@ (8008244 <vTaskSwitchContext+0xa8>)
 80081ac:	2201      	movs	r2, #1
 80081ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80081b0:	e040      	b.n	8008234 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80081b2:	4b24      	ldr	r3, [pc, #144]	@ (8008244 <vTaskSwitchContext+0xa8>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081b8:	4b23      	ldr	r3, [pc, #140]	@ (8008248 <vTaskSwitchContext+0xac>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	fab3 f383 	clz	r3, r3
 80081c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80081c6:	7afb      	ldrb	r3, [r7, #11]
 80081c8:	f1c3 031f 	rsb	r3, r3, #31
 80081cc:	617b      	str	r3, [r7, #20]
 80081ce:	491f      	ldr	r1, [pc, #124]	@ (800824c <vTaskSwitchContext+0xb0>)
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	4613      	mov	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	440b      	add	r3, r1
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10b      	bne.n	80081fa <vTaskSwitchContext+0x5e>
	__asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	607b      	str	r3, [r7, #4]
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop
 80081f8:	e7fd      	b.n	80081f6 <vTaskSwitchContext+0x5a>
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	4613      	mov	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4413      	add	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4a11      	ldr	r2, [pc, #68]	@ (800824c <vTaskSwitchContext+0xb0>)
 8008206:	4413      	add	r3, r2
 8008208:	613b      	str	r3, [r7, #16]
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	605a      	str	r2, [r3, #4]
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	3308      	adds	r3, #8
 800821c:	429a      	cmp	r2, r3
 800821e:	d104      	bne.n	800822a <vTaskSwitchContext+0x8e>
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	605a      	str	r2, [r3, #4]
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	4a07      	ldr	r2, [pc, #28]	@ (8008250 <vTaskSwitchContext+0xb4>)
 8008232:	6013      	str	r3, [r2, #0]
}
 8008234:	bf00      	nop
 8008236:	371c      	adds	r7, #28
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr
 8008240:	200006b0 	.word	0x200006b0
 8008244:	2000069c 	.word	0x2000069c
 8008248:	20000690 	.word	0x20000690
 800824c:	2000058c 	.word	0x2000058c
 8008250:	20000588 	.word	0x20000588

08008254 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800825c:	f000 f852 	bl	8008304 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008260:	4b06      	ldr	r3, [pc, #24]	@ (800827c <prvIdleTask+0x28>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d9f9      	bls.n	800825c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008268:	4b05      	ldr	r3, [pc, #20]	@ (8008280 <prvIdleTask+0x2c>)
 800826a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008278:	e7f0      	b.n	800825c <prvIdleTask+0x8>
 800827a:	bf00      	nop
 800827c:	2000058c 	.word	0x2000058c
 8008280:	e000ed04 	.word	0xe000ed04

08008284 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800828a:	2300      	movs	r3, #0
 800828c:	607b      	str	r3, [r7, #4]
 800828e:	e00c      	b.n	80082aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	4613      	mov	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4a12      	ldr	r2, [pc, #72]	@ (80082e4 <prvInitialiseTaskLists+0x60>)
 800829c:	4413      	add	r3, r2
 800829e:	4618      	mov	r0, r3
 80082a0:	f7ff fbb0 	bl	8007a04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	3301      	adds	r3, #1
 80082a8:	607b      	str	r3, [r7, #4]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2b06      	cmp	r3, #6
 80082ae:	d9ef      	bls.n	8008290 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082b0:	480d      	ldr	r0, [pc, #52]	@ (80082e8 <prvInitialiseTaskLists+0x64>)
 80082b2:	f7ff fba7 	bl	8007a04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082b6:	480d      	ldr	r0, [pc, #52]	@ (80082ec <prvInitialiseTaskLists+0x68>)
 80082b8:	f7ff fba4 	bl	8007a04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80082bc:	480c      	ldr	r0, [pc, #48]	@ (80082f0 <prvInitialiseTaskLists+0x6c>)
 80082be:	f7ff fba1 	bl	8007a04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80082c2:	480c      	ldr	r0, [pc, #48]	@ (80082f4 <prvInitialiseTaskLists+0x70>)
 80082c4:	f7ff fb9e 	bl	8007a04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80082c8:	480b      	ldr	r0, [pc, #44]	@ (80082f8 <prvInitialiseTaskLists+0x74>)
 80082ca:	f7ff fb9b 	bl	8007a04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80082ce:	4b0b      	ldr	r3, [pc, #44]	@ (80082fc <prvInitialiseTaskLists+0x78>)
 80082d0:	4a05      	ldr	r2, [pc, #20]	@ (80082e8 <prvInitialiseTaskLists+0x64>)
 80082d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80082d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008300 <prvInitialiseTaskLists+0x7c>)
 80082d6:	4a05      	ldr	r2, [pc, #20]	@ (80082ec <prvInitialiseTaskLists+0x68>)
 80082d8:	601a      	str	r2, [r3, #0]
}
 80082da:	bf00      	nop
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	2000058c 	.word	0x2000058c
 80082e8:	20000618 	.word	0x20000618
 80082ec:	2000062c 	.word	0x2000062c
 80082f0:	20000648 	.word	0x20000648
 80082f4:	2000065c 	.word	0x2000065c
 80082f8:	20000674 	.word	0x20000674
 80082fc:	20000640 	.word	0x20000640
 8008300:	20000644 	.word	0x20000644

08008304 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800830a:	e019      	b.n	8008340 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800830c:	f000 fa0c 	bl	8008728 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008310:	4b10      	ldr	r3, [pc, #64]	@ (8008354 <prvCheckTasksWaitingTermination+0x50>)
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	3304      	adds	r3, #4
 800831c:	4618      	mov	r0, r3
 800831e:	f7ff fbfb 	bl	8007b18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008322:	4b0d      	ldr	r3, [pc, #52]	@ (8008358 <prvCheckTasksWaitingTermination+0x54>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3b01      	subs	r3, #1
 8008328:	4a0b      	ldr	r2, [pc, #44]	@ (8008358 <prvCheckTasksWaitingTermination+0x54>)
 800832a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800832c:	4b0b      	ldr	r3, [pc, #44]	@ (800835c <prvCheckTasksWaitingTermination+0x58>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3b01      	subs	r3, #1
 8008332:	4a0a      	ldr	r2, [pc, #40]	@ (800835c <prvCheckTasksWaitingTermination+0x58>)
 8008334:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008336:	f000 fa29 	bl	800878c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f810 	bl	8008360 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008340:	4b06      	ldr	r3, [pc, #24]	@ (800835c <prvCheckTasksWaitingTermination+0x58>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1e1      	bne.n	800830c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008348:	bf00      	nop
 800834a:	bf00      	nop
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	2000065c 	.word	0x2000065c
 8008358:	20000688 	.word	0x20000688
 800835c:	20000670 	.word	0x20000670

08008360 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800836c:	4618      	mov	r0, r3
 800836e:	f000 fb89 	bl	8008a84 <vPortFree>
			vPortFree( pxTCB );
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fb86 	bl	8008a84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008378:	bf00      	nop
 800837a:	3708      	adds	r7, #8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008386:	4b0c      	ldr	r3, [pc, #48]	@ (80083b8 <prvResetNextTaskUnblockTime+0x38>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d104      	bne.n	800839a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008390:	4b0a      	ldr	r3, [pc, #40]	@ (80083bc <prvResetNextTaskUnblockTime+0x3c>)
 8008392:	f04f 32ff 	mov.w	r2, #4294967295
 8008396:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008398:	e008      	b.n	80083ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800839a:	4b07      	ldr	r3, [pc, #28]	@ (80083b8 <prvResetNextTaskUnblockTime+0x38>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	4a04      	ldr	r2, [pc, #16]	@ (80083bc <prvResetNextTaskUnblockTime+0x3c>)
 80083aa:	6013      	str	r3, [r2, #0]
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	20000640 	.word	0x20000640
 80083bc:	200006a8 	.word	0x200006a8

080083c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80083c6:	4b0b      	ldr	r3, [pc, #44]	@ (80083f4 <xTaskGetSchedulerState+0x34>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d102      	bne.n	80083d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80083ce:	2301      	movs	r3, #1
 80083d0:	607b      	str	r3, [r7, #4]
 80083d2:	e008      	b.n	80083e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083d4:	4b08      	ldr	r3, [pc, #32]	@ (80083f8 <xTaskGetSchedulerState+0x38>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d102      	bne.n	80083e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80083dc:	2302      	movs	r3, #2
 80083de:	607b      	str	r3, [r7, #4]
 80083e0:	e001      	b.n	80083e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80083e2:	2300      	movs	r3, #0
 80083e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80083e6:	687b      	ldr	r3, [r7, #4]
	}
 80083e8:	4618      	mov	r0, r3
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	20000694 	.word	0x20000694
 80083f8:	200006b0 	.word	0x200006b0

080083fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008406:	4b29      	ldr	r3, [pc, #164]	@ (80084ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800840c:	4b28      	ldr	r3, [pc, #160]	@ (80084b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	3304      	adds	r3, #4
 8008412:	4618      	mov	r0, r3
 8008414:	f7ff fb80 	bl	8007b18 <uxListRemove>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10b      	bne.n	8008436 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800841e:	4b24      	ldr	r3, [pc, #144]	@ (80084b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008424:	2201      	movs	r2, #1
 8008426:	fa02 f303 	lsl.w	r3, r2, r3
 800842a:	43da      	mvns	r2, r3
 800842c:	4b21      	ldr	r3, [pc, #132]	@ (80084b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4013      	ands	r3, r2
 8008432:	4a20      	ldr	r2, [pc, #128]	@ (80084b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008434:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843c:	d10a      	bne.n	8008454 <prvAddCurrentTaskToDelayedList+0x58>
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d007      	beq.n	8008454 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008444:	4b1a      	ldr	r3, [pc, #104]	@ (80084b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3304      	adds	r3, #4
 800844a:	4619      	mov	r1, r3
 800844c:	481a      	ldr	r0, [pc, #104]	@ (80084b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800844e:	f7ff fb06 	bl	8007a5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008452:	e026      	b.n	80084a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4413      	add	r3, r2
 800845a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800845c:	4b14      	ldr	r3, [pc, #80]	@ (80084b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	429a      	cmp	r2, r3
 800846a:	d209      	bcs.n	8008480 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800846c:	4b13      	ldr	r3, [pc, #76]	@ (80084bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	4b0f      	ldr	r3, [pc, #60]	@ (80084b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3304      	adds	r3, #4
 8008476:	4619      	mov	r1, r3
 8008478:	4610      	mov	r0, r2
 800847a:	f7ff fb14 	bl	8007aa6 <vListInsert>
}
 800847e:	e010      	b.n	80084a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008480:	4b0f      	ldr	r3, [pc, #60]	@ (80084c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	4b0a      	ldr	r3, [pc, #40]	@ (80084b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	3304      	adds	r3, #4
 800848a:	4619      	mov	r1, r3
 800848c:	4610      	mov	r0, r2
 800848e:	f7ff fb0a 	bl	8007aa6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008492:	4b0c      	ldr	r3, [pc, #48]	@ (80084c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	429a      	cmp	r2, r3
 800849a:	d202      	bcs.n	80084a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800849c:	4a09      	ldr	r2, [pc, #36]	@ (80084c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	6013      	str	r3, [r2, #0]
}
 80084a2:	bf00      	nop
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	2000068c 	.word	0x2000068c
 80084b0:	20000588 	.word	0x20000588
 80084b4:	20000690 	.word	0x20000690
 80084b8:	20000674 	.word	0x20000674
 80084bc:	20000644 	.word	0x20000644
 80084c0:	20000640 	.word	0x20000640
 80084c4:	200006a8 	.word	0x200006a8

080084c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3b04      	subs	r3, #4
 80084d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80084e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3b04      	subs	r3, #4
 80084e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	f023 0201 	bic.w	r2, r3, #1
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	3b04      	subs	r3, #4
 80084f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084f8:	4a0c      	ldr	r2, [pc, #48]	@ (800852c <pxPortInitialiseStack+0x64>)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3b14      	subs	r3, #20
 8008502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3b04      	subs	r3, #4
 800850e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f06f 0202 	mvn.w	r2, #2
 8008516:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	3b20      	subs	r3, #32
 800851c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800851e:	68fb      	ldr	r3, [r7, #12]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	08008531 	.word	0x08008531

08008530 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008536:	2300      	movs	r3, #0
 8008538:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800853a:	4b13      	ldr	r3, [pc, #76]	@ (8008588 <prvTaskExitError+0x58>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008542:	d00b      	beq.n	800855c <prvTaskExitError+0x2c>
	__asm volatile
 8008544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008548:	f383 8811 	msr	BASEPRI, r3
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	60fb      	str	r3, [r7, #12]
}
 8008556:	bf00      	nop
 8008558:	bf00      	nop
 800855a:	e7fd      	b.n	8008558 <prvTaskExitError+0x28>
	__asm volatile
 800855c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008560:	f383 8811 	msr	BASEPRI, r3
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	60bb      	str	r3, [r7, #8]
}
 800856e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008570:	bf00      	nop
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d0fc      	beq.n	8008572 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008578:	bf00      	nop
 800857a:	bf00      	nop
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	2000000c 	.word	0x2000000c
 800858c:	00000000 	.word	0x00000000

08008590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008590:	4b07      	ldr	r3, [pc, #28]	@ (80085b0 <pxCurrentTCBConst2>)
 8008592:	6819      	ldr	r1, [r3, #0]
 8008594:	6808      	ldr	r0, [r1, #0]
 8008596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800859a:	f380 8809 	msr	PSP, r0
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f04f 0000 	mov.w	r0, #0
 80085a6:	f380 8811 	msr	BASEPRI, r0
 80085aa:	4770      	bx	lr
 80085ac:	f3af 8000 	nop.w

080085b0 <pxCurrentTCBConst2>:
 80085b0:	20000588 	.word	0x20000588
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085b4:	bf00      	nop
 80085b6:	bf00      	nop

080085b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80085b8:	4808      	ldr	r0, [pc, #32]	@ (80085dc <prvPortStartFirstTask+0x24>)
 80085ba:	6800      	ldr	r0, [r0, #0]
 80085bc:	6800      	ldr	r0, [r0, #0]
 80085be:	f380 8808 	msr	MSP, r0
 80085c2:	f04f 0000 	mov.w	r0, #0
 80085c6:	f380 8814 	msr	CONTROL, r0
 80085ca:	b662      	cpsie	i
 80085cc:	b661      	cpsie	f
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	df00      	svc	0
 80085d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085da:	bf00      	nop
 80085dc:	e000ed08 	.word	0xe000ed08

080085e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085e6:	4b47      	ldr	r3, [pc, #284]	@ (8008704 <xPortStartScheduler+0x124>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a47      	ldr	r2, [pc, #284]	@ (8008708 <xPortStartScheduler+0x128>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d10b      	bne.n	8008608 <xPortStartScheduler+0x28>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	613b      	str	r3, [r7, #16]
}
 8008602:	bf00      	nop
 8008604:	bf00      	nop
 8008606:	e7fd      	b.n	8008604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008608:	4b3e      	ldr	r3, [pc, #248]	@ (8008704 <xPortStartScheduler+0x124>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a3f      	ldr	r2, [pc, #252]	@ (800870c <xPortStartScheduler+0x12c>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d10b      	bne.n	800862a <xPortStartScheduler+0x4a>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	60fb      	str	r3, [r7, #12]
}
 8008624:	bf00      	nop
 8008626:	bf00      	nop
 8008628:	e7fd      	b.n	8008626 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800862a:	4b39      	ldr	r3, [pc, #228]	@ (8008710 <xPortStartScheduler+0x130>)
 800862c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	b2db      	uxtb	r3, r3
 8008634:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	22ff      	movs	r2, #255	@ 0xff
 800863a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	b2db      	uxtb	r3, r3
 8008642:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008644:	78fb      	ldrb	r3, [r7, #3]
 8008646:	b2db      	uxtb	r3, r3
 8008648:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800864c:	b2da      	uxtb	r2, r3
 800864e:	4b31      	ldr	r3, [pc, #196]	@ (8008714 <xPortStartScheduler+0x134>)
 8008650:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008652:	4b31      	ldr	r3, [pc, #196]	@ (8008718 <xPortStartScheduler+0x138>)
 8008654:	2207      	movs	r2, #7
 8008656:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008658:	e009      	b.n	800866e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800865a:	4b2f      	ldr	r3, [pc, #188]	@ (8008718 <xPortStartScheduler+0x138>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3b01      	subs	r3, #1
 8008660:	4a2d      	ldr	r2, [pc, #180]	@ (8008718 <xPortStartScheduler+0x138>)
 8008662:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008664:	78fb      	ldrb	r3, [r7, #3]
 8008666:	b2db      	uxtb	r3, r3
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	b2db      	uxtb	r3, r3
 800866c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800866e:	78fb      	ldrb	r3, [r7, #3]
 8008670:	b2db      	uxtb	r3, r3
 8008672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008676:	2b80      	cmp	r3, #128	@ 0x80
 8008678:	d0ef      	beq.n	800865a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800867a:	4b27      	ldr	r3, [pc, #156]	@ (8008718 <xPortStartScheduler+0x138>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f1c3 0307 	rsb	r3, r3, #7
 8008682:	2b04      	cmp	r3, #4
 8008684:	d00b      	beq.n	800869e <xPortStartScheduler+0xbe>
	__asm volatile
 8008686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	60bb      	str	r3, [r7, #8]
}
 8008698:	bf00      	nop
 800869a:	bf00      	nop
 800869c:	e7fd      	b.n	800869a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800869e:	4b1e      	ldr	r3, [pc, #120]	@ (8008718 <xPortStartScheduler+0x138>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	021b      	lsls	r3, r3, #8
 80086a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008718 <xPortStartScheduler+0x138>)
 80086a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008718 <xPortStartScheduler+0x138>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80086b0:	4a19      	ldr	r2, [pc, #100]	@ (8008718 <xPortStartScheduler+0x138>)
 80086b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086bc:	4b17      	ldr	r3, [pc, #92]	@ (800871c <xPortStartScheduler+0x13c>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a16      	ldr	r2, [pc, #88]	@ (800871c <xPortStartScheduler+0x13c>)
 80086c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80086c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086c8:	4b14      	ldr	r3, [pc, #80]	@ (800871c <xPortStartScheduler+0x13c>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a13      	ldr	r2, [pc, #76]	@ (800871c <xPortStartScheduler+0x13c>)
 80086ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80086d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086d4:	f000 f8da 	bl	800888c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086d8:	4b11      	ldr	r3, [pc, #68]	@ (8008720 <xPortStartScheduler+0x140>)
 80086da:	2200      	movs	r2, #0
 80086dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086de:	f000 f8f9 	bl	80088d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086e2:	4b10      	ldr	r3, [pc, #64]	@ (8008724 <xPortStartScheduler+0x144>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a0f      	ldr	r2, [pc, #60]	@ (8008724 <xPortStartScheduler+0x144>)
 80086e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80086ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086ee:	f7ff ff63 	bl	80085b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086f2:	f7ff fd53 	bl	800819c <vTaskSwitchContext>
	prvTaskExitError();
 80086f6:	f7ff ff1b 	bl	8008530 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3718      	adds	r7, #24
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	e000ed00 	.word	0xe000ed00
 8008708:	410fc271 	.word	0x410fc271
 800870c:	410fc270 	.word	0x410fc270
 8008710:	e000e400 	.word	0xe000e400
 8008714:	200006b4 	.word	0x200006b4
 8008718:	200006b8 	.word	0x200006b8
 800871c:	e000ed20 	.word	0xe000ed20
 8008720:	2000000c 	.word	0x2000000c
 8008724:	e000ef34 	.word	0xe000ef34

08008728 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	607b      	str	r3, [r7, #4]
}
 8008740:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008742:	4b10      	ldr	r3, [pc, #64]	@ (8008784 <vPortEnterCritical+0x5c>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3301      	adds	r3, #1
 8008748:	4a0e      	ldr	r2, [pc, #56]	@ (8008784 <vPortEnterCritical+0x5c>)
 800874a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800874c:	4b0d      	ldr	r3, [pc, #52]	@ (8008784 <vPortEnterCritical+0x5c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d110      	bne.n	8008776 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008754:	4b0c      	ldr	r3, [pc, #48]	@ (8008788 <vPortEnterCritical+0x60>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00b      	beq.n	8008776 <vPortEnterCritical+0x4e>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	603b      	str	r3, [r7, #0]
}
 8008770:	bf00      	nop
 8008772:	bf00      	nop
 8008774:	e7fd      	b.n	8008772 <vPortEnterCritical+0x4a>
	}
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	2000000c 	.word	0x2000000c
 8008788:	e000ed04 	.word	0xe000ed04

0800878c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008792:	4b12      	ldr	r3, [pc, #72]	@ (80087dc <vPortExitCritical+0x50>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10b      	bne.n	80087b2 <vPortExitCritical+0x26>
	__asm volatile
 800879a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800879e:	f383 8811 	msr	BASEPRI, r3
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	f3bf 8f4f 	dsb	sy
 80087aa:	607b      	str	r3, [r7, #4]
}
 80087ac:	bf00      	nop
 80087ae:	bf00      	nop
 80087b0:	e7fd      	b.n	80087ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80087b2:	4b0a      	ldr	r3, [pc, #40]	@ (80087dc <vPortExitCritical+0x50>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	3b01      	subs	r3, #1
 80087b8:	4a08      	ldr	r2, [pc, #32]	@ (80087dc <vPortExitCritical+0x50>)
 80087ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087bc:	4b07      	ldr	r3, [pc, #28]	@ (80087dc <vPortExitCritical+0x50>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d105      	bne.n	80087d0 <vPortExitCritical+0x44>
 80087c4:	2300      	movs	r3, #0
 80087c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80087ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr
 80087dc:	2000000c 	.word	0x2000000c

080087e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087e0:	f3ef 8009 	mrs	r0, PSP
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	4b15      	ldr	r3, [pc, #84]	@ (8008840 <pxCurrentTCBConst>)
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	f01e 0f10 	tst.w	lr, #16
 80087f0:	bf08      	it	eq
 80087f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fa:	6010      	str	r0, [r2, #0]
 80087fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008800:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008804:	f380 8811 	msr	BASEPRI, r0
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f7ff fcc4 	bl	800819c <vTaskSwitchContext>
 8008814:	f04f 0000 	mov.w	r0, #0
 8008818:	f380 8811 	msr	BASEPRI, r0
 800881c:	bc09      	pop	{r0, r3}
 800881e:	6819      	ldr	r1, [r3, #0]
 8008820:	6808      	ldr	r0, [r1, #0]
 8008822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008826:	f01e 0f10 	tst.w	lr, #16
 800882a:	bf08      	it	eq
 800882c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008830:	f380 8809 	msr	PSP, r0
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	f3af 8000 	nop.w

08008840 <pxCurrentTCBConst>:
 8008840:	20000588 	.word	0x20000588
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008844:	bf00      	nop
 8008846:	bf00      	nop

08008848 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	607b      	str	r3, [r7, #4]
}
 8008860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008862:	f7ff fbe1 	bl	8008028 <xTaskIncrementTick>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d003      	beq.n	8008874 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800886c:	4b06      	ldr	r3, [pc, #24]	@ (8008888 <xPortSysTickHandler+0x40>)
 800886e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	2300      	movs	r3, #0
 8008876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	f383 8811 	msr	BASEPRI, r3
}
 800887e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008880:	bf00      	nop
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	e000ed04 	.word	0xe000ed04

0800888c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800888c:	b480      	push	{r7}
 800888e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008890:	4b0b      	ldr	r3, [pc, #44]	@ (80088c0 <vPortSetupTimerInterrupt+0x34>)
 8008892:	2200      	movs	r2, #0
 8008894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008896:	4b0b      	ldr	r3, [pc, #44]	@ (80088c4 <vPortSetupTimerInterrupt+0x38>)
 8008898:	2200      	movs	r2, #0
 800889a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800889c:	4b0a      	ldr	r3, [pc, #40]	@ (80088c8 <vPortSetupTimerInterrupt+0x3c>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a0a      	ldr	r2, [pc, #40]	@ (80088cc <vPortSetupTimerInterrupt+0x40>)
 80088a2:	fba2 2303 	umull	r2, r3, r2, r3
 80088a6:	099b      	lsrs	r3, r3, #6
 80088a8:	4a09      	ldr	r2, [pc, #36]	@ (80088d0 <vPortSetupTimerInterrupt+0x44>)
 80088aa:	3b01      	subs	r3, #1
 80088ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088ae:	4b04      	ldr	r3, [pc, #16]	@ (80088c0 <vPortSetupTimerInterrupt+0x34>)
 80088b0:	2207      	movs	r2, #7
 80088b2:	601a      	str	r2, [r3, #0]
}
 80088b4:	bf00      	nop
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	e000e010 	.word	0xe000e010
 80088c4:	e000e018 	.word	0xe000e018
 80088c8:	20000000 	.word	0x20000000
 80088cc:	10624dd3 	.word	0x10624dd3
 80088d0:	e000e014 	.word	0xe000e014

080088d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80088e4 <vPortEnableVFP+0x10>
 80088d8:	6801      	ldr	r1, [r0, #0]
 80088da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80088de:	6001      	str	r1, [r0, #0]
 80088e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088e2:	bf00      	nop
 80088e4:	e000ed88 	.word	0xe000ed88

080088e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b08a      	sub	sp, #40	@ 0x28
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088f0:	2300      	movs	r3, #0
 80088f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088f4:	f7ff faec 	bl	8007ed0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088f8:	4b5c      	ldr	r3, [pc, #368]	@ (8008a6c <pvPortMalloc+0x184>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d101      	bne.n	8008904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008900:	f000 f924 	bl	8008b4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008904:	4b5a      	ldr	r3, [pc, #360]	@ (8008a70 <pvPortMalloc+0x188>)
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4013      	ands	r3, r2
 800890c:	2b00      	cmp	r3, #0
 800890e:	f040 8095 	bne.w	8008a3c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d01e      	beq.n	8008956 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008918:	2208      	movs	r2, #8
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4413      	add	r3, r2
 800891e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f003 0307 	and.w	r3, r3, #7
 8008926:	2b00      	cmp	r3, #0
 8008928:	d015      	beq.n	8008956 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f023 0307 	bic.w	r3, r3, #7
 8008930:	3308      	adds	r3, #8
 8008932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f003 0307 	and.w	r3, r3, #7
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00b      	beq.n	8008956 <pvPortMalloc+0x6e>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	617b      	str	r3, [r7, #20]
}
 8008950:	bf00      	nop
 8008952:	bf00      	nop
 8008954:	e7fd      	b.n	8008952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d06f      	beq.n	8008a3c <pvPortMalloc+0x154>
 800895c:	4b45      	ldr	r3, [pc, #276]	@ (8008a74 <pvPortMalloc+0x18c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	429a      	cmp	r2, r3
 8008964:	d86a      	bhi.n	8008a3c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008966:	4b44      	ldr	r3, [pc, #272]	@ (8008a78 <pvPortMalloc+0x190>)
 8008968:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800896a:	4b43      	ldr	r3, [pc, #268]	@ (8008a78 <pvPortMalloc+0x190>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008970:	e004      	b.n	800897c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008974:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800897c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	429a      	cmp	r2, r3
 8008984:	d903      	bls.n	800898e <pvPortMalloc+0xa6>
 8008986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1f1      	bne.n	8008972 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800898e:	4b37      	ldr	r3, [pc, #220]	@ (8008a6c <pvPortMalloc+0x184>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008994:	429a      	cmp	r2, r3
 8008996:	d051      	beq.n	8008a3c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2208      	movs	r2, #8
 800899e:	4413      	add	r3, r2
 80089a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	6a3b      	ldr	r3, [r7, #32]
 80089a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ac:	685a      	ldr	r2, [r3, #4]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	1ad2      	subs	r2, r2, r3
 80089b2:	2308      	movs	r3, #8
 80089b4:	005b      	lsls	r3, r3, #1
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d920      	bls.n	80089fc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4413      	add	r3, r2
 80089c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	f003 0307 	and.w	r3, r3, #7
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00b      	beq.n	80089e4 <pvPortMalloc+0xfc>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d0:	f383 8811 	msr	BASEPRI, r3
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	613b      	str	r3, [r7, #16]
}
 80089de:	bf00      	nop
 80089e0:	bf00      	nop
 80089e2:	e7fd      	b.n	80089e0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e6:	685a      	ldr	r2, [r3, #4]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	1ad2      	subs	r2, r2, r3
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089f6:	69b8      	ldr	r0, [r7, #24]
 80089f8:	f000 f90a 	bl	8008c10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089fc:	4b1d      	ldr	r3, [pc, #116]	@ (8008a74 <pvPortMalloc+0x18c>)
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	4a1b      	ldr	r2, [pc, #108]	@ (8008a74 <pvPortMalloc+0x18c>)
 8008a08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8008a74 <pvPortMalloc+0x18c>)
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8008a7c <pvPortMalloc+0x194>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d203      	bcs.n	8008a1e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a16:	4b17      	ldr	r3, [pc, #92]	@ (8008a74 <pvPortMalloc+0x18c>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a18      	ldr	r2, [pc, #96]	@ (8008a7c <pvPortMalloc+0x194>)
 8008a1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	4b13      	ldr	r3, [pc, #76]	@ (8008a70 <pvPortMalloc+0x188>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	431a      	orrs	r2, r3
 8008a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2e:	2200      	movs	r2, #0
 8008a30:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a32:	4b13      	ldr	r3, [pc, #76]	@ (8008a80 <pvPortMalloc+0x198>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3301      	adds	r3, #1
 8008a38:	4a11      	ldr	r2, [pc, #68]	@ (8008a80 <pvPortMalloc+0x198>)
 8008a3a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a3c:	f7ff fa56 	bl	8007eec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	f003 0307 	and.w	r3, r3, #7
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00b      	beq.n	8008a62 <pvPortMalloc+0x17a>
	__asm volatile
 8008a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	60fb      	str	r3, [r7, #12]
}
 8008a5c:	bf00      	nop
 8008a5e:	bf00      	nop
 8008a60:	e7fd      	b.n	8008a5e <pvPortMalloc+0x176>
	return pvReturn;
 8008a62:	69fb      	ldr	r3, [r7, #28]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3728      	adds	r7, #40	@ 0x28
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	200012c4 	.word	0x200012c4
 8008a70:	200012d8 	.word	0x200012d8
 8008a74:	200012c8 	.word	0x200012c8
 8008a78:	200012bc 	.word	0x200012bc
 8008a7c:	200012cc 	.word	0x200012cc
 8008a80:	200012d0 	.word	0x200012d0

08008a84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d04f      	beq.n	8008b36 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a96:	2308      	movs	r3, #8
 8008a98:	425b      	negs	r3, r3
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	4b25      	ldr	r3, [pc, #148]	@ (8008b40 <vPortFree+0xbc>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4013      	ands	r3, r2
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10b      	bne.n	8008aca <vPortFree+0x46>
	__asm volatile
 8008ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	60fb      	str	r3, [r7, #12]
}
 8008ac4:	bf00      	nop
 8008ac6:	bf00      	nop
 8008ac8:	e7fd      	b.n	8008ac6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00b      	beq.n	8008aea <vPortFree+0x66>
	__asm volatile
 8008ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	60bb      	str	r3, [r7, #8]
}
 8008ae4:	bf00      	nop
 8008ae6:	bf00      	nop
 8008ae8:	e7fd      	b.n	8008ae6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	685a      	ldr	r2, [r3, #4]
 8008aee:	4b14      	ldr	r3, [pc, #80]	@ (8008b40 <vPortFree+0xbc>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4013      	ands	r3, r2
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d01e      	beq.n	8008b36 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d11a      	bne.n	8008b36 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	4b0e      	ldr	r3, [pc, #56]	@ (8008b40 <vPortFree+0xbc>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	43db      	mvns	r3, r3
 8008b0a:	401a      	ands	r2, r3
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b10:	f7ff f9de 	bl	8007ed0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	4b0a      	ldr	r3, [pc, #40]	@ (8008b44 <vPortFree+0xc0>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	4a09      	ldr	r2, [pc, #36]	@ (8008b44 <vPortFree+0xc0>)
 8008b20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b22:	6938      	ldr	r0, [r7, #16]
 8008b24:	f000 f874 	bl	8008c10 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b28:	4b07      	ldr	r3, [pc, #28]	@ (8008b48 <vPortFree+0xc4>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	4a06      	ldr	r2, [pc, #24]	@ (8008b48 <vPortFree+0xc4>)
 8008b30:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b32:	f7ff f9db 	bl	8007eec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b36:	bf00      	nop
 8008b38:	3718      	adds	r7, #24
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	200012d8 	.word	0x200012d8
 8008b44:	200012c8 	.word	0x200012c8
 8008b48:	200012d4 	.word	0x200012d4

08008b4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b52:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008b56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b58:	4b27      	ldr	r3, [pc, #156]	@ (8008bf8 <prvHeapInit+0xac>)
 8008b5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f003 0307 	and.w	r3, r3, #7
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00c      	beq.n	8008b80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	3307      	adds	r3, #7
 8008b6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f023 0307 	bic.w	r3, r3, #7
 8008b72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8008bf8 <prvHeapInit+0xac>)
 8008b7c:	4413      	add	r3, r2
 8008b7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b84:	4a1d      	ldr	r2, [pc, #116]	@ (8008bfc <prvHeapInit+0xb0>)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8008bfc <prvHeapInit+0xb0>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	68ba      	ldr	r2, [r7, #8]
 8008b94:	4413      	add	r3, r2
 8008b96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b98:	2208      	movs	r2, #8
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	1a9b      	subs	r3, r3, r2
 8008b9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f023 0307 	bic.w	r3, r3, #7
 8008ba6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	4a15      	ldr	r2, [pc, #84]	@ (8008c00 <prvHeapInit+0xb4>)
 8008bac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bae:	4b14      	ldr	r3, [pc, #80]	@ (8008c00 <prvHeapInit+0xb4>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bb6:	4b12      	ldr	r3, [pc, #72]	@ (8008c00 <prvHeapInit+0xb4>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	1ad2      	subs	r2, r2, r3
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8008c00 <prvHeapInit+0xb4>)
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8008c04 <prvHeapInit+0xb8>)
 8008bda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	4a09      	ldr	r2, [pc, #36]	@ (8008c08 <prvHeapInit+0xbc>)
 8008be2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008be4:	4b09      	ldr	r3, [pc, #36]	@ (8008c0c <prvHeapInit+0xc0>)
 8008be6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008bea:	601a      	str	r2, [r3, #0]
}
 8008bec:	bf00      	nop
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	200006bc 	.word	0x200006bc
 8008bfc:	200012bc 	.word	0x200012bc
 8008c00:	200012c4 	.word	0x200012c4
 8008c04:	200012cc 	.word	0x200012cc
 8008c08:	200012c8 	.word	0x200012c8
 8008c0c:	200012d8 	.word	0x200012d8

08008c10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c18:	4b28      	ldr	r3, [pc, #160]	@ (8008cbc <prvInsertBlockIntoFreeList+0xac>)
 8008c1a:	60fb      	str	r3, [r7, #12]
 8008c1c:	e002      	b.n	8008c24 <prvInsertBlockIntoFreeList+0x14>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d8f7      	bhi.n	8008c1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	4413      	add	r3, r2
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d108      	bne.n	8008c52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	685a      	ldr	r2, [r3, #4]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	441a      	add	r2, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	441a      	add	r2, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d118      	bne.n	8008c98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	4b15      	ldr	r3, [pc, #84]	@ (8008cc0 <prvInsertBlockIntoFreeList+0xb0>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d00d      	beq.n	8008c8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	441a      	add	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	601a      	str	r2, [r3, #0]
 8008c8c:	e008      	b.n	8008ca0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008cc0 <prvInsertBlockIntoFreeList+0xb0>)
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	601a      	str	r2, [r3, #0]
 8008c96:	e003      	b.n	8008ca0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d002      	beq.n	8008cae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cae:	bf00      	nop
 8008cb0:	3714      	adds	r7, #20
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	200012bc 	.word	0x200012bc
 8008cc0:	200012c4 	.word	0x200012c4

08008cc4 <__cvt>:
 8008cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc8:	ec57 6b10 	vmov	r6, r7, d0
 8008ccc:	2f00      	cmp	r7, #0
 8008cce:	460c      	mov	r4, r1
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	463b      	mov	r3, r7
 8008cd4:	bfbb      	ittet	lt
 8008cd6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008cda:	461f      	movlt	r7, r3
 8008cdc:	2300      	movge	r3, #0
 8008cde:	232d      	movlt	r3, #45	@ 0x2d
 8008ce0:	700b      	strb	r3, [r1, #0]
 8008ce2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ce4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008ce8:	4691      	mov	r9, r2
 8008cea:	f023 0820 	bic.w	r8, r3, #32
 8008cee:	bfbc      	itt	lt
 8008cf0:	4632      	movlt	r2, r6
 8008cf2:	4616      	movlt	r6, r2
 8008cf4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008cf8:	d005      	beq.n	8008d06 <__cvt+0x42>
 8008cfa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008cfe:	d100      	bne.n	8008d02 <__cvt+0x3e>
 8008d00:	3401      	adds	r4, #1
 8008d02:	2102      	movs	r1, #2
 8008d04:	e000      	b.n	8008d08 <__cvt+0x44>
 8008d06:	2103      	movs	r1, #3
 8008d08:	ab03      	add	r3, sp, #12
 8008d0a:	9301      	str	r3, [sp, #4]
 8008d0c:	ab02      	add	r3, sp, #8
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	ec47 6b10 	vmov	d0, r6, r7
 8008d14:	4653      	mov	r3, sl
 8008d16:	4622      	mov	r2, r4
 8008d18:	f001 f882 	bl	8009e20 <_dtoa_r>
 8008d1c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008d20:	4605      	mov	r5, r0
 8008d22:	d119      	bne.n	8008d58 <__cvt+0x94>
 8008d24:	f019 0f01 	tst.w	r9, #1
 8008d28:	d00e      	beq.n	8008d48 <__cvt+0x84>
 8008d2a:	eb00 0904 	add.w	r9, r0, r4
 8008d2e:	2200      	movs	r2, #0
 8008d30:	2300      	movs	r3, #0
 8008d32:	4630      	mov	r0, r6
 8008d34:	4639      	mov	r1, r7
 8008d36:	f7f7 feef 	bl	8000b18 <__aeabi_dcmpeq>
 8008d3a:	b108      	cbz	r0, 8008d40 <__cvt+0x7c>
 8008d3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d40:	2230      	movs	r2, #48	@ 0x30
 8008d42:	9b03      	ldr	r3, [sp, #12]
 8008d44:	454b      	cmp	r3, r9
 8008d46:	d31e      	bcc.n	8008d86 <__cvt+0xc2>
 8008d48:	9b03      	ldr	r3, [sp, #12]
 8008d4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d4c:	1b5b      	subs	r3, r3, r5
 8008d4e:	4628      	mov	r0, r5
 8008d50:	6013      	str	r3, [r2, #0]
 8008d52:	b004      	add	sp, #16
 8008d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008d5c:	eb00 0904 	add.w	r9, r0, r4
 8008d60:	d1e5      	bne.n	8008d2e <__cvt+0x6a>
 8008d62:	7803      	ldrb	r3, [r0, #0]
 8008d64:	2b30      	cmp	r3, #48	@ 0x30
 8008d66:	d10a      	bne.n	8008d7e <__cvt+0xba>
 8008d68:	2200      	movs	r2, #0
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	4639      	mov	r1, r7
 8008d70:	f7f7 fed2 	bl	8000b18 <__aeabi_dcmpeq>
 8008d74:	b918      	cbnz	r0, 8008d7e <__cvt+0xba>
 8008d76:	f1c4 0401 	rsb	r4, r4, #1
 8008d7a:	f8ca 4000 	str.w	r4, [sl]
 8008d7e:	f8da 3000 	ldr.w	r3, [sl]
 8008d82:	4499      	add	r9, r3
 8008d84:	e7d3      	b.n	8008d2e <__cvt+0x6a>
 8008d86:	1c59      	adds	r1, r3, #1
 8008d88:	9103      	str	r1, [sp, #12]
 8008d8a:	701a      	strb	r2, [r3, #0]
 8008d8c:	e7d9      	b.n	8008d42 <__cvt+0x7e>

08008d8e <__exponent>:
 8008d8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d90:	2900      	cmp	r1, #0
 8008d92:	bfba      	itte	lt
 8008d94:	4249      	neglt	r1, r1
 8008d96:	232d      	movlt	r3, #45	@ 0x2d
 8008d98:	232b      	movge	r3, #43	@ 0x2b
 8008d9a:	2909      	cmp	r1, #9
 8008d9c:	7002      	strb	r2, [r0, #0]
 8008d9e:	7043      	strb	r3, [r0, #1]
 8008da0:	dd29      	ble.n	8008df6 <__exponent+0x68>
 8008da2:	f10d 0307 	add.w	r3, sp, #7
 8008da6:	461d      	mov	r5, r3
 8008da8:	270a      	movs	r7, #10
 8008daa:	461a      	mov	r2, r3
 8008dac:	fbb1 f6f7 	udiv	r6, r1, r7
 8008db0:	fb07 1416 	mls	r4, r7, r6, r1
 8008db4:	3430      	adds	r4, #48	@ 0x30
 8008db6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008dba:	460c      	mov	r4, r1
 8008dbc:	2c63      	cmp	r4, #99	@ 0x63
 8008dbe:	f103 33ff 	add.w	r3, r3, #4294967295
 8008dc2:	4631      	mov	r1, r6
 8008dc4:	dcf1      	bgt.n	8008daa <__exponent+0x1c>
 8008dc6:	3130      	adds	r1, #48	@ 0x30
 8008dc8:	1e94      	subs	r4, r2, #2
 8008dca:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008dce:	1c41      	adds	r1, r0, #1
 8008dd0:	4623      	mov	r3, r4
 8008dd2:	42ab      	cmp	r3, r5
 8008dd4:	d30a      	bcc.n	8008dec <__exponent+0x5e>
 8008dd6:	f10d 0309 	add.w	r3, sp, #9
 8008dda:	1a9b      	subs	r3, r3, r2
 8008ddc:	42ac      	cmp	r4, r5
 8008dde:	bf88      	it	hi
 8008de0:	2300      	movhi	r3, #0
 8008de2:	3302      	adds	r3, #2
 8008de4:	4403      	add	r3, r0
 8008de6:	1a18      	subs	r0, r3, r0
 8008de8:	b003      	add	sp, #12
 8008dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dec:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008df0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008df4:	e7ed      	b.n	8008dd2 <__exponent+0x44>
 8008df6:	2330      	movs	r3, #48	@ 0x30
 8008df8:	3130      	adds	r1, #48	@ 0x30
 8008dfa:	7083      	strb	r3, [r0, #2]
 8008dfc:	70c1      	strb	r1, [r0, #3]
 8008dfe:	1d03      	adds	r3, r0, #4
 8008e00:	e7f1      	b.n	8008de6 <__exponent+0x58>
	...

08008e04 <_printf_float>:
 8008e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e08:	b08d      	sub	sp, #52	@ 0x34
 8008e0a:	460c      	mov	r4, r1
 8008e0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008e10:	4616      	mov	r6, r2
 8008e12:	461f      	mov	r7, r3
 8008e14:	4605      	mov	r5, r0
 8008e16:	f000 feef 	bl	8009bf8 <_localeconv_r>
 8008e1a:	6803      	ldr	r3, [r0, #0]
 8008e1c:	9304      	str	r3, [sp, #16]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7f7 fa4e 	bl	80002c0 <strlen>
 8008e24:	2300      	movs	r3, #0
 8008e26:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e28:	f8d8 3000 	ldr.w	r3, [r8]
 8008e2c:	9005      	str	r0, [sp, #20]
 8008e2e:	3307      	adds	r3, #7
 8008e30:	f023 0307 	bic.w	r3, r3, #7
 8008e34:	f103 0208 	add.w	r2, r3, #8
 8008e38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008e3c:	f8d4 b000 	ldr.w	fp, [r4]
 8008e40:	f8c8 2000 	str.w	r2, [r8]
 8008e44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008e4c:	9307      	str	r3, [sp, #28]
 8008e4e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008e56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e5a:	4b9c      	ldr	r3, [pc, #624]	@ (80090cc <_printf_float+0x2c8>)
 8008e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e60:	f7f7 fe8c 	bl	8000b7c <__aeabi_dcmpun>
 8008e64:	bb70      	cbnz	r0, 8008ec4 <_printf_float+0xc0>
 8008e66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e6a:	4b98      	ldr	r3, [pc, #608]	@ (80090cc <_printf_float+0x2c8>)
 8008e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e70:	f7f7 fe66 	bl	8000b40 <__aeabi_dcmple>
 8008e74:	bb30      	cbnz	r0, 8008ec4 <_printf_float+0xc0>
 8008e76:	2200      	movs	r2, #0
 8008e78:	2300      	movs	r3, #0
 8008e7a:	4640      	mov	r0, r8
 8008e7c:	4649      	mov	r1, r9
 8008e7e:	f7f7 fe55 	bl	8000b2c <__aeabi_dcmplt>
 8008e82:	b110      	cbz	r0, 8008e8a <_printf_float+0x86>
 8008e84:	232d      	movs	r3, #45	@ 0x2d
 8008e86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e8a:	4a91      	ldr	r2, [pc, #580]	@ (80090d0 <_printf_float+0x2cc>)
 8008e8c:	4b91      	ldr	r3, [pc, #580]	@ (80090d4 <_printf_float+0x2d0>)
 8008e8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008e92:	bf94      	ite	ls
 8008e94:	4690      	movls	r8, r2
 8008e96:	4698      	movhi	r8, r3
 8008e98:	2303      	movs	r3, #3
 8008e9a:	6123      	str	r3, [r4, #16]
 8008e9c:	f02b 0304 	bic.w	r3, fp, #4
 8008ea0:	6023      	str	r3, [r4, #0]
 8008ea2:	f04f 0900 	mov.w	r9, #0
 8008ea6:	9700      	str	r7, [sp, #0]
 8008ea8:	4633      	mov	r3, r6
 8008eaa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008eac:	4621      	mov	r1, r4
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f000 f9d2 	bl	8009258 <_printf_common>
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	f040 808d 	bne.w	8008fd4 <_printf_float+0x1d0>
 8008eba:	f04f 30ff 	mov.w	r0, #4294967295
 8008ebe:	b00d      	add	sp, #52	@ 0x34
 8008ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec4:	4642      	mov	r2, r8
 8008ec6:	464b      	mov	r3, r9
 8008ec8:	4640      	mov	r0, r8
 8008eca:	4649      	mov	r1, r9
 8008ecc:	f7f7 fe56 	bl	8000b7c <__aeabi_dcmpun>
 8008ed0:	b140      	cbz	r0, 8008ee4 <_printf_float+0xe0>
 8008ed2:	464b      	mov	r3, r9
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	bfbc      	itt	lt
 8008ed8:	232d      	movlt	r3, #45	@ 0x2d
 8008eda:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008ede:	4a7e      	ldr	r2, [pc, #504]	@ (80090d8 <_printf_float+0x2d4>)
 8008ee0:	4b7e      	ldr	r3, [pc, #504]	@ (80090dc <_printf_float+0x2d8>)
 8008ee2:	e7d4      	b.n	8008e8e <_printf_float+0x8a>
 8008ee4:	6863      	ldr	r3, [r4, #4]
 8008ee6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008eea:	9206      	str	r2, [sp, #24]
 8008eec:	1c5a      	adds	r2, r3, #1
 8008eee:	d13b      	bne.n	8008f68 <_printf_float+0x164>
 8008ef0:	2306      	movs	r3, #6
 8008ef2:	6063      	str	r3, [r4, #4]
 8008ef4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008ef8:	2300      	movs	r3, #0
 8008efa:	6022      	str	r2, [r4, #0]
 8008efc:	9303      	str	r3, [sp, #12]
 8008efe:	ab0a      	add	r3, sp, #40	@ 0x28
 8008f00:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008f04:	ab09      	add	r3, sp, #36	@ 0x24
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	6861      	ldr	r1, [r4, #4]
 8008f0a:	ec49 8b10 	vmov	d0, r8, r9
 8008f0e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008f12:	4628      	mov	r0, r5
 8008f14:	f7ff fed6 	bl	8008cc4 <__cvt>
 8008f18:	9b06      	ldr	r3, [sp, #24]
 8008f1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f1c:	2b47      	cmp	r3, #71	@ 0x47
 8008f1e:	4680      	mov	r8, r0
 8008f20:	d129      	bne.n	8008f76 <_printf_float+0x172>
 8008f22:	1cc8      	adds	r0, r1, #3
 8008f24:	db02      	blt.n	8008f2c <_printf_float+0x128>
 8008f26:	6863      	ldr	r3, [r4, #4]
 8008f28:	4299      	cmp	r1, r3
 8008f2a:	dd41      	ble.n	8008fb0 <_printf_float+0x1ac>
 8008f2c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008f30:	fa5f fa8a 	uxtb.w	sl, sl
 8008f34:	3901      	subs	r1, #1
 8008f36:	4652      	mov	r2, sl
 8008f38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008f3c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f3e:	f7ff ff26 	bl	8008d8e <__exponent>
 8008f42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f44:	1813      	adds	r3, r2, r0
 8008f46:	2a01      	cmp	r2, #1
 8008f48:	4681      	mov	r9, r0
 8008f4a:	6123      	str	r3, [r4, #16]
 8008f4c:	dc02      	bgt.n	8008f54 <_printf_float+0x150>
 8008f4e:	6822      	ldr	r2, [r4, #0]
 8008f50:	07d2      	lsls	r2, r2, #31
 8008f52:	d501      	bpl.n	8008f58 <_printf_float+0x154>
 8008f54:	3301      	adds	r3, #1
 8008f56:	6123      	str	r3, [r4, #16]
 8008f58:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d0a2      	beq.n	8008ea6 <_printf_float+0xa2>
 8008f60:	232d      	movs	r3, #45	@ 0x2d
 8008f62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f66:	e79e      	b.n	8008ea6 <_printf_float+0xa2>
 8008f68:	9a06      	ldr	r2, [sp, #24]
 8008f6a:	2a47      	cmp	r2, #71	@ 0x47
 8008f6c:	d1c2      	bne.n	8008ef4 <_printf_float+0xf0>
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1c0      	bne.n	8008ef4 <_printf_float+0xf0>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e7bd      	b.n	8008ef2 <_printf_float+0xee>
 8008f76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f7a:	d9db      	bls.n	8008f34 <_printf_float+0x130>
 8008f7c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008f80:	d118      	bne.n	8008fb4 <_printf_float+0x1b0>
 8008f82:	2900      	cmp	r1, #0
 8008f84:	6863      	ldr	r3, [r4, #4]
 8008f86:	dd0b      	ble.n	8008fa0 <_printf_float+0x19c>
 8008f88:	6121      	str	r1, [r4, #16]
 8008f8a:	b913      	cbnz	r3, 8008f92 <_printf_float+0x18e>
 8008f8c:	6822      	ldr	r2, [r4, #0]
 8008f8e:	07d0      	lsls	r0, r2, #31
 8008f90:	d502      	bpl.n	8008f98 <_printf_float+0x194>
 8008f92:	3301      	adds	r3, #1
 8008f94:	440b      	add	r3, r1
 8008f96:	6123      	str	r3, [r4, #16]
 8008f98:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008f9a:	f04f 0900 	mov.w	r9, #0
 8008f9e:	e7db      	b.n	8008f58 <_printf_float+0x154>
 8008fa0:	b913      	cbnz	r3, 8008fa8 <_printf_float+0x1a4>
 8008fa2:	6822      	ldr	r2, [r4, #0]
 8008fa4:	07d2      	lsls	r2, r2, #31
 8008fa6:	d501      	bpl.n	8008fac <_printf_float+0x1a8>
 8008fa8:	3302      	adds	r3, #2
 8008faa:	e7f4      	b.n	8008f96 <_printf_float+0x192>
 8008fac:	2301      	movs	r3, #1
 8008fae:	e7f2      	b.n	8008f96 <_printf_float+0x192>
 8008fb0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008fb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fb6:	4299      	cmp	r1, r3
 8008fb8:	db05      	blt.n	8008fc6 <_printf_float+0x1c2>
 8008fba:	6823      	ldr	r3, [r4, #0]
 8008fbc:	6121      	str	r1, [r4, #16]
 8008fbe:	07d8      	lsls	r0, r3, #31
 8008fc0:	d5ea      	bpl.n	8008f98 <_printf_float+0x194>
 8008fc2:	1c4b      	adds	r3, r1, #1
 8008fc4:	e7e7      	b.n	8008f96 <_printf_float+0x192>
 8008fc6:	2900      	cmp	r1, #0
 8008fc8:	bfd4      	ite	le
 8008fca:	f1c1 0202 	rsble	r2, r1, #2
 8008fce:	2201      	movgt	r2, #1
 8008fd0:	4413      	add	r3, r2
 8008fd2:	e7e0      	b.n	8008f96 <_printf_float+0x192>
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	055a      	lsls	r2, r3, #21
 8008fd8:	d407      	bmi.n	8008fea <_printf_float+0x1e6>
 8008fda:	6923      	ldr	r3, [r4, #16]
 8008fdc:	4642      	mov	r2, r8
 8008fde:	4631      	mov	r1, r6
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	47b8      	blx	r7
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	d12b      	bne.n	8009040 <_printf_float+0x23c>
 8008fe8:	e767      	b.n	8008eba <_printf_float+0xb6>
 8008fea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008fee:	f240 80dd 	bls.w	80091ac <_printf_float+0x3a8>
 8008ff2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	f7f7 fd8d 	bl	8000b18 <__aeabi_dcmpeq>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	d033      	beq.n	800906a <_printf_float+0x266>
 8009002:	4a37      	ldr	r2, [pc, #220]	@ (80090e0 <_printf_float+0x2dc>)
 8009004:	2301      	movs	r3, #1
 8009006:	4631      	mov	r1, r6
 8009008:	4628      	mov	r0, r5
 800900a:	47b8      	blx	r7
 800900c:	3001      	adds	r0, #1
 800900e:	f43f af54 	beq.w	8008eba <_printf_float+0xb6>
 8009012:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009016:	4543      	cmp	r3, r8
 8009018:	db02      	blt.n	8009020 <_printf_float+0x21c>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	07d8      	lsls	r0, r3, #31
 800901e:	d50f      	bpl.n	8009040 <_printf_float+0x23c>
 8009020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009024:	4631      	mov	r1, r6
 8009026:	4628      	mov	r0, r5
 8009028:	47b8      	blx	r7
 800902a:	3001      	adds	r0, #1
 800902c:	f43f af45 	beq.w	8008eba <_printf_float+0xb6>
 8009030:	f04f 0900 	mov.w	r9, #0
 8009034:	f108 38ff 	add.w	r8, r8, #4294967295
 8009038:	f104 0a1a 	add.w	sl, r4, #26
 800903c:	45c8      	cmp	r8, r9
 800903e:	dc09      	bgt.n	8009054 <_printf_float+0x250>
 8009040:	6823      	ldr	r3, [r4, #0]
 8009042:	079b      	lsls	r3, r3, #30
 8009044:	f100 8103 	bmi.w	800924e <_printf_float+0x44a>
 8009048:	68e0      	ldr	r0, [r4, #12]
 800904a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800904c:	4298      	cmp	r0, r3
 800904e:	bfb8      	it	lt
 8009050:	4618      	movlt	r0, r3
 8009052:	e734      	b.n	8008ebe <_printf_float+0xba>
 8009054:	2301      	movs	r3, #1
 8009056:	4652      	mov	r2, sl
 8009058:	4631      	mov	r1, r6
 800905a:	4628      	mov	r0, r5
 800905c:	47b8      	blx	r7
 800905e:	3001      	adds	r0, #1
 8009060:	f43f af2b 	beq.w	8008eba <_printf_float+0xb6>
 8009064:	f109 0901 	add.w	r9, r9, #1
 8009068:	e7e8      	b.n	800903c <_printf_float+0x238>
 800906a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800906c:	2b00      	cmp	r3, #0
 800906e:	dc39      	bgt.n	80090e4 <_printf_float+0x2e0>
 8009070:	4a1b      	ldr	r2, [pc, #108]	@ (80090e0 <_printf_float+0x2dc>)
 8009072:	2301      	movs	r3, #1
 8009074:	4631      	mov	r1, r6
 8009076:	4628      	mov	r0, r5
 8009078:	47b8      	blx	r7
 800907a:	3001      	adds	r0, #1
 800907c:	f43f af1d 	beq.w	8008eba <_printf_float+0xb6>
 8009080:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009084:	ea59 0303 	orrs.w	r3, r9, r3
 8009088:	d102      	bne.n	8009090 <_printf_float+0x28c>
 800908a:	6823      	ldr	r3, [r4, #0]
 800908c:	07d9      	lsls	r1, r3, #31
 800908e:	d5d7      	bpl.n	8009040 <_printf_float+0x23c>
 8009090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009094:	4631      	mov	r1, r6
 8009096:	4628      	mov	r0, r5
 8009098:	47b8      	blx	r7
 800909a:	3001      	adds	r0, #1
 800909c:	f43f af0d 	beq.w	8008eba <_printf_float+0xb6>
 80090a0:	f04f 0a00 	mov.w	sl, #0
 80090a4:	f104 0b1a 	add.w	fp, r4, #26
 80090a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090aa:	425b      	negs	r3, r3
 80090ac:	4553      	cmp	r3, sl
 80090ae:	dc01      	bgt.n	80090b4 <_printf_float+0x2b0>
 80090b0:	464b      	mov	r3, r9
 80090b2:	e793      	b.n	8008fdc <_printf_float+0x1d8>
 80090b4:	2301      	movs	r3, #1
 80090b6:	465a      	mov	r2, fp
 80090b8:	4631      	mov	r1, r6
 80090ba:	4628      	mov	r0, r5
 80090bc:	47b8      	blx	r7
 80090be:	3001      	adds	r0, #1
 80090c0:	f43f aefb 	beq.w	8008eba <_printf_float+0xb6>
 80090c4:	f10a 0a01 	add.w	sl, sl, #1
 80090c8:	e7ee      	b.n	80090a8 <_printf_float+0x2a4>
 80090ca:	bf00      	nop
 80090cc:	7fefffff 	.word	0x7fefffff
 80090d0:	0800d488 	.word	0x0800d488
 80090d4:	0800d48c 	.word	0x0800d48c
 80090d8:	0800d490 	.word	0x0800d490
 80090dc:	0800d494 	.word	0x0800d494
 80090e0:	0800d498 	.word	0x0800d498
 80090e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80090e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80090ea:	4553      	cmp	r3, sl
 80090ec:	bfa8      	it	ge
 80090ee:	4653      	movge	r3, sl
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	4699      	mov	r9, r3
 80090f4:	dc36      	bgt.n	8009164 <_printf_float+0x360>
 80090f6:	f04f 0b00 	mov.w	fp, #0
 80090fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090fe:	f104 021a 	add.w	r2, r4, #26
 8009102:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009104:	9306      	str	r3, [sp, #24]
 8009106:	eba3 0309 	sub.w	r3, r3, r9
 800910a:	455b      	cmp	r3, fp
 800910c:	dc31      	bgt.n	8009172 <_printf_float+0x36e>
 800910e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009110:	459a      	cmp	sl, r3
 8009112:	dc3a      	bgt.n	800918a <_printf_float+0x386>
 8009114:	6823      	ldr	r3, [r4, #0]
 8009116:	07da      	lsls	r2, r3, #31
 8009118:	d437      	bmi.n	800918a <_printf_float+0x386>
 800911a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800911c:	ebaa 0903 	sub.w	r9, sl, r3
 8009120:	9b06      	ldr	r3, [sp, #24]
 8009122:	ebaa 0303 	sub.w	r3, sl, r3
 8009126:	4599      	cmp	r9, r3
 8009128:	bfa8      	it	ge
 800912a:	4699      	movge	r9, r3
 800912c:	f1b9 0f00 	cmp.w	r9, #0
 8009130:	dc33      	bgt.n	800919a <_printf_float+0x396>
 8009132:	f04f 0800 	mov.w	r8, #0
 8009136:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800913a:	f104 0b1a 	add.w	fp, r4, #26
 800913e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009140:	ebaa 0303 	sub.w	r3, sl, r3
 8009144:	eba3 0309 	sub.w	r3, r3, r9
 8009148:	4543      	cmp	r3, r8
 800914a:	f77f af79 	ble.w	8009040 <_printf_float+0x23c>
 800914e:	2301      	movs	r3, #1
 8009150:	465a      	mov	r2, fp
 8009152:	4631      	mov	r1, r6
 8009154:	4628      	mov	r0, r5
 8009156:	47b8      	blx	r7
 8009158:	3001      	adds	r0, #1
 800915a:	f43f aeae 	beq.w	8008eba <_printf_float+0xb6>
 800915e:	f108 0801 	add.w	r8, r8, #1
 8009162:	e7ec      	b.n	800913e <_printf_float+0x33a>
 8009164:	4642      	mov	r2, r8
 8009166:	4631      	mov	r1, r6
 8009168:	4628      	mov	r0, r5
 800916a:	47b8      	blx	r7
 800916c:	3001      	adds	r0, #1
 800916e:	d1c2      	bne.n	80090f6 <_printf_float+0x2f2>
 8009170:	e6a3      	b.n	8008eba <_printf_float+0xb6>
 8009172:	2301      	movs	r3, #1
 8009174:	4631      	mov	r1, r6
 8009176:	4628      	mov	r0, r5
 8009178:	9206      	str	r2, [sp, #24]
 800917a:	47b8      	blx	r7
 800917c:	3001      	adds	r0, #1
 800917e:	f43f ae9c 	beq.w	8008eba <_printf_float+0xb6>
 8009182:	9a06      	ldr	r2, [sp, #24]
 8009184:	f10b 0b01 	add.w	fp, fp, #1
 8009188:	e7bb      	b.n	8009102 <_printf_float+0x2fe>
 800918a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800918e:	4631      	mov	r1, r6
 8009190:	4628      	mov	r0, r5
 8009192:	47b8      	blx	r7
 8009194:	3001      	adds	r0, #1
 8009196:	d1c0      	bne.n	800911a <_printf_float+0x316>
 8009198:	e68f      	b.n	8008eba <_printf_float+0xb6>
 800919a:	9a06      	ldr	r2, [sp, #24]
 800919c:	464b      	mov	r3, r9
 800919e:	4442      	add	r2, r8
 80091a0:	4631      	mov	r1, r6
 80091a2:	4628      	mov	r0, r5
 80091a4:	47b8      	blx	r7
 80091a6:	3001      	adds	r0, #1
 80091a8:	d1c3      	bne.n	8009132 <_printf_float+0x32e>
 80091aa:	e686      	b.n	8008eba <_printf_float+0xb6>
 80091ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80091b0:	f1ba 0f01 	cmp.w	sl, #1
 80091b4:	dc01      	bgt.n	80091ba <_printf_float+0x3b6>
 80091b6:	07db      	lsls	r3, r3, #31
 80091b8:	d536      	bpl.n	8009228 <_printf_float+0x424>
 80091ba:	2301      	movs	r3, #1
 80091bc:	4642      	mov	r2, r8
 80091be:	4631      	mov	r1, r6
 80091c0:	4628      	mov	r0, r5
 80091c2:	47b8      	blx	r7
 80091c4:	3001      	adds	r0, #1
 80091c6:	f43f ae78 	beq.w	8008eba <_printf_float+0xb6>
 80091ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091ce:	4631      	mov	r1, r6
 80091d0:	4628      	mov	r0, r5
 80091d2:	47b8      	blx	r7
 80091d4:	3001      	adds	r0, #1
 80091d6:	f43f ae70 	beq.w	8008eba <_printf_float+0xb6>
 80091da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80091de:	2200      	movs	r2, #0
 80091e0:	2300      	movs	r3, #0
 80091e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091e6:	f7f7 fc97 	bl	8000b18 <__aeabi_dcmpeq>
 80091ea:	b9c0      	cbnz	r0, 800921e <_printf_float+0x41a>
 80091ec:	4653      	mov	r3, sl
 80091ee:	f108 0201 	add.w	r2, r8, #1
 80091f2:	4631      	mov	r1, r6
 80091f4:	4628      	mov	r0, r5
 80091f6:	47b8      	blx	r7
 80091f8:	3001      	adds	r0, #1
 80091fa:	d10c      	bne.n	8009216 <_printf_float+0x412>
 80091fc:	e65d      	b.n	8008eba <_printf_float+0xb6>
 80091fe:	2301      	movs	r3, #1
 8009200:	465a      	mov	r2, fp
 8009202:	4631      	mov	r1, r6
 8009204:	4628      	mov	r0, r5
 8009206:	47b8      	blx	r7
 8009208:	3001      	adds	r0, #1
 800920a:	f43f ae56 	beq.w	8008eba <_printf_float+0xb6>
 800920e:	f108 0801 	add.w	r8, r8, #1
 8009212:	45d0      	cmp	r8, sl
 8009214:	dbf3      	blt.n	80091fe <_printf_float+0x3fa>
 8009216:	464b      	mov	r3, r9
 8009218:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800921c:	e6df      	b.n	8008fde <_printf_float+0x1da>
 800921e:	f04f 0800 	mov.w	r8, #0
 8009222:	f104 0b1a 	add.w	fp, r4, #26
 8009226:	e7f4      	b.n	8009212 <_printf_float+0x40e>
 8009228:	2301      	movs	r3, #1
 800922a:	4642      	mov	r2, r8
 800922c:	e7e1      	b.n	80091f2 <_printf_float+0x3ee>
 800922e:	2301      	movs	r3, #1
 8009230:	464a      	mov	r2, r9
 8009232:	4631      	mov	r1, r6
 8009234:	4628      	mov	r0, r5
 8009236:	47b8      	blx	r7
 8009238:	3001      	adds	r0, #1
 800923a:	f43f ae3e 	beq.w	8008eba <_printf_float+0xb6>
 800923e:	f108 0801 	add.w	r8, r8, #1
 8009242:	68e3      	ldr	r3, [r4, #12]
 8009244:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009246:	1a5b      	subs	r3, r3, r1
 8009248:	4543      	cmp	r3, r8
 800924a:	dcf0      	bgt.n	800922e <_printf_float+0x42a>
 800924c:	e6fc      	b.n	8009048 <_printf_float+0x244>
 800924e:	f04f 0800 	mov.w	r8, #0
 8009252:	f104 0919 	add.w	r9, r4, #25
 8009256:	e7f4      	b.n	8009242 <_printf_float+0x43e>

08009258 <_printf_common>:
 8009258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800925c:	4616      	mov	r6, r2
 800925e:	4698      	mov	r8, r3
 8009260:	688a      	ldr	r2, [r1, #8]
 8009262:	690b      	ldr	r3, [r1, #16]
 8009264:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009268:	4293      	cmp	r3, r2
 800926a:	bfb8      	it	lt
 800926c:	4613      	movlt	r3, r2
 800926e:	6033      	str	r3, [r6, #0]
 8009270:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009274:	4607      	mov	r7, r0
 8009276:	460c      	mov	r4, r1
 8009278:	b10a      	cbz	r2, 800927e <_printf_common+0x26>
 800927a:	3301      	adds	r3, #1
 800927c:	6033      	str	r3, [r6, #0]
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	0699      	lsls	r1, r3, #26
 8009282:	bf42      	ittt	mi
 8009284:	6833      	ldrmi	r3, [r6, #0]
 8009286:	3302      	addmi	r3, #2
 8009288:	6033      	strmi	r3, [r6, #0]
 800928a:	6825      	ldr	r5, [r4, #0]
 800928c:	f015 0506 	ands.w	r5, r5, #6
 8009290:	d106      	bne.n	80092a0 <_printf_common+0x48>
 8009292:	f104 0a19 	add.w	sl, r4, #25
 8009296:	68e3      	ldr	r3, [r4, #12]
 8009298:	6832      	ldr	r2, [r6, #0]
 800929a:	1a9b      	subs	r3, r3, r2
 800929c:	42ab      	cmp	r3, r5
 800929e:	dc26      	bgt.n	80092ee <_printf_common+0x96>
 80092a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80092a4:	6822      	ldr	r2, [r4, #0]
 80092a6:	3b00      	subs	r3, #0
 80092a8:	bf18      	it	ne
 80092aa:	2301      	movne	r3, #1
 80092ac:	0692      	lsls	r2, r2, #26
 80092ae:	d42b      	bmi.n	8009308 <_printf_common+0xb0>
 80092b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80092b4:	4641      	mov	r1, r8
 80092b6:	4638      	mov	r0, r7
 80092b8:	47c8      	blx	r9
 80092ba:	3001      	adds	r0, #1
 80092bc:	d01e      	beq.n	80092fc <_printf_common+0xa4>
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	6922      	ldr	r2, [r4, #16]
 80092c2:	f003 0306 	and.w	r3, r3, #6
 80092c6:	2b04      	cmp	r3, #4
 80092c8:	bf02      	ittt	eq
 80092ca:	68e5      	ldreq	r5, [r4, #12]
 80092cc:	6833      	ldreq	r3, [r6, #0]
 80092ce:	1aed      	subeq	r5, r5, r3
 80092d0:	68a3      	ldr	r3, [r4, #8]
 80092d2:	bf0c      	ite	eq
 80092d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092d8:	2500      	movne	r5, #0
 80092da:	4293      	cmp	r3, r2
 80092dc:	bfc4      	itt	gt
 80092de:	1a9b      	subgt	r3, r3, r2
 80092e0:	18ed      	addgt	r5, r5, r3
 80092e2:	2600      	movs	r6, #0
 80092e4:	341a      	adds	r4, #26
 80092e6:	42b5      	cmp	r5, r6
 80092e8:	d11a      	bne.n	8009320 <_printf_common+0xc8>
 80092ea:	2000      	movs	r0, #0
 80092ec:	e008      	b.n	8009300 <_printf_common+0xa8>
 80092ee:	2301      	movs	r3, #1
 80092f0:	4652      	mov	r2, sl
 80092f2:	4641      	mov	r1, r8
 80092f4:	4638      	mov	r0, r7
 80092f6:	47c8      	blx	r9
 80092f8:	3001      	adds	r0, #1
 80092fa:	d103      	bne.n	8009304 <_printf_common+0xac>
 80092fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009304:	3501      	adds	r5, #1
 8009306:	e7c6      	b.n	8009296 <_printf_common+0x3e>
 8009308:	18e1      	adds	r1, r4, r3
 800930a:	1c5a      	adds	r2, r3, #1
 800930c:	2030      	movs	r0, #48	@ 0x30
 800930e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009312:	4422      	add	r2, r4
 8009314:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009318:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800931c:	3302      	adds	r3, #2
 800931e:	e7c7      	b.n	80092b0 <_printf_common+0x58>
 8009320:	2301      	movs	r3, #1
 8009322:	4622      	mov	r2, r4
 8009324:	4641      	mov	r1, r8
 8009326:	4638      	mov	r0, r7
 8009328:	47c8      	blx	r9
 800932a:	3001      	adds	r0, #1
 800932c:	d0e6      	beq.n	80092fc <_printf_common+0xa4>
 800932e:	3601      	adds	r6, #1
 8009330:	e7d9      	b.n	80092e6 <_printf_common+0x8e>
	...

08009334 <_printf_i>:
 8009334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009338:	7e0f      	ldrb	r7, [r1, #24]
 800933a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800933c:	2f78      	cmp	r7, #120	@ 0x78
 800933e:	4691      	mov	r9, r2
 8009340:	4680      	mov	r8, r0
 8009342:	460c      	mov	r4, r1
 8009344:	469a      	mov	sl, r3
 8009346:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800934a:	d807      	bhi.n	800935c <_printf_i+0x28>
 800934c:	2f62      	cmp	r7, #98	@ 0x62
 800934e:	d80a      	bhi.n	8009366 <_printf_i+0x32>
 8009350:	2f00      	cmp	r7, #0
 8009352:	f000 80d2 	beq.w	80094fa <_printf_i+0x1c6>
 8009356:	2f58      	cmp	r7, #88	@ 0x58
 8009358:	f000 80b9 	beq.w	80094ce <_printf_i+0x19a>
 800935c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009360:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009364:	e03a      	b.n	80093dc <_printf_i+0xa8>
 8009366:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800936a:	2b15      	cmp	r3, #21
 800936c:	d8f6      	bhi.n	800935c <_printf_i+0x28>
 800936e:	a101      	add	r1, pc, #4	@ (adr r1, 8009374 <_printf_i+0x40>)
 8009370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009374:	080093cd 	.word	0x080093cd
 8009378:	080093e1 	.word	0x080093e1
 800937c:	0800935d 	.word	0x0800935d
 8009380:	0800935d 	.word	0x0800935d
 8009384:	0800935d 	.word	0x0800935d
 8009388:	0800935d 	.word	0x0800935d
 800938c:	080093e1 	.word	0x080093e1
 8009390:	0800935d 	.word	0x0800935d
 8009394:	0800935d 	.word	0x0800935d
 8009398:	0800935d 	.word	0x0800935d
 800939c:	0800935d 	.word	0x0800935d
 80093a0:	080094e1 	.word	0x080094e1
 80093a4:	0800940b 	.word	0x0800940b
 80093a8:	0800949b 	.word	0x0800949b
 80093ac:	0800935d 	.word	0x0800935d
 80093b0:	0800935d 	.word	0x0800935d
 80093b4:	08009503 	.word	0x08009503
 80093b8:	0800935d 	.word	0x0800935d
 80093bc:	0800940b 	.word	0x0800940b
 80093c0:	0800935d 	.word	0x0800935d
 80093c4:	0800935d 	.word	0x0800935d
 80093c8:	080094a3 	.word	0x080094a3
 80093cc:	6833      	ldr	r3, [r6, #0]
 80093ce:	1d1a      	adds	r2, r3, #4
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	6032      	str	r2, [r6, #0]
 80093d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80093dc:	2301      	movs	r3, #1
 80093de:	e09d      	b.n	800951c <_printf_i+0x1e8>
 80093e0:	6833      	ldr	r3, [r6, #0]
 80093e2:	6820      	ldr	r0, [r4, #0]
 80093e4:	1d19      	adds	r1, r3, #4
 80093e6:	6031      	str	r1, [r6, #0]
 80093e8:	0606      	lsls	r6, r0, #24
 80093ea:	d501      	bpl.n	80093f0 <_printf_i+0xbc>
 80093ec:	681d      	ldr	r5, [r3, #0]
 80093ee:	e003      	b.n	80093f8 <_printf_i+0xc4>
 80093f0:	0645      	lsls	r5, r0, #25
 80093f2:	d5fb      	bpl.n	80093ec <_printf_i+0xb8>
 80093f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80093f8:	2d00      	cmp	r5, #0
 80093fa:	da03      	bge.n	8009404 <_printf_i+0xd0>
 80093fc:	232d      	movs	r3, #45	@ 0x2d
 80093fe:	426d      	negs	r5, r5
 8009400:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009404:	4859      	ldr	r0, [pc, #356]	@ (800956c <_printf_i+0x238>)
 8009406:	230a      	movs	r3, #10
 8009408:	e011      	b.n	800942e <_printf_i+0xfa>
 800940a:	6821      	ldr	r1, [r4, #0]
 800940c:	6833      	ldr	r3, [r6, #0]
 800940e:	0608      	lsls	r0, r1, #24
 8009410:	f853 5b04 	ldr.w	r5, [r3], #4
 8009414:	d402      	bmi.n	800941c <_printf_i+0xe8>
 8009416:	0649      	lsls	r1, r1, #25
 8009418:	bf48      	it	mi
 800941a:	b2ad      	uxthmi	r5, r5
 800941c:	2f6f      	cmp	r7, #111	@ 0x6f
 800941e:	4853      	ldr	r0, [pc, #332]	@ (800956c <_printf_i+0x238>)
 8009420:	6033      	str	r3, [r6, #0]
 8009422:	bf14      	ite	ne
 8009424:	230a      	movne	r3, #10
 8009426:	2308      	moveq	r3, #8
 8009428:	2100      	movs	r1, #0
 800942a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800942e:	6866      	ldr	r6, [r4, #4]
 8009430:	60a6      	str	r6, [r4, #8]
 8009432:	2e00      	cmp	r6, #0
 8009434:	bfa2      	ittt	ge
 8009436:	6821      	ldrge	r1, [r4, #0]
 8009438:	f021 0104 	bicge.w	r1, r1, #4
 800943c:	6021      	strge	r1, [r4, #0]
 800943e:	b90d      	cbnz	r5, 8009444 <_printf_i+0x110>
 8009440:	2e00      	cmp	r6, #0
 8009442:	d04b      	beq.n	80094dc <_printf_i+0x1a8>
 8009444:	4616      	mov	r6, r2
 8009446:	fbb5 f1f3 	udiv	r1, r5, r3
 800944a:	fb03 5711 	mls	r7, r3, r1, r5
 800944e:	5dc7      	ldrb	r7, [r0, r7]
 8009450:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009454:	462f      	mov	r7, r5
 8009456:	42bb      	cmp	r3, r7
 8009458:	460d      	mov	r5, r1
 800945a:	d9f4      	bls.n	8009446 <_printf_i+0x112>
 800945c:	2b08      	cmp	r3, #8
 800945e:	d10b      	bne.n	8009478 <_printf_i+0x144>
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	07df      	lsls	r7, r3, #31
 8009464:	d508      	bpl.n	8009478 <_printf_i+0x144>
 8009466:	6923      	ldr	r3, [r4, #16]
 8009468:	6861      	ldr	r1, [r4, #4]
 800946a:	4299      	cmp	r1, r3
 800946c:	bfde      	ittt	le
 800946e:	2330      	movle	r3, #48	@ 0x30
 8009470:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009474:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009478:	1b92      	subs	r2, r2, r6
 800947a:	6122      	str	r2, [r4, #16]
 800947c:	f8cd a000 	str.w	sl, [sp]
 8009480:	464b      	mov	r3, r9
 8009482:	aa03      	add	r2, sp, #12
 8009484:	4621      	mov	r1, r4
 8009486:	4640      	mov	r0, r8
 8009488:	f7ff fee6 	bl	8009258 <_printf_common>
 800948c:	3001      	adds	r0, #1
 800948e:	d14a      	bne.n	8009526 <_printf_i+0x1f2>
 8009490:	f04f 30ff 	mov.w	r0, #4294967295
 8009494:	b004      	add	sp, #16
 8009496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800949a:	6823      	ldr	r3, [r4, #0]
 800949c:	f043 0320 	orr.w	r3, r3, #32
 80094a0:	6023      	str	r3, [r4, #0]
 80094a2:	4833      	ldr	r0, [pc, #204]	@ (8009570 <_printf_i+0x23c>)
 80094a4:	2778      	movs	r7, #120	@ 0x78
 80094a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	6831      	ldr	r1, [r6, #0]
 80094ae:	061f      	lsls	r7, r3, #24
 80094b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80094b4:	d402      	bmi.n	80094bc <_printf_i+0x188>
 80094b6:	065f      	lsls	r7, r3, #25
 80094b8:	bf48      	it	mi
 80094ba:	b2ad      	uxthmi	r5, r5
 80094bc:	6031      	str	r1, [r6, #0]
 80094be:	07d9      	lsls	r1, r3, #31
 80094c0:	bf44      	itt	mi
 80094c2:	f043 0320 	orrmi.w	r3, r3, #32
 80094c6:	6023      	strmi	r3, [r4, #0]
 80094c8:	b11d      	cbz	r5, 80094d2 <_printf_i+0x19e>
 80094ca:	2310      	movs	r3, #16
 80094cc:	e7ac      	b.n	8009428 <_printf_i+0xf4>
 80094ce:	4827      	ldr	r0, [pc, #156]	@ (800956c <_printf_i+0x238>)
 80094d0:	e7e9      	b.n	80094a6 <_printf_i+0x172>
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	f023 0320 	bic.w	r3, r3, #32
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	e7f6      	b.n	80094ca <_printf_i+0x196>
 80094dc:	4616      	mov	r6, r2
 80094de:	e7bd      	b.n	800945c <_printf_i+0x128>
 80094e0:	6833      	ldr	r3, [r6, #0]
 80094e2:	6825      	ldr	r5, [r4, #0]
 80094e4:	6961      	ldr	r1, [r4, #20]
 80094e6:	1d18      	adds	r0, r3, #4
 80094e8:	6030      	str	r0, [r6, #0]
 80094ea:	062e      	lsls	r6, r5, #24
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	d501      	bpl.n	80094f4 <_printf_i+0x1c0>
 80094f0:	6019      	str	r1, [r3, #0]
 80094f2:	e002      	b.n	80094fa <_printf_i+0x1c6>
 80094f4:	0668      	lsls	r0, r5, #25
 80094f6:	d5fb      	bpl.n	80094f0 <_printf_i+0x1bc>
 80094f8:	8019      	strh	r1, [r3, #0]
 80094fa:	2300      	movs	r3, #0
 80094fc:	6123      	str	r3, [r4, #16]
 80094fe:	4616      	mov	r6, r2
 8009500:	e7bc      	b.n	800947c <_printf_i+0x148>
 8009502:	6833      	ldr	r3, [r6, #0]
 8009504:	1d1a      	adds	r2, r3, #4
 8009506:	6032      	str	r2, [r6, #0]
 8009508:	681e      	ldr	r6, [r3, #0]
 800950a:	6862      	ldr	r2, [r4, #4]
 800950c:	2100      	movs	r1, #0
 800950e:	4630      	mov	r0, r6
 8009510:	f7f6 fe86 	bl	8000220 <memchr>
 8009514:	b108      	cbz	r0, 800951a <_printf_i+0x1e6>
 8009516:	1b80      	subs	r0, r0, r6
 8009518:	6060      	str	r0, [r4, #4]
 800951a:	6863      	ldr	r3, [r4, #4]
 800951c:	6123      	str	r3, [r4, #16]
 800951e:	2300      	movs	r3, #0
 8009520:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009524:	e7aa      	b.n	800947c <_printf_i+0x148>
 8009526:	6923      	ldr	r3, [r4, #16]
 8009528:	4632      	mov	r2, r6
 800952a:	4649      	mov	r1, r9
 800952c:	4640      	mov	r0, r8
 800952e:	47d0      	blx	sl
 8009530:	3001      	adds	r0, #1
 8009532:	d0ad      	beq.n	8009490 <_printf_i+0x15c>
 8009534:	6823      	ldr	r3, [r4, #0]
 8009536:	079b      	lsls	r3, r3, #30
 8009538:	d413      	bmi.n	8009562 <_printf_i+0x22e>
 800953a:	68e0      	ldr	r0, [r4, #12]
 800953c:	9b03      	ldr	r3, [sp, #12]
 800953e:	4298      	cmp	r0, r3
 8009540:	bfb8      	it	lt
 8009542:	4618      	movlt	r0, r3
 8009544:	e7a6      	b.n	8009494 <_printf_i+0x160>
 8009546:	2301      	movs	r3, #1
 8009548:	4632      	mov	r2, r6
 800954a:	4649      	mov	r1, r9
 800954c:	4640      	mov	r0, r8
 800954e:	47d0      	blx	sl
 8009550:	3001      	adds	r0, #1
 8009552:	d09d      	beq.n	8009490 <_printf_i+0x15c>
 8009554:	3501      	adds	r5, #1
 8009556:	68e3      	ldr	r3, [r4, #12]
 8009558:	9903      	ldr	r1, [sp, #12]
 800955a:	1a5b      	subs	r3, r3, r1
 800955c:	42ab      	cmp	r3, r5
 800955e:	dcf2      	bgt.n	8009546 <_printf_i+0x212>
 8009560:	e7eb      	b.n	800953a <_printf_i+0x206>
 8009562:	2500      	movs	r5, #0
 8009564:	f104 0619 	add.w	r6, r4, #25
 8009568:	e7f5      	b.n	8009556 <_printf_i+0x222>
 800956a:	bf00      	nop
 800956c:	0800d49a 	.word	0x0800d49a
 8009570:	0800d4ab 	.word	0x0800d4ab

08009574 <_scanf_float>:
 8009574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009578:	b087      	sub	sp, #28
 800957a:	4617      	mov	r7, r2
 800957c:	9303      	str	r3, [sp, #12]
 800957e:	688b      	ldr	r3, [r1, #8]
 8009580:	1e5a      	subs	r2, r3, #1
 8009582:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009586:	bf81      	itttt	hi
 8009588:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800958c:	eb03 0b05 	addhi.w	fp, r3, r5
 8009590:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009594:	608b      	strhi	r3, [r1, #8]
 8009596:	680b      	ldr	r3, [r1, #0]
 8009598:	460a      	mov	r2, r1
 800959a:	f04f 0500 	mov.w	r5, #0
 800959e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80095a2:	f842 3b1c 	str.w	r3, [r2], #28
 80095a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80095aa:	4680      	mov	r8, r0
 80095ac:	460c      	mov	r4, r1
 80095ae:	bf98      	it	ls
 80095b0:	f04f 0b00 	movls.w	fp, #0
 80095b4:	9201      	str	r2, [sp, #4]
 80095b6:	4616      	mov	r6, r2
 80095b8:	46aa      	mov	sl, r5
 80095ba:	46a9      	mov	r9, r5
 80095bc:	9502      	str	r5, [sp, #8]
 80095be:	68a2      	ldr	r2, [r4, #8]
 80095c0:	b152      	cbz	r2, 80095d8 <_scanf_float+0x64>
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	2b4e      	cmp	r3, #78	@ 0x4e
 80095c8:	d864      	bhi.n	8009694 <_scanf_float+0x120>
 80095ca:	2b40      	cmp	r3, #64	@ 0x40
 80095cc:	d83c      	bhi.n	8009648 <_scanf_float+0xd4>
 80095ce:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80095d2:	b2c8      	uxtb	r0, r1
 80095d4:	280e      	cmp	r0, #14
 80095d6:	d93a      	bls.n	800964e <_scanf_float+0xda>
 80095d8:	f1b9 0f00 	cmp.w	r9, #0
 80095dc:	d003      	beq.n	80095e6 <_scanf_float+0x72>
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095ea:	f1ba 0f01 	cmp.w	sl, #1
 80095ee:	f200 8117 	bhi.w	8009820 <_scanf_float+0x2ac>
 80095f2:	9b01      	ldr	r3, [sp, #4]
 80095f4:	429e      	cmp	r6, r3
 80095f6:	f200 8108 	bhi.w	800980a <_scanf_float+0x296>
 80095fa:	2001      	movs	r0, #1
 80095fc:	b007      	add	sp, #28
 80095fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009602:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009606:	2a0d      	cmp	r2, #13
 8009608:	d8e6      	bhi.n	80095d8 <_scanf_float+0x64>
 800960a:	a101      	add	r1, pc, #4	@ (adr r1, 8009610 <_scanf_float+0x9c>)
 800960c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009610:	08009757 	.word	0x08009757
 8009614:	080095d9 	.word	0x080095d9
 8009618:	080095d9 	.word	0x080095d9
 800961c:	080095d9 	.word	0x080095d9
 8009620:	080097b7 	.word	0x080097b7
 8009624:	0800978f 	.word	0x0800978f
 8009628:	080095d9 	.word	0x080095d9
 800962c:	080095d9 	.word	0x080095d9
 8009630:	08009765 	.word	0x08009765
 8009634:	080095d9 	.word	0x080095d9
 8009638:	080095d9 	.word	0x080095d9
 800963c:	080095d9 	.word	0x080095d9
 8009640:	080095d9 	.word	0x080095d9
 8009644:	0800971d 	.word	0x0800971d
 8009648:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800964c:	e7db      	b.n	8009606 <_scanf_float+0x92>
 800964e:	290e      	cmp	r1, #14
 8009650:	d8c2      	bhi.n	80095d8 <_scanf_float+0x64>
 8009652:	a001      	add	r0, pc, #4	@ (adr r0, 8009658 <_scanf_float+0xe4>)
 8009654:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009658:	0800970d 	.word	0x0800970d
 800965c:	080095d9 	.word	0x080095d9
 8009660:	0800970d 	.word	0x0800970d
 8009664:	080097a3 	.word	0x080097a3
 8009668:	080095d9 	.word	0x080095d9
 800966c:	080096b5 	.word	0x080096b5
 8009670:	080096f3 	.word	0x080096f3
 8009674:	080096f3 	.word	0x080096f3
 8009678:	080096f3 	.word	0x080096f3
 800967c:	080096f3 	.word	0x080096f3
 8009680:	080096f3 	.word	0x080096f3
 8009684:	080096f3 	.word	0x080096f3
 8009688:	080096f3 	.word	0x080096f3
 800968c:	080096f3 	.word	0x080096f3
 8009690:	080096f3 	.word	0x080096f3
 8009694:	2b6e      	cmp	r3, #110	@ 0x6e
 8009696:	d809      	bhi.n	80096ac <_scanf_float+0x138>
 8009698:	2b60      	cmp	r3, #96	@ 0x60
 800969a:	d8b2      	bhi.n	8009602 <_scanf_float+0x8e>
 800969c:	2b54      	cmp	r3, #84	@ 0x54
 800969e:	d07b      	beq.n	8009798 <_scanf_float+0x224>
 80096a0:	2b59      	cmp	r3, #89	@ 0x59
 80096a2:	d199      	bne.n	80095d8 <_scanf_float+0x64>
 80096a4:	2d07      	cmp	r5, #7
 80096a6:	d197      	bne.n	80095d8 <_scanf_float+0x64>
 80096a8:	2508      	movs	r5, #8
 80096aa:	e02c      	b.n	8009706 <_scanf_float+0x192>
 80096ac:	2b74      	cmp	r3, #116	@ 0x74
 80096ae:	d073      	beq.n	8009798 <_scanf_float+0x224>
 80096b0:	2b79      	cmp	r3, #121	@ 0x79
 80096b2:	e7f6      	b.n	80096a2 <_scanf_float+0x12e>
 80096b4:	6821      	ldr	r1, [r4, #0]
 80096b6:	05c8      	lsls	r0, r1, #23
 80096b8:	d51b      	bpl.n	80096f2 <_scanf_float+0x17e>
 80096ba:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80096be:	6021      	str	r1, [r4, #0]
 80096c0:	f109 0901 	add.w	r9, r9, #1
 80096c4:	f1bb 0f00 	cmp.w	fp, #0
 80096c8:	d003      	beq.n	80096d2 <_scanf_float+0x15e>
 80096ca:	3201      	adds	r2, #1
 80096cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80096d0:	60a2      	str	r2, [r4, #8]
 80096d2:	68a3      	ldr	r3, [r4, #8]
 80096d4:	3b01      	subs	r3, #1
 80096d6:	60a3      	str	r3, [r4, #8]
 80096d8:	6923      	ldr	r3, [r4, #16]
 80096da:	3301      	adds	r3, #1
 80096dc:	6123      	str	r3, [r4, #16]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	3b01      	subs	r3, #1
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	607b      	str	r3, [r7, #4]
 80096e6:	f340 8087 	ble.w	80097f8 <_scanf_float+0x284>
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	3301      	adds	r3, #1
 80096ee:	603b      	str	r3, [r7, #0]
 80096f0:	e765      	b.n	80095be <_scanf_float+0x4a>
 80096f2:	eb1a 0105 	adds.w	r1, sl, r5
 80096f6:	f47f af6f 	bne.w	80095d8 <_scanf_float+0x64>
 80096fa:	6822      	ldr	r2, [r4, #0]
 80096fc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009700:	6022      	str	r2, [r4, #0]
 8009702:	460d      	mov	r5, r1
 8009704:	468a      	mov	sl, r1
 8009706:	f806 3b01 	strb.w	r3, [r6], #1
 800970a:	e7e2      	b.n	80096d2 <_scanf_float+0x15e>
 800970c:	6822      	ldr	r2, [r4, #0]
 800970e:	0610      	lsls	r0, r2, #24
 8009710:	f57f af62 	bpl.w	80095d8 <_scanf_float+0x64>
 8009714:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009718:	6022      	str	r2, [r4, #0]
 800971a:	e7f4      	b.n	8009706 <_scanf_float+0x192>
 800971c:	f1ba 0f00 	cmp.w	sl, #0
 8009720:	d10e      	bne.n	8009740 <_scanf_float+0x1cc>
 8009722:	f1b9 0f00 	cmp.w	r9, #0
 8009726:	d10e      	bne.n	8009746 <_scanf_float+0x1d2>
 8009728:	6822      	ldr	r2, [r4, #0]
 800972a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800972e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009732:	d108      	bne.n	8009746 <_scanf_float+0x1d2>
 8009734:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009738:	6022      	str	r2, [r4, #0]
 800973a:	f04f 0a01 	mov.w	sl, #1
 800973e:	e7e2      	b.n	8009706 <_scanf_float+0x192>
 8009740:	f1ba 0f02 	cmp.w	sl, #2
 8009744:	d055      	beq.n	80097f2 <_scanf_float+0x27e>
 8009746:	2d01      	cmp	r5, #1
 8009748:	d002      	beq.n	8009750 <_scanf_float+0x1dc>
 800974a:	2d04      	cmp	r5, #4
 800974c:	f47f af44 	bne.w	80095d8 <_scanf_float+0x64>
 8009750:	3501      	adds	r5, #1
 8009752:	b2ed      	uxtb	r5, r5
 8009754:	e7d7      	b.n	8009706 <_scanf_float+0x192>
 8009756:	f1ba 0f01 	cmp.w	sl, #1
 800975a:	f47f af3d 	bne.w	80095d8 <_scanf_float+0x64>
 800975e:	f04f 0a02 	mov.w	sl, #2
 8009762:	e7d0      	b.n	8009706 <_scanf_float+0x192>
 8009764:	b97d      	cbnz	r5, 8009786 <_scanf_float+0x212>
 8009766:	f1b9 0f00 	cmp.w	r9, #0
 800976a:	f47f af38 	bne.w	80095de <_scanf_float+0x6a>
 800976e:	6822      	ldr	r2, [r4, #0]
 8009770:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009774:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009778:	f040 8108 	bne.w	800998c <_scanf_float+0x418>
 800977c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009780:	6022      	str	r2, [r4, #0]
 8009782:	2501      	movs	r5, #1
 8009784:	e7bf      	b.n	8009706 <_scanf_float+0x192>
 8009786:	2d03      	cmp	r5, #3
 8009788:	d0e2      	beq.n	8009750 <_scanf_float+0x1dc>
 800978a:	2d05      	cmp	r5, #5
 800978c:	e7de      	b.n	800974c <_scanf_float+0x1d8>
 800978e:	2d02      	cmp	r5, #2
 8009790:	f47f af22 	bne.w	80095d8 <_scanf_float+0x64>
 8009794:	2503      	movs	r5, #3
 8009796:	e7b6      	b.n	8009706 <_scanf_float+0x192>
 8009798:	2d06      	cmp	r5, #6
 800979a:	f47f af1d 	bne.w	80095d8 <_scanf_float+0x64>
 800979e:	2507      	movs	r5, #7
 80097a0:	e7b1      	b.n	8009706 <_scanf_float+0x192>
 80097a2:	6822      	ldr	r2, [r4, #0]
 80097a4:	0591      	lsls	r1, r2, #22
 80097a6:	f57f af17 	bpl.w	80095d8 <_scanf_float+0x64>
 80097aa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80097ae:	6022      	str	r2, [r4, #0]
 80097b0:	f8cd 9008 	str.w	r9, [sp, #8]
 80097b4:	e7a7      	b.n	8009706 <_scanf_float+0x192>
 80097b6:	6822      	ldr	r2, [r4, #0]
 80097b8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80097bc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80097c0:	d006      	beq.n	80097d0 <_scanf_float+0x25c>
 80097c2:	0550      	lsls	r0, r2, #21
 80097c4:	f57f af08 	bpl.w	80095d8 <_scanf_float+0x64>
 80097c8:	f1b9 0f00 	cmp.w	r9, #0
 80097cc:	f000 80de 	beq.w	800998c <_scanf_float+0x418>
 80097d0:	0591      	lsls	r1, r2, #22
 80097d2:	bf58      	it	pl
 80097d4:	9902      	ldrpl	r1, [sp, #8]
 80097d6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80097da:	bf58      	it	pl
 80097dc:	eba9 0101 	subpl.w	r1, r9, r1
 80097e0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80097e4:	bf58      	it	pl
 80097e6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80097ea:	6022      	str	r2, [r4, #0]
 80097ec:	f04f 0900 	mov.w	r9, #0
 80097f0:	e789      	b.n	8009706 <_scanf_float+0x192>
 80097f2:	f04f 0a03 	mov.w	sl, #3
 80097f6:	e786      	b.n	8009706 <_scanf_float+0x192>
 80097f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80097fc:	4639      	mov	r1, r7
 80097fe:	4640      	mov	r0, r8
 8009800:	4798      	blx	r3
 8009802:	2800      	cmp	r0, #0
 8009804:	f43f aedb 	beq.w	80095be <_scanf_float+0x4a>
 8009808:	e6e6      	b.n	80095d8 <_scanf_float+0x64>
 800980a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800980e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009812:	463a      	mov	r2, r7
 8009814:	4640      	mov	r0, r8
 8009816:	4798      	blx	r3
 8009818:	6923      	ldr	r3, [r4, #16]
 800981a:	3b01      	subs	r3, #1
 800981c:	6123      	str	r3, [r4, #16]
 800981e:	e6e8      	b.n	80095f2 <_scanf_float+0x7e>
 8009820:	1e6b      	subs	r3, r5, #1
 8009822:	2b06      	cmp	r3, #6
 8009824:	d824      	bhi.n	8009870 <_scanf_float+0x2fc>
 8009826:	2d02      	cmp	r5, #2
 8009828:	d836      	bhi.n	8009898 <_scanf_float+0x324>
 800982a:	9b01      	ldr	r3, [sp, #4]
 800982c:	429e      	cmp	r6, r3
 800982e:	f67f aee4 	bls.w	80095fa <_scanf_float+0x86>
 8009832:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009836:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800983a:	463a      	mov	r2, r7
 800983c:	4640      	mov	r0, r8
 800983e:	4798      	blx	r3
 8009840:	6923      	ldr	r3, [r4, #16]
 8009842:	3b01      	subs	r3, #1
 8009844:	6123      	str	r3, [r4, #16]
 8009846:	e7f0      	b.n	800982a <_scanf_float+0x2b6>
 8009848:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800984c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009850:	463a      	mov	r2, r7
 8009852:	4640      	mov	r0, r8
 8009854:	4798      	blx	r3
 8009856:	6923      	ldr	r3, [r4, #16]
 8009858:	3b01      	subs	r3, #1
 800985a:	6123      	str	r3, [r4, #16]
 800985c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009860:	fa5f fa8a 	uxtb.w	sl, sl
 8009864:	f1ba 0f02 	cmp.w	sl, #2
 8009868:	d1ee      	bne.n	8009848 <_scanf_float+0x2d4>
 800986a:	3d03      	subs	r5, #3
 800986c:	b2ed      	uxtb	r5, r5
 800986e:	1b76      	subs	r6, r6, r5
 8009870:	6823      	ldr	r3, [r4, #0]
 8009872:	05da      	lsls	r2, r3, #23
 8009874:	d530      	bpl.n	80098d8 <_scanf_float+0x364>
 8009876:	055b      	lsls	r3, r3, #21
 8009878:	d511      	bpl.n	800989e <_scanf_float+0x32a>
 800987a:	9b01      	ldr	r3, [sp, #4]
 800987c:	429e      	cmp	r6, r3
 800987e:	f67f aebc 	bls.w	80095fa <_scanf_float+0x86>
 8009882:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009886:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800988a:	463a      	mov	r2, r7
 800988c:	4640      	mov	r0, r8
 800988e:	4798      	blx	r3
 8009890:	6923      	ldr	r3, [r4, #16]
 8009892:	3b01      	subs	r3, #1
 8009894:	6123      	str	r3, [r4, #16]
 8009896:	e7f0      	b.n	800987a <_scanf_float+0x306>
 8009898:	46aa      	mov	sl, r5
 800989a:	46b3      	mov	fp, r6
 800989c:	e7de      	b.n	800985c <_scanf_float+0x2e8>
 800989e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80098a2:	6923      	ldr	r3, [r4, #16]
 80098a4:	2965      	cmp	r1, #101	@ 0x65
 80098a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80098aa:	f106 35ff 	add.w	r5, r6, #4294967295
 80098ae:	6123      	str	r3, [r4, #16]
 80098b0:	d00c      	beq.n	80098cc <_scanf_float+0x358>
 80098b2:	2945      	cmp	r1, #69	@ 0x45
 80098b4:	d00a      	beq.n	80098cc <_scanf_float+0x358>
 80098b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80098ba:	463a      	mov	r2, r7
 80098bc:	4640      	mov	r0, r8
 80098be:	4798      	blx	r3
 80098c0:	6923      	ldr	r3, [r4, #16]
 80098c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80098c6:	3b01      	subs	r3, #1
 80098c8:	1eb5      	subs	r5, r6, #2
 80098ca:	6123      	str	r3, [r4, #16]
 80098cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80098d0:	463a      	mov	r2, r7
 80098d2:	4640      	mov	r0, r8
 80098d4:	4798      	blx	r3
 80098d6:	462e      	mov	r6, r5
 80098d8:	6822      	ldr	r2, [r4, #0]
 80098da:	f012 0210 	ands.w	r2, r2, #16
 80098de:	d001      	beq.n	80098e4 <_scanf_float+0x370>
 80098e0:	2000      	movs	r0, #0
 80098e2:	e68b      	b.n	80095fc <_scanf_float+0x88>
 80098e4:	7032      	strb	r2, [r6, #0]
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80098ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098f0:	d11c      	bne.n	800992c <_scanf_float+0x3b8>
 80098f2:	9b02      	ldr	r3, [sp, #8]
 80098f4:	454b      	cmp	r3, r9
 80098f6:	eba3 0209 	sub.w	r2, r3, r9
 80098fa:	d123      	bne.n	8009944 <_scanf_float+0x3d0>
 80098fc:	9901      	ldr	r1, [sp, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	4640      	mov	r0, r8
 8009902:	f002 fc05 	bl	800c110 <_strtod_r>
 8009906:	9b03      	ldr	r3, [sp, #12]
 8009908:	6821      	ldr	r1, [r4, #0]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f011 0f02 	tst.w	r1, #2
 8009910:	ec57 6b10 	vmov	r6, r7, d0
 8009914:	f103 0204 	add.w	r2, r3, #4
 8009918:	d01f      	beq.n	800995a <_scanf_float+0x3e6>
 800991a:	9903      	ldr	r1, [sp, #12]
 800991c:	600a      	str	r2, [r1, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	e9c3 6700 	strd	r6, r7, [r3]
 8009924:	68e3      	ldr	r3, [r4, #12]
 8009926:	3301      	adds	r3, #1
 8009928:	60e3      	str	r3, [r4, #12]
 800992a:	e7d9      	b.n	80098e0 <_scanf_float+0x36c>
 800992c:	9b04      	ldr	r3, [sp, #16]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d0e4      	beq.n	80098fc <_scanf_float+0x388>
 8009932:	9905      	ldr	r1, [sp, #20]
 8009934:	230a      	movs	r3, #10
 8009936:	3101      	adds	r1, #1
 8009938:	4640      	mov	r0, r8
 800993a:	f002 fc69 	bl	800c210 <_strtol_r>
 800993e:	9b04      	ldr	r3, [sp, #16]
 8009940:	9e05      	ldr	r6, [sp, #20]
 8009942:	1ac2      	subs	r2, r0, r3
 8009944:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009948:	429e      	cmp	r6, r3
 800994a:	bf28      	it	cs
 800994c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009950:	4910      	ldr	r1, [pc, #64]	@ (8009994 <_scanf_float+0x420>)
 8009952:	4630      	mov	r0, r6
 8009954:	f000 f8e4 	bl	8009b20 <siprintf>
 8009958:	e7d0      	b.n	80098fc <_scanf_float+0x388>
 800995a:	f011 0f04 	tst.w	r1, #4
 800995e:	9903      	ldr	r1, [sp, #12]
 8009960:	600a      	str	r2, [r1, #0]
 8009962:	d1dc      	bne.n	800991e <_scanf_float+0x3aa>
 8009964:	681d      	ldr	r5, [r3, #0]
 8009966:	4632      	mov	r2, r6
 8009968:	463b      	mov	r3, r7
 800996a:	4630      	mov	r0, r6
 800996c:	4639      	mov	r1, r7
 800996e:	f7f7 f905 	bl	8000b7c <__aeabi_dcmpun>
 8009972:	b128      	cbz	r0, 8009980 <_scanf_float+0x40c>
 8009974:	4808      	ldr	r0, [pc, #32]	@ (8009998 <_scanf_float+0x424>)
 8009976:	f000 f9c5 	bl	8009d04 <nanf>
 800997a:	ed85 0a00 	vstr	s0, [r5]
 800997e:	e7d1      	b.n	8009924 <_scanf_float+0x3b0>
 8009980:	4630      	mov	r0, r6
 8009982:	4639      	mov	r1, r7
 8009984:	f7f7 f958 	bl	8000c38 <__aeabi_d2f>
 8009988:	6028      	str	r0, [r5, #0]
 800998a:	e7cb      	b.n	8009924 <_scanf_float+0x3b0>
 800998c:	f04f 0900 	mov.w	r9, #0
 8009990:	e629      	b.n	80095e6 <_scanf_float+0x72>
 8009992:	bf00      	nop
 8009994:	0800d4bc 	.word	0x0800d4bc
 8009998:	0800d855 	.word	0x0800d855

0800999c <std>:
 800999c:	2300      	movs	r3, #0
 800999e:	b510      	push	{r4, lr}
 80099a0:	4604      	mov	r4, r0
 80099a2:	e9c0 3300 	strd	r3, r3, [r0]
 80099a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099aa:	6083      	str	r3, [r0, #8]
 80099ac:	8181      	strh	r1, [r0, #12]
 80099ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80099b0:	81c2      	strh	r2, [r0, #14]
 80099b2:	6183      	str	r3, [r0, #24]
 80099b4:	4619      	mov	r1, r3
 80099b6:	2208      	movs	r2, #8
 80099b8:	305c      	adds	r0, #92	@ 0x5c
 80099ba:	f000 f914 	bl	8009be6 <memset>
 80099be:	4b0d      	ldr	r3, [pc, #52]	@ (80099f4 <std+0x58>)
 80099c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80099c2:	4b0d      	ldr	r3, [pc, #52]	@ (80099f8 <std+0x5c>)
 80099c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80099c6:	4b0d      	ldr	r3, [pc, #52]	@ (80099fc <std+0x60>)
 80099c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80099ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009a00 <std+0x64>)
 80099cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80099ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009a04 <std+0x68>)
 80099d0:	6224      	str	r4, [r4, #32]
 80099d2:	429c      	cmp	r4, r3
 80099d4:	d006      	beq.n	80099e4 <std+0x48>
 80099d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80099da:	4294      	cmp	r4, r2
 80099dc:	d002      	beq.n	80099e4 <std+0x48>
 80099de:	33d0      	adds	r3, #208	@ 0xd0
 80099e0:	429c      	cmp	r4, r3
 80099e2:	d105      	bne.n	80099f0 <std+0x54>
 80099e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80099e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099ec:	f000 b978 	b.w	8009ce0 <__retarget_lock_init_recursive>
 80099f0:	bd10      	pop	{r4, pc}
 80099f2:	bf00      	nop
 80099f4:	08009b61 	.word	0x08009b61
 80099f8:	08009b83 	.word	0x08009b83
 80099fc:	08009bbb 	.word	0x08009bbb
 8009a00:	08009bdf 	.word	0x08009bdf
 8009a04:	200012dc 	.word	0x200012dc

08009a08 <stdio_exit_handler>:
 8009a08:	4a02      	ldr	r2, [pc, #8]	@ (8009a14 <stdio_exit_handler+0xc>)
 8009a0a:	4903      	ldr	r1, [pc, #12]	@ (8009a18 <stdio_exit_handler+0x10>)
 8009a0c:	4803      	ldr	r0, [pc, #12]	@ (8009a1c <stdio_exit_handler+0x14>)
 8009a0e:	f000 b869 	b.w	8009ae4 <_fwalk_sglue>
 8009a12:	bf00      	nop
 8009a14:	20000010 	.word	0x20000010
 8009a18:	0800c5cd 	.word	0x0800c5cd
 8009a1c:	20000020 	.word	0x20000020

08009a20 <cleanup_stdio>:
 8009a20:	6841      	ldr	r1, [r0, #4]
 8009a22:	4b0c      	ldr	r3, [pc, #48]	@ (8009a54 <cleanup_stdio+0x34>)
 8009a24:	4299      	cmp	r1, r3
 8009a26:	b510      	push	{r4, lr}
 8009a28:	4604      	mov	r4, r0
 8009a2a:	d001      	beq.n	8009a30 <cleanup_stdio+0x10>
 8009a2c:	f002 fdce 	bl	800c5cc <_fflush_r>
 8009a30:	68a1      	ldr	r1, [r4, #8]
 8009a32:	4b09      	ldr	r3, [pc, #36]	@ (8009a58 <cleanup_stdio+0x38>)
 8009a34:	4299      	cmp	r1, r3
 8009a36:	d002      	beq.n	8009a3e <cleanup_stdio+0x1e>
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f002 fdc7 	bl	800c5cc <_fflush_r>
 8009a3e:	68e1      	ldr	r1, [r4, #12]
 8009a40:	4b06      	ldr	r3, [pc, #24]	@ (8009a5c <cleanup_stdio+0x3c>)
 8009a42:	4299      	cmp	r1, r3
 8009a44:	d004      	beq.n	8009a50 <cleanup_stdio+0x30>
 8009a46:	4620      	mov	r0, r4
 8009a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a4c:	f002 bdbe 	b.w	800c5cc <_fflush_r>
 8009a50:	bd10      	pop	{r4, pc}
 8009a52:	bf00      	nop
 8009a54:	200012dc 	.word	0x200012dc
 8009a58:	20001344 	.word	0x20001344
 8009a5c:	200013ac 	.word	0x200013ac

08009a60 <global_stdio_init.part.0>:
 8009a60:	b510      	push	{r4, lr}
 8009a62:	4b0b      	ldr	r3, [pc, #44]	@ (8009a90 <global_stdio_init.part.0+0x30>)
 8009a64:	4c0b      	ldr	r4, [pc, #44]	@ (8009a94 <global_stdio_init.part.0+0x34>)
 8009a66:	4a0c      	ldr	r2, [pc, #48]	@ (8009a98 <global_stdio_init.part.0+0x38>)
 8009a68:	601a      	str	r2, [r3, #0]
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	2104      	movs	r1, #4
 8009a70:	f7ff ff94 	bl	800999c <std>
 8009a74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009a78:	2201      	movs	r2, #1
 8009a7a:	2109      	movs	r1, #9
 8009a7c:	f7ff ff8e 	bl	800999c <std>
 8009a80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009a84:	2202      	movs	r2, #2
 8009a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a8a:	2112      	movs	r1, #18
 8009a8c:	f7ff bf86 	b.w	800999c <std>
 8009a90:	20001414 	.word	0x20001414
 8009a94:	200012dc 	.word	0x200012dc
 8009a98:	08009a09 	.word	0x08009a09

08009a9c <__sfp_lock_acquire>:
 8009a9c:	4801      	ldr	r0, [pc, #4]	@ (8009aa4 <__sfp_lock_acquire+0x8>)
 8009a9e:	f000 b920 	b.w	8009ce2 <__retarget_lock_acquire_recursive>
 8009aa2:	bf00      	nop
 8009aa4:	2000141d 	.word	0x2000141d

08009aa8 <__sfp_lock_release>:
 8009aa8:	4801      	ldr	r0, [pc, #4]	@ (8009ab0 <__sfp_lock_release+0x8>)
 8009aaa:	f000 b91b 	b.w	8009ce4 <__retarget_lock_release_recursive>
 8009aae:	bf00      	nop
 8009ab0:	2000141d 	.word	0x2000141d

08009ab4 <__sinit>:
 8009ab4:	b510      	push	{r4, lr}
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	f7ff fff0 	bl	8009a9c <__sfp_lock_acquire>
 8009abc:	6a23      	ldr	r3, [r4, #32]
 8009abe:	b11b      	cbz	r3, 8009ac8 <__sinit+0x14>
 8009ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ac4:	f7ff bff0 	b.w	8009aa8 <__sfp_lock_release>
 8009ac8:	4b04      	ldr	r3, [pc, #16]	@ (8009adc <__sinit+0x28>)
 8009aca:	6223      	str	r3, [r4, #32]
 8009acc:	4b04      	ldr	r3, [pc, #16]	@ (8009ae0 <__sinit+0x2c>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d1f5      	bne.n	8009ac0 <__sinit+0xc>
 8009ad4:	f7ff ffc4 	bl	8009a60 <global_stdio_init.part.0>
 8009ad8:	e7f2      	b.n	8009ac0 <__sinit+0xc>
 8009ada:	bf00      	nop
 8009adc:	08009a21 	.word	0x08009a21
 8009ae0:	20001414 	.word	0x20001414

08009ae4 <_fwalk_sglue>:
 8009ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ae8:	4607      	mov	r7, r0
 8009aea:	4688      	mov	r8, r1
 8009aec:	4614      	mov	r4, r2
 8009aee:	2600      	movs	r6, #0
 8009af0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009af4:	f1b9 0901 	subs.w	r9, r9, #1
 8009af8:	d505      	bpl.n	8009b06 <_fwalk_sglue+0x22>
 8009afa:	6824      	ldr	r4, [r4, #0]
 8009afc:	2c00      	cmp	r4, #0
 8009afe:	d1f7      	bne.n	8009af0 <_fwalk_sglue+0xc>
 8009b00:	4630      	mov	r0, r6
 8009b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b06:	89ab      	ldrh	r3, [r5, #12]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d907      	bls.n	8009b1c <_fwalk_sglue+0x38>
 8009b0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b10:	3301      	adds	r3, #1
 8009b12:	d003      	beq.n	8009b1c <_fwalk_sglue+0x38>
 8009b14:	4629      	mov	r1, r5
 8009b16:	4638      	mov	r0, r7
 8009b18:	47c0      	blx	r8
 8009b1a:	4306      	orrs	r6, r0
 8009b1c:	3568      	adds	r5, #104	@ 0x68
 8009b1e:	e7e9      	b.n	8009af4 <_fwalk_sglue+0x10>

08009b20 <siprintf>:
 8009b20:	b40e      	push	{r1, r2, r3}
 8009b22:	b500      	push	{lr}
 8009b24:	b09c      	sub	sp, #112	@ 0x70
 8009b26:	ab1d      	add	r3, sp, #116	@ 0x74
 8009b28:	9002      	str	r0, [sp, #8]
 8009b2a:	9006      	str	r0, [sp, #24]
 8009b2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009b30:	4809      	ldr	r0, [pc, #36]	@ (8009b58 <siprintf+0x38>)
 8009b32:	9107      	str	r1, [sp, #28]
 8009b34:	9104      	str	r1, [sp, #16]
 8009b36:	4909      	ldr	r1, [pc, #36]	@ (8009b5c <siprintf+0x3c>)
 8009b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b3c:	9105      	str	r1, [sp, #20]
 8009b3e:	6800      	ldr	r0, [r0, #0]
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	a902      	add	r1, sp, #8
 8009b44:	f002 fbc2 	bl	800c2cc <_svfiprintf_r>
 8009b48:	9b02      	ldr	r3, [sp, #8]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	701a      	strb	r2, [r3, #0]
 8009b4e:	b01c      	add	sp, #112	@ 0x70
 8009b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b54:	b003      	add	sp, #12
 8009b56:	4770      	bx	lr
 8009b58:	2000001c 	.word	0x2000001c
 8009b5c:	ffff0208 	.word	0xffff0208

08009b60 <__sread>:
 8009b60:	b510      	push	{r4, lr}
 8009b62:	460c      	mov	r4, r1
 8009b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b68:	f000 f86c 	bl	8009c44 <_read_r>
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	bfab      	itete	ge
 8009b70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009b72:	89a3      	ldrhlt	r3, [r4, #12]
 8009b74:	181b      	addge	r3, r3, r0
 8009b76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009b7a:	bfac      	ite	ge
 8009b7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b7e:	81a3      	strhlt	r3, [r4, #12]
 8009b80:	bd10      	pop	{r4, pc}

08009b82 <__swrite>:
 8009b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b86:	461f      	mov	r7, r3
 8009b88:	898b      	ldrh	r3, [r1, #12]
 8009b8a:	05db      	lsls	r3, r3, #23
 8009b8c:	4605      	mov	r5, r0
 8009b8e:	460c      	mov	r4, r1
 8009b90:	4616      	mov	r6, r2
 8009b92:	d505      	bpl.n	8009ba0 <__swrite+0x1e>
 8009b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b98:	2302      	movs	r3, #2
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f000 f840 	bl	8009c20 <_lseek_r>
 8009ba0:	89a3      	ldrh	r3, [r4, #12]
 8009ba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ba6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009baa:	81a3      	strh	r3, [r4, #12]
 8009bac:	4632      	mov	r2, r6
 8009bae:	463b      	mov	r3, r7
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb6:	f000 b857 	b.w	8009c68 <_write_r>

08009bba <__sseek>:
 8009bba:	b510      	push	{r4, lr}
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bc2:	f000 f82d 	bl	8009c20 <_lseek_r>
 8009bc6:	1c43      	adds	r3, r0, #1
 8009bc8:	89a3      	ldrh	r3, [r4, #12]
 8009bca:	bf15      	itete	ne
 8009bcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009bce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009bd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009bd6:	81a3      	strheq	r3, [r4, #12]
 8009bd8:	bf18      	it	ne
 8009bda:	81a3      	strhne	r3, [r4, #12]
 8009bdc:	bd10      	pop	{r4, pc}

08009bde <__sclose>:
 8009bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009be2:	f000 b80d 	b.w	8009c00 <_close_r>

08009be6 <memset>:
 8009be6:	4402      	add	r2, r0
 8009be8:	4603      	mov	r3, r0
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d100      	bne.n	8009bf0 <memset+0xa>
 8009bee:	4770      	bx	lr
 8009bf0:	f803 1b01 	strb.w	r1, [r3], #1
 8009bf4:	e7f9      	b.n	8009bea <memset+0x4>
	...

08009bf8 <_localeconv_r>:
 8009bf8:	4800      	ldr	r0, [pc, #0]	@ (8009bfc <_localeconv_r+0x4>)
 8009bfa:	4770      	bx	lr
 8009bfc:	2000015c 	.word	0x2000015c

08009c00 <_close_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4d06      	ldr	r5, [pc, #24]	@ (8009c1c <_close_r+0x1c>)
 8009c04:	2300      	movs	r3, #0
 8009c06:	4604      	mov	r4, r0
 8009c08:	4608      	mov	r0, r1
 8009c0a:	602b      	str	r3, [r5, #0]
 8009c0c:	f7f7 fece 	bl	80019ac <_close>
 8009c10:	1c43      	adds	r3, r0, #1
 8009c12:	d102      	bne.n	8009c1a <_close_r+0x1a>
 8009c14:	682b      	ldr	r3, [r5, #0]
 8009c16:	b103      	cbz	r3, 8009c1a <_close_r+0x1a>
 8009c18:	6023      	str	r3, [r4, #0]
 8009c1a:	bd38      	pop	{r3, r4, r5, pc}
 8009c1c:	20001418 	.word	0x20001418

08009c20 <_lseek_r>:
 8009c20:	b538      	push	{r3, r4, r5, lr}
 8009c22:	4d07      	ldr	r5, [pc, #28]	@ (8009c40 <_lseek_r+0x20>)
 8009c24:	4604      	mov	r4, r0
 8009c26:	4608      	mov	r0, r1
 8009c28:	4611      	mov	r1, r2
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	602a      	str	r2, [r5, #0]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	f7f7 fee3 	bl	80019fa <_lseek>
 8009c34:	1c43      	adds	r3, r0, #1
 8009c36:	d102      	bne.n	8009c3e <_lseek_r+0x1e>
 8009c38:	682b      	ldr	r3, [r5, #0]
 8009c3a:	b103      	cbz	r3, 8009c3e <_lseek_r+0x1e>
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	bd38      	pop	{r3, r4, r5, pc}
 8009c40:	20001418 	.word	0x20001418

08009c44 <_read_r>:
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	4d07      	ldr	r5, [pc, #28]	@ (8009c64 <_read_r+0x20>)
 8009c48:	4604      	mov	r4, r0
 8009c4a:	4608      	mov	r0, r1
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	2200      	movs	r2, #0
 8009c50:	602a      	str	r2, [r5, #0]
 8009c52:	461a      	mov	r2, r3
 8009c54:	f7f7 fe71 	bl	800193a <_read>
 8009c58:	1c43      	adds	r3, r0, #1
 8009c5a:	d102      	bne.n	8009c62 <_read_r+0x1e>
 8009c5c:	682b      	ldr	r3, [r5, #0]
 8009c5e:	b103      	cbz	r3, 8009c62 <_read_r+0x1e>
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	bd38      	pop	{r3, r4, r5, pc}
 8009c64:	20001418 	.word	0x20001418

08009c68 <_write_r>:
 8009c68:	b538      	push	{r3, r4, r5, lr}
 8009c6a:	4d07      	ldr	r5, [pc, #28]	@ (8009c88 <_write_r+0x20>)
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	4608      	mov	r0, r1
 8009c70:	4611      	mov	r1, r2
 8009c72:	2200      	movs	r2, #0
 8009c74:	602a      	str	r2, [r5, #0]
 8009c76:	461a      	mov	r2, r3
 8009c78:	f7f7 fe7c 	bl	8001974 <_write>
 8009c7c:	1c43      	adds	r3, r0, #1
 8009c7e:	d102      	bne.n	8009c86 <_write_r+0x1e>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	b103      	cbz	r3, 8009c86 <_write_r+0x1e>
 8009c84:	6023      	str	r3, [r4, #0]
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	20001418 	.word	0x20001418

08009c8c <__errno>:
 8009c8c:	4b01      	ldr	r3, [pc, #4]	@ (8009c94 <__errno+0x8>)
 8009c8e:	6818      	ldr	r0, [r3, #0]
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	2000001c 	.word	0x2000001c

08009c98 <__libc_init_array>:
 8009c98:	b570      	push	{r4, r5, r6, lr}
 8009c9a:	4d0d      	ldr	r5, [pc, #52]	@ (8009cd0 <__libc_init_array+0x38>)
 8009c9c:	4c0d      	ldr	r4, [pc, #52]	@ (8009cd4 <__libc_init_array+0x3c>)
 8009c9e:	1b64      	subs	r4, r4, r5
 8009ca0:	10a4      	asrs	r4, r4, #2
 8009ca2:	2600      	movs	r6, #0
 8009ca4:	42a6      	cmp	r6, r4
 8009ca6:	d109      	bne.n	8009cbc <__libc_init_array+0x24>
 8009ca8:	4d0b      	ldr	r5, [pc, #44]	@ (8009cd8 <__libc_init_array+0x40>)
 8009caa:	4c0c      	ldr	r4, [pc, #48]	@ (8009cdc <__libc_init_array+0x44>)
 8009cac:	f003 fb72 	bl	800d394 <_init>
 8009cb0:	1b64      	subs	r4, r4, r5
 8009cb2:	10a4      	asrs	r4, r4, #2
 8009cb4:	2600      	movs	r6, #0
 8009cb6:	42a6      	cmp	r6, r4
 8009cb8:	d105      	bne.n	8009cc6 <__libc_init_array+0x2e>
 8009cba:	bd70      	pop	{r4, r5, r6, pc}
 8009cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cc0:	4798      	blx	r3
 8009cc2:	3601      	adds	r6, #1
 8009cc4:	e7ee      	b.n	8009ca4 <__libc_init_array+0xc>
 8009cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cca:	4798      	blx	r3
 8009ccc:	3601      	adds	r6, #1
 8009cce:	e7f2      	b.n	8009cb6 <__libc_init_array+0x1e>
 8009cd0:	0800d8c0 	.word	0x0800d8c0
 8009cd4:	0800d8c0 	.word	0x0800d8c0
 8009cd8:	0800d8c0 	.word	0x0800d8c0
 8009cdc:	0800d8c4 	.word	0x0800d8c4

08009ce0 <__retarget_lock_init_recursive>:
 8009ce0:	4770      	bx	lr

08009ce2 <__retarget_lock_acquire_recursive>:
 8009ce2:	4770      	bx	lr

08009ce4 <__retarget_lock_release_recursive>:
 8009ce4:	4770      	bx	lr

08009ce6 <memcpy>:
 8009ce6:	440a      	add	r2, r1
 8009ce8:	4291      	cmp	r1, r2
 8009cea:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cee:	d100      	bne.n	8009cf2 <memcpy+0xc>
 8009cf0:	4770      	bx	lr
 8009cf2:	b510      	push	{r4, lr}
 8009cf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cfc:	4291      	cmp	r1, r2
 8009cfe:	d1f9      	bne.n	8009cf4 <memcpy+0xe>
 8009d00:	bd10      	pop	{r4, pc}
	...

08009d04 <nanf>:
 8009d04:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009d0c <nanf+0x8>
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	7fc00000 	.word	0x7fc00000

08009d10 <quorem>:
 8009d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d14:	6903      	ldr	r3, [r0, #16]
 8009d16:	690c      	ldr	r4, [r1, #16]
 8009d18:	42a3      	cmp	r3, r4
 8009d1a:	4607      	mov	r7, r0
 8009d1c:	db7e      	blt.n	8009e1c <quorem+0x10c>
 8009d1e:	3c01      	subs	r4, #1
 8009d20:	f101 0814 	add.w	r8, r1, #20
 8009d24:	00a3      	lsls	r3, r4, #2
 8009d26:	f100 0514 	add.w	r5, r0, #20
 8009d2a:	9300      	str	r3, [sp, #0]
 8009d2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d30:	9301      	str	r3, [sp, #4]
 8009d32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d42:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d46:	d32e      	bcc.n	8009da6 <quorem+0x96>
 8009d48:	f04f 0a00 	mov.w	sl, #0
 8009d4c:	46c4      	mov	ip, r8
 8009d4e:	46ae      	mov	lr, r5
 8009d50:	46d3      	mov	fp, sl
 8009d52:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d56:	b298      	uxth	r0, r3
 8009d58:	fb06 a000 	mla	r0, r6, r0, sl
 8009d5c:	0c02      	lsrs	r2, r0, #16
 8009d5e:	0c1b      	lsrs	r3, r3, #16
 8009d60:	fb06 2303 	mla	r3, r6, r3, r2
 8009d64:	f8de 2000 	ldr.w	r2, [lr]
 8009d68:	b280      	uxth	r0, r0
 8009d6a:	b292      	uxth	r2, r2
 8009d6c:	1a12      	subs	r2, r2, r0
 8009d6e:	445a      	add	r2, fp
 8009d70:	f8de 0000 	ldr.w	r0, [lr]
 8009d74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009d7e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009d82:	b292      	uxth	r2, r2
 8009d84:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009d88:	45e1      	cmp	r9, ip
 8009d8a:	f84e 2b04 	str.w	r2, [lr], #4
 8009d8e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009d92:	d2de      	bcs.n	8009d52 <quorem+0x42>
 8009d94:	9b00      	ldr	r3, [sp, #0]
 8009d96:	58eb      	ldr	r3, [r5, r3]
 8009d98:	b92b      	cbnz	r3, 8009da6 <quorem+0x96>
 8009d9a:	9b01      	ldr	r3, [sp, #4]
 8009d9c:	3b04      	subs	r3, #4
 8009d9e:	429d      	cmp	r5, r3
 8009da0:	461a      	mov	r2, r3
 8009da2:	d32f      	bcc.n	8009e04 <quorem+0xf4>
 8009da4:	613c      	str	r4, [r7, #16]
 8009da6:	4638      	mov	r0, r7
 8009da8:	f001 f9c2 	bl	800b130 <__mcmp>
 8009dac:	2800      	cmp	r0, #0
 8009dae:	db25      	blt.n	8009dfc <quorem+0xec>
 8009db0:	4629      	mov	r1, r5
 8009db2:	2000      	movs	r0, #0
 8009db4:	f858 2b04 	ldr.w	r2, [r8], #4
 8009db8:	f8d1 c000 	ldr.w	ip, [r1]
 8009dbc:	fa1f fe82 	uxth.w	lr, r2
 8009dc0:	fa1f f38c 	uxth.w	r3, ip
 8009dc4:	eba3 030e 	sub.w	r3, r3, lr
 8009dc8:	4403      	add	r3, r0
 8009dca:	0c12      	lsrs	r2, r2, #16
 8009dcc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009dd0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dda:	45c1      	cmp	r9, r8
 8009ddc:	f841 3b04 	str.w	r3, [r1], #4
 8009de0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009de4:	d2e6      	bcs.n	8009db4 <quorem+0xa4>
 8009de6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009dea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dee:	b922      	cbnz	r2, 8009dfa <quorem+0xea>
 8009df0:	3b04      	subs	r3, #4
 8009df2:	429d      	cmp	r5, r3
 8009df4:	461a      	mov	r2, r3
 8009df6:	d30b      	bcc.n	8009e10 <quorem+0x100>
 8009df8:	613c      	str	r4, [r7, #16]
 8009dfa:	3601      	adds	r6, #1
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	b003      	add	sp, #12
 8009e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e04:	6812      	ldr	r2, [r2, #0]
 8009e06:	3b04      	subs	r3, #4
 8009e08:	2a00      	cmp	r2, #0
 8009e0a:	d1cb      	bne.n	8009da4 <quorem+0x94>
 8009e0c:	3c01      	subs	r4, #1
 8009e0e:	e7c6      	b.n	8009d9e <quorem+0x8e>
 8009e10:	6812      	ldr	r2, [r2, #0]
 8009e12:	3b04      	subs	r3, #4
 8009e14:	2a00      	cmp	r2, #0
 8009e16:	d1ef      	bne.n	8009df8 <quorem+0xe8>
 8009e18:	3c01      	subs	r4, #1
 8009e1a:	e7ea      	b.n	8009df2 <quorem+0xe2>
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	e7ee      	b.n	8009dfe <quorem+0xee>

08009e20 <_dtoa_r>:
 8009e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e24:	69c7      	ldr	r7, [r0, #28]
 8009e26:	b099      	sub	sp, #100	@ 0x64
 8009e28:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009e2c:	ec55 4b10 	vmov	r4, r5, d0
 8009e30:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009e32:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e34:	4683      	mov	fp, r0
 8009e36:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e3a:	b97f      	cbnz	r7, 8009e5c <_dtoa_r+0x3c>
 8009e3c:	2010      	movs	r0, #16
 8009e3e:	f000 fdfd 	bl	800aa3c <malloc>
 8009e42:	4602      	mov	r2, r0
 8009e44:	f8cb 001c 	str.w	r0, [fp, #28]
 8009e48:	b920      	cbnz	r0, 8009e54 <_dtoa_r+0x34>
 8009e4a:	4ba7      	ldr	r3, [pc, #668]	@ (800a0e8 <_dtoa_r+0x2c8>)
 8009e4c:	21ef      	movs	r1, #239	@ 0xef
 8009e4e:	48a7      	ldr	r0, [pc, #668]	@ (800a0ec <_dtoa_r+0x2cc>)
 8009e50:	f002 fc2a 	bl	800c6a8 <__assert_func>
 8009e54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009e58:	6007      	str	r7, [r0, #0]
 8009e5a:	60c7      	str	r7, [r0, #12]
 8009e5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e60:	6819      	ldr	r1, [r3, #0]
 8009e62:	b159      	cbz	r1, 8009e7c <_dtoa_r+0x5c>
 8009e64:	685a      	ldr	r2, [r3, #4]
 8009e66:	604a      	str	r2, [r1, #4]
 8009e68:	2301      	movs	r3, #1
 8009e6a:	4093      	lsls	r3, r2
 8009e6c:	608b      	str	r3, [r1, #8]
 8009e6e:	4658      	mov	r0, fp
 8009e70:	f000 feda 	bl	800ac28 <_Bfree>
 8009e74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	601a      	str	r2, [r3, #0]
 8009e7c:	1e2b      	subs	r3, r5, #0
 8009e7e:	bfb9      	ittee	lt
 8009e80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009e84:	9303      	strlt	r3, [sp, #12]
 8009e86:	2300      	movge	r3, #0
 8009e88:	6033      	strge	r3, [r6, #0]
 8009e8a:	9f03      	ldr	r7, [sp, #12]
 8009e8c:	4b98      	ldr	r3, [pc, #608]	@ (800a0f0 <_dtoa_r+0x2d0>)
 8009e8e:	bfbc      	itt	lt
 8009e90:	2201      	movlt	r2, #1
 8009e92:	6032      	strlt	r2, [r6, #0]
 8009e94:	43bb      	bics	r3, r7
 8009e96:	d112      	bne.n	8009ebe <_dtoa_r+0x9e>
 8009e98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009e9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009e9e:	6013      	str	r3, [r2, #0]
 8009ea0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ea4:	4323      	orrs	r3, r4
 8009ea6:	f000 854d 	beq.w	800a944 <_dtoa_r+0xb24>
 8009eaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009eac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a104 <_dtoa_r+0x2e4>
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f000 854f 	beq.w	800a954 <_dtoa_r+0xb34>
 8009eb6:	f10a 0303 	add.w	r3, sl, #3
 8009eba:	f000 bd49 	b.w	800a950 <_dtoa_r+0xb30>
 8009ebe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	ec51 0b17 	vmov	r0, r1, d7
 8009ec8:	2300      	movs	r3, #0
 8009eca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009ece:	f7f6 fe23 	bl	8000b18 <__aeabi_dcmpeq>
 8009ed2:	4680      	mov	r8, r0
 8009ed4:	b158      	cbz	r0, 8009eee <_dtoa_r+0xce>
 8009ed6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009ed8:	2301      	movs	r3, #1
 8009eda:	6013      	str	r3, [r2, #0]
 8009edc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ede:	b113      	cbz	r3, 8009ee6 <_dtoa_r+0xc6>
 8009ee0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009ee2:	4b84      	ldr	r3, [pc, #528]	@ (800a0f4 <_dtoa_r+0x2d4>)
 8009ee4:	6013      	str	r3, [r2, #0]
 8009ee6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a108 <_dtoa_r+0x2e8>
 8009eea:	f000 bd33 	b.w	800a954 <_dtoa_r+0xb34>
 8009eee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009ef2:	aa16      	add	r2, sp, #88	@ 0x58
 8009ef4:	a917      	add	r1, sp, #92	@ 0x5c
 8009ef6:	4658      	mov	r0, fp
 8009ef8:	f001 fa3a 	bl	800b370 <__d2b>
 8009efc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009f00:	4681      	mov	r9, r0
 8009f02:	2e00      	cmp	r6, #0
 8009f04:	d077      	beq.n	8009ff6 <_dtoa_r+0x1d6>
 8009f06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f08:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009f18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009f1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009f20:	4619      	mov	r1, r3
 8009f22:	2200      	movs	r2, #0
 8009f24:	4b74      	ldr	r3, [pc, #464]	@ (800a0f8 <_dtoa_r+0x2d8>)
 8009f26:	f7f6 f9d7 	bl	80002d8 <__aeabi_dsub>
 8009f2a:	a369      	add	r3, pc, #420	@ (adr r3, 800a0d0 <_dtoa_r+0x2b0>)
 8009f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f30:	f7f6 fb8a 	bl	8000648 <__aeabi_dmul>
 8009f34:	a368      	add	r3, pc, #416	@ (adr r3, 800a0d8 <_dtoa_r+0x2b8>)
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	f7f6 f9cf 	bl	80002dc <__adddf3>
 8009f3e:	4604      	mov	r4, r0
 8009f40:	4630      	mov	r0, r6
 8009f42:	460d      	mov	r5, r1
 8009f44:	f7f6 fb16 	bl	8000574 <__aeabi_i2d>
 8009f48:	a365      	add	r3, pc, #404	@ (adr r3, 800a0e0 <_dtoa_r+0x2c0>)
 8009f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4e:	f7f6 fb7b 	bl	8000648 <__aeabi_dmul>
 8009f52:	4602      	mov	r2, r0
 8009f54:	460b      	mov	r3, r1
 8009f56:	4620      	mov	r0, r4
 8009f58:	4629      	mov	r1, r5
 8009f5a:	f7f6 f9bf 	bl	80002dc <__adddf3>
 8009f5e:	4604      	mov	r4, r0
 8009f60:	460d      	mov	r5, r1
 8009f62:	f7f6 fe21 	bl	8000ba8 <__aeabi_d2iz>
 8009f66:	2200      	movs	r2, #0
 8009f68:	4607      	mov	r7, r0
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	4629      	mov	r1, r5
 8009f70:	f7f6 fddc 	bl	8000b2c <__aeabi_dcmplt>
 8009f74:	b140      	cbz	r0, 8009f88 <_dtoa_r+0x168>
 8009f76:	4638      	mov	r0, r7
 8009f78:	f7f6 fafc 	bl	8000574 <__aeabi_i2d>
 8009f7c:	4622      	mov	r2, r4
 8009f7e:	462b      	mov	r3, r5
 8009f80:	f7f6 fdca 	bl	8000b18 <__aeabi_dcmpeq>
 8009f84:	b900      	cbnz	r0, 8009f88 <_dtoa_r+0x168>
 8009f86:	3f01      	subs	r7, #1
 8009f88:	2f16      	cmp	r7, #22
 8009f8a:	d851      	bhi.n	800a030 <_dtoa_r+0x210>
 8009f8c:	4b5b      	ldr	r3, [pc, #364]	@ (800a0fc <_dtoa_r+0x2dc>)
 8009f8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f9a:	f7f6 fdc7 	bl	8000b2c <__aeabi_dcmplt>
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	d048      	beq.n	800a034 <_dtoa_r+0x214>
 8009fa2:	3f01      	subs	r7, #1
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	9312      	str	r3, [sp, #72]	@ 0x48
 8009fa8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009faa:	1b9b      	subs	r3, r3, r6
 8009fac:	1e5a      	subs	r2, r3, #1
 8009fae:	bf44      	itt	mi
 8009fb0:	f1c3 0801 	rsbmi	r8, r3, #1
 8009fb4:	2300      	movmi	r3, #0
 8009fb6:	9208      	str	r2, [sp, #32]
 8009fb8:	bf54      	ite	pl
 8009fba:	f04f 0800 	movpl.w	r8, #0
 8009fbe:	9308      	strmi	r3, [sp, #32]
 8009fc0:	2f00      	cmp	r7, #0
 8009fc2:	db39      	blt.n	800a038 <_dtoa_r+0x218>
 8009fc4:	9b08      	ldr	r3, [sp, #32]
 8009fc6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009fc8:	443b      	add	r3, r7
 8009fca:	9308      	str	r3, [sp, #32]
 8009fcc:	2300      	movs	r3, #0
 8009fce:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fd2:	2b09      	cmp	r3, #9
 8009fd4:	d864      	bhi.n	800a0a0 <_dtoa_r+0x280>
 8009fd6:	2b05      	cmp	r3, #5
 8009fd8:	bfc4      	itt	gt
 8009fda:	3b04      	subgt	r3, #4
 8009fdc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fe0:	f1a3 0302 	sub.w	r3, r3, #2
 8009fe4:	bfcc      	ite	gt
 8009fe6:	2400      	movgt	r4, #0
 8009fe8:	2401      	movle	r4, #1
 8009fea:	2b03      	cmp	r3, #3
 8009fec:	d863      	bhi.n	800a0b6 <_dtoa_r+0x296>
 8009fee:	e8df f003 	tbb	[pc, r3]
 8009ff2:	372a      	.short	0x372a
 8009ff4:	5535      	.short	0x5535
 8009ff6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009ffa:	441e      	add	r6, r3
 8009ffc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a000:	2b20      	cmp	r3, #32
 800a002:	bfc1      	itttt	gt
 800a004:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a008:	409f      	lslgt	r7, r3
 800a00a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a00e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a012:	bfd6      	itet	le
 800a014:	f1c3 0320 	rsble	r3, r3, #32
 800a018:	ea47 0003 	orrgt.w	r0, r7, r3
 800a01c:	fa04 f003 	lslle.w	r0, r4, r3
 800a020:	f7f6 fa98 	bl	8000554 <__aeabi_ui2d>
 800a024:	2201      	movs	r2, #1
 800a026:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a02a:	3e01      	subs	r6, #1
 800a02c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a02e:	e777      	b.n	8009f20 <_dtoa_r+0x100>
 800a030:	2301      	movs	r3, #1
 800a032:	e7b8      	b.n	8009fa6 <_dtoa_r+0x186>
 800a034:	9012      	str	r0, [sp, #72]	@ 0x48
 800a036:	e7b7      	b.n	8009fa8 <_dtoa_r+0x188>
 800a038:	427b      	negs	r3, r7
 800a03a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a03c:	2300      	movs	r3, #0
 800a03e:	eba8 0807 	sub.w	r8, r8, r7
 800a042:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a044:	e7c4      	b.n	8009fd0 <_dtoa_r+0x1b0>
 800a046:	2300      	movs	r3, #0
 800a048:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a04a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	dc35      	bgt.n	800a0bc <_dtoa_r+0x29c>
 800a050:	2301      	movs	r3, #1
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	9307      	str	r3, [sp, #28]
 800a056:	461a      	mov	r2, r3
 800a058:	920e      	str	r2, [sp, #56]	@ 0x38
 800a05a:	e00b      	b.n	800a074 <_dtoa_r+0x254>
 800a05c:	2301      	movs	r3, #1
 800a05e:	e7f3      	b.n	800a048 <_dtoa_r+0x228>
 800a060:	2300      	movs	r3, #0
 800a062:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a066:	18fb      	adds	r3, r7, r3
 800a068:	9300      	str	r3, [sp, #0]
 800a06a:	3301      	adds	r3, #1
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	9307      	str	r3, [sp, #28]
 800a070:	bfb8      	it	lt
 800a072:	2301      	movlt	r3, #1
 800a074:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a078:	2100      	movs	r1, #0
 800a07a:	2204      	movs	r2, #4
 800a07c:	f102 0514 	add.w	r5, r2, #20
 800a080:	429d      	cmp	r5, r3
 800a082:	d91f      	bls.n	800a0c4 <_dtoa_r+0x2a4>
 800a084:	6041      	str	r1, [r0, #4]
 800a086:	4658      	mov	r0, fp
 800a088:	f000 fd8e 	bl	800aba8 <_Balloc>
 800a08c:	4682      	mov	sl, r0
 800a08e:	2800      	cmp	r0, #0
 800a090:	d13c      	bne.n	800a10c <_dtoa_r+0x2ec>
 800a092:	4b1b      	ldr	r3, [pc, #108]	@ (800a100 <_dtoa_r+0x2e0>)
 800a094:	4602      	mov	r2, r0
 800a096:	f240 11af 	movw	r1, #431	@ 0x1af
 800a09a:	e6d8      	b.n	8009e4e <_dtoa_r+0x2e>
 800a09c:	2301      	movs	r3, #1
 800a09e:	e7e0      	b.n	800a062 <_dtoa_r+0x242>
 800a0a0:	2401      	movs	r4, #1
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a0a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	9307      	str	r3, [sp, #28]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	2312      	movs	r3, #18
 800a0b4:	e7d0      	b.n	800a058 <_dtoa_r+0x238>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0ba:	e7f5      	b.n	800a0a8 <_dtoa_r+0x288>
 800a0bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	9307      	str	r3, [sp, #28]
 800a0c2:	e7d7      	b.n	800a074 <_dtoa_r+0x254>
 800a0c4:	3101      	adds	r1, #1
 800a0c6:	0052      	lsls	r2, r2, #1
 800a0c8:	e7d8      	b.n	800a07c <_dtoa_r+0x25c>
 800a0ca:	bf00      	nop
 800a0cc:	f3af 8000 	nop.w
 800a0d0:	636f4361 	.word	0x636f4361
 800a0d4:	3fd287a7 	.word	0x3fd287a7
 800a0d8:	8b60c8b3 	.word	0x8b60c8b3
 800a0dc:	3fc68a28 	.word	0x3fc68a28
 800a0e0:	509f79fb 	.word	0x509f79fb
 800a0e4:	3fd34413 	.word	0x3fd34413
 800a0e8:	0800d4ce 	.word	0x0800d4ce
 800a0ec:	0800d4e5 	.word	0x0800d4e5
 800a0f0:	7ff00000 	.word	0x7ff00000
 800a0f4:	0800d499 	.word	0x0800d499
 800a0f8:	3ff80000 	.word	0x3ff80000
 800a0fc:	0800d5e0 	.word	0x0800d5e0
 800a100:	0800d53d 	.word	0x0800d53d
 800a104:	0800d4ca 	.word	0x0800d4ca
 800a108:	0800d498 	.word	0x0800d498
 800a10c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a110:	6018      	str	r0, [r3, #0]
 800a112:	9b07      	ldr	r3, [sp, #28]
 800a114:	2b0e      	cmp	r3, #14
 800a116:	f200 80a4 	bhi.w	800a262 <_dtoa_r+0x442>
 800a11a:	2c00      	cmp	r4, #0
 800a11c:	f000 80a1 	beq.w	800a262 <_dtoa_r+0x442>
 800a120:	2f00      	cmp	r7, #0
 800a122:	dd33      	ble.n	800a18c <_dtoa_r+0x36c>
 800a124:	4bad      	ldr	r3, [pc, #692]	@ (800a3dc <_dtoa_r+0x5bc>)
 800a126:	f007 020f 	and.w	r2, r7, #15
 800a12a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a12e:	ed93 7b00 	vldr	d7, [r3]
 800a132:	05f8      	lsls	r0, r7, #23
 800a134:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a138:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a13c:	d516      	bpl.n	800a16c <_dtoa_r+0x34c>
 800a13e:	4ba8      	ldr	r3, [pc, #672]	@ (800a3e0 <_dtoa_r+0x5c0>)
 800a140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a144:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a148:	f7f6 fba8 	bl	800089c <__aeabi_ddiv>
 800a14c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a150:	f004 040f 	and.w	r4, r4, #15
 800a154:	2603      	movs	r6, #3
 800a156:	4da2      	ldr	r5, [pc, #648]	@ (800a3e0 <_dtoa_r+0x5c0>)
 800a158:	b954      	cbnz	r4, 800a170 <_dtoa_r+0x350>
 800a15a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a15e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a162:	f7f6 fb9b 	bl	800089c <__aeabi_ddiv>
 800a166:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a16a:	e028      	b.n	800a1be <_dtoa_r+0x39e>
 800a16c:	2602      	movs	r6, #2
 800a16e:	e7f2      	b.n	800a156 <_dtoa_r+0x336>
 800a170:	07e1      	lsls	r1, r4, #31
 800a172:	d508      	bpl.n	800a186 <_dtoa_r+0x366>
 800a174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a178:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a17c:	f7f6 fa64 	bl	8000648 <__aeabi_dmul>
 800a180:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a184:	3601      	adds	r6, #1
 800a186:	1064      	asrs	r4, r4, #1
 800a188:	3508      	adds	r5, #8
 800a18a:	e7e5      	b.n	800a158 <_dtoa_r+0x338>
 800a18c:	f000 80d2 	beq.w	800a334 <_dtoa_r+0x514>
 800a190:	427c      	negs	r4, r7
 800a192:	4b92      	ldr	r3, [pc, #584]	@ (800a3dc <_dtoa_r+0x5bc>)
 800a194:	4d92      	ldr	r5, [pc, #584]	@ (800a3e0 <_dtoa_r+0x5c0>)
 800a196:	f004 020f 	and.w	r2, r4, #15
 800a19a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1a6:	f7f6 fa4f 	bl	8000648 <__aeabi_dmul>
 800a1aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1ae:	1124      	asrs	r4, r4, #4
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	2602      	movs	r6, #2
 800a1b4:	2c00      	cmp	r4, #0
 800a1b6:	f040 80b2 	bne.w	800a31e <_dtoa_r+0x4fe>
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d1d3      	bne.n	800a166 <_dtoa_r+0x346>
 800a1be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a1c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f000 80b7 	beq.w	800a338 <_dtoa_r+0x518>
 800a1ca:	4b86      	ldr	r3, [pc, #536]	@ (800a3e4 <_dtoa_r+0x5c4>)
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	4629      	mov	r1, r5
 800a1d2:	f7f6 fcab 	bl	8000b2c <__aeabi_dcmplt>
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	f000 80ae 	beq.w	800a338 <_dtoa_r+0x518>
 800a1dc:	9b07      	ldr	r3, [sp, #28]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	f000 80aa 	beq.w	800a338 <_dtoa_r+0x518>
 800a1e4:	9b00      	ldr	r3, [sp, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	dd37      	ble.n	800a25a <_dtoa_r+0x43a>
 800a1ea:	1e7b      	subs	r3, r7, #1
 800a1ec:	9304      	str	r3, [sp, #16]
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	4b7d      	ldr	r3, [pc, #500]	@ (800a3e8 <_dtoa_r+0x5c8>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	4629      	mov	r1, r5
 800a1f6:	f7f6 fa27 	bl	8000648 <__aeabi_dmul>
 800a1fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1fe:	9c00      	ldr	r4, [sp, #0]
 800a200:	3601      	adds	r6, #1
 800a202:	4630      	mov	r0, r6
 800a204:	f7f6 f9b6 	bl	8000574 <__aeabi_i2d>
 800a208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a20c:	f7f6 fa1c 	bl	8000648 <__aeabi_dmul>
 800a210:	4b76      	ldr	r3, [pc, #472]	@ (800a3ec <_dtoa_r+0x5cc>)
 800a212:	2200      	movs	r2, #0
 800a214:	f7f6 f862 	bl	80002dc <__adddf3>
 800a218:	4605      	mov	r5, r0
 800a21a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a21e:	2c00      	cmp	r4, #0
 800a220:	f040 808d 	bne.w	800a33e <_dtoa_r+0x51e>
 800a224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a228:	4b71      	ldr	r3, [pc, #452]	@ (800a3f0 <_dtoa_r+0x5d0>)
 800a22a:	2200      	movs	r2, #0
 800a22c:	f7f6 f854 	bl	80002d8 <__aeabi_dsub>
 800a230:	4602      	mov	r2, r0
 800a232:	460b      	mov	r3, r1
 800a234:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a238:	462a      	mov	r2, r5
 800a23a:	4633      	mov	r3, r6
 800a23c:	f7f6 fc94 	bl	8000b68 <__aeabi_dcmpgt>
 800a240:	2800      	cmp	r0, #0
 800a242:	f040 828b 	bne.w	800a75c <_dtoa_r+0x93c>
 800a246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a24a:	462a      	mov	r2, r5
 800a24c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a250:	f7f6 fc6c 	bl	8000b2c <__aeabi_dcmplt>
 800a254:	2800      	cmp	r0, #0
 800a256:	f040 8128 	bne.w	800a4aa <_dtoa_r+0x68a>
 800a25a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a25e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a262:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a264:	2b00      	cmp	r3, #0
 800a266:	f2c0 815a 	blt.w	800a51e <_dtoa_r+0x6fe>
 800a26a:	2f0e      	cmp	r7, #14
 800a26c:	f300 8157 	bgt.w	800a51e <_dtoa_r+0x6fe>
 800a270:	4b5a      	ldr	r3, [pc, #360]	@ (800a3dc <_dtoa_r+0x5bc>)
 800a272:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a276:	ed93 7b00 	vldr	d7, [r3]
 800a27a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	ed8d 7b00 	vstr	d7, [sp]
 800a282:	da03      	bge.n	800a28c <_dtoa_r+0x46c>
 800a284:	9b07      	ldr	r3, [sp, #28]
 800a286:	2b00      	cmp	r3, #0
 800a288:	f340 8101 	ble.w	800a48e <_dtoa_r+0x66e>
 800a28c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a290:	4656      	mov	r6, sl
 800a292:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a296:	4620      	mov	r0, r4
 800a298:	4629      	mov	r1, r5
 800a29a:	f7f6 faff 	bl	800089c <__aeabi_ddiv>
 800a29e:	f7f6 fc83 	bl	8000ba8 <__aeabi_d2iz>
 800a2a2:	4680      	mov	r8, r0
 800a2a4:	f7f6 f966 	bl	8000574 <__aeabi_i2d>
 800a2a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2ac:	f7f6 f9cc 	bl	8000648 <__aeabi_dmul>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a2bc:	f7f6 f80c 	bl	80002d8 <__aeabi_dsub>
 800a2c0:	f806 4b01 	strb.w	r4, [r6], #1
 800a2c4:	9d07      	ldr	r5, [sp, #28]
 800a2c6:	eba6 040a 	sub.w	r4, r6, sl
 800a2ca:	42a5      	cmp	r5, r4
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	f040 8117 	bne.w	800a502 <_dtoa_r+0x6e2>
 800a2d4:	f7f6 f802 	bl	80002dc <__adddf3>
 800a2d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2dc:	4604      	mov	r4, r0
 800a2de:	460d      	mov	r5, r1
 800a2e0:	f7f6 fc42 	bl	8000b68 <__aeabi_dcmpgt>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	f040 80f9 	bne.w	800a4dc <_dtoa_r+0x6bc>
 800a2ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	f7f6 fc11 	bl	8000b18 <__aeabi_dcmpeq>
 800a2f6:	b118      	cbz	r0, 800a300 <_dtoa_r+0x4e0>
 800a2f8:	f018 0f01 	tst.w	r8, #1
 800a2fc:	f040 80ee 	bne.w	800a4dc <_dtoa_r+0x6bc>
 800a300:	4649      	mov	r1, r9
 800a302:	4658      	mov	r0, fp
 800a304:	f000 fc90 	bl	800ac28 <_Bfree>
 800a308:	2300      	movs	r3, #0
 800a30a:	7033      	strb	r3, [r6, #0]
 800a30c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a30e:	3701      	adds	r7, #1
 800a310:	601f      	str	r7, [r3, #0]
 800a312:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a314:	2b00      	cmp	r3, #0
 800a316:	f000 831d 	beq.w	800a954 <_dtoa_r+0xb34>
 800a31a:	601e      	str	r6, [r3, #0]
 800a31c:	e31a      	b.n	800a954 <_dtoa_r+0xb34>
 800a31e:	07e2      	lsls	r2, r4, #31
 800a320:	d505      	bpl.n	800a32e <_dtoa_r+0x50e>
 800a322:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a326:	f7f6 f98f 	bl	8000648 <__aeabi_dmul>
 800a32a:	3601      	adds	r6, #1
 800a32c:	2301      	movs	r3, #1
 800a32e:	1064      	asrs	r4, r4, #1
 800a330:	3508      	adds	r5, #8
 800a332:	e73f      	b.n	800a1b4 <_dtoa_r+0x394>
 800a334:	2602      	movs	r6, #2
 800a336:	e742      	b.n	800a1be <_dtoa_r+0x39e>
 800a338:	9c07      	ldr	r4, [sp, #28]
 800a33a:	9704      	str	r7, [sp, #16]
 800a33c:	e761      	b.n	800a202 <_dtoa_r+0x3e2>
 800a33e:	4b27      	ldr	r3, [pc, #156]	@ (800a3dc <_dtoa_r+0x5bc>)
 800a340:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a342:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a346:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a34a:	4454      	add	r4, sl
 800a34c:	2900      	cmp	r1, #0
 800a34e:	d053      	beq.n	800a3f8 <_dtoa_r+0x5d8>
 800a350:	4928      	ldr	r1, [pc, #160]	@ (800a3f4 <_dtoa_r+0x5d4>)
 800a352:	2000      	movs	r0, #0
 800a354:	f7f6 faa2 	bl	800089c <__aeabi_ddiv>
 800a358:	4633      	mov	r3, r6
 800a35a:	462a      	mov	r2, r5
 800a35c:	f7f5 ffbc 	bl	80002d8 <__aeabi_dsub>
 800a360:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a364:	4656      	mov	r6, sl
 800a366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a36a:	f7f6 fc1d 	bl	8000ba8 <__aeabi_d2iz>
 800a36e:	4605      	mov	r5, r0
 800a370:	f7f6 f900 	bl	8000574 <__aeabi_i2d>
 800a374:	4602      	mov	r2, r0
 800a376:	460b      	mov	r3, r1
 800a378:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a37c:	f7f5 ffac 	bl	80002d8 <__aeabi_dsub>
 800a380:	3530      	adds	r5, #48	@ 0x30
 800a382:	4602      	mov	r2, r0
 800a384:	460b      	mov	r3, r1
 800a386:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a38a:	f806 5b01 	strb.w	r5, [r6], #1
 800a38e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a392:	f7f6 fbcb 	bl	8000b2c <__aeabi_dcmplt>
 800a396:	2800      	cmp	r0, #0
 800a398:	d171      	bne.n	800a47e <_dtoa_r+0x65e>
 800a39a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a39e:	4911      	ldr	r1, [pc, #68]	@ (800a3e4 <_dtoa_r+0x5c4>)
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	f7f5 ff99 	bl	80002d8 <__aeabi_dsub>
 800a3a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a3aa:	f7f6 fbbf 	bl	8000b2c <__aeabi_dcmplt>
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	f040 8095 	bne.w	800a4de <_dtoa_r+0x6be>
 800a3b4:	42a6      	cmp	r6, r4
 800a3b6:	f43f af50 	beq.w	800a25a <_dtoa_r+0x43a>
 800a3ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a3be:	4b0a      	ldr	r3, [pc, #40]	@ (800a3e8 <_dtoa_r+0x5c8>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f7f6 f941 	bl	8000648 <__aeabi_dmul>
 800a3c6:	4b08      	ldr	r3, [pc, #32]	@ (800a3e8 <_dtoa_r+0x5c8>)
 800a3c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3d2:	f7f6 f939 	bl	8000648 <__aeabi_dmul>
 800a3d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3da:	e7c4      	b.n	800a366 <_dtoa_r+0x546>
 800a3dc:	0800d5e0 	.word	0x0800d5e0
 800a3e0:	0800d5b8 	.word	0x0800d5b8
 800a3e4:	3ff00000 	.word	0x3ff00000
 800a3e8:	40240000 	.word	0x40240000
 800a3ec:	401c0000 	.word	0x401c0000
 800a3f0:	40140000 	.word	0x40140000
 800a3f4:	3fe00000 	.word	0x3fe00000
 800a3f8:	4631      	mov	r1, r6
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	f7f6 f924 	bl	8000648 <__aeabi_dmul>
 800a400:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a404:	9415      	str	r4, [sp, #84]	@ 0x54
 800a406:	4656      	mov	r6, sl
 800a408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a40c:	f7f6 fbcc 	bl	8000ba8 <__aeabi_d2iz>
 800a410:	4605      	mov	r5, r0
 800a412:	f7f6 f8af 	bl	8000574 <__aeabi_i2d>
 800a416:	4602      	mov	r2, r0
 800a418:	460b      	mov	r3, r1
 800a41a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a41e:	f7f5 ff5b 	bl	80002d8 <__aeabi_dsub>
 800a422:	3530      	adds	r5, #48	@ 0x30
 800a424:	f806 5b01 	strb.w	r5, [r6], #1
 800a428:	4602      	mov	r2, r0
 800a42a:	460b      	mov	r3, r1
 800a42c:	42a6      	cmp	r6, r4
 800a42e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a432:	f04f 0200 	mov.w	r2, #0
 800a436:	d124      	bne.n	800a482 <_dtoa_r+0x662>
 800a438:	4bac      	ldr	r3, [pc, #688]	@ (800a6ec <_dtoa_r+0x8cc>)
 800a43a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a43e:	f7f5 ff4d 	bl	80002dc <__adddf3>
 800a442:	4602      	mov	r2, r0
 800a444:	460b      	mov	r3, r1
 800a446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a44a:	f7f6 fb8d 	bl	8000b68 <__aeabi_dcmpgt>
 800a44e:	2800      	cmp	r0, #0
 800a450:	d145      	bne.n	800a4de <_dtoa_r+0x6be>
 800a452:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a456:	49a5      	ldr	r1, [pc, #660]	@ (800a6ec <_dtoa_r+0x8cc>)
 800a458:	2000      	movs	r0, #0
 800a45a:	f7f5 ff3d 	bl	80002d8 <__aeabi_dsub>
 800a45e:	4602      	mov	r2, r0
 800a460:	460b      	mov	r3, r1
 800a462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a466:	f7f6 fb61 	bl	8000b2c <__aeabi_dcmplt>
 800a46a:	2800      	cmp	r0, #0
 800a46c:	f43f aef5 	beq.w	800a25a <_dtoa_r+0x43a>
 800a470:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a472:	1e73      	subs	r3, r6, #1
 800a474:	9315      	str	r3, [sp, #84]	@ 0x54
 800a476:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a47a:	2b30      	cmp	r3, #48	@ 0x30
 800a47c:	d0f8      	beq.n	800a470 <_dtoa_r+0x650>
 800a47e:	9f04      	ldr	r7, [sp, #16]
 800a480:	e73e      	b.n	800a300 <_dtoa_r+0x4e0>
 800a482:	4b9b      	ldr	r3, [pc, #620]	@ (800a6f0 <_dtoa_r+0x8d0>)
 800a484:	f7f6 f8e0 	bl	8000648 <__aeabi_dmul>
 800a488:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a48c:	e7bc      	b.n	800a408 <_dtoa_r+0x5e8>
 800a48e:	d10c      	bne.n	800a4aa <_dtoa_r+0x68a>
 800a490:	4b98      	ldr	r3, [pc, #608]	@ (800a6f4 <_dtoa_r+0x8d4>)
 800a492:	2200      	movs	r2, #0
 800a494:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a498:	f7f6 f8d6 	bl	8000648 <__aeabi_dmul>
 800a49c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4a0:	f7f6 fb58 	bl	8000b54 <__aeabi_dcmpge>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	f000 8157 	beq.w	800a758 <_dtoa_r+0x938>
 800a4aa:	2400      	movs	r4, #0
 800a4ac:	4625      	mov	r5, r4
 800a4ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4b0:	43db      	mvns	r3, r3
 800a4b2:	9304      	str	r3, [sp, #16]
 800a4b4:	4656      	mov	r6, sl
 800a4b6:	2700      	movs	r7, #0
 800a4b8:	4621      	mov	r1, r4
 800a4ba:	4658      	mov	r0, fp
 800a4bc:	f000 fbb4 	bl	800ac28 <_Bfree>
 800a4c0:	2d00      	cmp	r5, #0
 800a4c2:	d0dc      	beq.n	800a47e <_dtoa_r+0x65e>
 800a4c4:	b12f      	cbz	r7, 800a4d2 <_dtoa_r+0x6b2>
 800a4c6:	42af      	cmp	r7, r5
 800a4c8:	d003      	beq.n	800a4d2 <_dtoa_r+0x6b2>
 800a4ca:	4639      	mov	r1, r7
 800a4cc:	4658      	mov	r0, fp
 800a4ce:	f000 fbab 	bl	800ac28 <_Bfree>
 800a4d2:	4629      	mov	r1, r5
 800a4d4:	4658      	mov	r0, fp
 800a4d6:	f000 fba7 	bl	800ac28 <_Bfree>
 800a4da:	e7d0      	b.n	800a47e <_dtoa_r+0x65e>
 800a4dc:	9704      	str	r7, [sp, #16]
 800a4de:	4633      	mov	r3, r6
 800a4e0:	461e      	mov	r6, r3
 800a4e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4e6:	2a39      	cmp	r2, #57	@ 0x39
 800a4e8:	d107      	bne.n	800a4fa <_dtoa_r+0x6da>
 800a4ea:	459a      	cmp	sl, r3
 800a4ec:	d1f8      	bne.n	800a4e0 <_dtoa_r+0x6c0>
 800a4ee:	9a04      	ldr	r2, [sp, #16]
 800a4f0:	3201      	adds	r2, #1
 800a4f2:	9204      	str	r2, [sp, #16]
 800a4f4:	2230      	movs	r2, #48	@ 0x30
 800a4f6:	f88a 2000 	strb.w	r2, [sl]
 800a4fa:	781a      	ldrb	r2, [r3, #0]
 800a4fc:	3201      	adds	r2, #1
 800a4fe:	701a      	strb	r2, [r3, #0]
 800a500:	e7bd      	b.n	800a47e <_dtoa_r+0x65e>
 800a502:	4b7b      	ldr	r3, [pc, #492]	@ (800a6f0 <_dtoa_r+0x8d0>)
 800a504:	2200      	movs	r2, #0
 800a506:	f7f6 f89f 	bl	8000648 <__aeabi_dmul>
 800a50a:	2200      	movs	r2, #0
 800a50c:	2300      	movs	r3, #0
 800a50e:	4604      	mov	r4, r0
 800a510:	460d      	mov	r5, r1
 800a512:	f7f6 fb01 	bl	8000b18 <__aeabi_dcmpeq>
 800a516:	2800      	cmp	r0, #0
 800a518:	f43f aebb 	beq.w	800a292 <_dtoa_r+0x472>
 800a51c:	e6f0      	b.n	800a300 <_dtoa_r+0x4e0>
 800a51e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a520:	2a00      	cmp	r2, #0
 800a522:	f000 80db 	beq.w	800a6dc <_dtoa_r+0x8bc>
 800a526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a528:	2a01      	cmp	r2, #1
 800a52a:	f300 80bf 	bgt.w	800a6ac <_dtoa_r+0x88c>
 800a52e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a530:	2a00      	cmp	r2, #0
 800a532:	f000 80b7 	beq.w	800a6a4 <_dtoa_r+0x884>
 800a536:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a53a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a53c:	4646      	mov	r6, r8
 800a53e:	9a08      	ldr	r2, [sp, #32]
 800a540:	2101      	movs	r1, #1
 800a542:	441a      	add	r2, r3
 800a544:	4658      	mov	r0, fp
 800a546:	4498      	add	r8, r3
 800a548:	9208      	str	r2, [sp, #32]
 800a54a:	f000 fc6b 	bl	800ae24 <__i2b>
 800a54e:	4605      	mov	r5, r0
 800a550:	b15e      	cbz	r6, 800a56a <_dtoa_r+0x74a>
 800a552:	9b08      	ldr	r3, [sp, #32]
 800a554:	2b00      	cmp	r3, #0
 800a556:	dd08      	ble.n	800a56a <_dtoa_r+0x74a>
 800a558:	42b3      	cmp	r3, r6
 800a55a:	9a08      	ldr	r2, [sp, #32]
 800a55c:	bfa8      	it	ge
 800a55e:	4633      	movge	r3, r6
 800a560:	eba8 0803 	sub.w	r8, r8, r3
 800a564:	1af6      	subs	r6, r6, r3
 800a566:	1ad3      	subs	r3, r2, r3
 800a568:	9308      	str	r3, [sp, #32]
 800a56a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a56c:	b1f3      	cbz	r3, 800a5ac <_dtoa_r+0x78c>
 800a56e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a570:	2b00      	cmp	r3, #0
 800a572:	f000 80b7 	beq.w	800a6e4 <_dtoa_r+0x8c4>
 800a576:	b18c      	cbz	r4, 800a59c <_dtoa_r+0x77c>
 800a578:	4629      	mov	r1, r5
 800a57a:	4622      	mov	r2, r4
 800a57c:	4658      	mov	r0, fp
 800a57e:	f000 fd11 	bl	800afa4 <__pow5mult>
 800a582:	464a      	mov	r2, r9
 800a584:	4601      	mov	r1, r0
 800a586:	4605      	mov	r5, r0
 800a588:	4658      	mov	r0, fp
 800a58a:	f000 fc61 	bl	800ae50 <__multiply>
 800a58e:	4649      	mov	r1, r9
 800a590:	9004      	str	r0, [sp, #16]
 800a592:	4658      	mov	r0, fp
 800a594:	f000 fb48 	bl	800ac28 <_Bfree>
 800a598:	9b04      	ldr	r3, [sp, #16]
 800a59a:	4699      	mov	r9, r3
 800a59c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a59e:	1b1a      	subs	r2, r3, r4
 800a5a0:	d004      	beq.n	800a5ac <_dtoa_r+0x78c>
 800a5a2:	4649      	mov	r1, r9
 800a5a4:	4658      	mov	r0, fp
 800a5a6:	f000 fcfd 	bl	800afa4 <__pow5mult>
 800a5aa:	4681      	mov	r9, r0
 800a5ac:	2101      	movs	r1, #1
 800a5ae:	4658      	mov	r0, fp
 800a5b0:	f000 fc38 	bl	800ae24 <__i2b>
 800a5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f000 81cf 	beq.w	800a95c <_dtoa_r+0xb3c>
 800a5be:	461a      	mov	r2, r3
 800a5c0:	4601      	mov	r1, r0
 800a5c2:	4658      	mov	r0, fp
 800a5c4:	f000 fcee 	bl	800afa4 <__pow5mult>
 800a5c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	f300 8095 	bgt.w	800a6fc <_dtoa_r+0x8dc>
 800a5d2:	9b02      	ldr	r3, [sp, #8]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f040 8087 	bne.w	800a6e8 <_dtoa_r+0x8c8>
 800a5da:	9b03      	ldr	r3, [sp, #12]
 800a5dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	f040 8089 	bne.w	800a6f8 <_dtoa_r+0x8d8>
 800a5e6:	9b03      	ldr	r3, [sp, #12]
 800a5e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a5ec:	0d1b      	lsrs	r3, r3, #20
 800a5ee:	051b      	lsls	r3, r3, #20
 800a5f0:	b12b      	cbz	r3, 800a5fe <_dtoa_r+0x7de>
 800a5f2:	9b08      	ldr	r3, [sp, #32]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	9308      	str	r3, [sp, #32]
 800a5f8:	f108 0801 	add.w	r8, r8, #1
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800a600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a602:	2b00      	cmp	r3, #0
 800a604:	f000 81b0 	beq.w	800a968 <_dtoa_r+0xb48>
 800a608:	6923      	ldr	r3, [r4, #16]
 800a60a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a60e:	6918      	ldr	r0, [r3, #16]
 800a610:	f000 fbbc 	bl	800ad8c <__hi0bits>
 800a614:	f1c0 0020 	rsb	r0, r0, #32
 800a618:	9b08      	ldr	r3, [sp, #32]
 800a61a:	4418      	add	r0, r3
 800a61c:	f010 001f 	ands.w	r0, r0, #31
 800a620:	d077      	beq.n	800a712 <_dtoa_r+0x8f2>
 800a622:	f1c0 0320 	rsb	r3, r0, #32
 800a626:	2b04      	cmp	r3, #4
 800a628:	dd6b      	ble.n	800a702 <_dtoa_r+0x8e2>
 800a62a:	9b08      	ldr	r3, [sp, #32]
 800a62c:	f1c0 001c 	rsb	r0, r0, #28
 800a630:	4403      	add	r3, r0
 800a632:	4480      	add	r8, r0
 800a634:	4406      	add	r6, r0
 800a636:	9308      	str	r3, [sp, #32]
 800a638:	f1b8 0f00 	cmp.w	r8, #0
 800a63c:	dd05      	ble.n	800a64a <_dtoa_r+0x82a>
 800a63e:	4649      	mov	r1, r9
 800a640:	4642      	mov	r2, r8
 800a642:	4658      	mov	r0, fp
 800a644:	f000 fd08 	bl	800b058 <__lshift>
 800a648:	4681      	mov	r9, r0
 800a64a:	9b08      	ldr	r3, [sp, #32]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	dd05      	ble.n	800a65c <_dtoa_r+0x83c>
 800a650:	4621      	mov	r1, r4
 800a652:	461a      	mov	r2, r3
 800a654:	4658      	mov	r0, fp
 800a656:	f000 fcff 	bl	800b058 <__lshift>
 800a65a:	4604      	mov	r4, r0
 800a65c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d059      	beq.n	800a716 <_dtoa_r+0x8f6>
 800a662:	4621      	mov	r1, r4
 800a664:	4648      	mov	r0, r9
 800a666:	f000 fd63 	bl	800b130 <__mcmp>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	da53      	bge.n	800a716 <_dtoa_r+0x8f6>
 800a66e:	1e7b      	subs	r3, r7, #1
 800a670:	9304      	str	r3, [sp, #16]
 800a672:	4649      	mov	r1, r9
 800a674:	2300      	movs	r3, #0
 800a676:	220a      	movs	r2, #10
 800a678:	4658      	mov	r0, fp
 800a67a:	f000 faf7 	bl	800ac6c <__multadd>
 800a67e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a680:	4681      	mov	r9, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	f000 8172 	beq.w	800a96c <_dtoa_r+0xb4c>
 800a688:	2300      	movs	r3, #0
 800a68a:	4629      	mov	r1, r5
 800a68c:	220a      	movs	r2, #10
 800a68e:	4658      	mov	r0, fp
 800a690:	f000 faec 	bl	800ac6c <__multadd>
 800a694:	9b00      	ldr	r3, [sp, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	4605      	mov	r5, r0
 800a69a:	dc67      	bgt.n	800a76c <_dtoa_r+0x94c>
 800a69c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	dc41      	bgt.n	800a726 <_dtoa_r+0x906>
 800a6a2:	e063      	b.n	800a76c <_dtoa_r+0x94c>
 800a6a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a6a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a6aa:	e746      	b.n	800a53a <_dtoa_r+0x71a>
 800a6ac:	9b07      	ldr	r3, [sp, #28]
 800a6ae:	1e5c      	subs	r4, r3, #1
 800a6b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6b2:	42a3      	cmp	r3, r4
 800a6b4:	bfbf      	itttt	lt
 800a6b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a6b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a6ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a6bc:	1ae3      	sublt	r3, r4, r3
 800a6be:	bfb4      	ite	lt
 800a6c0:	18d2      	addlt	r2, r2, r3
 800a6c2:	1b1c      	subge	r4, r3, r4
 800a6c4:	9b07      	ldr	r3, [sp, #28]
 800a6c6:	bfbc      	itt	lt
 800a6c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a6ca:	2400      	movlt	r4, #0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	bfb5      	itete	lt
 800a6d0:	eba8 0603 	sublt.w	r6, r8, r3
 800a6d4:	9b07      	ldrge	r3, [sp, #28]
 800a6d6:	2300      	movlt	r3, #0
 800a6d8:	4646      	movge	r6, r8
 800a6da:	e730      	b.n	800a53e <_dtoa_r+0x71e>
 800a6dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a6de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a6e0:	4646      	mov	r6, r8
 800a6e2:	e735      	b.n	800a550 <_dtoa_r+0x730>
 800a6e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a6e6:	e75c      	b.n	800a5a2 <_dtoa_r+0x782>
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	e788      	b.n	800a5fe <_dtoa_r+0x7de>
 800a6ec:	3fe00000 	.word	0x3fe00000
 800a6f0:	40240000 	.word	0x40240000
 800a6f4:	40140000 	.word	0x40140000
 800a6f8:	9b02      	ldr	r3, [sp, #8]
 800a6fa:	e780      	b.n	800a5fe <_dtoa_r+0x7de>
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800a700:	e782      	b.n	800a608 <_dtoa_r+0x7e8>
 800a702:	d099      	beq.n	800a638 <_dtoa_r+0x818>
 800a704:	9a08      	ldr	r2, [sp, #32]
 800a706:	331c      	adds	r3, #28
 800a708:	441a      	add	r2, r3
 800a70a:	4498      	add	r8, r3
 800a70c:	441e      	add	r6, r3
 800a70e:	9208      	str	r2, [sp, #32]
 800a710:	e792      	b.n	800a638 <_dtoa_r+0x818>
 800a712:	4603      	mov	r3, r0
 800a714:	e7f6      	b.n	800a704 <_dtoa_r+0x8e4>
 800a716:	9b07      	ldr	r3, [sp, #28]
 800a718:	9704      	str	r7, [sp, #16]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	dc20      	bgt.n	800a760 <_dtoa_r+0x940>
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a722:	2b02      	cmp	r3, #2
 800a724:	dd1e      	ble.n	800a764 <_dtoa_r+0x944>
 800a726:	9b00      	ldr	r3, [sp, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f47f aec0 	bne.w	800a4ae <_dtoa_r+0x68e>
 800a72e:	4621      	mov	r1, r4
 800a730:	2205      	movs	r2, #5
 800a732:	4658      	mov	r0, fp
 800a734:	f000 fa9a 	bl	800ac6c <__multadd>
 800a738:	4601      	mov	r1, r0
 800a73a:	4604      	mov	r4, r0
 800a73c:	4648      	mov	r0, r9
 800a73e:	f000 fcf7 	bl	800b130 <__mcmp>
 800a742:	2800      	cmp	r0, #0
 800a744:	f77f aeb3 	ble.w	800a4ae <_dtoa_r+0x68e>
 800a748:	4656      	mov	r6, sl
 800a74a:	2331      	movs	r3, #49	@ 0x31
 800a74c:	f806 3b01 	strb.w	r3, [r6], #1
 800a750:	9b04      	ldr	r3, [sp, #16]
 800a752:	3301      	adds	r3, #1
 800a754:	9304      	str	r3, [sp, #16]
 800a756:	e6ae      	b.n	800a4b6 <_dtoa_r+0x696>
 800a758:	9c07      	ldr	r4, [sp, #28]
 800a75a:	9704      	str	r7, [sp, #16]
 800a75c:	4625      	mov	r5, r4
 800a75e:	e7f3      	b.n	800a748 <_dtoa_r+0x928>
 800a760:	9b07      	ldr	r3, [sp, #28]
 800a762:	9300      	str	r3, [sp, #0]
 800a764:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a766:	2b00      	cmp	r3, #0
 800a768:	f000 8104 	beq.w	800a974 <_dtoa_r+0xb54>
 800a76c:	2e00      	cmp	r6, #0
 800a76e:	dd05      	ble.n	800a77c <_dtoa_r+0x95c>
 800a770:	4629      	mov	r1, r5
 800a772:	4632      	mov	r2, r6
 800a774:	4658      	mov	r0, fp
 800a776:	f000 fc6f 	bl	800b058 <__lshift>
 800a77a:	4605      	mov	r5, r0
 800a77c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d05a      	beq.n	800a838 <_dtoa_r+0xa18>
 800a782:	6869      	ldr	r1, [r5, #4]
 800a784:	4658      	mov	r0, fp
 800a786:	f000 fa0f 	bl	800aba8 <_Balloc>
 800a78a:	4606      	mov	r6, r0
 800a78c:	b928      	cbnz	r0, 800a79a <_dtoa_r+0x97a>
 800a78e:	4b84      	ldr	r3, [pc, #528]	@ (800a9a0 <_dtoa_r+0xb80>)
 800a790:	4602      	mov	r2, r0
 800a792:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a796:	f7ff bb5a 	b.w	8009e4e <_dtoa_r+0x2e>
 800a79a:	692a      	ldr	r2, [r5, #16]
 800a79c:	3202      	adds	r2, #2
 800a79e:	0092      	lsls	r2, r2, #2
 800a7a0:	f105 010c 	add.w	r1, r5, #12
 800a7a4:	300c      	adds	r0, #12
 800a7a6:	f7ff fa9e 	bl	8009ce6 <memcpy>
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	4631      	mov	r1, r6
 800a7ae:	4658      	mov	r0, fp
 800a7b0:	f000 fc52 	bl	800b058 <__lshift>
 800a7b4:	f10a 0301 	add.w	r3, sl, #1
 800a7b8:	9307      	str	r3, [sp, #28]
 800a7ba:	9b00      	ldr	r3, [sp, #0]
 800a7bc:	4453      	add	r3, sl
 800a7be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7c0:	9b02      	ldr	r3, [sp, #8]
 800a7c2:	f003 0301 	and.w	r3, r3, #1
 800a7c6:	462f      	mov	r7, r5
 800a7c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7ca:	4605      	mov	r5, r0
 800a7cc:	9b07      	ldr	r3, [sp, #28]
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	4648      	mov	r0, r9
 800a7d4:	9300      	str	r3, [sp, #0]
 800a7d6:	f7ff fa9b 	bl	8009d10 <quorem>
 800a7da:	4639      	mov	r1, r7
 800a7dc:	9002      	str	r0, [sp, #8]
 800a7de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a7e2:	4648      	mov	r0, r9
 800a7e4:	f000 fca4 	bl	800b130 <__mcmp>
 800a7e8:	462a      	mov	r2, r5
 800a7ea:	9008      	str	r0, [sp, #32]
 800a7ec:	4621      	mov	r1, r4
 800a7ee:	4658      	mov	r0, fp
 800a7f0:	f000 fcba 	bl	800b168 <__mdiff>
 800a7f4:	68c2      	ldr	r2, [r0, #12]
 800a7f6:	4606      	mov	r6, r0
 800a7f8:	bb02      	cbnz	r2, 800a83c <_dtoa_r+0xa1c>
 800a7fa:	4601      	mov	r1, r0
 800a7fc:	4648      	mov	r0, r9
 800a7fe:	f000 fc97 	bl	800b130 <__mcmp>
 800a802:	4602      	mov	r2, r0
 800a804:	4631      	mov	r1, r6
 800a806:	4658      	mov	r0, fp
 800a808:	920e      	str	r2, [sp, #56]	@ 0x38
 800a80a:	f000 fa0d 	bl	800ac28 <_Bfree>
 800a80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a810:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a812:	9e07      	ldr	r6, [sp, #28]
 800a814:	ea43 0102 	orr.w	r1, r3, r2
 800a818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a81a:	4319      	orrs	r1, r3
 800a81c:	d110      	bne.n	800a840 <_dtoa_r+0xa20>
 800a81e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a822:	d029      	beq.n	800a878 <_dtoa_r+0xa58>
 800a824:	9b08      	ldr	r3, [sp, #32]
 800a826:	2b00      	cmp	r3, #0
 800a828:	dd02      	ble.n	800a830 <_dtoa_r+0xa10>
 800a82a:	9b02      	ldr	r3, [sp, #8]
 800a82c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a830:	9b00      	ldr	r3, [sp, #0]
 800a832:	f883 8000 	strb.w	r8, [r3]
 800a836:	e63f      	b.n	800a4b8 <_dtoa_r+0x698>
 800a838:	4628      	mov	r0, r5
 800a83a:	e7bb      	b.n	800a7b4 <_dtoa_r+0x994>
 800a83c:	2201      	movs	r2, #1
 800a83e:	e7e1      	b.n	800a804 <_dtoa_r+0x9e4>
 800a840:	9b08      	ldr	r3, [sp, #32]
 800a842:	2b00      	cmp	r3, #0
 800a844:	db04      	blt.n	800a850 <_dtoa_r+0xa30>
 800a846:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a848:	430b      	orrs	r3, r1
 800a84a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a84c:	430b      	orrs	r3, r1
 800a84e:	d120      	bne.n	800a892 <_dtoa_r+0xa72>
 800a850:	2a00      	cmp	r2, #0
 800a852:	dded      	ble.n	800a830 <_dtoa_r+0xa10>
 800a854:	4649      	mov	r1, r9
 800a856:	2201      	movs	r2, #1
 800a858:	4658      	mov	r0, fp
 800a85a:	f000 fbfd 	bl	800b058 <__lshift>
 800a85e:	4621      	mov	r1, r4
 800a860:	4681      	mov	r9, r0
 800a862:	f000 fc65 	bl	800b130 <__mcmp>
 800a866:	2800      	cmp	r0, #0
 800a868:	dc03      	bgt.n	800a872 <_dtoa_r+0xa52>
 800a86a:	d1e1      	bne.n	800a830 <_dtoa_r+0xa10>
 800a86c:	f018 0f01 	tst.w	r8, #1
 800a870:	d0de      	beq.n	800a830 <_dtoa_r+0xa10>
 800a872:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a876:	d1d8      	bne.n	800a82a <_dtoa_r+0xa0a>
 800a878:	9a00      	ldr	r2, [sp, #0]
 800a87a:	2339      	movs	r3, #57	@ 0x39
 800a87c:	7013      	strb	r3, [r2, #0]
 800a87e:	4633      	mov	r3, r6
 800a880:	461e      	mov	r6, r3
 800a882:	3b01      	subs	r3, #1
 800a884:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a888:	2a39      	cmp	r2, #57	@ 0x39
 800a88a:	d052      	beq.n	800a932 <_dtoa_r+0xb12>
 800a88c:	3201      	adds	r2, #1
 800a88e:	701a      	strb	r2, [r3, #0]
 800a890:	e612      	b.n	800a4b8 <_dtoa_r+0x698>
 800a892:	2a00      	cmp	r2, #0
 800a894:	dd07      	ble.n	800a8a6 <_dtoa_r+0xa86>
 800a896:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a89a:	d0ed      	beq.n	800a878 <_dtoa_r+0xa58>
 800a89c:	9a00      	ldr	r2, [sp, #0]
 800a89e:	f108 0301 	add.w	r3, r8, #1
 800a8a2:	7013      	strb	r3, [r2, #0]
 800a8a4:	e608      	b.n	800a4b8 <_dtoa_r+0x698>
 800a8a6:	9b07      	ldr	r3, [sp, #28]
 800a8a8:	9a07      	ldr	r2, [sp, #28]
 800a8aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a8ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d028      	beq.n	800a906 <_dtoa_r+0xae6>
 800a8b4:	4649      	mov	r1, r9
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	220a      	movs	r2, #10
 800a8ba:	4658      	mov	r0, fp
 800a8bc:	f000 f9d6 	bl	800ac6c <__multadd>
 800a8c0:	42af      	cmp	r7, r5
 800a8c2:	4681      	mov	r9, r0
 800a8c4:	f04f 0300 	mov.w	r3, #0
 800a8c8:	f04f 020a 	mov.w	r2, #10
 800a8cc:	4639      	mov	r1, r7
 800a8ce:	4658      	mov	r0, fp
 800a8d0:	d107      	bne.n	800a8e2 <_dtoa_r+0xac2>
 800a8d2:	f000 f9cb 	bl	800ac6c <__multadd>
 800a8d6:	4607      	mov	r7, r0
 800a8d8:	4605      	mov	r5, r0
 800a8da:	9b07      	ldr	r3, [sp, #28]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	9307      	str	r3, [sp, #28]
 800a8e0:	e774      	b.n	800a7cc <_dtoa_r+0x9ac>
 800a8e2:	f000 f9c3 	bl	800ac6c <__multadd>
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	4607      	mov	r7, r0
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	220a      	movs	r2, #10
 800a8ee:	4658      	mov	r0, fp
 800a8f0:	f000 f9bc 	bl	800ac6c <__multadd>
 800a8f4:	4605      	mov	r5, r0
 800a8f6:	e7f0      	b.n	800a8da <_dtoa_r+0xaba>
 800a8f8:	9b00      	ldr	r3, [sp, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	bfcc      	ite	gt
 800a8fe:	461e      	movgt	r6, r3
 800a900:	2601      	movle	r6, #1
 800a902:	4456      	add	r6, sl
 800a904:	2700      	movs	r7, #0
 800a906:	4649      	mov	r1, r9
 800a908:	2201      	movs	r2, #1
 800a90a:	4658      	mov	r0, fp
 800a90c:	f000 fba4 	bl	800b058 <__lshift>
 800a910:	4621      	mov	r1, r4
 800a912:	4681      	mov	r9, r0
 800a914:	f000 fc0c 	bl	800b130 <__mcmp>
 800a918:	2800      	cmp	r0, #0
 800a91a:	dcb0      	bgt.n	800a87e <_dtoa_r+0xa5e>
 800a91c:	d102      	bne.n	800a924 <_dtoa_r+0xb04>
 800a91e:	f018 0f01 	tst.w	r8, #1
 800a922:	d1ac      	bne.n	800a87e <_dtoa_r+0xa5e>
 800a924:	4633      	mov	r3, r6
 800a926:	461e      	mov	r6, r3
 800a928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a92c:	2a30      	cmp	r2, #48	@ 0x30
 800a92e:	d0fa      	beq.n	800a926 <_dtoa_r+0xb06>
 800a930:	e5c2      	b.n	800a4b8 <_dtoa_r+0x698>
 800a932:	459a      	cmp	sl, r3
 800a934:	d1a4      	bne.n	800a880 <_dtoa_r+0xa60>
 800a936:	9b04      	ldr	r3, [sp, #16]
 800a938:	3301      	adds	r3, #1
 800a93a:	9304      	str	r3, [sp, #16]
 800a93c:	2331      	movs	r3, #49	@ 0x31
 800a93e:	f88a 3000 	strb.w	r3, [sl]
 800a942:	e5b9      	b.n	800a4b8 <_dtoa_r+0x698>
 800a944:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a946:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a9a4 <_dtoa_r+0xb84>
 800a94a:	b11b      	cbz	r3, 800a954 <_dtoa_r+0xb34>
 800a94c:	f10a 0308 	add.w	r3, sl, #8
 800a950:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a952:	6013      	str	r3, [r2, #0]
 800a954:	4650      	mov	r0, sl
 800a956:	b019      	add	sp, #100	@ 0x64
 800a958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a95c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a95e:	2b01      	cmp	r3, #1
 800a960:	f77f ae37 	ble.w	800a5d2 <_dtoa_r+0x7b2>
 800a964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a966:	930a      	str	r3, [sp, #40]	@ 0x28
 800a968:	2001      	movs	r0, #1
 800a96a:	e655      	b.n	800a618 <_dtoa_r+0x7f8>
 800a96c:	9b00      	ldr	r3, [sp, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f77f aed6 	ble.w	800a720 <_dtoa_r+0x900>
 800a974:	4656      	mov	r6, sl
 800a976:	4621      	mov	r1, r4
 800a978:	4648      	mov	r0, r9
 800a97a:	f7ff f9c9 	bl	8009d10 <quorem>
 800a97e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a982:	f806 8b01 	strb.w	r8, [r6], #1
 800a986:	9b00      	ldr	r3, [sp, #0]
 800a988:	eba6 020a 	sub.w	r2, r6, sl
 800a98c:	4293      	cmp	r3, r2
 800a98e:	ddb3      	ble.n	800a8f8 <_dtoa_r+0xad8>
 800a990:	4649      	mov	r1, r9
 800a992:	2300      	movs	r3, #0
 800a994:	220a      	movs	r2, #10
 800a996:	4658      	mov	r0, fp
 800a998:	f000 f968 	bl	800ac6c <__multadd>
 800a99c:	4681      	mov	r9, r0
 800a99e:	e7ea      	b.n	800a976 <_dtoa_r+0xb56>
 800a9a0:	0800d53d 	.word	0x0800d53d
 800a9a4:	0800d4c1 	.word	0x0800d4c1

0800a9a8 <_free_r>:
 800a9a8:	b538      	push	{r3, r4, r5, lr}
 800a9aa:	4605      	mov	r5, r0
 800a9ac:	2900      	cmp	r1, #0
 800a9ae:	d041      	beq.n	800aa34 <_free_r+0x8c>
 800a9b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9b4:	1f0c      	subs	r4, r1, #4
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	bfb8      	it	lt
 800a9ba:	18e4      	addlt	r4, r4, r3
 800a9bc:	f000 f8e8 	bl	800ab90 <__malloc_lock>
 800a9c0:	4a1d      	ldr	r2, [pc, #116]	@ (800aa38 <_free_r+0x90>)
 800a9c2:	6813      	ldr	r3, [r2, #0]
 800a9c4:	b933      	cbnz	r3, 800a9d4 <_free_r+0x2c>
 800a9c6:	6063      	str	r3, [r4, #4]
 800a9c8:	6014      	str	r4, [r2, #0]
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9d0:	f000 b8e4 	b.w	800ab9c <__malloc_unlock>
 800a9d4:	42a3      	cmp	r3, r4
 800a9d6:	d908      	bls.n	800a9ea <_free_r+0x42>
 800a9d8:	6820      	ldr	r0, [r4, #0]
 800a9da:	1821      	adds	r1, r4, r0
 800a9dc:	428b      	cmp	r3, r1
 800a9de:	bf01      	itttt	eq
 800a9e0:	6819      	ldreq	r1, [r3, #0]
 800a9e2:	685b      	ldreq	r3, [r3, #4]
 800a9e4:	1809      	addeq	r1, r1, r0
 800a9e6:	6021      	streq	r1, [r4, #0]
 800a9e8:	e7ed      	b.n	800a9c6 <_free_r+0x1e>
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	b10b      	cbz	r3, 800a9f4 <_free_r+0x4c>
 800a9f0:	42a3      	cmp	r3, r4
 800a9f2:	d9fa      	bls.n	800a9ea <_free_r+0x42>
 800a9f4:	6811      	ldr	r1, [r2, #0]
 800a9f6:	1850      	adds	r0, r2, r1
 800a9f8:	42a0      	cmp	r0, r4
 800a9fa:	d10b      	bne.n	800aa14 <_free_r+0x6c>
 800a9fc:	6820      	ldr	r0, [r4, #0]
 800a9fe:	4401      	add	r1, r0
 800aa00:	1850      	adds	r0, r2, r1
 800aa02:	4283      	cmp	r3, r0
 800aa04:	6011      	str	r1, [r2, #0]
 800aa06:	d1e0      	bne.n	800a9ca <_free_r+0x22>
 800aa08:	6818      	ldr	r0, [r3, #0]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	6053      	str	r3, [r2, #4]
 800aa0e:	4408      	add	r0, r1
 800aa10:	6010      	str	r0, [r2, #0]
 800aa12:	e7da      	b.n	800a9ca <_free_r+0x22>
 800aa14:	d902      	bls.n	800aa1c <_free_r+0x74>
 800aa16:	230c      	movs	r3, #12
 800aa18:	602b      	str	r3, [r5, #0]
 800aa1a:	e7d6      	b.n	800a9ca <_free_r+0x22>
 800aa1c:	6820      	ldr	r0, [r4, #0]
 800aa1e:	1821      	adds	r1, r4, r0
 800aa20:	428b      	cmp	r3, r1
 800aa22:	bf04      	itt	eq
 800aa24:	6819      	ldreq	r1, [r3, #0]
 800aa26:	685b      	ldreq	r3, [r3, #4]
 800aa28:	6063      	str	r3, [r4, #4]
 800aa2a:	bf04      	itt	eq
 800aa2c:	1809      	addeq	r1, r1, r0
 800aa2e:	6021      	streq	r1, [r4, #0]
 800aa30:	6054      	str	r4, [r2, #4]
 800aa32:	e7ca      	b.n	800a9ca <_free_r+0x22>
 800aa34:	bd38      	pop	{r3, r4, r5, pc}
 800aa36:	bf00      	nop
 800aa38:	20001424 	.word	0x20001424

0800aa3c <malloc>:
 800aa3c:	4b02      	ldr	r3, [pc, #8]	@ (800aa48 <malloc+0xc>)
 800aa3e:	4601      	mov	r1, r0
 800aa40:	6818      	ldr	r0, [r3, #0]
 800aa42:	f000 b825 	b.w	800aa90 <_malloc_r>
 800aa46:	bf00      	nop
 800aa48:	2000001c 	.word	0x2000001c

0800aa4c <sbrk_aligned>:
 800aa4c:	b570      	push	{r4, r5, r6, lr}
 800aa4e:	4e0f      	ldr	r6, [pc, #60]	@ (800aa8c <sbrk_aligned+0x40>)
 800aa50:	460c      	mov	r4, r1
 800aa52:	6831      	ldr	r1, [r6, #0]
 800aa54:	4605      	mov	r5, r0
 800aa56:	b911      	cbnz	r1, 800aa5e <sbrk_aligned+0x12>
 800aa58:	f001 fe0c 	bl	800c674 <_sbrk_r>
 800aa5c:	6030      	str	r0, [r6, #0]
 800aa5e:	4621      	mov	r1, r4
 800aa60:	4628      	mov	r0, r5
 800aa62:	f001 fe07 	bl	800c674 <_sbrk_r>
 800aa66:	1c43      	adds	r3, r0, #1
 800aa68:	d103      	bne.n	800aa72 <sbrk_aligned+0x26>
 800aa6a:	f04f 34ff 	mov.w	r4, #4294967295
 800aa6e:	4620      	mov	r0, r4
 800aa70:	bd70      	pop	{r4, r5, r6, pc}
 800aa72:	1cc4      	adds	r4, r0, #3
 800aa74:	f024 0403 	bic.w	r4, r4, #3
 800aa78:	42a0      	cmp	r0, r4
 800aa7a:	d0f8      	beq.n	800aa6e <sbrk_aligned+0x22>
 800aa7c:	1a21      	subs	r1, r4, r0
 800aa7e:	4628      	mov	r0, r5
 800aa80:	f001 fdf8 	bl	800c674 <_sbrk_r>
 800aa84:	3001      	adds	r0, #1
 800aa86:	d1f2      	bne.n	800aa6e <sbrk_aligned+0x22>
 800aa88:	e7ef      	b.n	800aa6a <sbrk_aligned+0x1e>
 800aa8a:	bf00      	nop
 800aa8c:	20001420 	.word	0x20001420

0800aa90 <_malloc_r>:
 800aa90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa94:	1ccd      	adds	r5, r1, #3
 800aa96:	f025 0503 	bic.w	r5, r5, #3
 800aa9a:	3508      	adds	r5, #8
 800aa9c:	2d0c      	cmp	r5, #12
 800aa9e:	bf38      	it	cc
 800aaa0:	250c      	movcc	r5, #12
 800aaa2:	2d00      	cmp	r5, #0
 800aaa4:	4606      	mov	r6, r0
 800aaa6:	db01      	blt.n	800aaac <_malloc_r+0x1c>
 800aaa8:	42a9      	cmp	r1, r5
 800aaaa:	d904      	bls.n	800aab6 <_malloc_r+0x26>
 800aaac:	230c      	movs	r3, #12
 800aaae:	6033      	str	r3, [r6, #0]
 800aab0:	2000      	movs	r0, #0
 800aab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aab6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab8c <_malloc_r+0xfc>
 800aaba:	f000 f869 	bl	800ab90 <__malloc_lock>
 800aabe:	f8d8 3000 	ldr.w	r3, [r8]
 800aac2:	461c      	mov	r4, r3
 800aac4:	bb44      	cbnz	r4, 800ab18 <_malloc_r+0x88>
 800aac6:	4629      	mov	r1, r5
 800aac8:	4630      	mov	r0, r6
 800aaca:	f7ff ffbf 	bl	800aa4c <sbrk_aligned>
 800aace:	1c43      	adds	r3, r0, #1
 800aad0:	4604      	mov	r4, r0
 800aad2:	d158      	bne.n	800ab86 <_malloc_r+0xf6>
 800aad4:	f8d8 4000 	ldr.w	r4, [r8]
 800aad8:	4627      	mov	r7, r4
 800aada:	2f00      	cmp	r7, #0
 800aadc:	d143      	bne.n	800ab66 <_malloc_r+0xd6>
 800aade:	2c00      	cmp	r4, #0
 800aae0:	d04b      	beq.n	800ab7a <_malloc_r+0xea>
 800aae2:	6823      	ldr	r3, [r4, #0]
 800aae4:	4639      	mov	r1, r7
 800aae6:	4630      	mov	r0, r6
 800aae8:	eb04 0903 	add.w	r9, r4, r3
 800aaec:	f001 fdc2 	bl	800c674 <_sbrk_r>
 800aaf0:	4581      	cmp	r9, r0
 800aaf2:	d142      	bne.n	800ab7a <_malloc_r+0xea>
 800aaf4:	6821      	ldr	r1, [r4, #0]
 800aaf6:	1a6d      	subs	r5, r5, r1
 800aaf8:	4629      	mov	r1, r5
 800aafa:	4630      	mov	r0, r6
 800aafc:	f7ff ffa6 	bl	800aa4c <sbrk_aligned>
 800ab00:	3001      	adds	r0, #1
 800ab02:	d03a      	beq.n	800ab7a <_malloc_r+0xea>
 800ab04:	6823      	ldr	r3, [r4, #0]
 800ab06:	442b      	add	r3, r5
 800ab08:	6023      	str	r3, [r4, #0]
 800ab0a:	f8d8 3000 	ldr.w	r3, [r8]
 800ab0e:	685a      	ldr	r2, [r3, #4]
 800ab10:	bb62      	cbnz	r2, 800ab6c <_malloc_r+0xdc>
 800ab12:	f8c8 7000 	str.w	r7, [r8]
 800ab16:	e00f      	b.n	800ab38 <_malloc_r+0xa8>
 800ab18:	6822      	ldr	r2, [r4, #0]
 800ab1a:	1b52      	subs	r2, r2, r5
 800ab1c:	d420      	bmi.n	800ab60 <_malloc_r+0xd0>
 800ab1e:	2a0b      	cmp	r2, #11
 800ab20:	d917      	bls.n	800ab52 <_malloc_r+0xc2>
 800ab22:	1961      	adds	r1, r4, r5
 800ab24:	42a3      	cmp	r3, r4
 800ab26:	6025      	str	r5, [r4, #0]
 800ab28:	bf18      	it	ne
 800ab2a:	6059      	strne	r1, [r3, #4]
 800ab2c:	6863      	ldr	r3, [r4, #4]
 800ab2e:	bf08      	it	eq
 800ab30:	f8c8 1000 	streq.w	r1, [r8]
 800ab34:	5162      	str	r2, [r4, r5]
 800ab36:	604b      	str	r3, [r1, #4]
 800ab38:	4630      	mov	r0, r6
 800ab3a:	f000 f82f 	bl	800ab9c <__malloc_unlock>
 800ab3e:	f104 000b 	add.w	r0, r4, #11
 800ab42:	1d23      	adds	r3, r4, #4
 800ab44:	f020 0007 	bic.w	r0, r0, #7
 800ab48:	1ac2      	subs	r2, r0, r3
 800ab4a:	bf1c      	itt	ne
 800ab4c:	1a1b      	subne	r3, r3, r0
 800ab4e:	50a3      	strne	r3, [r4, r2]
 800ab50:	e7af      	b.n	800aab2 <_malloc_r+0x22>
 800ab52:	6862      	ldr	r2, [r4, #4]
 800ab54:	42a3      	cmp	r3, r4
 800ab56:	bf0c      	ite	eq
 800ab58:	f8c8 2000 	streq.w	r2, [r8]
 800ab5c:	605a      	strne	r2, [r3, #4]
 800ab5e:	e7eb      	b.n	800ab38 <_malloc_r+0xa8>
 800ab60:	4623      	mov	r3, r4
 800ab62:	6864      	ldr	r4, [r4, #4]
 800ab64:	e7ae      	b.n	800aac4 <_malloc_r+0x34>
 800ab66:	463c      	mov	r4, r7
 800ab68:	687f      	ldr	r7, [r7, #4]
 800ab6a:	e7b6      	b.n	800aada <_malloc_r+0x4a>
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	42a3      	cmp	r3, r4
 800ab72:	d1fb      	bne.n	800ab6c <_malloc_r+0xdc>
 800ab74:	2300      	movs	r3, #0
 800ab76:	6053      	str	r3, [r2, #4]
 800ab78:	e7de      	b.n	800ab38 <_malloc_r+0xa8>
 800ab7a:	230c      	movs	r3, #12
 800ab7c:	6033      	str	r3, [r6, #0]
 800ab7e:	4630      	mov	r0, r6
 800ab80:	f000 f80c 	bl	800ab9c <__malloc_unlock>
 800ab84:	e794      	b.n	800aab0 <_malloc_r+0x20>
 800ab86:	6005      	str	r5, [r0, #0]
 800ab88:	e7d6      	b.n	800ab38 <_malloc_r+0xa8>
 800ab8a:	bf00      	nop
 800ab8c:	20001424 	.word	0x20001424

0800ab90 <__malloc_lock>:
 800ab90:	4801      	ldr	r0, [pc, #4]	@ (800ab98 <__malloc_lock+0x8>)
 800ab92:	f7ff b8a6 	b.w	8009ce2 <__retarget_lock_acquire_recursive>
 800ab96:	bf00      	nop
 800ab98:	2000141c 	.word	0x2000141c

0800ab9c <__malloc_unlock>:
 800ab9c:	4801      	ldr	r0, [pc, #4]	@ (800aba4 <__malloc_unlock+0x8>)
 800ab9e:	f7ff b8a1 	b.w	8009ce4 <__retarget_lock_release_recursive>
 800aba2:	bf00      	nop
 800aba4:	2000141c 	.word	0x2000141c

0800aba8 <_Balloc>:
 800aba8:	b570      	push	{r4, r5, r6, lr}
 800abaa:	69c6      	ldr	r6, [r0, #28]
 800abac:	4604      	mov	r4, r0
 800abae:	460d      	mov	r5, r1
 800abb0:	b976      	cbnz	r6, 800abd0 <_Balloc+0x28>
 800abb2:	2010      	movs	r0, #16
 800abb4:	f7ff ff42 	bl	800aa3c <malloc>
 800abb8:	4602      	mov	r2, r0
 800abba:	61e0      	str	r0, [r4, #28]
 800abbc:	b920      	cbnz	r0, 800abc8 <_Balloc+0x20>
 800abbe:	4b18      	ldr	r3, [pc, #96]	@ (800ac20 <_Balloc+0x78>)
 800abc0:	4818      	ldr	r0, [pc, #96]	@ (800ac24 <_Balloc+0x7c>)
 800abc2:	216b      	movs	r1, #107	@ 0x6b
 800abc4:	f001 fd70 	bl	800c6a8 <__assert_func>
 800abc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abcc:	6006      	str	r6, [r0, #0]
 800abce:	60c6      	str	r6, [r0, #12]
 800abd0:	69e6      	ldr	r6, [r4, #28]
 800abd2:	68f3      	ldr	r3, [r6, #12]
 800abd4:	b183      	cbz	r3, 800abf8 <_Balloc+0x50>
 800abd6:	69e3      	ldr	r3, [r4, #28]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abde:	b9b8      	cbnz	r0, 800ac10 <_Balloc+0x68>
 800abe0:	2101      	movs	r1, #1
 800abe2:	fa01 f605 	lsl.w	r6, r1, r5
 800abe6:	1d72      	adds	r2, r6, #5
 800abe8:	0092      	lsls	r2, r2, #2
 800abea:	4620      	mov	r0, r4
 800abec:	f001 fd7a 	bl	800c6e4 <_calloc_r>
 800abf0:	b160      	cbz	r0, 800ac0c <_Balloc+0x64>
 800abf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abf6:	e00e      	b.n	800ac16 <_Balloc+0x6e>
 800abf8:	2221      	movs	r2, #33	@ 0x21
 800abfa:	2104      	movs	r1, #4
 800abfc:	4620      	mov	r0, r4
 800abfe:	f001 fd71 	bl	800c6e4 <_calloc_r>
 800ac02:	69e3      	ldr	r3, [r4, #28]
 800ac04:	60f0      	str	r0, [r6, #12]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1e4      	bne.n	800abd6 <_Balloc+0x2e>
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	bd70      	pop	{r4, r5, r6, pc}
 800ac10:	6802      	ldr	r2, [r0, #0]
 800ac12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac16:	2300      	movs	r3, #0
 800ac18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac1c:	e7f7      	b.n	800ac0e <_Balloc+0x66>
 800ac1e:	bf00      	nop
 800ac20:	0800d4ce 	.word	0x0800d4ce
 800ac24:	0800d54e 	.word	0x0800d54e

0800ac28 <_Bfree>:
 800ac28:	b570      	push	{r4, r5, r6, lr}
 800ac2a:	69c6      	ldr	r6, [r0, #28]
 800ac2c:	4605      	mov	r5, r0
 800ac2e:	460c      	mov	r4, r1
 800ac30:	b976      	cbnz	r6, 800ac50 <_Bfree+0x28>
 800ac32:	2010      	movs	r0, #16
 800ac34:	f7ff ff02 	bl	800aa3c <malloc>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	61e8      	str	r0, [r5, #28]
 800ac3c:	b920      	cbnz	r0, 800ac48 <_Bfree+0x20>
 800ac3e:	4b09      	ldr	r3, [pc, #36]	@ (800ac64 <_Bfree+0x3c>)
 800ac40:	4809      	ldr	r0, [pc, #36]	@ (800ac68 <_Bfree+0x40>)
 800ac42:	218f      	movs	r1, #143	@ 0x8f
 800ac44:	f001 fd30 	bl	800c6a8 <__assert_func>
 800ac48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac4c:	6006      	str	r6, [r0, #0]
 800ac4e:	60c6      	str	r6, [r0, #12]
 800ac50:	b13c      	cbz	r4, 800ac62 <_Bfree+0x3a>
 800ac52:	69eb      	ldr	r3, [r5, #28]
 800ac54:	6862      	ldr	r2, [r4, #4]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac5c:	6021      	str	r1, [r4, #0]
 800ac5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac62:	bd70      	pop	{r4, r5, r6, pc}
 800ac64:	0800d4ce 	.word	0x0800d4ce
 800ac68:	0800d54e 	.word	0x0800d54e

0800ac6c <__multadd>:
 800ac6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac70:	690d      	ldr	r5, [r1, #16]
 800ac72:	4607      	mov	r7, r0
 800ac74:	460c      	mov	r4, r1
 800ac76:	461e      	mov	r6, r3
 800ac78:	f101 0c14 	add.w	ip, r1, #20
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	f8dc 3000 	ldr.w	r3, [ip]
 800ac82:	b299      	uxth	r1, r3
 800ac84:	fb02 6101 	mla	r1, r2, r1, r6
 800ac88:	0c1e      	lsrs	r6, r3, #16
 800ac8a:	0c0b      	lsrs	r3, r1, #16
 800ac8c:	fb02 3306 	mla	r3, r2, r6, r3
 800ac90:	b289      	uxth	r1, r1
 800ac92:	3001      	adds	r0, #1
 800ac94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac98:	4285      	cmp	r5, r0
 800ac9a:	f84c 1b04 	str.w	r1, [ip], #4
 800ac9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aca2:	dcec      	bgt.n	800ac7e <__multadd+0x12>
 800aca4:	b30e      	cbz	r6, 800acea <__multadd+0x7e>
 800aca6:	68a3      	ldr	r3, [r4, #8]
 800aca8:	42ab      	cmp	r3, r5
 800acaa:	dc19      	bgt.n	800ace0 <__multadd+0x74>
 800acac:	6861      	ldr	r1, [r4, #4]
 800acae:	4638      	mov	r0, r7
 800acb0:	3101      	adds	r1, #1
 800acb2:	f7ff ff79 	bl	800aba8 <_Balloc>
 800acb6:	4680      	mov	r8, r0
 800acb8:	b928      	cbnz	r0, 800acc6 <__multadd+0x5a>
 800acba:	4602      	mov	r2, r0
 800acbc:	4b0c      	ldr	r3, [pc, #48]	@ (800acf0 <__multadd+0x84>)
 800acbe:	480d      	ldr	r0, [pc, #52]	@ (800acf4 <__multadd+0x88>)
 800acc0:	21ba      	movs	r1, #186	@ 0xba
 800acc2:	f001 fcf1 	bl	800c6a8 <__assert_func>
 800acc6:	6922      	ldr	r2, [r4, #16]
 800acc8:	3202      	adds	r2, #2
 800acca:	f104 010c 	add.w	r1, r4, #12
 800acce:	0092      	lsls	r2, r2, #2
 800acd0:	300c      	adds	r0, #12
 800acd2:	f7ff f808 	bl	8009ce6 <memcpy>
 800acd6:	4621      	mov	r1, r4
 800acd8:	4638      	mov	r0, r7
 800acda:	f7ff ffa5 	bl	800ac28 <_Bfree>
 800acde:	4644      	mov	r4, r8
 800ace0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ace4:	3501      	adds	r5, #1
 800ace6:	615e      	str	r6, [r3, #20]
 800ace8:	6125      	str	r5, [r4, #16]
 800acea:	4620      	mov	r0, r4
 800acec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acf0:	0800d53d 	.word	0x0800d53d
 800acf4:	0800d54e 	.word	0x0800d54e

0800acf8 <__s2b>:
 800acf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acfc:	460c      	mov	r4, r1
 800acfe:	4615      	mov	r5, r2
 800ad00:	461f      	mov	r7, r3
 800ad02:	2209      	movs	r2, #9
 800ad04:	3308      	adds	r3, #8
 800ad06:	4606      	mov	r6, r0
 800ad08:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad0c:	2100      	movs	r1, #0
 800ad0e:	2201      	movs	r2, #1
 800ad10:	429a      	cmp	r2, r3
 800ad12:	db09      	blt.n	800ad28 <__s2b+0x30>
 800ad14:	4630      	mov	r0, r6
 800ad16:	f7ff ff47 	bl	800aba8 <_Balloc>
 800ad1a:	b940      	cbnz	r0, 800ad2e <__s2b+0x36>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	4b19      	ldr	r3, [pc, #100]	@ (800ad84 <__s2b+0x8c>)
 800ad20:	4819      	ldr	r0, [pc, #100]	@ (800ad88 <__s2b+0x90>)
 800ad22:	21d3      	movs	r1, #211	@ 0xd3
 800ad24:	f001 fcc0 	bl	800c6a8 <__assert_func>
 800ad28:	0052      	lsls	r2, r2, #1
 800ad2a:	3101      	adds	r1, #1
 800ad2c:	e7f0      	b.n	800ad10 <__s2b+0x18>
 800ad2e:	9b08      	ldr	r3, [sp, #32]
 800ad30:	6143      	str	r3, [r0, #20]
 800ad32:	2d09      	cmp	r5, #9
 800ad34:	f04f 0301 	mov.w	r3, #1
 800ad38:	6103      	str	r3, [r0, #16]
 800ad3a:	dd16      	ble.n	800ad6a <__s2b+0x72>
 800ad3c:	f104 0909 	add.w	r9, r4, #9
 800ad40:	46c8      	mov	r8, r9
 800ad42:	442c      	add	r4, r5
 800ad44:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ad48:	4601      	mov	r1, r0
 800ad4a:	3b30      	subs	r3, #48	@ 0x30
 800ad4c:	220a      	movs	r2, #10
 800ad4e:	4630      	mov	r0, r6
 800ad50:	f7ff ff8c 	bl	800ac6c <__multadd>
 800ad54:	45a0      	cmp	r8, r4
 800ad56:	d1f5      	bne.n	800ad44 <__s2b+0x4c>
 800ad58:	f1a5 0408 	sub.w	r4, r5, #8
 800ad5c:	444c      	add	r4, r9
 800ad5e:	1b2d      	subs	r5, r5, r4
 800ad60:	1963      	adds	r3, r4, r5
 800ad62:	42bb      	cmp	r3, r7
 800ad64:	db04      	blt.n	800ad70 <__s2b+0x78>
 800ad66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad6a:	340a      	adds	r4, #10
 800ad6c:	2509      	movs	r5, #9
 800ad6e:	e7f6      	b.n	800ad5e <__s2b+0x66>
 800ad70:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad74:	4601      	mov	r1, r0
 800ad76:	3b30      	subs	r3, #48	@ 0x30
 800ad78:	220a      	movs	r2, #10
 800ad7a:	4630      	mov	r0, r6
 800ad7c:	f7ff ff76 	bl	800ac6c <__multadd>
 800ad80:	e7ee      	b.n	800ad60 <__s2b+0x68>
 800ad82:	bf00      	nop
 800ad84:	0800d53d 	.word	0x0800d53d
 800ad88:	0800d54e 	.word	0x0800d54e

0800ad8c <__hi0bits>:
 800ad8c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ad90:	4603      	mov	r3, r0
 800ad92:	bf36      	itet	cc
 800ad94:	0403      	lslcc	r3, r0, #16
 800ad96:	2000      	movcs	r0, #0
 800ad98:	2010      	movcc	r0, #16
 800ad9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ad9e:	bf3c      	itt	cc
 800ada0:	021b      	lslcc	r3, r3, #8
 800ada2:	3008      	addcc	r0, #8
 800ada4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ada8:	bf3c      	itt	cc
 800adaa:	011b      	lslcc	r3, r3, #4
 800adac:	3004      	addcc	r0, #4
 800adae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adb2:	bf3c      	itt	cc
 800adb4:	009b      	lslcc	r3, r3, #2
 800adb6:	3002      	addcc	r0, #2
 800adb8:	2b00      	cmp	r3, #0
 800adba:	db05      	blt.n	800adc8 <__hi0bits+0x3c>
 800adbc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800adc0:	f100 0001 	add.w	r0, r0, #1
 800adc4:	bf08      	it	eq
 800adc6:	2020      	moveq	r0, #32
 800adc8:	4770      	bx	lr

0800adca <__lo0bits>:
 800adca:	6803      	ldr	r3, [r0, #0]
 800adcc:	4602      	mov	r2, r0
 800adce:	f013 0007 	ands.w	r0, r3, #7
 800add2:	d00b      	beq.n	800adec <__lo0bits+0x22>
 800add4:	07d9      	lsls	r1, r3, #31
 800add6:	d421      	bmi.n	800ae1c <__lo0bits+0x52>
 800add8:	0798      	lsls	r0, r3, #30
 800adda:	bf49      	itett	mi
 800addc:	085b      	lsrmi	r3, r3, #1
 800adde:	089b      	lsrpl	r3, r3, #2
 800ade0:	2001      	movmi	r0, #1
 800ade2:	6013      	strmi	r3, [r2, #0]
 800ade4:	bf5c      	itt	pl
 800ade6:	6013      	strpl	r3, [r2, #0]
 800ade8:	2002      	movpl	r0, #2
 800adea:	4770      	bx	lr
 800adec:	b299      	uxth	r1, r3
 800adee:	b909      	cbnz	r1, 800adf4 <__lo0bits+0x2a>
 800adf0:	0c1b      	lsrs	r3, r3, #16
 800adf2:	2010      	movs	r0, #16
 800adf4:	b2d9      	uxtb	r1, r3
 800adf6:	b909      	cbnz	r1, 800adfc <__lo0bits+0x32>
 800adf8:	3008      	adds	r0, #8
 800adfa:	0a1b      	lsrs	r3, r3, #8
 800adfc:	0719      	lsls	r1, r3, #28
 800adfe:	bf04      	itt	eq
 800ae00:	091b      	lsreq	r3, r3, #4
 800ae02:	3004      	addeq	r0, #4
 800ae04:	0799      	lsls	r1, r3, #30
 800ae06:	bf04      	itt	eq
 800ae08:	089b      	lsreq	r3, r3, #2
 800ae0a:	3002      	addeq	r0, #2
 800ae0c:	07d9      	lsls	r1, r3, #31
 800ae0e:	d403      	bmi.n	800ae18 <__lo0bits+0x4e>
 800ae10:	085b      	lsrs	r3, r3, #1
 800ae12:	f100 0001 	add.w	r0, r0, #1
 800ae16:	d003      	beq.n	800ae20 <__lo0bits+0x56>
 800ae18:	6013      	str	r3, [r2, #0]
 800ae1a:	4770      	bx	lr
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	4770      	bx	lr
 800ae20:	2020      	movs	r0, #32
 800ae22:	4770      	bx	lr

0800ae24 <__i2b>:
 800ae24:	b510      	push	{r4, lr}
 800ae26:	460c      	mov	r4, r1
 800ae28:	2101      	movs	r1, #1
 800ae2a:	f7ff febd 	bl	800aba8 <_Balloc>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	b928      	cbnz	r0, 800ae3e <__i2b+0x1a>
 800ae32:	4b05      	ldr	r3, [pc, #20]	@ (800ae48 <__i2b+0x24>)
 800ae34:	4805      	ldr	r0, [pc, #20]	@ (800ae4c <__i2b+0x28>)
 800ae36:	f240 1145 	movw	r1, #325	@ 0x145
 800ae3a:	f001 fc35 	bl	800c6a8 <__assert_func>
 800ae3e:	2301      	movs	r3, #1
 800ae40:	6144      	str	r4, [r0, #20]
 800ae42:	6103      	str	r3, [r0, #16]
 800ae44:	bd10      	pop	{r4, pc}
 800ae46:	bf00      	nop
 800ae48:	0800d53d 	.word	0x0800d53d
 800ae4c:	0800d54e 	.word	0x0800d54e

0800ae50 <__multiply>:
 800ae50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae54:	4614      	mov	r4, r2
 800ae56:	690a      	ldr	r2, [r1, #16]
 800ae58:	6923      	ldr	r3, [r4, #16]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	bfa8      	it	ge
 800ae5e:	4623      	movge	r3, r4
 800ae60:	460f      	mov	r7, r1
 800ae62:	bfa4      	itt	ge
 800ae64:	460c      	movge	r4, r1
 800ae66:	461f      	movge	r7, r3
 800ae68:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ae6c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ae70:	68a3      	ldr	r3, [r4, #8]
 800ae72:	6861      	ldr	r1, [r4, #4]
 800ae74:	eb0a 0609 	add.w	r6, sl, r9
 800ae78:	42b3      	cmp	r3, r6
 800ae7a:	b085      	sub	sp, #20
 800ae7c:	bfb8      	it	lt
 800ae7e:	3101      	addlt	r1, #1
 800ae80:	f7ff fe92 	bl	800aba8 <_Balloc>
 800ae84:	b930      	cbnz	r0, 800ae94 <__multiply+0x44>
 800ae86:	4602      	mov	r2, r0
 800ae88:	4b44      	ldr	r3, [pc, #272]	@ (800af9c <__multiply+0x14c>)
 800ae8a:	4845      	ldr	r0, [pc, #276]	@ (800afa0 <__multiply+0x150>)
 800ae8c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ae90:	f001 fc0a 	bl	800c6a8 <__assert_func>
 800ae94:	f100 0514 	add.w	r5, r0, #20
 800ae98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae9c:	462b      	mov	r3, r5
 800ae9e:	2200      	movs	r2, #0
 800aea0:	4543      	cmp	r3, r8
 800aea2:	d321      	bcc.n	800aee8 <__multiply+0x98>
 800aea4:	f107 0114 	add.w	r1, r7, #20
 800aea8:	f104 0214 	add.w	r2, r4, #20
 800aeac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800aeb0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800aeb4:	9302      	str	r3, [sp, #8]
 800aeb6:	1b13      	subs	r3, r2, r4
 800aeb8:	3b15      	subs	r3, #21
 800aeba:	f023 0303 	bic.w	r3, r3, #3
 800aebe:	3304      	adds	r3, #4
 800aec0:	f104 0715 	add.w	r7, r4, #21
 800aec4:	42ba      	cmp	r2, r7
 800aec6:	bf38      	it	cc
 800aec8:	2304      	movcc	r3, #4
 800aeca:	9301      	str	r3, [sp, #4]
 800aecc:	9b02      	ldr	r3, [sp, #8]
 800aece:	9103      	str	r1, [sp, #12]
 800aed0:	428b      	cmp	r3, r1
 800aed2:	d80c      	bhi.n	800aeee <__multiply+0x9e>
 800aed4:	2e00      	cmp	r6, #0
 800aed6:	dd03      	ble.n	800aee0 <__multiply+0x90>
 800aed8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d05b      	beq.n	800af98 <__multiply+0x148>
 800aee0:	6106      	str	r6, [r0, #16]
 800aee2:	b005      	add	sp, #20
 800aee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee8:	f843 2b04 	str.w	r2, [r3], #4
 800aeec:	e7d8      	b.n	800aea0 <__multiply+0x50>
 800aeee:	f8b1 a000 	ldrh.w	sl, [r1]
 800aef2:	f1ba 0f00 	cmp.w	sl, #0
 800aef6:	d024      	beq.n	800af42 <__multiply+0xf2>
 800aef8:	f104 0e14 	add.w	lr, r4, #20
 800aefc:	46a9      	mov	r9, r5
 800aefe:	f04f 0c00 	mov.w	ip, #0
 800af02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af06:	f8d9 3000 	ldr.w	r3, [r9]
 800af0a:	fa1f fb87 	uxth.w	fp, r7
 800af0e:	b29b      	uxth	r3, r3
 800af10:	fb0a 330b 	mla	r3, sl, fp, r3
 800af14:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800af18:	f8d9 7000 	ldr.w	r7, [r9]
 800af1c:	4463      	add	r3, ip
 800af1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800af22:	fb0a c70b 	mla	r7, sl, fp, ip
 800af26:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800af30:	4572      	cmp	r2, lr
 800af32:	f849 3b04 	str.w	r3, [r9], #4
 800af36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800af3a:	d8e2      	bhi.n	800af02 <__multiply+0xb2>
 800af3c:	9b01      	ldr	r3, [sp, #4]
 800af3e:	f845 c003 	str.w	ip, [r5, r3]
 800af42:	9b03      	ldr	r3, [sp, #12]
 800af44:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800af48:	3104      	adds	r1, #4
 800af4a:	f1b9 0f00 	cmp.w	r9, #0
 800af4e:	d021      	beq.n	800af94 <__multiply+0x144>
 800af50:	682b      	ldr	r3, [r5, #0]
 800af52:	f104 0c14 	add.w	ip, r4, #20
 800af56:	46ae      	mov	lr, r5
 800af58:	f04f 0a00 	mov.w	sl, #0
 800af5c:	f8bc b000 	ldrh.w	fp, [ip]
 800af60:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800af64:	fb09 770b 	mla	r7, r9, fp, r7
 800af68:	4457      	add	r7, sl
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800af70:	f84e 3b04 	str.w	r3, [lr], #4
 800af74:	f85c 3b04 	ldr.w	r3, [ip], #4
 800af78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af7c:	f8be 3000 	ldrh.w	r3, [lr]
 800af80:	fb09 330a 	mla	r3, r9, sl, r3
 800af84:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800af88:	4562      	cmp	r2, ip
 800af8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af8e:	d8e5      	bhi.n	800af5c <__multiply+0x10c>
 800af90:	9f01      	ldr	r7, [sp, #4]
 800af92:	51eb      	str	r3, [r5, r7]
 800af94:	3504      	adds	r5, #4
 800af96:	e799      	b.n	800aecc <__multiply+0x7c>
 800af98:	3e01      	subs	r6, #1
 800af9a:	e79b      	b.n	800aed4 <__multiply+0x84>
 800af9c:	0800d53d 	.word	0x0800d53d
 800afa0:	0800d54e 	.word	0x0800d54e

0800afa4 <__pow5mult>:
 800afa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa8:	4615      	mov	r5, r2
 800afaa:	f012 0203 	ands.w	r2, r2, #3
 800afae:	4607      	mov	r7, r0
 800afb0:	460e      	mov	r6, r1
 800afb2:	d007      	beq.n	800afc4 <__pow5mult+0x20>
 800afb4:	4c25      	ldr	r4, [pc, #148]	@ (800b04c <__pow5mult+0xa8>)
 800afb6:	3a01      	subs	r2, #1
 800afb8:	2300      	movs	r3, #0
 800afba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800afbe:	f7ff fe55 	bl	800ac6c <__multadd>
 800afc2:	4606      	mov	r6, r0
 800afc4:	10ad      	asrs	r5, r5, #2
 800afc6:	d03d      	beq.n	800b044 <__pow5mult+0xa0>
 800afc8:	69fc      	ldr	r4, [r7, #28]
 800afca:	b97c      	cbnz	r4, 800afec <__pow5mult+0x48>
 800afcc:	2010      	movs	r0, #16
 800afce:	f7ff fd35 	bl	800aa3c <malloc>
 800afd2:	4602      	mov	r2, r0
 800afd4:	61f8      	str	r0, [r7, #28]
 800afd6:	b928      	cbnz	r0, 800afe4 <__pow5mult+0x40>
 800afd8:	4b1d      	ldr	r3, [pc, #116]	@ (800b050 <__pow5mult+0xac>)
 800afda:	481e      	ldr	r0, [pc, #120]	@ (800b054 <__pow5mult+0xb0>)
 800afdc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800afe0:	f001 fb62 	bl	800c6a8 <__assert_func>
 800afe4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afe8:	6004      	str	r4, [r0, #0]
 800afea:	60c4      	str	r4, [r0, #12]
 800afec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aff0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aff4:	b94c      	cbnz	r4, 800b00a <__pow5mult+0x66>
 800aff6:	f240 2171 	movw	r1, #625	@ 0x271
 800affa:	4638      	mov	r0, r7
 800affc:	f7ff ff12 	bl	800ae24 <__i2b>
 800b000:	2300      	movs	r3, #0
 800b002:	f8c8 0008 	str.w	r0, [r8, #8]
 800b006:	4604      	mov	r4, r0
 800b008:	6003      	str	r3, [r0, #0]
 800b00a:	f04f 0900 	mov.w	r9, #0
 800b00e:	07eb      	lsls	r3, r5, #31
 800b010:	d50a      	bpl.n	800b028 <__pow5mult+0x84>
 800b012:	4631      	mov	r1, r6
 800b014:	4622      	mov	r2, r4
 800b016:	4638      	mov	r0, r7
 800b018:	f7ff ff1a 	bl	800ae50 <__multiply>
 800b01c:	4631      	mov	r1, r6
 800b01e:	4680      	mov	r8, r0
 800b020:	4638      	mov	r0, r7
 800b022:	f7ff fe01 	bl	800ac28 <_Bfree>
 800b026:	4646      	mov	r6, r8
 800b028:	106d      	asrs	r5, r5, #1
 800b02a:	d00b      	beq.n	800b044 <__pow5mult+0xa0>
 800b02c:	6820      	ldr	r0, [r4, #0]
 800b02e:	b938      	cbnz	r0, 800b040 <__pow5mult+0x9c>
 800b030:	4622      	mov	r2, r4
 800b032:	4621      	mov	r1, r4
 800b034:	4638      	mov	r0, r7
 800b036:	f7ff ff0b 	bl	800ae50 <__multiply>
 800b03a:	6020      	str	r0, [r4, #0]
 800b03c:	f8c0 9000 	str.w	r9, [r0]
 800b040:	4604      	mov	r4, r0
 800b042:	e7e4      	b.n	800b00e <__pow5mult+0x6a>
 800b044:	4630      	mov	r0, r6
 800b046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b04a:	bf00      	nop
 800b04c:	0800d5a8 	.word	0x0800d5a8
 800b050:	0800d4ce 	.word	0x0800d4ce
 800b054:	0800d54e 	.word	0x0800d54e

0800b058 <__lshift>:
 800b058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b05c:	460c      	mov	r4, r1
 800b05e:	6849      	ldr	r1, [r1, #4]
 800b060:	6923      	ldr	r3, [r4, #16]
 800b062:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b066:	68a3      	ldr	r3, [r4, #8]
 800b068:	4607      	mov	r7, r0
 800b06a:	4691      	mov	r9, r2
 800b06c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b070:	f108 0601 	add.w	r6, r8, #1
 800b074:	42b3      	cmp	r3, r6
 800b076:	db0b      	blt.n	800b090 <__lshift+0x38>
 800b078:	4638      	mov	r0, r7
 800b07a:	f7ff fd95 	bl	800aba8 <_Balloc>
 800b07e:	4605      	mov	r5, r0
 800b080:	b948      	cbnz	r0, 800b096 <__lshift+0x3e>
 800b082:	4602      	mov	r2, r0
 800b084:	4b28      	ldr	r3, [pc, #160]	@ (800b128 <__lshift+0xd0>)
 800b086:	4829      	ldr	r0, [pc, #164]	@ (800b12c <__lshift+0xd4>)
 800b088:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b08c:	f001 fb0c 	bl	800c6a8 <__assert_func>
 800b090:	3101      	adds	r1, #1
 800b092:	005b      	lsls	r3, r3, #1
 800b094:	e7ee      	b.n	800b074 <__lshift+0x1c>
 800b096:	2300      	movs	r3, #0
 800b098:	f100 0114 	add.w	r1, r0, #20
 800b09c:	f100 0210 	add.w	r2, r0, #16
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	4553      	cmp	r3, sl
 800b0a4:	db33      	blt.n	800b10e <__lshift+0xb6>
 800b0a6:	6920      	ldr	r0, [r4, #16]
 800b0a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0ac:	f104 0314 	add.w	r3, r4, #20
 800b0b0:	f019 091f 	ands.w	r9, r9, #31
 800b0b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b0b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b0bc:	d02b      	beq.n	800b116 <__lshift+0xbe>
 800b0be:	f1c9 0e20 	rsb	lr, r9, #32
 800b0c2:	468a      	mov	sl, r1
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	6818      	ldr	r0, [r3, #0]
 800b0c8:	fa00 f009 	lsl.w	r0, r0, r9
 800b0cc:	4310      	orrs	r0, r2
 800b0ce:	f84a 0b04 	str.w	r0, [sl], #4
 800b0d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0d6:	459c      	cmp	ip, r3
 800b0d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b0dc:	d8f3      	bhi.n	800b0c6 <__lshift+0x6e>
 800b0de:	ebac 0304 	sub.w	r3, ip, r4
 800b0e2:	3b15      	subs	r3, #21
 800b0e4:	f023 0303 	bic.w	r3, r3, #3
 800b0e8:	3304      	adds	r3, #4
 800b0ea:	f104 0015 	add.w	r0, r4, #21
 800b0ee:	4584      	cmp	ip, r0
 800b0f0:	bf38      	it	cc
 800b0f2:	2304      	movcc	r3, #4
 800b0f4:	50ca      	str	r2, [r1, r3]
 800b0f6:	b10a      	cbz	r2, 800b0fc <__lshift+0xa4>
 800b0f8:	f108 0602 	add.w	r6, r8, #2
 800b0fc:	3e01      	subs	r6, #1
 800b0fe:	4638      	mov	r0, r7
 800b100:	612e      	str	r6, [r5, #16]
 800b102:	4621      	mov	r1, r4
 800b104:	f7ff fd90 	bl	800ac28 <_Bfree>
 800b108:	4628      	mov	r0, r5
 800b10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b10e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b112:	3301      	adds	r3, #1
 800b114:	e7c5      	b.n	800b0a2 <__lshift+0x4a>
 800b116:	3904      	subs	r1, #4
 800b118:	f853 2b04 	ldr.w	r2, [r3], #4
 800b11c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b120:	459c      	cmp	ip, r3
 800b122:	d8f9      	bhi.n	800b118 <__lshift+0xc0>
 800b124:	e7ea      	b.n	800b0fc <__lshift+0xa4>
 800b126:	bf00      	nop
 800b128:	0800d53d 	.word	0x0800d53d
 800b12c:	0800d54e 	.word	0x0800d54e

0800b130 <__mcmp>:
 800b130:	690a      	ldr	r2, [r1, #16]
 800b132:	4603      	mov	r3, r0
 800b134:	6900      	ldr	r0, [r0, #16]
 800b136:	1a80      	subs	r0, r0, r2
 800b138:	b530      	push	{r4, r5, lr}
 800b13a:	d10e      	bne.n	800b15a <__mcmp+0x2a>
 800b13c:	3314      	adds	r3, #20
 800b13e:	3114      	adds	r1, #20
 800b140:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b144:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b148:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b14c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b150:	4295      	cmp	r5, r2
 800b152:	d003      	beq.n	800b15c <__mcmp+0x2c>
 800b154:	d205      	bcs.n	800b162 <__mcmp+0x32>
 800b156:	f04f 30ff 	mov.w	r0, #4294967295
 800b15a:	bd30      	pop	{r4, r5, pc}
 800b15c:	42a3      	cmp	r3, r4
 800b15e:	d3f3      	bcc.n	800b148 <__mcmp+0x18>
 800b160:	e7fb      	b.n	800b15a <__mcmp+0x2a>
 800b162:	2001      	movs	r0, #1
 800b164:	e7f9      	b.n	800b15a <__mcmp+0x2a>
	...

0800b168 <__mdiff>:
 800b168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b16c:	4689      	mov	r9, r1
 800b16e:	4606      	mov	r6, r0
 800b170:	4611      	mov	r1, r2
 800b172:	4648      	mov	r0, r9
 800b174:	4614      	mov	r4, r2
 800b176:	f7ff ffdb 	bl	800b130 <__mcmp>
 800b17a:	1e05      	subs	r5, r0, #0
 800b17c:	d112      	bne.n	800b1a4 <__mdiff+0x3c>
 800b17e:	4629      	mov	r1, r5
 800b180:	4630      	mov	r0, r6
 800b182:	f7ff fd11 	bl	800aba8 <_Balloc>
 800b186:	4602      	mov	r2, r0
 800b188:	b928      	cbnz	r0, 800b196 <__mdiff+0x2e>
 800b18a:	4b3f      	ldr	r3, [pc, #252]	@ (800b288 <__mdiff+0x120>)
 800b18c:	f240 2137 	movw	r1, #567	@ 0x237
 800b190:	483e      	ldr	r0, [pc, #248]	@ (800b28c <__mdiff+0x124>)
 800b192:	f001 fa89 	bl	800c6a8 <__assert_func>
 800b196:	2301      	movs	r3, #1
 800b198:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b19c:	4610      	mov	r0, r2
 800b19e:	b003      	add	sp, #12
 800b1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a4:	bfbc      	itt	lt
 800b1a6:	464b      	movlt	r3, r9
 800b1a8:	46a1      	movlt	r9, r4
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b1b0:	bfba      	itte	lt
 800b1b2:	461c      	movlt	r4, r3
 800b1b4:	2501      	movlt	r5, #1
 800b1b6:	2500      	movge	r5, #0
 800b1b8:	f7ff fcf6 	bl	800aba8 <_Balloc>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	b918      	cbnz	r0, 800b1c8 <__mdiff+0x60>
 800b1c0:	4b31      	ldr	r3, [pc, #196]	@ (800b288 <__mdiff+0x120>)
 800b1c2:	f240 2145 	movw	r1, #581	@ 0x245
 800b1c6:	e7e3      	b.n	800b190 <__mdiff+0x28>
 800b1c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b1cc:	6926      	ldr	r6, [r4, #16]
 800b1ce:	60c5      	str	r5, [r0, #12]
 800b1d0:	f109 0310 	add.w	r3, r9, #16
 800b1d4:	f109 0514 	add.w	r5, r9, #20
 800b1d8:	f104 0e14 	add.w	lr, r4, #20
 800b1dc:	f100 0b14 	add.w	fp, r0, #20
 800b1e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b1e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b1e8:	9301      	str	r3, [sp, #4]
 800b1ea:	46d9      	mov	r9, fp
 800b1ec:	f04f 0c00 	mov.w	ip, #0
 800b1f0:	9b01      	ldr	r3, [sp, #4]
 800b1f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b1f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b1fa:	9301      	str	r3, [sp, #4]
 800b1fc:	fa1f f38a 	uxth.w	r3, sl
 800b200:	4619      	mov	r1, r3
 800b202:	b283      	uxth	r3, r0
 800b204:	1acb      	subs	r3, r1, r3
 800b206:	0c00      	lsrs	r0, r0, #16
 800b208:	4463      	add	r3, ip
 800b20a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b20e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b212:	b29b      	uxth	r3, r3
 800b214:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b218:	4576      	cmp	r6, lr
 800b21a:	f849 3b04 	str.w	r3, [r9], #4
 800b21e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b222:	d8e5      	bhi.n	800b1f0 <__mdiff+0x88>
 800b224:	1b33      	subs	r3, r6, r4
 800b226:	3b15      	subs	r3, #21
 800b228:	f023 0303 	bic.w	r3, r3, #3
 800b22c:	3415      	adds	r4, #21
 800b22e:	3304      	adds	r3, #4
 800b230:	42a6      	cmp	r6, r4
 800b232:	bf38      	it	cc
 800b234:	2304      	movcc	r3, #4
 800b236:	441d      	add	r5, r3
 800b238:	445b      	add	r3, fp
 800b23a:	461e      	mov	r6, r3
 800b23c:	462c      	mov	r4, r5
 800b23e:	4544      	cmp	r4, r8
 800b240:	d30e      	bcc.n	800b260 <__mdiff+0xf8>
 800b242:	f108 0103 	add.w	r1, r8, #3
 800b246:	1b49      	subs	r1, r1, r5
 800b248:	f021 0103 	bic.w	r1, r1, #3
 800b24c:	3d03      	subs	r5, #3
 800b24e:	45a8      	cmp	r8, r5
 800b250:	bf38      	it	cc
 800b252:	2100      	movcc	r1, #0
 800b254:	440b      	add	r3, r1
 800b256:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b25a:	b191      	cbz	r1, 800b282 <__mdiff+0x11a>
 800b25c:	6117      	str	r7, [r2, #16]
 800b25e:	e79d      	b.n	800b19c <__mdiff+0x34>
 800b260:	f854 1b04 	ldr.w	r1, [r4], #4
 800b264:	46e6      	mov	lr, ip
 800b266:	0c08      	lsrs	r0, r1, #16
 800b268:	fa1c fc81 	uxtah	ip, ip, r1
 800b26c:	4471      	add	r1, lr
 800b26e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b272:	b289      	uxth	r1, r1
 800b274:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b278:	f846 1b04 	str.w	r1, [r6], #4
 800b27c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b280:	e7dd      	b.n	800b23e <__mdiff+0xd6>
 800b282:	3f01      	subs	r7, #1
 800b284:	e7e7      	b.n	800b256 <__mdiff+0xee>
 800b286:	bf00      	nop
 800b288:	0800d53d 	.word	0x0800d53d
 800b28c:	0800d54e 	.word	0x0800d54e

0800b290 <__ulp>:
 800b290:	b082      	sub	sp, #8
 800b292:	ed8d 0b00 	vstr	d0, [sp]
 800b296:	9a01      	ldr	r2, [sp, #4]
 800b298:	4b0f      	ldr	r3, [pc, #60]	@ (800b2d8 <__ulp+0x48>)
 800b29a:	4013      	ands	r3, r2
 800b29c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	dc08      	bgt.n	800b2b6 <__ulp+0x26>
 800b2a4:	425b      	negs	r3, r3
 800b2a6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b2aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b2ae:	da04      	bge.n	800b2ba <__ulp+0x2a>
 800b2b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b2b4:	4113      	asrs	r3, r2
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	e008      	b.n	800b2cc <__ulp+0x3c>
 800b2ba:	f1a2 0314 	sub.w	r3, r2, #20
 800b2be:	2b1e      	cmp	r3, #30
 800b2c0:	bfda      	itte	le
 800b2c2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b2c6:	40da      	lsrle	r2, r3
 800b2c8:	2201      	movgt	r2, #1
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	4610      	mov	r0, r2
 800b2d0:	ec41 0b10 	vmov	d0, r0, r1
 800b2d4:	b002      	add	sp, #8
 800b2d6:	4770      	bx	lr
 800b2d8:	7ff00000 	.word	0x7ff00000

0800b2dc <__b2d>:
 800b2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e0:	6906      	ldr	r6, [r0, #16]
 800b2e2:	f100 0814 	add.w	r8, r0, #20
 800b2e6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b2ea:	1f37      	subs	r7, r6, #4
 800b2ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	f7ff fd4b 	bl	800ad8c <__hi0bits>
 800b2f6:	f1c0 0320 	rsb	r3, r0, #32
 800b2fa:	280a      	cmp	r0, #10
 800b2fc:	600b      	str	r3, [r1, #0]
 800b2fe:	491b      	ldr	r1, [pc, #108]	@ (800b36c <__b2d+0x90>)
 800b300:	dc15      	bgt.n	800b32e <__b2d+0x52>
 800b302:	f1c0 0c0b 	rsb	ip, r0, #11
 800b306:	fa22 f30c 	lsr.w	r3, r2, ip
 800b30a:	45b8      	cmp	r8, r7
 800b30c:	ea43 0501 	orr.w	r5, r3, r1
 800b310:	bf34      	ite	cc
 800b312:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b316:	2300      	movcs	r3, #0
 800b318:	3015      	adds	r0, #21
 800b31a:	fa02 f000 	lsl.w	r0, r2, r0
 800b31e:	fa23 f30c 	lsr.w	r3, r3, ip
 800b322:	4303      	orrs	r3, r0
 800b324:	461c      	mov	r4, r3
 800b326:	ec45 4b10 	vmov	d0, r4, r5
 800b32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b32e:	45b8      	cmp	r8, r7
 800b330:	bf3a      	itte	cc
 800b332:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b336:	f1a6 0708 	subcc.w	r7, r6, #8
 800b33a:	2300      	movcs	r3, #0
 800b33c:	380b      	subs	r0, #11
 800b33e:	d012      	beq.n	800b366 <__b2d+0x8a>
 800b340:	f1c0 0120 	rsb	r1, r0, #32
 800b344:	fa23 f401 	lsr.w	r4, r3, r1
 800b348:	4082      	lsls	r2, r0
 800b34a:	4322      	orrs	r2, r4
 800b34c:	4547      	cmp	r7, r8
 800b34e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b352:	bf8c      	ite	hi
 800b354:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b358:	2200      	movls	r2, #0
 800b35a:	4083      	lsls	r3, r0
 800b35c:	40ca      	lsrs	r2, r1
 800b35e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b362:	4313      	orrs	r3, r2
 800b364:	e7de      	b.n	800b324 <__b2d+0x48>
 800b366:	ea42 0501 	orr.w	r5, r2, r1
 800b36a:	e7db      	b.n	800b324 <__b2d+0x48>
 800b36c:	3ff00000 	.word	0x3ff00000

0800b370 <__d2b>:
 800b370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b374:	460f      	mov	r7, r1
 800b376:	2101      	movs	r1, #1
 800b378:	ec59 8b10 	vmov	r8, r9, d0
 800b37c:	4616      	mov	r6, r2
 800b37e:	f7ff fc13 	bl	800aba8 <_Balloc>
 800b382:	4604      	mov	r4, r0
 800b384:	b930      	cbnz	r0, 800b394 <__d2b+0x24>
 800b386:	4602      	mov	r2, r0
 800b388:	4b23      	ldr	r3, [pc, #140]	@ (800b418 <__d2b+0xa8>)
 800b38a:	4824      	ldr	r0, [pc, #144]	@ (800b41c <__d2b+0xac>)
 800b38c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b390:	f001 f98a 	bl	800c6a8 <__assert_func>
 800b394:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b398:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b39c:	b10d      	cbz	r5, 800b3a2 <__d2b+0x32>
 800b39e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b3a2:	9301      	str	r3, [sp, #4]
 800b3a4:	f1b8 0300 	subs.w	r3, r8, #0
 800b3a8:	d023      	beq.n	800b3f2 <__d2b+0x82>
 800b3aa:	4668      	mov	r0, sp
 800b3ac:	9300      	str	r3, [sp, #0]
 800b3ae:	f7ff fd0c 	bl	800adca <__lo0bits>
 800b3b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b3b6:	b1d0      	cbz	r0, 800b3ee <__d2b+0x7e>
 800b3b8:	f1c0 0320 	rsb	r3, r0, #32
 800b3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b3c0:	430b      	orrs	r3, r1
 800b3c2:	40c2      	lsrs	r2, r0
 800b3c4:	6163      	str	r3, [r4, #20]
 800b3c6:	9201      	str	r2, [sp, #4]
 800b3c8:	9b01      	ldr	r3, [sp, #4]
 800b3ca:	61a3      	str	r3, [r4, #24]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	bf0c      	ite	eq
 800b3d0:	2201      	moveq	r2, #1
 800b3d2:	2202      	movne	r2, #2
 800b3d4:	6122      	str	r2, [r4, #16]
 800b3d6:	b1a5      	cbz	r5, 800b402 <__d2b+0x92>
 800b3d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b3dc:	4405      	add	r5, r0
 800b3de:	603d      	str	r5, [r7, #0]
 800b3e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b3e4:	6030      	str	r0, [r6, #0]
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	b003      	add	sp, #12
 800b3ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3ee:	6161      	str	r1, [r4, #20]
 800b3f0:	e7ea      	b.n	800b3c8 <__d2b+0x58>
 800b3f2:	a801      	add	r0, sp, #4
 800b3f4:	f7ff fce9 	bl	800adca <__lo0bits>
 800b3f8:	9b01      	ldr	r3, [sp, #4]
 800b3fa:	6163      	str	r3, [r4, #20]
 800b3fc:	3020      	adds	r0, #32
 800b3fe:	2201      	movs	r2, #1
 800b400:	e7e8      	b.n	800b3d4 <__d2b+0x64>
 800b402:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b406:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b40a:	6038      	str	r0, [r7, #0]
 800b40c:	6918      	ldr	r0, [r3, #16]
 800b40e:	f7ff fcbd 	bl	800ad8c <__hi0bits>
 800b412:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b416:	e7e5      	b.n	800b3e4 <__d2b+0x74>
 800b418:	0800d53d 	.word	0x0800d53d
 800b41c:	0800d54e 	.word	0x0800d54e

0800b420 <__ratio>:
 800b420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b424:	b085      	sub	sp, #20
 800b426:	e9cd 1000 	strd	r1, r0, [sp]
 800b42a:	a902      	add	r1, sp, #8
 800b42c:	f7ff ff56 	bl	800b2dc <__b2d>
 800b430:	9800      	ldr	r0, [sp, #0]
 800b432:	a903      	add	r1, sp, #12
 800b434:	ec55 4b10 	vmov	r4, r5, d0
 800b438:	f7ff ff50 	bl	800b2dc <__b2d>
 800b43c:	9b01      	ldr	r3, [sp, #4]
 800b43e:	6919      	ldr	r1, [r3, #16]
 800b440:	9b00      	ldr	r3, [sp, #0]
 800b442:	691b      	ldr	r3, [r3, #16]
 800b444:	1ac9      	subs	r1, r1, r3
 800b446:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b44a:	1a9b      	subs	r3, r3, r2
 800b44c:	ec5b ab10 	vmov	sl, fp, d0
 800b450:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b454:	2b00      	cmp	r3, #0
 800b456:	bfce      	itee	gt
 800b458:	462a      	movgt	r2, r5
 800b45a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b45e:	465a      	movle	r2, fp
 800b460:	462f      	mov	r7, r5
 800b462:	46d9      	mov	r9, fp
 800b464:	bfcc      	ite	gt
 800b466:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b46a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b46e:	464b      	mov	r3, r9
 800b470:	4652      	mov	r2, sl
 800b472:	4620      	mov	r0, r4
 800b474:	4639      	mov	r1, r7
 800b476:	f7f5 fa11 	bl	800089c <__aeabi_ddiv>
 800b47a:	ec41 0b10 	vmov	d0, r0, r1
 800b47e:	b005      	add	sp, #20
 800b480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b484 <__copybits>:
 800b484:	3901      	subs	r1, #1
 800b486:	b570      	push	{r4, r5, r6, lr}
 800b488:	1149      	asrs	r1, r1, #5
 800b48a:	6914      	ldr	r4, [r2, #16]
 800b48c:	3101      	adds	r1, #1
 800b48e:	f102 0314 	add.w	r3, r2, #20
 800b492:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b496:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b49a:	1f05      	subs	r5, r0, #4
 800b49c:	42a3      	cmp	r3, r4
 800b49e:	d30c      	bcc.n	800b4ba <__copybits+0x36>
 800b4a0:	1aa3      	subs	r3, r4, r2
 800b4a2:	3b11      	subs	r3, #17
 800b4a4:	f023 0303 	bic.w	r3, r3, #3
 800b4a8:	3211      	adds	r2, #17
 800b4aa:	42a2      	cmp	r2, r4
 800b4ac:	bf88      	it	hi
 800b4ae:	2300      	movhi	r3, #0
 800b4b0:	4418      	add	r0, r3
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	4288      	cmp	r0, r1
 800b4b6:	d305      	bcc.n	800b4c4 <__copybits+0x40>
 800b4b8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800b4be:	f845 6f04 	str.w	r6, [r5, #4]!
 800b4c2:	e7eb      	b.n	800b49c <__copybits+0x18>
 800b4c4:	f840 3b04 	str.w	r3, [r0], #4
 800b4c8:	e7f4      	b.n	800b4b4 <__copybits+0x30>

0800b4ca <__any_on>:
 800b4ca:	f100 0214 	add.w	r2, r0, #20
 800b4ce:	6900      	ldr	r0, [r0, #16]
 800b4d0:	114b      	asrs	r3, r1, #5
 800b4d2:	4298      	cmp	r0, r3
 800b4d4:	b510      	push	{r4, lr}
 800b4d6:	db11      	blt.n	800b4fc <__any_on+0x32>
 800b4d8:	dd0a      	ble.n	800b4f0 <__any_on+0x26>
 800b4da:	f011 011f 	ands.w	r1, r1, #31
 800b4de:	d007      	beq.n	800b4f0 <__any_on+0x26>
 800b4e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b4e4:	fa24 f001 	lsr.w	r0, r4, r1
 800b4e8:	fa00 f101 	lsl.w	r1, r0, r1
 800b4ec:	428c      	cmp	r4, r1
 800b4ee:	d10b      	bne.n	800b508 <__any_on+0x3e>
 800b4f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d803      	bhi.n	800b500 <__any_on+0x36>
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	bd10      	pop	{r4, pc}
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	e7f7      	b.n	800b4f0 <__any_on+0x26>
 800b500:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b504:	2900      	cmp	r1, #0
 800b506:	d0f5      	beq.n	800b4f4 <__any_on+0x2a>
 800b508:	2001      	movs	r0, #1
 800b50a:	e7f6      	b.n	800b4fa <__any_on+0x30>

0800b50c <sulp>:
 800b50c:	b570      	push	{r4, r5, r6, lr}
 800b50e:	4604      	mov	r4, r0
 800b510:	460d      	mov	r5, r1
 800b512:	ec45 4b10 	vmov	d0, r4, r5
 800b516:	4616      	mov	r6, r2
 800b518:	f7ff feba 	bl	800b290 <__ulp>
 800b51c:	ec51 0b10 	vmov	r0, r1, d0
 800b520:	b17e      	cbz	r6, 800b542 <sulp+0x36>
 800b522:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b526:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	dd09      	ble.n	800b542 <sulp+0x36>
 800b52e:	051b      	lsls	r3, r3, #20
 800b530:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b534:	2400      	movs	r4, #0
 800b536:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b53a:	4622      	mov	r2, r4
 800b53c:	462b      	mov	r3, r5
 800b53e:	f7f5 f883 	bl	8000648 <__aeabi_dmul>
 800b542:	ec41 0b10 	vmov	d0, r0, r1
 800b546:	bd70      	pop	{r4, r5, r6, pc}

0800b548 <_strtod_l>:
 800b548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b54c:	b09f      	sub	sp, #124	@ 0x7c
 800b54e:	460c      	mov	r4, r1
 800b550:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b552:	2200      	movs	r2, #0
 800b554:	921a      	str	r2, [sp, #104]	@ 0x68
 800b556:	9005      	str	r0, [sp, #20]
 800b558:	f04f 0a00 	mov.w	sl, #0
 800b55c:	f04f 0b00 	mov.w	fp, #0
 800b560:	460a      	mov	r2, r1
 800b562:	9219      	str	r2, [sp, #100]	@ 0x64
 800b564:	7811      	ldrb	r1, [r2, #0]
 800b566:	292b      	cmp	r1, #43	@ 0x2b
 800b568:	d04a      	beq.n	800b600 <_strtod_l+0xb8>
 800b56a:	d838      	bhi.n	800b5de <_strtod_l+0x96>
 800b56c:	290d      	cmp	r1, #13
 800b56e:	d832      	bhi.n	800b5d6 <_strtod_l+0x8e>
 800b570:	2908      	cmp	r1, #8
 800b572:	d832      	bhi.n	800b5da <_strtod_l+0x92>
 800b574:	2900      	cmp	r1, #0
 800b576:	d03b      	beq.n	800b5f0 <_strtod_l+0xa8>
 800b578:	2200      	movs	r2, #0
 800b57a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b57c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b57e:	782a      	ldrb	r2, [r5, #0]
 800b580:	2a30      	cmp	r2, #48	@ 0x30
 800b582:	f040 80b3 	bne.w	800b6ec <_strtod_l+0x1a4>
 800b586:	786a      	ldrb	r2, [r5, #1]
 800b588:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b58c:	2a58      	cmp	r2, #88	@ 0x58
 800b58e:	d16e      	bne.n	800b66e <_strtod_l+0x126>
 800b590:	9302      	str	r3, [sp, #8]
 800b592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b594:	9301      	str	r3, [sp, #4]
 800b596:	ab1a      	add	r3, sp, #104	@ 0x68
 800b598:	9300      	str	r3, [sp, #0]
 800b59a:	4a8e      	ldr	r2, [pc, #568]	@ (800b7d4 <_strtod_l+0x28c>)
 800b59c:	9805      	ldr	r0, [sp, #20]
 800b59e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b5a0:	a919      	add	r1, sp, #100	@ 0x64
 800b5a2:	f001 f91b 	bl	800c7dc <__gethex>
 800b5a6:	f010 060f 	ands.w	r6, r0, #15
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	d005      	beq.n	800b5ba <_strtod_l+0x72>
 800b5ae:	2e06      	cmp	r6, #6
 800b5b0:	d128      	bne.n	800b604 <_strtod_l+0xbc>
 800b5b2:	3501      	adds	r5, #1
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	9519      	str	r5, [sp, #100]	@ 0x64
 800b5b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f040 858e 	bne.w	800c0de <_strtod_l+0xb96>
 800b5c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5c4:	b1cb      	cbz	r3, 800b5fa <_strtod_l+0xb2>
 800b5c6:	4652      	mov	r2, sl
 800b5c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b5cc:	ec43 2b10 	vmov	d0, r2, r3
 800b5d0:	b01f      	add	sp, #124	@ 0x7c
 800b5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d6:	2920      	cmp	r1, #32
 800b5d8:	d1ce      	bne.n	800b578 <_strtod_l+0x30>
 800b5da:	3201      	adds	r2, #1
 800b5dc:	e7c1      	b.n	800b562 <_strtod_l+0x1a>
 800b5de:	292d      	cmp	r1, #45	@ 0x2d
 800b5e0:	d1ca      	bne.n	800b578 <_strtod_l+0x30>
 800b5e2:	2101      	movs	r1, #1
 800b5e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b5e6:	1c51      	adds	r1, r2, #1
 800b5e8:	9119      	str	r1, [sp, #100]	@ 0x64
 800b5ea:	7852      	ldrb	r2, [r2, #1]
 800b5ec:	2a00      	cmp	r2, #0
 800b5ee:	d1c5      	bne.n	800b57c <_strtod_l+0x34>
 800b5f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b5f2:	9419      	str	r4, [sp, #100]	@ 0x64
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f040 8570 	bne.w	800c0da <_strtod_l+0xb92>
 800b5fa:	4652      	mov	r2, sl
 800b5fc:	465b      	mov	r3, fp
 800b5fe:	e7e5      	b.n	800b5cc <_strtod_l+0x84>
 800b600:	2100      	movs	r1, #0
 800b602:	e7ef      	b.n	800b5e4 <_strtod_l+0x9c>
 800b604:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b606:	b13a      	cbz	r2, 800b618 <_strtod_l+0xd0>
 800b608:	2135      	movs	r1, #53	@ 0x35
 800b60a:	a81c      	add	r0, sp, #112	@ 0x70
 800b60c:	f7ff ff3a 	bl	800b484 <__copybits>
 800b610:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b612:	9805      	ldr	r0, [sp, #20]
 800b614:	f7ff fb08 	bl	800ac28 <_Bfree>
 800b618:	3e01      	subs	r6, #1
 800b61a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b61c:	2e04      	cmp	r6, #4
 800b61e:	d806      	bhi.n	800b62e <_strtod_l+0xe6>
 800b620:	e8df f006 	tbb	[pc, r6]
 800b624:	201d0314 	.word	0x201d0314
 800b628:	14          	.byte	0x14
 800b629:	00          	.byte	0x00
 800b62a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b62e:	05e1      	lsls	r1, r4, #23
 800b630:	bf48      	it	mi
 800b632:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b636:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b63a:	0d1b      	lsrs	r3, r3, #20
 800b63c:	051b      	lsls	r3, r3, #20
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d1bb      	bne.n	800b5ba <_strtod_l+0x72>
 800b642:	f7fe fb23 	bl	8009c8c <__errno>
 800b646:	2322      	movs	r3, #34	@ 0x22
 800b648:	6003      	str	r3, [r0, #0]
 800b64a:	e7b6      	b.n	800b5ba <_strtod_l+0x72>
 800b64c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b650:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b654:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b658:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b65c:	e7e7      	b.n	800b62e <_strtod_l+0xe6>
 800b65e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b7dc <_strtod_l+0x294>
 800b662:	e7e4      	b.n	800b62e <_strtod_l+0xe6>
 800b664:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b668:	f04f 3aff 	mov.w	sl, #4294967295
 800b66c:	e7df      	b.n	800b62e <_strtod_l+0xe6>
 800b66e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b670:	1c5a      	adds	r2, r3, #1
 800b672:	9219      	str	r2, [sp, #100]	@ 0x64
 800b674:	785b      	ldrb	r3, [r3, #1]
 800b676:	2b30      	cmp	r3, #48	@ 0x30
 800b678:	d0f9      	beq.n	800b66e <_strtod_l+0x126>
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d09d      	beq.n	800b5ba <_strtod_l+0x72>
 800b67e:	2301      	movs	r3, #1
 800b680:	9309      	str	r3, [sp, #36]	@ 0x24
 800b682:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b684:	930c      	str	r3, [sp, #48]	@ 0x30
 800b686:	2300      	movs	r3, #0
 800b688:	9308      	str	r3, [sp, #32]
 800b68a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b68c:	461f      	mov	r7, r3
 800b68e:	220a      	movs	r2, #10
 800b690:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b692:	7805      	ldrb	r5, [r0, #0]
 800b694:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b698:	b2d9      	uxtb	r1, r3
 800b69a:	2909      	cmp	r1, #9
 800b69c:	d928      	bls.n	800b6f0 <_strtod_l+0x1a8>
 800b69e:	494e      	ldr	r1, [pc, #312]	@ (800b7d8 <_strtod_l+0x290>)
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	f000 ffd5 	bl	800c650 <strncmp>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d032      	beq.n	800b710 <_strtod_l+0x1c8>
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	462a      	mov	r2, r5
 800b6ae:	4681      	mov	r9, r0
 800b6b0:	463d      	mov	r5, r7
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2a65      	cmp	r2, #101	@ 0x65
 800b6b6:	d001      	beq.n	800b6bc <_strtod_l+0x174>
 800b6b8:	2a45      	cmp	r2, #69	@ 0x45
 800b6ba:	d114      	bne.n	800b6e6 <_strtod_l+0x19e>
 800b6bc:	b91d      	cbnz	r5, 800b6c6 <_strtod_l+0x17e>
 800b6be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6c0:	4302      	orrs	r2, r0
 800b6c2:	d095      	beq.n	800b5f0 <_strtod_l+0xa8>
 800b6c4:	2500      	movs	r5, #0
 800b6c6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b6c8:	1c62      	adds	r2, r4, #1
 800b6ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6cc:	7862      	ldrb	r2, [r4, #1]
 800b6ce:	2a2b      	cmp	r2, #43	@ 0x2b
 800b6d0:	d077      	beq.n	800b7c2 <_strtod_l+0x27a>
 800b6d2:	2a2d      	cmp	r2, #45	@ 0x2d
 800b6d4:	d07b      	beq.n	800b7ce <_strtod_l+0x286>
 800b6d6:	f04f 0c00 	mov.w	ip, #0
 800b6da:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b6de:	2909      	cmp	r1, #9
 800b6e0:	f240 8082 	bls.w	800b7e8 <_strtod_l+0x2a0>
 800b6e4:	9419      	str	r4, [sp, #100]	@ 0x64
 800b6e6:	f04f 0800 	mov.w	r8, #0
 800b6ea:	e0a2      	b.n	800b832 <_strtod_l+0x2ea>
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	e7c7      	b.n	800b680 <_strtod_l+0x138>
 800b6f0:	2f08      	cmp	r7, #8
 800b6f2:	bfd5      	itete	le
 800b6f4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b6f6:	9908      	ldrgt	r1, [sp, #32]
 800b6f8:	fb02 3301 	mlale	r3, r2, r1, r3
 800b6fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b700:	f100 0001 	add.w	r0, r0, #1
 800b704:	bfd4      	ite	le
 800b706:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b708:	9308      	strgt	r3, [sp, #32]
 800b70a:	3701      	adds	r7, #1
 800b70c:	9019      	str	r0, [sp, #100]	@ 0x64
 800b70e:	e7bf      	b.n	800b690 <_strtod_l+0x148>
 800b710:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b712:	1c5a      	adds	r2, r3, #1
 800b714:	9219      	str	r2, [sp, #100]	@ 0x64
 800b716:	785a      	ldrb	r2, [r3, #1]
 800b718:	b37f      	cbz	r7, 800b77a <_strtod_l+0x232>
 800b71a:	4681      	mov	r9, r0
 800b71c:	463d      	mov	r5, r7
 800b71e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b722:	2b09      	cmp	r3, #9
 800b724:	d912      	bls.n	800b74c <_strtod_l+0x204>
 800b726:	2301      	movs	r3, #1
 800b728:	e7c4      	b.n	800b6b4 <_strtod_l+0x16c>
 800b72a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b72c:	1c5a      	adds	r2, r3, #1
 800b72e:	9219      	str	r2, [sp, #100]	@ 0x64
 800b730:	785a      	ldrb	r2, [r3, #1]
 800b732:	3001      	adds	r0, #1
 800b734:	2a30      	cmp	r2, #48	@ 0x30
 800b736:	d0f8      	beq.n	800b72a <_strtod_l+0x1e2>
 800b738:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b73c:	2b08      	cmp	r3, #8
 800b73e:	f200 84d3 	bhi.w	800c0e8 <_strtod_l+0xba0>
 800b742:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b744:	930c      	str	r3, [sp, #48]	@ 0x30
 800b746:	4681      	mov	r9, r0
 800b748:	2000      	movs	r0, #0
 800b74a:	4605      	mov	r5, r0
 800b74c:	3a30      	subs	r2, #48	@ 0x30
 800b74e:	f100 0301 	add.w	r3, r0, #1
 800b752:	d02a      	beq.n	800b7aa <_strtod_l+0x262>
 800b754:	4499      	add	r9, r3
 800b756:	eb00 0c05 	add.w	ip, r0, r5
 800b75a:	462b      	mov	r3, r5
 800b75c:	210a      	movs	r1, #10
 800b75e:	4563      	cmp	r3, ip
 800b760:	d10d      	bne.n	800b77e <_strtod_l+0x236>
 800b762:	1c69      	adds	r1, r5, #1
 800b764:	4401      	add	r1, r0
 800b766:	4428      	add	r0, r5
 800b768:	2808      	cmp	r0, #8
 800b76a:	dc16      	bgt.n	800b79a <_strtod_l+0x252>
 800b76c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b76e:	230a      	movs	r3, #10
 800b770:	fb03 2300 	mla	r3, r3, r0, r2
 800b774:	930a      	str	r3, [sp, #40]	@ 0x28
 800b776:	2300      	movs	r3, #0
 800b778:	e018      	b.n	800b7ac <_strtod_l+0x264>
 800b77a:	4638      	mov	r0, r7
 800b77c:	e7da      	b.n	800b734 <_strtod_l+0x1ec>
 800b77e:	2b08      	cmp	r3, #8
 800b780:	f103 0301 	add.w	r3, r3, #1
 800b784:	dc03      	bgt.n	800b78e <_strtod_l+0x246>
 800b786:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b788:	434e      	muls	r6, r1
 800b78a:	960a      	str	r6, [sp, #40]	@ 0x28
 800b78c:	e7e7      	b.n	800b75e <_strtod_l+0x216>
 800b78e:	2b10      	cmp	r3, #16
 800b790:	bfde      	ittt	le
 800b792:	9e08      	ldrle	r6, [sp, #32]
 800b794:	434e      	mulle	r6, r1
 800b796:	9608      	strle	r6, [sp, #32]
 800b798:	e7e1      	b.n	800b75e <_strtod_l+0x216>
 800b79a:	280f      	cmp	r0, #15
 800b79c:	dceb      	bgt.n	800b776 <_strtod_l+0x22e>
 800b79e:	9808      	ldr	r0, [sp, #32]
 800b7a0:	230a      	movs	r3, #10
 800b7a2:	fb03 2300 	mla	r3, r3, r0, r2
 800b7a6:	9308      	str	r3, [sp, #32]
 800b7a8:	e7e5      	b.n	800b776 <_strtod_l+0x22e>
 800b7aa:	4629      	mov	r1, r5
 800b7ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b7ae:	1c50      	adds	r0, r2, #1
 800b7b0:	9019      	str	r0, [sp, #100]	@ 0x64
 800b7b2:	7852      	ldrb	r2, [r2, #1]
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	460d      	mov	r5, r1
 800b7b8:	e7b1      	b.n	800b71e <_strtod_l+0x1d6>
 800b7ba:	f04f 0900 	mov.w	r9, #0
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e77d      	b.n	800b6be <_strtod_l+0x176>
 800b7c2:	f04f 0c00 	mov.w	ip, #0
 800b7c6:	1ca2      	adds	r2, r4, #2
 800b7c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800b7ca:	78a2      	ldrb	r2, [r4, #2]
 800b7cc:	e785      	b.n	800b6da <_strtod_l+0x192>
 800b7ce:	f04f 0c01 	mov.w	ip, #1
 800b7d2:	e7f8      	b.n	800b7c6 <_strtod_l+0x27e>
 800b7d4:	0800d6c0 	.word	0x0800d6c0
 800b7d8:	0800d6a8 	.word	0x0800d6a8
 800b7dc:	7ff00000 	.word	0x7ff00000
 800b7e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b7e2:	1c51      	adds	r1, r2, #1
 800b7e4:	9119      	str	r1, [sp, #100]	@ 0x64
 800b7e6:	7852      	ldrb	r2, [r2, #1]
 800b7e8:	2a30      	cmp	r2, #48	@ 0x30
 800b7ea:	d0f9      	beq.n	800b7e0 <_strtod_l+0x298>
 800b7ec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b7f0:	2908      	cmp	r1, #8
 800b7f2:	f63f af78 	bhi.w	800b6e6 <_strtod_l+0x19e>
 800b7f6:	3a30      	subs	r2, #48	@ 0x30
 800b7f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b7fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b7fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b7fe:	f04f 080a 	mov.w	r8, #10
 800b802:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b804:	1c56      	adds	r6, r2, #1
 800b806:	9619      	str	r6, [sp, #100]	@ 0x64
 800b808:	7852      	ldrb	r2, [r2, #1]
 800b80a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b80e:	f1be 0f09 	cmp.w	lr, #9
 800b812:	d939      	bls.n	800b888 <_strtod_l+0x340>
 800b814:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b816:	1a76      	subs	r6, r6, r1
 800b818:	2e08      	cmp	r6, #8
 800b81a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b81e:	dc03      	bgt.n	800b828 <_strtod_l+0x2e0>
 800b820:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b822:	4588      	cmp	r8, r1
 800b824:	bfa8      	it	ge
 800b826:	4688      	movge	r8, r1
 800b828:	f1bc 0f00 	cmp.w	ip, #0
 800b82c:	d001      	beq.n	800b832 <_strtod_l+0x2ea>
 800b82e:	f1c8 0800 	rsb	r8, r8, #0
 800b832:	2d00      	cmp	r5, #0
 800b834:	d14e      	bne.n	800b8d4 <_strtod_l+0x38c>
 800b836:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b838:	4308      	orrs	r0, r1
 800b83a:	f47f aebe 	bne.w	800b5ba <_strtod_l+0x72>
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f47f aed6 	bne.w	800b5f0 <_strtod_l+0xa8>
 800b844:	2a69      	cmp	r2, #105	@ 0x69
 800b846:	d028      	beq.n	800b89a <_strtod_l+0x352>
 800b848:	dc25      	bgt.n	800b896 <_strtod_l+0x34e>
 800b84a:	2a49      	cmp	r2, #73	@ 0x49
 800b84c:	d025      	beq.n	800b89a <_strtod_l+0x352>
 800b84e:	2a4e      	cmp	r2, #78	@ 0x4e
 800b850:	f47f aece 	bne.w	800b5f0 <_strtod_l+0xa8>
 800b854:	499b      	ldr	r1, [pc, #620]	@ (800bac4 <_strtod_l+0x57c>)
 800b856:	a819      	add	r0, sp, #100	@ 0x64
 800b858:	f001 f9e2 	bl	800cc20 <__match>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	f43f aec7 	beq.w	800b5f0 <_strtod_l+0xa8>
 800b862:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	2b28      	cmp	r3, #40	@ 0x28
 800b868:	d12e      	bne.n	800b8c8 <_strtod_l+0x380>
 800b86a:	4997      	ldr	r1, [pc, #604]	@ (800bac8 <_strtod_l+0x580>)
 800b86c:	aa1c      	add	r2, sp, #112	@ 0x70
 800b86e:	a819      	add	r0, sp, #100	@ 0x64
 800b870:	f001 f9ea 	bl	800cc48 <__hexnan>
 800b874:	2805      	cmp	r0, #5
 800b876:	d127      	bne.n	800b8c8 <_strtod_l+0x380>
 800b878:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b87a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b87e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b882:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b886:	e698      	b.n	800b5ba <_strtod_l+0x72>
 800b888:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b88a:	fb08 2101 	mla	r1, r8, r1, r2
 800b88e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b892:	920e      	str	r2, [sp, #56]	@ 0x38
 800b894:	e7b5      	b.n	800b802 <_strtod_l+0x2ba>
 800b896:	2a6e      	cmp	r2, #110	@ 0x6e
 800b898:	e7da      	b.n	800b850 <_strtod_l+0x308>
 800b89a:	498c      	ldr	r1, [pc, #560]	@ (800bacc <_strtod_l+0x584>)
 800b89c:	a819      	add	r0, sp, #100	@ 0x64
 800b89e:	f001 f9bf 	bl	800cc20 <__match>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	f43f aea4 	beq.w	800b5f0 <_strtod_l+0xa8>
 800b8a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8aa:	4989      	ldr	r1, [pc, #548]	@ (800bad0 <_strtod_l+0x588>)
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	a819      	add	r0, sp, #100	@ 0x64
 800b8b0:	9319      	str	r3, [sp, #100]	@ 0x64
 800b8b2:	f001 f9b5 	bl	800cc20 <__match>
 800b8b6:	b910      	cbnz	r0, 800b8be <_strtod_l+0x376>
 800b8b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	9319      	str	r3, [sp, #100]	@ 0x64
 800b8be:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bae0 <_strtod_l+0x598>
 800b8c2:	f04f 0a00 	mov.w	sl, #0
 800b8c6:	e678      	b.n	800b5ba <_strtod_l+0x72>
 800b8c8:	4882      	ldr	r0, [pc, #520]	@ (800bad4 <_strtod_l+0x58c>)
 800b8ca:	f000 fee5 	bl	800c698 <nan>
 800b8ce:	ec5b ab10 	vmov	sl, fp, d0
 800b8d2:	e672      	b.n	800b5ba <_strtod_l+0x72>
 800b8d4:	eba8 0309 	sub.w	r3, r8, r9
 800b8d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b8da:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8dc:	2f00      	cmp	r7, #0
 800b8de:	bf08      	it	eq
 800b8e0:	462f      	moveq	r7, r5
 800b8e2:	2d10      	cmp	r5, #16
 800b8e4:	462c      	mov	r4, r5
 800b8e6:	bfa8      	it	ge
 800b8e8:	2410      	movge	r4, #16
 800b8ea:	f7f4 fe33 	bl	8000554 <__aeabi_ui2d>
 800b8ee:	2d09      	cmp	r5, #9
 800b8f0:	4682      	mov	sl, r0
 800b8f2:	468b      	mov	fp, r1
 800b8f4:	dc13      	bgt.n	800b91e <_strtod_l+0x3d6>
 800b8f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f43f ae5e 	beq.w	800b5ba <_strtod_l+0x72>
 800b8fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b900:	dd78      	ble.n	800b9f4 <_strtod_l+0x4ac>
 800b902:	2b16      	cmp	r3, #22
 800b904:	dc5f      	bgt.n	800b9c6 <_strtod_l+0x47e>
 800b906:	4974      	ldr	r1, [pc, #464]	@ (800bad8 <_strtod_l+0x590>)
 800b908:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b90c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b910:	4652      	mov	r2, sl
 800b912:	465b      	mov	r3, fp
 800b914:	f7f4 fe98 	bl	8000648 <__aeabi_dmul>
 800b918:	4682      	mov	sl, r0
 800b91a:	468b      	mov	fp, r1
 800b91c:	e64d      	b.n	800b5ba <_strtod_l+0x72>
 800b91e:	4b6e      	ldr	r3, [pc, #440]	@ (800bad8 <_strtod_l+0x590>)
 800b920:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b924:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b928:	f7f4 fe8e 	bl	8000648 <__aeabi_dmul>
 800b92c:	4682      	mov	sl, r0
 800b92e:	9808      	ldr	r0, [sp, #32]
 800b930:	468b      	mov	fp, r1
 800b932:	f7f4 fe0f 	bl	8000554 <__aeabi_ui2d>
 800b936:	4602      	mov	r2, r0
 800b938:	460b      	mov	r3, r1
 800b93a:	4650      	mov	r0, sl
 800b93c:	4659      	mov	r1, fp
 800b93e:	f7f4 fccd 	bl	80002dc <__adddf3>
 800b942:	2d0f      	cmp	r5, #15
 800b944:	4682      	mov	sl, r0
 800b946:	468b      	mov	fp, r1
 800b948:	ddd5      	ble.n	800b8f6 <_strtod_l+0x3ae>
 800b94a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b94c:	1b2c      	subs	r4, r5, r4
 800b94e:	441c      	add	r4, r3
 800b950:	2c00      	cmp	r4, #0
 800b952:	f340 8096 	ble.w	800ba82 <_strtod_l+0x53a>
 800b956:	f014 030f 	ands.w	r3, r4, #15
 800b95a:	d00a      	beq.n	800b972 <_strtod_l+0x42a>
 800b95c:	495e      	ldr	r1, [pc, #376]	@ (800bad8 <_strtod_l+0x590>)
 800b95e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b962:	4652      	mov	r2, sl
 800b964:	465b      	mov	r3, fp
 800b966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b96a:	f7f4 fe6d 	bl	8000648 <__aeabi_dmul>
 800b96e:	4682      	mov	sl, r0
 800b970:	468b      	mov	fp, r1
 800b972:	f034 040f 	bics.w	r4, r4, #15
 800b976:	d073      	beq.n	800ba60 <_strtod_l+0x518>
 800b978:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b97c:	dd48      	ble.n	800ba10 <_strtod_l+0x4c8>
 800b97e:	2400      	movs	r4, #0
 800b980:	46a0      	mov	r8, r4
 800b982:	940a      	str	r4, [sp, #40]	@ 0x28
 800b984:	46a1      	mov	r9, r4
 800b986:	9a05      	ldr	r2, [sp, #20]
 800b988:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bae0 <_strtod_l+0x598>
 800b98c:	2322      	movs	r3, #34	@ 0x22
 800b98e:	6013      	str	r3, [r2, #0]
 800b990:	f04f 0a00 	mov.w	sl, #0
 800b994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b996:	2b00      	cmp	r3, #0
 800b998:	f43f ae0f 	beq.w	800b5ba <_strtod_l+0x72>
 800b99c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b99e:	9805      	ldr	r0, [sp, #20]
 800b9a0:	f7ff f942 	bl	800ac28 <_Bfree>
 800b9a4:	9805      	ldr	r0, [sp, #20]
 800b9a6:	4649      	mov	r1, r9
 800b9a8:	f7ff f93e 	bl	800ac28 <_Bfree>
 800b9ac:	9805      	ldr	r0, [sp, #20]
 800b9ae:	4641      	mov	r1, r8
 800b9b0:	f7ff f93a 	bl	800ac28 <_Bfree>
 800b9b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b9b6:	9805      	ldr	r0, [sp, #20]
 800b9b8:	f7ff f936 	bl	800ac28 <_Bfree>
 800b9bc:	9805      	ldr	r0, [sp, #20]
 800b9be:	4621      	mov	r1, r4
 800b9c0:	f7ff f932 	bl	800ac28 <_Bfree>
 800b9c4:	e5f9      	b.n	800b5ba <_strtod_l+0x72>
 800b9c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	dbbc      	blt.n	800b94a <_strtod_l+0x402>
 800b9d0:	4c41      	ldr	r4, [pc, #260]	@ (800bad8 <_strtod_l+0x590>)
 800b9d2:	f1c5 050f 	rsb	r5, r5, #15
 800b9d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b9da:	4652      	mov	r2, sl
 800b9dc:	465b      	mov	r3, fp
 800b9de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9e2:	f7f4 fe31 	bl	8000648 <__aeabi_dmul>
 800b9e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9e8:	1b5d      	subs	r5, r3, r5
 800b9ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b9ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b9f2:	e78f      	b.n	800b914 <_strtod_l+0x3cc>
 800b9f4:	3316      	adds	r3, #22
 800b9f6:	dba8      	blt.n	800b94a <_strtod_l+0x402>
 800b9f8:	4b37      	ldr	r3, [pc, #220]	@ (800bad8 <_strtod_l+0x590>)
 800b9fa:	eba9 0808 	sub.w	r8, r9, r8
 800b9fe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ba02:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ba06:	4650      	mov	r0, sl
 800ba08:	4659      	mov	r1, fp
 800ba0a:	f7f4 ff47 	bl	800089c <__aeabi_ddiv>
 800ba0e:	e783      	b.n	800b918 <_strtod_l+0x3d0>
 800ba10:	4b32      	ldr	r3, [pc, #200]	@ (800badc <_strtod_l+0x594>)
 800ba12:	9308      	str	r3, [sp, #32]
 800ba14:	2300      	movs	r3, #0
 800ba16:	1124      	asrs	r4, r4, #4
 800ba18:	4650      	mov	r0, sl
 800ba1a:	4659      	mov	r1, fp
 800ba1c:	461e      	mov	r6, r3
 800ba1e:	2c01      	cmp	r4, #1
 800ba20:	dc21      	bgt.n	800ba66 <_strtod_l+0x51e>
 800ba22:	b10b      	cbz	r3, 800ba28 <_strtod_l+0x4e0>
 800ba24:	4682      	mov	sl, r0
 800ba26:	468b      	mov	fp, r1
 800ba28:	492c      	ldr	r1, [pc, #176]	@ (800badc <_strtod_l+0x594>)
 800ba2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ba2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ba32:	4652      	mov	r2, sl
 800ba34:	465b      	mov	r3, fp
 800ba36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba3a:	f7f4 fe05 	bl	8000648 <__aeabi_dmul>
 800ba3e:	4b28      	ldr	r3, [pc, #160]	@ (800bae0 <_strtod_l+0x598>)
 800ba40:	460a      	mov	r2, r1
 800ba42:	400b      	ands	r3, r1
 800ba44:	4927      	ldr	r1, [pc, #156]	@ (800bae4 <_strtod_l+0x59c>)
 800ba46:	428b      	cmp	r3, r1
 800ba48:	4682      	mov	sl, r0
 800ba4a:	d898      	bhi.n	800b97e <_strtod_l+0x436>
 800ba4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ba50:	428b      	cmp	r3, r1
 800ba52:	bf86      	itte	hi
 800ba54:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bae8 <_strtod_l+0x5a0>
 800ba58:	f04f 3aff 	movhi.w	sl, #4294967295
 800ba5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ba60:	2300      	movs	r3, #0
 800ba62:	9308      	str	r3, [sp, #32]
 800ba64:	e07a      	b.n	800bb5c <_strtod_l+0x614>
 800ba66:	07e2      	lsls	r2, r4, #31
 800ba68:	d505      	bpl.n	800ba76 <_strtod_l+0x52e>
 800ba6a:	9b08      	ldr	r3, [sp, #32]
 800ba6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba70:	f7f4 fdea 	bl	8000648 <__aeabi_dmul>
 800ba74:	2301      	movs	r3, #1
 800ba76:	9a08      	ldr	r2, [sp, #32]
 800ba78:	3208      	adds	r2, #8
 800ba7a:	3601      	adds	r6, #1
 800ba7c:	1064      	asrs	r4, r4, #1
 800ba7e:	9208      	str	r2, [sp, #32]
 800ba80:	e7cd      	b.n	800ba1e <_strtod_l+0x4d6>
 800ba82:	d0ed      	beq.n	800ba60 <_strtod_l+0x518>
 800ba84:	4264      	negs	r4, r4
 800ba86:	f014 020f 	ands.w	r2, r4, #15
 800ba8a:	d00a      	beq.n	800baa2 <_strtod_l+0x55a>
 800ba8c:	4b12      	ldr	r3, [pc, #72]	@ (800bad8 <_strtod_l+0x590>)
 800ba8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba92:	4650      	mov	r0, sl
 800ba94:	4659      	mov	r1, fp
 800ba96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9a:	f7f4 feff 	bl	800089c <__aeabi_ddiv>
 800ba9e:	4682      	mov	sl, r0
 800baa0:	468b      	mov	fp, r1
 800baa2:	1124      	asrs	r4, r4, #4
 800baa4:	d0dc      	beq.n	800ba60 <_strtod_l+0x518>
 800baa6:	2c1f      	cmp	r4, #31
 800baa8:	dd20      	ble.n	800baec <_strtod_l+0x5a4>
 800baaa:	2400      	movs	r4, #0
 800baac:	46a0      	mov	r8, r4
 800baae:	940a      	str	r4, [sp, #40]	@ 0x28
 800bab0:	46a1      	mov	r9, r4
 800bab2:	9a05      	ldr	r2, [sp, #20]
 800bab4:	2322      	movs	r3, #34	@ 0x22
 800bab6:	f04f 0a00 	mov.w	sl, #0
 800baba:	f04f 0b00 	mov.w	fp, #0
 800babe:	6013      	str	r3, [r2, #0]
 800bac0:	e768      	b.n	800b994 <_strtod_l+0x44c>
 800bac2:	bf00      	nop
 800bac4:	0800d495 	.word	0x0800d495
 800bac8:	0800d6ac 	.word	0x0800d6ac
 800bacc:	0800d48d 	.word	0x0800d48d
 800bad0:	0800d4c4 	.word	0x0800d4c4
 800bad4:	0800d855 	.word	0x0800d855
 800bad8:	0800d5e0 	.word	0x0800d5e0
 800badc:	0800d5b8 	.word	0x0800d5b8
 800bae0:	7ff00000 	.word	0x7ff00000
 800bae4:	7ca00000 	.word	0x7ca00000
 800bae8:	7fefffff 	.word	0x7fefffff
 800baec:	f014 0310 	ands.w	r3, r4, #16
 800baf0:	bf18      	it	ne
 800baf2:	236a      	movne	r3, #106	@ 0x6a
 800baf4:	4ea9      	ldr	r6, [pc, #676]	@ (800bd9c <_strtod_l+0x854>)
 800baf6:	9308      	str	r3, [sp, #32]
 800baf8:	4650      	mov	r0, sl
 800bafa:	4659      	mov	r1, fp
 800bafc:	2300      	movs	r3, #0
 800bafe:	07e2      	lsls	r2, r4, #31
 800bb00:	d504      	bpl.n	800bb0c <_strtod_l+0x5c4>
 800bb02:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb06:	f7f4 fd9f 	bl	8000648 <__aeabi_dmul>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	1064      	asrs	r4, r4, #1
 800bb0e:	f106 0608 	add.w	r6, r6, #8
 800bb12:	d1f4      	bne.n	800bafe <_strtod_l+0x5b6>
 800bb14:	b10b      	cbz	r3, 800bb1a <_strtod_l+0x5d2>
 800bb16:	4682      	mov	sl, r0
 800bb18:	468b      	mov	fp, r1
 800bb1a:	9b08      	ldr	r3, [sp, #32]
 800bb1c:	b1b3      	cbz	r3, 800bb4c <_strtod_l+0x604>
 800bb1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bb22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	4659      	mov	r1, fp
 800bb2a:	dd0f      	ble.n	800bb4c <_strtod_l+0x604>
 800bb2c:	2b1f      	cmp	r3, #31
 800bb2e:	dd55      	ble.n	800bbdc <_strtod_l+0x694>
 800bb30:	2b34      	cmp	r3, #52	@ 0x34
 800bb32:	bfde      	ittt	le
 800bb34:	f04f 33ff 	movle.w	r3, #4294967295
 800bb38:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bb3c:	4093      	lslle	r3, r2
 800bb3e:	f04f 0a00 	mov.w	sl, #0
 800bb42:	bfcc      	ite	gt
 800bb44:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bb48:	ea03 0b01 	andle.w	fp, r3, r1
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	2300      	movs	r3, #0
 800bb50:	4650      	mov	r0, sl
 800bb52:	4659      	mov	r1, fp
 800bb54:	f7f4 ffe0 	bl	8000b18 <__aeabi_dcmpeq>
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d1a6      	bne.n	800baaa <_strtod_l+0x562>
 800bb5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb5e:	9300      	str	r3, [sp, #0]
 800bb60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bb62:	9805      	ldr	r0, [sp, #20]
 800bb64:	462b      	mov	r3, r5
 800bb66:	463a      	mov	r2, r7
 800bb68:	f7ff f8c6 	bl	800acf8 <__s2b>
 800bb6c:	900a      	str	r0, [sp, #40]	@ 0x28
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	f43f af05 	beq.w	800b97e <_strtod_l+0x436>
 800bb74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb76:	2a00      	cmp	r2, #0
 800bb78:	eba9 0308 	sub.w	r3, r9, r8
 800bb7c:	bfa8      	it	ge
 800bb7e:	2300      	movge	r3, #0
 800bb80:	9312      	str	r3, [sp, #72]	@ 0x48
 800bb82:	2400      	movs	r4, #0
 800bb84:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bb88:	9316      	str	r3, [sp, #88]	@ 0x58
 800bb8a:	46a0      	mov	r8, r4
 800bb8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb8e:	9805      	ldr	r0, [sp, #20]
 800bb90:	6859      	ldr	r1, [r3, #4]
 800bb92:	f7ff f809 	bl	800aba8 <_Balloc>
 800bb96:	4681      	mov	r9, r0
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	f43f aef4 	beq.w	800b986 <_strtod_l+0x43e>
 800bb9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bba0:	691a      	ldr	r2, [r3, #16]
 800bba2:	3202      	adds	r2, #2
 800bba4:	f103 010c 	add.w	r1, r3, #12
 800bba8:	0092      	lsls	r2, r2, #2
 800bbaa:	300c      	adds	r0, #12
 800bbac:	f7fe f89b 	bl	8009ce6 <memcpy>
 800bbb0:	ec4b ab10 	vmov	d0, sl, fp
 800bbb4:	9805      	ldr	r0, [sp, #20]
 800bbb6:	aa1c      	add	r2, sp, #112	@ 0x70
 800bbb8:	a91b      	add	r1, sp, #108	@ 0x6c
 800bbba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bbbe:	f7ff fbd7 	bl	800b370 <__d2b>
 800bbc2:	901a      	str	r0, [sp, #104]	@ 0x68
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	f43f aede 	beq.w	800b986 <_strtod_l+0x43e>
 800bbca:	9805      	ldr	r0, [sp, #20]
 800bbcc:	2101      	movs	r1, #1
 800bbce:	f7ff f929 	bl	800ae24 <__i2b>
 800bbd2:	4680      	mov	r8, r0
 800bbd4:	b948      	cbnz	r0, 800bbea <_strtod_l+0x6a2>
 800bbd6:	f04f 0800 	mov.w	r8, #0
 800bbda:	e6d4      	b.n	800b986 <_strtod_l+0x43e>
 800bbdc:	f04f 32ff 	mov.w	r2, #4294967295
 800bbe0:	fa02 f303 	lsl.w	r3, r2, r3
 800bbe4:	ea03 0a0a 	and.w	sl, r3, sl
 800bbe8:	e7b0      	b.n	800bb4c <_strtod_l+0x604>
 800bbea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bbec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bbee:	2d00      	cmp	r5, #0
 800bbf0:	bfab      	itete	ge
 800bbf2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bbf4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bbf6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bbf8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bbfa:	bfac      	ite	ge
 800bbfc:	18ef      	addge	r7, r5, r3
 800bbfe:	1b5e      	sublt	r6, r3, r5
 800bc00:	9b08      	ldr	r3, [sp, #32]
 800bc02:	1aed      	subs	r5, r5, r3
 800bc04:	4415      	add	r5, r2
 800bc06:	4b66      	ldr	r3, [pc, #408]	@ (800bda0 <_strtod_l+0x858>)
 800bc08:	3d01      	subs	r5, #1
 800bc0a:	429d      	cmp	r5, r3
 800bc0c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bc10:	da50      	bge.n	800bcb4 <_strtod_l+0x76c>
 800bc12:	1b5b      	subs	r3, r3, r5
 800bc14:	2b1f      	cmp	r3, #31
 800bc16:	eba2 0203 	sub.w	r2, r2, r3
 800bc1a:	f04f 0101 	mov.w	r1, #1
 800bc1e:	dc3d      	bgt.n	800bc9c <_strtod_l+0x754>
 800bc20:	fa01 f303 	lsl.w	r3, r1, r3
 800bc24:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc26:	2300      	movs	r3, #0
 800bc28:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc2a:	18bd      	adds	r5, r7, r2
 800bc2c:	9b08      	ldr	r3, [sp, #32]
 800bc2e:	42af      	cmp	r7, r5
 800bc30:	4416      	add	r6, r2
 800bc32:	441e      	add	r6, r3
 800bc34:	463b      	mov	r3, r7
 800bc36:	bfa8      	it	ge
 800bc38:	462b      	movge	r3, r5
 800bc3a:	42b3      	cmp	r3, r6
 800bc3c:	bfa8      	it	ge
 800bc3e:	4633      	movge	r3, r6
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	bfc2      	ittt	gt
 800bc44:	1aed      	subgt	r5, r5, r3
 800bc46:	1af6      	subgt	r6, r6, r3
 800bc48:	1aff      	subgt	r7, r7, r3
 800bc4a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	dd16      	ble.n	800bc7e <_strtod_l+0x736>
 800bc50:	4641      	mov	r1, r8
 800bc52:	9805      	ldr	r0, [sp, #20]
 800bc54:	461a      	mov	r2, r3
 800bc56:	f7ff f9a5 	bl	800afa4 <__pow5mult>
 800bc5a:	4680      	mov	r8, r0
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	d0ba      	beq.n	800bbd6 <_strtod_l+0x68e>
 800bc60:	4601      	mov	r1, r0
 800bc62:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bc64:	9805      	ldr	r0, [sp, #20]
 800bc66:	f7ff f8f3 	bl	800ae50 <__multiply>
 800bc6a:	900e      	str	r0, [sp, #56]	@ 0x38
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	f43f ae8a 	beq.w	800b986 <_strtod_l+0x43e>
 800bc72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc74:	9805      	ldr	r0, [sp, #20]
 800bc76:	f7fe ffd7 	bl	800ac28 <_Bfree>
 800bc7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc7c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc7e:	2d00      	cmp	r5, #0
 800bc80:	dc1d      	bgt.n	800bcbe <_strtod_l+0x776>
 800bc82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	dd23      	ble.n	800bcd0 <_strtod_l+0x788>
 800bc88:	4649      	mov	r1, r9
 800bc8a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bc8c:	9805      	ldr	r0, [sp, #20]
 800bc8e:	f7ff f989 	bl	800afa4 <__pow5mult>
 800bc92:	4681      	mov	r9, r0
 800bc94:	b9e0      	cbnz	r0, 800bcd0 <_strtod_l+0x788>
 800bc96:	f04f 0900 	mov.w	r9, #0
 800bc9a:	e674      	b.n	800b986 <_strtod_l+0x43e>
 800bc9c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bca0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bca4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bca8:	35e2      	adds	r5, #226	@ 0xe2
 800bcaa:	fa01 f305 	lsl.w	r3, r1, r5
 800bcae:	9310      	str	r3, [sp, #64]	@ 0x40
 800bcb0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bcb2:	e7ba      	b.n	800bc2a <_strtod_l+0x6e2>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	9310      	str	r3, [sp, #64]	@ 0x40
 800bcb8:	2301      	movs	r3, #1
 800bcba:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bcbc:	e7b5      	b.n	800bc2a <_strtod_l+0x6e2>
 800bcbe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bcc0:	9805      	ldr	r0, [sp, #20]
 800bcc2:	462a      	mov	r2, r5
 800bcc4:	f7ff f9c8 	bl	800b058 <__lshift>
 800bcc8:	901a      	str	r0, [sp, #104]	@ 0x68
 800bcca:	2800      	cmp	r0, #0
 800bccc:	d1d9      	bne.n	800bc82 <_strtod_l+0x73a>
 800bcce:	e65a      	b.n	800b986 <_strtod_l+0x43e>
 800bcd0:	2e00      	cmp	r6, #0
 800bcd2:	dd07      	ble.n	800bce4 <_strtod_l+0x79c>
 800bcd4:	4649      	mov	r1, r9
 800bcd6:	9805      	ldr	r0, [sp, #20]
 800bcd8:	4632      	mov	r2, r6
 800bcda:	f7ff f9bd 	bl	800b058 <__lshift>
 800bcde:	4681      	mov	r9, r0
 800bce0:	2800      	cmp	r0, #0
 800bce2:	d0d8      	beq.n	800bc96 <_strtod_l+0x74e>
 800bce4:	2f00      	cmp	r7, #0
 800bce6:	dd08      	ble.n	800bcfa <_strtod_l+0x7b2>
 800bce8:	4641      	mov	r1, r8
 800bcea:	9805      	ldr	r0, [sp, #20]
 800bcec:	463a      	mov	r2, r7
 800bcee:	f7ff f9b3 	bl	800b058 <__lshift>
 800bcf2:	4680      	mov	r8, r0
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	f43f ae46 	beq.w	800b986 <_strtod_l+0x43e>
 800bcfa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bcfc:	9805      	ldr	r0, [sp, #20]
 800bcfe:	464a      	mov	r2, r9
 800bd00:	f7ff fa32 	bl	800b168 <__mdiff>
 800bd04:	4604      	mov	r4, r0
 800bd06:	2800      	cmp	r0, #0
 800bd08:	f43f ae3d 	beq.w	800b986 <_strtod_l+0x43e>
 800bd0c:	68c3      	ldr	r3, [r0, #12]
 800bd0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd10:	2300      	movs	r3, #0
 800bd12:	60c3      	str	r3, [r0, #12]
 800bd14:	4641      	mov	r1, r8
 800bd16:	f7ff fa0b 	bl	800b130 <__mcmp>
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	da46      	bge.n	800bdac <_strtod_l+0x864>
 800bd1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd20:	ea53 030a 	orrs.w	r3, r3, sl
 800bd24:	d16c      	bne.n	800be00 <_strtod_l+0x8b8>
 800bd26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d168      	bne.n	800be00 <_strtod_l+0x8b8>
 800bd2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd32:	0d1b      	lsrs	r3, r3, #20
 800bd34:	051b      	lsls	r3, r3, #20
 800bd36:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bd3a:	d961      	bls.n	800be00 <_strtod_l+0x8b8>
 800bd3c:	6963      	ldr	r3, [r4, #20]
 800bd3e:	b913      	cbnz	r3, 800bd46 <_strtod_l+0x7fe>
 800bd40:	6923      	ldr	r3, [r4, #16]
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	dd5c      	ble.n	800be00 <_strtod_l+0x8b8>
 800bd46:	4621      	mov	r1, r4
 800bd48:	2201      	movs	r2, #1
 800bd4a:	9805      	ldr	r0, [sp, #20]
 800bd4c:	f7ff f984 	bl	800b058 <__lshift>
 800bd50:	4641      	mov	r1, r8
 800bd52:	4604      	mov	r4, r0
 800bd54:	f7ff f9ec 	bl	800b130 <__mcmp>
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	dd51      	ble.n	800be00 <_strtod_l+0x8b8>
 800bd5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd60:	9a08      	ldr	r2, [sp, #32]
 800bd62:	0d1b      	lsrs	r3, r3, #20
 800bd64:	051b      	lsls	r3, r3, #20
 800bd66:	2a00      	cmp	r2, #0
 800bd68:	d06b      	beq.n	800be42 <_strtod_l+0x8fa>
 800bd6a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bd6e:	d868      	bhi.n	800be42 <_strtod_l+0x8fa>
 800bd70:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bd74:	f67f ae9d 	bls.w	800bab2 <_strtod_l+0x56a>
 800bd78:	4b0a      	ldr	r3, [pc, #40]	@ (800bda4 <_strtod_l+0x85c>)
 800bd7a:	4650      	mov	r0, sl
 800bd7c:	4659      	mov	r1, fp
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f7f4 fc62 	bl	8000648 <__aeabi_dmul>
 800bd84:	4b08      	ldr	r3, [pc, #32]	@ (800bda8 <_strtod_l+0x860>)
 800bd86:	400b      	ands	r3, r1
 800bd88:	4682      	mov	sl, r0
 800bd8a:	468b      	mov	fp, r1
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f47f ae05 	bne.w	800b99c <_strtod_l+0x454>
 800bd92:	9a05      	ldr	r2, [sp, #20]
 800bd94:	2322      	movs	r3, #34	@ 0x22
 800bd96:	6013      	str	r3, [r2, #0]
 800bd98:	e600      	b.n	800b99c <_strtod_l+0x454>
 800bd9a:	bf00      	nop
 800bd9c:	0800d6d8 	.word	0x0800d6d8
 800bda0:	fffffc02 	.word	0xfffffc02
 800bda4:	39500000 	.word	0x39500000
 800bda8:	7ff00000 	.word	0x7ff00000
 800bdac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bdb0:	d165      	bne.n	800be7e <_strtod_l+0x936>
 800bdb2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bdb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdb8:	b35a      	cbz	r2, 800be12 <_strtod_l+0x8ca>
 800bdba:	4a9f      	ldr	r2, [pc, #636]	@ (800c038 <_strtod_l+0xaf0>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d12b      	bne.n	800be18 <_strtod_l+0x8d0>
 800bdc0:	9b08      	ldr	r3, [sp, #32]
 800bdc2:	4651      	mov	r1, sl
 800bdc4:	b303      	cbz	r3, 800be08 <_strtod_l+0x8c0>
 800bdc6:	4b9d      	ldr	r3, [pc, #628]	@ (800c03c <_strtod_l+0xaf4>)
 800bdc8:	465a      	mov	r2, fp
 800bdca:	4013      	ands	r3, r2
 800bdcc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bdd0:	f04f 32ff 	mov.w	r2, #4294967295
 800bdd4:	d81b      	bhi.n	800be0e <_strtod_l+0x8c6>
 800bdd6:	0d1b      	lsrs	r3, r3, #20
 800bdd8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bddc:	fa02 f303 	lsl.w	r3, r2, r3
 800bde0:	4299      	cmp	r1, r3
 800bde2:	d119      	bne.n	800be18 <_strtod_l+0x8d0>
 800bde4:	4b96      	ldr	r3, [pc, #600]	@ (800c040 <_strtod_l+0xaf8>)
 800bde6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d102      	bne.n	800bdf2 <_strtod_l+0x8aa>
 800bdec:	3101      	adds	r1, #1
 800bdee:	f43f adca 	beq.w	800b986 <_strtod_l+0x43e>
 800bdf2:	4b92      	ldr	r3, [pc, #584]	@ (800c03c <_strtod_l+0xaf4>)
 800bdf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bdf6:	401a      	ands	r2, r3
 800bdf8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bdfc:	f04f 0a00 	mov.w	sl, #0
 800be00:	9b08      	ldr	r3, [sp, #32]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1b8      	bne.n	800bd78 <_strtod_l+0x830>
 800be06:	e5c9      	b.n	800b99c <_strtod_l+0x454>
 800be08:	f04f 33ff 	mov.w	r3, #4294967295
 800be0c:	e7e8      	b.n	800bde0 <_strtod_l+0x898>
 800be0e:	4613      	mov	r3, r2
 800be10:	e7e6      	b.n	800bde0 <_strtod_l+0x898>
 800be12:	ea53 030a 	orrs.w	r3, r3, sl
 800be16:	d0a1      	beq.n	800bd5c <_strtod_l+0x814>
 800be18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800be1a:	b1db      	cbz	r3, 800be54 <_strtod_l+0x90c>
 800be1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be1e:	4213      	tst	r3, r2
 800be20:	d0ee      	beq.n	800be00 <_strtod_l+0x8b8>
 800be22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be24:	9a08      	ldr	r2, [sp, #32]
 800be26:	4650      	mov	r0, sl
 800be28:	4659      	mov	r1, fp
 800be2a:	b1bb      	cbz	r3, 800be5c <_strtod_l+0x914>
 800be2c:	f7ff fb6e 	bl	800b50c <sulp>
 800be30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be34:	ec53 2b10 	vmov	r2, r3, d0
 800be38:	f7f4 fa50 	bl	80002dc <__adddf3>
 800be3c:	4682      	mov	sl, r0
 800be3e:	468b      	mov	fp, r1
 800be40:	e7de      	b.n	800be00 <_strtod_l+0x8b8>
 800be42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800be46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800be4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800be4e:	f04f 3aff 	mov.w	sl, #4294967295
 800be52:	e7d5      	b.n	800be00 <_strtod_l+0x8b8>
 800be54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800be56:	ea13 0f0a 	tst.w	r3, sl
 800be5a:	e7e1      	b.n	800be20 <_strtod_l+0x8d8>
 800be5c:	f7ff fb56 	bl	800b50c <sulp>
 800be60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be64:	ec53 2b10 	vmov	r2, r3, d0
 800be68:	f7f4 fa36 	bl	80002d8 <__aeabi_dsub>
 800be6c:	2200      	movs	r2, #0
 800be6e:	2300      	movs	r3, #0
 800be70:	4682      	mov	sl, r0
 800be72:	468b      	mov	fp, r1
 800be74:	f7f4 fe50 	bl	8000b18 <__aeabi_dcmpeq>
 800be78:	2800      	cmp	r0, #0
 800be7a:	d0c1      	beq.n	800be00 <_strtod_l+0x8b8>
 800be7c:	e619      	b.n	800bab2 <_strtod_l+0x56a>
 800be7e:	4641      	mov	r1, r8
 800be80:	4620      	mov	r0, r4
 800be82:	f7ff facd 	bl	800b420 <__ratio>
 800be86:	ec57 6b10 	vmov	r6, r7, d0
 800be8a:	2200      	movs	r2, #0
 800be8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800be90:	4630      	mov	r0, r6
 800be92:	4639      	mov	r1, r7
 800be94:	f7f4 fe54 	bl	8000b40 <__aeabi_dcmple>
 800be98:	2800      	cmp	r0, #0
 800be9a:	d06f      	beq.n	800bf7c <_strtod_l+0xa34>
 800be9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d17a      	bne.n	800bf98 <_strtod_l+0xa50>
 800bea2:	f1ba 0f00 	cmp.w	sl, #0
 800bea6:	d158      	bne.n	800bf5a <_strtod_l+0xa12>
 800bea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800beaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d15a      	bne.n	800bf68 <_strtod_l+0xa20>
 800beb2:	4b64      	ldr	r3, [pc, #400]	@ (800c044 <_strtod_l+0xafc>)
 800beb4:	2200      	movs	r2, #0
 800beb6:	4630      	mov	r0, r6
 800beb8:	4639      	mov	r1, r7
 800beba:	f7f4 fe37 	bl	8000b2c <__aeabi_dcmplt>
 800bebe:	2800      	cmp	r0, #0
 800bec0:	d159      	bne.n	800bf76 <_strtod_l+0xa2e>
 800bec2:	4630      	mov	r0, r6
 800bec4:	4639      	mov	r1, r7
 800bec6:	4b60      	ldr	r3, [pc, #384]	@ (800c048 <_strtod_l+0xb00>)
 800bec8:	2200      	movs	r2, #0
 800beca:	f7f4 fbbd 	bl	8000648 <__aeabi_dmul>
 800bece:	4606      	mov	r6, r0
 800bed0:	460f      	mov	r7, r1
 800bed2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bed6:	9606      	str	r6, [sp, #24]
 800bed8:	9307      	str	r3, [sp, #28]
 800beda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bede:	4d57      	ldr	r5, [pc, #348]	@ (800c03c <_strtod_l+0xaf4>)
 800bee0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bee4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bee6:	401d      	ands	r5, r3
 800bee8:	4b58      	ldr	r3, [pc, #352]	@ (800c04c <_strtod_l+0xb04>)
 800beea:	429d      	cmp	r5, r3
 800beec:	f040 80b2 	bne.w	800c054 <_strtod_l+0xb0c>
 800bef0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bef2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bef6:	ec4b ab10 	vmov	d0, sl, fp
 800befa:	f7ff f9c9 	bl	800b290 <__ulp>
 800befe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf02:	ec51 0b10 	vmov	r0, r1, d0
 800bf06:	f7f4 fb9f 	bl	8000648 <__aeabi_dmul>
 800bf0a:	4652      	mov	r2, sl
 800bf0c:	465b      	mov	r3, fp
 800bf0e:	f7f4 f9e5 	bl	80002dc <__adddf3>
 800bf12:	460b      	mov	r3, r1
 800bf14:	4949      	ldr	r1, [pc, #292]	@ (800c03c <_strtod_l+0xaf4>)
 800bf16:	4a4e      	ldr	r2, [pc, #312]	@ (800c050 <_strtod_l+0xb08>)
 800bf18:	4019      	ands	r1, r3
 800bf1a:	4291      	cmp	r1, r2
 800bf1c:	4682      	mov	sl, r0
 800bf1e:	d942      	bls.n	800bfa6 <_strtod_l+0xa5e>
 800bf20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bf22:	4b47      	ldr	r3, [pc, #284]	@ (800c040 <_strtod_l+0xaf8>)
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d103      	bne.n	800bf30 <_strtod_l+0x9e8>
 800bf28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	f43f ad2b 	beq.w	800b986 <_strtod_l+0x43e>
 800bf30:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c040 <_strtod_l+0xaf8>
 800bf34:	f04f 3aff 	mov.w	sl, #4294967295
 800bf38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf3a:	9805      	ldr	r0, [sp, #20]
 800bf3c:	f7fe fe74 	bl	800ac28 <_Bfree>
 800bf40:	9805      	ldr	r0, [sp, #20]
 800bf42:	4649      	mov	r1, r9
 800bf44:	f7fe fe70 	bl	800ac28 <_Bfree>
 800bf48:	9805      	ldr	r0, [sp, #20]
 800bf4a:	4641      	mov	r1, r8
 800bf4c:	f7fe fe6c 	bl	800ac28 <_Bfree>
 800bf50:	9805      	ldr	r0, [sp, #20]
 800bf52:	4621      	mov	r1, r4
 800bf54:	f7fe fe68 	bl	800ac28 <_Bfree>
 800bf58:	e618      	b.n	800bb8c <_strtod_l+0x644>
 800bf5a:	f1ba 0f01 	cmp.w	sl, #1
 800bf5e:	d103      	bne.n	800bf68 <_strtod_l+0xa20>
 800bf60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	f43f ada5 	beq.w	800bab2 <_strtod_l+0x56a>
 800bf68:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c018 <_strtod_l+0xad0>
 800bf6c:	4f35      	ldr	r7, [pc, #212]	@ (800c044 <_strtod_l+0xafc>)
 800bf6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bf72:	2600      	movs	r6, #0
 800bf74:	e7b1      	b.n	800beda <_strtod_l+0x992>
 800bf76:	4f34      	ldr	r7, [pc, #208]	@ (800c048 <_strtod_l+0xb00>)
 800bf78:	2600      	movs	r6, #0
 800bf7a:	e7aa      	b.n	800bed2 <_strtod_l+0x98a>
 800bf7c:	4b32      	ldr	r3, [pc, #200]	@ (800c048 <_strtod_l+0xb00>)
 800bf7e:	4630      	mov	r0, r6
 800bf80:	4639      	mov	r1, r7
 800bf82:	2200      	movs	r2, #0
 800bf84:	f7f4 fb60 	bl	8000648 <__aeabi_dmul>
 800bf88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf8a:	4606      	mov	r6, r0
 800bf8c:	460f      	mov	r7, r1
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d09f      	beq.n	800bed2 <_strtod_l+0x98a>
 800bf92:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bf96:	e7a0      	b.n	800beda <_strtod_l+0x992>
 800bf98:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c020 <_strtod_l+0xad8>
 800bf9c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bfa0:	ec57 6b17 	vmov	r6, r7, d7
 800bfa4:	e799      	b.n	800beda <_strtod_l+0x992>
 800bfa6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bfaa:	9b08      	ldr	r3, [sp, #32]
 800bfac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d1c1      	bne.n	800bf38 <_strtod_l+0x9f0>
 800bfb4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bfb8:	0d1b      	lsrs	r3, r3, #20
 800bfba:	051b      	lsls	r3, r3, #20
 800bfbc:	429d      	cmp	r5, r3
 800bfbe:	d1bb      	bne.n	800bf38 <_strtod_l+0x9f0>
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	4639      	mov	r1, r7
 800bfc4:	f7f4 fea0 	bl	8000d08 <__aeabi_d2lz>
 800bfc8:	f7f4 fb10 	bl	80005ec <__aeabi_l2d>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	460b      	mov	r3, r1
 800bfd0:	4630      	mov	r0, r6
 800bfd2:	4639      	mov	r1, r7
 800bfd4:	f7f4 f980 	bl	80002d8 <__aeabi_dsub>
 800bfd8:	460b      	mov	r3, r1
 800bfda:	4602      	mov	r2, r0
 800bfdc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bfe0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bfe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfe6:	ea46 060a 	orr.w	r6, r6, sl
 800bfea:	431e      	orrs	r6, r3
 800bfec:	d06f      	beq.n	800c0ce <_strtod_l+0xb86>
 800bfee:	a30e      	add	r3, pc, #56	@ (adr r3, 800c028 <_strtod_l+0xae0>)
 800bff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff4:	f7f4 fd9a 	bl	8000b2c <__aeabi_dcmplt>
 800bff8:	2800      	cmp	r0, #0
 800bffa:	f47f accf 	bne.w	800b99c <_strtod_l+0x454>
 800bffe:	a30c      	add	r3, pc, #48	@ (adr r3, 800c030 <_strtod_l+0xae8>)
 800c000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c004:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c008:	f7f4 fdae 	bl	8000b68 <__aeabi_dcmpgt>
 800c00c:	2800      	cmp	r0, #0
 800c00e:	d093      	beq.n	800bf38 <_strtod_l+0x9f0>
 800c010:	e4c4      	b.n	800b99c <_strtod_l+0x454>
 800c012:	bf00      	nop
 800c014:	f3af 8000 	nop.w
 800c018:	00000000 	.word	0x00000000
 800c01c:	bff00000 	.word	0xbff00000
 800c020:	00000000 	.word	0x00000000
 800c024:	3ff00000 	.word	0x3ff00000
 800c028:	94a03595 	.word	0x94a03595
 800c02c:	3fdfffff 	.word	0x3fdfffff
 800c030:	35afe535 	.word	0x35afe535
 800c034:	3fe00000 	.word	0x3fe00000
 800c038:	000fffff 	.word	0x000fffff
 800c03c:	7ff00000 	.word	0x7ff00000
 800c040:	7fefffff 	.word	0x7fefffff
 800c044:	3ff00000 	.word	0x3ff00000
 800c048:	3fe00000 	.word	0x3fe00000
 800c04c:	7fe00000 	.word	0x7fe00000
 800c050:	7c9fffff 	.word	0x7c9fffff
 800c054:	9b08      	ldr	r3, [sp, #32]
 800c056:	b323      	cbz	r3, 800c0a2 <_strtod_l+0xb5a>
 800c058:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c05c:	d821      	bhi.n	800c0a2 <_strtod_l+0xb5a>
 800c05e:	a328      	add	r3, pc, #160	@ (adr r3, 800c100 <_strtod_l+0xbb8>)
 800c060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c064:	4630      	mov	r0, r6
 800c066:	4639      	mov	r1, r7
 800c068:	f7f4 fd6a 	bl	8000b40 <__aeabi_dcmple>
 800c06c:	b1a0      	cbz	r0, 800c098 <_strtod_l+0xb50>
 800c06e:	4639      	mov	r1, r7
 800c070:	4630      	mov	r0, r6
 800c072:	f7f4 fdc1 	bl	8000bf8 <__aeabi_d2uiz>
 800c076:	2801      	cmp	r0, #1
 800c078:	bf38      	it	cc
 800c07a:	2001      	movcc	r0, #1
 800c07c:	f7f4 fa6a 	bl	8000554 <__aeabi_ui2d>
 800c080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c082:	4606      	mov	r6, r0
 800c084:	460f      	mov	r7, r1
 800c086:	b9fb      	cbnz	r3, 800c0c8 <_strtod_l+0xb80>
 800c088:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c08c:	9014      	str	r0, [sp, #80]	@ 0x50
 800c08e:	9315      	str	r3, [sp, #84]	@ 0x54
 800c090:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c094:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c098:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c09a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c09e:	1b5b      	subs	r3, r3, r5
 800c0a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c0a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c0a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c0aa:	f7ff f8f1 	bl	800b290 <__ulp>
 800c0ae:	4650      	mov	r0, sl
 800c0b0:	ec53 2b10 	vmov	r2, r3, d0
 800c0b4:	4659      	mov	r1, fp
 800c0b6:	f7f4 fac7 	bl	8000648 <__aeabi_dmul>
 800c0ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c0be:	f7f4 f90d 	bl	80002dc <__adddf3>
 800c0c2:	4682      	mov	sl, r0
 800c0c4:	468b      	mov	fp, r1
 800c0c6:	e770      	b.n	800bfaa <_strtod_l+0xa62>
 800c0c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c0cc:	e7e0      	b.n	800c090 <_strtod_l+0xb48>
 800c0ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800c108 <_strtod_l+0xbc0>)
 800c0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d4:	f7f4 fd2a 	bl	8000b2c <__aeabi_dcmplt>
 800c0d8:	e798      	b.n	800c00c <_strtod_l+0xac4>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c0e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c0e2:	6013      	str	r3, [r2, #0]
 800c0e4:	f7ff ba6d 	b.w	800b5c2 <_strtod_l+0x7a>
 800c0e8:	2a65      	cmp	r2, #101	@ 0x65
 800c0ea:	f43f ab66 	beq.w	800b7ba <_strtod_l+0x272>
 800c0ee:	2a45      	cmp	r2, #69	@ 0x45
 800c0f0:	f43f ab63 	beq.w	800b7ba <_strtod_l+0x272>
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	f7ff bb9e 	b.w	800b836 <_strtod_l+0x2ee>
 800c0fa:	bf00      	nop
 800c0fc:	f3af 8000 	nop.w
 800c100:	ffc00000 	.word	0xffc00000
 800c104:	41dfffff 	.word	0x41dfffff
 800c108:	94a03595 	.word	0x94a03595
 800c10c:	3fcfffff 	.word	0x3fcfffff

0800c110 <_strtod_r>:
 800c110:	4b01      	ldr	r3, [pc, #4]	@ (800c118 <_strtod_r+0x8>)
 800c112:	f7ff ba19 	b.w	800b548 <_strtod_l>
 800c116:	bf00      	nop
 800c118:	2000006c 	.word	0x2000006c

0800c11c <_strtol_l.constprop.0>:
 800c11c:	2b24      	cmp	r3, #36	@ 0x24
 800c11e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c122:	4686      	mov	lr, r0
 800c124:	4690      	mov	r8, r2
 800c126:	d801      	bhi.n	800c12c <_strtol_l.constprop.0+0x10>
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d106      	bne.n	800c13a <_strtol_l.constprop.0+0x1e>
 800c12c:	f7fd fdae 	bl	8009c8c <__errno>
 800c130:	2316      	movs	r3, #22
 800c132:	6003      	str	r3, [r0, #0]
 800c134:	2000      	movs	r0, #0
 800c136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c13a:	4834      	ldr	r0, [pc, #208]	@ (800c20c <_strtol_l.constprop.0+0xf0>)
 800c13c:	460d      	mov	r5, r1
 800c13e:	462a      	mov	r2, r5
 800c140:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c144:	5d06      	ldrb	r6, [r0, r4]
 800c146:	f016 0608 	ands.w	r6, r6, #8
 800c14a:	d1f8      	bne.n	800c13e <_strtol_l.constprop.0+0x22>
 800c14c:	2c2d      	cmp	r4, #45	@ 0x2d
 800c14e:	d12d      	bne.n	800c1ac <_strtol_l.constprop.0+0x90>
 800c150:	782c      	ldrb	r4, [r5, #0]
 800c152:	2601      	movs	r6, #1
 800c154:	1c95      	adds	r5, r2, #2
 800c156:	f033 0210 	bics.w	r2, r3, #16
 800c15a:	d109      	bne.n	800c170 <_strtol_l.constprop.0+0x54>
 800c15c:	2c30      	cmp	r4, #48	@ 0x30
 800c15e:	d12a      	bne.n	800c1b6 <_strtol_l.constprop.0+0x9a>
 800c160:	782a      	ldrb	r2, [r5, #0]
 800c162:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c166:	2a58      	cmp	r2, #88	@ 0x58
 800c168:	d125      	bne.n	800c1b6 <_strtol_l.constprop.0+0x9a>
 800c16a:	786c      	ldrb	r4, [r5, #1]
 800c16c:	2310      	movs	r3, #16
 800c16e:	3502      	adds	r5, #2
 800c170:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c174:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c178:	2200      	movs	r2, #0
 800c17a:	fbbc f9f3 	udiv	r9, ip, r3
 800c17e:	4610      	mov	r0, r2
 800c180:	fb03 ca19 	mls	sl, r3, r9, ip
 800c184:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c188:	2f09      	cmp	r7, #9
 800c18a:	d81b      	bhi.n	800c1c4 <_strtol_l.constprop.0+0xa8>
 800c18c:	463c      	mov	r4, r7
 800c18e:	42a3      	cmp	r3, r4
 800c190:	dd27      	ble.n	800c1e2 <_strtol_l.constprop.0+0xc6>
 800c192:	1c57      	adds	r7, r2, #1
 800c194:	d007      	beq.n	800c1a6 <_strtol_l.constprop.0+0x8a>
 800c196:	4581      	cmp	r9, r0
 800c198:	d320      	bcc.n	800c1dc <_strtol_l.constprop.0+0xc0>
 800c19a:	d101      	bne.n	800c1a0 <_strtol_l.constprop.0+0x84>
 800c19c:	45a2      	cmp	sl, r4
 800c19e:	db1d      	blt.n	800c1dc <_strtol_l.constprop.0+0xc0>
 800c1a0:	fb00 4003 	mla	r0, r0, r3, r4
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1aa:	e7eb      	b.n	800c184 <_strtol_l.constprop.0+0x68>
 800c1ac:	2c2b      	cmp	r4, #43	@ 0x2b
 800c1ae:	bf04      	itt	eq
 800c1b0:	782c      	ldrbeq	r4, [r5, #0]
 800c1b2:	1c95      	addeq	r5, r2, #2
 800c1b4:	e7cf      	b.n	800c156 <_strtol_l.constprop.0+0x3a>
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d1da      	bne.n	800c170 <_strtol_l.constprop.0+0x54>
 800c1ba:	2c30      	cmp	r4, #48	@ 0x30
 800c1bc:	bf0c      	ite	eq
 800c1be:	2308      	moveq	r3, #8
 800c1c0:	230a      	movne	r3, #10
 800c1c2:	e7d5      	b.n	800c170 <_strtol_l.constprop.0+0x54>
 800c1c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c1c8:	2f19      	cmp	r7, #25
 800c1ca:	d801      	bhi.n	800c1d0 <_strtol_l.constprop.0+0xb4>
 800c1cc:	3c37      	subs	r4, #55	@ 0x37
 800c1ce:	e7de      	b.n	800c18e <_strtol_l.constprop.0+0x72>
 800c1d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c1d4:	2f19      	cmp	r7, #25
 800c1d6:	d804      	bhi.n	800c1e2 <_strtol_l.constprop.0+0xc6>
 800c1d8:	3c57      	subs	r4, #87	@ 0x57
 800c1da:	e7d8      	b.n	800c18e <_strtol_l.constprop.0+0x72>
 800c1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c1e0:	e7e1      	b.n	800c1a6 <_strtol_l.constprop.0+0x8a>
 800c1e2:	1c53      	adds	r3, r2, #1
 800c1e4:	d108      	bne.n	800c1f8 <_strtol_l.constprop.0+0xdc>
 800c1e6:	2322      	movs	r3, #34	@ 0x22
 800c1e8:	f8ce 3000 	str.w	r3, [lr]
 800c1ec:	4660      	mov	r0, ip
 800c1ee:	f1b8 0f00 	cmp.w	r8, #0
 800c1f2:	d0a0      	beq.n	800c136 <_strtol_l.constprop.0+0x1a>
 800c1f4:	1e69      	subs	r1, r5, #1
 800c1f6:	e006      	b.n	800c206 <_strtol_l.constprop.0+0xea>
 800c1f8:	b106      	cbz	r6, 800c1fc <_strtol_l.constprop.0+0xe0>
 800c1fa:	4240      	negs	r0, r0
 800c1fc:	f1b8 0f00 	cmp.w	r8, #0
 800c200:	d099      	beq.n	800c136 <_strtol_l.constprop.0+0x1a>
 800c202:	2a00      	cmp	r2, #0
 800c204:	d1f6      	bne.n	800c1f4 <_strtol_l.constprop.0+0xd8>
 800c206:	f8c8 1000 	str.w	r1, [r8]
 800c20a:	e794      	b.n	800c136 <_strtol_l.constprop.0+0x1a>
 800c20c:	0800d701 	.word	0x0800d701

0800c210 <_strtol_r>:
 800c210:	f7ff bf84 	b.w	800c11c <_strtol_l.constprop.0>

0800c214 <__ssputs_r>:
 800c214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c218:	688e      	ldr	r6, [r1, #8]
 800c21a:	461f      	mov	r7, r3
 800c21c:	42be      	cmp	r6, r7
 800c21e:	680b      	ldr	r3, [r1, #0]
 800c220:	4682      	mov	sl, r0
 800c222:	460c      	mov	r4, r1
 800c224:	4690      	mov	r8, r2
 800c226:	d82d      	bhi.n	800c284 <__ssputs_r+0x70>
 800c228:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c22c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c230:	d026      	beq.n	800c280 <__ssputs_r+0x6c>
 800c232:	6965      	ldr	r5, [r4, #20]
 800c234:	6909      	ldr	r1, [r1, #16]
 800c236:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c23a:	eba3 0901 	sub.w	r9, r3, r1
 800c23e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c242:	1c7b      	adds	r3, r7, #1
 800c244:	444b      	add	r3, r9
 800c246:	106d      	asrs	r5, r5, #1
 800c248:	429d      	cmp	r5, r3
 800c24a:	bf38      	it	cc
 800c24c:	461d      	movcc	r5, r3
 800c24e:	0553      	lsls	r3, r2, #21
 800c250:	d527      	bpl.n	800c2a2 <__ssputs_r+0x8e>
 800c252:	4629      	mov	r1, r5
 800c254:	f7fe fc1c 	bl	800aa90 <_malloc_r>
 800c258:	4606      	mov	r6, r0
 800c25a:	b360      	cbz	r0, 800c2b6 <__ssputs_r+0xa2>
 800c25c:	6921      	ldr	r1, [r4, #16]
 800c25e:	464a      	mov	r2, r9
 800c260:	f7fd fd41 	bl	8009ce6 <memcpy>
 800c264:	89a3      	ldrh	r3, [r4, #12]
 800c266:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c26a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c26e:	81a3      	strh	r3, [r4, #12]
 800c270:	6126      	str	r6, [r4, #16]
 800c272:	6165      	str	r5, [r4, #20]
 800c274:	444e      	add	r6, r9
 800c276:	eba5 0509 	sub.w	r5, r5, r9
 800c27a:	6026      	str	r6, [r4, #0]
 800c27c:	60a5      	str	r5, [r4, #8]
 800c27e:	463e      	mov	r6, r7
 800c280:	42be      	cmp	r6, r7
 800c282:	d900      	bls.n	800c286 <__ssputs_r+0x72>
 800c284:	463e      	mov	r6, r7
 800c286:	6820      	ldr	r0, [r4, #0]
 800c288:	4632      	mov	r2, r6
 800c28a:	4641      	mov	r1, r8
 800c28c:	f000 f9c6 	bl	800c61c <memmove>
 800c290:	68a3      	ldr	r3, [r4, #8]
 800c292:	1b9b      	subs	r3, r3, r6
 800c294:	60a3      	str	r3, [r4, #8]
 800c296:	6823      	ldr	r3, [r4, #0]
 800c298:	4433      	add	r3, r6
 800c29a:	6023      	str	r3, [r4, #0]
 800c29c:	2000      	movs	r0, #0
 800c29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2a2:	462a      	mov	r2, r5
 800c2a4:	f000 fd7d 	bl	800cda2 <_realloc_r>
 800c2a8:	4606      	mov	r6, r0
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d1e0      	bne.n	800c270 <__ssputs_r+0x5c>
 800c2ae:	6921      	ldr	r1, [r4, #16]
 800c2b0:	4650      	mov	r0, sl
 800c2b2:	f7fe fb79 	bl	800a9a8 <_free_r>
 800c2b6:	230c      	movs	r3, #12
 800c2b8:	f8ca 3000 	str.w	r3, [sl]
 800c2bc:	89a3      	ldrh	r3, [r4, #12]
 800c2be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2c2:	81a3      	strh	r3, [r4, #12]
 800c2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c8:	e7e9      	b.n	800c29e <__ssputs_r+0x8a>
	...

0800c2cc <_svfiprintf_r>:
 800c2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d0:	4698      	mov	r8, r3
 800c2d2:	898b      	ldrh	r3, [r1, #12]
 800c2d4:	061b      	lsls	r3, r3, #24
 800c2d6:	b09d      	sub	sp, #116	@ 0x74
 800c2d8:	4607      	mov	r7, r0
 800c2da:	460d      	mov	r5, r1
 800c2dc:	4614      	mov	r4, r2
 800c2de:	d510      	bpl.n	800c302 <_svfiprintf_r+0x36>
 800c2e0:	690b      	ldr	r3, [r1, #16]
 800c2e2:	b973      	cbnz	r3, 800c302 <_svfiprintf_r+0x36>
 800c2e4:	2140      	movs	r1, #64	@ 0x40
 800c2e6:	f7fe fbd3 	bl	800aa90 <_malloc_r>
 800c2ea:	6028      	str	r0, [r5, #0]
 800c2ec:	6128      	str	r0, [r5, #16]
 800c2ee:	b930      	cbnz	r0, 800c2fe <_svfiprintf_r+0x32>
 800c2f0:	230c      	movs	r3, #12
 800c2f2:	603b      	str	r3, [r7, #0]
 800c2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f8:	b01d      	add	sp, #116	@ 0x74
 800c2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2fe:	2340      	movs	r3, #64	@ 0x40
 800c300:	616b      	str	r3, [r5, #20]
 800c302:	2300      	movs	r3, #0
 800c304:	9309      	str	r3, [sp, #36]	@ 0x24
 800c306:	2320      	movs	r3, #32
 800c308:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c30c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c310:	2330      	movs	r3, #48	@ 0x30
 800c312:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c4b0 <_svfiprintf_r+0x1e4>
 800c316:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c31a:	f04f 0901 	mov.w	r9, #1
 800c31e:	4623      	mov	r3, r4
 800c320:	469a      	mov	sl, r3
 800c322:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c326:	b10a      	cbz	r2, 800c32c <_svfiprintf_r+0x60>
 800c328:	2a25      	cmp	r2, #37	@ 0x25
 800c32a:	d1f9      	bne.n	800c320 <_svfiprintf_r+0x54>
 800c32c:	ebba 0b04 	subs.w	fp, sl, r4
 800c330:	d00b      	beq.n	800c34a <_svfiprintf_r+0x7e>
 800c332:	465b      	mov	r3, fp
 800c334:	4622      	mov	r2, r4
 800c336:	4629      	mov	r1, r5
 800c338:	4638      	mov	r0, r7
 800c33a:	f7ff ff6b 	bl	800c214 <__ssputs_r>
 800c33e:	3001      	adds	r0, #1
 800c340:	f000 80a7 	beq.w	800c492 <_svfiprintf_r+0x1c6>
 800c344:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c346:	445a      	add	r2, fp
 800c348:	9209      	str	r2, [sp, #36]	@ 0x24
 800c34a:	f89a 3000 	ldrb.w	r3, [sl]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f000 809f 	beq.w	800c492 <_svfiprintf_r+0x1c6>
 800c354:	2300      	movs	r3, #0
 800c356:	f04f 32ff 	mov.w	r2, #4294967295
 800c35a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c35e:	f10a 0a01 	add.w	sl, sl, #1
 800c362:	9304      	str	r3, [sp, #16]
 800c364:	9307      	str	r3, [sp, #28]
 800c366:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c36a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c36c:	4654      	mov	r4, sl
 800c36e:	2205      	movs	r2, #5
 800c370:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c374:	484e      	ldr	r0, [pc, #312]	@ (800c4b0 <_svfiprintf_r+0x1e4>)
 800c376:	f7f3 ff53 	bl	8000220 <memchr>
 800c37a:	9a04      	ldr	r2, [sp, #16]
 800c37c:	b9d8      	cbnz	r0, 800c3b6 <_svfiprintf_r+0xea>
 800c37e:	06d0      	lsls	r0, r2, #27
 800c380:	bf44      	itt	mi
 800c382:	2320      	movmi	r3, #32
 800c384:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c388:	0711      	lsls	r1, r2, #28
 800c38a:	bf44      	itt	mi
 800c38c:	232b      	movmi	r3, #43	@ 0x2b
 800c38e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c392:	f89a 3000 	ldrb.w	r3, [sl]
 800c396:	2b2a      	cmp	r3, #42	@ 0x2a
 800c398:	d015      	beq.n	800c3c6 <_svfiprintf_r+0xfa>
 800c39a:	9a07      	ldr	r2, [sp, #28]
 800c39c:	4654      	mov	r4, sl
 800c39e:	2000      	movs	r0, #0
 800c3a0:	f04f 0c0a 	mov.w	ip, #10
 800c3a4:	4621      	mov	r1, r4
 800c3a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3aa:	3b30      	subs	r3, #48	@ 0x30
 800c3ac:	2b09      	cmp	r3, #9
 800c3ae:	d94b      	bls.n	800c448 <_svfiprintf_r+0x17c>
 800c3b0:	b1b0      	cbz	r0, 800c3e0 <_svfiprintf_r+0x114>
 800c3b2:	9207      	str	r2, [sp, #28]
 800c3b4:	e014      	b.n	800c3e0 <_svfiprintf_r+0x114>
 800c3b6:	eba0 0308 	sub.w	r3, r0, r8
 800c3ba:	fa09 f303 	lsl.w	r3, r9, r3
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	9304      	str	r3, [sp, #16]
 800c3c2:	46a2      	mov	sl, r4
 800c3c4:	e7d2      	b.n	800c36c <_svfiprintf_r+0xa0>
 800c3c6:	9b03      	ldr	r3, [sp, #12]
 800c3c8:	1d19      	adds	r1, r3, #4
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	9103      	str	r1, [sp, #12]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	bfbb      	ittet	lt
 800c3d2:	425b      	neglt	r3, r3
 800c3d4:	f042 0202 	orrlt.w	r2, r2, #2
 800c3d8:	9307      	strge	r3, [sp, #28]
 800c3da:	9307      	strlt	r3, [sp, #28]
 800c3dc:	bfb8      	it	lt
 800c3de:	9204      	strlt	r2, [sp, #16]
 800c3e0:	7823      	ldrb	r3, [r4, #0]
 800c3e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3e4:	d10a      	bne.n	800c3fc <_svfiprintf_r+0x130>
 800c3e6:	7863      	ldrb	r3, [r4, #1]
 800c3e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3ea:	d132      	bne.n	800c452 <_svfiprintf_r+0x186>
 800c3ec:	9b03      	ldr	r3, [sp, #12]
 800c3ee:	1d1a      	adds	r2, r3, #4
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	9203      	str	r2, [sp, #12]
 800c3f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3f8:	3402      	adds	r4, #2
 800c3fa:	9305      	str	r3, [sp, #20]
 800c3fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c4c0 <_svfiprintf_r+0x1f4>
 800c400:	7821      	ldrb	r1, [r4, #0]
 800c402:	2203      	movs	r2, #3
 800c404:	4650      	mov	r0, sl
 800c406:	f7f3 ff0b 	bl	8000220 <memchr>
 800c40a:	b138      	cbz	r0, 800c41c <_svfiprintf_r+0x150>
 800c40c:	9b04      	ldr	r3, [sp, #16]
 800c40e:	eba0 000a 	sub.w	r0, r0, sl
 800c412:	2240      	movs	r2, #64	@ 0x40
 800c414:	4082      	lsls	r2, r0
 800c416:	4313      	orrs	r3, r2
 800c418:	3401      	adds	r4, #1
 800c41a:	9304      	str	r3, [sp, #16]
 800c41c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c420:	4824      	ldr	r0, [pc, #144]	@ (800c4b4 <_svfiprintf_r+0x1e8>)
 800c422:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c426:	2206      	movs	r2, #6
 800c428:	f7f3 fefa 	bl	8000220 <memchr>
 800c42c:	2800      	cmp	r0, #0
 800c42e:	d036      	beq.n	800c49e <_svfiprintf_r+0x1d2>
 800c430:	4b21      	ldr	r3, [pc, #132]	@ (800c4b8 <_svfiprintf_r+0x1ec>)
 800c432:	bb1b      	cbnz	r3, 800c47c <_svfiprintf_r+0x1b0>
 800c434:	9b03      	ldr	r3, [sp, #12]
 800c436:	3307      	adds	r3, #7
 800c438:	f023 0307 	bic.w	r3, r3, #7
 800c43c:	3308      	adds	r3, #8
 800c43e:	9303      	str	r3, [sp, #12]
 800c440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c442:	4433      	add	r3, r6
 800c444:	9309      	str	r3, [sp, #36]	@ 0x24
 800c446:	e76a      	b.n	800c31e <_svfiprintf_r+0x52>
 800c448:	fb0c 3202 	mla	r2, ip, r2, r3
 800c44c:	460c      	mov	r4, r1
 800c44e:	2001      	movs	r0, #1
 800c450:	e7a8      	b.n	800c3a4 <_svfiprintf_r+0xd8>
 800c452:	2300      	movs	r3, #0
 800c454:	3401      	adds	r4, #1
 800c456:	9305      	str	r3, [sp, #20]
 800c458:	4619      	mov	r1, r3
 800c45a:	f04f 0c0a 	mov.w	ip, #10
 800c45e:	4620      	mov	r0, r4
 800c460:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c464:	3a30      	subs	r2, #48	@ 0x30
 800c466:	2a09      	cmp	r2, #9
 800c468:	d903      	bls.n	800c472 <_svfiprintf_r+0x1a6>
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d0c6      	beq.n	800c3fc <_svfiprintf_r+0x130>
 800c46e:	9105      	str	r1, [sp, #20]
 800c470:	e7c4      	b.n	800c3fc <_svfiprintf_r+0x130>
 800c472:	fb0c 2101 	mla	r1, ip, r1, r2
 800c476:	4604      	mov	r4, r0
 800c478:	2301      	movs	r3, #1
 800c47a:	e7f0      	b.n	800c45e <_svfiprintf_r+0x192>
 800c47c:	ab03      	add	r3, sp, #12
 800c47e:	9300      	str	r3, [sp, #0]
 800c480:	462a      	mov	r2, r5
 800c482:	4b0e      	ldr	r3, [pc, #56]	@ (800c4bc <_svfiprintf_r+0x1f0>)
 800c484:	a904      	add	r1, sp, #16
 800c486:	4638      	mov	r0, r7
 800c488:	f7fc fcbc 	bl	8008e04 <_printf_float>
 800c48c:	1c42      	adds	r2, r0, #1
 800c48e:	4606      	mov	r6, r0
 800c490:	d1d6      	bne.n	800c440 <_svfiprintf_r+0x174>
 800c492:	89ab      	ldrh	r3, [r5, #12]
 800c494:	065b      	lsls	r3, r3, #25
 800c496:	f53f af2d 	bmi.w	800c2f4 <_svfiprintf_r+0x28>
 800c49a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c49c:	e72c      	b.n	800c2f8 <_svfiprintf_r+0x2c>
 800c49e:	ab03      	add	r3, sp, #12
 800c4a0:	9300      	str	r3, [sp, #0]
 800c4a2:	462a      	mov	r2, r5
 800c4a4:	4b05      	ldr	r3, [pc, #20]	@ (800c4bc <_svfiprintf_r+0x1f0>)
 800c4a6:	a904      	add	r1, sp, #16
 800c4a8:	4638      	mov	r0, r7
 800c4aa:	f7fc ff43 	bl	8009334 <_printf_i>
 800c4ae:	e7ed      	b.n	800c48c <_svfiprintf_r+0x1c0>
 800c4b0:	0800d801 	.word	0x0800d801
 800c4b4:	0800d80b 	.word	0x0800d80b
 800c4b8:	08008e05 	.word	0x08008e05
 800c4bc:	0800c215 	.word	0x0800c215
 800c4c0:	0800d807 	.word	0x0800d807

0800c4c4 <__sflush_r>:
 800c4c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4cc:	0716      	lsls	r6, r2, #28
 800c4ce:	4605      	mov	r5, r0
 800c4d0:	460c      	mov	r4, r1
 800c4d2:	d454      	bmi.n	800c57e <__sflush_r+0xba>
 800c4d4:	684b      	ldr	r3, [r1, #4]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	dc02      	bgt.n	800c4e0 <__sflush_r+0x1c>
 800c4da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	dd48      	ble.n	800c572 <__sflush_r+0xae>
 800c4e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4e2:	2e00      	cmp	r6, #0
 800c4e4:	d045      	beq.n	800c572 <__sflush_r+0xae>
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c4ec:	682f      	ldr	r7, [r5, #0]
 800c4ee:	6a21      	ldr	r1, [r4, #32]
 800c4f0:	602b      	str	r3, [r5, #0]
 800c4f2:	d030      	beq.n	800c556 <__sflush_r+0x92>
 800c4f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c4f6:	89a3      	ldrh	r3, [r4, #12]
 800c4f8:	0759      	lsls	r1, r3, #29
 800c4fa:	d505      	bpl.n	800c508 <__sflush_r+0x44>
 800c4fc:	6863      	ldr	r3, [r4, #4]
 800c4fe:	1ad2      	subs	r2, r2, r3
 800c500:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c502:	b10b      	cbz	r3, 800c508 <__sflush_r+0x44>
 800c504:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c506:	1ad2      	subs	r2, r2, r3
 800c508:	2300      	movs	r3, #0
 800c50a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c50c:	6a21      	ldr	r1, [r4, #32]
 800c50e:	4628      	mov	r0, r5
 800c510:	47b0      	blx	r6
 800c512:	1c43      	adds	r3, r0, #1
 800c514:	89a3      	ldrh	r3, [r4, #12]
 800c516:	d106      	bne.n	800c526 <__sflush_r+0x62>
 800c518:	6829      	ldr	r1, [r5, #0]
 800c51a:	291d      	cmp	r1, #29
 800c51c:	d82b      	bhi.n	800c576 <__sflush_r+0xb2>
 800c51e:	4a2a      	ldr	r2, [pc, #168]	@ (800c5c8 <__sflush_r+0x104>)
 800c520:	410a      	asrs	r2, r1
 800c522:	07d6      	lsls	r6, r2, #31
 800c524:	d427      	bmi.n	800c576 <__sflush_r+0xb2>
 800c526:	2200      	movs	r2, #0
 800c528:	6062      	str	r2, [r4, #4]
 800c52a:	04d9      	lsls	r1, r3, #19
 800c52c:	6922      	ldr	r2, [r4, #16]
 800c52e:	6022      	str	r2, [r4, #0]
 800c530:	d504      	bpl.n	800c53c <__sflush_r+0x78>
 800c532:	1c42      	adds	r2, r0, #1
 800c534:	d101      	bne.n	800c53a <__sflush_r+0x76>
 800c536:	682b      	ldr	r3, [r5, #0]
 800c538:	b903      	cbnz	r3, 800c53c <__sflush_r+0x78>
 800c53a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c53c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c53e:	602f      	str	r7, [r5, #0]
 800c540:	b1b9      	cbz	r1, 800c572 <__sflush_r+0xae>
 800c542:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c546:	4299      	cmp	r1, r3
 800c548:	d002      	beq.n	800c550 <__sflush_r+0x8c>
 800c54a:	4628      	mov	r0, r5
 800c54c:	f7fe fa2c 	bl	800a9a8 <_free_r>
 800c550:	2300      	movs	r3, #0
 800c552:	6363      	str	r3, [r4, #52]	@ 0x34
 800c554:	e00d      	b.n	800c572 <__sflush_r+0xae>
 800c556:	2301      	movs	r3, #1
 800c558:	4628      	mov	r0, r5
 800c55a:	47b0      	blx	r6
 800c55c:	4602      	mov	r2, r0
 800c55e:	1c50      	adds	r0, r2, #1
 800c560:	d1c9      	bne.n	800c4f6 <__sflush_r+0x32>
 800c562:	682b      	ldr	r3, [r5, #0]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d0c6      	beq.n	800c4f6 <__sflush_r+0x32>
 800c568:	2b1d      	cmp	r3, #29
 800c56a:	d001      	beq.n	800c570 <__sflush_r+0xac>
 800c56c:	2b16      	cmp	r3, #22
 800c56e:	d11e      	bne.n	800c5ae <__sflush_r+0xea>
 800c570:	602f      	str	r7, [r5, #0]
 800c572:	2000      	movs	r0, #0
 800c574:	e022      	b.n	800c5bc <__sflush_r+0xf8>
 800c576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c57a:	b21b      	sxth	r3, r3
 800c57c:	e01b      	b.n	800c5b6 <__sflush_r+0xf2>
 800c57e:	690f      	ldr	r7, [r1, #16]
 800c580:	2f00      	cmp	r7, #0
 800c582:	d0f6      	beq.n	800c572 <__sflush_r+0xae>
 800c584:	0793      	lsls	r3, r2, #30
 800c586:	680e      	ldr	r6, [r1, #0]
 800c588:	bf08      	it	eq
 800c58a:	694b      	ldreq	r3, [r1, #20]
 800c58c:	600f      	str	r7, [r1, #0]
 800c58e:	bf18      	it	ne
 800c590:	2300      	movne	r3, #0
 800c592:	eba6 0807 	sub.w	r8, r6, r7
 800c596:	608b      	str	r3, [r1, #8]
 800c598:	f1b8 0f00 	cmp.w	r8, #0
 800c59c:	dde9      	ble.n	800c572 <__sflush_r+0xae>
 800c59e:	6a21      	ldr	r1, [r4, #32]
 800c5a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c5a2:	4643      	mov	r3, r8
 800c5a4:	463a      	mov	r2, r7
 800c5a6:	4628      	mov	r0, r5
 800c5a8:	47b0      	blx	r6
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	dc08      	bgt.n	800c5c0 <__sflush_r+0xfc>
 800c5ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5b6:	81a3      	strh	r3, [r4, #12]
 800c5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5c0:	4407      	add	r7, r0
 800c5c2:	eba8 0800 	sub.w	r8, r8, r0
 800c5c6:	e7e7      	b.n	800c598 <__sflush_r+0xd4>
 800c5c8:	dfbffffe 	.word	0xdfbffffe

0800c5cc <_fflush_r>:
 800c5cc:	b538      	push	{r3, r4, r5, lr}
 800c5ce:	690b      	ldr	r3, [r1, #16]
 800c5d0:	4605      	mov	r5, r0
 800c5d2:	460c      	mov	r4, r1
 800c5d4:	b913      	cbnz	r3, 800c5dc <_fflush_r+0x10>
 800c5d6:	2500      	movs	r5, #0
 800c5d8:	4628      	mov	r0, r5
 800c5da:	bd38      	pop	{r3, r4, r5, pc}
 800c5dc:	b118      	cbz	r0, 800c5e6 <_fflush_r+0x1a>
 800c5de:	6a03      	ldr	r3, [r0, #32]
 800c5e0:	b90b      	cbnz	r3, 800c5e6 <_fflush_r+0x1a>
 800c5e2:	f7fd fa67 	bl	8009ab4 <__sinit>
 800c5e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d0f3      	beq.n	800c5d6 <_fflush_r+0xa>
 800c5ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c5f0:	07d0      	lsls	r0, r2, #31
 800c5f2:	d404      	bmi.n	800c5fe <_fflush_r+0x32>
 800c5f4:	0599      	lsls	r1, r3, #22
 800c5f6:	d402      	bmi.n	800c5fe <_fflush_r+0x32>
 800c5f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5fa:	f7fd fb72 	bl	8009ce2 <__retarget_lock_acquire_recursive>
 800c5fe:	4628      	mov	r0, r5
 800c600:	4621      	mov	r1, r4
 800c602:	f7ff ff5f 	bl	800c4c4 <__sflush_r>
 800c606:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c608:	07da      	lsls	r2, r3, #31
 800c60a:	4605      	mov	r5, r0
 800c60c:	d4e4      	bmi.n	800c5d8 <_fflush_r+0xc>
 800c60e:	89a3      	ldrh	r3, [r4, #12]
 800c610:	059b      	lsls	r3, r3, #22
 800c612:	d4e1      	bmi.n	800c5d8 <_fflush_r+0xc>
 800c614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c616:	f7fd fb65 	bl	8009ce4 <__retarget_lock_release_recursive>
 800c61a:	e7dd      	b.n	800c5d8 <_fflush_r+0xc>

0800c61c <memmove>:
 800c61c:	4288      	cmp	r0, r1
 800c61e:	b510      	push	{r4, lr}
 800c620:	eb01 0402 	add.w	r4, r1, r2
 800c624:	d902      	bls.n	800c62c <memmove+0x10>
 800c626:	4284      	cmp	r4, r0
 800c628:	4623      	mov	r3, r4
 800c62a:	d807      	bhi.n	800c63c <memmove+0x20>
 800c62c:	1e43      	subs	r3, r0, #1
 800c62e:	42a1      	cmp	r1, r4
 800c630:	d008      	beq.n	800c644 <memmove+0x28>
 800c632:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c636:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c63a:	e7f8      	b.n	800c62e <memmove+0x12>
 800c63c:	4402      	add	r2, r0
 800c63e:	4601      	mov	r1, r0
 800c640:	428a      	cmp	r2, r1
 800c642:	d100      	bne.n	800c646 <memmove+0x2a>
 800c644:	bd10      	pop	{r4, pc}
 800c646:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c64a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c64e:	e7f7      	b.n	800c640 <memmove+0x24>

0800c650 <strncmp>:
 800c650:	b510      	push	{r4, lr}
 800c652:	b16a      	cbz	r2, 800c670 <strncmp+0x20>
 800c654:	3901      	subs	r1, #1
 800c656:	1884      	adds	r4, r0, r2
 800c658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c65c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c660:	429a      	cmp	r2, r3
 800c662:	d103      	bne.n	800c66c <strncmp+0x1c>
 800c664:	42a0      	cmp	r0, r4
 800c666:	d001      	beq.n	800c66c <strncmp+0x1c>
 800c668:	2a00      	cmp	r2, #0
 800c66a:	d1f5      	bne.n	800c658 <strncmp+0x8>
 800c66c:	1ad0      	subs	r0, r2, r3
 800c66e:	bd10      	pop	{r4, pc}
 800c670:	4610      	mov	r0, r2
 800c672:	e7fc      	b.n	800c66e <strncmp+0x1e>

0800c674 <_sbrk_r>:
 800c674:	b538      	push	{r3, r4, r5, lr}
 800c676:	4d06      	ldr	r5, [pc, #24]	@ (800c690 <_sbrk_r+0x1c>)
 800c678:	2300      	movs	r3, #0
 800c67a:	4604      	mov	r4, r0
 800c67c:	4608      	mov	r0, r1
 800c67e:	602b      	str	r3, [r5, #0]
 800c680:	f7f5 f9c8 	bl	8001a14 <_sbrk>
 800c684:	1c43      	adds	r3, r0, #1
 800c686:	d102      	bne.n	800c68e <_sbrk_r+0x1a>
 800c688:	682b      	ldr	r3, [r5, #0]
 800c68a:	b103      	cbz	r3, 800c68e <_sbrk_r+0x1a>
 800c68c:	6023      	str	r3, [r4, #0]
 800c68e:	bd38      	pop	{r3, r4, r5, pc}
 800c690:	20001418 	.word	0x20001418
 800c694:	00000000 	.word	0x00000000

0800c698 <nan>:
 800c698:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c6a0 <nan+0x8>
 800c69c:	4770      	bx	lr
 800c69e:	bf00      	nop
 800c6a0:	00000000 	.word	0x00000000
 800c6a4:	7ff80000 	.word	0x7ff80000

0800c6a8 <__assert_func>:
 800c6a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6aa:	4614      	mov	r4, r2
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	4b09      	ldr	r3, [pc, #36]	@ (800c6d4 <__assert_func+0x2c>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4605      	mov	r5, r0
 800c6b4:	68d8      	ldr	r0, [r3, #12]
 800c6b6:	b954      	cbnz	r4, 800c6ce <__assert_func+0x26>
 800c6b8:	4b07      	ldr	r3, [pc, #28]	@ (800c6d8 <__assert_func+0x30>)
 800c6ba:	461c      	mov	r4, r3
 800c6bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6c0:	9100      	str	r1, [sp, #0]
 800c6c2:	462b      	mov	r3, r5
 800c6c4:	4905      	ldr	r1, [pc, #20]	@ (800c6dc <__assert_func+0x34>)
 800c6c6:	f000 fba7 	bl	800ce18 <fiprintf>
 800c6ca:	f000 fbb7 	bl	800ce3c <abort>
 800c6ce:	4b04      	ldr	r3, [pc, #16]	@ (800c6e0 <__assert_func+0x38>)
 800c6d0:	e7f4      	b.n	800c6bc <__assert_func+0x14>
 800c6d2:	bf00      	nop
 800c6d4:	2000001c 	.word	0x2000001c
 800c6d8:	0800d855 	.word	0x0800d855
 800c6dc:	0800d827 	.word	0x0800d827
 800c6e0:	0800d81a 	.word	0x0800d81a

0800c6e4 <_calloc_r>:
 800c6e4:	b570      	push	{r4, r5, r6, lr}
 800c6e6:	fba1 5402 	umull	r5, r4, r1, r2
 800c6ea:	b93c      	cbnz	r4, 800c6fc <_calloc_r+0x18>
 800c6ec:	4629      	mov	r1, r5
 800c6ee:	f7fe f9cf 	bl	800aa90 <_malloc_r>
 800c6f2:	4606      	mov	r6, r0
 800c6f4:	b928      	cbnz	r0, 800c702 <_calloc_r+0x1e>
 800c6f6:	2600      	movs	r6, #0
 800c6f8:	4630      	mov	r0, r6
 800c6fa:	bd70      	pop	{r4, r5, r6, pc}
 800c6fc:	220c      	movs	r2, #12
 800c6fe:	6002      	str	r2, [r0, #0]
 800c700:	e7f9      	b.n	800c6f6 <_calloc_r+0x12>
 800c702:	462a      	mov	r2, r5
 800c704:	4621      	mov	r1, r4
 800c706:	f7fd fa6e 	bl	8009be6 <memset>
 800c70a:	e7f5      	b.n	800c6f8 <_calloc_r+0x14>

0800c70c <rshift>:
 800c70c:	6903      	ldr	r3, [r0, #16]
 800c70e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c712:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c716:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c71a:	f100 0414 	add.w	r4, r0, #20
 800c71e:	dd45      	ble.n	800c7ac <rshift+0xa0>
 800c720:	f011 011f 	ands.w	r1, r1, #31
 800c724:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c728:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c72c:	d10c      	bne.n	800c748 <rshift+0x3c>
 800c72e:	f100 0710 	add.w	r7, r0, #16
 800c732:	4629      	mov	r1, r5
 800c734:	42b1      	cmp	r1, r6
 800c736:	d334      	bcc.n	800c7a2 <rshift+0x96>
 800c738:	1a9b      	subs	r3, r3, r2
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	1eea      	subs	r2, r5, #3
 800c73e:	4296      	cmp	r6, r2
 800c740:	bf38      	it	cc
 800c742:	2300      	movcc	r3, #0
 800c744:	4423      	add	r3, r4
 800c746:	e015      	b.n	800c774 <rshift+0x68>
 800c748:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c74c:	f1c1 0820 	rsb	r8, r1, #32
 800c750:	40cf      	lsrs	r7, r1
 800c752:	f105 0e04 	add.w	lr, r5, #4
 800c756:	46a1      	mov	r9, r4
 800c758:	4576      	cmp	r6, lr
 800c75a:	46f4      	mov	ip, lr
 800c75c:	d815      	bhi.n	800c78a <rshift+0x7e>
 800c75e:	1a9a      	subs	r2, r3, r2
 800c760:	0092      	lsls	r2, r2, #2
 800c762:	3a04      	subs	r2, #4
 800c764:	3501      	adds	r5, #1
 800c766:	42ae      	cmp	r6, r5
 800c768:	bf38      	it	cc
 800c76a:	2200      	movcc	r2, #0
 800c76c:	18a3      	adds	r3, r4, r2
 800c76e:	50a7      	str	r7, [r4, r2]
 800c770:	b107      	cbz	r7, 800c774 <rshift+0x68>
 800c772:	3304      	adds	r3, #4
 800c774:	1b1a      	subs	r2, r3, r4
 800c776:	42a3      	cmp	r3, r4
 800c778:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c77c:	bf08      	it	eq
 800c77e:	2300      	moveq	r3, #0
 800c780:	6102      	str	r2, [r0, #16]
 800c782:	bf08      	it	eq
 800c784:	6143      	streq	r3, [r0, #20]
 800c786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c78a:	f8dc c000 	ldr.w	ip, [ip]
 800c78e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c792:	ea4c 0707 	orr.w	r7, ip, r7
 800c796:	f849 7b04 	str.w	r7, [r9], #4
 800c79a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c79e:	40cf      	lsrs	r7, r1
 800c7a0:	e7da      	b.n	800c758 <rshift+0x4c>
 800c7a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800c7a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800c7aa:	e7c3      	b.n	800c734 <rshift+0x28>
 800c7ac:	4623      	mov	r3, r4
 800c7ae:	e7e1      	b.n	800c774 <rshift+0x68>

0800c7b0 <__hexdig_fun>:
 800c7b0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c7b4:	2b09      	cmp	r3, #9
 800c7b6:	d802      	bhi.n	800c7be <__hexdig_fun+0xe>
 800c7b8:	3820      	subs	r0, #32
 800c7ba:	b2c0      	uxtb	r0, r0
 800c7bc:	4770      	bx	lr
 800c7be:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c7c2:	2b05      	cmp	r3, #5
 800c7c4:	d801      	bhi.n	800c7ca <__hexdig_fun+0x1a>
 800c7c6:	3847      	subs	r0, #71	@ 0x47
 800c7c8:	e7f7      	b.n	800c7ba <__hexdig_fun+0xa>
 800c7ca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c7ce:	2b05      	cmp	r3, #5
 800c7d0:	d801      	bhi.n	800c7d6 <__hexdig_fun+0x26>
 800c7d2:	3827      	subs	r0, #39	@ 0x27
 800c7d4:	e7f1      	b.n	800c7ba <__hexdig_fun+0xa>
 800c7d6:	2000      	movs	r0, #0
 800c7d8:	4770      	bx	lr
	...

0800c7dc <__gethex>:
 800c7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e0:	b085      	sub	sp, #20
 800c7e2:	468a      	mov	sl, r1
 800c7e4:	9302      	str	r3, [sp, #8]
 800c7e6:	680b      	ldr	r3, [r1, #0]
 800c7e8:	9001      	str	r0, [sp, #4]
 800c7ea:	4690      	mov	r8, r2
 800c7ec:	1c9c      	adds	r4, r3, #2
 800c7ee:	46a1      	mov	r9, r4
 800c7f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c7f4:	2830      	cmp	r0, #48	@ 0x30
 800c7f6:	d0fa      	beq.n	800c7ee <__gethex+0x12>
 800c7f8:	eba9 0303 	sub.w	r3, r9, r3
 800c7fc:	f1a3 0b02 	sub.w	fp, r3, #2
 800c800:	f7ff ffd6 	bl	800c7b0 <__hexdig_fun>
 800c804:	4605      	mov	r5, r0
 800c806:	2800      	cmp	r0, #0
 800c808:	d168      	bne.n	800c8dc <__gethex+0x100>
 800c80a:	49a0      	ldr	r1, [pc, #640]	@ (800ca8c <__gethex+0x2b0>)
 800c80c:	2201      	movs	r2, #1
 800c80e:	4648      	mov	r0, r9
 800c810:	f7ff ff1e 	bl	800c650 <strncmp>
 800c814:	4607      	mov	r7, r0
 800c816:	2800      	cmp	r0, #0
 800c818:	d167      	bne.n	800c8ea <__gethex+0x10e>
 800c81a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c81e:	4626      	mov	r6, r4
 800c820:	f7ff ffc6 	bl	800c7b0 <__hexdig_fun>
 800c824:	2800      	cmp	r0, #0
 800c826:	d062      	beq.n	800c8ee <__gethex+0x112>
 800c828:	4623      	mov	r3, r4
 800c82a:	7818      	ldrb	r0, [r3, #0]
 800c82c:	2830      	cmp	r0, #48	@ 0x30
 800c82e:	4699      	mov	r9, r3
 800c830:	f103 0301 	add.w	r3, r3, #1
 800c834:	d0f9      	beq.n	800c82a <__gethex+0x4e>
 800c836:	f7ff ffbb 	bl	800c7b0 <__hexdig_fun>
 800c83a:	fab0 f580 	clz	r5, r0
 800c83e:	096d      	lsrs	r5, r5, #5
 800c840:	f04f 0b01 	mov.w	fp, #1
 800c844:	464a      	mov	r2, r9
 800c846:	4616      	mov	r6, r2
 800c848:	3201      	adds	r2, #1
 800c84a:	7830      	ldrb	r0, [r6, #0]
 800c84c:	f7ff ffb0 	bl	800c7b0 <__hexdig_fun>
 800c850:	2800      	cmp	r0, #0
 800c852:	d1f8      	bne.n	800c846 <__gethex+0x6a>
 800c854:	498d      	ldr	r1, [pc, #564]	@ (800ca8c <__gethex+0x2b0>)
 800c856:	2201      	movs	r2, #1
 800c858:	4630      	mov	r0, r6
 800c85a:	f7ff fef9 	bl	800c650 <strncmp>
 800c85e:	2800      	cmp	r0, #0
 800c860:	d13f      	bne.n	800c8e2 <__gethex+0x106>
 800c862:	b944      	cbnz	r4, 800c876 <__gethex+0x9a>
 800c864:	1c74      	adds	r4, r6, #1
 800c866:	4622      	mov	r2, r4
 800c868:	4616      	mov	r6, r2
 800c86a:	3201      	adds	r2, #1
 800c86c:	7830      	ldrb	r0, [r6, #0]
 800c86e:	f7ff ff9f 	bl	800c7b0 <__hexdig_fun>
 800c872:	2800      	cmp	r0, #0
 800c874:	d1f8      	bne.n	800c868 <__gethex+0x8c>
 800c876:	1ba4      	subs	r4, r4, r6
 800c878:	00a7      	lsls	r7, r4, #2
 800c87a:	7833      	ldrb	r3, [r6, #0]
 800c87c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c880:	2b50      	cmp	r3, #80	@ 0x50
 800c882:	d13e      	bne.n	800c902 <__gethex+0x126>
 800c884:	7873      	ldrb	r3, [r6, #1]
 800c886:	2b2b      	cmp	r3, #43	@ 0x2b
 800c888:	d033      	beq.n	800c8f2 <__gethex+0x116>
 800c88a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c88c:	d034      	beq.n	800c8f8 <__gethex+0x11c>
 800c88e:	1c71      	adds	r1, r6, #1
 800c890:	2400      	movs	r4, #0
 800c892:	7808      	ldrb	r0, [r1, #0]
 800c894:	f7ff ff8c 	bl	800c7b0 <__hexdig_fun>
 800c898:	1e43      	subs	r3, r0, #1
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	2b18      	cmp	r3, #24
 800c89e:	d830      	bhi.n	800c902 <__gethex+0x126>
 800c8a0:	f1a0 0210 	sub.w	r2, r0, #16
 800c8a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c8a8:	f7ff ff82 	bl	800c7b0 <__hexdig_fun>
 800c8ac:	f100 3cff 	add.w	ip, r0, #4294967295
 800c8b0:	fa5f fc8c 	uxtb.w	ip, ip
 800c8b4:	f1bc 0f18 	cmp.w	ip, #24
 800c8b8:	f04f 030a 	mov.w	r3, #10
 800c8bc:	d91e      	bls.n	800c8fc <__gethex+0x120>
 800c8be:	b104      	cbz	r4, 800c8c2 <__gethex+0xe6>
 800c8c0:	4252      	negs	r2, r2
 800c8c2:	4417      	add	r7, r2
 800c8c4:	f8ca 1000 	str.w	r1, [sl]
 800c8c8:	b1ed      	cbz	r5, 800c906 <__gethex+0x12a>
 800c8ca:	f1bb 0f00 	cmp.w	fp, #0
 800c8ce:	bf0c      	ite	eq
 800c8d0:	2506      	moveq	r5, #6
 800c8d2:	2500      	movne	r5, #0
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	b005      	add	sp, #20
 800c8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8dc:	2500      	movs	r5, #0
 800c8de:	462c      	mov	r4, r5
 800c8e0:	e7b0      	b.n	800c844 <__gethex+0x68>
 800c8e2:	2c00      	cmp	r4, #0
 800c8e4:	d1c7      	bne.n	800c876 <__gethex+0x9a>
 800c8e6:	4627      	mov	r7, r4
 800c8e8:	e7c7      	b.n	800c87a <__gethex+0x9e>
 800c8ea:	464e      	mov	r6, r9
 800c8ec:	462f      	mov	r7, r5
 800c8ee:	2501      	movs	r5, #1
 800c8f0:	e7c3      	b.n	800c87a <__gethex+0x9e>
 800c8f2:	2400      	movs	r4, #0
 800c8f4:	1cb1      	adds	r1, r6, #2
 800c8f6:	e7cc      	b.n	800c892 <__gethex+0xb6>
 800c8f8:	2401      	movs	r4, #1
 800c8fa:	e7fb      	b.n	800c8f4 <__gethex+0x118>
 800c8fc:	fb03 0002 	mla	r0, r3, r2, r0
 800c900:	e7ce      	b.n	800c8a0 <__gethex+0xc4>
 800c902:	4631      	mov	r1, r6
 800c904:	e7de      	b.n	800c8c4 <__gethex+0xe8>
 800c906:	eba6 0309 	sub.w	r3, r6, r9
 800c90a:	3b01      	subs	r3, #1
 800c90c:	4629      	mov	r1, r5
 800c90e:	2b07      	cmp	r3, #7
 800c910:	dc0a      	bgt.n	800c928 <__gethex+0x14c>
 800c912:	9801      	ldr	r0, [sp, #4]
 800c914:	f7fe f948 	bl	800aba8 <_Balloc>
 800c918:	4604      	mov	r4, r0
 800c91a:	b940      	cbnz	r0, 800c92e <__gethex+0x152>
 800c91c:	4b5c      	ldr	r3, [pc, #368]	@ (800ca90 <__gethex+0x2b4>)
 800c91e:	4602      	mov	r2, r0
 800c920:	21e4      	movs	r1, #228	@ 0xe4
 800c922:	485c      	ldr	r0, [pc, #368]	@ (800ca94 <__gethex+0x2b8>)
 800c924:	f7ff fec0 	bl	800c6a8 <__assert_func>
 800c928:	3101      	adds	r1, #1
 800c92a:	105b      	asrs	r3, r3, #1
 800c92c:	e7ef      	b.n	800c90e <__gethex+0x132>
 800c92e:	f100 0a14 	add.w	sl, r0, #20
 800c932:	2300      	movs	r3, #0
 800c934:	4655      	mov	r5, sl
 800c936:	469b      	mov	fp, r3
 800c938:	45b1      	cmp	r9, r6
 800c93a:	d337      	bcc.n	800c9ac <__gethex+0x1d0>
 800c93c:	f845 bb04 	str.w	fp, [r5], #4
 800c940:	eba5 050a 	sub.w	r5, r5, sl
 800c944:	10ad      	asrs	r5, r5, #2
 800c946:	6125      	str	r5, [r4, #16]
 800c948:	4658      	mov	r0, fp
 800c94a:	f7fe fa1f 	bl	800ad8c <__hi0bits>
 800c94e:	016d      	lsls	r5, r5, #5
 800c950:	f8d8 6000 	ldr.w	r6, [r8]
 800c954:	1a2d      	subs	r5, r5, r0
 800c956:	42b5      	cmp	r5, r6
 800c958:	dd54      	ble.n	800ca04 <__gethex+0x228>
 800c95a:	1bad      	subs	r5, r5, r6
 800c95c:	4629      	mov	r1, r5
 800c95e:	4620      	mov	r0, r4
 800c960:	f7fe fdb3 	bl	800b4ca <__any_on>
 800c964:	4681      	mov	r9, r0
 800c966:	b178      	cbz	r0, 800c988 <__gethex+0x1ac>
 800c968:	1e6b      	subs	r3, r5, #1
 800c96a:	1159      	asrs	r1, r3, #5
 800c96c:	f003 021f 	and.w	r2, r3, #31
 800c970:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c974:	f04f 0901 	mov.w	r9, #1
 800c978:	fa09 f202 	lsl.w	r2, r9, r2
 800c97c:	420a      	tst	r2, r1
 800c97e:	d003      	beq.n	800c988 <__gethex+0x1ac>
 800c980:	454b      	cmp	r3, r9
 800c982:	dc36      	bgt.n	800c9f2 <__gethex+0x216>
 800c984:	f04f 0902 	mov.w	r9, #2
 800c988:	4629      	mov	r1, r5
 800c98a:	4620      	mov	r0, r4
 800c98c:	f7ff febe 	bl	800c70c <rshift>
 800c990:	442f      	add	r7, r5
 800c992:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c996:	42bb      	cmp	r3, r7
 800c998:	da42      	bge.n	800ca20 <__gethex+0x244>
 800c99a:	9801      	ldr	r0, [sp, #4]
 800c99c:	4621      	mov	r1, r4
 800c99e:	f7fe f943 	bl	800ac28 <_Bfree>
 800c9a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	6013      	str	r3, [r2, #0]
 800c9a8:	25a3      	movs	r5, #163	@ 0xa3
 800c9aa:	e793      	b.n	800c8d4 <__gethex+0xf8>
 800c9ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c9b0:	2a2e      	cmp	r2, #46	@ 0x2e
 800c9b2:	d012      	beq.n	800c9da <__gethex+0x1fe>
 800c9b4:	2b20      	cmp	r3, #32
 800c9b6:	d104      	bne.n	800c9c2 <__gethex+0x1e6>
 800c9b8:	f845 bb04 	str.w	fp, [r5], #4
 800c9bc:	f04f 0b00 	mov.w	fp, #0
 800c9c0:	465b      	mov	r3, fp
 800c9c2:	7830      	ldrb	r0, [r6, #0]
 800c9c4:	9303      	str	r3, [sp, #12]
 800c9c6:	f7ff fef3 	bl	800c7b0 <__hexdig_fun>
 800c9ca:	9b03      	ldr	r3, [sp, #12]
 800c9cc:	f000 000f 	and.w	r0, r0, #15
 800c9d0:	4098      	lsls	r0, r3
 800c9d2:	ea4b 0b00 	orr.w	fp, fp, r0
 800c9d6:	3304      	adds	r3, #4
 800c9d8:	e7ae      	b.n	800c938 <__gethex+0x15c>
 800c9da:	45b1      	cmp	r9, r6
 800c9dc:	d8ea      	bhi.n	800c9b4 <__gethex+0x1d8>
 800c9de:	492b      	ldr	r1, [pc, #172]	@ (800ca8c <__gethex+0x2b0>)
 800c9e0:	9303      	str	r3, [sp, #12]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	f7ff fe33 	bl	800c650 <strncmp>
 800c9ea:	9b03      	ldr	r3, [sp, #12]
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	d1e1      	bne.n	800c9b4 <__gethex+0x1d8>
 800c9f0:	e7a2      	b.n	800c938 <__gethex+0x15c>
 800c9f2:	1ea9      	subs	r1, r5, #2
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f7fe fd68 	bl	800b4ca <__any_on>
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	d0c2      	beq.n	800c984 <__gethex+0x1a8>
 800c9fe:	f04f 0903 	mov.w	r9, #3
 800ca02:	e7c1      	b.n	800c988 <__gethex+0x1ac>
 800ca04:	da09      	bge.n	800ca1a <__gethex+0x23e>
 800ca06:	1b75      	subs	r5, r6, r5
 800ca08:	4621      	mov	r1, r4
 800ca0a:	9801      	ldr	r0, [sp, #4]
 800ca0c:	462a      	mov	r2, r5
 800ca0e:	f7fe fb23 	bl	800b058 <__lshift>
 800ca12:	1b7f      	subs	r7, r7, r5
 800ca14:	4604      	mov	r4, r0
 800ca16:	f100 0a14 	add.w	sl, r0, #20
 800ca1a:	f04f 0900 	mov.w	r9, #0
 800ca1e:	e7b8      	b.n	800c992 <__gethex+0x1b6>
 800ca20:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ca24:	42bd      	cmp	r5, r7
 800ca26:	dd6f      	ble.n	800cb08 <__gethex+0x32c>
 800ca28:	1bed      	subs	r5, r5, r7
 800ca2a:	42ae      	cmp	r6, r5
 800ca2c:	dc34      	bgt.n	800ca98 <__gethex+0x2bc>
 800ca2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca32:	2b02      	cmp	r3, #2
 800ca34:	d022      	beq.n	800ca7c <__gethex+0x2a0>
 800ca36:	2b03      	cmp	r3, #3
 800ca38:	d024      	beq.n	800ca84 <__gethex+0x2a8>
 800ca3a:	2b01      	cmp	r3, #1
 800ca3c:	d115      	bne.n	800ca6a <__gethex+0x28e>
 800ca3e:	42ae      	cmp	r6, r5
 800ca40:	d113      	bne.n	800ca6a <__gethex+0x28e>
 800ca42:	2e01      	cmp	r6, #1
 800ca44:	d10b      	bne.n	800ca5e <__gethex+0x282>
 800ca46:	9a02      	ldr	r2, [sp, #8]
 800ca48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ca4c:	6013      	str	r3, [r2, #0]
 800ca4e:	2301      	movs	r3, #1
 800ca50:	6123      	str	r3, [r4, #16]
 800ca52:	f8ca 3000 	str.w	r3, [sl]
 800ca56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca58:	2562      	movs	r5, #98	@ 0x62
 800ca5a:	601c      	str	r4, [r3, #0]
 800ca5c:	e73a      	b.n	800c8d4 <__gethex+0xf8>
 800ca5e:	1e71      	subs	r1, r6, #1
 800ca60:	4620      	mov	r0, r4
 800ca62:	f7fe fd32 	bl	800b4ca <__any_on>
 800ca66:	2800      	cmp	r0, #0
 800ca68:	d1ed      	bne.n	800ca46 <__gethex+0x26a>
 800ca6a:	9801      	ldr	r0, [sp, #4]
 800ca6c:	4621      	mov	r1, r4
 800ca6e:	f7fe f8db 	bl	800ac28 <_Bfree>
 800ca72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca74:	2300      	movs	r3, #0
 800ca76:	6013      	str	r3, [r2, #0]
 800ca78:	2550      	movs	r5, #80	@ 0x50
 800ca7a:	e72b      	b.n	800c8d4 <__gethex+0xf8>
 800ca7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d1f3      	bne.n	800ca6a <__gethex+0x28e>
 800ca82:	e7e0      	b.n	800ca46 <__gethex+0x26a>
 800ca84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d1dd      	bne.n	800ca46 <__gethex+0x26a>
 800ca8a:	e7ee      	b.n	800ca6a <__gethex+0x28e>
 800ca8c:	0800d6a8 	.word	0x0800d6a8
 800ca90:	0800d53d 	.word	0x0800d53d
 800ca94:	0800d856 	.word	0x0800d856
 800ca98:	1e6f      	subs	r7, r5, #1
 800ca9a:	f1b9 0f00 	cmp.w	r9, #0
 800ca9e:	d130      	bne.n	800cb02 <__gethex+0x326>
 800caa0:	b127      	cbz	r7, 800caac <__gethex+0x2d0>
 800caa2:	4639      	mov	r1, r7
 800caa4:	4620      	mov	r0, r4
 800caa6:	f7fe fd10 	bl	800b4ca <__any_on>
 800caaa:	4681      	mov	r9, r0
 800caac:	117a      	asrs	r2, r7, #5
 800caae:	2301      	movs	r3, #1
 800cab0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cab4:	f007 071f 	and.w	r7, r7, #31
 800cab8:	40bb      	lsls	r3, r7
 800caba:	4213      	tst	r3, r2
 800cabc:	4629      	mov	r1, r5
 800cabe:	4620      	mov	r0, r4
 800cac0:	bf18      	it	ne
 800cac2:	f049 0902 	orrne.w	r9, r9, #2
 800cac6:	f7ff fe21 	bl	800c70c <rshift>
 800caca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cace:	1b76      	subs	r6, r6, r5
 800cad0:	2502      	movs	r5, #2
 800cad2:	f1b9 0f00 	cmp.w	r9, #0
 800cad6:	d047      	beq.n	800cb68 <__gethex+0x38c>
 800cad8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cadc:	2b02      	cmp	r3, #2
 800cade:	d015      	beq.n	800cb0c <__gethex+0x330>
 800cae0:	2b03      	cmp	r3, #3
 800cae2:	d017      	beq.n	800cb14 <__gethex+0x338>
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d109      	bne.n	800cafc <__gethex+0x320>
 800cae8:	f019 0f02 	tst.w	r9, #2
 800caec:	d006      	beq.n	800cafc <__gethex+0x320>
 800caee:	f8da 3000 	ldr.w	r3, [sl]
 800caf2:	ea49 0903 	orr.w	r9, r9, r3
 800caf6:	f019 0f01 	tst.w	r9, #1
 800cafa:	d10e      	bne.n	800cb1a <__gethex+0x33e>
 800cafc:	f045 0510 	orr.w	r5, r5, #16
 800cb00:	e032      	b.n	800cb68 <__gethex+0x38c>
 800cb02:	f04f 0901 	mov.w	r9, #1
 800cb06:	e7d1      	b.n	800caac <__gethex+0x2d0>
 800cb08:	2501      	movs	r5, #1
 800cb0a:	e7e2      	b.n	800cad2 <__gethex+0x2f6>
 800cb0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb0e:	f1c3 0301 	rsb	r3, r3, #1
 800cb12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d0f0      	beq.n	800cafc <__gethex+0x320>
 800cb1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cb1e:	f104 0314 	add.w	r3, r4, #20
 800cb22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cb26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cb2a:	f04f 0c00 	mov.w	ip, #0
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb34:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cb38:	d01b      	beq.n	800cb72 <__gethex+0x396>
 800cb3a:	3201      	adds	r2, #1
 800cb3c:	6002      	str	r2, [r0, #0]
 800cb3e:	2d02      	cmp	r5, #2
 800cb40:	f104 0314 	add.w	r3, r4, #20
 800cb44:	d13c      	bne.n	800cbc0 <__gethex+0x3e4>
 800cb46:	f8d8 2000 	ldr.w	r2, [r8]
 800cb4a:	3a01      	subs	r2, #1
 800cb4c:	42b2      	cmp	r2, r6
 800cb4e:	d109      	bne.n	800cb64 <__gethex+0x388>
 800cb50:	1171      	asrs	r1, r6, #5
 800cb52:	2201      	movs	r2, #1
 800cb54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cb58:	f006 061f 	and.w	r6, r6, #31
 800cb5c:	fa02 f606 	lsl.w	r6, r2, r6
 800cb60:	421e      	tst	r6, r3
 800cb62:	d13a      	bne.n	800cbda <__gethex+0x3fe>
 800cb64:	f045 0520 	orr.w	r5, r5, #32
 800cb68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb6a:	601c      	str	r4, [r3, #0]
 800cb6c:	9b02      	ldr	r3, [sp, #8]
 800cb6e:	601f      	str	r7, [r3, #0]
 800cb70:	e6b0      	b.n	800c8d4 <__gethex+0xf8>
 800cb72:	4299      	cmp	r1, r3
 800cb74:	f843 cc04 	str.w	ip, [r3, #-4]
 800cb78:	d8d9      	bhi.n	800cb2e <__gethex+0x352>
 800cb7a:	68a3      	ldr	r3, [r4, #8]
 800cb7c:	459b      	cmp	fp, r3
 800cb7e:	db17      	blt.n	800cbb0 <__gethex+0x3d4>
 800cb80:	6861      	ldr	r1, [r4, #4]
 800cb82:	9801      	ldr	r0, [sp, #4]
 800cb84:	3101      	adds	r1, #1
 800cb86:	f7fe f80f 	bl	800aba8 <_Balloc>
 800cb8a:	4681      	mov	r9, r0
 800cb8c:	b918      	cbnz	r0, 800cb96 <__gethex+0x3ba>
 800cb8e:	4b1a      	ldr	r3, [pc, #104]	@ (800cbf8 <__gethex+0x41c>)
 800cb90:	4602      	mov	r2, r0
 800cb92:	2184      	movs	r1, #132	@ 0x84
 800cb94:	e6c5      	b.n	800c922 <__gethex+0x146>
 800cb96:	6922      	ldr	r2, [r4, #16]
 800cb98:	3202      	adds	r2, #2
 800cb9a:	f104 010c 	add.w	r1, r4, #12
 800cb9e:	0092      	lsls	r2, r2, #2
 800cba0:	300c      	adds	r0, #12
 800cba2:	f7fd f8a0 	bl	8009ce6 <memcpy>
 800cba6:	4621      	mov	r1, r4
 800cba8:	9801      	ldr	r0, [sp, #4]
 800cbaa:	f7fe f83d 	bl	800ac28 <_Bfree>
 800cbae:	464c      	mov	r4, r9
 800cbb0:	6923      	ldr	r3, [r4, #16]
 800cbb2:	1c5a      	adds	r2, r3, #1
 800cbb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cbb8:	6122      	str	r2, [r4, #16]
 800cbba:	2201      	movs	r2, #1
 800cbbc:	615a      	str	r2, [r3, #20]
 800cbbe:	e7be      	b.n	800cb3e <__gethex+0x362>
 800cbc0:	6922      	ldr	r2, [r4, #16]
 800cbc2:	455a      	cmp	r2, fp
 800cbc4:	dd0b      	ble.n	800cbde <__gethex+0x402>
 800cbc6:	2101      	movs	r1, #1
 800cbc8:	4620      	mov	r0, r4
 800cbca:	f7ff fd9f 	bl	800c70c <rshift>
 800cbce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cbd2:	3701      	adds	r7, #1
 800cbd4:	42bb      	cmp	r3, r7
 800cbd6:	f6ff aee0 	blt.w	800c99a <__gethex+0x1be>
 800cbda:	2501      	movs	r5, #1
 800cbdc:	e7c2      	b.n	800cb64 <__gethex+0x388>
 800cbde:	f016 061f 	ands.w	r6, r6, #31
 800cbe2:	d0fa      	beq.n	800cbda <__gethex+0x3fe>
 800cbe4:	4453      	add	r3, sl
 800cbe6:	f1c6 0620 	rsb	r6, r6, #32
 800cbea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cbee:	f7fe f8cd 	bl	800ad8c <__hi0bits>
 800cbf2:	42b0      	cmp	r0, r6
 800cbf4:	dbe7      	blt.n	800cbc6 <__gethex+0x3ea>
 800cbf6:	e7f0      	b.n	800cbda <__gethex+0x3fe>
 800cbf8:	0800d53d 	.word	0x0800d53d

0800cbfc <L_shift>:
 800cbfc:	f1c2 0208 	rsb	r2, r2, #8
 800cc00:	0092      	lsls	r2, r2, #2
 800cc02:	b570      	push	{r4, r5, r6, lr}
 800cc04:	f1c2 0620 	rsb	r6, r2, #32
 800cc08:	6843      	ldr	r3, [r0, #4]
 800cc0a:	6804      	ldr	r4, [r0, #0]
 800cc0c:	fa03 f506 	lsl.w	r5, r3, r6
 800cc10:	432c      	orrs	r4, r5
 800cc12:	40d3      	lsrs	r3, r2
 800cc14:	6004      	str	r4, [r0, #0]
 800cc16:	f840 3f04 	str.w	r3, [r0, #4]!
 800cc1a:	4288      	cmp	r0, r1
 800cc1c:	d3f4      	bcc.n	800cc08 <L_shift+0xc>
 800cc1e:	bd70      	pop	{r4, r5, r6, pc}

0800cc20 <__match>:
 800cc20:	b530      	push	{r4, r5, lr}
 800cc22:	6803      	ldr	r3, [r0, #0]
 800cc24:	3301      	adds	r3, #1
 800cc26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc2a:	b914      	cbnz	r4, 800cc32 <__match+0x12>
 800cc2c:	6003      	str	r3, [r0, #0]
 800cc2e:	2001      	movs	r0, #1
 800cc30:	bd30      	pop	{r4, r5, pc}
 800cc32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc36:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cc3a:	2d19      	cmp	r5, #25
 800cc3c:	bf98      	it	ls
 800cc3e:	3220      	addls	r2, #32
 800cc40:	42a2      	cmp	r2, r4
 800cc42:	d0f0      	beq.n	800cc26 <__match+0x6>
 800cc44:	2000      	movs	r0, #0
 800cc46:	e7f3      	b.n	800cc30 <__match+0x10>

0800cc48 <__hexnan>:
 800cc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc4c:	680b      	ldr	r3, [r1, #0]
 800cc4e:	6801      	ldr	r1, [r0, #0]
 800cc50:	115e      	asrs	r6, r3, #5
 800cc52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cc56:	f013 031f 	ands.w	r3, r3, #31
 800cc5a:	b087      	sub	sp, #28
 800cc5c:	bf18      	it	ne
 800cc5e:	3604      	addne	r6, #4
 800cc60:	2500      	movs	r5, #0
 800cc62:	1f37      	subs	r7, r6, #4
 800cc64:	4682      	mov	sl, r0
 800cc66:	4690      	mov	r8, r2
 800cc68:	9301      	str	r3, [sp, #4]
 800cc6a:	f846 5c04 	str.w	r5, [r6, #-4]
 800cc6e:	46b9      	mov	r9, r7
 800cc70:	463c      	mov	r4, r7
 800cc72:	9502      	str	r5, [sp, #8]
 800cc74:	46ab      	mov	fp, r5
 800cc76:	784a      	ldrb	r2, [r1, #1]
 800cc78:	1c4b      	adds	r3, r1, #1
 800cc7a:	9303      	str	r3, [sp, #12]
 800cc7c:	b342      	cbz	r2, 800ccd0 <__hexnan+0x88>
 800cc7e:	4610      	mov	r0, r2
 800cc80:	9105      	str	r1, [sp, #20]
 800cc82:	9204      	str	r2, [sp, #16]
 800cc84:	f7ff fd94 	bl	800c7b0 <__hexdig_fun>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	d151      	bne.n	800cd30 <__hexnan+0xe8>
 800cc8c:	9a04      	ldr	r2, [sp, #16]
 800cc8e:	9905      	ldr	r1, [sp, #20]
 800cc90:	2a20      	cmp	r2, #32
 800cc92:	d818      	bhi.n	800ccc6 <__hexnan+0x7e>
 800cc94:	9b02      	ldr	r3, [sp, #8]
 800cc96:	459b      	cmp	fp, r3
 800cc98:	dd13      	ble.n	800ccc2 <__hexnan+0x7a>
 800cc9a:	454c      	cmp	r4, r9
 800cc9c:	d206      	bcs.n	800ccac <__hexnan+0x64>
 800cc9e:	2d07      	cmp	r5, #7
 800cca0:	dc04      	bgt.n	800ccac <__hexnan+0x64>
 800cca2:	462a      	mov	r2, r5
 800cca4:	4649      	mov	r1, r9
 800cca6:	4620      	mov	r0, r4
 800cca8:	f7ff ffa8 	bl	800cbfc <L_shift>
 800ccac:	4544      	cmp	r4, r8
 800ccae:	d952      	bls.n	800cd56 <__hexnan+0x10e>
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	f1a4 0904 	sub.w	r9, r4, #4
 800ccb6:	f844 3c04 	str.w	r3, [r4, #-4]
 800ccba:	f8cd b008 	str.w	fp, [sp, #8]
 800ccbe:	464c      	mov	r4, r9
 800ccc0:	461d      	mov	r5, r3
 800ccc2:	9903      	ldr	r1, [sp, #12]
 800ccc4:	e7d7      	b.n	800cc76 <__hexnan+0x2e>
 800ccc6:	2a29      	cmp	r2, #41	@ 0x29
 800ccc8:	d157      	bne.n	800cd7a <__hexnan+0x132>
 800ccca:	3102      	adds	r1, #2
 800cccc:	f8ca 1000 	str.w	r1, [sl]
 800ccd0:	f1bb 0f00 	cmp.w	fp, #0
 800ccd4:	d051      	beq.n	800cd7a <__hexnan+0x132>
 800ccd6:	454c      	cmp	r4, r9
 800ccd8:	d206      	bcs.n	800cce8 <__hexnan+0xa0>
 800ccda:	2d07      	cmp	r5, #7
 800ccdc:	dc04      	bgt.n	800cce8 <__hexnan+0xa0>
 800ccde:	462a      	mov	r2, r5
 800cce0:	4649      	mov	r1, r9
 800cce2:	4620      	mov	r0, r4
 800cce4:	f7ff ff8a 	bl	800cbfc <L_shift>
 800cce8:	4544      	cmp	r4, r8
 800ccea:	d936      	bls.n	800cd5a <__hexnan+0x112>
 800ccec:	f1a8 0204 	sub.w	r2, r8, #4
 800ccf0:	4623      	mov	r3, r4
 800ccf2:	f853 1b04 	ldr.w	r1, [r3], #4
 800ccf6:	f842 1f04 	str.w	r1, [r2, #4]!
 800ccfa:	429f      	cmp	r7, r3
 800ccfc:	d2f9      	bcs.n	800ccf2 <__hexnan+0xaa>
 800ccfe:	1b3b      	subs	r3, r7, r4
 800cd00:	f023 0303 	bic.w	r3, r3, #3
 800cd04:	3304      	adds	r3, #4
 800cd06:	3401      	adds	r4, #1
 800cd08:	3e03      	subs	r6, #3
 800cd0a:	42b4      	cmp	r4, r6
 800cd0c:	bf88      	it	hi
 800cd0e:	2304      	movhi	r3, #4
 800cd10:	4443      	add	r3, r8
 800cd12:	2200      	movs	r2, #0
 800cd14:	f843 2b04 	str.w	r2, [r3], #4
 800cd18:	429f      	cmp	r7, r3
 800cd1a:	d2fb      	bcs.n	800cd14 <__hexnan+0xcc>
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	b91b      	cbnz	r3, 800cd28 <__hexnan+0xe0>
 800cd20:	4547      	cmp	r7, r8
 800cd22:	d128      	bne.n	800cd76 <__hexnan+0x12e>
 800cd24:	2301      	movs	r3, #1
 800cd26:	603b      	str	r3, [r7, #0]
 800cd28:	2005      	movs	r0, #5
 800cd2a:	b007      	add	sp, #28
 800cd2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd30:	3501      	adds	r5, #1
 800cd32:	2d08      	cmp	r5, #8
 800cd34:	f10b 0b01 	add.w	fp, fp, #1
 800cd38:	dd06      	ble.n	800cd48 <__hexnan+0x100>
 800cd3a:	4544      	cmp	r4, r8
 800cd3c:	d9c1      	bls.n	800ccc2 <__hexnan+0x7a>
 800cd3e:	2300      	movs	r3, #0
 800cd40:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd44:	2501      	movs	r5, #1
 800cd46:	3c04      	subs	r4, #4
 800cd48:	6822      	ldr	r2, [r4, #0]
 800cd4a:	f000 000f 	and.w	r0, r0, #15
 800cd4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cd52:	6020      	str	r0, [r4, #0]
 800cd54:	e7b5      	b.n	800ccc2 <__hexnan+0x7a>
 800cd56:	2508      	movs	r5, #8
 800cd58:	e7b3      	b.n	800ccc2 <__hexnan+0x7a>
 800cd5a:	9b01      	ldr	r3, [sp, #4]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d0dd      	beq.n	800cd1c <__hexnan+0xd4>
 800cd60:	f1c3 0320 	rsb	r3, r3, #32
 800cd64:	f04f 32ff 	mov.w	r2, #4294967295
 800cd68:	40da      	lsrs	r2, r3
 800cd6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cd6e:	4013      	ands	r3, r2
 800cd70:	f846 3c04 	str.w	r3, [r6, #-4]
 800cd74:	e7d2      	b.n	800cd1c <__hexnan+0xd4>
 800cd76:	3f04      	subs	r7, #4
 800cd78:	e7d0      	b.n	800cd1c <__hexnan+0xd4>
 800cd7a:	2004      	movs	r0, #4
 800cd7c:	e7d5      	b.n	800cd2a <__hexnan+0xe2>

0800cd7e <__ascii_mbtowc>:
 800cd7e:	b082      	sub	sp, #8
 800cd80:	b901      	cbnz	r1, 800cd84 <__ascii_mbtowc+0x6>
 800cd82:	a901      	add	r1, sp, #4
 800cd84:	b142      	cbz	r2, 800cd98 <__ascii_mbtowc+0x1a>
 800cd86:	b14b      	cbz	r3, 800cd9c <__ascii_mbtowc+0x1e>
 800cd88:	7813      	ldrb	r3, [r2, #0]
 800cd8a:	600b      	str	r3, [r1, #0]
 800cd8c:	7812      	ldrb	r2, [r2, #0]
 800cd8e:	1e10      	subs	r0, r2, #0
 800cd90:	bf18      	it	ne
 800cd92:	2001      	movne	r0, #1
 800cd94:	b002      	add	sp, #8
 800cd96:	4770      	bx	lr
 800cd98:	4610      	mov	r0, r2
 800cd9a:	e7fb      	b.n	800cd94 <__ascii_mbtowc+0x16>
 800cd9c:	f06f 0001 	mvn.w	r0, #1
 800cda0:	e7f8      	b.n	800cd94 <__ascii_mbtowc+0x16>

0800cda2 <_realloc_r>:
 800cda2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cda6:	4680      	mov	r8, r0
 800cda8:	4615      	mov	r5, r2
 800cdaa:	460c      	mov	r4, r1
 800cdac:	b921      	cbnz	r1, 800cdb8 <_realloc_r+0x16>
 800cdae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb2:	4611      	mov	r1, r2
 800cdb4:	f7fd be6c 	b.w	800aa90 <_malloc_r>
 800cdb8:	b92a      	cbnz	r2, 800cdc6 <_realloc_r+0x24>
 800cdba:	f7fd fdf5 	bl	800a9a8 <_free_r>
 800cdbe:	2400      	movs	r4, #0
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdc6:	f000 f840 	bl	800ce4a <_malloc_usable_size_r>
 800cdca:	4285      	cmp	r5, r0
 800cdcc:	4606      	mov	r6, r0
 800cdce:	d802      	bhi.n	800cdd6 <_realloc_r+0x34>
 800cdd0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cdd4:	d8f4      	bhi.n	800cdc0 <_realloc_r+0x1e>
 800cdd6:	4629      	mov	r1, r5
 800cdd8:	4640      	mov	r0, r8
 800cdda:	f7fd fe59 	bl	800aa90 <_malloc_r>
 800cdde:	4607      	mov	r7, r0
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d0ec      	beq.n	800cdbe <_realloc_r+0x1c>
 800cde4:	42b5      	cmp	r5, r6
 800cde6:	462a      	mov	r2, r5
 800cde8:	4621      	mov	r1, r4
 800cdea:	bf28      	it	cs
 800cdec:	4632      	movcs	r2, r6
 800cdee:	f7fc ff7a 	bl	8009ce6 <memcpy>
 800cdf2:	4621      	mov	r1, r4
 800cdf4:	4640      	mov	r0, r8
 800cdf6:	f7fd fdd7 	bl	800a9a8 <_free_r>
 800cdfa:	463c      	mov	r4, r7
 800cdfc:	e7e0      	b.n	800cdc0 <_realloc_r+0x1e>

0800cdfe <__ascii_wctomb>:
 800cdfe:	4603      	mov	r3, r0
 800ce00:	4608      	mov	r0, r1
 800ce02:	b141      	cbz	r1, 800ce16 <__ascii_wctomb+0x18>
 800ce04:	2aff      	cmp	r2, #255	@ 0xff
 800ce06:	d904      	bls.n	800ce12 <__ascii_wctomb+0x14>
 800ce08:	228a      	movs	r2, #138	@ 0x8a
 800ce0a:	601a      	str	r2, [r3, #0]
 800ce0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce10:	4770      	bx	lr
 800ce12:	700a      	strb	r2, [r1, #0]
 800ce14:	2001      	movs	r0, #1
 800ce16:	4770      	bx	lr

0800ce18 <fiprintf>:
 800ce18:	b40e      	push	{r1, r2, r3}
 800ce1a:	b503      	push	{r0, r1, lr}
 800ce1c:	4601      	mov	r1, r0
 800ce1e:	ab03      	add	r3, sp, #12
 800ce20:	4805      	ldr	r0, [pc, #20]	@ (800ce38 <fiprintf+0x20>)
 800ce22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce26:	6800      	ldr	r0, [r0, #0]
 800ce28:	9301      	str	r3, [sp, #4]
 800ce2a:	f000 f83f 	bl	800ceac <_vfiprintf_r>
 800ce2e:	b002      	add	sp, #8
 800ce30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce34:	b003      	add	sp, #12
 800ce36:	4770      	bx	lr
 800ce38:	2000001c 	.word	0x2000001c

0800ce3c <abort>:
 800ce3c:	b508      	push	{r3, lr}
 800ce3e:	2006      	movs	r0, #6
 800ce40:	f000 fa08 	bl	800d254 <raise>
 800ce44:	2001      	movs	r0, #1
 800ce46:	f7f4 fd6d 	bl	8001924 <_exit>

0800ce4a <_malloc_usable_size_r>:
 800ce4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce4e:	1f18      	subs	r0, r3, #4
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	bfbc      	itt	lt
 800ce54:	580b      	ldrlt	r3, [r1, r0]
 800ce56:	18c0      	addlt	r0, r0, r3
 800ce58:	4770      	bx	lr

0800ce5a <__sfputc_r>:
 800ce5a:	6893      	ldr	r3, [r2, #8]
 800ce5c:	3b01      	subs	r3, #1
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	b410      	push	{r4}
 800ce62:	6093      	str	r3, [r2, #8]
 800ce64:	da08      	bge.n	800ce78 <__sfputc_r+0x1e>
 800ce66:	6994      	ldr	r4, [r2, #24]
 800ce68:	42a3      	cmp	r3, r4
 800ce6a:	db01      	blt.n	800ce70 <__sfputc_r+0x16>
 800ce6c:	290a      	cmp	r1, #10
 800ce6e:	d103      	bne.n	800ce78 <__sfputc_r+0x1e>
 800ce70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce74:	f000 b932 	b.w	800d0dc <__swbuf_r>
 800ce78:	6813      	ldr	r3, [r2, #0]
 800ce7a:	1c58      	adds	r0, r3, #1
 800ce7c:	6010      	str	r0, [r2, #0]
 800ce7e:	7019      	strb	r1, [r3, #0]
 800ce80:	4608      	mov	r0, r1
 800ce82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce86:	4770      	bx	lr

0800ce88 <__sfputs_r>:
 800ce88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce8a:	4606      	mov	r6, r0
 800ce8c:	460f      	mov	r7, r1
 800ce8e:	4614      	mov	r4, r2
 800ce90:	18d5      	adds	r5, r2, r3
 800ce92:	42ac      	cmp	r4, r5
 800ce94:	d101      	bne.n	800ce9a <__sfputs_r+0x12>
 800ce96:	2000      	movs	r0, #0
 800ce98:	e007      	b.n	800ceaa <__sfputs_r+0x22>
 800ce9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce9e:	463a      	mov	r2, r7
 800cea0:	4630      	mov	r0, r6
 800cea2:	f7ff ffda 	bl	800ce5a <__sfputc_r>
 800cea6:	1c43      	adds	r3, r0, #1
 800cea8:	d1f3      	bne.n	800ce92 <__sfputs_r+0xa>
 800ceaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ceac <_vfiprintf_r>:
 800ceac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb0:	460d      	mov	r5, r1
 800ceb2:	b09d      	sub	sp, #116	@ 0x74
 800ceb4:	4614      	mov	r4, r2
 800ceb6:	4698      	mov	r8, r3
 800ceb8:	4606      	mov	r6, r0
 800ceba:	b118      	cbz	r0, 800cec4 <_vfiprintf_r+0x18>
 800cebc:	6a03      	ldr	r3, [r0, #32]
 800cebe:	b90b      	cbnz	r3, 800cec4 <_vfiprintf_r+0x18>
 800cec0:	f7fc fdf8 	bl	8009ab4 <__sinit>
 800cec4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cec6:	07d9      	lsls	r1, r3, #31
 800cec8:	d405      	bmi.n	800ced6 <_vfiprintf_r+0x2a>
 800ceca:	89ab      	ldrh	r3, [r5, #12]
 800cecc:	059a      	lsls	r2, r3, #22
 800cece:	d402      	bmi.n	800ced6 <_vfiprintf_r+0x2a>
 800ced0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ced2:	f7fc ff06 	bl	8009ce2 <__retarget_lock_acquire_recursive>
 800ced6:	89ab      	ldrh	r3, [r5, #12]
 800ced8:	071b      	lsls	r3, r3, #28
 800ceda:	d501      	bpl.n	800cee0 <_vfiprintf_r+0x34>
 800cedc:	692b      	ldr	r3, [r5, #16]
 800cede:	b99b      	cbnz	r3, 800cf08 <_vfiprintf_r+0x5c>
 800cee0:	4629      	mov	r1, r5
 800cee2:	4630      	mov	r0, r6
 800cee4:	f000 f938 	bl	800d158 <__swsetup_r>
 800cee8:	b170      	cbz	r0, 800cf08 <_vfiprintf_r+0x5c>
 800ceea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ceec:	07dc      	lsls	r4, r3, #31
 800ceee:	d504      	bpl.n	800cefa <_vfiprintf_r+0x4e>
 800cef0:	f04f 30ff 	mov.w	r0, #4294967295
 800cef4:	b01d      	add	sp, #116	@ 0x74
 800cef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cefa:	89ab      	ldrh	r3, [r5, #12]
 800cefc:	0598      	lsls	r0, r3, #22
 800cefe:	d4f7      	bmi.n	800cef0 <_vfiprintf_r+0x44>
 800cf00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf02:	f7fc feef 	bl	8009ce4 <__retarget_lock_release_recursive>
 800cf06:	e7f3      	b.n	800cef0 <_vfiprintf_r+0x44>
 800cf08:	2300      	movs	r3, #0
 800cf0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf0c:	2320      	movs	r3, #32
 800cf0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf12:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf16:	2330      	movs	r3, #48	@ 0x30
 800cf18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d0c8 <_vfiprintf_r+0x21c>
 800cf1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf20:	f04f 0901 	mov.w	r9, #1
 800cf24:	4623      	mov	r3, r4
 800cf26:	469a      	mov	sl, r3
 800cf28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf2c:	b10a      	cbz	r2, 800cf32 <_vfiprintf_r+0x86>
 800cf2e:	2a25      	cmp	r2, #37	@ 0x25
 800cf30:	d1f9      	bne.n	800cf26 <_vfiprintf_r+0x7a>
 800cf32:	ebba 0b04 	subs.w	fp, sl, r4
 800cf36:	d00b      	beq.n	800cf50 <_vfiprintf_r+0xa4>
 800cf38:	465b      	mov	r3, fp
 800cf3a:	4622      	mov	r2, r4
 800cf3c:	4629      	mov	r1, r5
 800cf3e:	4630      	mov	r0, r6
 800cf40:	f7ff ffa2 	bl	800ce88 <__sfputs_r>
 800cf44:	3001      	adds	r0, #1
 800cf46:	f000 80a7 	beq.w	800d098 <_vfiprintf_r+0x1ec>
 800cf4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf4c:	445a      	add	r2, fp
 800cf4e:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf50:	f89a 3000 	ldrb.w	r3, [sl]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	f000 809f 	beq.w	800d098 <_vfiprintf_r+0x1ec>
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf64:	f10a 0a01 	add.w	sl, sl, #1
 800cf68:	9304      	str	r3, [sp, #16]
 800cf6a:	9307      	str	r3, [sp, #28]
 800cf6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf70:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf72:	4654      	mov	r4, sl
 800cf74:	2205      	movs	r2, #5
 800cf76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf7a:	4853      	ldr	r0, [pc, #332]	@ (800d0c8 <_vfiprintf_r+0x21c>)
 800cf7c:	f7f3 f950 	bl	8000220 <memchr>
 800cf80:	9a04      	ldr	r2, [sp, #16]
 800cf82:	b9d8      	cbnz	r0, 800cfbc <_vfiprintf_r+0x110>
 800cf84:	06d1      	lsls	r1, r2, #27
 800cf86:	bf44      	itt	mi
 800cf88:	2320      	movmi	r3, #32
 800cf8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf8e:	0713      	lsls	r3, r2, #28
 800cf90:	bf44      	itt	mi
 800cf92:	232b      	movmi	r3, #43	@ 0x2b
 800cf94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf98:	f89a 3000 	ldrb.w	r3, [sl]
 800cf9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf9e:	d015      	beq.n	800cfcc <_vfiprintf_r+0x120>
 800cfa0:	9a07      	ldr	r2, [sp, #28]
 800cfa2:	4654      	mov	r4, sl
 800cfa4:	2000      	movs	r0, #0
 800cfa6:	f04f 0c0a 	mov.w	ip, #10
 800cfaa:	4621      	mov	r1, r4
 800cfac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfb0:	3b30      	subs	r3, #48	@ 0x30
 800cfb2:	2b09      	cmp	r3, #9
 800cfb4:	d94b      	bls.n	800d04e <_vfiprintf_r+0x1a2>
 800cfb6:	b1b0      	cbz	r0, 800cfe6 <_vfiprintf_r+0x13a>
 800cfb8:	9207      	str	r2, [sp, #28]
 800cfba:	e014      	b.n	800cfe6 <_vfiprintf_r+0x13a>
 800cfbc:	eba0 0308 	sub.w	r3, r0, r8
 800cfc0:	fa09 f303 	lsl.w	r3, r9, r3
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	9304      	str	r3, [sp, #16]
 800cfc8:	46a2      	mov	sl, r4
 800cfca:	e7d2      	b.n	800cf72 <_vfiprintf_r+0xc6>
 800cfcc:	9b03      	ldr	r3, [sp, #12]
 800cfce:	1d19      	adds	r1, r3, #4
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	9103      	str	r1, [sp, #12]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	bfbb      	ittet	lt
 800cfd8:	425b      	neglt	r3, r3
 800cfda:	f042 0202 	orrlt.w	r2, r2, #2
 800cfde:	9307      	strge	r3, [sp, #28]
 800cfe0:	9307      	strlt	r3, [sp, #28]
 800cfe2:	bfb8      	it	lt
 800cfe4:	9204      	strlt	r2, [sp, #16]
 800cfe6:	7823      	ldrb	r3, [r4, #0]
 800cfe8:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfea:	d10a      	bne.n	800d002 <_vfiprintf_r+0x156>
 800cfec:	7863      	ldrb	r3, [r4, #1]
 800cfee:	2b2a      	cmp	r3, #42	@ 0x2a
 800cff0:	d132      	bne.n	800d058 <_vfiprintf_r+0x1ac>
 800cff2:	9b03      	ldr	r3, [sp, #12]
 800cff4:	1d1a      	adds	r2, r3, #4
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	9203      	str	r2, [sp, #12]
 800cffa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cffe:	3402      	adds	r4, #2
 800d000:	9305      	str	r3, [sp, #20]
 800d002:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d0d8 <_vfiprintf_r+0x22c>
 800d006:	7821      	ldrb	r1, [r4, #0]
 800d008:	2203      	movs	r2, #3
 800d00a:	4650      	mov	r0, sl
 800d00c:	f7f3 f908 	bl	8000220 <memchr>
 800d010:	b138      	cbz	r0, 800d022 <_vfiprintf_r+0x176>
 800d012:	9b04      	ldr	r3, [sp, #16]
 800d014:	eba0 000a 	sub.w	r0, r0, sl
 800d018:	2240      	movs	r2, #64	@ 0x40
 800d01a:	4082      	lsls	r2, r0
 800d01c:	4313      	orrs	r3, r2
 800d01e:	3401      	adds	r4, #1
 800d020:	9304      	str	r3, [sp, #16]
 800d022:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d026:	4829      	ldr	r0, [pc, #164]	@ (800d0cc <_vfiprintf_r+0x220>)
 800d028:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d02c:	2206      	movs	r2, #6
 800d02e:	f7f3 f8f7 	bl	8000220 <memchr>
 800d032:	2800      	cmp	r0, #0
 800d034:	d03f      	beq.n	800d0b6 <_vfiprintf_r+0x20a>
 800d036:	4b26      	ldr	r3, [pc, #152]	@ (800d0d0 <_vfiprintf_r+0x224>)
 800d038:	bb1b      	cbnz	r3, 800d082 <_vfiprintf_r+0x1d6>
 800d03a:	9b03      	ldr	r3, [sp, #12]
 800d03c:	3307      	adds	r3, #7
 800d03e:	f023 0307 	bic.w	r3, r3, #7
 800d042:	3308      	adds	r3, #8
 800d044:	9303      	str	r3, [sp, #12]
 800d046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d048:	443b      	add	r3, r7
 800d04a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d04c:	e76a      	b.n	800cf24 <_vfiprintf_r+0x78>
 800d04e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d052:	460c      	mov	r4, r1
 800d054:	2001      	movs	r0, #1
 800d056:	e7a8      	b.n	800cfaa <_vfiprintf_r+0xfe>
 800d058:	2300      	movs	r3, #0
 800d05a:	3401      	adds	r4, #1
 800d05c:	9305      	str	r3, [sp, #20]
 800d05e:	4619      	mov	r1, r3
 800d060:	f04f 0c0a 	mov.w	ip, #10
 800d064:	4620      	mov	r0, r4
 800d066:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d06a:	3a30      	subs	r2, #48	@ 0x30
 800d06c:	2a09      	cmp	r2, #9
 800d06e:	d903      	bls.n	800d078 <_vfiprintf_r+0x1cc>
 800d070:	2b00      	cmp	r3, #0
 800d072:	d0c6      	beq.n	800d002 <_vfiprintf_r+0x156>
 800d074:	9105      	str	r1, [sp, #20]
 800d076:	e7c4      	b.n	800d002 <_vfiprintf_r+0x156>
 800d078:	fb0c 2101 	mla	r1, ip, r1, r2
 800d07c:	4604      	mov	r4, r0
 800d07e:	2301      	movs	r3, #1
 800d080:	e7f0      	b.n	800d064 <_vfiprintf_r+0x1b8>
 800d082:	ab03      	add	r3, sp, #12
 800d084:	9300      	str	r3, [sp, #0]
 800d086:	462a      	mov	r2, r5
 800d088:	4b12      	ldr	r3, [pc, #72]	@ (800d0d4 <_vfiprintf_r+0x228>)
 800d08a:	a904      	add	r1, sp, #16
 800d08c:	4630      	mov	r0, r6
 800d08e:	f7fb feb9 	bl	8008e04 <_printf_float>
 800d092:	4607      	mov	r7, r0
 800d094:	1c78      	adds	r0, r7, #1
 800d096:	d1d6      	bne.n	800d046 <_vfiprintf_r+0x19a>
 800d098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d09a:	07d9      	lsls	r1, r3, #31
 800d09c:	d405      	bmi.n	800d0aa <_vfiprintf_r+0x1fe>
 800d09e:	89ab      	ldrh	r3, [r5, #12]
 800d0a0:	059a      	lsls	r2, r3, #22
 800d0a2:	d402      	bmi.n	800d0aa <_vfiprintf_r+0x1fe>
 800d0a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0a6:	f7fc fe1d 	bl	8009ce4 <__retarget_lock_release_recursive>
 800d0aa:	89ab      	ldrh	r3, [r5, #12]
 800d0ac:	065b      	lsls	r3, r3, #25
 800d0ae:	f53f af1f 	bmi.w	800cef0 <_vfiprintf_r+0x44>
 800d0b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0b4:	e71e      	b.n	800cef4 <_vfiprintf_r+0x48>
 800d0b6:	ab03      	add	r3, sp, #12
 800d0b8:	9300      	str	r3, [sp, #0]
 800d0ba:	462a      	mov	r2, r5
 800d0bc:	4b05      	ldr	r3, [pc, #20]	@ (800d0d4 <_vfiprintf_r+0x228>)
 800d0be:	a904      	add	r1, sp, #16
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	f7fc f937 	bl	8009334 <_printf_i>
 800d0c6:	e7e4      	b.n	800d092 <_vfiprintf_r+0x1e6>
 800d0c8:	0800d801 	.word	0x0800d801
 800d0cc:	0800d80b 	.word	0x0800d80b
 800d0d0:	08008e05 	.word	0x08008e05
 800d0d4:	0800ce89 	.word	0x0800ce89
 800d0d8:	0800d807 	.word	0x0800d807

0800d0dc <__swbuf_r>:
 800d0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0de:	460e      	mov	r6, r1
 800d0e0:	4614      	mov	r4, r2
 800d0e2:	4605      	mov	r5, r0
 800d0e4:	b118      	cbz	r0, 800d0ee <__swbuf_r+0x12>
 800d0e6:	6a03      	ldr	r3, [r0, #32]
 800d0e8:	b90b      	cbnz	r3, 800d0ee <__swbuf_r+0x12>
 800d0ea:	f7fc fce3 	bl	8009ab4 <__sinit>
 800d0ee:	69a3      	ldr	r3, [r4, #24]
 800d0f0:	60a3      	str	r3, [r4, #8]
 800d0f2:	89a3      	ldrh	r3, [r4, #12]
 800d0f4:	071a      	lsls	r2, r3, #28
 800d0f6:	d501      	bpl.n	800d0fc <__swbuf_r+0x20>
 800d0f8:	6923      	ldr	r3, [r4, #16]
 800d0fa:	b943      	cbnz	r3, 800d10e <__swbuf_r+0x32>
 800d0fc:	4621      	mov	r1, r4
 800d0fe:	4628      	mov	r0, r5
 800d100:	f000 f82a 	bl	800d158 <__swsetup_r>
 800d104:	b118      	cbz	r0, 800d10e <__swbuf_r+0x32>
 800d106:	f04f 37ff 	mov.w	r7, #4294967295
 800d10a:	4638      	mov	r0, r7
 800d10c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d10e:	6823      	ldr	r3, [r4, #0]
 800d110:	6922      	ldr	r2, [r4, #16]
 800d112:	1a98      	subs	r0, r3, r2
 800d114:	6963      	ldr	r3, [r4, #20]
 800d116:	b2f6      	uxtb	r6, r6
 800d118:	4283      	cmp	r3, r0
 800d11a:	4637      	mov	r7, r6
 800d11c:	dc05      	bgt.n	800d12a <__swbuf_r+0x4e>
 800d11e:	4621      	mov	r1, r4
 800d120:	4628      	mov	r0, r5
 800d122:	f7ff fa53 	bl	800c5cc <_fflush_r>
 800d126:	2800      	cmp	r0, #0
 800d128:	d1ed      	bne.n	800d106 <__swbuf_r+0x2a>
 800d12a:	68a3      	ldr	r3, [r4, #8]
 800d12c:	3b01      	subs	r3, #1
 800d12e:	60a3      	str	r3, [r4, #8]
 800d130:	6823      	ldr	r3, [r4, #0]
 800d132:	1c5a      	adds	r2, r3, #1
 800d134:	6022      	str	r2, [r4, #0]
 800d136:	701e      	strb	r6, [r3, #0]
 800d138:	6962      	ldr	r2, [r4, #20]
 800d13a:	1c43      	adds	r3, r0, #1
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d004      	beq.n	800d14a <__swbuf_r+0x6e>
 800d140:	89a3      	ldrh	r3, [r4, #12]
 800d142:	07db      	lsls	r3, r3, #31
 800d144:	d5e1      	bpl.n	800d10a <__swbuf_r+0x2e>
 800d146:	2e0a      	cmp	r6, #10
 800d148:	d1df      	bne.n	800d10a <__swbuf_r+0x2e>
 800d14a:	4621      	mov	r1, r4
 800d14c:	4628      	mov	r0, r5
 800d14e:	f7ff fa3d 	bl	800c5cc <_fflush_r>
 800d152:	2800      	cmp	r0, #0
 800d154:	d0d9      	beq.n	800d10a <__swbuf_r+0x2e>
 800d156:	e7d6      	b.n	800d106 <__swbuf_r+0x2a>

0800d158 <__swsetup_r>:
 800d158:	b538      	push	{r3, r4, r5, lr}
 800d15a:	4b29      	ldr	r3, [pc, #164]	@ (800d200 <__swsetup_r+0xa8>)
 800d15c:	4605      	mov	r5, r0
 800d15e:	6818      	ldr	r0, [r3, #0]
 800d160:	460c      	mov	r4, r1
 800d162:	b118      	cbz	r0, 800d16c <__swsetup_r+0x14>
 800d164:	6a03      	ldr	r3, [r0, #32]
 800d166:	b90b      	cbnz	r3, 800d16c <__swsetup_r+0x14>
 800d168:	f7fc fca4 	bl	8009ab4 <__sinit>
 800d16c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d170:	0719      	lsls	r1, r3, #28
 800d172:	d422      	bmi.n	800d1ba <__swsetup_r+0x62>
 800d174:	06da      	lsls	r2, r3, #27
 800d176:	d407      	bmi.n	800d188 <__swsetup_r+0x30>
 800d178:	2209      	movs	r2, #9
 800d17a:	602a      	str	r2, [r5, #0]
 800d17c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d180:	81a3      	strh	r3, [r4, #12]
 800d182:	f04f 30ff 	mov.w	r0, #4294967295
 800d186:	e033      	b.n	800d1f0 <__swsetup_r+0x98>
 800d188:	0758      	lsls	r0, r3, #29
 800d18a:	d512      	bpl.n	800d1b2 <__swsetup_r+0x5a>
 800d18c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d18e:	b141      	cbz	r1, 800d1a2 <__swsetup_r+0x4a>
 800d190:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d194:	4299      	cmp	r1, r3
 800d196:	d002      	beq.n	800d19e <__swsetup_r+0x46>
 800d198:	4628      	mov	r0, r5
 800d19a:	f7fd fc05 	bl	800a9a8 <_free_r>
 800d19e:	2300      	movs	r3, #0
 800d1a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1a2:	89a3      	ldrh	r3, [r4, #12]
 800d1a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d1a8:	81a3      	strh	r3, [r4, #12]
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	6063      	str	r3, [r4, #4]
 800d1ae:	6923      	ldr	r3, [r4, #16]
 800d1b0:	6023      	str	r3, [r4, #0]
 800d1b2:	89a3      	ldrh	r3, [r4, #12]
 800d1b4:	f043 0308 	orr.w	r3, r3, #8
 800d1b8:	81a3      	strh	r3, [r4, #12]
 800d1ba:	6923      	ldr	r3, [r4, #16]
 800d1bc:	b94b      	cbnz	r3, 800d1d2 <__swsetup_r+0x7a>
 800d1be:	89a3      	ldrh	r3, [r4, #12]
 800d1c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d1c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1c8:	d003      	beq.n	800d1d2 <__swsetup_r+0x7a>
 800d1ca:	4621      	mov	r1, r4
 800d1cc:	4628      	mov	r0, r5
 800d1ce:	f000 f883 	bl	800d2d8 <__smakebuf_r>
 800d1d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1d6:	f013 0201 	ands.w	r2, r3, #1
 800d1da:	d00a      	beq.n	800d1f2 <__swsetup_r+0x9a>
 800d1dc:	2200      	movs	r2, #0
 800d1de:	60a2      	str	r2, [r4, #8]
 800d1e0:	6962      	ldr	r2, [r4, #20]
 800d1e2:	4252      	negs	r2, r2
 800d1e4:	61a2      	str	r2, [r4, #24]
 800d1e6:	6922      	ldr	r2, [r4, #16]
 800d1e8:	b942      	cbnz	r2, 800d1fc <__swsetup_r+0xa4>
 800d1ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d1ee:	d1c5      	bne.n	800d17c <__swsetup_r+0x24>
 800d1f0:	bd38      	pop	{r3, r4, r5, pc}
 800d1f2:	0799      	lsls	r1, r3, #30
 800d1f4:	bf58      	it	pl
 800d1f6:	6962      	ldrpl	r2, [r4, #20]
 800d1f8:	60a2      	str	r2, [r4, #8]
 800d1fa:	e7f4      	b.n	800d1e6 <__swsetup_r+0x8e>
 800d1fc:	2000      	movs	r0, #0
 800d1fe:	e7f7      	b.n	800d1f0 <__swsetup_r+0x98>
 800d200:	2000001c 	.word	0x2000001c

0800d204 <_raise_r>:
 800d204:	291f      	cmp	r1, #31
 800d206:	b538      	push	{r3, r4, r5, lr}
 800d208:	4605      	mov	r5, r0
 800d20a:	460c      	mov	r4, r1
 800d20c:	d904      	bls.n	800d218 <_raise_r+0x14>
 800d20e:	2316      	movs	r3, #22
 800d210:	6003      	str	r3, [r0, #0]
 800d212:	f04f 30ff 	mov.w	r0, #4294967295
 800d216:	bd38      	pop	{r3, r4, r5, pc}
 800d218:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d21a:	b112      	cbz	r2, 800d222 <_raise_r+0x1e>
 800d21c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d220:	b94b      	cbnz	r3, 800d236 <_raise_r+0x32>
 800d222:	4628      	mov	r0, r5
 800d224:	f000 f830 	bl	800d288 <_getpid_r>
 800d228:	4622      	mov	r2, r4
 800d22a:	4601      	mov	r1, r0
 800d22c:	4628      	mov	r0, r5
 800d22e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d232:	f000 b817 	b.w	800d264 <_kill_r>
 800d236:	2b01      	cmp	r3, #1
 800d238:	d00a      	beq.n	800d250 <_raise_r+0x4c>
 800d23a:	1c59      	adds	r1, r3, #1
 800d23c:	d103      	bne.n	800d246 <_raise_r+0x42>
 800d23e:	2316      	movs	r3, #22
 800d240:	6003      	str	r3, [r0, #0]
 800d242:	2001      	movs	r0, #1
 800d244:	e7e7      	b.n	800d216 <_raise_r+0x12>
 800d246:	2100      	movs	r1, #0
 800d248:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d24c:	4620      	mov	r0, r4
 800d24e:	4798      	blx	r3
 800d250:	2000      	movs	r0, #0
 800d252:	e7e0      	b.n	800d216 <_raise_r+0x12>

0800d254 <raise>:
 800d254:	4b02      	ldr	r3, [pc, #8]	@ (800d260 <raise+0xc>)
 800d256:	4601      	mov	r1, r0
 800d258:	6818      	ldr	r0, [r3, #0]
 800d25a:	f7ff bfd3 	b.w	800d204 <_raise_r>
 800d25e:	bf00      	nop
 800d260:	2000001c 	.word	0x2000001c

0800d264 <_kill_r>:
 800d264:	b538      	push	{r3, r4, r5, lr}
 800d266:	4d07      	ldr	r5, [pc, #28]	@ (800d284 <_kill_r+0x20>)
 800d268:	2300      	movs	r3, #0
 800d26a:	4604      	mov	r4, r0
 800d26c:	4608      	mov	r0, r1
 800d26e:	4611      	mov	r1, r2
 800d270:	602b      	str	r3, [r5, #0]
 800d272:	f7f4 fb47 	bl	8001904 <_kill>
 800d276:	1c43      	adds	r3, r0, #1
 800d278:	d102      	bne.n	800d280 <_kill_r+0x1c>
 800d27a:	682b      	ldr	r3, [r5, #0]
 800d27c:	b103      	cbz	r3, 800d280 <_kill_r+0x1c>
 800d27e:	6023      	str	r3, [r4, #0]
 800d280:	bd38      	pop	{r3, r4, r5, pc}
 800d282:	bf00      	nop
 800d284:	20001418 	.word	0x20001418

0800d288 <_getpid_r>:
 800d288:	f7f4 bb34 	b.w	80018f4 <_getpid>

0800d28c <__swhatbuf_r>:
 800d28c:	b570      	push	{r4, r5, r6, lr}
 800d28e:	460c      	mov	r4, r1
 800d290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d294:	2900      	cmp	r1, #0
 800d296:	b096      	sub	sp, #88	@ 0x58
 800d298:	4615      	mov	r5, r2
 800d29a:	461e      	mov	r6, r3
 800d29c:	da0d      	bge.n	800d2ba <__swhatbuf_r+0x2e>
 800d29e:	89a3      	ldrh	r3, [r4, #12]
 800d2a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d2a4:	f04f 0100 	mov.w	r1, #0
 800d2a8:	bf14      	ite	ne
 800d2aa:	2340      	movne	r3, #64	@ 0x40
 800d2ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d2b0:	2000      	movs	r0, #0
 800d2b2:	6031      	str	r1, [r6, #0]
 800d2b4:	602b      	str	r3, [r5, #0]
 800d2b6:	b016      	add	sp, #88	@ 0x58
 800d2b8:	bd70      	pop	{r4, r5, r6, pc}
 800d2ba:	466a      	mov	r2, sp
 800d2bc:	f000 f848 	bl	800d350 <_fstat_r>
 800d2c0:	2800      	cmp	r0, #0
 800d2c2:	dbec      	blt.n	800d29e <__swhatbuf_r+0x12>
 800d2c4:	9901      	ldr	r1, [sp, #4]
 800d2c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d2ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d2ce:	4259      	negs	r1, r3
 800d2d0:	4159      	adcs	r1, r3
 800d2d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2d6:	e7eb      	b.n	800d2b0 <__swhatbuf_r+0x24>

0800d2d8 <__smakebuf_r>:
 800d2d8:	898b      	ldrh	r3, [r1, #12]
 800d2da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2dc:	079d      	lsls	r5, r3, #30
 800d2de:	4606      	mov	r6, r0
 800d2e0:	460c      	mov	r4, r1
 800d2e2:	d507      	bpl.n	800d2f4 <__smakebuf_r+0x1c>
 800d2e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d2e8:	6023      	str	r3, [r4, #0]
 800d2ea:	6123      	str	r3, [r4, #16]
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	6163      	str	r3, [r4, #20]
 800d2f0:	b003      	add	sp, #12
 800d2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2f4:	ab01      	add	r3, sp, #4
 800d2f6:	466a      	mov	r2, sp
 800d2f8:	f7ff ffc8 	bl	800d28c <__swhatbuf_r>
 800d2fc:	9f00      	ldr	r7, [sp, #0]
 800d2fe:	4605      	mov	r5, r0
 800d300:	4639      	mov	r1, r7
 800d302:	4630      	mov	r0, r6
 800d304:	f7fd fbc4 	bl	800aa90 <_malloc_r>
 800d308:	b948      	cbnz	r0, 800d31e <__smakebuf_r+0x46>
 800d30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d30e:	059a      	lsls	r2, r3, #22
 800d310:	d4ee      	bmi.n	800d2f0 <__smakebuf_r+0x18>
 800d312:	f023 0303 	bic.w	r3, r3, #3
 800d316:	f043 0302 	orr.w	r3, r3, #2
 800d31a:	81a3      	strh	r3, [r4, #12]
 800d31c:	e7e2      	b.n	800d2e4 <__smakebuf_r+0xc>
 800d31e:	89a3      	ldrh	r3, [r4, #12]
 800d320:	6020      	str	r0, [r4, #0]
 800d322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d326:	81a3      	strh	r3, [r4, #12]
 800d328:	9b01      	ldr	r3, [sp, #4]
 800d32a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d32e:	b15b      	cbz	r3, 800d348 <__smakebuf_r+0x70>
 800d330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d334:	4630      	mov	r0, r6
 800d336:	f000 f81d 	bl	800d374 <_isatty_r>
 800d33a:	b128      	cbz	r0, 800d348 <__smakebuf_r+0x70>
 800d33c:	89a3      	ldrh	r3, [r4, #12]
 800d33e:	f023 0303 	bic.w	r3, r3, #3
 800d342:	f043 0301 	orr.w	r3, r3, #1
 800d346:	81a3      	strh	r3, [r4, #12]
 800d348:	89a3      	ldrh	r3, [r4, #12]
 800d34a:	431d      	orrs	r5, r3
 800d34c:	81a5      	strh	r5, [r4, #12]
 800d34e:	e7cf      	b.n	800d2f0 <__smakebuf_r+0x18>

0800d350 <_fstat_r>:
 800d350:	b538      	push	{r3, r4, r5, lr}
 800d352:	4d07      	ldr	r5, [pc, #28]	@ (800d370 <_fstat_r+0x20>)
 800d354:	2300      	movs	r3, #0
 800d356:	4604      	mov	r4, r0
 800d358:	4608      	mov	r0, r1
 800d35a:	4611      	mov	r1, r2
 800d35c:	602b      	str	r3, [r5, #0]
 800d35e:	f7f4 fb31 	bl	80019c4 <_fstat>
 800d362:	1c43      	adds	r3, r0, #1
 800d364:	d102      	bne.n	800d36c <_fstat_r+0x1c>
 800d366:	682b      	ldr	r3, [r5, #0]
 800d368:	b103      	cbz	r3, 800d36c <_fstat_r+0x1c>
 800d36a:	6023      	str	r3, [r4, #0]
 800d36c:	bd38      	pop	{r3, r4, r5, pc}
 800d36e:	bf00      	nop
 800d370:	20001418 	.word	0x20001418

0800d374 <_isatty_r>:
 800d374:	b538      	push	{r3, r4, r5, lr}
 800d376:	4d06      	ldr	r5, [pc, #24]	@ (800d390 <_isatty_r+0x1c>)
 800d378:	2300      	movs	r3, #0
 800d37a:	4604      	mov	r4, r0
 800d37c:	4608      	mov	r0, r1
 800d37e:	602b      	str	r3, [r5, #0]
 800d380:	f7f4 fb30 	bl	80019e4 <_isatty>
 800d384:	1c43      	adds	r3, r0, #1
 800d386:	d102      	bne.n	800d38e <_isatty_r+0x1a>
 800d388:	682b      	ldr	r3, [r5, #0]
 800d38a:	b103      	cbz	r3, 800d38e <_isatty_r+0x1a>
 800d38c:	6023      	str	r3, [r4, #0]
 800d38e:	bd38      	pop	{r3, r4, r5, pc}
 800d390:	20001418 	.word	0x20001418

0800d394 <_init>:
 800d394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d396:	bf00      	nop
 800d398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d39a:	bc08      	pop	{r3}
 800d39c:	469e      	mov	lr, r3
 800d39e:	4770      	bx	lr

0800d3a0 <_fini>:
 800d3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3a2:	bf00      	nop
 800d3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3a6:	bc08      	pop	{r3}
 800d3a8:	469e      	mov	lr, r3
 800d3aa:	4770      	bx	lr
