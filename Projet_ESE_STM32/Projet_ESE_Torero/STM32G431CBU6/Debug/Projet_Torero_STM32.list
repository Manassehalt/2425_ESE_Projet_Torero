
Projet_Torero_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b97c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  0800bb60  0800bb60  0000cb60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c040  0800c040  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c040  0800c040  0000d040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c048  0800c048  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c048  0800c048  0000d048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c04c  0800c04c  0000d04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c050  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  200001d4  0800c224  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  0800c224  0000e66c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a71  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003416  00000000  00000000  00027c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  0002b090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001241  00000000  00000000  0002c818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022591  00000000  00000000  0002da59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be8b  00000000  00000000  0004ffea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfa98  00000000  00000000  0006be75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b90d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079c0  00000000  00000000  0014b950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  00153310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bb44 	.word	0x0800bb44

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800bb44 	.word	0x0800bb44

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f007 f9a2 	bl	8008396 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001054:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800105a:	4b30      	ldr	r3, [pc, #192]	@ (800111c <MX_ADC1_Init+0xe8>)
 800105c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <MX_ADC1_Init+0xe8>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001074:	4b29      	ldr	r3, [pc, #164]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b28      	ldr	r3, [pc, #160]	@ (800111c <MX_ADC1_Init+0xe8>)
 800107c:	2204      	movs	r2, #4
 800107e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001088:	2200      	movs	r2, #0
 800108a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <MX_ADC1_Init+0xe8>)
 800108e:	2201      	movs	r2, #1
 8001090:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010bc:	4817      	ldr	r0, [pc, #92]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010be:	f001 fb75 	bl	80027ac <HAL_ADC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010c8:	f000 f9a8 	bl	800141c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d4:	4619      	mov	r1, r3
 80010d6:	4811      	ldr	r0, [pc, #68]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010d8:	f002 f902 	bl	80032e0 <HAL_ADCEx_MultiModeConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010e2:	f000 f99b 	bl	800141c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_ADC1_Init+0xec>)
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ea:	2306      	movs	r3, #6
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f2:	237f      	movs	r3, #127	@ 0x7f
 80010f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f6:	2304      	movs	r3, #4
 80010f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001104:	f001 fcd6 	bl	8002ab4 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800110e:	f000 f985 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3730      	adds	r7, #48	@ 0x30
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001f0 	.word	0x200001f0
 8001120:	32601000 	.word	0x32601000

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09a      	sub	sp, #104	@ 0x68
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	2244      	movs	r2, #68	@ 0x44
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f007 f926 	bl	8008396 <memset>
  if(adcHandle->Instance==ADC1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001152:	d133      	bne.n	80011bc <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001154:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001158:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800115a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800115e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4618      	mov	r0, r3
 8001166:	f003 f9bb 	bl	80044e0 <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001170:	f000 f954 	bl	800141c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 800117a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001190:	4a0c      	ldr	r2, [pc, #48]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 8001192:	f043 0302 	orr.w	r3, r3, #2
 8001196:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001198:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC1_IN15_AN_CB_G_Pin|ADC1_IN12_AN_CB_D_Pin;
 80011a4:	2303      	movs	r3, #3
 80011a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a8:	2303      	movs	r3, #3
 80011aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b4:	4619      	mov	r1, r3
 80011b6:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 80011b8:	f002 fa1a 	bl	80035f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011bc:	bf00      	nop
 80011be:	3768      	adds	r7, #104	@ 0x68
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021000 	.word	0x40021000
 80011c8:	48000400 	.word	0x48000400

080011cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	@ 0x28
 80011d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	4b50      	ldr	r3, [pc, #320]	@ (8001324 <MX_GPIO_Init+0x158>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	4a4f      	ldr	r2, [pc, #316]	@ (8001324 <MX_GPIO_Init+0x158>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001324 <MX_GPIO_Init+0x158>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001324 <MX_GPIO_Init+0x158>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	4a49      	ldr	r2, [pc, #292]	@ (8001324 <MX_GPIO_Init+0x158>)
 8001200:	f043 0320 	orr.w	r3, r3, #32
 8001204:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001206:	4b47      	ldr	r3, [pc, #284]	@ (8001324 <MX_GPIO_Init+0x158>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	f003 0320 	and.w	r3, r3, #32
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001212:	4b44      	ldr	r3, [pc, #272]	@ (8001324 <MX_GPIO_Init+0x158>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	4a43      	ldr	r2, [pc, #268]	@ (8001324 <MX_GPIO_Init+0x158>)
 8001218:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800121c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800121e:	4b41      	ldr	r3, [pc, #260]	@ (8001324 <MX_GPIO_Init+0x158>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	4b3e      	ldr	r3, [pc, #248]	@ (8001324 <MX_GPIO_Init+0x158>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	4a3d      	ldr	r2, [pc, #244]	@ (8001324 <MX_GPIO_Init+0x158>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001236:	4b3b      	ldr	r3, [pc, #236]	@ (8001324 <MX_GPIO_Init+0x158>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	4b38      	ldr	r3, [pc, #224]	@ (8001324 <MX_GPIO_Init+0x158>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	4a37      	ldr	r2, [pc, #220]	@ (8001324 <MX_GPIO_Init+0x158>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124e:	4b35      	ldr	r3, [pc, #212]	@ (8001324 <MX_GPIO_Init+0x158>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INT2_ACC_Pin|LED_SE_Pin|LED_SW_Pin|Status_LED_Pin
 800125a:	2200      	movs	r2, #0
 800125c:	f642 4150 	movw	r1, #11344	@ 0x2c50
 8001260:	4831      	ldr	r0, [pc, #196]	@ (8001328 <MX_GPIO_Init+0x15c>)
 8001262:	f002 fb47 	bl	80038f4 <HAL_GPIO_WritePin>
                          |Status_LED_debbug_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_SET);
 8001266:	2201      	movs	r2, #1
 8001268:	2120      	movs	r1, #32
 800126a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126e:	f002 fb41 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_NE_Pin|INT1_ACC_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	f248 4180 	movw	r1, #33920	@ 0x8480
 8001278:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127c:	f002 fb3a 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 8001280:	2200      	movs	r2, #0
 8001282:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 8001286:	4829      	ldr	r0, [pc, #164]	@ (800132c <MX_GPIO_Init+0x160>)
 8001288:	f002 fb34 	bl	80038f4 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_S_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = INT2_ACC_Pin|LED_SE_Pin|LED_SW_Pin|Status_LED_Pin
 800128c:	f642 4350 	movw	r3, #11344	@ 0x2c50
 8001290:	617b      	str	r3, [r7, #20]
                          |Status_LED_debbug_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4820      	ldr	r0, [pc, #128]	@ (8001328 <MX_GPIO_Init+0x15c>)
 80012a6:	f002 f9a3 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80012aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	481c      	ldr	r0, [pc, #112]	@ (8001330 <MX_GPIO_Init+0x164>)
 80012c0:	f002 f996 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_ACC_Pin|LED_NE_Pin|INT1_ACC_Pin|DEV_EN_LIDAR_Pin;
 80012c4:	f248 43a0 	movw	r3, #33952	@ 0x84a0
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e0:	f002 f986 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 80012e4:	f241 03f4 	movw	r3, #4340	@ 0x10f4
 80012e8:	617b      	str	r3, [r7, #20]
                          |LED_E_Pin|LED_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	480b      	ldr	r0, [pc, #44]	@ (800132c <MX_GPIO_Init+0x160>)
 80012fe:	f002 f977 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT_Flash_Pin;
 8001302:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001308:	2300      	movs	r3, #0
 800130a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT_Flash_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	4805      	ldr	r0, [pc, #20]	@ (800132c <MX_GPIO_Init+0x160>)
 8001318:	f002 f96a 	bl	80035f0 <HAL_GPIO_Init>

}
 800131c:	bf00      	nop
 800131e:	3728      	adds	r7, #40	@ 0x28
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40021000 	.word	0x40021000
 8001328:	48000800 	.word	0x48000800
 800132c:	48000400 	.word	0x48000400
 8001330:	48001800 	.word	0x48001800

08001334 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr){
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 800133c:	1d39      	adds	r1, r7, #4
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	2201      	movs	r2, #1
 8001344:	4803      	ldr	r0, [pc, #12]	@ (8001354 <__io_putchar+0x20>)
 8001346:	f005 fa19 	bl	800677c <HAL_UART_Transmit>
	return chr;
 800134a:	687b      	ldr	r3, [r7, #4]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200003f4 	.word	0x200003f4

08001358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135c:	f000 ffbd 	bl	80022da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001360:	f000 f81e 	bl	80013a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001364:	f7ff ff32 	bl	80011cc <MX_GPIO_Init>
  MX_ADC1_Init();
 8001368:	f7ff fe64 	bl	8001034 <MX_ADC1_Init>
  MX_SPI2_Init();
 800136c:	f000 f85c 	bl	8001428 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001370:	f000 fb3e 	bl	80019f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001374:	f000 fbdc 	bl	8001b30 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001378:	f000 fc3e 	bl	8001bf8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800137c:	f000 fc92 	bl	8001ca4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001380:	f000 fe52 	bl	8002028 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001384:	f000 fe9c 	bl	80020c0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Start_Motors();
 8001388:	f000 fe38 	bl	8001ffc <Start_Motors>
  ADXL343_Init();
 800138c:	f000 f9c2 	bl	8001714 <ADXL343_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Read_Acceleration();
 8001390:	f000 f926 	bl	80015e0 <Read_Acceleration>
	  HAL_Delay(1000);
 8001394:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001398:	f001 f810 	bl	80023bc <HAL_Delay>
  {
 800139c:	bf00      	nop
 800139e:	e7f7      	b.n	8001390 <main+0x38>

080013a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b094      	sub	sp, #80	@ 0x50
 80013a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a6:	f107 0318 	add.w	r3, r7, #24
 80013aa:	2238      	movs	r2, #56	@ 0x38
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f006 fff1 	bl	8008396 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013c6:	f002 faad 	bl	8003924 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ca:	2301      	movs	r3, #1
 80013cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d8:	f107 0318 	add.w	r3, r7, #24
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 fb55 	bl	8003a8c <HAL_RCC_OscConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x4c>
  {
    Error_Handler();
 80013e8:	f000 f818 	bl	800141c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ec:	230f      	movs	r3, #15
 80013ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80013f0:	2302      	movs	r3, #2
 80013f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fe53 	bl	80040b0 <HAL_RCC_ClockConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001410:	f000 f804 	bl	800141c <Error_Handler>
  }
}
 8001414:	bf00      	nop
 8001416:	3750      	adds	r7, #80	@ 0x50
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
}
 8001422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <Error_Handler+0x8>

08001428 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800142c:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <MX_SPI2_Init+0x74>)
 800142e:	4a1c      	ldr	r2, [pc, #112]	@ (80014a0 <MX_SPI2_Init+0x78>)
 8001430:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001432:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <MX_SPI2_Init+0x74>)
 8001434:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001438:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800143a:	4b18      	ldr	r3, [pc, #96]	@ (800149c <MX_SPI2_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001440:	4b16      	ldr	r3, [pc, #88]	@ (800149c <MX_SPI2_Init+0x74>)
 8001442:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001446:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001448:	4b14      	ldr	r3, [pc, #80]	@ (800149c <MX_SPI2_Init+0x74>)
 800144a:	2202      	movs	r2, #2
 800144c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800144e:	4b13      	ldr	r3, [pc, #76]	@ (800149c <MX_SPI2_Init+0x74>)
 8001450:	2201      	movs	r2, #1
 8001452:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <MX_SPI2_Init+0x74>)
 8001456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800145a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800145c:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <MX_SPI2_Init+0x74>)
 800145e:	2218      	movs	r2, #24
 8001460:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <MX_SPI2_Init+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <MX_SPI2_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800146e:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <MX_SPI2_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <MX_SPI2_Init+0x74>)
 8001476:	2207      	movs	r2, #7
 8001478:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <MX_SPI2_Init+0x74>)
 800147c:	2200      	movs	r2, #0
 800147e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <MX_SPI2_Init+0x74>)
 8001482:	2200      	movs	r2, #0
 8001484:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_SPI2_Init+0x74>)
 8001488:	f003 fa1a 	bl	80048c0 <HAL_SPI_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001492:	f7ff ffc3 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000025c 	.word	0x2000025c
 80014a0:	40003800 	.word	0x40003800

080014a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a17      	ldr	r2, [pc, #92]	@ (8001520 <HAL_SPI_MspInit+0x7c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d128      	bne.n	8001518 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014c6:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <HAL_SPI_MspInit+0x80>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ca:	4a16      	ldr	r2, [pc, #88]	@ (8001524 <HAL_SPI_MspInit+0x80>)
 80014cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014d2:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <HAL_SPI_MspInit+0x80>)
 80014d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <HAL_SPI_MspInit+0x80>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	4a10      	ldr	r2, [pc, #64]	@ (8001524 <HAL_SPI_MspInit+0x80>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <HAL_SPI_MspInit+0x80>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_TO_SCLK_ACC_Pin|SPI2_MISO_TO_SDO_ACC_Pin|SPI2_MOSI_TO_SDI_ACC_Pin;
 80014f6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80014fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001508:	2305      	movs	r3, #5
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4805      	ldr	r0, [pc, #20]	@ (8001528 <HAL_SPI_MspInit+0x84>)
 8001514:	f002 f86c 	bl	80035f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001518:	bf00      	nop
 800151a:	3728      	adds	r7, #40	@ 0x28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40003800 	.word	0x40003800
 8001524:	40021000 	.word	0x40021000
 8001528:	48000400 	.word	0x48000400

0800152c <SPI_Write>:
  /* USER CODE END SPI2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void SPI_Write(uint8_t reg, uint8_t value) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	460a      	mov	r2, r1
 8001536:	71fb      	strb	r3, [r7, #7]
 8001538:	4613      	mov	r3, r2
 800153a:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg | 0x40;
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001542:	b2db      	uxtb	r3, r3
 8001544:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8001546:	79bb      	ldrb	r3, [r7, #6]
 8001548:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2120      	movs	r1, #32
 800154e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001552:	f002 f9cf 	bl	80038f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
 8001556:	f107 010c 	add.w	r1, r7, #12
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	2202      	movs	r2, #2
 8001560:	4806      	ldr	r0, [pc, #24]	@ (800157c <SPI_Write+0x50>)
 8001562:	f003 fa58 	bl	8004a16 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 8001566:	2201      	movs	r2, #1
 8001568:	2120      	movs	r1, #32
 800156a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800156e:	f002 f9c1 	bl	80038f4 <HAL_GPIO_WritePin>
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000025c 	.word	0x2000025c

08001580 <SPI_Read>:

uint8_t SPI_Read(uint8_t reg) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data = reg | 0x80;
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001590:	b2db      	uxtb	r3, r3
 8001592:	73fb      	strb	r3, [r7, #15]
    uint8_t rx_data = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	2120      	movs	r1, #32
 800159c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a0:	f002 f9a8 	bl	80038f4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &tx_data, 1, HAL_MAX_DELAY);
 80015a4:	f107 010f 	add.w	r1, r7, #15
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ac:	2201      	movs	r2, #1
 80015ae:	480b      	ldr	r0, [pc, #44]	@ (80015dc <SPI_Read+0x5c>)
 80015b0:	f003 fa31 	bl	8004a16 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, &rx_data, 1, HAL_MAX_DELAY);
 80015b4:	f107 010e 	add.w	r1, r7, #14
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295
 80015bc:	2201      	movs	r2, #1
 80015be:	4807      	ldr	r0, [pc, #28]	@ (80015dc <SPI_Read+0x5c>)
 80015c0:	f003 fb9e 	bl	8004d00 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 80015c4:	2201      	movs	r2, #1
 80015c6:	2120      	movs	r1, #32
 80015c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015cc:	f002 f992 	bl	80038f4 <HAL_GPIO_WritePin>

    return rx_data;
 80015d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000025c 	.word	0x2000025c

080015e0 <Read_Acceleration>:

void Read_Acceleration(void) {
 80015e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015e4:	b0a6      	sub	sp, #152	@ 0x98
 80015e6:	af04      	add	r7, sp, #16
    uint8_t buffer[6];
    uint8_t reg = 0x32 | 0xC0;  // Commande de lecture multiple à partir de DATAX0
 80015e8:	23f2      	movs	r3, #242	@ 0xf2
 80015ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

    HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2120      	movs	r1, #32
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f6:	f002 f97d 	bl	80038f4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &reg, 1, HAL_MAX_DELAY);
 80015fa:	f107 0167 	add.w	r1, r7, #103	@ 0x67
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	2201      	movs	r2, #1
 8001604:	483f      	ldr	r0, [pc, #252]	@ (8001704 <Read_Acceleration+0x124>)
 8001606:	f003 fa06 	bl	8004a16 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, buffer, 6, HAL_MAX_DELAY);
 800160a:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	2206      	movs	r2, #6
 8001614:	483b      	ldr	r0, [pc, #236]	@ (8001704 <Read_Acceleration+0x124>)
 8001616:	f003 fb73 	bl	8004d00 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 800161a:	2201      	movs	r2, #1
 800161c:	2120      	movs	r1, #32
 800161e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001622:	f002 f967 	bl	80038f4 <HAL_GPIO_WritePin>

    // Combinaison des octets pour obtenir des valeurs 16 bits signées
    int16_t x = (int16_t)((buffer[1] << 8) | buffer[0]);
 8001626:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	b21a      	sxth	r2, r3
 800162e:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8001632:	b21b      	sxth	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    int16_t y = (int16_t)((buffer[3] << 8) | buffer[2]);
 800163a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b21a      	sxth	r2, r3
 8001642:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001646:	b21b      	sxth	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
    int16_t z = (int16_t)((buffer[5] << 8) | buffer[4]);
 800164e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	b21a      	sxth	r2, r3
 8001656:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800165a:	b21b      	sxth	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

    // Conversion en g (±2g, Full Resolution ou Fixed 10-bit)
    float scale = 3.9 / 1000.0;  // Sensibilité pour ±2g en g/LSB
 8001662:	4b29      	ldr	r3, [pc, #164]	@ (8001708 <Read_Acceleration+0x128>)
 8001664:	67fb      	str	r3, [r7, #124]	@ 0x7c
    float ax = x * scale;
 8001666:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 800166a:	ee07 3a90 	vmov	s15, r3
 800166e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001672:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167a:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    float ay = y * scale;
 800167e:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	@ 0x84
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168a:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800168e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001692:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    float az = z * scale;
 8001696:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a2:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80016a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016aa:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

    // Transmission des résultats via UART
    char msg[100];
    sprintf(msg, "Ax: %.3f g, Ay: %.3f g, Az: %.3f g\r\n", ax, ay, az);
 80016ae:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80016b0:	f7fe ff72 	bl	8000598 <__aeabi_f2d>
 80016b4:	4680      	mov	r8, r0
 80016b6:	4689      	mov	r9, r1
 80016b8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80016ba:	f7fe ff6d 	bl	8000598 <__aeabi_f2d>
 80016be:	4604      	mov	r4, r0
 80016c0:	460d      	mov	r5, r1
 80016c2:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80016c4:	f7fe ff68 	bl	8000598 <__aeabi_f2d>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4638      	mov	r0, r7
 80016ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016d2:	e9cd 4500 	strd	r4, r5, [sp]
 80016d6:	4642      	mov	r2, r8
 80016d8:	464b      	mov	r3, r9
 80016da:	490c      	ldr	r1, [pc, #48]	@ (800170c <Read_Acceleration+0x12c>)
 80016dc:	f006 fdf8 	bl	80082d0 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80016e0:	463b      	mov	r3, r7
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe fdec 	bl	80002c0 <strlen>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	4639      	mov	r1, r7
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	4807      	ldr	r0, [pc, #28]	@ (8001710 <Read_Acceleration+0x130>)
 80016f4:	f005 f842 	bl	800677c <HAL_UART_Transmit>
}
 80016f8:	bf00      	nop
 80016fa:	3788      	adds	r7, #136	@ 0x88
 80016fc:	46bd      	mov	sp, r7
 80016fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001702:	bf00      	nop
 8001704:	2000025c 	.word	0x2000025c
 8001708:	3b7f9724 	.word	0x3b7f9724
 800170c:	0800bb60 	.word	0x0800bb60
 8001710:	200003f4 	.word	0x200003f4

08001714 <ADXL343_Init>:

void ADXL343_Init(void) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
    uint8_t devid = SPI_Read(0x00);  // Lire le registre DEVID (0x00)
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff ff30 	bl	8001580 <SPI_Read>
 8001720:	4603      	mov	r3, r0
 8001722:	73fb      	strb	r3, [r7, #15]

    if (devid == 0xE5) {
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	2be5      	cmp	r3, #229	@ 0xe5
 8001728:	d11f      	bne.n	800176a <ADXL343_Init+0x56>
        // Le composant est détecté, procéder à l'initialisation
        SPI_Write(0x2C, 0x04);  // Configurer la bande passante à 1.56 Hz
 800172a:	2104      	movs	r1, #4
 800172c:	202c      	movs	r0, #44	@ 0x2c
 800172e:	f7ff fefd 	bl	800152c <SPI_Write>
        SPI_Write(0x2E, 0x80);  // Activer DATA_READY
 8001732:	2180      	movs	r1, #128	@ 0x80
 8001734:	202e      	movs	r0, #46	@ 0x2e
 8001736:	f7ff fef9 	bl	800152c <SPI_Write>
        SPI_Write(0x31, 0x08);  // DATA_FORMAT : FULL_RES = 1, RANGE = ±2g
 800173a:	2108      	movs	r1, #8
 800173c:	2031      	movs	r0, #49	@ 0x31
 800173e:	f7ff fef5 	bl	800152c <SPI_Write>
        SPI_Write(0x2D, 0x08);  // Activer le mode mesure
 8001742:	2108      	movs	r1, #8
 8001744:	202d      	movs	r0, #45	@ 0x2d
 8001746:	f7ff fef1 	bl	800152c <SPI_Write>
        Read_Acceleration();    // Lire les données pour effacer l'interruption
 800174a:	f7ff ff49 	bl	80015e0 <Read_Acceleration>

        char *msg = "ADXL343 detecte et initialise !\r\n";
 800174e:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <ADXL343_Init+0x78>)
 8001750:	607b      	str	r3, [r7, #4]
        HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7fe fdb4 	bl	80002c0 <strlen>
 8001758:	4603      	mov	r3, r0
 800175a:	b29a      	uxth	r2, r3
 800175c:	f04f 33ff 	mov.w	r3, #4294967295
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	480b      	ldr	r0, [pc, #44]	@ (8001790 <ADXL343_Init+0x7c>)
 8001764:	f005 f80a 	bl	800677c <HAL_UART_Transmit>
    } else {
        char *error_msg = "Erreur : ADXL343 non detecte !\r\n";
        HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
    }
}
 8001768:	e00c      	b.n	8001784 <ADXL343_Init+0x70>
        char *error_msg = "Erreur : ADXL343 non detecte !\r\n";
 800176a:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <ADXL343_Init+0x80>)
 800176c:	60bb      	str	r3, [r7, #8]
        HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 800176e:	68b8      	ldr	r0, [r7, #8]
 8001770:	f7fe fda6 	bl	80002c0 <strlen>
 8001774:	4603      	mov	r3, r0
 8001776:	b29a      	uxth	r2, r3
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
 800177c:	68b9      	ldr	r1, [r7, #8]
 800177e:	4804      	ldr	r0, [pc, #16]	@ (8001790 <ADXL343_Init+0x7c>)
 8001780:	f004 fffc 	bl	800677c <HAL_UART_Transmit>
}
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	0800bb88 	.word	0x0800bb88
 8001790:	200003f4 	.word	0x200003f4
 8001794:	0800bbac 	.word	0x0800bbac

08001798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	4b0f      	ldr	r3, [pc, #60]	@ (80017dc <HAL_MspInit+0x44>)
 80017a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a2:	4a0e      	ldr	r2, [pc, #56]	@ (80017dc <HAL_MspInit+0x44>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80017aa:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <HAL_MspInit+0x44>)
 80017ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <HAL_MspInit+0x44>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ba:	4a08      	ldr	r2, [pc, #32]	@ (80017dc <HAL_MspInit+0x44>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_MspInit+0x44>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017ce:	f002 f94d 	bl	8003a6c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <NMI_Handler+0x4>

080017e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <HardFault_Handler+0x4>

080017f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <MemManage_Handler+0x4>

080017f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <UsageFault_Handler+0x4>

08001808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001836:	f000 fda3 	bl	8002380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}

0800183e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  return 1;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <_kill>:

int _kill(int pid, int sig)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001858:	f006 fdf0 	bl	800843c <__errno>
 800185c:	4603      	mov	r3, r0
 800185e:	2216      	movs	r2, #22
 8001860:	601a      	str	r2, [r3, #0]
  return -1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_exit>:

void _exit (int status)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001876:	f04f 31ff 	mov.w	r1, #4294967295
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffe7 	bl	800184e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <_exit+0x12>

08001884 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	e00a      	b.n	80018ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001896:	f3af 8000 	nop.w
 800189a:	4601      	mov	r1, r0
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	60ba      	str	r2, [r7, #8]
 80018a2:	b2ca      	uxtb	r2, r1
 80018a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3301      	adds	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	dbf0      	blt.n	8001896 <_read+0x12>
  }

  return len;
 80018b4:	687b      	ldr	r3, [r7, #4]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	60f8      	str	r0, [r7, #12]
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	e009      	b.n	80018e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	60ba      	str	r2, [r7, #8]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fd2b 	bl	8001334 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	3301      	adds	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	dbf1      	blt.n	80018d0 <_write+0x12>
  }
  return len;
 80018ec:	687b      	ldr	r3, [r7, #4]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_close>:

int _close(int file)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800191e:	605a      	str	r2, [r3, #4]
  return 0;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_isatty>:

int _isatty(int file)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001968:	4a14      	ldr	r2, [pc, #80]	@ (80019bc <_sbrk+0x5c>)
 800196a:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <_sbrk+0x60>)
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001974:	4b13      	ldr	r3, [pc, #76]	@ (80019c4 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d102      	bne.n	8001982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800197c:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <_sbrk+0x64>)
 800197e:	4a12      	ldr	r2, [pc, #72]	@ (80019c8 <_sbrk+0x68>)
 8001980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001982:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	429a      	cmp	r2, r3
 800198e:	d207      	bcs.n	80019a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001990:	f006 fd54 	bl	800843c <__errno>
 8001994:	4603      	mov	r3, r0
 8001996:	220c      	movs	r2, #12
 8001998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	e009      	b.n	80019b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019a6:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	4a05      	ldr	r2, [pc, #20]	@ (80019c4 <_sbrk+0x64>)
 80019b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20008000 	.word	0x20008000
 80019c0:	00000400 	.word	0x00000400
 80019c4:	200002c0 	.word	0x200002c0
 80019c8:	20000670 	.word	0x20000670

080019cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <SystemInit+0x20>)
 80019d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019d6:	4a05      	ldr	r2, [pc, #20]	@ (80019ec <SystemInit+0x20>)
 80019d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b098      	sub	sp, #96	@ 0x60
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a02:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	611a      	str	r2, [r3, #16]
 8001a12:	615a      	str	r2, [r3, #20]
 8001a14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2234      	movs	r2, #52	@ 0x34
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f006 fcba 	bl	8008396 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a22:	4b41      	ldr	r3, [pc, #260]	@ (8001b28 <MX_TIM1_Init+0x138>)
 8001a24:	4a41      	ldr	r2, [pc, #260]	@ (8001b2c <MX_TIM1_Init+0x13c>)
 8001a26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a28:	4b3f      	ldr	r3, [pc, #252]	@ (8001b28 <MX_TIM1_Init+0x138>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b28 <MX_TIM1_Init+0x138>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a34:	4b3c      	ldr	r3, [pc, #240]	@ (8001b28 <MX_TIM1_Init+0x138>)
 8001a36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b28 <MX_TIM1_Init+0x138>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a42:	4b39      	ldr	r3, [pc, #228]	@ (8001b28 <MX_TIM1_Init+0x138>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a48:	4b37      	ldr	r3, [pc, #220]	@ (8001b28 <MX_TIM1_Init+0x138>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a4e:	4836      	ldr	r0, [pc, #216]	@ (8001b28 <MX_TIM1_Init+0x138>)
 8001a50:	f003 fe6c 	bl	800572c <HAL_TIM_PWM_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001a5a:	f7ff fcdf 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a62:	2300      	movs	r3, #0
 8001a64:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a6a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a6e:	4619      	mov	r1, r3
 8001a70:	482d      	ldr	r0, [pc, #180]	@ (8001b28 <MX_TIM1_Init+0x138>)
 8001a72:	f004 fd25 	bl	80064c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a7c:	f7ff fcce 	bl	800141c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a80:	2360      	movs	r3, #96	@ 0x60
 8001a82:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a9c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4820      	ldr	r0, [pc, #128]	@ (8001b28 <MX_TIM1_Init+0x138>)
 8001aa6:	f004 f83f 	bl	8005b28 <HAL_TIM_PWM_ConfigChannel>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001ab0:	f7ff fcb4 	bl	800141c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ab4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ab8:	2204      	movs	r2, #4
 8001aba:	4619      	mov	r1, r3
 8001abc:	481a      	ldr	r0, [pc, #104]	@ (8001b28 <MX_TIM1_Init+0x138>)
 8001abe:	f004 f833 	bl	8005b28 <HAL_TIM_PWM_ConfigChannel>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001ac8:	f7ff fca8 	bl	800141c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ae0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ae4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001af2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001af6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001afc:	2300      	movs	r3, #0
 8001afe:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	4619      	mov	r1, r3
 8001b08:	4807      	ldr	r0, [pc, #28]	@ (8001b28 <MX_TIM1_Init+0x138>)
 8001b0a:	f004 fd5b 	bl	80065c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001b14:	f7ff fc82 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b18:	4803      	ldr	r0, [pc, #12]	@ (8001b28 <MX_TIM1_Init+0x138>)
 8001b1a:	f000 f9ed 	bl	8001ef8 <HAL_TIM_MspPostInit>

}
 8001b1e:	bf00      	nop
 8001b20:	3760      	adds	r7, #96	@ 0x60
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200002c4 	.word	0x200002c4
 8001b2c:	40012c00 	.word	0x40012c00

08001b30 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	@ 0x28
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b42:	463b      	mov	r3, r7
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
 8001b50:	615a      	str	r2, [r3, #20]
 8001b52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b54:	4b27      	ldr	r3, [pc, #156]	@ (8001bf4 <MX_TIM2_Init+0xc4>)
 8001b56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b5c:	4b25      	ldr	r3, [pc, #148]	@ (8001bf4 <MX_TIM2_Init+0xc4>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b62:	4b24      	ldr	r3, [pc, #144]	@ (8001bf4 <MX_TIM2_Init+0xc4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b68:	4b22      	ldr	r3, [pc, #136]	@ (8001bf4 <MX_TIM2_Init+0xc4>)
 8001b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b70:	4b20      	ldr	r3, [pc, #128]	@ (8001bf4 <MX_TIM2_Init+0xc4>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b76:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf4 <MX_TIM2_Init+0xc4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b7c:	481d      	ldr	r0, [pc, #116]	@ (8001bf4 <MX_TIM2_Init+0xc4>)
 8001b7e:	f003 fdd5 	bl	800572c <HAL_TIM_PWM_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001b88:	f7ff fc48 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4816      	ldr	r0, [pc, #88]	@ (8001bf4 <MX_TIM2_Init+0xc4>)
 8001b9c:	f004 fc90 	bl	80064c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001ba6:	f7ff fc39 	bl	800141c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001baa:	2360      	movs	r3, #96	@ 0x60
 8001bac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bba:	463b      	mov	r3, r7
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480c      	ldr	r0, [pc, #48]	@ (8001bf4 <MX_TIM2_Init+0xc4>)
 8001bc2:	f003 ffb1 	bl	8005b28 <HAL_TIM_PWM_ConfigChannel>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001bcc:	f7ff fc26 	bl	800141c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4807      	ldr	r0, [pc, #28]	@ (8001bf4 <MX_TIM2_Init+0xc4>)
 8001bd8:	f003 ffa6 	bl	8005b28 <HAL_TIM_PWM_ConfigChannel>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001be2:	f7ff fc1b 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001be6:	4803      	ldr	r0, [pc, #12]	@ (8001bf4 <MX_TIM2_Init+0xc4>)
 8001be8:	f000 f986 	bl	8001ef8 <HAL_TIM_MspPostInit>

}
 8001bec:	bf00      	nop
 8001bee:	3728      	adds	r7, #40	@ 0x28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000310 	.word	0x20000310

08001bf8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08c      	sub	sp, #48	@ 0x30
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	2224      	movs	r2, #36	@ 0x24
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f006 fbc5 	bl	8008396 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c16:	4b21      	ldr	r3, [pc, #132]	@ (8001c9c <MX_TIM3_Init+0xa4>)
 8001c18:	4a21      	ldr	r2, [pc, #132]	@ (8001ca0 <MX_TIM3_Init+0xa8>)
 8001c1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c9c <MX_TIM3_Init+0xa4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c22:	4b1e      	ldr	r3, [pc, #120]	@ (8001c9c <MX_TIM3_Init+0xa4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c28:	4b1c      	ldr	r3, [pc, #112]	@ (8001c9c <MX_TIM3_Init+0xa4>)
 8001c2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c30:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <MX_TIM3_Init+0xa4>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c36:	4b19      	ldr	r3, [pc, #100]	@ (8001c9c <MX_TIM3_Init+0xa4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c44:	2301      	movs	r3, #1
 8001c46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c50:	2300      	movs	r3, #0
 8001c52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c54:	2301      	movs	r3, #1
 8001c56:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	4619      	mov	r1, r3
 8001c66:	480d      	ldr	r0, [pc, #52]	@ (8001c9c <MX_TIM3_Init+0xa4>)
 8001c68:	f003 feb8 	bl	80059dc <HAL_TIM_Encoder_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c72:	f7ff fbd3 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c76:	2300      	movs	r3, #0
 8001c78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c7e:	463b      	mov	r3, r7
 8001c80:	4619      	mov	r1, r3
 8001c82:	4806      	ldr	r0, [pc, #24]	@ (8001c9c <MX_TIM3_Init+0xa4>)
 8001c84:	f004 fc1c 	bl	80064c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c8e:	f7ff fbc5 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	3730      	adds	r7, #48	@ 0x30
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	2000035c 	.word	0x2000035c
 8001ca0:	40000400 	.word	0x40000400

08001ca4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b094      	sub	sp, #80	@ 0x50
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001caa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cae:	2224      	movs	r2, #36	@ 0x24
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f006 fb6f 	bl	8008396 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb8:	f107 0320 	add.w	r3, r7, #32
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
 8001cd0:	611a      	str	r2, [r3, #16]
 8001cd2:	615a      	str	r2, [r3, #20]
 8001cd4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cd6:	4b30      	ldr	r3, [pc, #192]	@ (8001d98 <MX_TIM4_Init+0xf4>)
 8001cd8:	4a30      	ldr	r2, [pc, #192]	@ (8001d9c <MX_TIM4_Init+0xf8>)
 8001cda:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8001d98 <MX_TIM4_Init+0xf4>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d98 <MX_TIM4_Init+0xf4>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d98 <MX_TIM4_Init+0xf4>)
 8001cea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf0:	4b29      	ldr	r3, [pc, #164]	@ (8001d98 <MX_TIM4_Init+0xf4>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf6:	4b28      	ldr	r3, [pc, #160]	@ (8001d98 <MX_TIM4_Init+0xf4>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cfc:	4826      	ldr	r0, [pc, #152]	@ (8001d98 <MX_TIM4_Init+0xf4>)
 8001cfe:	f003 fd15 	bl	800572c <HAL_TIM_PWM_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001d08:	f7ff fb88 	bl	800141c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d10:	2300      	movs	r3, #0
 8001d12:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d14:	2301      	movs	r3, #1
 8001d16:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC1Filter = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d20:	2300      	movs	r3, #0
 8001d22:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d24:	2301      	movs	r3, #1
 8001d26:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.IC2Filter = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d34:	4619      	mov	r1, r3
 8001d36:	4818      	ldr	r0, [pc, #96]	@ (8001d98 <MX_TIM4_Init+0xf4>)
 8001d38:	f003 fe50 	bl	80059dc <HAL_TIM_Encoder_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8001d42:	f7ff fb6b 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d4e:	f107 0320 	add.w	r3, r7, #32
 8001d52:	4619      	mov	r1, r3
 8001d54:	4810      	ldr	r0, [pc, #64]	@ (8001d98 <MX_TIM4_Init+0xf4>)
 8001d56:	f004 fbb3 	bl	80064c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8001d60:	f7ff fb5c 	bl	800141c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d64:	2360      	movs	r3, #96	@ 0x60
 8001d66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	220c      	movs	r2, #12
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4807      	ldr	r0, [pc, #28]	@ (8001d98 <MX_TIM4_Init+0xf4>)
 8001d7c:	f003 fed4 	bl	8005b28 <HAL_TIM_PWM_ConfigChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8001d86:	f7ff fb49 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d8a:	4803      	ldr	r0, [pc, #12]	@ (8001d98 <MX_TIM4_Init+0xf4>)
 8001d8c:	f000 f8b4 	bl	8001ef8 <HAL_TIM_MspPostInit>

}
 8001d90:	bf00      	nop
 8001d92:	3750      	adds	r7, #80	@ 0x50
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	200003a8 	.word	0x200003a8
 8001d9c:	40000800 	.word	0x40000800

08001da0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08c      	sub	sp, #48	@ 0x30
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a2a      	ldr	r2, [pc, #168]	@ (8001e68 <HAL_TIM_PWM_MspInit+0xc8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d10c      	bne.n	8001ddc <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e6c <HAL_TIM_PWM_MspInit+0xcc>)
 8001dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dc6:	4a29      	ldr	r2, [pc, #164]	@ (8001e6c <HAL_TIM_PWM_MspInit+0xcc>)
 8001dc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dce:	4b27      	ldr	r3, [pc, #156]	@ (8001e6c <HAL_TIM_PWM_MspInit+0xcc>)
 8001dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001dda:	e040      	b.n	8001e5e <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001de4:	d10c      	bne.n	8001e00 <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001de6:	4b21      	ldr	r3, [pc, #132]	@ (8001e6c <HAL_TIM_PWM_MspInit+0xcc>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dea:	4a20      	ldr	r2, [pc, #128]	@ (8001e6c <HAL_TIM_PWM_MspInit+0xcc>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001df2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e6c <HAL_TIM_PWM_MspInit+0xcc>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697b      	ldr	r3, [r7, #20]
}
 8001dfe:	e02e      	b.n	8001e5e <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM4)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1a      	ldr	r2, [pc, #104]	@ (8001e70 <HAL_TIM_PWM_MspInit+0xd0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d129      	bne.n	8001e5e <HAL_TIM_PWM_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e0a:	4b18      	ldr	r3, [pc, #96]	@ (8001e6c <HAL_TIM_PWM_MspInit+0xcc>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0e:	4a17      	ldr	r2, [pc, #92]	@ (8001e6c <HAL_TIM_PWM_MspInit+0xcc>)
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e16:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <HAL_TIM_PWM_MspInit+0xcc>)
 8001e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <HAL_TIM_PWM_MspInit+0xcc>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e26:	4a11      	ldr	r2, [pc, #68]	@ (8001e6c <HAL_TIM_PWM_MspInit+0xcc>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e6c <HAL_TIM_PWM_MspInit+0xcc>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e3a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001e4c:	230a      	movs	r3, #10
 8001e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4619      	mov	r1, r3
 8001e56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e5a:	f001 fbc9 	bl	80035f0 <HAL_GPIO_Init>
}
 8001e5e:	bf00      	nop
 8001e60:	3730      	adds	r7, #48	@ 0x30
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40012c00 	.word	0x40012c00
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40000800 	.word	0x40000800

08001e74 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	@ 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a17      	ldr	r2, [pc, #92]	@ (8001ef0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d128      	bne.n	8001ee8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e96:	4b17      	ldr	r3, [pc, #92]	@ (8001ef4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9a:	4a16      	ldr	r2, [pc, #88]	@ (8001ef4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ea2:	4b14      	ldr	r3, [pc, #80]	@ (8001ef4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	4b11      	ldr	r3, [pc, #68]	@ (8001ef4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb2:	4a10      	ldr	r2, [pc, #64]	@ (8001ef4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001ec6:	2350      	movs	r3, #80	@ 0x50
 8001ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee4:	f001 fb84 	bl	80035f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001ee8:	bf00      	nop
 8001eea:	3728      	adds	r7, #40	@ 0x28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40000400 	.word	0x40000400
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	@ 0x28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a35      	ldr	r2, [pc, #212]	@ (8001fec <HAL_TIM_MspPostInit+0xf4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d11e      	bne.n	8001f58 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1a:	4b35      	ldr	r3, [pc, #212]	@ (8001ff0 <HAL_TIM_MspPostInit+0xf8>)
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1e:	4a34      	ldr	r2, [pc, #208]	@ (8001ff0 <HAL_TIM_MspPostInit+0xf8>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f26:	4b32      	ldr	r3, [pc, #200]	@ (8001ff0 <HAL_TIM_MspPostInit+0xf8>)
 8001f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f40:	2300      	movs	r3, #0
 8001f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001f44:	2306      	movs	r3, #6
 8001f46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f52:	f001 fb4d 	bl	80035f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f56:	e044      	b.n	8001fe2 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f60:	d11d      	bne.n	8001f9e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	4b23      	ldr	r3, [pc, #140]	@ (8001ff0 <HAL_TIM_MspPostInit+0xf8>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f66:	4a22      	ldr	r2, [pc, #136]	@ (8001ff0 <HAL_TIM_MspPostInit+0xf8>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f6e:	4b20      	ldr	r3, [pc, #128]	@ (8001ff0 <HAL_TIM_MspPostInit+0xf8>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f98:	f001 fb2a 	bl	80035f0 <HAL_GPIO_Init>
}
 8001f9c:	e021      	b.n	8001fe2 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM4)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a14      	ldr	r2, [pc, #80]	@ (8001ff4 <HAL_TIM_MspPostInit+0xfc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d11c      	bne.n	8001fe2 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa8:	4b11      	ldr	r3, [pc, #68]	@ (8001ff0 <HAL_TIM_MspPostInit+0xf8>)
 8001faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fac:	4a10      	ldr	r2, [pc, #64]	@ (8001ff0 <HAL_TIM_MspPostInit+0xf8>)
 8001fae:	f043 0302 	orr.w	r3, r3, #2
 8001fb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <HAL_TIM_MspPostInit+0xf8>)
 8001fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_CH4_M_SCTR_LIDAR_Pin;
 8001fc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM4_CH4_M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8001fd6:	f107 0314 	add.w	r3, r7, #20
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4806      	ldr	r0, [pc, #24]	@ (8001ff8 <HAL_TIM_MspPostInit+0x100>)
 8001fde:	f001 fb07 	bl	80035f0 <HAL_GPIO_Init>
}
 8001fe2:	bf00      	nop
 8001fe4:	3728      	adds	r7, #40	@ 0x28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40012c00 	.word	0x40012c00
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40000800 	.word	0x40000800
 8001ff8:	48000400 	.word	0x48000400

08001ffc <Start_Motors>:
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
    TIM1->CCR1 = 0;
    TIM1->CCR2 = 0;
}

void Start_Motors(void) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002000:	2100      	movs	r1, #0
 8002002:	4807      	ldr	r0, [pc, #28]	@ (8002020 <Start_Motors+0x24>)
 8002004:	f003 fbea 	bl	80057dc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002008:	2104      	movs	r1, #4
 800200a:	4805      	ldr	r0, [pc, #20]	@ (8002020 <Start_Motors+0x24>)
 800200c:	f003 fbe6 	bl	80057dc <HAL_TIM_PWM_Start>
    TIM1->CCR1 = 0;
 8002010:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <Start_Motors+0x28>)
 8002012:	2200      	movs	r2, #0
 8002014:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = 0;
 8002016:	4b03      	ldr	r3, [pc, #12]	@ (8002024 <Start_Motors+0x28>)
 8002018:	2200      	movs	r2, #0
 800201a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}
 8002020:	200002c4 	.word	0x200002c4
 8002024:	40012c00 	.word	0x40012c00

08002028 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800202c:	4b22      	ldr	r3, [pc, #136]	@ (80020b8 <MX_USART2_UART_Init+0x90>)
 800202e:	4a23      	ldr	r2, [pc, #140]	@ (80020bc <MX_USART2_UART_Init+0x94>)
 8002030:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002032:	4b21      	ldr	r3, [pc, #132]	@ (80020b8 <MX_USART2_UART_Init+0x90>)
 8002034:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002038:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800203a:	4b1f      	ldr	r3, [pc, #124]	@ (80020b8 <MX_USART2_UART_Init+0x90>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002040:	4b1d      	ldr	r3, [pc, #116]	@ (80020b8 <MX_USART2_UART_Init+0x90>)
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002046:	4b1c      	ldr	r3, [pc, #112]	@ (80020b8 <MX_USART2_UART_Init+0x90>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800204c:	4b1a      	ldr	r3, [pc, #104]	@ (80020b8 <MX_USART2_UART_Init+0x90>)
 800204e:	220c      	movs	r2, #12
 8002050:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002052:	4b19      	ldr	r3, [pc, #100]	@ (80020b8 <MX_USART2_UART_Init+0x90>)
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002058:	4b17      	ldr	r3, [pc, #92]	@ (80020b8 <MX_USART2_UART_Init+0x90>)
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800205e:	4b16      	ldr	r3, [pc, #88]	@ (80020b8 <MX_USART2_UART_Init+0x90>)
 8002060:	2200      	movs	r2, #0
 8002062:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002064:	4b14      	ldr	r3, [pc, #80]	@ (80020b8 <MX_USART2_UART_Init+0x90>)
 8002066:	2200      	movs	r2, #0
 8002068:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800206a:	4b13      	ldr	r3, [pc, #76]	@ (80020b8 <MX_USART2_UART_Init+0x90>)
 800206c:	2200      	movs	r2, #0
 800206e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002070:	4811      	ldr	r0, [pc, #68]	@ (80020b8 <MX_USART2_UART_Init+0x90>)
 8002072:	f004 fb33 	bl	80066dc <HAL_UART_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800207c:	f7ff f9ce 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002080:	2100      	movs	r1, #0
 8002082:	480d      	ldr	r0, [pc, #52]	@ (80020b8 <MX_USART2_UART_Init+0x90>)
 8002084:	f005 f92c 	bl	80072e0 <HAL_UARTEx_SetTxFifoThreshold>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800208e:	f7ff f9c5 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002092:	2100      	movs	r1, #0
 8002094:	4808      	ldr	r0, [pc, #32]	@ (80020b8 <MX_USART2_UART_Init+0x90>)
 8002096:	f005 f961 	bl	800735c <HAL_UARTEx_SetRxFifoThreshold>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80020a0:	f7ff f9bc 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80020a4:	4804      	ldr	r0, [pc, #16]	@ (80020b8 <MX_USART2_UART_Init+0x90>)
 80020a6:	f005 f8e2 	bl	800726e <HAL_UARTEx_DisableFifoMode>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80020b0:	f7ff f9b4 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	200003f4 	.word	0x200003f4
 80020bc:	40004400 	.word	0x40004400

080020c0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020c4:	4b22      	ldr	r3, [pc, #136]	@ (8002150 <MX_USART3_UART_Init+0x90>)
 80020c6:	4a23      	ldr	r2, [pc, #140]	@ (8002154 <MX_USART3_UART_Init+0x94>)
 80020c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020ca:	4b21      	ldr	r3, [pc, #132]	@ (8002150 <MX_USART3_UART_Init+0x90>)
 80020cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002150 <MX_USART3_UART_Init+0x90>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002150 <MX_USART3_UART_Init+0x90>)
 80020da:	2200      	movs	r2, #0
 80020dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020de:	4b1c      	ldr	r3, [pc, #112]	@ (8002150 <MX_USART3_UART_Init+0x90>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002150 <MX_USART3_UART_Init+0x90>)
 80020e6:	220c      	movs	r2, #12
 80020e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ea:	4b19      	ldr	r3, [pc, #100]	@ (8002150 <MX_USART3_UART_Init+0x90>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f0:	4b17      	ldr	r3, [pc, #92]	@ (8002150 <MX_USART3_UART_Init+0x90>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020f6:	4b16      	ldr	r3, [pc, #88]	@ (8002150 <MX_USART3_UART_Init+0x90>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020fc:	4b14      	ldr	r3, [pc, #80]	@ (8002150 <MX_USART3_UART_Init+0x90>)
 80020fe:	2200      	movs	r2, #0
 8002100:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002102:	4b13      	ldr	r3, [pc, #76]	@ (8002150 <MX_USART3_UART_Init+0x90>)
 8002104:	2200      	movs	r2, #0
 8002106:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002108:	4811      	ldr	r0, [pc, #68]	@ (8002150 <MX_USART3_UART_Init+0x90>)
 800210a:	f004 fae7 	bl	80066dc <HAL_UART_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002114:	f7ff f982 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002118:	2100      	movs	r1, #0
 800211a:	480d      	ldr	r0, [pc, #52]	@ (8002150 <MX_USART3_UART_Init+0x90>)
 800211c:	f005 f8e0 	bl	80072e0 <HAL_UARTEx_SetTxFifoThreshold>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002126:	f7ff f979 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800212a:	2100      	movs	r1, #0
 800212c:	4808      	ldr	r0, [pc, #32]	@ (8002150 <MX_USART3_UART_Init+0x90>)
 800212e:	f005 f915 	bl	800735c <HAL_UARTEx_SetRxFifoThreshold>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002138:	f7ff f970 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800213c:	4804      	ldr	r0, [pc, #16]	@ (8002150 <MX_USART3_UART_Init+0x90>)
 800213e:	f005 f896 	bl	800726e <HAL_UARTEx_DisableFifoMode>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002148:	f7ff f968 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000488 	.word	0x20000488
 8002154:	40004800 	.word	0x40004800

08002158 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b09c      	sub	sp, #112	@ 0x70
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002170:	f107 0318 	add.w	r3, r7, #24
 8002174:	2244      	movs	r2, #68	@ 0x44
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f006 f90c 	bl	8008396 <memset>
  if(uartHandle->Instance==USART2)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a3d      	ldr	r2, [pc, #244]	@ (8002278 <HAL_UART_MspInit+0x120>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d137      	bne.n	80021f8 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002188:	2302      	movs	r3, #2
 800218a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800218c:	2300      	movs	r3, #0
 800218e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002190:	f107 0318 	add.w	r3, r7, #24
 8002194:	4618      	mov	r0, r3
 8002196:	f002 f9a3 	bl	80044e0 <HAL_RCCEx_PeriphCLKConfig>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021a0:	f7ff f93c 	bl	800141c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021a4:	4b35      	ldr	r3, [pc, #212]	@ (800227c <HAL_UART_MspInit+0x124>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a8:	4a34      	ldr	r2, [pc, #208]	@ (800227c <HAL_UART_MspInit+0x124>)
 80021aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80021b0:	4b32      	ldr	r3, [pc, #200]	@ (800227c <HAL_UART_MspInit+0x124>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021bc:	4b2f      	ldr	r3, [pc, #188]	@ (800227c <HAL_UART_MspInit+0x124>)
 80021be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c0:	4a2e      	ldr	r2, [pc, #184]	@ (800227c <HAL_UART_MspInit+0x124>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021c8:	4b2c      	ldr	r3, [pc, #176]	@ (800227c <HAL_UART_MspInit+0x124>)
 80021ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021d4:	230c      	movs	r3, #12
 80021d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021e4:	2307      	movs	r3, #7
 80021e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80021ec:	4619      	mov	r1, r3
 80021ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021f2:	f001 f9fd 	bl	80035f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021f6:	e03b      	b.n	8002270 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a20      	ldr	r2, [pc, #128]	@ (8002280 <HAL_UART_MspInit+0x128>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d136      	bne.n	8002270 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002202:	2304      	movs	r3, #4
 8002204:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002206:	2300      	movs	r3, #0
 8002208:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800220a:	f107 0318 	add.w	r3, r7, #24
 800220e:	4618      	mov	r0, r3
 8002210:	f002 f966 	bl	80044e0 <HAL_RCCEx_PeriphCLKConfig>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800221a:	f7ff f8ff 	bl	800141c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800221e:	4b17      	ldr	r3, [pc, #92]	@ (800227c <HAL_UART_MspInit+0x124>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002222:	4a16      	ldr	r2, [pc, #88]	@ (800227c <HAL_UART_MspInit+0x124>)
 8002224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002228:	6593      	str	r3, [r2, #88]	@ 0x58
 800222a:	4b14      	ldr	r3, [pc, #80]	@ (800227c <HAL_UART_MspInit+0x124>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002236:	4b11      	ldr	r3, [pc, #68]	@ (800227c <HAL_UART_MspInit+0x124>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223a:	4a10      	ldr	r2, [pc, #64]	@ (800227c <HAL_UART_MspInit+0x124>)
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002242:	4b0e      	ldr	r3, [pc, #56]	@ (800227c <HAL_UART_MspInit+0x124>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_LIDAR_Pin|USART3_RX_LIDAR_Pin;
 800224e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002252:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225c:	2300      	movs	r3, #0
 800225e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002260:	2307      	movs	r3, #7
 8002262:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002264:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002268:	4619      	mov	r1, r3
 800226a:	4806      	ldr	r0, [pc, #24]	@ (8002284 <HAL_UART_MspInit+0x12c>)
 800226c:	f001 f9c0 	bl	80035f0 <HAL_GPIO_Init>
}
 8002270:	bf00      	nop
 8002272:	3770      	adds	r7, #112	@ 0x70
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40004400 	.word	0x40004400
 800227c:	40021000 	.word	0x40021000
 8002280:	40004800 	.word	0x40004800
 8002284:	48000400 	.word	0x48000400

08002288 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002288:	480d      	ldr	r0, [pc, #52]	@ (80022c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800228a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800228c:	f7ff fb9e 	bl	80019cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002290:	480c      	ldr	r0, [pc, #48]	@ (80022c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002292:	490d      	ldr	r1, [pc, #52]	@ (80022c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002294:	4a0d      	ldr	r2, [pc, #52]	@ (80022cc <LoopForever+0xe>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002298:	e002      	b.n	80022a0 <LoopCopyDataInit>

0800229a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800229a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800229c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800229e:	3304      	adds	r3, #4

080022a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a4:	d3f9      	bcc.n	800229a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022a6:	4a0a      	ldr	r2, [pc, #40]	@ (80022d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022a8:	4c0a      	ldr	r4, [pc, #40]	@ (80022d4 <LoopForever+0x16>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ac:	e001      	b.n	80022b2 <LoopFillZerobss>

080022ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b0:	3204      	adds	r2, #4

080022b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b4:	d3fb      	bcc.n	80022ae <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80022b6:	f006 f8c7 	bl	8008448 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022ba:	f7ff f84d 	bl	8001358 <main>

080022be <LoopForever>:

LoopForever:
    b LoopForever
 80022be:	e7fe      	b.n	80022be <LoopForever>
  ldr   r0, =_estack
 80022c0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80022c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80022cc:	0800c050 	.word	0x0800c050
  ldr r2, =_sbss
 80022d0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80022d4:	2000066c 	.word	0x2000066c

080022d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022d8:	e7fe      	b.n	80022d8 <ADC1_2_IRQHandler>

080022da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e4:	2003      	movs	r0, #3
 80022e6:	f001 f951 	bl	800358c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022ea:	200f      	movs	r0, #15
 80022ec:	f000 f80e 	bl	800230c <HAL_InitTick>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d002      	beq.n	80022fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	71fb      	strb	r3, [r7, #7]
 80022fa:	e001      	b.n	8002300 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022fc:	f7ff fa4c 	bl	8001798 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002300:	79fb      	ldrb	r3, [r7, #7]

}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002318:	4b16      	ldr	r3, [pc, #88]	@ (8002374 <HAL_InitTick+0x68>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d022      	beq.n	8002366 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002320:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <HAL_InitTick+0x6c>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b13      	ldr	r3, [pc, #76]	@ (8002374 <HAL_InitTick+0x68>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800232c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002330:	fbb2 f3f3 	udiv	r3, r2, r3
 8002334:	4618      	mov	r0, r3
 8002336:	f001 f94e 	bl	80035d6 <HAL_SYSTICK_Config>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10f      	bne.n	8002360 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b0f      	cmp	r3, #15
 8002344:	d809      	bhi.n	800235a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002346:	2200      	movs	r2, #0
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	f04f 30ff 	mov.w	r0, #4294967295
 800234e:	f001 f928 	bl	80035a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002352:	4a0a      	ldr	r2, [pc, #40]	@ (800237c <HAL_InitTick+0x70>)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	e007      	b.n	800236a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	73fb      	strb	r3, [r7, #15]
 800235e:	e004      	b.n	800236a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
 8002364:	e001      	b.n	800236a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800236a:	7bfb      	ldrb	r3, [r7, #15]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000008 	.word	0x20000008
 8002378:	20000000 	.word	0x20000000
 800237c:	20000004 	.word	0x20000004

08002380 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002384:	4b05      	ldr	r3, [pc, #20]	@ (800239c <HAL_IncTick+0x1c>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <HAL_IncTick+0x20>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4413      	add	r3, r2
 800238e:	4a03      	ldr	r2, [pc, #12]	@ (800239c <HAL_IncTick+0x1c>)
 8002390:	6013      	str	r3, [r2, #0]
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	2000051c 	.word	0x2000051c
 80023a0:	20000008 	.word	0x20000008

080023a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return uwTick;
 80023a8:	4b03      	ldr	r3, [pc, #12]	@ (80023b8 <HAL_GetTick+0x14>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	2000051c 	.word	0x2000051c

080023bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff ffee 	bl	80023a4 <HAL_GetTick>
 80023c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d004      	beq.n	80023e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80023d6:	4b09      	ldr	r3, [pc, #36]	@ (80023fc <HAL_Delay+0x40>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	4413      	add	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023e0:	bf00      	nop
 80023e2:	f7ff ffdf 	bl	80023a4 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d8f7      	bhi.n	80023e2 <HAL_Delay+0x26>
  {
  }
}
 80023f2:	bf00      	nop
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000008 	.word	0x20000008

08002400 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	609a      	str	r2, [r3, #8]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	609a      	str	r2, [r3, #8]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	3360      	adds	r3, #96	@ 0x60
 800247a:	461a      	mov	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <LL_ADC_SetOffset+0x44>)
 800248a:	4013      	ands	r3, r2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	4313      	orrs	r3, r2
 8002498:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024a0:	bf00      	nop
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	03fff000 	.word	0x03fff000

080024b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3360      	adds	r3, #96	@ 0x60
 80024be:	461a      	mov	r2, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	3360      	adds	r3, #96	@ 0x60
 80024ec:	461a      	mov	r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	431a      	orrs	r2, r3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002506:	bf00      	nop
 8002508:	371c      	adds	r7, #28
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002512:	b480      	push	{r7}
 8002514:	b087      	sub	sp, #28
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	3360      	adds	r3, #96	@ 0x60
 8002522:	461a      	mov	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	431a      	orrs	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800253c:	bf00      	nop
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3360      	adds	r3, #96	@ 0x60
 8002558:	461a      	mov	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	431a      	orrs	r2, r3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002572:	bf00      	nop
 8002574:	371c      	adds	r7, #28
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	615a      	str	r2, [r3, #20]
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3330      	adds	r3, #48	@ 0x30
 80025b4:	461a      	mov	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	f003 030c 	and.w	r3, r3, #12
 80025c0:	4413      	add	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	211f      	movs	r1, #31
 80025d0:	fa01 f303 	lsl.w	r3, r1, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	401a      	ands	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	0e9b      	lsrs	r3, r3, #26
 80025dc:	f003 011f 	and.w	r1, r3, #31
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	431a      	orrs	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025f0:	bf00      	nop
 80025f2:	371c      	adds	r7, #28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3314      	adds	r3, #20
 800260c:	461a      	mov	r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	0e5b      	lsrs	r3, r3, #25
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	4413      	add	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	0d1b      	lsrs	r3, r3, #20
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	2107      	movs	r1, #7
 800262a:	fa01 f303 	lsl.w	r3, r1, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	401a      	ands	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	0d1b      	lsrs	r3, r3, #20
 8002636:	f003 031f 	and.w	r3, r3, #31
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	fa01 f303 	lsl.w	r3, r1, r3
 8002640:	431a      	orrs	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002646:	bf00      	nop
 8002648:	371c      	adds	r7, #28
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266c:	43db      	mvns	r3, r3
 800266e:	401a      	ands	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f003 0318 	and.w	r3, r3, #24
 8002676:	4908      	ldr	r1, [pc, #32]	@ (8002698 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002678:	40d9      	lsrs	r1, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	400b      	ands	r3, r1
 800267e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002682:	431a      	orrs	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800268a:	bf00      	nop
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	0007ffff 	.word	0x0007ffff

0800269c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80026ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6093      	str	r3, [r2, #8]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026d4:	d101      	bne.n	80026da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80026f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002720:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002724:	d101      	bne.n	800272a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <LL_ADC_IsEnabled+0x18>
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <LL_ADC_IsEnabled+0x1a>
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b04      	cmp	r3, #4
 8002770:	d101      	bne.n	8002776 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b08      	cmp	r3, #8
 8002796:	d101      	bne.n	800279c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b089      	sub	sp, #36	@ 0x24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e167      	b.n	8002a96 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d109      	bne.n	80027e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7fe fca5 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff67 	bl	80026c0 <LL_ADC_IsDeepPowerDownEnabled>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d004      	beq.n	8002802 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff4d 	bl	800269c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff ff82 	bl	8002710 <LL_ADC_IsInternalRegulatorEnabled>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d115      	bne.n	800283e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff ff66 	bl	80026e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800281c:	4ba0      	ldr	r3, [pc, #640]	@ (8002aa0 <HAL_ADC_Init+0x2f4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	099b      	lsrs	r3, r3, #6
 8002822:	4aa0      	ldr	r2, [pc, #640]	@ (8002aa4 <HAL_ADC_Init+0x2f8>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	099b      	lsrs	r3, r3, #6
 800282a:	3301      	adds	r3, #1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002830:	e002      	b.n	8002838 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3b01      	subs	r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f9      	bne.n	8002832 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ff64 	bl	8002710 <LL_ADC_IsInternalRegulatorEnabled>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10d      	bne.n	800286a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002852:	f043 0210 	orr.w	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800285e:	f043 0201 	orr.w	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ff75 	bl	800275e <LL_ADC_REG_IsConversionOngoing>
 8002874:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	2b00      	cmp	r3, #0
 8002880:	f040 8100 	bne.w	8002a84 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f040 80fc 	bne.w	8002a84 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002890:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002894:	f043 0202 	orr.w	r2, r3, #2
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff49 	bl	8002738 <LL_ADC_IsEnabled>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d111      	bne.n	80028d0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80028b0:	f7ff ff42 	bl	8002738 <LL_ADC_IsEnabled>
 80028b4:	4604      	mov	r4, r0
 80028b6:	487c      	ldr	r0, [pc, #496]	@ (8002aa8 <HAL_ADC_Init+0x2fc>)
 80028b8:	f7ff ff3e 	bl	8002738 <LL_ADC_IsEnabled>
 80028bc:	4603      	mov	r3, r0
 80028be:	4323      	orrs	r3, r4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d105      	bne.n	80028d0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	4619      	mov	r1, r3
 80028ca:	4878      	ldr	r0, [pc, #480]	@ (8002aac <HAL_ADC_Init+0x300>)
 80028cc:	f7ff fd98 	bl	8002400 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	7f5b      	ldrb	r3, [r3, #29]
 80028d4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028da:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80028e0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80028e6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028ee:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d106      	bne.n	800290c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002902:	3b01      	subs	r3, #1
 8002904:	045b      	lsls	r3, r3, #17
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d009      	beq.n	8002928 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002918:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002920:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	4b60      	ldr	r3, [pc, #384]	@ (8002ab0 <HAL_ADC_Init+0x304>)
 8002930:	4013      	ands	r3, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	69b9      	ldr	r1, [r7, #24]
 8002938:	430b      	orrs	r3, r1
 800293a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff ff14 	bl	8002784 <LL_ADC_INJ_IsConversionOngoing>
 800295c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d16d      	bne.n	8002a40 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d16a      	bne.n	8002a40 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800296e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002976:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002986:	f023 0302 	bic.w	r3, r3, #2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	69b9      	ldr	r1, [r7, #24]
 8002990:	430b      	orrs	r3, r1
 8002992:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d017      	beq.n	80029cc <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80029aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80029b4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6911      	ldr	r1, [r2, #16]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80029ca:	e013      	b.n	80029f4 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80029da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029f0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d118      	bne.n	8002a30 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002a08:	f023 0304 	bic.w	r3, r3, #4
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a14:	4311      	orrs	r1, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a1a:	4311      	orrs	r1, r2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a20:	430a      	orrs	r2, r1
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0201 	orr.w	r2, r2, #1
 8002a2c:	611a      	str	r2, [r3, #16]
 8002a2e:	e007      	b.n	8002a40 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d10c      	bne.n	8002a62 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	f023 010f 	bic.w	r1, r3, #15
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	1e5a      	subs	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a60:	e007      	b.n	8002a72 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 020f 	bic.w	r2, r2, #15
 8002a70:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a76:	f023 0303 	bic.w	r3, r3, #3
 8002a7a:	f043 0201 	orr.w	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a82:	e007      	b.n	8002a94 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a88:	f043 0210 	orr.w	r2, r3, #16
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a94:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3724      	adds	r7, #36	@ 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd90      	pop	{r4, r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	053e2d63 	.word	0x053e2d63
 8002aa8:	50000100 	.word	0x50000100
 8002aac:	50000300 	.word	0x50000300
 8002ab0:	fff04007 	.word	0xfff04007

08002ab4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b0b6      	sub	sp, #216	@ 0xd8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x22>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e3c8      	b.n	8003268 <HAL_ADC_ConfigChannel+0x7b4>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fe3b 	bl	800275e <LL_ADC_REG_IsConversionOngoing>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 83ad 	bne.w	800324a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	6859      	ldr	r1, [r3, #4]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	f7ff fd51 	bl	80025a4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fe29 	bl	800275e <LL_ADC_REG_IsConversionOngoing>
 8002b0c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fe35 	bl	8002784 <LL_ADC_INJ_IsConversionOngoing>
 8002b1a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f040 81d9 	bne.w	8002eda <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f040 81d4 	bne.w	8002eda <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b3a:	d10f      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2200      	movs	r2, #0
 8002b46:	4619      	mov	r1, r3
 8002b48:	f7ff fd58 	bl	80025fc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fd12 	bl	800257e <LL_ADC_SetSamplingTimeCommonConfig>
 8002b5a:	e00e      	b.n	8002b7a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	6819      	ldr	r1, [r3, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f7ff fd47 	bl	80025fc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2100      	movs	r1, #0
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fd02 	bl	800257e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	08db      	lsrs	r3, r3, #3
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d022      	beq.n	8002be2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6919      	ldr	r1, [r3, #16]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002bac:	f7ff fc5c 	bl	8002468 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6818      	ldr	r0, [r3, #0]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	6919      	ldr	r1, [r3, #16]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	f7ff fca8 	bl	8002512 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d102      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x124>
 8002bd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bd6:	e000      	b.n	8002bda <HAL_ADC_ConfigChannel+0x126>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f7ff fcb4 	bl	8002548 <LL_ADC_SetOffsetSaturation>
 8002be0:	e17b      	b.n	8002eda <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2100      	movs	r1, #0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fc61 	bl	80024b0 <LL_ADC_GetOffsetChannel>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x15a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fc56 	bl	80024b0 <LL_ADC_GetOffsetChannel>
 8002c04:	4603      	mov	r3, r0
 8002c06:	0e9b      	lsrs	r3, r3, #26
 8002c08:	f003 021f 	and.w	r2, r3, #31
 8002c0c:	e01e      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x198>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2100      	movs	r1, #0
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fc4b 	bl	80024b0 <LL_ADC_GetOffsetChannel>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002c3c:	2320      	movs	r3, #32
 8002c3e:	e004      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002c40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c44:	fab3 f383 	clz	r3, r3
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d105      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x1b0>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0e9b      	lsrs	r3, r3, #26
 8002c5e:	f003 031f 	and.w	r3, r3, #31
 8002c62:	e018      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x1e2>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002c78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002c80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002c88:	2320      	movs	r3, #32
 8002c8a:	e004      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002c8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c90:	fab3 f383 	clz	r3, r3
 8002c94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d106      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fc1a 	bl	80024dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2101      	movs	r1, #1
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fbfe 	bl	80024b0 <LL_ADC_GetOffsetChannel>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10a      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x220>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fbf3 	bl	80024b0 <LL_ADC_GetOffsetChannel>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	0e9b      	lsrs	r3, r3, #26
 8002cce:	f003 021f 	and.w	r2, r3, #31
 8002cd2:	e01e      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x25e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2101      	movs	r1, #1
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fbe8 	bl	80024b0 <LL_ADC_GetOffsetChannel>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002cf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002cf6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002cfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002d02:	2320      	movs	r3, #32
 8002d04:	e004      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002d06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d105      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x276>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	0e9b      	lsrs	r3, r3, #26
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	e018      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x2a8>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002d3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002d46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002d4e:	2320      	movs	r3, #32
 8002d50:	e004      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002d52:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d106      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2200      	movs	r2, #0
 8002d66:	2101      	movs	r1, #1
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fbb7 	bl	80024dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2102      	movs	r1, #2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fb9b 	bl	80024b0 <LL_ADC_GetOffsetChannel>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x2e6>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2102      	movs	r1, #2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fb90 	bl	80024b0 <LL_ADC_GetOffsetChannel>
 8002d90:	4603      	mov	r3, r0
 8002d92:	0e9b      	lsrs	r3, r3, #26
 8002d94:	f003 021f 	and.w	r2, r3, #31
 8002d98:	e01e      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x324>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2102      	movs	r1, #2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fb85 	bl	80024b0 <LL_ADC_GetOffsetChannel>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002db0:	fa93 f3a3 	rbit	r3, r3
 8002db4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002dbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002dc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002dc8:	2320      	movs	r3, #32
 8002dca:	e004      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002dcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002dd0:	fab3 f383 	clz	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d105      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x33c>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	0e9b      	lsrs	r3, r3, #26
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	e016      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x36a>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002dfc:	fa93 f3a3 	rbit	r3, r3
 8002e00:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002e02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002e10:	2320      	movs	r3, #32
 8002e12:	e004      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002e14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e18:	fab3 f383 	clz	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d106      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2200      	movs	r2, #0
 8002e28:	2102      	movs	r1, #2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fb56 	bl	80024dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2103      	movs	r1, #3
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fb3a 	bl	80024b0 <LL_ADC_GetOffsetChannel>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10a      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x3a8>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2103      	movs	r1, #3
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fb2f 	bl	80024b0 <LL_ADC_GetOffsetChannel>
 8002e52:	4603      	mov	r3, r0
 8002e54:	0e9b      	lsrs	r3, r3, #26
 8002e56:	f003 021f 	and.w	r2, r3, #31
 8002e5a:	e017      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x3d8>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2103      	movs	r1, #3
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fb24 	bl	80024b0 <LL_ADC_GetOffsetChannel>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002e74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e76:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002e78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002e7e:	2320      	movs	r3, #32
 8002e80:	e003      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002e82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e84:	fab3 f383 	clz	r3, r3
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d105      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x3f0>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	0e9b      	lsrs	r3, r3, #26
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	e011      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x414>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002eac:	fa93 f3a3 	rbit	r3, r3
 8002eb0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002eb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002eb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002eb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	e003      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002ec0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d106      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2103      	movs	r1, #3
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fb01 	bl	80024dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fc2a 	bl	8002738 <LL_ADC_IsEnabled>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f040 8140 	bne.w	800316c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	6819      	ldr	r1, [r3, #0]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	f7ff fbab 	bl	8002654 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	4a8f      	ldr	r2, [pc, #572]	@ (8003140 <HAL_ADC_ConfigChannel+0x68c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	f040 8131 	bne.w	800316c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10b      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x47e>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	0e9b      	lsrs	r3, r3, #26
 8002f20:	3301      	adds	r3, #1
 8002f22:	f003 031f 	and.w	r3, r3, #31
 8002f26:	2b09      	cmp	r3, #9
 8002f28:	bf94      	ite	ls
 8002f2a:	2301      	movls	r3, #1
 8002f2c:	2300      	movhi	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	e019      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x4b2>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002f40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f42:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002f44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002f4a:	2320      	movs	r3, #32
 8002f4c:	e003      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002f4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f50:	fab3 f383 	clz	r3, r3
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	3301      	adds	r3, #1
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	2b09      	cmp	r3, #9
 8002f5e:	bf94      	ite	ls
 8002f60:	2301      	movls	r3, #1
 8002f62:	2300      	movhi	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d079      	beq.n	800305e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d107      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x4d2>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	0e9b      	lsrs	r3, r3, #26
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	069b      	lsls	r3, r3, #26
 8002f80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f84:	e015      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x4fe>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f96:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002f9e:	2320      	movs	r3, #32
 8002fa0:	e003      	b.n	8002faa <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa4:	fab3 f383 	clz	r3, r3
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	3301      	adds	r3, #1
 8002fac:	069b      	lsls	r3, r3, #26
 8002fae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x51e>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	0e9b      	lsrs	r3, r3, #26
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	2101      	movs	r1, #1
 8002fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd0:	e017      	b.n	8003002 <HAL_ADC_ConfigChannel+0x54e>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002fe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002fe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002fea:	2320      	movs	r3, #32
 8002fec:	e003      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002fee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ff0:	fab3 f383 	clz	r3, r3
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	ea42 0103 	orr.w	r1, r2, r3
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10a      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x574>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	0e9b      	lsrs	r3, r3, #26
 8003018:	3301      	adds	r3, #1
 800301a:	f003 021f 	and.w	r2, r3, #31
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	051b      	lsls	r3, r3, #20
 8003026:	e018      	b.n	800305a <HAL_ADC_ConfigChannel+0x5a6>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003030:	fa93 f3a3 	rbit	r3, r3
 8003034:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003038:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800303a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003040:	2320      	movs	r3, #32
 8003042:	e003      	b.n	800304c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	3301      	adds	r3, #1
 800304e:	f003 021f 	and.w	r2, r3, #31
 8003052:	4613      	mov	r3, r2
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	4413      	add	r3, r2
 8003058:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800305a:	430b      	orrs	r3, r1
 800305c:	e081      	b.n	8003162 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003066:	2b00      	cmp	r3, #0
 8003068:	d107      	bne.n	800307a <HAL_ADC_ConfigChannel+0x5c6>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	0e9b      	lsrs	r3, r3, #26
 8003070:	3301      	adds	r3, #1
 8003072:	069b      	lsls	r3, r3, #26
 8003074:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003078:	e015      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x5f2>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003082:	fa93 f3a3 	rbit	r3, r3
 8003086:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800308c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003092:	2320      	movs	r3, #32
 8003094:	e003      	b.n	800309e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003098:	fab3 f383 	clz	r3, r3
 800309c:	b2db      	uxtb	r3, r3
 800309e:	3301      	adds	r3, #1
 80030a0:	069b      	lsls	r3, r3, #26
 80030a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x612>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	0e9b      	lsrs	r3, r3, #26
 80030b8:	3301      	adds	r3, #1
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	2101      	movs	r1, #1
 80030c0:	fa01 f303 	lsl.w	r3, r1, r3
 80030c4:	e017      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x642>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	fa93 f3a3 	rbit	r3, r3
 80030d2:	61fb      	str	r3, [r7, #28]
  return result;
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80030d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80030de:	2320      	movs	r3, #32
 80030e0:	e003      	b.n	80030ea <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80030e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	3301      	adds	r3, #1
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	2101      	movs	r1, #1
 80030f2:	fa01 f303 	lsl.w	r3, r1, r3
 80030f6:	ea42 0103 	orr.w	r1, r2, r3
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10d      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x66e>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	0e9b      	lsrs	r3, r3, #26
 800310c:	3301      	adds	r3, #1
 800310e:	f003 021f 	and.w	r2, r3, #31
 8003112:	4613      	mov	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4413      	add	r3, r2
 8003118:	3b1e      	subs	r3, #30
 800311a:	051b      	lsls	r3, r3, #20
 800311c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003120:	e01e      	b.n	8003160 <HAL_ADC_ConfigChannel+0x6ac>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	613b      	str	r3, [r7, #16]
  return result;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d104      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800313a:	2320      	movs	r3, #32
 800313c:	e006      	b.n	800314c <HAL_ADC_ConfigChannel+0x698>
 800313e:	bf00      	nop
 8003140:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	fab3 f383 	clz	r3, r3
 800314a:	b2db      	uxtb	r3, r3
 800314c:	3301      	adds	r3, #1
 800314e:	f003 021f 	and.w	r2, r3, #31
 8003152:	4613      	mov	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	3b1e      	subs	r3, #30
 800315a:	051b      	lsls	r3, r3, #20
 800315c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003160:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003166:	4619      	mov	r1, r3
 8003168:	f7ff fa48 	bl	80025fc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b3f      	ldr	r3, [pc, #252]	@ (8003270 <HAL_ADC_ConfigChannel+0x7bc>)
 8003172:	4013      	ands	r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d071      	beq.n	800325c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003178:	483e      	ldr	r0, [pc, #248]	@ (8003274 <HAL_ADC_ConfigChannel+0x7c0>)
 800317a:	f7ff f967 	bl	800244c <LL_ADC_GetCommonPathInternalCh>
 800317e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a3c      	ldr	r2, [pc, #240]	@ (8003278 <HAL_ADC_ConfigChannel+0x7c4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d004      	beq.n	8003196 <HAL_ADC_ConfigChannel+0x6e2>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a3a      	ldr	r2, [pc, #232]	@ (800327c <HAL_ADC_ConfigChannel+0x7c8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d127      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003196:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800319a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d121      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031aa:	d157      	bne.n	800325c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031b4:	4619      	mov	r1, r3
 80031b6:	482f      	ldr	r0, [pc, #188]	@ (8003274 <HAL_ADC_ConfigChannel+0x7c0>)
 80031b8:	f7ff f935 	bl	8002426 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031bc:	4b30      	ldr	r3, [pc, #192]	@ (8003280 <HAL_ADC_ConfigChannel+0x7cc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	099b      	lsrs	r3, r3, #6
 80031c2:	4a30      	ldr	r2, [pc, #192]	@ (8003284 <HAL_ADC_ConfigChannel+0x7d0>)
 80031c4:	fba2 2303 	umull	r2, r3, r2, r3
 80031c8:	099b      	lsrs	r3, r3, #6
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	4613      	mov	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031d6:	e002      	b.n	80031de <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3b01      	subs	r3, #1
 80031dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f9      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031e4:	e03a      	b.n	800325c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a27      	ldr	r2, [pc, #156]	@ (8003288 <HAL_ADC_ConfigChannel+0x7d4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d113      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10d      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a22      	ldr	r2, [pc, #136]	@ (800328c <HAL_ADC_ConfigChannel+0x7d8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d02a      	beq.n	800325c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003206:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800320a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800320e:	4619      	mov	r1, r3
 8003210:	4818      	ldr	r0, [pc, #96]	@ (8003274 <HAL_ADC_ConfigChannel+0x7c0>)
 8003212:	f7ff f908 	bl	8002426 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003216:	e021      	b.n	800325c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1c      	ldr	r2, [pc, #112]	@ (8003290 <HAL_ADC_ConfigChannel+0x7dc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d11c      	bne.n	800325c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003222:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d116      	bne.n	800325c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a16      	ldr	r2, [pc, #88]	@ (800328c <HAL_ADC_ConfigChannel+0x7d8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d011      	beq.n	800325c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003238:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800323c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003240:	4619      	mov	r1, r3
 8003242:	480c      	ldr	r0, [pc, #48]	@ (8003274 <HAL_ADC_ConfigChannel+0x7c0>)
 8003244:	f7ff f8ef 	bl	8002426 <LL_ADC_SetCommonPathInternalCh>
 8003248:	e008      	b.n	800325c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324e:	f043 0220 	orr.w	r2, r3, #32
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003264:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003268:	4618      	mov	r0, r3
 800326a:	37d8      	adds	r7, #216	@ 0xd8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	80080000 	.word	0x80080000
 8003274:	50000300 	.word	0x50000300
 8003278:	c3210000 	.word	0xc3210000
 800327c:	90c00010 	.word	0x90c00010
 8003280:	20000000 	.word	0x20000000
 8003284:	053e2d63 	.word	0x053e2d63
 8003288:	c7520000 	.word	0xc7520000
 800328c:	50000100 	.word	0x50000100
 8003290:	cb840000 	.word	0xcb840000

08003294 <LL_ADC_IsEnabled>:
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <LL_ADC_IsEnabled+0x18>
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <LL_ADC_IsEnabled+0x1a>
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <LL_ADC_REG_IsConversionOngoing>:
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d101      	bne.n	80032d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b0a1      	sub	sp, #132	@ 0x84
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e08b      	b.n	8003416 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003306:	2300      	movs	r3, #0
 8003308:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800330a:	2300      	movs	r3, #0
 800330c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003316:	d102      	bne.n	800331e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003318:	4b41      	ldr	r3, [pc, #260]	@ (8003420 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	e001      	b.n	8003322 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800331e:	2300      	movs	r3, #0
 8003320:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10b      	bne.n	8003340 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332c:	f043 0220 	orr.w	r2, r3, #32
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e06a      	b.n	8003416 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff ffb9 	bl	80032ba <LL_ADC_REG_IsConversionOngoing>
 8003348:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff ffb3 	bl	80032ba <LL_ADC_REG_IsConversionOngoing>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d14c      	bne.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800335a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800335c:	2b00      	cmp	r3, #0
 800335e:	d149      	bne.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003360:	4b30      	ldr	r3, [pc, #192]	@ (8003424 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003362:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d028      	beq.n	80033be <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800336c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800337e:	035b      	lsls	r3, r3, #13
 8003380:	430b      	orrs	r3, r1
 8003382:	431a      	orrs	r2, r3
 8003384:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003386:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003388:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800338c:	f7ff ff82 	bl	8003294 <LL_ADC_IsEnabled>
 8003390:	4604      	mov	r4, r0
 8003392:	4823      	ldr	r0, [pc, #140]	@ (8003420 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003394:	f7ff ff7e 	bl	8003294 <LL_ADC_IsEnabled>
 8003398:	4603      	mov	r3, r0
 800339a:	4323      	orrs	r3, r4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d133      	bne.n	8003408 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80033a8:	f023 030f 	bic.w	r3, r3, #15
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	6811      	ldr	r1, [r2, #0]
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	6892      	ldr	r2, [r2, #8]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	431a      	orrs	r2, r3
 80033b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033ba:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033bc:	e024      	b.n	8003408 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033c8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033ca:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80033ce:	f7ff ff61 	bl	8003294 <LL_ADC_IsEnabled>
 80033d2:	4604      	mov	r4, r0
 80033d4:	4812      	ldr	r0, [pc, #72]	@ (8003420 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80033d6:	f7ff ff5d 	bl	8003294 <LL_ADC_IsEnabled>
 80033da:	4603      	mov	r3, r0
 80033dc:	4323      	orrs	r3, r4
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d112      	bne.n	8003408 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80033ea:	f023 030f 	bic.w	r3, r3, #15
 80033ee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80033f0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033f2:	e009      	b.n	8003408 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f8:	f043 0220 	orr.w	r2, r3, #32
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003406:	e000      	b.n	800340a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003408:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003412:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003416:	4618      	mov	r0, r3
 8003418:	3784      	adds	r7, #132	@ 0x84
 800341a:	46bd      	mov	sp, r7
 800341c:	bd90      	pop	{r4, r7, pc}
 800341e:	bf00      	nop
 8003420:	50000100 	.word	0x50000100
 8003424:	50000300 	.word	0x50000300

08003428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003438:	4b0c      	ldr	r3, [pc, #48]	@ (800346c <__NVIC_SetPriorityGrouping+0x44>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003444:	4013      	ands	r3, r2
 8003446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003450:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800345a:	4a04      	ldr	r2, [pc, #16]	@ (800346c <__NVIC_SetPriorityGrouping+0x44>)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	60d3      	str	r3, [r2, #12]
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	e000ed00 	.word	0xe000ed00

08003470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003474:	4b04      	ldr	r3, [pc, #16]	@ (8003488 <__NVIC_GetPriorityGrouping+0x18>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	0a1b      	lsrs	r3, r3, #8
 800347a:	f003 0307 	and.w	r3, r3, #7
}
 800347e:	4618      	mov	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	6039      	str	r1, [r7, #0]
 8003496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349c:	2b00      	cmp	r3, #0
 800349e:	db0a      	blt.n	80034b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	490c      	ldr	r1, [pc, #48]	@ (80034d8 <__NVIC_SetPriority+0x4c>)
 80034a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034aa:	0112      	lsls	r2, r2, #4
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	440b      	add	r3, r1
 80034b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034b4:	e00a      	b.n	80034cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	4908      	ldr	r1, [pc, #32]	@ (80034dc <__NVIC_SetPriority+0x50>)
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	3b04      	subs	r3, #4
 80034c4:	0112      	lsls	r2, r2, #4
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	440b      	add	r3, r1
 80034ca:	761a      	strb	r2, [r3, #24]
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000e100 	.word	0xe000e100
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b089      	sub	sp, #36	@ 0x24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f1c3 0307 	rsb	r3, r3, #7
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	bf28      	it	cs
 80034fe:	2304      	movcs	r3, #4
 8003500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3304      	adds	r3, #4
 8003506:	2b06      	cmp	r3, #6
 8003508:	d902      	bls.n	8003510 <NVIC_EncodePriority+0x30>
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3b03      	subs	r3, #3
 800350e:	e000      	b.n	8003512 <NVIC_EncodePriority+0x32>
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003514:	f04f 32ff 	mov.w	r2, #4294967295
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43da      	mvns	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	401a      	ands	r2, r3
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003528:	f04f 31ff 	mov.w	r1, #4294967295
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	fa01 f303 	lsl.w	r3, r1, r3
 8003532:	43d9      	mvns	r1, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003538:	4313      	orrs	r3, r2
         );
}
 800353a:	4618      	mov	r0, r3
 800353c:	3724      	adds	r7, #36	@ 0x24
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3b01      	subs	r3, #1
 8003554:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003558:	d301      	bcc.n	800355e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800355a:	2301      	movs	r3, #1
 800355c:	e00f      	b.n	800357e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800355e:	4a0a      	ldr	r2, [pc, #40]	@ (8003588 <SysTick_Config+0x40>)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3b01      	subs	r3, #1
 8003564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003566:	210f      	movs	r1, #15
 8003568:	f04f 30ff 	mov.w	r0, #4294967295
 800356c:	f7ff ff8e 	bl	800348c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003570:	4b05      	ldr	r3, [pc, #20]	@ (8003588 <SysTick_Config+0x40>)
 8003572:	2200      	movs	r2, #0
 8003574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003576:	4b04      	ldr	r3, [pc, #16]	@ (8003588 <SysTick_Config+0x40>)
 8003578:	2207      	movs	r2, #7
 800357a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	e000e010 	.word	0xe000e010

0800358c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff ff47 	bl	8003428 <__NVIC_SetPriorityGrouping>
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b086      	sub	sp, #24
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	4603      	mov	r3, r0
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035b0:	f7ff ff5e 	bl	8003470 <__NVIC_GetPriorityGrouping>
 80035b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	6978      	ldr	r0, [r7, #20]
 80035bc:	f7ff ff90 	bl	80034e0 <NVIC_EncodePriority>
 80035c0:	4602      	mov	r2, r0
 80035c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035c6:	4611      	mov	r1, r2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ff5f 	bl	800348c <__NVIC_SetPriority>
}
 80035ce:	bf00      	nop
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff ffb2 	bl	8003548 <SysTick_Config>
 80035e4:	4603      	mov	r3, r0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80035fe:	e15a      	b.n	80038b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	2101      	movs	r1, #1
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	fa01 f303 	lsl.w	r3, r1, r3
 800360c:	4013      	ands	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 814c 	beq.w	80038b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	2b01      	cmp	r3, #1
 8003622:	d005      	beq.n	8003630 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800362c:	2b02      	cmp	r3, #2
 800362e:	d130      	bne.n	8003692 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	2203      	movs	r2, #3
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003666:	2201      	movs	r2, #1
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	f003 0201 	and.w	r2, r3, #1
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b03      	cmp	r3, #3
 800369c:	d017      	beq.n	80036ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	2203      	movs	r2, #3
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43db      	mvns	r3, r3
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4013      	ands	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d123      	bne.n	8003722 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	08da      	lsrs	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3208      	adds	r2, #8
 80036e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	220f      	movs	r2, #15
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4013      	ands	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	08da      	lsrs	r2, r3, #3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3208      	adds	r2, #8
 800371c:	6939      	ldr	r1, [r7, #16]
 800371e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	2203      	movs	r2, #3
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4013      	ands	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 0203 	and.w	r2, r3, #3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 80a6 	beq.w	80038b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003764:	4b5b      	ldr	r3, [pc, #364]	@ (80038d4 <HAL_GPIO_Init+0x2e4>)
 8003766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003768:	4a5a      	ldr	r2, [pc, #360]	@ (80038d4 <HAL_GPIO_Init+0x2e4>)
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003770:	4b58      	ldr	r3, [pc, #352]	@ (80038d4 <HAL_GPIO_Init+0x2e4>)
 8003772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800377c:	4a56      	ldr	r2, [pc, #344]	@ (80038d8 <HAL_GPIO_Init+0x2e8>)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	089b      	lsrs	r3, r3, #2
 8003782:	3302      	adds	r3, #2
 8003784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003788:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	220f      	movs	r2, #15
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4013      	ands	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80037a6:	d01f      	beq.n	80037e8 <HAL_GPIO_Init+0x1f8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a4c      	ldr	r2, [pc, #304]	@ (80038dc <HAL_GPIO_Init+0x2ec>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d019      	beq.n	80037e4 <HAL_GPIO_Init+0x1f4>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a4b      	ldr	r2, [pc, #300]	@ (80038e0 <HAL_GPIO_Init+0x2f0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d013      	beq.n	80037e0 <HAL_GPIO_Init+0x1f0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a4a      	ldr	r2, [pc, #296]	@ (80038e4 <HAL_GPIO_Init+0x2f4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00d      	beq.n	80037dc <HAL_GPIO_Init+0x1ec>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a49      	ldr	r2, [pc, #292]	@ (80038e8 <HAL_GPIO_Init+0x2f8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d007      	beq.n	80037d8 <HAL_GPIO_Init+0x1e8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a48      	ldr	r2, [pc, #288]	@ (80038ec <HAL_GPIO_Init+0x2fc>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d101      	bne.n	80037d4 <HAL_GPIO_Init+0x1e4>
 80037d0:	2305      	movs	r3, #5
 80037d2:	e00a      	b.n	80037ea <HAL_GPIO_Init+0x1fa>
 80037d4:	2306      	movs	r3, #6
 80037d6:	e008      	b.n	80037ea <HAL_GPIO_Init+0x1fa>
 80037d8:	2304      	movs	r3, #4
 80037da:	e006      	b.n	80037ea <HAL_GPIO_Init+0x1fa>
 80037dc:	2303      	movs	r3, #3
 80037de:	e004      	b.n	80037ea <HAL_GPIO_Init+0x1fa>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e002      	b.n	80037ea <HAL_GPIO_Init+0x1fa>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <HAL_GPIO_Init+0x1fa>
 80037e8:	2300      	movs	r3, #0
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	f002 0203 	and.w	r2, r2, #3
 80037f0:	0092      	lsls	r2, r2, #2
 80037f2:	4093      	lsls	r3, r2
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037fa:	4937      	ldr	r1, [pc, #220]	@ (80038d8 <HAL_GPIO_Init+0x2e8>)
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	089b      	lsrs	r3, r3, #2
 8003800:	3302      	adds	r3, #2
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003808:	4b39      	ldr	r3, [pc, #228]	@ (80038f0 <HAL_GPIO_Init+0x300>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	43db      	mvns	r3, r3
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800382c:	4a30      	ldr	r2, [pc, #192]	@ (80038f0 <HAL_GPIO_Init+0x300>)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003832:	4b2f      	ldr	r3, [pc, #188]	@ (80038f0 <HAL_GPIO_Init+0x300>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	43db      	mvns	r3, r3
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4013      	ands	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003856:	4a26      	ldr	r2, [pc, #152]	@ (80038f0 <HAL_GPIO_Init+0x300>)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800385c:	4b24      	ldr	r3, [pc, #144]	@ (80038f0 <HAL_GPIO_Init+0x300>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	43db      	mvns	r3, r3
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4013      	ands	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003880:	4a1b      	ldr	r2, [pc, #108]	@ (80038f0 <HAL_GPIO_Init+0x300>)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003886:	4b1a      	ldr	r3, [pc, #104]	@ (80038f0 <HAL_GPIO_Init+0x300>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	43db      	mvns	r3, r3
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4013      	ands	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038aa:	4a11      	ldr	r2, [pc, #68]	@ (80038f0 <HAL_GPIO_Init+0x300>)
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	3301      	adds	r3, #1
 80038b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	fa22 f303 	lsr.w	r3, r2, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f47f ae9d 	bne.w	8003600 <HAL_GPIO_Init+0x10>
  }
}
 80038c6:	bf00      	nop
 80038c8:	bf00      	nop
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40010000 	.word	0x40010000
 80038dc:	48000400 	.word	0x48000400
 80038e0:	48000800 	.word	0x48000800
 80038e4:	48000c00 	.word	0x48000c00
 80038e8:	48001000 	.word	0x48001000
 80038ec:	48001400 	.word	0x48001400
 80038f0:	40010400 	.word	0x40010400

080038f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]
 8003900:	4613      	mov	r3, r2
 8003902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003904:	787b      	ldrb	r3, [r7, #1]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003910:	e002      	b.n	8003918 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003912:	887a      	ldrh	r2, [r7, #2]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d141      	bne.n	80039b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003932:	4b4b      	ldr	r3, [pc, #300]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800393a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800393e:	d131      	bne.n	80039a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003940:	4b47      	ldr	r3, [pc, #284]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003946:	4a46      	ldr	r2, [pc, #280]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800394c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003950:	4b43      	ldr	r3, [pc, #268]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003958:	4a41      	ldr	r2, [pc, #260]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800395a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800395e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003960:	4b40      	ldr	r3, [pc, #256]	@ (8003a64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2232      	movs	r2, #50	@ 0x32
 8003966:	fb02 f303 	mul.w	r3, r2, r3
 800396a:	4a3f      	ldr	r2, [pc, #252]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800396c:	fba2 2303 	umull	r2, r3, r2, r3
 8003970:	0c9b      	lsrs	r3, r3, #18
 8003972:	3301      	adds	r3, #1
 8003974:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003976:	e002      	b.n	800397e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	3b01      	subs	r3, #1
 800397c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800397e:	4b38      	ldr	r3, [pc, #224]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800398a:	d102      	bne.n	8003992 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f2      	bne.n	8003978 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003992:	4b33      	ldr	r3, [pc, #204]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800399a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800399e:	d158      	bne.n	8003a52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e057      	b.n	8003a54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80039b4:	e04d      	b.n	8003a52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039bc:	d141      	bne.n	8003a42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039be:	4b28      	ldr	r3, [pc, #160]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ca:	d131      	bne.n	8003a30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039cc:	4b24      	ldr	r3, [pc, #144]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039d2:	4a23      	ldr	r2, [pc, #140]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039dc:	4b20      	ldr	r3, [pc, #128]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003a64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2232      	movs	r2, #50	@ 0x32
 80039f2:	fb02 f303 	mul.w	r3, r2, r3
 80039f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039f8:	fba2 2303 	umull	r2, r3, r2, r3
 80039fc:	0c9b      	lsrs	r3, r3, #18
 80039fe:	3301      	adds	r3, #1
 8003a00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a02:	e002      	b.n	8003a0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a0a:	4b15      	ldr	r3, [pc, #84]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a16:	d102      	bne.n	8003a1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f2      	bne.n	8003a04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a1e:	4b10      	ldr	r3, [pc, #64]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a2a:	d112      	bne.n	8003a52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e011      	b.n	8003a54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a30:	4b0b      	ldr	r3, [pc, #44]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a36:	4a0a      	ldr	r2, [pc, #40]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003a40:	e007      	b.n	8003a52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a42:	4b07      	ldr	r3, [pc, #28]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a4a:	4a05      	ldr	r2, [pc, #20]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a50:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	40007000 	.word	0x40007000
 8003a64:	20000000 	.word	0x20000000
 8003a68:	431bde83 	.word	0x431bde83

08003a6c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003a70:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4a04      	ldr	r2, [pc, #16]	@ (8003a88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a7a:	6093      	str	r3, [r2, #8]
}
 8003a7c:	bf00      	nop
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40007000 	.word	0x40007000

08003a8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e2fe      	b.n	800409c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d075      	beq.n	8003b96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aaa:	4b97      	ldr	r3, [pc, #604]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ab4:	4b94      	ldr	r3, [pc, #592]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	2b0c      	cmp	r3, #12
 8003ac2:	d102      	bne.n	8003aca <HAL_RCC_OscConfig+0x3e>
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d002      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x44>
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d10b      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad0:	4b8d      	ldr	r3, [pc, #564]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d05b      	beq.n	8003b94 <HAL_RCC_OscConfig+0x108>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d157      	bne.n	8003b94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e2d9      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af0:	d106      	bne.n	8003b00 <HAL_RCC_OscConfig+0x74>
 8003af2:	4b85      	ldr	r3, [pc, #532]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a84      	ldr	r2, [pc, #528]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	e01d      	b.n	8003b3c <HAL_RCC_OscConfig+0xb0>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b08:	d10c      	bne.n	8003b24 <HAL_RCC_OscConfig+0x98>
 8003b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003b10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	4b7c      	ldr	r3, [pc, #496]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a7b      	ldr	r2, [pc, #492]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e00b      	b.n	8003b3c <HAL_RCC_OscConfig+0xb0>
 8003b24:	4b78      	ldr	r3, [pc, #480]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a77      	ldr	r2, [pc, #476]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003b2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	4b75      	ldr	r3, [pc, #468]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a74      	ldr	r2, [pc, #464]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003b36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d013      	beq.n	8003b6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fe fc2e 	bl	80023a4 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b4c:	f7fe fc2a 	bl	80023a4 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	@ 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e29e      	b.n	800409c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0xc0>
 8003b6a:	e014      	b.n	8003b96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fe fc1a 	bl	80023a4 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b74:	f7fe fc16 	bl	80023a4 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	@ 0x64
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e28a      	b.n	800409c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b86:	4b60      	ldr	r3, [pc, #384]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0xe8>
 8003b92:	e000      	b.n	8003b96 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d075      	beq.n	8003c8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ba2:	4b59      	ldr	r3, [pc, #356]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bac:	4b56      	ldr	r3, [pc, #344]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	2b0c      	cmp	r3, #12
 8003bba:	d102      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x136>
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d002      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x13c>
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d11f      	bne.n	8003c08 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc8:	4b4f      	ldr	r3, [pc, #316]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_RCC_OscConfig+0x154>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e25d      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be0:	4b49      	ldr	r3, [pc, #292]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	061b      	lsls	r3, r3, #24
 8003bee:	4946      	ldr	r1, [pc, #280]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003bf4:	4b45      	ldr	r3, [pc, #276]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fe fb87 	bl	800230c <HAL_InitTick>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d043      	beq.n	8003c8c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e249      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d023      	beq.n	8003c58 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c10:	4b3d      	ldr	r3, [pc, #244]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a3c      	ldr	r2, [pc, #240]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fe fbc2 	bl	80023a4 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c24:	f7fe fbbe 	bl	80023a4 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e232      	b.n	800409c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c36:	4b34      	ldr	r3, [pc, #208]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f0      	beq.n	8003c24 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c42:	4b31      	ldr	r3, [pc, #196]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	061b      	lsls	r3, r3, #24
 8003c50:	492d      	ldr	r1, [pc, #180]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	604b      	str	r3, [r1, #4]
 8003c56:	e01a      	b.n	8003c8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c58:	4b2b      	ldr	r3, [pc, #172]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a2a      	ldr	r2, [pc, #168]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003c5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7fe fb9e 	bl	80023a4 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c6c:	f7fe fb9a 	bl	80023a4 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e20e      	b.n	800409c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c7e:	4b22      	ldr	r3, [pc, #136]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x1e0>
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d041      	beq.n	8003d1e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01c      	beq.n	8003cdc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ca2:	4b19      	ldr	r3, [pc, #100]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ca8:	4a17      	ldr	r2, [pc, #92]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb2:	f7fe fb77 	bl	80023a4 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cba:	f7fe fb73 	bl	80023a4 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e1e7      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0ef      	beq.n	8003cba <HAL_RCC_OscConfig+0x22e>
 8003cda:	e020      	b.n	8003d1e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ce2:	4a09      	ldr	r2, [pc, #36]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cec:	f7fe fb5a 	bl	80023a4 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cf2:	e00d      	b.n	8003d10 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf4:	f7fe fb56 	bl	80023a4 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d906      	bls.n	8003d10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e1ca      	b.n	800409c <HAL_RCC_OscConfig+0x610>
 8003d06:	bf00      	nop
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d10:	4b8c      	ldr	r3, [pc, #560]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1ea      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 80a6 	beq.w	8003e78 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d30:	4b84      	ldr	r3, [pc, #528]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_RCC_OscConfig+0x2b4>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <HAL_RCC_OscConfig+0x2b6>
 8003d40:	2300      	movs	r3, #0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00d      	beq.n	8003d62 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	4b7f      	ldr	r3, [pc, #508]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d50:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d52:	4b7c      	ldr	r3, [pc, #496]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d62:	4b79      	ldr	r3, [pc, #484]	@ (8003f48 <HAL_RCC_OscConfig+0x4bc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d118      	bne.n	8003da0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d6e:	4b76      	ldr	r3, [pc, #472]	@ (8003f48 <HAL_RCC_OscConfig+0x4bc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a75      	ldr	r2, [pc, #468]	@ (8003f48 <HAL_RCC_OscConfig+0x4bc>)
 8003d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d7a:	f7fe fb13 	bl	80023a4 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d82:	f7fe fb0f 	bl	80023a4 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e183      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d94:	4b6c      	ldr	r3, [pc, #432]	@ (8003f48 <HAL_RCC_OscConfig+0x4bc>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d108      	bne.n	8003dba <HAL_RCC_OscConfig+0x32e>
 8003da8:	4b66      	ldr	r3, [pc, #408]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dae:	4a65      	ldr	r2, [pc, #404]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003db8:	e024      	b.n	8003e04 <HAL_RCC_OscConfig+0x378>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b05      	cmp	r3, #5
 8003dc0:	d110      	bne.n	8003de4 <HAL_RCC_OscConfig+0x358>
 8003dc2:	4b60      	ldr	r3, [pc, #384]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc8:	4a5e      	ldr	r2, [pc, #376]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003dca:	f043 0304 	orr.w	r3, r3, #4
 8003dce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dd2:	4b5c      	ldr	r3, [pc, #368]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd8:	4a5a      	ldr	r2, [pc, #360]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003de2:	e00f      	b.n	8003e04 <HAL_RCC_OscConfig+0x378>
 8003de4:	4b57      	ldr	r3, [pc, #348]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dea:	4a56      	ldr	r2, [pc, #344]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003df4:	4b53      	ldr	r3, [pc, #332]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfa:	4a52      	ldr	r2, [pc, #328]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d016      	beq.n	8003e3a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0c:	f7fe faca 	bl	80023a4 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e14:	f7fe fac6 	bl	80023a4 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e138      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2a:	4b46      	ldr	r3, [pc, #280]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0ed      	beq.n	8003e14 <HAL_RCC_OscConfig+0x388>
 8003e38:	e015      	b.n	8003e66 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3a:	f7fe fab3 	bl	80023a4 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e40:	e00a      	b.n	8003e58 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e42:	f7fe faaf 	bl	80023a4 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e121      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e58:	4b3a      	ldr	r3, [pc, #232]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1ed      	bne.n	8003e42 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e66:	7ffb      	ldrb	r3, [r7, #31]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6c:	4b35      	ldr	r3, [pc, #212]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e70:	4a34      	ldr	r2, [pc, #208]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003e72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e76:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d03c      	beq.n	8003efe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01c      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e92:	4a2c      	ldr	r2, [pc, #176]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9c:	f7fe fa82 	bl	80023a4 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ea4:	f7fe fa7e 	bl	80023a4 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e0f2      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003eb6:	4b23      	ldr	r3, [pc, #140]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0ef      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x418>
 8003ec4:	e01b      	b.n	8003efe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003ec8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003ece:	f023 0301 	bic.w	r3, r3, #1
 8003ed2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed6:	f7fe fa65 	bl	80023a4 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ede:	f7fe fa61 	bl	80023a4 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0d5      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ef0:	4b14      	ldr	r3, [pc, #80]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1ef      	bne.n	8003ede <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80c9 	beq.w	800409a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f08:	4b0e      	ldr	r3, [pc, #56]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 030c 	and.w	r3, r3, #12
 8003f10:	2b0c      	cmp	r3, #12
 8003f12:	f000 8083 	beq.w	800401c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d15e      	bne.n	8003fdc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f1e:	4b09      	ldr	r3, [pc, #36]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a08      	ldr	r2, [pc, #32]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003f24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2a:	f7fe fa3b 	bl	80023a4 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f30:	e00c      	b.n	8003f4c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f32:	f7fe fa37 	bl	80023a4 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d905      	bls.n	8003f4c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e0ab      	b.n	800409c <HAL_RCC_OscConfig+0x610>
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f4c:	4b55      	ldr	r3, [pc, #340]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1ec      	bne.n	8003f32 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f58:	4b52      	ldr	r3, [pc, #328]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	4b52      	ldr	r3, [pc, #328]	@ (80040a8 <HAL_RCC_OscConfig+0x61c>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6a11      	ldr	r1, [r2, #32]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f68:	3a01      	subs	r2, #1
 8003f6a:	0112      	lsls	r2, r2, #4
 8003f6c:	4311      	orrs	r1, r2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003f72:	0212      	lsls	r2, r2, #8
 8003f74:	4311      	orrs	r1, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f7a:	0852      	lsrs	r2, r2, #1
 8003f7c:	3a01      	subs	r2, #1
 8003f7e:	0552      	lsls	r2, r2, #21
 8003f80:	4311      	orrs	r1, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f86:	0852      	lsrs	r2, r2, #1
 8003f88:	3a01      	subs	r2, #1
 8003f8a:	0652      	lsls	r2, r2, #25
 8003f8c:	4311      	orrs	r1, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f92:	06d2      	lsls	r2, r2, #27
 8003f94:	430a      	orrs	r2, r1
 8003f96:	4943      	ldr	r1, [pc, #268]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f9c:	4b41      	ldr	r3, [pc, #260]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a40      	ldr	r2, [pc, #256]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8003fa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fa6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fa8:	4b3e      	ldr	r3, [pc, #248]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4a3d      	ldr	r2, [pc, #244]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8003fae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fb2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7fe f9f6 	bl	80023a4 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fe f9f2 	bl	80023a4 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e066      	b.n	800409c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fce:	4b35      	ldr	r3, [pc, #212]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0x530>
 8003fda:	e05e      	b.n	800409a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fdc:	4b31      	ldr	r3, [pc, #196]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a30      	ldr	r2, [pc, #192]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8003fe2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fe f9dc 	bl	80023a4 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fe f9d8 	bl	80023a4 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e04c      	b.n	800409c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004002:	4b28      	ldr	r3, [pc, #160]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800400e:	4b25      	ldr	r3, [pc, #148]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	4924      	ldr	r1, [pc, #144]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8004014:	4b25      	ldr	r3, [pc, #148]	@ (80040ac <HAL_RCC_OscConfig+0x620>)
 8004016:	4013      	ands	r3, r2
 8004018:	60cb      	str	r3, [r1, #12]
 800401a:	e03e      	b.n	800409a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e039      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004028:	4b1e      	ldr	r3, [pc, #120]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f003 0203 	and.w	r2, r3, #3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	429a      	cmp	r2, r3
 800403a:	d12c      	bne.n	8004096 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004046:	3b01      	subs	r3, #1
 8004048:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404a:	429a      	cmp	r2, r3
 800404c:	d123      	bne.n	8004096 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004058:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800405a:	429a      	cmp	r2, r3
 800405c:	d11b      	bne.n	8004096 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004068:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d113      	bne.n	8004096 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	3b01      	subs	r3, #1
 800407c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d109      	bne.n	8004096 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408c:	085b      	lsrs	r3, r3, #1
 800408e:	3b01      	subs	r3, #1
 8004090:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d001      	beq.n	800409a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3720      	adds	r7, #32
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40021000 	.word	0x40021000
 80040a8:	019f800c 	.word	0x019f800c
 80040ac:	feeefffc 	.word	0xfeeefffc

080040b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e11e      	b.n	8004306 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040c8:	4b91      	ldr	r3, [pc, #580]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d910      	bls.n	80040f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d6:	4b8e      	ldr	r3, [pc, #568]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 020f 	bic.w	r2, r3, #15
 80040de:	498c      	ldr	r1, [pc, #560]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e6:	4b8a      	ldr	r3, [pc, #552]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d001      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e106      	b.n	8004306 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d073      	beq.n	80041ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b03      	cmp	r3, #3
 800410a:	d129      	bne.n	8004160 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800410c:	4b81      	ldr	r3, [pc, #516]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0f4      	b.n	8004306 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800411c:	f000 f99c 	bl	8004458 <RCC_GetSysClockFreqFromPLLSource>
 8004120:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4a7c      	ldr	r2, [pc, #496]	@ (8004318 <HAL_RCC_ClockConfig+0x268>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d93f      	bls.n	80041aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800412a:	4b7a      	ldr	r3, [pc, #488]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800413e:	2b00      	cmp	r3, #0
 8004140:	d033      	beq.n	80041aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004146:	2b00      	cmp	r3, #0
 8004148:	d12f      	bne.n	80041aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800414a:	4b72      	ldr	r3, [pc, #456]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004152:	4a70      	ldr	r2, [pc, #448]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 8004154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004158:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800415a:	2380      	movs	r3, #128	@ 0x80
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	e024      	b.n	80041aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d107      	bne.n	8004178 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004168:	4b6a      	ldr	r3, [pc, #424]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d109      	bne.n	8004188 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0c6      	b.n	8004306 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004178:	4b66      	ldr	r3, [pc, #408]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e0be      	b.n	8004306 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004188:	f000 f8ce 	bl	8004328 <HAL_RCC_GetSysClockFreq>
 800418c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4a61      	ldr	r2, [pc, #388]	@ (8004318 <HAL_RCC_ClockConfig+0x268>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d909      	bls.n	80041aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004196:	4b5f      	ldr	r3, [pc, #380]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800419e:	4a5d      	ldr	r2, [pc, #372]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 80041a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80041a6:	2380      	movs	r3, #128	@ 0x80
 80041a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041aa:	4b5a      	ldr	r3, [pc, #360]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f023 0203 	bic.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4957      	ldr	r1, [pc, #348]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041bc:	f7fe f8f2 	bl	80023a4 <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c2:	e00a      	b.n	80041da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c4:	f7fe f8ee 	bl	80023a4 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e095      	b.n	8004306 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	4b4e      	ldr	r3, [pc, #312]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 020c 	and.w	r2, r3, #12
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d1eb      	bne.n	80041c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d023      	beq.n	8004240 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004204:	4b43      	ldr	r3, [pc, #268]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4a42      	ldr	r2, [pc, #264]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 800420a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800420e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b00      	cmp	r3, #0
 800421a:	d007      	beq.n	800422c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800421c:	4b3d      	ldr	r3, [pc, #244]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004224:	4a3b      	ldr	r2, [pc, #236]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 8004226:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800422a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800422c:	4b39      	ldr	r3, [pc, #228]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	4936      	ldr	r1, [pc, #216]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
 800423e:	e008      	b.n	8004252 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2b80      	cmp	r3, #128	@ 0x80
 8004244:	d105      	bne.n	8004252 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004246:	4b33      	ldr	r3, [pc, #204]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	4a32      	ldr	r2, [pc, #200]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 800424c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004250:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004252:	4b2f      	ldr	r3, [pc, #188]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d21d      	bcs.n	800429c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004260:	4b2b      	ldr	r3, [pc, #172]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f023 020f 	bic.w	r2, r3, #15
 8004268:	4929      	ldr	r1, [pc, #164]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	4313      	orrs	r3, r2
 800426e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004270:	f7fe f898 	bl	80023a4 <HAL_GetTick>
 8004274:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004276:	e00a      	b.n	800428e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004278:	f7fe f894 	bl	80023a4 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e03b      	b.n	8004306 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800428e:	4b20      	ldr	r3, [pc, #128]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d1ed      	bne.n	8004278 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4917      	ldr	r1, [pc, #92]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d009      	beq.n	80042da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042c6:	4b13      	ldr	r3, [pc, #76]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	490f      	ldr	r1, [pc, #60]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042da:	f000 f825 	bl	8004328 <HAL_RCC_GetSysClockFreq>
 80042de:	4602      	mov	r2, r0
 80042e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	091b      	lsrs	r3, r3, #4
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	490c      	ldr	r1, [pc, #48]	@ (800431c <HAL_RCC_ClockConfig+0x26c>)
 80042ec:	5ccb      	ldrb	r3, [r1, r3]
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	fa22 f303 	lsr.w	r3, r2, r3
 80042f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004320 <HAL_RCC_ClockConfig+0x270>)
 80042f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004324 <HAL_RCC_ClockConfig+0x274>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fe f804 	bl	800230c <HAL_InitTick>
 8004304:	4603      	mov	r3, r0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40022000 	.word	0x40022000
 8004314:	40021000 	.word	0x40021000
 8004318:	04c4b400 	.word	0x04c4b400
 800431c:	0800bbd0 	.word	0x0800bbd0
 8004320:	20000000 	.word	0x20000000
 8004324:	20000004 	.word	0x20000004

08004328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800432e:	4b2c      	ldr	r3, [pc, #176]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	2b04      	cmp	r3, #4
 8004338:	d102      	bne.n	8004340 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800433a:	4b2a      	ldr	r3, [pc, #168]	@ (80043e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	e047      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004340:	4b27      	ldr	r3, [pc, #156]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 030c 	and.w	r3, r3, #12
 8004348:	2b08      	cmp	r3, #8
 800434a:	d102      	bne.n	8004352 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800434c:	4b25      	ldr	r3, [pc, #148]	@ (80043e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	e03e      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004352:	4b23      	ldr	r3, [pc, #140]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
 800435a:	2b0c      	cmp	r3, #12
 800435c:	d136      	bne.n	80043cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800435e:	4b20      	ldr	r3, [pc, #128]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004368:	4b1d      	ldr	r3, [pc, #116]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	3301      	adds	r3, #1
 8004374:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b03      	cmp	r3, #3
 800437a:	d10c      	bne.n	8004396 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800437c:	4a19      	ldr	r2, [pc, #100]	@ (80043e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	fbb2 f3f3 	udiv	r3, r2, r3
 8004384:	4a16      	ldr	r2, [pc, #88]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004386:	68d2      	ldr	r2, [r2, #12]
 8004388:	0a12      	lsrs	r2, r2, #8
 800438a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	617b      	str	r3, [r7, #20]
      break;
 8004394:	e00c      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004396:	4a13      	ldr	r2, [pc, #76]	@ (80043e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	fbb2 f3f3 	udiv	r3, r2, r3
 800439e:	4a10      	ldr	r2, [pc, #64]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043a0:	68d2      	ldr	r2, [r2, #12]
 80043a2:	0a12      	lsrs	r2, r2, #8
 80043a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043a8:	fb02 f303 	mul.w	r3, r2, r3
 80043ac:	617b      	str	r3, [r7, #20]
      break;
 80043ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043b0:	4b0b      	ldr	r3, [pc, #44]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	0e5b      	lsrs	r3, r3, #25
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	3301      	adds	r3, #1
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	e001      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80043d0:	693b      	ldr	r3, [r7, #16]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	371c      	adds	r7, #28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
 80043e4:	00f42400 	.word	0x00f42400

080043e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043ec:	4b03      	ldr	r3, [pc, #12]	@ (80043fc <HAL_RCC_GetHCLKFreq+0x14>)
 80043ee:	681b      	ldr	r3, [r3, #0]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000000 	.word	0x20000000

08004400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004404:	f7ff fff0 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8004408:	4602      	mov	r2, r0
 800440a:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <HAL_RCC_GetPCLK1Freq+0x24>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	0a1b      	lsrs	r3, r3, #8
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	4904      	ldr	r1, [pc, #16]	@ (8004428 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004416:	5ccb      	ldrb	r3, [r1, r3]
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40021000 	.word	0x40021000
 8004428:	0800bbe0 	.word	0x0800bbe0

0800442c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004430:	f7ff ffda 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	4b06      	ldr	r3, [pc, #24]	@ (8004450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	0adb      	lsrs	r3, r3, #11
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	4904      	ldr	r1, [pc, #16]	@ (8004454 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004442:	5ccb      	ldrb	r3, [r1, r3]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40021000 	.word	0x40021000
 8004454:	0800bbe0 	.word	0x0800bbe0

08004458 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800445e:	4b1e      	ldr	r3, [pc, #120]	@ (80044d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004468:	4b1b      	ldr	r3, [pc, #108]	@ (80044d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	091b      	lsrs	r3, r3, #4
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	3301      	adds	r3, #1
 8004474:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	2b03      	cmp	r3, #3
 800447a:	d10c      	bne.n	8004496 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800447c:	4a17      	ldr	r2, [pc, #92]	@ (80044dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	fbb2 f3f3 	udiv	r3, r2, r3
 8004484:	4a14      	ldr	r2, [pc, #80]	@ (80044d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004486:	68d2      	ldr	r2, [r2, #12]
 8004488:	0a12      	lsrs	r2, r2, #8
 800448a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800448e:	fb02 f303 	mul.w	r3, r2, r3
 8004492:	617b      	str	r3, [r7, #20]
    break;
 8004494:	e00c      	b.n	80044b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004496:	4a11      	ldr	r2, [pc, #68]	@ (80044dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	fbb2 f3f3 	udiv	r3, r2, r3
 800449e:	4a0e      	ldr	r2, [pc, #56]	@ (80044d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044a0:	68d2      	ldr	r2, [r2, #12]
 80044a2:	0a12      	lsrs	r2, r2, #8
 80044a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044a8:	fb02 f303 	mul.w	r3, r2, r3
 80044ac:	617b      	str	r3, [r7, #20]
    break;
 80044ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044b0:	4b09      	ldr	r3, [pc, #36]	@ (80044d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	0e5b      	lsrs	r3, r3, #25
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	3301      	adds	r3, #1
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80044ca:	687b      	ldr	r3, [r7, #4]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	371c      	adds	r7, #28
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	40021000 	.word	0x40021000
 80044dc:	00f42400 	.word	0x00f42400

080044e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044e8:	2300      	movs	r3, #0
 80044ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044ec:	2300      	movs	r3, #0
 80044ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8098 	beq.w	800462e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044fe:	2300      	movs	r3, #0
 8004500:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004502:	4b43      	ldr	r3, [pc, #268]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10d      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450e:	4b40      	ldr	r3, [pc, #256]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004512:	4a3f      	ldr	r2, [pc, #252]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004518:	6593      	str	r3, [r2, #88]	@ 0x58
 800451a:	4b3d      	ldr	r3, [pc, #244]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800451c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004522:	60bb      	str	r3, [r7, #8]
 8004524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004526:	2301      	movs	r3, #1
 8004528:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800452a:	4b3a      	ldr	r3, [pc, #232]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a39      	ldr	r2, [pc, #228]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004534:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004536:	f7fd ff35 	bl	80023a4 <HAL_GetTick>
 800453a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800453c:	e009      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453e:	f7fd ff31 	bl	80023a4 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d902      	bls.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	74fb      	strb	r3, [r7, #19]
        break;
 8004550:	e005      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004552:	4b30      	ldr	r3, [pc, #192]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0ef      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800455e:	7cfb      	ldrb	r3, [r7, #19]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d159      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004564:	4b2a      	ldr	r3, [pc, #168]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800456e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d01e      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	429a      	cmp	r2, r3
 800457e:	d019      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004580:	4b23      	ldr	r3, [pc, #140]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800458a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800458c:	4b20      	ldr	r3, [pc, #128]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004592:	4a1f      	ldr	r2, [pc, #124]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004598:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800459c:	4b1c      	ldr	r3, [pc, #112]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045ac:	4a18      	ldr	r2, [pc, #96]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d016      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045be:	f7fd fef1 	bl	80023a4 <HAL_GetTick>
 80045c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c4:	e00b      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c6:	f7fd feed 	bl	80023a4 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d902      	bls.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	74fb      	strb	r3, [r7, #19]
            break;
 80045dc:	e006      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045de:	4b0c      	ldr	r3, [pc, #48]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0ec      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80045ec:	7cfb      	ldrb	r3, [r7, #19]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10b      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045f2:	4b07      	ldr	r3, [pc, #28]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004600:	4903      	ldr	r1, [pc, #12]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004608:	e008      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800460a:	7cfb      	ldrb	r3, [r7, #19]
 800460c:	74bb      	strb	r3, [r7, #18]
 800460e:	e005      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004610:	40021000 	.word	0x40021000
 8004614:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004618:	7cfb      	ldrb	r3, [r7, #19]
 800461a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800461c:	7c7b      	ldrb	r3, [r7, #17]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d105      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004622:	4ba6      	ldr	r3, [pc, #664]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004626:	4aa5      	ldr	r2, [pc, #660]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004628:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800462c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800463a:	4ba0      	ldr	r3, [pc, #640]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004640:	f023 0203 	bic.w	r2, r3, #3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	499c      	ldr	r1, [pc, #624]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800465c:	4b97      	ldr	r3, [pc, #604]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004662:	f023 020c 	bic.w	r2, r3, #12
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	4994      	ldr	r1, [pc, #592]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800467e:	4b8f      	ldr	r3, [pc, #572]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004684:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	498b      	ldr	r1, [pc, #556]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046a0:	4b86      	ldr	r3, [pc, #536]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	4983      	ldr	r1, [pc, #524]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046c2:	4b7e      	ldr	r3, [pc, #504]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	497a      	ldr	r1, [pc, #488]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046e4:	4b75      	ldr	r3, [pc, #468]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	4972      	ldr	r1, [pc, #456]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004706:	4b6d      	ldr	r3, [pc, #436]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800470c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	4969      	ldr	r1, [pc, #420]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004728:	4b64      	ldr	r3, [pc, #400]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800472e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	4961      	ldr	r1, [pc, #388]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800474a:	4b5c      	ldr	r3, [pc, #368]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004750:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004758:	4958      	ldr	r1, [pc, #352]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004768:	2b00      	cmp	r3, #0
 800476a:	d015      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800476c:	4b53      	ldr	r3, [pc, #332]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004772:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477a:	4950      	ldr	r1, [pc, #320]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004786:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800478a:	d105      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800478c:	4b4b      	ldr	r3, [pc, #300]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4a4a      	ldr	r2, [pc, #296]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004792:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004796:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d015      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047a4:	4b45      	ldr	r3, [pc, #276]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b2:	4942      	ldr	r1, [pc, #264]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047c2:	d105      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047c4:	4b3d      	ldr	r3, [pc, #244]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	4a3c      	ldr	r2, [pc, #240]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047ce:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d015      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047dc:	4b37      	ldr	r3, [pc, #220]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ea:	4934      	ldr	r1, [pc, #208]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047fa:	d105      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047fc:	4b2f      	ldr	r3, [pc, #188]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4a2e      	ldr	r2, [pc, #184]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004806:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d015      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004814:	4b29      	ldr	r3, [pc, #164]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004822:	4926      	ldr	r1, [pc, #152]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800482e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004832:	d105      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004834:	4b21      	ldr	r3, [pc, #132]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	4a20      	ldr	r2, [pc, #128]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800483a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800483e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d015      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800484c:	4b1b      	ldr	r3, [pc, #108]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004852:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485a:	4918      	ldr	r1, [pc, #96]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004866:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800486a:	d105      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800486c:	4b13      	ldr	r3, [pc, #76]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	4a12      	ldr	r2, [pc, #72]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004872:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004876:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d015      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004884:	4b0d      	ldr	r3, [pc, #52]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004892:	490a      	ldr	r1, [pc, #40]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800489e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048a2:	d105      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80048a4:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4a04      	ldr	r2, [pc, #16]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80048b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40021000 	.word	0x40021000

080048c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e09d      	b.n	8004a0e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d108      	bne.n	80048ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048e2:	d009      	beq.n	80048f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	61da      	str	r2, [r3, #28]
 80048ea:	e005      	b.n	80048f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fc fdc6 	bl	80014a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800492e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004938:	d902      	bls.n	8004940 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	e002      	b.n	8004946 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004940:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004944:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800494e:	d007      	beq.n	8004960 <HAL_SPI_Init+0xa0>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004958:	d002      	beq.n	8004960 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a2:	ea42 0103 	orr.w	r1, r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049aa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	0c1b      	lsrs	r3, r3, #16
 80049bc:	f003 0204 	and.w	r2, r3, #4
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80049dc:	ea42 0103 	orr.w	r1, r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69da      	ldr	r2, [r3, #28]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b088      	sub	sp, #32
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	603b      	str	r3, [r7, #0]
 8004a22:	4613      	mov	r3, r2
 8004a24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <HAL_SPI_Transmit+0x22>
 8004a34:	2302      	movs	r3, #2
 8004a36:	e15f      	b.n	8004cf8 <HAL_SPI_Transmit+0x2e2>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a40:	f7fd fcb0 	bl	80023a4 <HAL_GetTick>
 8004a44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a46:	88fb      	ldrh	r3, [r7, #6]
 8004a48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d002      	beq.n	8004a5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
 8004a58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a5a:	e148      	b.n	8004cee <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d002      	beq.n	8004a68 <HAL_SPI_Transmit+0x52>
 8004a62:	88fb      	ldrh	r3, [r7, #6]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d102      	bne.n	8004a6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a6c:	e13f      	b.n	8004cee <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2203      	movs	r2, #3
 8004a72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	88fa      	ldrh	r2, [r7, #6]
 8004a86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	88fa      	ldrh	r2, [r7, #6]
 8004a8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ab8:	d10f      	bne.n	8004ada <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ac8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ad8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae4:	2b40      	cmp	r3, #64	@ 0x40
 8004ae6:	d007      	beq.n	8004af8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004af6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b00:	d94f      	bls.n	8004ba2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <HAL_SPI_Transmit+0xfa>
 8004b0a:	8afb      	ldrh	r3, [r7, #22]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d142      	bne.n	8004b96 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b14:	881a      	ldrh	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b20:	1c9a      	adds	r2, r3, #2
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b34:	e02f      	b.n	8004b96 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d112      	bne.n	8004b6a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b48:	881a      	ldrh	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b54:	1c9a      	adds	r2, r3, #2
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b68:	e015      	b.n	8004b96 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b6a:	f7fd fc1b 	bl	80023a4 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d803      	bhi.n	8004b82 <HAL_SPI_Transmit+0x16c>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b80:	d102      	bne.n	8004b88 <HAL_SPI_Transmit+0x172>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d106      	bne.n	8004b96 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004b94:	e0ab      	b.n	8004cee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1ca      	bne.n	8004b36 <HAL_SPI_Transmit+0x120>
 8004ba0:	e080      	b.n	8004ca4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_SPI_Transmit+0x19a>
 8004baa:	8afb      	ldrh	r3, [r7, #22]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d174      	bne.n	8004c9a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d912      	bls.n	8004be0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bbe:	881a      	ldrh	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bca:	1c9a      	adds	r2, r3, #2
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b02      	subs	r3, #2
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bde:	e05c      	b.n	8004c9a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	330c      	adds	r3, #12
 8004bea:	7812      	ldrb	r2, [r2, #0]
 8004bec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004c06:	e048      	b.n	8004c9a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d12b      	bne.n	8004c6e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d912      	bls.n	8004c46 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c24:	881a      	ldrh	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c30:	1c9a      	adds	r2, r3, #2
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	3b02      	subs	r3, #2
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c44:	e029      	b.n	8004c9a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	330c      	adds	r3, #12
 8004c50:	7812      	ldrb	r2, [r2, #0]
 8004c52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c6c:	e015      	b.n	8004c9a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c6e:	f7fd fb99 	bl	80023a4 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d803      	bhi.n	8004c86 <HAL_SPI_Transmit+0x270>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c84:	d102      	bne.n	8004c8c <HAL_SPI_Transmit+0x276>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004c98:	e029      	b.n	8004cee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1b1      	bne.n	8004c08 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	6839      	ldr	r1, [r7, #0]
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 fcf9 	bl	80056a0 <SPI_EndRxTxTransaction>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	e003      	b.n	8004cee <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004cf6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3720      	adds	r7, #32
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af02      	add	r7, sp, #8
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	603b      	str	r3, [r7, #0]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d002      	beq.n	8004d26 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004d20:	2302      	movs	r3, #2
 8004d22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d24:	e11a      	b.n	8004f5c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d2e:	d112      	bne.n	8004d56 <HAL_SPI_Receive+0x56>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10e      	bne.n	8004d56 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2204      	movs	r2, #4
 8004d3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d40:	88fa      	ldrh	r2, [r7, #6]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	4613      	mov	r3, r2
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 f90e 	bl	8004f6e <HAL_SPI_TransmitReceive>
 8004d52:	4603      	mov	r3, r0
 8004d54:	e107      	b.n	8004f66 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_SPI_Receive+0x64>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e100      	b.n	8004f66 <HAL_SPI_Receive+0x266>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d6c:	f7fd fb1a 	bl	80023a4 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <HAL_SPI_Receive+0x7e>
 8004d78:	88fb      	ldrh	r3, [r7, #6]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d102      	bne.n	8004d84 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d82:	e0eb      	b.n	8004f5c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2204      	movs	r2, #4
 8004d88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	88fa      	ldrh	r2, [r7, #6]
 8004d9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	88fa      	ldrh	r2, [r7, #6]
 8004da4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004dce:	d908      	bls.n	8004de2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004dde:	605a      	str	r2, [r3, #4]
 8004de0:	e007      	b.n	8004df2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004df0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dfa:	d10f      	bne.n	8004e1c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004e1a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e26:	2b40      	cmp	r3, #64	@ 0x40
 8004e28:	d007      	beq.n	8004e3a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e38:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e42:	d86f      	bhi.n	8004f24 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e44:	e034      	b.n	8004eb0 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d117      	bne.n	8004e84 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f103 020c 	add.w	r2, r3, #12
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e60:	7812      	ldrb	r2, [r2, #0]
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004e82:	e015      	b.n	8004eb0 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e84:	f7fd fa8e 	bl	80023a4 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d803      	bhi.n	8004e9c <HAL_SPI_Receive+0x19c>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9a:	d102      	bne.n	8004ea2 <HAL_SPI_Receive+0x1a2>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004eae:	e055      	b.n	8004f5c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1c4      	bne.n	8004e46 <HAL_SPI_Receive+0x146>
 8004ebc:	e038      	b.n	8004f30 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d115      	bne.n	8004ef8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed6:	b292      	uxth	r2, r2
 8004ed8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ede:	1c9a      	adds	r2, r3, #2
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004ef6:	e015      	b.n	8004f24 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ef8:	f7fd fa54 	bl	80023a4 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d803      	bhi.n	8004f10 <HAL_SPI_Receive+0x210>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0e:	d102      	bne.n	8004f16 <HAL_SPI_Receive+0x216>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004f22:	e01b      	b.n	8004f5c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1c6      	bne.n	8004ebe <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	6839      	ldr	r1, [r7, #0]
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 fb5b 	bl	80055f0 <SPI_EndRxTransaction>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2220      	movs	r2, #32
 8004f44:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	75fb      	strb	r3, [r7, #23]
 8004f52:	e003      	b.n	8004f5c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b08a      	sub	sp, #40	@ 0x28
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_SPI_TransmitReceive+0x26>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e20a      	b.n	80053aa <HAL_SPI_TransmitReceive+0x43c>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f9c:	f7fd fa02 	bl	80023a4 <HAL_GetTick>
 8004fa0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004fa8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004fb0:	887b      	ldrh	r3, [r7, #2]
 8004fb2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004fb4:	887b      	ldrh	r3, [r7, #2]
 8004fb6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fb8:	7efb      	ldrb	r3, [r7, #27]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d00e      	beq.n	8004fdc <HAL_SPI_TransmitReceive+0x6e>
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fc4:	d106      	bne.n	8004fd4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d102      	bne.n	8004fd4 <HAL_SPI_TransmitReceive+0x66>
 8004fce:	7efb      	ldrb	r3, [r7, #27]
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d003      	beq.n	8004fdc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004fda:	e1e0      	b.n	800539e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d005      	beq.n	8004fee <HAL_SPI_TransmitReceive+0x80>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <HAL_SPI_TransmitReceive+0x80>
 8004fe8:	887b      	ldrh	r3, [r7, #2]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d103      	bne.n	8004ff6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004ff4:	e1d3      	b.n	800539e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d003      	beq.n	800500a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2205      	movs	r2, #5
 8005006:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	887a      	ldrh	r2, [r7, #2]
 800501a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	887a      	ldrh	r2, [r7, #2]
 8005022:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	887a      	ldrh	r2, [r7, #2]
 8005030:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	887a      	ldrh	r2, [r7, #2]
 8005036:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800504c:	d802      	bhi.n	8005054 <HAL_SPI_TransmitReceive+0xe6>
 800504e:	8a3b      	ldrh	r3, [r7, #16]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d908      	bls.n	8005066 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005062:	605a      	str	r2, [r3, #4]
 8005064:	e007      	b.n	8005076 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005074:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005080:	2b40      	cmp	r3, #64	@ 0x40
 8005082:	d007      	beq.n	8005094 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005092:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800509c:	f240 8081 	bls.w	80051a2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <HAL_SPI_TransmitReceive+0x140>
 80050a8:	8a7b      	ldrh	r3, [r7, #18]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d16d      	bne.n	800518a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b2:	881a      	ldrh	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050be:	1c9a      	adds	r2, r3, #2
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050d2:	e05a      	b.n	800518a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d11b      	bne.n	800511a <HAL_SPI_TransmitReceive+0x1ac>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d016      	beq.n	800511a <HAL_SPI_TransmitReceive+0x1ac>
 80050ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d113      	bne.n	800511a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f6:	881a      	ldrh	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005102:	1c9a      	adds	r2, r3, #2
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b01      	cmp	r3, #1
 8005126:	d11c      	bne.n	8005162 <HAL_SPI_TransmitReceive+0x1f4>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800512e:	b29b      	uxth	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d016      	beq.n	8005162 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513e:	b292      	uxth	r2, r2
 8005140:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005146:	1c9a      	adds	r2, r3, #2
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800515e:	2301      	movs	r3, #1
 8005160:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005162:	f7fd f91f 	bl	80023a4 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800516e:	429a      	cmp	r2, r3
 8005170:	d80b      	bhi.n	800518a <HAL_SPI_TransmitReceive+0x21c>
 8005172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005178:	d007      	beq.n	800518a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005188:	e109      	b.n	800539e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800518e:	b29b      	uxth	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d19f      	bne.n	80050d4 <HAL_SPI_TransmitReceive+0x166>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d199      	bne.n	80050d4 <HAL_SPI_TransmitReceive+0x166>
 80051a0:	e0e3      	b.n	800536a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_SPI_TransmitReceive+0x244>
 80051aa:	8a7b      	ldrh	r3, [r7, #18]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	f040 80cf 	bne.w	8005350 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d912      	bls.n	80051e2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c0:	881a      	ldrh	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051cc:	1c9a      	adds	r2, r3, #2
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b02      	subs	r3, #2
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051e0:	e0b6      	b.n	8005350 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	330c      	adds	r3, #12
 80051ec:	7812      	ldrb	r2, [r2, #0]
 80051ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005208:	e0a2      	b.n	8005350 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b02      	cmp	r3, #2
 8005216:	d134      	bne.n	8005282 <HAL_SPI_TransmitReceive+0x314>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d02f      	beq.n	8005282 <HAL_SPI_TransmitReceive+0x314>
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	2b01      	cmp	r3, #1
 8005226:	d12c      	bne.n	8005282 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b01      	cmp	r3, #1
 8005230:	d912      	bls.n	8005258 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005236:	881a      	ldrh	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005242:	1c9a      	adds	r2, r3, #2
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b02      	subs	r3, #2
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005256:	e012      	b.n	800527e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	330c      	adds	r3, #12
 8005262:	7812      	ldrb	r2, [r2, #0]
 8005264:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b01      	cmp	r3, #1
 800528e:	d148      	bne.n	8005322 <HAL_SPI_TransmitReceive+0x3b4>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005296:	b29b      	uxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d042      	beq.n	8005322 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d923      	bls.n	80052f0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b2:	b292      	uxth	r2, r2
 80052b4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ba:	1c9a      	adds	r2, r3, #2
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b02      	subs	r3, #2
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d81f      	bhi.n	800531e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80052ec:	605a      	str	r2, [r3, #4]
 80052ee:	e016      	b.n	800531e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f103 020c 	add.w	r2, r3, #12
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fc:	7812      	ldrb	r2, [r2, #0]
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005306:	1c5a      	adds	r2, r3, #1
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005312:	b29b      	uxth	r3, r3
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800531e:	2301      	movs	r3, #1
 8005320:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005322:	f7fd f83f 	bl	80023a4 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800532e:	429a      	cmp	r2, r3
 8005330:	d803      	bhi.n	800533a <HAL_SPI_TransmitReceive+0x3cc>
 8005332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005338:	d102      	bne.n	8005340 <HAL_SPI_TransmitReceive+0x3d2>
 800533a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533c:	2b00      	cmp	r3, #0
 800533e:	d107      	bne.n	8005350 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800534e:	e026      	b.n	800539e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005354:	b29b      	uxth	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	f47f af57 	bne.w	800520a <HAL_SPI_TransmitReceive+0x29c>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	f47f af50 	bne.w	800520a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 f996 	bl	80056a0 <SPI_EndRxTxTransaction>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d005      	beq.n	8005386 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005394:	e003      	b.n	800539e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80053a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3728      	adds	r7, #40	@ 0x28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	4613      	mov	r3, r2
 80053c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053c4:	f7fc ffee 	bl	80023a4 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	4413      	add	r3, r2
 80053d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053d4:	f7fc ffe6 	bl	80023a4 <HAL_GetTick>
 80053d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053da:	4b39      	ldr	r3, [pc, #228]	@ (80054c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	015b      	lsls	r3, r3, #5
 80053e0:	0d1b      	lsrs	r3, r3, #20
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	fb02 f303 	mul.w	r3, r2, r3
 80053e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ea:	e054      	b.n	8005496 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f2:	d050      	beq.n	8005496 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053f4:	f7fc ffd6 	bl	80023a4 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	429a      	cmp	r2, r3
 8005402:	d902      	bls.n	800540a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d13d      	bne.n	8005486 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005418:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005422:	d111      	bne.n	8005448 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800542c:	d004      	beq.n	8005438 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005436:	d107      	bne.n	8005448 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005446:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005450:	d10f      	bne.n	8005472 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005470:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e017      	b.n	80054b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	3b01      	subs	r3, #1
 8005494:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4013      	ands	r3, r2
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	bf0c      	ite	eq
 80054a6:	2301      	moveq	r3, #1
 80054a8:	2300      	movne	r3, #0
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	461a      	mov	r2, r3
 80054ae:	79fb      	ldrb	r3, [r7, #7]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d19b      	bne.n	80053ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3720      	adds	r7, #32
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20000000 	.word	0x20000000

080054c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08a      	sub	sp, #40	@ 0x28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80054d6:	f7fc ff65 	bl	80023a4 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054de:	1a9b      	subs	r3, r3, r2
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	4413      	add	r3, r2
 80054e4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80054e6:	f7fc ff5d 	bl	80023a4 <HAL_GetTick>
 80054ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	330c      	adds	r3, #12
 80054f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80054f4:	4b3d      	ldr	r3, [pc, #244]	@ (80055ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	4613      	mov	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	00da      	lsls	r2, r3, #3
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	0d1b      	lsrs	r3, r3, #20
 8005504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005506:	fb02 f303 	mul.w	r3, r2, r3
 800550a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800550c:	e060      	b.n	80055d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005514:	d107      	bne.n	8005526 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d104      	bne.n	8005526 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	b2db      	uxtb	r3, r3
 8005522:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005524:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552c:	d050      	beq.n	80055d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800552e:	f7fc ff39 	bl	80023a4 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800553a:	429a      	cmp	r2, r3
 800553c:	d902      	bls.n	8005544 <SPI_WaitFifoStateUntilTimeout+0x80>
 800553e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005540:	2b00      	cmp	r3, #0
 8005542:	d13d      	bne.n	80055c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005552:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800555c:	d111      	bne.n	8005582 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005566:	d004      	beq.n	8005572 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005570:	d107      	bne.n	8005582 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005580:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005586:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800558a:	d10f      	bne.n	80055ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e010      	b.n	80055e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689a      	ldr	r2, [r3, #8]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	4013      	ands	r3, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d196      	bne.n	800550e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3728      	adds	r7, #40	@ 0x28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20000000 	.word	0x20000000

080055f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005604:	d111      	bne.n	800562a <SPI_EndRxTransaction+0x3a>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800560e:	d004      	beq.n	800561a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005618:	d107      	bne.n	800562a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005628:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2200      	movs	r2, #0
 8005632:	2180      	movs	r1, #128	@ 0x80
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f7ff febd 	bl	80053b4 <SPI_WaitFlagStateUntilTimeout>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d007      	beq.n	8005650 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005644:	f043 0220 	orr.w	r2, r3, #32
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e023      	b.n	8005698 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005658:	d11d      	bne.n	8005696 <SPI_EndRxTransaction+0xa6>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005662:	d004      	beq.n	800566e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800566c:	d113      	bne.n	8005696 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2200      	movs	r2, #0
 8005676:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f7ff ff22 	bl	80054c4 <SPI_WaitFifoStateUntilTimeout>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d007      	beq.n	8005696 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800568a:	f043 0220 	orr.w	r2, r3, #32
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e000      	b.n	8005698 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f7ff ff03 	bl	80054c4 <SPI_WaitFifoStateUntilTimeout>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d007      	beq.n	80056d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056c8:	f043 0220 	orr.w	r2, r3, #32
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e027      	b.n	8005724 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2200      	movs	r2, #0
 80056dc:	2180      	movs	r1, #128	@ 0x80
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f7ff fe68 	bl	80053b4 <SPI_WaitFlagStateUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d007      	beq.n	80056fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ee:	f043 0220 	orr.w	r2, r3, #32
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e014      	b.n	8005724 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2200      	movs	r2, #0
 8005702:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f7ff fedc 	bl	80054c4 <SPI_WaitFifoStateUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005716:	f043 0220 	orr.w	r2, r3, #32
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e000      	b.n	8005724 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e049      	b.n	80057d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d106      	bne.n	8005758 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7fc fb24 	bl	8001da0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3304      	adds	r3, #4
 8005768:	4619      	mov	r1, r3
 800576a:	4610      	mov	r0, r2
 800576c:	f000 faf0 	bl	8005d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d109      	bne.n	8005800 <HAL_TIM_PWM_Start+0x24>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	bf14      	ite	ne
 80057f8:	2301      	movne	r3, #1
 80057fa:	2300      	moveq	r3, #0
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	e03c      	b.n	800587a <HAL_TIM_PWM_Start+0x9e>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2b04      	cmp	r3, #4
 8005804:	d109      	bne.n	800581a <HAL_TIM_PWM_Start+0x3e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b01      	cmp	r3, #1
 8005810:	bf14      	ite	ne
 8005812:	2301      	movne	r3, #1
 8005814:	2300      	moveq	r3, #0
 8005816:	b2db      	uxtb	r3, r3
 8005818:	e02f      	b.n	800587a <HAL_TIM_PWM_Start+0x9e>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b08      	cmp	r3, #8
 800581e:	d109      	bne.n	8005834 <HAL_TIM_PWM_Start+0x58>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b01      	cmp	r3, #1
 800582a:	bf14      	ite	ne
 800582c:	2301      	movne	r3, #1
 800582e:	2300      	moveq	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	e022      	b.n	800587a <HAL_TIM_PWM_Start+0x9e>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2b0c      	cmp	r3, #12
 8005838:	d109      	bne.n	800584e <HAL_TIM_PWM_Start+0x72>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b01      	cmp	r3, #1
 8005844:	bf14      	ite	ne
 8005846:	2301      	movne	r3, #1
 8005848:	2300      	moveq	r3, #0
 800584a:	b2db      	uxtb	r3, r3
 800584c:	e015      	b.n	800587a <HAL_TIM_PWM_Start+0x9e>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b10      	cmp	r3, #16
 8005852:	d109      	bne.n	8005868 <HAL_TIM_PWM_Start+0x8c>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b01      	cmp	r3, #1
 800585e:	bf14      	ite	ne
 8005860:	2301      	movne	r3, #1
 8005862:	2300      	moveq	r3, #0
 8005864:	b2db      	uxtb	r3, r3
 8005866:	e008      	b.n	800587a <HAL_TIM_PWM_Start+0x9e>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b01      	cmp	r3, #1
 8005872:	bf14      	ite	ne
 8005874:	2301      	movne	r3, #1
 8005876:	2300      	moveq	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e097      	b.n	80059b2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d104      	bne.n	8005892 <HAL_TIM_PWM_Start+0xb6>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005890:	e023      	b.n	80058da <HAL_TIM_PWM_Start+0xfe>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b04      	cmp	r3, #4
 8005896:	d104      	bne.n	80058a2 <HAL_TIM_PWM_Start+0xc6>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058a0:	e01b      	b.n	80058da <HAL_TIM_PWM_Start+0xfe>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d104      	bne.n	80058b2 <HAL_TIM_PWM_Start+0xd6>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058b0:	e013      	b.n	80058da <HAL_TIM_PWM_Start+0xfe>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b0c      	cmp	r3, #12
 80058b6:	d104      	bne.n	80058c2 <HAL_TIM_PWM_Start+0xe6>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058c0:	e00b      	b.n	80058da <HAL_TIM_PWM_Start+0xfe>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b10      	cmp	r3, #16
 80058c6:	d104      	bne.n	80058d2 <HAL_TIM_PWM_Start+0xf6>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058d0:	e003      	b.n	80058da <HAL_TIM_PWM_Start+0xfe>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2202      	movs	r2, #2
 80058d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2201      	movs	r2, #1
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fdc6 	bl	8006474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a33      	ldr	r2, [pc, #204]	@ (80059bc <HAL_TIM_PWM_Start+0x1e0>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d013      	beq.n	800591a <HAL_TIM_PWM_Start+0x13e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a32      	ldr	r2, [pc, #200]	@ (80059c0 <HAL_TIM_PWM_Start+0x1e4>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00e      	beq.n	800591a <HAL_TIM_PWM_Start+0x13e>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a30      	ldr	r2, [pc, #192]	@ (80059c4 <HAL_TIM_PWM_Start+0x1e8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d009      	beq.n	800591a <HAL_TIM_PWM_Start+0x13e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a2f      	ldr	r2, [pc, #188]	@ (80059c8 <HAL_TIM_PWM_Start+0x1ec>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d004      	beq.n	800591a <HAL_TIM_PWM_Start+0x13e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a2d      	ldr	r2, [pc, #180]	@ (80059cc <HAL_TIM_PWM_Start+0x1f0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d101      	bne.n	800591e <HAL_TIM_PWM_Start+0x142>
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <HAL_TIM_PWM_Start+0x144>
 800591e:	2300      	movs	r3, #0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d007      	beq.n	8005934 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005932:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a20      	ldr	r2, [pc, #128]	@ (80059bc <HAL_TIM_PWM_Start+0x1e0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d018      	beq.n	8005970 <HAL_TIM_PWM_Start+0x194>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005946:	d013      	beq.n	8005970 <HAL_TIM_PWM_Start+0x194>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a20      	ldr	r2, [pc, #128]	@ (80059d0 <HAL_TIM_PWM_Start+0x1f4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00e      	beq.n	8005970 <HAL_TIM_PWM_Start+0x194>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a1f      	ldr	r2, [pc, #124]	@ (80059d4 <HAL_TIM_PWM_Start+0x1f8>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d009      	beq.n	8005970 <HAL_TIM_PWM_Start+0x194>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a17      	ldr	r2, [pc, #92]	@ (80059c0 <HAL_TIM_PWM_Start+0x1e4>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d004      	beq.n	8005970 <HAL_TIM_PWM_Start+0x194>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a16      	ldr	r2, [pc, #88]	@ (80059c4 <HAL_TIM_PWM_Start+0x1e8>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d115      	bne.n	800599c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	4b18      	ldr	r3, [pc, #96]	@ (80059d8 <HAL_TIM_PWM_Start+0x1fc>)
 8005978:	4013      	ands	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b06      	cmp	r3, #6
 8005980:	d015      	beq.n	80059ae <HAL_TIM_PWM_Start+0x1d2>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005988:	d011      	beq.n	80059ae <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f042 0201 	orr.w	r2, r2, #1
 8005998:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599a:	e008      	b.n	80059ae <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0201 	orr.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	e000      	b.n	80059b0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40012c00 	.word	0x40012c00
 80059c0:	40013400 	.word	0x40013400
 80059c4:	40014000 	.word	0x40014000
 80059c8:	40014400 	.word	0x40014400
 80059cc:	40014800 	.word	0x40014800
 80059d0:	40000400 	.word	0x40000400
 80059d4:	40000800 	.word	0x40000800
 80059d8:	00010007 	.word	0x00010007

080059dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e097      	b.n	8005b20 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d106      	bne.n	8005a0a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7fc fa35 	bl	8001e74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005a20:	f023 0307 	bic.w	r3, r3, #7
 8005a24:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4610      	mov	r0, r2
 8005a32:	f000 f98d 	bl	8005d50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a5e:	f023 0303 	bic.w	r3, r3, #3
 8005a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	021b      	lsls	r3, r3, #8
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005a7c:	f023 030c 	bic.w	r3, r3, #12
 8005a80:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	011a      	lsls	r2, r3, #4
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	031b      	lsls	r3, r3, #12
 8005aac:	4313      	orrs	r3, r2
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005aba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005ac2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d101      	bne.n	8005b46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b42:	2302      	movs	r3, #2
 8005b44:	e0ff      	b.n	8005d46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b14      	cmp	r3, #20
 8005b52:	f200 80f0 	bhi.w	8005d36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b56:	a201      	add	r2, pc, #4	@ (adr r2, 8005b5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5c:	08005bb1 	.word	0x08005bb1
 8005b60:	08005d37 	.word	0x08005d37
 8005b64:	08005d37 	.word	0x08005d37
 8005b68:	08005d37 	.word	0x08005d37
 8005b6c:	08005bf1 	.word	0x08005bf1
 8005b70:	08005d37 	.word	0x08005d37
 8005b74:	08005d37 	.word	0x08005d37
 8005b78:	08005d37 	.word	0x08005d37
 8005b7c:	08005c33 	.word	0x08005c33
 8005b80:	08005d37 	.word	0x08005d37
 8005b84:	08005d37 	.word	0x08005d37
 8005b88:	08005d37 	.word	0x08005d37
 8005b8c:	08005c73 	.word	0x08005c73
 8005b90:	08005d37 	.word	0x08005d37
 8005b94:	08005d37 	.word	0x08005d37
 8005b98:	08005d37 	.word	0x08005d37
 8005b9c:	08005cb5 	.word	0x08005cb5
 8005ba0:	08005d37 	.word	0x08005d37
 8005ba4:	08005d37 	.word	0x08005d37
 8005ba8:	08005d37 	.word	0x08005d37
 8005bac:	08005cf5 	.word	0x08005cf5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68b9      	ldr	r1, [r7, #8]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 f966 	bl	8005e88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699a      	ldr	r2, [r3, #24]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0208 	orr.w	r2, r2, #8
 8005bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0204 	bic.w	r2, r2, #4
 8005bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6999      	ldr	r1, [r3, #24]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	691a      	ldr	r2, [r3, #16]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	619a      	str	r2, [r3, #24]
      break;
 8005bee:	e0a5      	b.n	8005d3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68b9      	ldr	r1, [r7, #8]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 f9d6 	bl	8005fa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	699a      	ldr	r2, [r3, #24]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699a      	ldr	r2, [r3, #24]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6999      	ldr	r1, [r3, #24]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	021a      	lsls	r2, r3, #8
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	619a      	str	r2, [r3, #24]
      break;
 8005c30:	e084      	b.n	8005d3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 fa3f 	bl	80060bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69da      	ldr	r2, [r3, #28]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f042 0208 	orr.w	r2, r2, #8
 8005c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69da      	ldr	r2, [r3, #28]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0204 	bic.w	r2, r2, #4
 8005c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69d9      	ldr	r1, [r3, #28]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	691a      	ldr	r2, [r3, #16]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	61da      	str	r2, [r3, #28]
      break;
 8005c70:	e064      	b.n	8005d3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68b9      	ldr	r1, [r7, #8]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 faa7 	bl	80061cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69da      	ldr	r2, [r3, #28]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69da      	ldr	r2, [r3, #28]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69d9      	ldr	r1, [r3, #28]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	021a      	lsls	r2, r3, #8
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	61da      	str	r2, [r3, #28]
      break;
 8005cb2:	e043      	b.n	8005d3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 fb10 	bl	80062e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0208 	orr.w	r2, r2, #8
 8005cce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0204 	bic.w	r2, r2, #4
 8005cde:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	691a      	ldr	r2, [r3, #16]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005cf2:	e023      	b.n	8005d3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68b9      	ldr	r1, [r7, #8]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 fb54 	bl	80063a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d0e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d1e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	021a      	lsls	r2, r3, #8
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005d34:	e002      	b.n	8005d3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	75fb      	strb	r3, [r7, #23]
      break;
 8005d3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop

08005d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a42      	ldr	r2, [pc, #264]	@ (8005e6c <TIM_Base_SetConfig+0x11c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00f      	beq.n	8005d88 <TIM_Base_SetConfig+0x38>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d6e:	d00b      	beq.n	8005d88 <TIM_Base_SetConfig+0x38>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a3f      	ldr	r2, [pc, #252]	@ (8005e70 <TIM_Base_SetConfig+0x120>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d007      	beq.n	8005d88 <TIM_Base_SetConfig+0x38>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a3e      	ldr	r2, [pc, #248]	@ (8005e74 <TIM_Base_SetConfig+0x124>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d003      	beq.n	8005d88 <TIM_Base_SetConfig+0x38>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a3d      	ldr	r2, [pc, #244]	@ (8005e78 <TIM_Base_SetConfig+0x128>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d108      	bne.n	8005d9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a33      	ldr	r2, [pc, #204]	@ (8005e6c <TIM_Base_SetConfig+0x11c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d01b      	beq.n	8005dda <TIM_Base_SetConfig+0x8a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005da8:	d017      	beq.n	8005dda <TIM_Base_SetConfig+0x8a>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a30      	ldr	r2, [pc, #192]	@ (8005e70 <TIM_Base_SetConfig+0x120>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d013      	beq.n	8005dda <TIM_Base_SetConfig+0x8a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a2f      	ldr	r2, [pc, #188]	@ (8005e74 <TIM_Base_SetConfig+0x124>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00f      	beq.n	8005dda <TIM_Base_SetConfig+0x8a>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a2e      	ldr	r2, [pc, #184]	@ (8005e78 <TIM_Base_SetConfig+0x128>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00b      	beq.n	8005dda <TIM_Base_SetConfig+0x8a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a2d      	ldr	r2, [pc, #180]	@ (8005e7c <TIM_Base_SetConfig+0x12c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d007      	beq.n	8005dda <TIM_Base_SetConfig+0x8a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a2c      	ldr	r2, [pc, #176]	@ (8005e80 <TIM_Base_SetConfig+0x130>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d003      	beq.n	8005dda <TIM_Base_SetConfig+0x8a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8005e84 <TIM_Base_SetConfig+0x134>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d108      	bne.n	8005dec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a16      	ldr	r2, [pc, #88]	@ (8005e6c <TIM_Base_SetConfig+0x11c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d00f      	beq.n	8005e38 <TIM_Base_SetConfig+0xe8>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a17      	ldr	r2, [pc, #92]	@ (8005e78 <TIM_Base_SetConfig+0x128>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d00b      	beq.n	8005e38 <TIM_Base_SetConfig+0xe8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a16      	ldr	r2, [pc, #88]	@ (8005e7c <TIM_Base_SetConfig+0x12c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d007      	beq.n	8005e38 <TIM_Base_SetConfig+0xe8>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a15      	ldr	r2, [pc, #84]	@ (8005e80 <TIM_Base_SetConfig+0x130>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_Base_SetConfig+0xe8>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a14      	ldr	r2, [pc, #80]	@ (8005e84 <TIM_Base_SetConfig+0x134>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d103      	bne.n	8005e40 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	691a      	ldr	r2, [r3, #16]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d105      	bne.n	8005e5e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f023 0201 	bic.w	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	611a      	str	r2, [r3, #16]
  }
}
 8005e5e:	bf00      	nop
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40012c00 	.word	0x40012c00
 8005e70:	40000400 	.word	0x40000400
 8005e74:	40000800 	.word	0x40000800
 8005e78:	40013400 	.word	0x40013400
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40014400 	.word	0x40014400
 8005e84:	40014800 	.word	0x40014800

08005e88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	f023 0201 	bic.w	r2, r3, #1
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0303 	bic.w	r3, r3, #3
 8005ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f023 0302 	bic.w	r3, r3, #2
 8005ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8005f94 <TIM_OC1_SetConfig+0x10c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d00f      	beq.n	8005f08 <TIM_OC1_SetConfig+0x80>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a2b      	ldr	r2, [pc, #172]	@ (8005f98 <TIM_OC1_SetConfig+0x110>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00b      	beq.n	8005f08 <TIM_OC1_SetConfig+0x80>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8005f9c <TIM_OC1_SetConfig+0x114>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d007      	beq.n	8005f08 <TIM_OC1_SetConfig+0x80>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a29      	ldr	r2, [pc, #164]	@ (8005fa0 <TIM_OC1_SetConfig+0x118>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d003      	beq.n	8005f08 <TIM_OC1_SetConfig+0x80>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a28      	ldr	r2, [pc, #160]	@ (8005fa4 <TIM_OC1_SetConfig+0x11c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d10c      	bne.n	8005f22 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f023 0308 	bic.w	r3, r3, #8
 8005f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f023 0304 	bic.w	r3, r3, #4
 8005f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a1b      	ldr	r2, [pc, #108]	@ (8005f94 <TIM_OC1_SetConfig+0x10c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d00f      	beq.n	8005f4a <TIM_OC1_SetConfig+0xc2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005f98 <TIM_OC1_SetConfig+0x110>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00b      	beq.n	8005f4a <TIM_OC1_SetConfig+0xc2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a19      	ldr	r2, [pc, #100]	@ (8005f9c <TIM_OC1_SetConfig+0x114>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d007      	beq.n	8005f4a <TIM_OC1_SetConfig+0xc2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a18      	ldr	r2, [pc, #96]	@ (8005fa0 <TIM_OC1_SetConfig+0x118>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d003      	beq.n	8005f4a <TIM_OC1_SetConfig+0xc2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a17      	ldr	r2, [pc, #92]	@ (8005fa4 <TIM_OC1_SetConfig+0x11c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d111      	bne.n	8005f6e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	621a      	str	r2, [r3, #32]
}
 8005f88:	bf00      	nop
 8005f8a:	371c      	adds	r7, #28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	40012c00 	.word	0x40012c00
 8005f98:	40013400 	.word	0x40013400
 8005f9c:	40014000 	.word	0x40014000
 8005fa0:	40014400 	.word	0x40014400
 8005fa4:	40014800 	.word	0x40014800

08005fa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	f023 0210 	bic.w	r2, r3, #16
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	021b      	lsls	r3, r3, #8
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f023 0320 	bic.w	r3, r3, #32
 8005ff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	011b      	lsls	r3, r3, #4
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	4313      	orrs	r3, r2
 8006002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a28      	ldr	r2, [pc, #160]	@ (80060a8 <TIM_OC2_SetConfig+0x100>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d003      	beq.n	8006014 <TIM_OC2_SetConfig+0x6c>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a27      	ldr	r2, [pc, #156]	@ (80060ac <TIM_OC2_SetConfig+0x104>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d10d      	bne.n	8006030 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800601a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	011b      	lsls	r3, r3, #4
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	4313      	orrs	r3, r2
 8006026:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800602e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a1d      	ldr	r2, [pc, #116]	@ (80060a8 <TIM_OC2_SetConfig+0x100>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00f      	beq.n	8006058 <TIM_OC2_SetConfig+0xb0>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a1c      	ldr	r2, [pc, #112]	@ (80060ac <TIM_OC2_SetConfig+0x104>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d00b      	beq.n	8006058 <TIM_OC2_SetConfig+0xb0>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a1b      	ldr	r2, [pc, #108]	@ (80060b0 <TIM_OC2_SetConfig+0x108>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d007      	beq.n	8006058 <TIM_OC2_SetConfig+0xb0>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a1a      	ldr	r2, [pc, #104]	@ (80060b4 <TIM_OC2_SetConfig+0x10c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d003      	beq.n	8006058 <TIM_OC2_SetConfig+0xb0>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a19      	ldr	r2, [pc, #100]	@ (80060b8 <TIM_OC2_SetConfig+0x110>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d113      	bne.n	8006080 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800605e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006066:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	4313      	orrs	r3, r2
 800607e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	621a      	str	r2, [r3, #32]
}
 800609a:	bf00      	nop
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	40012c00 	.word	0x40012c00
 80060ac:	40013400 	.word	0x40013400
 80060b0:	40014000 	.word	0x40014000
 80060b4:	40014400 	.word	0x40014400
 80060b8:	40014800 	.word	0x40014800

080060bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0303 	bic.w	r3, r3, #3
 80060f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	021b      	lsls	r3, r3, #8
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	4313      	orrs	r3, r2
 8006114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a27      	ldr	r2, [pc, #156]	@ (80061b8 <TIM_OC3_SetConfig+0xfc>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d003      	beq.n	8006126 <TIM_OC3_SetConfig+0x6a>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a26      	ldr	r2, [pc, #152]	@ (80061bc <TIM_OC3_SetConfig+0x100>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d10d      	bne.n	8006142 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800612c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	021b      	lsls	r3, r3, #8
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	4313      	orrs	r3, r2
 8006138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a1c      	ldr	r2, [pc, #112]	@ (80061b8 <TIM_OC3_SetConfig+0xfc>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d00f      	beq.n	800616a <TIM_OC3_SetConfig+0xae>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a1b      	ldr	r2, [pc, #108]	@ (80061bc <TIM_OC3_SetConfig+0x100>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00b      	beq.n	800616a <TIM_OC3_SetConfig+0xae>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a1a      	ldr	r2, [pc, #104]	@ (80061c0 <TIM_OC3_SetConfig+0x104>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d007      	beq.n	800616a <TIM_OC3_SetConfig+0xae>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a19      	ldr	r2, [pc, #100]	@ (80061c4 <TIM_OC3_SetConfig+0x108>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d003      	beq.n	800616a <TIM_OC3_SetConfig+0xae>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a18      	ldr	r2, [pc, #96]	@ (80061c8 <TIM_OC3_SetConfig+0x10c>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d113      	bne.n	8006192 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	621a      	str	r2, [r3, #32]
}
 80061ac:	bf00      	nop
 80061ae:	371c      	adds	r7, #28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	40012c00 	.word	0x40012c00
 80061bc:	40013400 	.word	0x40013400
 80061c0:	40014000 	.word	0x40014000
 80061c4:	40014400 	.word	0x40014400
 80061c8:	40014800 	.word	0x40014800

080061cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	021b      	lsls	r3, r3, #8
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800621a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	031b      	lsls	r3, r3, #12
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a28      	ldr	r2, [pc, #160]	@ (80062cc <TIM_OC4_SetConfig+0x100>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d003      	beq.n	8006238 <TIM_OC4_SetConfig+0x6c>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a27      	ldr	r2, [pc, #156]	@ (80062d0 <TIM_OC4_SetConfig+0x104>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d10d      	bne.n	8006254 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800623e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	031b      	lsls	r3, r3, #12
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4313      	orrs	r3, r2
 800624a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006252:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a1d      	ldr	r2, [pc, #116]	@ (80062cc <TIM_OC4_SetConfig+0x100>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d00f      	beq.n	800627c <TIM_OC4_SetConfig+0xb0>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a1c      	ldr	r2, [pc, #112]	@ (80062d0 <TIM_OC4_SetConfig+0x104>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d00b      	beq.n	800627c <TIM_OC4_SetConfig+0xb0>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a1b      	ldr	r2, [pc, #108]	@ (80062d4 <TIM_OC4_SetConfig+0x108>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d007      	beq.n	800627c <TIM_OC4_SetConfig+0xb0>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a1a      	ldr	r2, [pc, #104]	@ (80062d8 <TIM_OC4_SetConfig+0x10c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d003      	beq.n	800627c <TIM_OC4_SetConfig+0xb0>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a19      	ldr	r2, [pc, #100]	@ (80062dc <TIM_OC4_SetConfig+0x110>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d113      	bne.n	80062a4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006282:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800628a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	019b      	lsls	r3, r3, #6
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4313      	orrs	r3, r2
 8006296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	019b      	lsls	r3, r3, #6
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	621a      	str	r2, [r3, #32]
}
 80062be:	bf00      	nop
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	40012c00 	.word	0x40012c00
 80062d0:	40013400 	.word	0x40013400
 80062d4:	40014000 	.word	0x40014000
 80062d8:	40014400 	.word	0x40014400
 80062dc:	40014800 	.word	0x40014800

080062e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800630e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006324:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	041b      	lsls	r3, r3, #16
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a17      	ldr	r2, [pc, #92]	@ (8006394 <TIM_OC5_SetConfig+0xb4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d00f      	beq.n	800635a <TIM_OC5_SetConfig+0x7a>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a16      	ldr	r2, [pc, #88]	@ (8006398 <TIM_OC5_SetConfig+0xb8>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d00b      	beq.n	800635a <TIM_OC5_SetConfig+0x7a>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a15      	ldr	r2, [pc, #84]	@ (800639c <TIM_OC5_SetConfig+0xbc>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d007      	beq.n	800635a <TIM_OC5_SetConfig+0x7a>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a14      	ldr	r2, [pc, #80]	@ (80063a0 <TIM_OC5_SetConfig+0xc0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d003      	beq.n	800635a <TIM_OC5_SetConfig+0x7a>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a13      	ldr	r2, [pc, #76]	@ (80063a4 <TIM_OC5_SetConfig+0xc4>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d109      	bne.n	800636e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006360:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	021b      	lsls	r3, r3, #8
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4313      	orrs	r3, r2
 800636c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	621a      	str	r2, [r3, #32]
}
 8006388:	bf00      	nop
 800638a:	371c      	adds	r7, #28
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	40012c00 	.word	0x40012c00
 8006398:	40013400 	.word	0x40013400
 800639c:	40014000 	.word	0x40014000
 80063a0:	40014400 	.word	0x40014400
 80063a4:	40014800 	.word	0x40014800

080063a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	021b      	lsls	r3, r3, #8
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80063ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	051b      	lsls	r3, r3, #20
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a18      	ldr	r2, [pc, #96]	@ (8006460 <TIM_OC6_SetConfig+0xb8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00f      	beq.n	8006424 <TIM_OC6_SetConfig+0x7c>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a17      	ldr	r2, [pc, #92]	@ (8006464 <TIM_OC6_SetConfig+0xbc>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00b      	beq.n	8006424 <TIM_OC6_SetConfig+0x7c>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a16      	ldr	r2, [pc, #88]	@ (8006468 <TIM_OC6_SetConfig+0xc0>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d007      	beq.n	8006424 <TIM_OC6_SetConfig+0x7c>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a15      	ldr	r2, [pc, #84]	@ (800646c <TIM_OC6_SetConfig+0xc4>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d003      	beq.n	8006424 <TIM_OC6_SetConfig+0x7c>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a14      	ldr	r2, [pc, #80]	@ (8006470 <TIM_OC6_SetConfig+0xc8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d109      	bne.n	8006438 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800642a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	029b      	lsls	r3, r3, #10
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	4313      	orrs	r3, r2
 8006436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	621a      	str	r2, [r3, #32]
}
 8006452:	bf00      	nop
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	40012c00 	.word	0x40012c00
 8006464:	40013400 	.word	0x40013400
 8006468:	40014000 	.word	0x40014000
 800646c:	40014400 	.word	0x40014400
 8006470:	40014800 	.word	0x40014800

08006474 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f003 031f 	and.w	r3, r3, #31
 8006486:	2201      	movs	r2, #1
 8006488:	fa02 f303 	lsl.w	r3, r2, r3
 800648c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6a1a      	ldr	r2, [r3, #32]
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	43db      	mvns	r3, r3
 8006496:	401a      	ands	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a1a      	ldr	r2, [r3, #32]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	fa01 f303 	lsl.w	r3, r1, r3
 80064ac:	431a      	orrs	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	621a      	str	r2, [r3, #32]
}
 80064b2:	bf00      	nop
 80064b4:	371c      	adds	r7, #28
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
	...

080064c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d101      	bne.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064d4:	2302      	movs	r3, #2
 80064d6:	e065      	b.n	80065a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a2c      	ldr	r2, [pc, #176]	@ (80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d004      	beq.n	800650c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a2b      	ldr	r2, [pc, #172]	@ (80065b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d108      	bne.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006512:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006524:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006528:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	4313      	orrs	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a1b      	ldr	r2, [pc, #108]	@ (80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d018      	beq.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800654e:	d013      	beq.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a18      	ldr	r2, [pc, #96]	@ (80065b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00e      	beq.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a17      	ldr	r2, [pc, #92]	@ (80065bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d009      	beq.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a12      	ldr	r2, [pc, #72]	@ (80065b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d004      	beq.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a13      	ldr	r2, [pc, #76]	@ (80065c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d10c      	bne.n	8006592 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800657e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	4313      	orrs	r3, r2
 8006588:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	40012c00 	.word	0x40012c00
 80065b4:	40013400 	.word	0x40013400
 80065b8:	40000400 	.word	0x40000400
 80065bc:	40000800 	.word	0x40000800
 80065c0:	40014000 	.word	0x40014000

080065c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d101      	bne.n	80065e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065dc:	2302      	movs	r3, #2
 80065de:	e073      	b.n	80066c8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4313      	orrs	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	4313      	orrs	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	041b      	lsls	r3, r3, #16
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a19      	ldr	r2, [pc, #100]	@ (80066d4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d004      	beq.n	800667c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a18      	ldr	r2, [pc, #96]	@ (80066d8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d11c      	bne.n	80066b6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006686:	051b      	lsls	r3, r3, #20
 8006688:	4313      	orrs	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	4313      	orrs	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a4:	4313      	orrs	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	40012c00 	.word	0x40012c00
 80066d8:	40013400 	.word	0x40013400

080066dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e042      	b.n	8006774 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d106      	bne.n	8006706 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7fb fd29 	bl	8002158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2224      	movs	r2, #36	@ 0x24
 800670a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0201 	bic.w	r2, r2, #1
 800671c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fb82 	bl	8006e30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 f8b3 	bl	8006898 <UART_SetConfig>
 8006732:	4603      	mov	r3, r0
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e01b      	b.n	8006774 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800674a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689a      	ldr	r2, [r3, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800675a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 0201 	orr.w	r2, r2, #1
 800676a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fc01 	bl	8006f74 <UART_CheckIdleState>
 8006772:	4603      	mov	r3, r0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08a      	sub	sp, #40	@ 0x28
 8006780:	af02      	add	r7, sp, #8
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	4613      	mov	r3, r2
 800678a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006792:	2b20      	cmp	r3, #32
 8006794:	d17b      	bne.n	800688e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <HAL_UART_Transmit+0x26>
 800679c:	88fb      	ldrh	r3, [r7, #6]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e074      	b.n	8006890 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2221      	movs	r2, #33	@ 0x21
 80067b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067b6:	f7fb fdf5 	bl	80023a4 <HAL_GetTick>
 80067ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	88fa      	ldrh	r2, [r7, #6]
 80067c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	88fa      	ldrh	r2, [r7, #6]
 80067c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067d4:	d108      	bne.n	80067e8 <HAL_UART_Transmit+0x6c>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d104      	bne.n	80067e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067de:	2300      	movs	r3, #0
 80067e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	61bb      	str	r3, [r7, #24]
 80067e6:	e003      	b.n	80067f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067ec:	2300      	movs	r3, #0
 80067ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067f0:	e030      	b.n	8006854 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2200      	movs	r2, #0
 80067fa:	2180      	movs	r1, #128	@ 0x80
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 fc63 	bl	80070c8 <UART_WaitOnFlagUntilTimeout>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d005      	beq.n	8006814 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2220      	movs	r2, #32
 800680c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e03d      	b.n	8006890 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10b      	bne.n	8006832 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006828:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	3302      	adds	r3, #2
 800682e:	61bb      	str	r3, [r7, #24]
 8006830:	e007      	b.n	8006842 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	781a      	ldrb	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	3301      	adds	r3, #1
 8006840:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006848:	b29b      	uxth	r3, r3
 800684a:	3b01      	subs	r3, #1
 800684c:	b29a      	uxth	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800685a:	b29b      	uxth	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1c8      	bne.n	80067f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2200      	movs	r2, #0
 8006868:	2140      	movs	r1, #64	@ 0x40
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 fc2c 	bl	80070c8 <UART_WaitOnFlagUntilTimeout>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2220      	movs	r2, #32
 800687a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e006      	b.n	8006890 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2220      	movs	r2, #32
 8006886:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	e000      	b.n	8006890 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800688e:	2302      	movs	r3, #2
  }
}
 8006890:	4618      	mov	r0, r3
 8006892:	3720      	adds	r7, #32
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800689c:	b08c      	sub	sp, #48	@ 0x30
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	431a      	orrs	r2, r3
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	431a      	orrs	r2, r3
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	4313      	orrs	r3, r2
 80068be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	4bab      	ldr	r3, [pc, #684]	@ (8006b74 <UART_SetConfig+0x2dc>)
 80068c8:	4013      	ands	r3, r2
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	6812      	ldr	r2, [r2, #0]
 80068ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068d0:	430b      	orrs	r3, r1
 80068d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4aa0      	ldr	r2, [pc, #640]	@ (8006b78 <UART_SetConfig+0x2e0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d004      	beq.n	8006904 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006900:	4313      	orrs	r3, r2
 8006902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800690e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	6812      	ldr	r2, [r2, #0]
 8006916:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006918:	430b      	orrs	r3, r1
 800691a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006922:	f023 010f 	bic.w	r1, r3, #15
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a91      	ldr	r2, [pc, #580]	@ (8006b7c <UART_SetConfig+0x2e4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d125      	bne.n	8006988 <UART_SetConfig+0xf0>
 800693c:	4b90      	ldr	r3, [pc, #576]	@ (8006b80 <UART_SetConfig+0x2e8>)
 800693e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006942:	f003 0303 	and.w	r3, r3, #3
 8006946:	2b03      	cmp	r3, #3
 8006948:	d81a      	bhi.n	8006980 <UART_SetConfig+0xe8>
 800694a:	a201      	add	r2, pc, #4	@ (adr r2, 8006950 <UART_SetConfig+0xb8>)
 800694c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006950:	08006961 	.word	0x08006961
 8006954:	08006971 	.word	0x08006971
 8006958:	08006969 	.word	0x08006969
 800695c:	08006979 	.word	0x08006979
 8006960:	2301      	movs	r3, #1
 8006962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006966:	e0d6      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006968:	2302      	movs	r3, #2
 800696a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800696e:	e0d2      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006970:	2304      	movs	r3, #4
 8006972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006976:	e0ce      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006978:	2308      	movs	r3, #8
 800697a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800697e:	e0ca      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006980:	2310      	movs	r3, #16
 8006982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006986:	e0c6      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a7d      	ldr	r2, [pc, #500]	@ (8006b84 <UART_SetConfig+0x2ec>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d138      	bne.n	8006a04 <UART_SetConfig+0x16c>
 8006992:	4b7b      	ldr	r3, [pc, #492]	@ (8006b80 <UART_SetConfig+0x2e8>)
 8006994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006998:	f003 030c 	and.w	r3, r3, #12
 800699c:	2b0c      	cmp	r3, #12
 800699e:	d82d      	bhi.n	80069fc <UART_SetConfig+0x164>
 80069a0:	a201      	add	r2, pc, #4	@ (adr r2, 80069a8 <UART_SetConfig+0x110>)
 80069a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a6:	bf00      	nop
 80069a8:	080069dd 	.word	0x080069dd
 80069ac:	080069fd 	.word	0x080069fd
 80069b0:	080069fd 	.word	0x080069fd
 80069b4:	080069fd 	.word	0x080069fd
 80069b8:	080069ed 	.word	0x080069ed
 80069bc:	080069fd 	.word	0x080069fd
 80069c0:	080069fd 	.word	0x080069fd
 80069c4:	080069fd 	.word	0x080069fd
 80069c8:	080069e5 	.word	0x080069e5
 80069cc:	080069fd 	.word	0x080069fd
 80069d0:	080069fd 	.word	0x080069fd
 80069d4:	080069fd 	.word	0x080069fd
 80069d8:	080069f5 	.word	0x080069f5
 80069dc:	2300      	movs	r3, #0
 80069de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069e2:	e098      	b.n	8006b16 <UART_SetConfig+0x27e>
 80069e4:	2302      	movs	r3, #2
 80069e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ea:	e094      	b.n	8006b16 <UART_SetConfig+0x27e>
 80069ec:	2304      	movs	r3, #4
 80069ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069f2:	e090      	b.n	8006b16 <UART_SetConfig+0x27e>
 80069f4:	2308      	movs	r3, #8
 80069f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069fa:	e08c      	b.n	8006b16 <UART_SetConfig+0x27e>
 80069fc:	2310      	movs	r3, #16
 80069fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a02:	e088      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a5f      	ldr	r2, [pc, #380]	@ (8006b88 <UART_SetConfig+0x2f0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d125      	bne.n	8006a5a <UART_SetConfig+0x1c2>
 8006a0e:	4b5c      	ldr	r3, [pc, #368]	@ (8006b80 <UART_SetConfig+0x2e8>)
 8006a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a14:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a18:	2b30      	cmp	r3, #48	@ 0x30
 8006a1a:	d016      	beq.n	8006a4a <UART_SetConfig+0x1b2>
 8006a1c:	2b30      	cmp	r3, #48	@ 0x30
 8006a1e:	d818      	bhi.n	8006a52 <UART_SetConfig+0x1ba>
 8006a20:	2b20      	cmp	r3, #32
 8006a22:	d00a      	beq.n	8006a3a <UART_SetConfig+0x1a2>
 8006a24:	2b20      	cmp	r3, #32
 8006a26:	d814      	bhi.n	8006a52 <UART_SetConfig+0x1ba>
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d002      	beq.n	8006a32 <UART_SetConfig+0x19a>
 8006a2c:	2b10      	cmp	r3, #16
 8006a2e:	d008      	beq.n	8006a42 <UART_SetConfig+0x1aa>
 8006a30:	e00f      	b.n	8006a52 <UART_SetConfig+0x1ba>
 8006a32:	2300      	movs	r3, #0
 8006a34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a38:	e06d      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a40:	e069      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006a42:	2304      	movs	r3, #4
 8006a44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a48:	e065      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006a4a:	2308      	movs	r3, #8
 8006a4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a50:	e061      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006a52:	2310      	movs	r3, #16
 8006a54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a58:	e05d      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a4b      	ldr	r2, [pc, #300]	@ (8006b8c <UART_SetConfig+0x2f4>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d125      	bne.n	8006ab0 <UART_SetConfig+0x218>
 8006a64:	4b46      	ldr	r3, [pc, #280]	@ (8006b80 <UART_SetConfig+0x2e8>)
 8006a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a6a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006a6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a70:	d016      	beq.n	8006aa0 <UART_SetConfig+0x208>
 8006a72:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a74:	d818      	bhi.n	8006aa8 <UART_SetConfig+0x210>
 8006a76:	2b80      	cmp	r3, #128	@ 0x80
 8006a78:	d00a      	beq.n	8006a90 <UART_SetConfig+0x1f8>
 8006a7a:	2b80      	cmp	r3, #128	@ 0x80
 8006a7c:	d814      	bhi.n	8006aa8 <UART_SetConfig+0x210>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d002      	beq.n	8006a88 <UART_SetConfig+0x1f0>
 8006a82:	2b40      	cmp	r3, #64	@ 0x40
 8006a84:	d008      	beq.n	8006a98 <UART_SetConfig+0x200>
 8006a86:	e00f      	b.n	8006aa8 <UART_SetConfig+0x210>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a8e:	e042      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006a90:	2302      	movs	r3, #2
 8006a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a96:	e03e      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006a98:	2304      	movs	r3, #4
 8006a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a9e:	e03a      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006aa0:	2308      	movs	r3, #8
 8006aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aa6:	e036      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006aa8:	2310      	movs	r3, #16
 8006aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aae:	e032      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a30      	ldr	r2, [pc, #192]	@ (8006b78 <UART_SetConfig+0x2e0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d12a      	bne.n	8006b10 <UART_SetConfig+0x278>
 8006aba:	4b31      	ldr	r3, [pc, #196]	@ (8006b80 <UART_SetConfig+0x2e8>)
 8006abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006ac4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ac8:	d01a      	beq.n	8006b00 <UART_SetConfig+0x268>
 8006aca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ace:	d81b      	bhi.n	8006b08 <UART_SetConfig+0x270>
 8006ad0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ad4:	d00c      	beq.n	8006af0 <UART_SetConfig+0x258>
 8006ad6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ada:	d815      	bhi.n	8006b08 <UART_SetConfig+0x270>
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d003      	beq.n	8006ae8 <UART_SetConfig+0x250>
 8006ae0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ae4:	d008      	beq.n	8006af8 <UART_SetConfig+0x260>
 8006ae6:	e00f      	b.n	8006b08 <UART_SetConfig+0x270>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aee:	e012      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006af0:	2302      	movs	r3, #2
 8006af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006af6:	e00e      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006af8:	2304      	movs	r3, #4
 8006afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006afe:	e00a      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006b00:	2308      	movs	r3, #8
 8006b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b06:	e006      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006b08:	2310      	movs	r3, #16
 8006b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b0e:	e002      	b.n	8006b16 <UART_SetConfig+0x27e>
 8006b10:	2310      	movs	r3, #16
 8006b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a17      	ldr	r2, [pc, #92]	@ (8006b78 <UART_SetConfig+0x2e0>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	f040 80a8 	bne.w	8006c72 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b26:	2b08      	cmp	r3, #8
 8006b28:	d834      	bhi.n	8006b94 <UART_SetConfig+0x2fc>
 8006b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b30 <UART_SetConfig+0x298>)
 8006b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b30:	08006b55 	.word	0x08006b55
 8006b34:	08006b95 	.word	0x08006b95
 8006b38:	08006b5d 	.word	0x08006b5d
 8006b3c:	08006b95 	.word	0x08006b95
 8006b40:	08006b63 	.word	0x08006b63
 8006b44:	08006b95 	.word	0x08006b95
 8006b48:	08006b95 	.word	0x08006b95
 8006b4c:	08006b95 	.word	0x08006b95
 8006b50:	08006b6b 	.word	0x08006b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b54:	f7fd fc54 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 8006b58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b5a:	e021      	b.n	8006ba0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8006b90 <UART_SetConfig+0x2f8>)
 8006b5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b60:	e01e      	b.n	8006ba0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b62:	f7fd fbe1 	bl	8004328 <HAL_RCC_GetSysClockFreq>
 8006b66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b68:	e01a      	b.n	8006ba0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b70:	e016      	b.n	8006ba0 <UART_SetConfig+0x308>
 8006b72:	bf00      	nop
 8006b74:	cfff69f3 	.word	0xcfff69f3
 8006b78:	40008000 	.word	0x40008000
 8006b7c:	40013800 	.word	0x40013800
 8006b80:	40021000 	.word	0x40021000
 8006b84:	40004400 	.word	0x40004400
 8006b88:	40004800 	.word	0x40004800
 8006b8c:	40004c00 	.word	0x40004c00
 8006b90:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 812a 	beq.w	8006dfc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bac:	4a9e      	ldr	r2, [pc, #632]	@ (8006e28 <UART_SetConfig+0x590>)
 8006bae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bba:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	4413      	add	r3, r2
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d305      	bcc.n	8006bd8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d903      	bls.n	8006be0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006bde:	e10d      	b.n	8006dfc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be2:	2200      	movs	r2, #0
 8006be4:	60bb      	str	r3, [r7, #8]
 8006be6:	60fa      	str	r2, [r7, #12]
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bec:	4a8e      	ldr	r2, [pc, #568]	@ (8006e28 <UART_SetConfig+0x590>)
 8006bee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	603b      	str	r3, [r7, #0]
 8006bf8:	607a      	str	r2, [r7, #4]
 8006bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c02:	f7fa f869 	bl	8000cd8 <__aeabi_uldivmod>
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	f04f 0300 	mov.w	r3, #0
 8006c16:	020b      	lsls	r3, r1, #8
 8006c18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c1c:	0202      	lsls	r2, r0, #8
 8006c1e:	6979      	ldr	r1, [r7, #20]
 8006c20:	6849      	ldr	r1, [r1, #4]
 8006c22:	0849      	lsrs	r1, r1, #1
 8006c24:	2000      	movs	r0, #0
 8006c26:	460c      	mov	r4, r1
 8006c28:	4605      	mov	r5, r0
 8006c2a:	eb12 0804 	adds.w	r8, r2, r4
 8006c2e:	eb43 0905 	adc.w	r9, r3, r5
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	469a      	mov	sl, r3
 8006c3a:	4693      	mov	fp, r2
 8006c3c:	4652      	mov	r2, sl
 8006c3e:	465b      	mov	r3, fp
 8006c40:	4640      	mov	r0, r8
 8006c42:	4649      	mov	r1, r9
 8006c44:	f7fa f848 	bl	8000cd8 <__aeabi_uldivmod>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c56:	d308      	bcc.n	8006c6a <UART_SetConfig+0x3d2>
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c5e:	d204      	bcs.n	8006c6a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6a3a      	ldr	r2, [r7, #32]
 8006c66:	60da      	str	r2, [r3, #12]
 8006c68:	e0c8      	b.n	8006dfc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c70:	e0c4      	b.n	8006dfc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c7a:	d167      	bne.n	8006d4c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006c7c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d828      	bhi.n	8006cd6 <UART_SetConfig+0x43e>
 8006c84:	a201      	add	r2, pc, #4	@ (adr r2, 8006c8c <UART_SetConfig+0x3f4>)
 8006c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8a:	bf00      	nop
 8006c8c:	08006cb1 	.word	0x08006cb1
 8006c90:	08006cb9 	.word	0x08006cb9
 8006c94:	08006cc1 	.word	0x08006cc1
 8006c98:	08006cd7 	.word	0x08006cd7
 8006c9c:	08006cc7 	.word	0x08006cc7
 8006ca0:	08006cd7 	.word	0x08006cd7
 8006ca4:	08006cd7 	.word	0x08006cd7
 8006ca8:	08006cd7 	.word	0x08006cd7
 8006cac:	08006ccf 	.word	0x08006ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb0:	f7fd fba6 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 8006cb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cb6:	e014      	b.n	8006ce2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cb8:	f7fd fbb8 	bl	800442c <HAL_RCC_GetPCLK2Freq>
 8006cbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cbe:	e010      	b.n	8006ce2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cc0:	4b5a      	ldr	r3, [pc, #360]	@ (8006e2c <UART_SetConfig+0x594>)
 8006cc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cc4:	e00d      	b.n	8006ce2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cc6:	f7fd fb2f 	bl	8004328 <HAL_RCC_GetSysClockFreq>
 8006cca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ccc:	e009      	b.n	8006ce2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cd4:	e005      	b.n	8006ce2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ce0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 8089 	beq.w	8006dfc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cee:	4a4e      	ldr	r2, [pc, #312]	@ (8006e28 <UART_SetConfig+0x590>)
 8006cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cfc:	005a      	lsls	r2, r3, #1
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	441a      	add	r2, r3
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	2b0f      	cmp	r3, #15
 8006d14:	d916      	bls.n	8006d44 <UART_SetConfig+0x4ac>
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d1c:	d212      	bcs.n	8006d44 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	f023 030f 	bic.w	r3, r3, #15
 8006d26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	085b      	lsrs	r3, r3, #1
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	8bfb      	ldrh	r3, [r7, #30]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	8bfa      	ldrh	r2, [r7, #30]
 8006d40:	60da      	str	r2, [r3, #12]
 8006d42:	e05b      	b.n	8006dfc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d4a:	e057      	b.n	8006dfc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d4c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d828      	bhi.n	8006da6 <UART_SetConfig+0x50e>
 8006d54:	a201      	add	r2, pc, #4	@ (adr r2, 8006d5c <UART_SetConfig+0x4c4>)
 8006d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5a:	bf00      	nop
 8006d5c:	08006d81 	.word	0x08006d81
 8006d60:	08006d89 	.word	0x08006d89
 8006d64:	08006d91 	.word	0x08006d91
 8006d68:	08006da7 	.word	0x08006da7
 8006d6c:	08006d97 	.word	0x08006d97
 8006d70:	08006da7 	.word	0x08006da7
 8006d74:	08006da7 	.word	0x08006da7
 8006d78:	08006da7 	.word	0x08006da7
 8006d7c:	08006d9f 	.word	0x08006d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d80:	f7fd fb3e 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 8006d84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d86:	e014      	b.n	8006db2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d88:	f7fd fb50 	bl	800442c <HAL_RCC_GetPCLK2Freq>
 8006d8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d8e:	e010      	b.n	8006db2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d90:	4b26      	ldr	r3, [pc, #152]	@ (8006e2c <UART_SetConfig+0x594>)
 8006d92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d94:	e00d      	b.n	8006db2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d96:	f7fd fac7 	bl	8004328 <HAL_RCC_GetSysClockFreq>
 8006d9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d9c:	e009      	b.n	8006db2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006da2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006da4:	e005      	b.n	8006db2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006db0:	bf00      	nop
    }

    if (pclk != 0U)
 8006db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d021      	beq.n	8006dfc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8006e28 <UART_SetConfig+0x590>)
 8006dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	085b      	lsrs	r3, r3, #1
 8006dd0:	441a      	add	r2, r3
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	2b0f      	cmp	r3, #15
 8006de0:	d909      	bls.n	8006df6 <UART_SetConfig+0x55e>
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006de8:	d205      	bcs.n	8006df6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	60da      	str	r2, [r3, #12]
 8006df4:	e002      	b.n	8006dfc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2200      	movs	r2, #0
 8006e16:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006e18:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3730      	adds	r7, #48	@ 0x30
 8006e20:	46bd      	mov	sp, r7
 8006e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e26:	bf00      	nop
 8006e28:	0800bbe8 	.word	0x0800bbe8
 8006e2c:	00f42400 	.word	0x00f42400

08006e30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00a      	beq.n	8006e9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea2:	f003 0304 	and.w	r3, r3, #4
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec4:	f003 0310 	and.w	r3, r3, #16
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00a      	beq.n	8006ee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee6:	f003 0320 	and.w	r3, r3, #32
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00a      	beq.n	8006f04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d01a      	beq.n	8006f46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	430a      	orrs	r2, r1
 8006f24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f2e:	d10a      	bne.n	8006f46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00a      	beq.n	8006f68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	430a      	orrs	r2, r1
 8006f66:	605a      	str	r2, [r3, #4]
  }
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b098      	sub	sp, #96	@ 0x60
 8006f78:	af02      	add	r7, sp, #8
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f84:	f7fb fa0e 	bl	80023a4 <HAL_GetTick>
 8006f88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0308 	and.w	r3, r3, #8
 8006f94:	2b08      	cmp	r3, #8
 8006f96:	d12f      	bne.n	8006ff8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f88e 	bl	80070c8 <UART_WaitOnFlagUntilTimeout>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d022      	beq.n	8006ff8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fba:	e853 3f00 	ldrex	r3, [r3]
 8006fbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fd2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fd8:	e841 2300 	strex	r3, r2, [r1]
 8006fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e6      	bne.n	8006fb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e063      	b.n	80070c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0304 	and.w	r3, r3, #4
 8007002:	2b04      	cmp	r3, #4
 8007004:	d149      	bne.n	800709a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007006:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800700e:	2200      	movs	r2, #0
 8007010:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f857 	bl	80070c8 <UART_WaitOnFlagUntilTimeout>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d03c      	beq.n	800709a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	623b      	str	r3, [r7, #32]
   return(result);
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007034:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800703e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007040:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007042:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800704c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1e6      	bne.n	8007020 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3308      	adds	r3, #8
 8007058:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	e853 3f00 	ldrex	r3, [r3]
 8007060:	60fb      	str	r3, [r7, #12]
   return(result);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f023 0301 	bic.w	r3, r3, #1
 8007068:	64bb      	str	r3, [r7, #72]	@ 0x48
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3308      	adds	r3, #8
 8007070:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007072:	61fa      	str	r2, [r7, #28]
 8007074:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007076:	69b9      	ldr	r1, [r7, #24]
 8007078:	69fa      	ldr	r2, [r7, #28]
 800707a:	e841 2300 	strex	r3, r2, [r1]
 800707e:	617b      	str	r3, [r7, #20]
   return(result);
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1e5      	bne.n	8007052 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2220      	movs	r2, #32
 800708a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e012      	b.n	80070c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2220      	movs	r2, #32
 800709e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2220      	movs	r2, #32
 80070a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3758      	adds	r7, #88	@ 0x58
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	603b      	str	r3, [r7, #0]
 80070d4:	4613      	mov	r3, r2
 80070d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070d8:	e04f      	b.n	800717a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e0:	d04b      	beq.n	800717a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070e2:	f7fb f95f 	bl	80023a4 <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d302      	bcc.n	80070f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e04e      	b.n	800719a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0304 	and.w	r3, r3, #4
 8007106:	2b00      	cmp	r3, #0
 8007108:	d037      	beq.n	800717a <UART_WaitOnFlagUntilTimeout+0xb2>
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b80      	cmp	r3, #128	@ 0x80
 800710e:	d034      	beq.n	800717a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b40      	cmp	r3, #64	@ 0x40
 8007114:	d031      	beq.n	800717a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	f003 0308 	and.w	r3, r3, #8
 8007120:	2b08      	cmp	r3, #8
 8007122:	d110      	bne.n	8007146 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2208      	movs	r2, #8
 800712a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 f838 	bl	80071a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2208      	movs	r2, #8
 8007136:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e029      	b.n	800719a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007150:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007154:	d111      	bne.n	800717a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800715e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f000 f81e 	bl	80071a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2220      	movs	r2, #32
 800716a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e00f      	b.n	800719a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	69da      	ldr	r2, [r3, #28]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	4013      	ands	r3, r2
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	429a      	cmp	r2, r3
 8007188:	bf0c      	ite	eq
 800718a:	2301      	moveq	r3, #1
 800718c:	2300      	movne	r3, #0
 800718e:	b2db      	uxtb	r3, r3
 8007190:	461a      	mov	r2, r3
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	429a      	cmp	r2, r3
 8007196:	d0a0      	beq.n	80070da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b095      	sub	sp, #84	@ 0x54
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80071ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e6      	bne.n	80071aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3308      	adds	r3, #8
 80071e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071f2:	f023 0301 	bic.w	r3, r3, #1
 80071f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3308      	adds	r3, #8
 80071fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007200:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007202:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800720e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e3      	bne.n	80071dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007218:	2b01      	cmp	r3, #1
 800721a:	d118      	bne.n	800724e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	60bb      	str	r3, [r7, #8]
   return(result);
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f023 0310 	bic.w	r3, r3, #16
 8007230:	647b      	str	r3, [r7, #68]	@ 0x44
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800723a:	61bb      	str	r3, [r7, #24]
 800723c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	6979      	ldr	r1, [r7, #20]
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	e841 2300 	strex	r3, r2, [r1]
 8007246:	613b      	str	r3, [r7, #16]
   return(result);
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1e6      	bne.n	800721c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2220      	movs	r2, #32
 8007252:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007262:	bf00      	nop
 8007264:	3754      	adds	r7, #84	@ 0x54
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800726e:	b480      	push	{r7}
 8007270:	b085      	sub	sp, #20
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800727c:	2b01      	cmp	r3, #1
 800727e:	d101      	bne.n	8007284 <HAL_UARTEx_DisableFifoMode+0x16>
 8007280:	2302      	movs	r3, #2
 8007282:	e027      	b.n	80072d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2224      	movs	r2, #36	@ 0x24
 8007290:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0201 	bic.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80072b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072f4:	2302      	movs	r3, #2
 80072f6:	e02d      	b.n	8007354 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2224      	movs	r2, #36	@ 0x24
 8007304:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0201 	bic.w	r2, r2, #1
 800731e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f84f 	bl	80073d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2220      	movs	r2, #32
 8007346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800736c:	2b01      	cmp	r3, #1
 800736e:	d101      	bne.n	8007374 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007370:	2302      	movs	r3, #2
 8007372:	e02d      	b.n	80073d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2224      	movs	r2, #36	@ 0x24
 8007380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0201 	bic.w	r2, r2, #1
 800739a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f811 	bl	80073d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d108      	bne.n	80073fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80073f8:	e031      	b.n	800745e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80073fa:	2308      	movs	r3, #8
 80073fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80073fe:	2308      	movs	r3, #8
 8007400:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	0e5b      	lsrs	r3, r3, #25
 800740a:	b2db      	uxtb	r3, r3
 800740c:	f003 0307 	and.w	r3, r3, #7
 8007410:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	0f5b      	lsrs	r3, r3, #29
 800741a:	b2db      	uxtb	r3, r3
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007422:	7bbb      	ldrb	r3, [r7, #14]
 8007424:	7b3a      	ldrb	r2, [r7, #12]
 8007426:	4911      	ldr	r1, [pc, #68]	@ (800746c <UARTEx_SetNbDataToProcess+0x94>)
 8007428:	5c8a      	ldrb	r2, [r1, r2]
 800742a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800742e:	7b3a      	ldrb	r2, [r7, #12]
 8007430:	490f      	ldr	r1, [pc, #60]	@ (8007470 <UARTEx_SetNbDataToProcess+0x98>)
 8007432:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007434:	fb93 f3f2 	sdiv	r3, r3, r2
 8007438:	b29a      	uxth	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	7b7a      	ldrb	r2, [r7, #13]
 8007444:	4909      	ldr	r1, [pc, #36]	@ (800746c <UARTEx_SetNbDataToProcess+0x94>)
 8007446:	5c8a      	ldrb	r2, [r1, r2]
 8007448:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800744c:	7b7a      	ldrb	r2, [r7, #13]
 800744e:	4908      	ldr	r1, [pc, #32]	@ (8007470 <UARTEx_SetNbDataToProcess+0x98>)
 8007450:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007452:	fb93 f3f2 	sdiv	r3, r3, r2
 8007456:	b29a      	uxth	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800745e:	bf00      	nop
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	0800bc00 	.word	0x0800bc00
 8007470:	0800bc08 	.word	0x0800bc08

08007474 <__cvt>:
 8007474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007478:	ec57 6b10 	vmov	r6, r7, d0
 800747c:	2f00      	cmp	r7, #0
 800747e:	460c      	mov	r4, r1
 8007480:	4619      	mov	r1, r3
 8007482:	463b      	mov	r3, r7
 8007484:	bfbb      	ittet	lt
 8007486:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800748a:	461f      	movlt	r7, r3
 800748c:	2300      	movge	r3, #0
 800748e:	232d      	movlt	r3, #45	@ 0x2d
 8007490:	700b      	strb	r3, [r1, #0]
 8007492:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007494:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007498:	4691      	mov	r9, r2
 800749a:	f023 0820 	bic.w	r8, r3, #32
 800749e:	bfbc      	itt	lt
 80074a0:	4632      	movlt	r2, r6
 80074a2:	4616      	movlt	r6, r2
 80074a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074a8:	d005      	beq.n	80074b6 <__cvt+0x42>
 80074aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80074ae:	d100      	bne.n	80074b2 <__cvt+0x3e>
 80074b0:	3401      	adds	r4, #1
 80074b2:	2102      	movs	r1, #2
 80074b4:	e000      	b.n	80074b8 <__cvt+0x44>
 80074b6:	2103      	movs	r1, #3
 80074b8:	ab03      	add	r3, sp, #12
 80074ba:	9301      	str	r3, [sp, #4]
 80074bc:	ab02      	add	r3, sp, #8
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	ec47 6b10 	vmov	d0, r6, r7
 80074c4:	4653      	mov	r3, sl
 80074c6:	4622      	mov	r2, r4
 80074c8:	f001 f876 	bl	80085b8 <_dtoa_r>
 80074cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80074d0:	4605      	mov	r5, r0
 80074d2:	d119      	bne.n	8007508 <__cvt+0x94>
 80074d4:	f019 0f01 	tst.w	r9, #1
 80074d8:	d00e      	beq.n	80074f8 <__cvt+0x84>
 80074da:	eb00 0904 	add.w	r9, r0, r4
 80074de:	2200      	movs	r2, #0
 80074e0:	2300      	movs	r3, #0
 80074e2:	4630      	mov	r0, r6
 80074e4:	4639      	mov	r1, r7
 80074e6:	f7f9 fb17 	bl	8000b18 <__aeabi_dcmpeq>
 80074ea:	b108      	cbz	r0, 80074f0 <__cvt+0x7c>
 80074ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80074f0:	2230      	movs	r2, #48	@ 0x30
 80074f2:	9b03      	ldr	r3, [sp, #12]
 80074f4:	454b      	cmp	r3, r9
 80074f6:	d31e      	bcc.n	8007536 <__cvt+0xc2>
 80074f8:	9b03      	ldr	r3, [sp, #12]
 80074fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074fc:	1b5b      	subs	r3, r3, r5
 80074fe:	4628      	mov	r0, r5
 8007500:	6013      	str	r3, [r2, #0]
 8007502:	b004      	add	sp, #16
 8007504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007508:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800750c:	eb00 0904 	add.w	r9, r0, r4
 8007510:	d1e5      	bne.n	80074de <__cvt+0x6a>
 8007512:	7803      	ldrb	r3, [r0, #0]
 8007514:	2b30      	cmp	r3, #48	@ 0x30
 8007516:	d10a      	bne.n	800752e <__cvt+0xba>
 8007518:	2200      	movs	r2, #0
 800751a:	2300      	movs	r3, #0
 800751c:	4630      	mov	r0, r6
 800751e:	4639      	mov	r1, r7
 8007520:	f7f9 fafa 	bl	8000b18 <__aeabi_dcmpeq>
 8007524:	b918      	cbnz	r0, 800752e <__cvt+0xba>
 8007526:	f1c4 0401 	rsb	r4, r4, #1
 800752a:	f8ca 4000 	str.w	r4, [sl]
 800752e:	f8da 3000 	ldr.w	r3, [sl]
 8007532:	4499      	add	r9, r3
 8007534:	e7d3      	b.n	80074de <__cvt+0x6a>
 8007536:	1c59      	adds	r1, r3, #1
 8007538:	9103      	str	r1, [sp, #12]
 800753a:	701a      	strb	r2, [r3, #0]
 800753c:	e7d9      	b.n	80074f2 <__cvt+0x7e>

0800753e <__exponent>:
 800753e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007540:	2900      	cmp	r1, #0
 8007542:	bfba      	itte	lt
 8007544:	4249      	neglt	r1, r1
 8007546:	232d      	movlt	r3, #45	@ 0x2d
 8007548:	232b      	movge	r3, #43	@ 0x2b
 800754a:	2909      	cmp	r1, #9
 800754c:	7002      	strb	r2, [r0, #0]
 800754e:	7043      	strb	r3, [r0, #1]
 8007550:	dd29      	ble.n	80075a6 <__exponent+0x68>
 8007552:	f10d 0307 	add.w	r3, sp, #7
 8007556:	461d      	mov	r5, r3
 8007558:	270a      	movs	r7, #10
 800755a:	461a      	mov	r2, r3
 800755c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007560:	fb07 1416 	mls	r4, r7, r6, r1
 8007564:	3430      	adds	r4, #48	@ 0x30
 8007566:	f802 4c01 	strb.w	r4, [r2, #-1]
 800756a:	460c      	mov	r4, r1
 800756c:	2c63      	cmp	r4, #99	@ 0x63
 800756e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007572:	4631      	mov	r1, r6
 8007574:	dcf1      	bgt.n	800755a <__exponent+0x1c>
 8007576:	3130      	adds	r1, #48	@ 0x30
 8007578:	1e94      	subs	r4, r2, #2
 800757a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800757e:	1c41      	adds	r1, r0, #1
 8007580:	4623      	mov	r3, r4
 8007582:	42ab      	cmp	r3, r5
 8007584:	d30a      	bcc.n	800759c <__exponent+0x5e>
 8007586:	f10d 0309 	add.w	r3, sp, #9
 800758a:	1a9b      	subs	r3, r3, r2
 800758c:	42ac      	cmp	r4, r5
 800758e:	bf88      	it	hi
 8007590:	2300      	movhi	r3, #0
 8007592:	3302      	adds	r3, #2
 8007594:	4403      	add	r3, r0
 8007596:	1a18      	subs	r0, r3, r0
 8007598:	b003      	add	sp, #12
 800759a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800759c:	f813 6b01 	ldrb.w	r6, [r3], #1
 80075a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80075a4:	e7ed      	b.n	8007582 <__exponent+0x44>
 80075a6:	2330      	movs	r3, #48	@ 0x30
 80075a8:	3130      	adds	r1, #48	@ 0x30
 80075aa:	7083      	strb	r3, [r0, #2]
 80075ac:	70c1      	strb	r1, [r0, #3]
 80075ae:	1d03      	adds	r3, r0, #4
 80075b0:	e7f1      	b.n	8007596 <__exponent+0x58>
	...

080075b4 <_printf_float>:
 80075b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b8:	b08d      	sub	sp, #52	@ 0x34
 80075ba:	460c      	mov	r4, r1
 80075bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80075c0:	4616      	mov	r6, r2
 80075c2:	461f      	mov	r7, r3
 80075c4:	4605      	mov	r5, r0
 80075c6:	f000 feef 	bl	80083a8 <_localeconv_r>
 80075ca:	6803      	ldr	r3, [r0, #0]
 80075cc:	9304      	str	r3, [sp, #16]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7f8 fe76 	bl	80002c0 <strlen>
 80075d4:	2300      	movs	r3, #0
 80075d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80075d8:	f8d8 3000 	ldr.w	r3, [r8]
 80075dc:	9005      	str	r0, [sp, #20]
 80075de:	3307      	adds	r3, #7
 80075e0:	f023 0307 	bic.w	r3, r3, #7
 80075e4:	f103 0208 	add.w	r2, r3, #8
 80075e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80075ec:	f8d4 b000 	ldr.w	fp, [r4]
 80075f0:	f8c8 2000 	str.w	r2, [r8]
 80075f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80075fc:	9307      	str	r3, [sp, #28]
 80075fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8007602:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007606:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800760a:	4b9c      	ldr	r3, [pc, #624]	@ (800787c <_printf_float+0x2c8>)
 800760c:	f04f 32ff 	mov.w	r2, #4294967295
 8007610:	f7f9 fab4 	bl	8000b7c <__aeabi_dcmpun>
 8007614:	bb70      	cbnz	r0, 8007674 <_printf_float+0xc0>
 8007616:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800761a:	4b98      	ldr	r3, [pc, #608]	@ (800787c <_printf_float+0x2c8>)
 800761c:	f04f 32ff 	mov.w	r2, #4294967295
 8007620:	f7f9 fa8e 	bl	8000b40 <__aeabi_dcmple>
 8007624:	bb30      	cbnz	r0, 8007674 <_printf_float+0xc0>
 8007626:	2200      	movs	r2, #0
 8007628:	2300      	movs	r3, #0
 800762a:	4640      	mov	r0, r8
 800762c:	4649      	mov	r1, r9
 800762e:	f7f9 fa7d 	bl	8000b2c <__aeabi_dcmplt>
 8007632:	b110      	cbz	r0, 800763a <_printf_float+0x86>
 8007634:	232d      	movs	r3, #45	@ 0x2d
 8007636:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800763a:	4a91      	ldr	r2, [pc, #580]	@ (8007880 <_printf_float+0x2cc>)
 800763c:	4b91      	ldr	r3, [pc, #580]	@ (8007884 <_printf_float+0x2d0>)
 800763e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007642:	bf94      	ite	ls
 8007644:	4690      	movls	r8, r2
 8007646:	4698      	movhi	r8, r3
 8007648:	2303      	movs	r3, #3
 800764a:	6123      	str	r3, [r4, #16]
 800764c:	f02b 0304 	bic.w	r3, fp, #4
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	f04f 0900 	mov.w	r9, #0
 8007656:	9700      	str	r7, [sp, #0]
 8007658:	4633      	mov	r3, r6
 800765a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800765c:	4621      	mov	r1, r4
 800765e:	4628      	mov	r0, r5
 8007660:	f000 f9d2 	bl	8007a08 <_printf_common>
 8007664:	3001      	adds	r0, #1
 8007666:	f040 808d 	bne.w	8007784 <_printf_float+0x1d0>
 800766a:	f04f 30ff 	mov.w	r0, #4294967295
 800766e:	b00d      	add	sp, #52	@ 0x34
 8007670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007674:	4642      	mov	r2, r8
 8007676:	464b      	mov	r3, r9
 8007678:	4640      	mov	r0, r8
 800767a:	4649      	mov	r1, r9
 800767c:	f7f9 fa7e 	bl	8000b7c <__aeabi_dcmpun>
 8007680:	b140      	cbz	r0, 8007694 <_printf_float+0xe0>
 8007682:	464b      	mov	r3, r9
 8007684:	2b00      	cmp	r3, #0
 8007686:	bfbc      	itt	lt
 8007688:	232d      	movlt	r3, #45	@ 0x2d
 800768a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800768e:	4a7e      	ldr	r2, [pc, #504]	@ (8007888 <_printf_float+0x2d4>)
 8007690:	4b7e      	ldr	r3, [pc, #504]	@ (800788c <_printf_float+0x2d8>)
 8007692:	e7d4      	b.n	800763e <_printf_float+0x8a>
 8007694:	6863      	ldr	r3, [r4, #4]
 8007696:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800769a:	9206      	str	r2, [sp, #24]
 800769c:	1c5a      	adds	r2, r3, #1
 800769e:	d13b      	bne.n	8007718 <_printf_float+0x164>
 80076a0:	2306      	movs	r3, #6
 80076a2:	6063      	str	r3, [r4, #4]
 80076a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80076a8:	2300      	movs	r3, #0
 80076aa:	6022      	str	r2, [r4, #0]
 80076ac:	9303      	str	r3, [sp, #12]
 80076ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80076b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80076b4:	ab09      	add	r3, sp, #36	@ 0x24
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	6861      	ldr	r1, [r4, #4]
 80076ba:	ec49 8b10 	vmov	d0, r8, r9
 80076be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80076c2:	4628      	mov	r0, r5
 80076c4:	f7ff fed6 	bl	8007474 <__cvt>
 80076c8:	9b06      	ldr	r3, [sp, #24]
 80076ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076cc:	2b47      	cmp	r3, #71	@ 0x47
 80076ce:	4680      	mov	r8, r0
 80076d0:	d129      	bne.n	8007726 <_printf_float+0x172>
 80076d2:	1cc8      	adds	r0, r1, #3
 80076d4:	db02      	blt.n	80076dc <_printf_float+0x128>
 80076d6:	6863      	ldr	r3, [r4, #4]
 80076d8:	4299      	cmp	r1, r3
 80076da:	dd41      	ble.n	8007760 <_printf_float+0x1ac>
 80076dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80076e0:	fa5f fa8a 	uxtb.w	sl, sl
 80076e4:	3901      	subs	r1, #1
 80076e6:	4652      	mov	r2, sl
 80076e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80076ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80076ee:	f7ff ff26 	bl	800753e <__exponent>
 80076f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076f4:	1813      	adds	r3, r2, r0
 80076f6:	2a01      	cmp	r2, #1
 80076f8:	4681      	mov	r9, r0
 80076fa:	6123      	str	r3, [r4, #16]
 80076fc:	dc02      	bgt.n	8007704 <_printf_float+0x150>
 80076fe:	6822      	ldr	r2, [r4, #0]
 8007700:	07d2      	lsls	r2, r2, #31
 8007702:	d501      	bpl.n	8007708 <_printf_float+0x154>
 8007704:	3301      	adds	r3, #1
 8007706:	6123      	str	r3, [r4, #16]
 8007708:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800770c:	2b00      	cmp	r3, #0
 800770e:	d0a2      	beq.n	8007656 <_printf_float+0xa2>
 8007710:	232d      	movs	r3, #45	@ 0x2d
 8007712:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007716:	e79e      	b.n	8007656 <_printf_float+0xa2>
 8007718:	9a06      	ldr	r2, [sp, #24]
 800771a:	2a47      	cmp	r2, #71	@ 0x47
 800771c:	d1c2      	bne.n	80076a4 <_printf_float+0xf0>
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1c0      	bne.n	80076a4 <_printf_float+0xf0>
 8007722:	2301      	movs	r3, #1
 8007724:	e7bd      	b.n	80076a2 <_printf_float+0xee>
 8007726:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800772a:	d9db      	bls.n	80076e4 <_printf_float+0x130>
 800772c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007730:	d118      	bne.n	8007764 <_printf_float+0x1b0>
 8007732:	2900      	cmp	r1, #0
 8007734:	6863      	ldr	r3, [r4, #4]
 8007736:	dd0b      	ble.n	8007750 <_printf_float+0x19c>
 8007738:	6121      	str	r1, [r4, #16]
 800773a:	b913      	cbnz	r3, 8007742 <_printf_float+0x18e>
 800773c:	6822      	ldr	r2, [r4, #0]
 800773e:	07d0      	lsls	r0, r2, #31
 8007740:	d502      	bpl.n	8007748 <_printf_float+0x194>
 8007742:	3301      	adds	r3, #1
 8007744:	440b      	add	r3, r1
 8007746:	6123      	str	r3, [r4, #16]
 8007748:	65a1      	str	r1, [r4, #88]	@ 0x58
 800774a:	f04f 0900 	mov.w	r9, #0
 800774e:	e7db      	b.n	8007708 <_printf_float+0x154>
 8007750:	b913      	cbnz	r3, 8007758 <_printf_float+0x1a4>
 8007752:	6822      	ldr	r2, [r4, #0]
 8007754:	07d2      	lsls	r2, r2, #31
 8007756:	d501      	bpl.n	800775c <_printf_float+0x1a8>
 8007758:	3302      	adds	r3, #2
 800775a:	e7f4      	b.n	8007746 <_printf_float+0x192>
 800775c:	2301      	movs	r3, #1
 800775e:	e7f2      	b.n	8007746 <_printf_float+0x192>
 8007760:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007766:	4299      	cmp	r1, r3
 8007768:	db05      	blt.n	8007776 <_printf_float+0x1c2>
 800776a:	6823      	ldr	r3, [r4, #0]
 800776c:	6121      	str	r1, [r4, #16]
 800776e:	07d8      	lsls	r0, r3, #31
 8007770:	d5ea      	bpl.n	8007748 <_printf_float+0x194>
 8007772:	1c4b      	adds	r3, r1, #1
 8007774:	e7e7      	b.n	8007746 <_printf_float+0x192>
 8007776:	2900      	cmp	r1, #0
 8007778:	bfd4      	ite	le
 800777a:	f1c1 0202 	rsble	r2, r1, #2
 800777e:	2201      	movgt	r2, #1
 8007780:	4413      	add	r3, r2
 8007782:	e7e0      	b.n	8007746 <_printf_float+0x192>
 8007784:	6823      	ldr	r3, [r4, #0]
 8007786:	055a      	lsls	r2, r3, #21
 8007788:	d407      	bmi.n	800779a <_printf_float+0x1e6>
 800778a:	6923      	ldr	r3, [r4, #16]
 800778c:	4642      	mov	r2, r8
 800778e:	4631      	mov	r1, r6
 8007790:	4628      	mov	r0, r5
 8007792:	47b8      	blx	r7
 8007794:	3001      	adds	r0, #1
 8007796:	d12b      	bne.n	80077f0 <_printf_float+0x23c>
 8007798:	e767      	b.n	800766a <_printf_float+0xb6>
 800779a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800779e:	f240 80dd 	bls.w	800795c <_printf_float+0x3a8>
 80077a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077a6:	2200      	movs	r2, #0
 80077a8:	2300      	movs	r3, #0
 80077aa:	f7f9 f9b5 	bl	8000b18 <__aeabi_dcmpeq>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	d033      	beq.n	800781a <_printf_float+0x266>
 80077b2:	4a37      	ldr	r2, [pc, #220]	@ (8007890 <_printf_float+0x2dc>)
 80077b4:	2301      	movs	r3, #1
 80077b6:	4631      	mov	r1, r6
 80077b8:	4628      	mov	r0, r5
 80077ba:	47b8      	blx	r7
 80077bc:	3001      	adds	r0, #1
 80077be:	f43f af54 	beq.w	800766a <_printf_float+0xb6>
 80077c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80077c6:	4543      	cmp	r3, r8
 80077c8:	db02      	blt.n	80077d0 <_printf_float+0x21c>
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	07d8      	lsls	r0, r3, #31
 80077ce:	d50f      	bpl.n	80077f0 <_printf_float+0x23c>
 80077d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077d4:	4631      	mov	r1, r6
 80077d6:	4628      	mov	r0, r5
 80077d8:	47b8      	blx	r7
 80077da:	3001      	adds	r0, #1
 80077dc:	f43f af45 	beq.w	800766a <_printf_float+0xb6>
 80077e0:	f04f 0900 	mov.w	r9, #0
 80077e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80077e8:	f104 0a1a 	add.w	sl, r4, #26
 80077ec:	45c8      	cmp	r8, r9
 80077ee:	dc09      	bgt.n	8007804 <_printf_float+0x250>
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	079b      	lsls	r3, r3, #30
 80077f4:	f100 8103 	bmi.w	80079fe <_printf_float+0x44a>
 80077f8:	68e0      	ldr	r0, [r4, #12]
 80077fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077fc:	4298      	cmp	r0, r3
 80077fe:	bfb8      	it	lt
 8007800:	4618      	movlt	r0, r3
 8007802:	e734      	b.n	800766e <_printf_float+0xba>
 8007804:	2301      	movs	r3, #1
 8007806:	4652      	mov	r2, sl
 8007808:	4631      	mov	r1, r6
 800780a:	4628      	mov	r0, r5
 800780c:	47b8      	blx	r7
 800780e:	3001      	adds	r0, #1
 8007810:	f43f af2b 	beq.w	800766a <_printf_float+0xb6>
 8007814:	f109 0901 	add.w	r9, r9, #1
 8007818:	e7e8      	b.n	80077ec <_printf_float+0x238>
 800781a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800781c:	2b00      	cmp	r3, #0
 800781e:	dc39      	bgt.n	8007894 <_printf_float+0x2e0>
 8007820:	4a1b      	ldr	r2, [pc, #108]	@ (8007890 <_printf_float+0x2dc>)
 8007822:	2301      	movs	r3, #1
 8007824:	4631      	mov	r1, r6
 8007826:	4628      	mov	r0, r5
 8007828:	47b8      	blx	r7
 800782a:	3001      	adds	r0, #1
 800782c:	f43f af1d 	beq.w	800766a <_printf_float+0xb6>
 8007830:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007834:	ea59 0303 	orrs.w	r3, r9, r3
 8007838:	d102      	bne.n	8007840 <_printf_float+0x28c>
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	07d9      	lsls	r1, r3, #31
 800783e:	d5d7      	bpl.n	80077f0 <_printf_float+0x23c>
 8007840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007844:	4631      	mov	r1, r6
 8007846:	4628      	mov	r0, r5
 8007848:	47b8      	blx	r7
 800784a:	3001      	adds	r0, #1
 800784c:	f43f af0d 	beq.w	800766a <_printf_float+0xb6>
 8007850:	f04f 0a00 	mov.w	sl, #0
 8007854:	f104 0b1a 	add.w	fp, r4, #26
 8007858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800785a:	425b      	negs	r3, r3
 800785c:	4553      	cmp	r3, sl
 800785e:	dc01      	bgt.n	8007864 <_printf_float+0x2b0>
 8007860:	464b      	mov	r3, r9
 8007862:	e793      	b.n	800778c <_printf_float+0x1d8>
 8007864:	2301      	movs	r3, #1
 8007866:	465a      	mov	r2, fp
 8007868:	4631      	mov	r1, r6
 800786a:	4628      	mov	r0, r5
 800786c:	47b8      	blx	r7
 800786e:	3001      	adds	r0, #1
 8007870:	f43f aefb 	beq.w	800766a <_printf_float+0xb6>
 8007874:	f10a 0a01 	add.w	sl, sl, #1
 8007878:	e7ee      	b.n	8007858 <_printf_float+0x2a4>
 800787a:	bf00      	nop
 800787c:	7fefffff 	.word	0x7fefffff
 8007880:	0800bc10 	.word	0x0800bc10
 8007884:	0800bc14 	.word	0x0800bc14
 8007888:	0800bc18 	.word	0x0800bc18
 800788c:	0800bc1c 	.word	0x0800bc1c
 8007890:	0800bc20 	.word	0x0800bc20
 8007894:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007896:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800789a:	4553      	cmp	r3, sl
 800789c:	bfa8      	it	ge
 800789e:	4653      	movge	r3, sl
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	4699      	mov	r9, r3
 80078a4:	dc36      	bgt.n	8007914 <_printf_float+0x360>
 80078a6:	f04f 0b00 	mov.w	fp, #0
 80078aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078ae:	f104 021a 	add.w	r2, r4, #26
 80078b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078b4:	9306      	str	r3, [sp, #24]
 80078b6:	eba3 0309 	sub.w	r3, r3, r9
 80078ba:	455b      	cmp	r3, fp
 80078bc:	dc31      	bgt.n	8007922 <_printf_float+0x36e>
 80078be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078c0:	459a      	cmp	sl, r3
 80078c2:	dc3a      	bgt.n	800793a <_printf_float+0x386>
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	07da      	lsls	r2, r3, #31
 80078c8:	d437      	bmi.n	800793a <_printf_float+0x386>
 80078ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078cc:	ebaa 0903 	sub.w	r9, sl, r3
 80078d0:	9b06      	ldr	r3, [sp, #24]
 80078d2:	ebaa 0303 	sub.w	r3, sl, r3
 80078d6:	4599      	cmp	r9, r3
 80078d8:	bfa8      	it	ge
 80078da:	4699      	movge	r9, r3
 80078dc:	f1b9 0f00 	cmp.w	r9, #0
 80078e0:	dc33      	bgt.n	800794a <_printf_float+0x396>
 80078e2:	f04f 0800 	mov.w	r8, #0
 80078e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078ea:	f104 0b1a 	add.w	fp, r4, #26
 80078ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078f0:	ebaa 0303 	sub.w	r3, sl, r3
 80078f4:	eba3 0309 	sub.w	r3, r3, r9
 80078f8:	4543      	cmp	r3, r8
 80078fa:	f77f af79 	ble.w	80077f0 <_printf_float+0x23c>
 80078fe:	2301      	movs	r3, #1
 8007900:	465a      	mov	r2, fp
 8007902:	4631      	mov	r1, r6
 8007904:	4628      	mov	r0, r5
 8007906:	47b8      	blx	r7
 8007908:	3001      	adds	r0, #1
 800790a:	f43f aeae 	beq.w	800766a <_printf_float+0xb6>
 800790e:	f108 0801 	add.w	r8, r8, #1
 8007912:	e7ec      	b.n	80078ee <_printf_float+0x33a>
 8007914:	4642      	mov	r2, r8
 8007916:	4631      	mov	r1, r6
 8007918:	4628      	mov	r0, r5
 800791a:	47b8      	blx	r7
 800791c:	3001      	adds	r0, #1
 800791e:	d1c2      	bne.n	80078a6 <_printf_float+0x2f2>
 8007920:	e6a3      	b.n	800766a <_printf_float+0xb6>
 8007922:	2301      	movs	r3, #1
 8007924:	4631      	mov	r1, r6
 8007926:	4628      	mov	r0, r5
 8007928:	9206      	str	r2, [sp, #24]
 800792a:	47b8      	blx	r7
 800792c:	3001      	adds	r0, #1
 800792e:	f43f ae9c 	beq.w	800766a <_printf_float+0xb6>
 8007932:	9a06      	ldr	r2, [sp, #24]
 8007934:	f10b 0b01 	add.w	fp, fp, #1
 8007938:	e7bb      	b.n	80078b2 <_printf_float+0x2fe>
 800793a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800793e:	4631      	mov	r1, r6
 8007940:	4628      	mov	r0, r5
 8007942:	47b8      	blx	r7
 8007944:	3001      	adds	r0, #1
 8007946:	d1c0      	bne.n	80078ca <_printf_float+0x316>
 8007948:	e68f      	b.n	800766a <_printf_float+0xb6>
 800794a:	9a06      	ldr	r2, [sp, #24]
 800794c:	464b      	mov	r3, r9
 800794e:	4442      	add	r2, r8
 8007950:	4631      	mov	r1, r6
 8007952:	4628      	mov	r0, r5
 8007954:	47b8      	blx	r7
 8007956:	3001      	adds	r0, #1
 8007958:	d1c3      	bne.n	80078e2 <_printf_float+0x32e>
 800795a:	e686      	b.n	800766a <_printf_float+0xb6>
 800795c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007960:	f1ba 0f01 	cmp.w	sl, #1
 8007964:	dc01      	bgt.n	800796a <_printf_float+0x3b6>
 8007966:	07db      	lsls	r3, r3, #31
 8007968:	d536      	bpl.n	80079d8 <_printf_float+0x424>
 800796a:	2301      	movs	r3, #1
 800796c:	4642      	mov	r2, r8
 800796e:	4631      	mov	r1, r6
 8007970:	4628      	mov	r0, r5
 8007972:	47b8      	blx	r7
 8007974:	3001      	adds	r0, #1
 8007976:	f43f ae78 	beq.w	800766a <_printf_float+0xb6>
 800797a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800797e:	4631      	mov	r1, r6
 8007980:	4628      	mov	r0, r5
 8007982:	47b8      	blx	r7
 8007984:	3001      	adds	r0, #1
 8007986:	f43f ae70 	beq.w	800766a <_printf_float+0xb6>
 800798a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800798e:	2200      	movs	r2, #0
 8007990:	2300      	movs	r3, #0
 8007992:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007996:	f7f9 f8bf 	bl	8000b18 <__aeabi_dcmpeq>
 800799a:	b9c0      	cbnz	r0, 80079ce <_printf_float+0x41a>
 800799c:	4653      	mov	r3, sl
 800799e:	f108 0201 	add.w	r2, r8, #1
 80079a2:	4631      	mov	r1, r6
 80079a4:	4628      	mov	r0, r5
 80079a6:	47b8      	blx	r7
 80079a8:	3001      	adds	r0, #1
 80079aa:	d10c      	bne.n	80079c6 <_printf_float+0x412>
 80079ac:	e65d      	b.n	800766a <_printf_float+0xb6>
 80079ae:	2301      	movs	r3, #1
 80079b0:	465a      	mov	r2, fp
 80079b2:	4631      	mov	r1, r6
 80079b4:	4628      	mov	r0, r5
 80079b6:	47b8      	blx	r7
 80079b8:	3001      	adds	r0, #1
 80079ba:	f43f ae56 	beq.w	800766a <_printf_float+0xb6>
 80079be:	f108 0801 	add.w	r8, r8, #1
 80079c2:	45d0      	cmp	r8, sl
 80079c4:	dbf3      	blt.n	80079ae <_printf_float+0x3fa>
 80079c6:	464b      	mov	r3, r9
 80079c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80079cc:	e6df      	b.n	800778e <_printf_float+0x1da>
 80079ce:	f04f 0800 	mov.w	r8, #0
 80079d2:	f104 0b1a 	add.w	fp, r4, #26
 80079d6:	e7f4      	b.n	80079c2 <_printf_float+0x40e>
 80079d8:	2301      	movs	r3, #1
 80079da:	4642      	mov	r2, r8
 80079dc:	e7e1      	b.n	80079a2 <_printf_float+0x3ee>
 80079de:	2301      	movs	r3, #1
 80079e0:	464a      	mov	r2, r9
 80079e2:	4631      	mov	r1, r6
 80079e4:	4628      	mov	r0, r5
 80079e6:	47b8      	blx	r7
 80079e8:	3001      	adds	r0, #1
 80079ea:	f43f ae3e 	beq.w	800766a <_printf_float+0xb6>
 80079ee:	f108 0801 	add.w	r8, r8, #1
 80079f2:	68e3      	ldr	r3, [r4, #12]
 80079f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80079f6:	1a5b      	subs	r3, r3, r1
 80079f8:	4543      	cmp	r3, r8
 80079fa:	dcf0      	bgt.n	80079de <_printf_float+0x42a>
 80079fc:	e6fc      	b.n	80077f8 <_printf_float+0x244>
 80079fe:	f04f 0800 	mov.w	r8, #0
 8007a02:	f104 0919 	add.w	r9, r4, #25
 8007a06:	e7f4      	b.n	80079f2 <_printf_float+0x43e>

08007a08 <_printf_common>:
 8007a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a0c:	4616      	mov	r6, r2
 8007a0e:	4698      	mov	r8, r3
 8007a10:	688a      	ldr	r2, [r1, #8]
 8007a12:	690b      	ldr	r3, [r1, #16]
 8007a14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	bfb8      	it	lt
 8007a1c:	4613      	movlt	r3, r2
 8007a1e:	6033      	str	r3, [r6, #0]
 8007a20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a24:	4607      	mov	r7, r0
 8007a26:	460c      	mov	r4, r1
 8007a28:	b10a      	cbz	r2, 8007a2e <_printf_common+0x26>
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	6033      	str	r3, [r6, #0]
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	0699      	lsls	r1, r3, #26
 8007a32:	bf42      	ittt	mi
 8007a34:	6833      	ldrmi	r3, [r6, #0]
 8007a36:	3302      	addmi	r3, #2
 8007a38:	6033      	strmi	r3, [r6, #0]
 8007a3a:	6825      	ldr	r5, [r4, #0]
 8007a3c:	f015 0506 	ands.w	r5, r5, #6
 8007a40:	d106      	bne.n	8007a50 <_printf_common+0x48>
 8007a42:	f104 0a19 	add.w	sl, r4, #25
 8007a46:	68e3      	ldr	r3, [r4, #12]
 8007a48:	6832      	ldr	r2, [r6, #0]
 8007a4a:	1a9b      	subs	r3, r3, r2
 8007a4c:	42ab      	cmp	r3, r5
 8007a4e:	dc26      	bgt.n	8007a9e <_printf_common+0x96>
 8007a50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a54:	6822      	ldr	r2, [r4, #0]
 8007a56:	3b00      	subs	r3, #0
 8007a58:	bf18      	it	ne
 8007a5a:	2301      	movne	r3, #1
 8007a5c:	0692      	lsls	r2, r2, #26
 8007a5e:	d42b      	bmi.n	8007ab8 <_printf_common+0xb0>
 8007a60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a64:	4641      	mov	r1, r8
 8007a66:	4638      	mov	r0, r7
 8007a68:	47c8      	blx	r9
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	d01e      	beq.n	8007aac <_printf_common+0xa4>
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	6922      	ldr	r2, [r4, #16]
 8007a72:	f003 0306 	and.w	r3, r3, #6
 8007a76:	2b04      	cmp	r3, #4
 8007a78:	bf02      	ittt	eq
 8007a7a:	68e5      	ldreq	r5, [r4, #12]
 8007a7c:	6833      	ldreq	r3, [r6, #0]
 8007a7e:	1aed      	subeq	r5, r5, r3
 8007a80:	68a3      	ldr	r3, [r4, #8]
 8007a82:	bf0c      	ite	eq
 8007a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a88:	2500      	movne	r5, #0
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	bfc4      	itt	gt
 8007a8e:	1a9b      	subgt	r3, r3, r2
 8007a90:	18ed      	addgt	r5, r5, r3
 8007a92:	2600      	movs	r6, #0
 8007a94:	341a      	adds	r4, #26
 8007a96:	42b5      	cmp	r5, r6
 8007a98:	d11a      	bne.n	8007ad0 <_printf_common+0xc8>
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	e008      	b.n	8007ab0 <_printf_common+0xa8>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	4652      	mov	r2, sl
 8007aa2:	4641      	mov	r1, r8
 8007aa4:	4638      	mov	r0, r7
 8007aa6:	47c8      	blx	r9
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	d103      	bne.n	8007ab4 <_printf_common+0xac>
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab4:	3501      	adds	r5, #1
 8007ab6:	e7c6      	b.n	8007a46 <_printf_common+0x3e>
 8007ab8:	18e1      	adds	r1, r4, r3
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	2030      	movs	r0, #48	@ 0x30
 8007abe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ac2:	4422      	add	r2, r4
 8007ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ac8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007acc:	3302      	adds	r3, #2
 8007ace:	e7c7      	b.n	8007a60 <_printf_common+0x58>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	4641      	mov	r1, r8
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	47c8      	blx	r9
 8007ada:	3001      	adds	r0, #1
 8007adc:	d0e6      	beq.n	8007aac <_printf_common+0xa4>
 8007ade:	3601      	adds	r6, #1
 8007ae0:	e7d9      	b.n	8007a96 <_printf_common+0x8e>
	...

08007ae4 <_printf_i>:
 8007ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae8:	7e0f      	ldrb	r7, [r1, #24]
 8007aea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007aec:	2f78      	cmp	r7, #120	@ 0x78
 8007aee:	4691      	mov	r9, r2
 8007af0:	4680      	mov	r8, r0
 8007af2:	460c      	mov	r4, r1
 8007af4:	469a      	mov	sl, r3
 8007af6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007afa:	d807      	bhi.n	8007b0c <_printf_i+0x28>
 8007afc:	2f62      	cmp	r7, #98	@ 0x62
 8007afe:	d80a      	bhi.n	8007b16 <_printf_i+0x32>
 8007b00:	2f00      	cmp	r7, #0
 8007b02:	f000 80d2 	beq.w	8007caa <_printf_i+0x1c6>
 8007b06:	2f58      	cmp	r7, #88	@ 0x58
 8007b08:	f000 80b9 	beq.w	8007c7e <_printf_i+0x19a>
 8007b0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b14:	e03a      	b.n	8007b8c <_printf_i+0xa8>
 8007b16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b1a:	2b15      	cmp	r3, #21
 8007b1c:	d8f6      	bhi.n	8007b0c <_printf_i+0x28>
 8007b1e:	a101      	add	r1, pc, #4	@ (adr r1, 8007b24 <_printf_i+0x40>)
 8007b20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b24:	08007b7d 	.word	0x08007b7d
 8007b28:	08007b91 	.word	0x08007b91
 8007b2c:	08007b0d 	.word	0x08007b0d
 8007b30:	08007b0d 	.word	0x08007b0d
 8007b34:	08007b0d 	.word	0x08007b0d
 8007b38:	08007b0d 	.word	0x08007b0d
 8007b3c:	08007b91 	.word	0x08007b91
 8007b40:	08007b0d 	.word	0x08007b0d
 8007b44:	08007b0d 	.word	0x08007b0d
 8007b48:	08007b0d 	.word	0x08007b0d
 8007b4c:	08007b0d 	.word	0x08007b0d
 8007b50:	08007c91 	.word	0x08007c91
 8007b54:	08007bbb 	.word	0x08007bbb
 8007b58:	08007c4b 	.word	0x08007c4b
 8007b5c:	08007b0d 	.word	0x08007b0d
 8007b60:	08007b0d 	.word	0x08007b0d
 8007b64:	08007cb3 	.word	0x08007cb3
 8007b68:	08007b0d 	.word	0x08007b0d
 8007b6c:	08007bbb 	.word	0x08007bbb
 8007b70:	08007b0d 	.word	0x08007b0d
 8007b74:	08007b0d 	.word	0x08007b0d
 8007b78:	08007c53 	.word	0x08007c53
 8007b7c:	6833      	ldr	r3, [r6, #0]
 8007b7e:	1d1a      	adds	r2, r3, #4
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6032      	str	r2, [r6, #0]
 8007b84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e09d      	b.n	8007ccc <_printf_i+0x1e8>
 8007b90:	6833      	ldr	r3, [r6, #0]
 8007b92:	6820      	ldr	r0, [r4, #0]
 8007b94:	1d19      	adds	r1, r3, #4
 8007b96:	6031      	str	r1, [r6, #0]
 8007b98:	0606      	lsls	r6, r0, #24
 8007b9a:	d501      	bpl.n	8007ba0 <_printf_i+0xbc>
 8007b9c:	681d      	ldr	r5, [r3, #0]
 8007b9e:	e003      	b.n	8007ba8 <_printf_i+0xc4>
 8007ba0:	0645      	lsls	r5, r0, #25
 8007ba2:	d5fb      	bpl.n	8007b9c <_printf_i+0xb8>
 8007ba4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ba8:	2d00      	cmp	r5, #0
 8007baa:	da03      	bge.n	8007bb4 <_printf_i+0xd0>
 8007bac:	232d      	movs	r3, #45	@ 0x2d
 8007bae:	426d      	negs	r5, r5
 8007bb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bb4:	4859      	ldr	r0, [pc, #356]	@ (8007d1c <_printf_i+0x238>)
 8007bb6:	230a      	movs	r3, #10
 8007bb8:	e011      	b.n	8007bde <_printf_i+0xfa>
 8007bba:	6821      	ldr	r1, [r4, #0]
 8007bbc:	6833      	ldr	r3, [r6, #0]
 8007bbe:	0608      	lsls	r0, r1, #24
 8007bc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8007bc4:	d402      	bmi.n	8007bcc <_printf_i+0xe8>
 8007bc6:	0649      	lsls	r1, r1, #25
 8007bc8:	bf48      	it	mi
 8007bca:	b2ad      	uxthmi	r5, r5
 8007bcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8007bce:	4853      	ldr	r0, [pc, #332]	@ (8007d1c <_printf_i+0x238>)
 8007bd0:	6033      	str	r3, [r6, #0]
 8007bd2:	bf14      	ite	ne
 8007bd4:	230a      	movne	r3, #10
 8007bd6:	2308      	moveq	r3, #8
 8007bd8:	2100      	movs	r1, #0
 8007bda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007bde:	6866      	ldr	r6, [r4, #4]
 8007be0:	60a6      	str	r6, [r4, #8]
 8007be2:	2e00      	cmp	r6, #0
 8007be4:	bfa2      	ittt	ge
 8007be6:	6821      	ldrge	r1, [r4, #0]
 8007be8:	f021 0104 	bicge.w	r1, r1, #4
 8007bec:	6021      	strge	r1, [r4, #0]
 8007bee:	b90d      	cbnz	r5, 8007bf4 <_printf_i+0x110>
 8007bf0:	2e00      	cmp	r6, #0
 8007bf2:	d04b      	beq.n	8007c8c <_printf_i+0x1a8>
 8007bf4:	4616      	mov	r6, r2
 8007bf6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007bfa:	fb03 5711 	mls	r7, r3, r1, r5
 8007bfe:	5dc7      	ldrb	r7, [r0, r7]
 8007c00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c04:	462f      	mov	r7, r5
 8007c06:	42bb      	cmp	r3, r7
 8007c08:	460d      	mov	r5, r1
 8007c0a:	d9f4      	bls.n	8007bf6 <_printf_i+0x112>
 8007c0c:	2b08      	cmp	r3, #8
 8007c0e:	d10b      	bne.n	8007c28 <_printf_i+0x144>
 8007c10:	6823      	ldr	r3, [r4, #0]
 8007c12:	07df      	lsls	r7, r3, #31
 8007c14:	d508      	bpl.n	8007c28 <_printf_i+0x144>
 8007c16:	6923      	ldr	r3, [r4, #16]
 8007c18:	6861      	ldr	r1, [r4, #4]
 8007c1a:	4299      	cmp	r1, r3
 8007c1c:	bfde      	ittt	le
 8007c1e:	2330      	movle	r3, #48	@ 0x30
 8007c20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c28:	1b92      	subs	r2, r2, r6
 8007c2a:	6122      	str	r2, [r4, #16]
 8007c2c:	f8cd a000 	str.w	sl, [sp]
 8007c30:	464b      	mov	r3, r9
 8007c32:	aa03      	add	r2, sp, #12
 8007c34:	4621      	mov	r1, r4
 8007c36:	4640      	mov	r0, r8
 8007c38:	f7ff fee6 	bl	8007a08 <_printf_common>
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	d14a      	bne.n	8007cd6 <_printf_i+0x1f2>
 8007c40:	f04f 30ff 	mov.w	r0, #4294967295
 8007c44:	b004      	add	sp, #16
 8007c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	f043 0320 	orr.w	r3, r3, #32
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	4833      	ldr	r0, [pc, #204]	@ (8007d20 <_printf_i+0x23c>)
 8007c54:	2778      	movs	r7, #120	@ 0x78
 8007c56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	6831      	ldr	r1, [r6, #0]
 8007c5e:	061f      	lsls	r7, r3, #24
 8007c60:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c64:	d402      	bmi.n	8007c6c <_printf_i+0x188>
 8007c66:	065f      	lsls	r7, r3, #25
 8007c68:	bf48      	it	mi
 8007c6a:	b2ad      	uxthmi	r5, r5
 8007c6c:	6031      	str	r1, [r6, #0]
 8007c6e:	07d9      	lsls	r1, r3, #31
 8007c70:	bf44      	itt	mi
 8007c72:	f043 0320 	orrmi.w	r3, r3, #32
 8007c76:	6023      	strmi	r3, [r4, #0]
 8007c78:	b11d      	cbz	r5, 8007c82 <_printf_i+0x19e>
 8007c7a:	2310      	movs	r3, #16
 8007c7c:	e7ac      	b.n	8007bd8 <_printf_i+0xf4>
 8007c7e:	4827      	ldr	r0, [pc, #156]	@ (8007d1c <_printf_i+0x238>)
 8007c80:	e7e9      	b.n	8007c56 <_printf_i+0x172>
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	f023 0320 	bic.w	r3, r3, #32
 8007c88:	6023      	str	r3, [r4, #0]
 8007c8a:	e7f6      	b.n	8007c7a <_printf_i+0x196>
 8007c8c:	4616      	mov	r6, r2
 8007c8e:	e7bd      	b.n	8007c0c <_printf_i+0x128>
 8007c90:	6833      	ldr	r3, [r6, #0]
 8007c92:	6825      	ldr	r5, [r4, #0]
 8007c94:	6961      	ldr	r1, [r4, #20]
 8007c96:	1d18      	adds	r0, r3, #4
 8007c98:	6030      	str	r0, [r6, #0]
 8007c9a:	062e      	lsls	r6, r5, #24
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	d501      	bpl.n	8007ca4 <_printf_i+0x1c0>
 8007ca0:	6019      	str	r1, [r3, #0]
 8007ca2:	e002      	b.n	8007caa <_printf_i+0x1c6>
 8007ca4:	0668      	lsls	r0, r5, #25
 8007ca6:	d5fb      	bpl.n	8007ca0 <_printf_i+0x1bc>
 8007ca8:	8019      	strh	r1, [r3, #0]
 8007caa:	2300      	movs	r3, #0
 8007cac:	6123      	str	r3, [r4, #16]
 8007cae:	4616      	mov	r6, r2
 8007cb0:	e7bc      	b.n	8007c2c <_printf_i+0x148>
 8007cb2:	6833      	ldr	r3, [r6, #0]
 8007cb4:	1d1a      	adds	r2, r3, #4
 8007cb6:	6032      	str	r2, [r6, #0]
 8007cb8:	681e      	ldr	r6, [r3, #0]
 8007cba:	6862      	ldr	r2, [r4, #4]
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f7f8 faae 	bl	8000220 <memchr>
 8007cc4:	b108      	cbz	r0, 8007cca <_printf_i+0x1e6>
 8007cc6:	1b80      	subs	r0, r0, r6
 8007cc8:	6060      	str	r0, [r4, #4]
 8007cca:	6863      	ldr	r3, [r4, #4]
 8007ccc:	6123      	str	r3, [r4, #16]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cd4:	e7aa      	b.n	8007c2c <_printf_i+0x148>
 8007cd6:	6923      	ldr	r3, [r4, #16]
 8007cd8:	4632      	mov	r2, r6
 8007cda:	4649      	mov	r1, r9
 8007cdc:	4640      	mov	r0, r8
 8007cde:	47d0      	blx	sl
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d0ad      	beq.n	8007c40 <_printf_i+0x15c>
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	079b      	lsls	r3, r3, #30
 8007ce8:	d413      	bmi.n	8007d12 <_printf_i+0x22e>
 8007cea:	68e0      	ldr	r0, [r4, #12]
 8007cec:	9b03      	ldr	r3, [sp, #12]
 8007cee:	4298      	cmp	r0, r3
 8007cf0:	bfb8      	it	lt
 8007cf2:	4618      	movlt	r0, r3
 8007cf4:	e7a6      	b.n	8007c44 <_printf_i+0x160>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	4632      	mov	r2, r6
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	4640      	mov	r0, r8
 8007cfe:	47d0      	blx	sl
 8007d00:	3001      	adds	r0, #1
 8007d02:	d09d      	beq.n	8007c40 <_printf_i+0x15c>
 8007d04:	3501      	adds	r5, #1
 8007d06:	68e3      	ldr	r3, [r4, #12]
 8007d08:	9903      	ldr	r1, [sp, #12]
 8007d0a:	1a5b      	subs	r3, r3, r1
 8007d0c:	42ab      	cmp	r3, r5
 8007d0e:	dcf2      	bgt.n	8007cf6 <_printf_i+0x212>
 8007d10:	e7eb      	b.n	8007cea <_printf_i+0x206>
 8007d12:	2500      	movs	r5, #0
 8007d14:	f104 0619 	add.w	r6, r4, #25
 8007d18:	e7f5      	b.n	8007d06 <_printf_i+0x222>
 8007d1a:	bf00      	nop
 8007d1c:	0800bc22 	.word	0x0800bc22
 8007d20:	0800bc33 	.word	0x0800bc33

08007d24 <_scanf_float>:
 8007d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d28:	b087      	sub	sp, #28
 8007d2a:	4617      	mov	r7, r2
 8007d2c:	9303      	str	r3, [sp, #12]
 8007d2e:	688b      	ldr	r3, [r1, #8]
 8007d30:	1e5a      	subs	r2, r3, #1
 8007d32:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007d36:	bf81      	itttt	hi
 8007d38:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007d3c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007d40:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007d44:	608b      	strhi	r3, [r1, #8]
 8007d46:	680b      	ldr	r3, [r1, #0]
 8007d48:	460a      	mov	r2, r1
 8007d4a:	f04f 0500 	mov.w	r5, #0
 8007d4e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007d52:	f842 3b1c 	str.w	r3, [r2], #28
 8007d56:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007d5a:	4680      	mov	r8, r0
 8007d5c:	460c      	mov	r4, r1
 8007d5e:	bf98      	it	ls
 8007d60:	f04f 0b00 	movls.w	fp, #0
 8007d64:	9201      	str	r2, [sp, #4]
 8007d66:	4616      	mov	r6, r2
 8007d68:	46aa      	mov	sl, r5
 8007d6a:	46a9      	mov	r9, r5
 8007d6c:	9502      	str	r5, [sp, #8]
 8007d6e:	68a2      	ldr	r2, [r4, #8]
 8007d70:	b152      	cbz	r2, 8007d88 <_scanf_float+0x64>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2b4e      	cmp	r3, #78	@ 0x4e
 8007d78:	d864      	bhi.n	8007e44 <_scanf_float+0x120>
 8007d7a:	2b40      	cmp	r3, #64	@ 0x40
 8007d7c:	d83c      	bhi.n	8007df8 <_scanf_float+0xd4>
 8007d7e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007d82:	b2c8      	uxtb	r0, r1
 8007d84:	280e      	cmp	r0, #14
 8007d86:	d93a      	bls.n	8007dfe <_scanf_float+0xda>
 8007d88:	f1b9 0f00 	cmp.w	r9, #0
 8007d8c:	d003      	beq.n	8007d96 <_scanf_float+0x72>
 8007d8e:	6823      	ldr	r3, [r4, #0]
 8007d90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d9a:	f1ba 0f01 	cmp.w	sl, #1
 8007d9e:	f200 8117 	bhi.w	8007fd0 <_scanf_float+0x2ac>
 8007da2:	9b01      	ldr	r3, [sp, #4]
 8007da4:	429e      	cmp	r6, r3
 8007da6:	f200 8108 	bhi.w	8007fba <_scanf_float+0x296>
 8007daa:	2001      	movs	r0, #1
 8007dac:	b007      	add	sp, #28
 8007dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007db6:	2a0d      	cmp	r2, #13
 8007db8:	d8e6      	bhi.n	8007d88 <_scanf_float+0x64>
 8007dba:	a101      	add	r1, pc, #4	@ (adr r1, 8007dc0 <_scanf_float+0x9c>)
 8007dbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007dc0:	08007f07 	.word	0x08007f07
 8007dc4:	08007d89 	.word	0x08007d89
 8007dc8:	08007d89 	.word	0x08007d89
 8007dcc:	08007d89 	.word	0x08007d89
 8007dd0:	08007f67 	.word	0x08007f67
 8007dd4:	08007f3f 	.word	0x08007f3f
 8007dd8:	08007d89 	.word	0x08007d89
 8007ddc:	08007d89 	.word	0x08007d89
 8007de0:	08007f15 	.word	0x08007f15
 8007de4:	08007d89 	.word	0x08007d89
 8007de8:	08007d89 	.word	0x08007d89
 8007dec:	08007d89 	.word	0x08007d89
 8007df0:	08007d89 	.word	0x08007d89
 8007df4:	08007ecd 	.word	0x08007ecd
 8007df8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007dfc:	e7db      	b.n	8007db6 <_scanf_float+0x92>
 8007dfe:	290e      	cmp	r1, #14
 8007e00:	d8c2      	bhi.n	8007d88 <_scanf_float+0x64>
 8007e02:	a001      	add	r0, pc, #4	@ (adr r0, 8007e08 <_scanf_float+0xe4>)
 8007e04:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007e08:	08007ebd 	.word	0x08007ebd
 8007e0c:	08007d89 	.word	0x08007d89
 8007e10:	08007ebd 	.word	0x08007ebd
 8007e14:	08007f53 	.word	0x08007f53
 8007e18:	08007d89 	.word	0x08007d89
 8007e1c:	08007e65 	.word	0x08007e65
 8007e20:	08007ea3 	.word	0x08007ea3
 8007e24:	08007ea3 	.word	0x08007ea3
 8007e28:	08007ea3 	.word	0x08007ea3
 8007e2c:	08007ea3 	.word	0x08007ea3
 8007e30:	08007ea3 	.word	0x08007ea3
 8007e34:	08007ea3 	.word	0x08007ea3
 8007e38:	08007ea3 	.word	0x08007ea3
 8007e3c:	08007ea3 	.word	0x08007ea3
 8007e40:	08007ea3 	.word	0x08007ea3
 8007e44:	2b6e      	cmp	r3, #110	@ 0x6e
 8007e46:	d809      	bhi.n	8007e5c <_scanf_float+0x138>
 8007e48:	2b60      	cmp	r3, #96	@ 0x60
 8007e4a:	d8b2      	bhi.n	8007db2 <_scanf_float+0x8e>
 8007e4c:	2b54      	cmp	r3, #84	@ 0x54
 8007e4e:	d07b      	beq.n	8007f48 <_scanf_float+0x224>
 8007e50:	2b59      	cmp	r3, #89	@ 0x59
 8007e52:	d199      	bne.n	8007d88 <_scanf_float+0x64>
 8007e54:	2d07      	cmp	r5, #7
 8007e56:	d197      	bne.n	8007d88 <_scanf_float+0x64>
 8007e58:	2508      	movs	r5, #8
 8007e5a:	e02c      	b.n	8007eb6 <_scanf_float+0x192>
 8007e5c:	2b74      	cmp	r3, #116	@ 0x74
 8007e5e:	d073      	beq.n	8007f48 <_scanf_float+0x224>
 8007e60:	2b79      	cmp	r3, #121	@ 0x79
 8007e62:	e7f6      	b.n	8007e52 <_scanf_float+0x12e>
 8007e64:	6821      	ldr	r1, [r4, #0]
 8007e66:	05c8      	lsls	r0, r1, #23
 8007e68:	d51b      	bpl.n	8007ea2 <_scanf_float+0x17e>
 8007e6a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007e6e:	6021      	str	r1, [r4, #0]
 8007e70:	f109 0901 	add.w	r9, r9, #1
 8007e74:	f1bb 0f00 	cmp.w	fp, #0
 8007e78:	d003      	beq.n	8007e82 <_scanf_float+0x15e>
 8007e7a:	3201      	adds	r2, #1
 8007e7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e80:	60a2      	str	r2, [r4, #8]
 8007e82:	68a3      	ldr	r3, [r4, #8]
 8007e84:	3b01      	subs	r3, #1
 8007e86:	60a3      	str	r3, [r4, #8]
 8007e88:	6923      	ldr	r3, [r4, #16]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	6123      	str	r3, [r4, #16]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	607b      	str	r3, [r7, #4]
 8007e96:	f340 8087 	ble.w	8007fa8 <_scanf_float+0x284>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	603b      	str	r3, [r7, #0]
 8007ea0:	e765      	b.n	8007d6e <_scanf_float+0x4a>
 8007ea2:	eb1a 0105 	adds.w	r1, sl, r5
 8007ea6:	f47f af6f 	bne.w	8007d88 <_scanf_float+0x64>
 8007eaa:	6822      	ldr	r2, [r4, #0]
 8007eac:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007eb0:	6022      	str	r2, [r4, #0]
 8007eb2:	460d      	mov	r5, r1
 8007eb4:	468a      	mov	sl, r1
 8007eb6:	f806 3b01 	strb.w	r3, [r6], #1
 8007eba:	e7e2      	b.n	8007e82 <_scanf_float+0x15e>
 8007ebc:	6822      	ldr	r2, [r4, #0]
 8007ebe:	0610      	lsls	r0, r2, #24
 8007ec0:	f57f af62 	bpl.w	8007d88 <_scanf_float+0x64>
 8007ec4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ec8:	6022      	str	r2, [r4, #0]
 8007eca:	e7f4      	b.n	8007eb6 <_scanf_float+0x192>
 8007ecc:	f1ba 0f00 	cmp.w	sl, #0
 8007ed0:	d10e      	bne.n	8007ef0 <_scanf_float+0x1cc>
 8007ed2:	f1b9 0f00 	cmp.w	r9, #0
 8007ed6:	d10e      	bne.n	8007ef6 <_scanf_float+0x1d2>
 8007ed8:	6822      	ldr	r2, [r4, #0]
 8007eda:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007ede:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007ee2:	d108      	bne.n	8007ef6 <_scanf_float+0x1d2>
 8007ee4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007ee8:	6022      	str	r2, [r4, #0]
 8007eea:	f04f 0a01 	mov.w	sl, #1
 8007eee:	e7e2      	b.n	8007eb6 <_scanf_float+0x192>
 8007ef0:	f1ba 0f02 	cmp.w	sl, #2
 8007ef4:	d055      	beq.n	8007fa2 <_scanf_float+0x27e>
 8007ef6:	2d01      	cmp	r5, #1
 8007ef8:	d002      	beq.n	8007f00 <_scanf_float+0x1dc>
 8007efa:	2d04      	cmp	r5, #4
 8007efc:	f47f af44 	bne.w	8007d88 <_scanf_float+0x64>
 8007f00:	3501      	adds	r5, #1
 8007f02:	b2ed      	uxtb	r5, r5
 8007f04:	e7d7      	b.n	8007eb6 <_scanf_float+0x192>
 8007f06:	f1ba 0f01 	cmp.w	sl, #1
 8007f0a:	f47f af3d 	bne.w	8007d88 <_scanf_float+0x64>
 8007f0e:	f04f 0a02 	mov.w	sl, #2
 8007f12:	e7d0      	b.n	8007eb6 <_scanf_float+0x192>
 8007f14:	b97d      	cbnz	r5, 8007f36 <_scanf_float+0x212>
 8007f16:	f1b9 0f00 	cmp.w	r9, #0
 8007f1a:	f47f af38 	bne.w	8007d8e <_scanf_float+0x6a>
 8007f1e:	6822      	ldr	r2, [r4, #0]
 8007f20:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007f24:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007f28:	f040 8108 	bne.w	800813c <_scanf_float+0x418>
 8007f2c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007f30:	6022      	str	r2, [r4, #0]
 8007f32:	2501      	movs	r5, #1
 8007f34:	e7bf      	b.n	8007eb6 <_scanf_float+0x192>
 8007f36:	2d03      	cmp	r5, #3
 8007f38:	d0e2      	beq.n	8007f00 <_scanf_float+0x1dc>
 8007f3a:	2d05      	cmp	r5, #5
 8007f3c:	e7de      	b.n	8007efc <_scanf_float+0x1d8>
 8007f3e:	2d02      	cmp	r5, #2
 8007f40:	f47f af22 	bne.w	8007d88 <_scanf_float+0x64>
 8007f44:	2503      	movs	r5, #3
 8007f46:	e7b6      	b.n	8007eb6 <_scanf_float+0x192>
 8007f48:	2d06      	cmp	r5, #6
 8007f4a:	f47f af1d 	bne.w	8007d88 <_scanf_float+0x64>
 8007f4e:	2507      	movs	r5, #7
 8007f50:	e7b1      	b.n	8007eb6 <_scanf_float+0x192>
 8007f52:	6822      	ldr	r2, [r4, #0]
 8007f54:	0591      	lsls	r1, r2, #22
 8007f56:	f57f af17 	bpl.w	8007d88 <_scanf_float+0x64>
 8007f5a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007f5e:	6022      	str	r2, [r4, #0]
 8007f60:	f8cd 9008 	str.w	r9, [sp, #8]
 8007f64:	e7a7      	b.n	8007eb6 <_scanf_float+0x192>
 8007f66:	6822      	ldr	r2, [r4, #0]
 8007f68:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007f6c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007f70:	d006      	beq.n	8007f80 <_scanf_float+0x25c>
 8007f72:	0550      	lsls	r0, r2, #21
 8007f74:	f57f af08 	bpl.w	8007d88 <_scanf_float+0x64>
 8007f78:	f1b9 0f00 	cmp.w	r9, #0
 8007f7c:	f000 80de 	beq.w	800813c <_scanf_float+0x418>
 8007f80:	0591      	lsls	r1, r2, #22
 8007f82:	bf58      	it	pl
 8007f84:	9902      	ldrpl	r1, [sp, #8]
 8007f86:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007f8a:	bf58      	it	pl
 8007f8c:	eba9 0101 	subpl.w	r1, r9, r1
 8007f90:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007f94:	bf58      	it	pl
 8007f96:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007f9a:	6022      	str	r2, [r4, #0]
 8007f9c:	f04f 0900 	mov.w	r9, #0
 8007fa0:	e789      	b.n	8007eb6 <_scanf_float+0x192>
 8007fa2:	f04f 0a03 	mov.w	sl, #3
 8007fa6:	e786      	b.n	8007eb6 <_scanf_float+0x192>
 8007fa8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007fac:	4639      	mov	r1, r7
 8007fae:	4640      	mov	r0, r8
 8007fb0:	4798      	blx	r3
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	f43f aedb 	beq.w	8007d6e <_scanf_float+0x4a>
 8007fb8:	e6e6      	b.n	8007d88 <_scanf_float+0x64>
 8007fba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007fbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007fc2:	463a      	mov	r2, r7
 8007fc4:	4640      	mov	r0, r8
 8007fc6:	4798      	blx	r3
 8007fc8:	6923      	ldr	r3, [r4, #16]
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	6123      	str	r3, [r4, #16]
 8007fce:	e6e8      	b.n	8007da2 <_scanf_float+0x7e>
 8007fd0:	1e6b      	subs	r3, r5, #1
 8007fd2:	2b06      	cmp	r3, #6
 8007fd4:	d824      	bhi.n	8008020 <_scanf_float+0x2fc>
 8007fd6:	2d02      	cmp	r5, #2
 8007fd8:	d836      	bhi.n	8008048 <_scanf_float+0x324>
 8007fda:	9b01      	ldr	r3, [sp, #4]
 8007fdc:	429e      	cmp	r6, r3
 8007fde:	f67f aee4 	bls.w	8007daa <_scanf_float+0x86>
 8007fe2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007fe6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007fea:	463a      	mov	r2, r7
 8007fec:	4640      	mov	r0, r8
 8007fee:	4798      	blx	r3
 8007ff0:	6923      	ldr	r3, [r4, #16]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	6123      	str	r3, [r4, #16]
 8007ff6:	e7f0      	b.n	8007fda <_scanf_float+0x2b6>
 8007ff8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ffc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008000:	463a      	mov	r2, r7
 8008002:	4640      	mov	r0, r8
 8008004:	4798      	blx	r3
 8008006:	6923      	ldr	r3, [r4, #16]
 8008008:	3b01      	subs	r3, #1
 800800a:	6123      	str	r3, [r4, #16]
 800800c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008010:	fa5f fa8a 	uxtb.w	sl, sl
 8008014:	f1ba 0f02 	cmp.w	sl, #2
 8008018:	d1ee      	bne.n	8007ff8 <_scanf_float+0x2d4>
 800801a:	3d03      	subs	r5, #3
 800801c:	b2ed      	uxtb	r5, r5
 800801e:	1b76      	subs	r6, r6, r5
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	05da      	lsls	r2, r3, #23
 8008024:	d530      	bpl.n	8008088 <_scanf_float+0x364>
 8008026:	055b      	lsls	r3, r3, #21
 8008028:	d511      	bpl.n	800804e <_scanf_float+0x32a>
 800802a:	9b01      	ldr	r3, [sp, #4]
 800802c:	429e      	cmp	r6, r3
 800802e:	f67f aebc 	bls.w	8007daa <_scanf_float+0x86>
 8008032:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008036:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800803a:	463a      	mov	r2, r7
 800803c:	4640      	mov	r0, r8
 800803e:	4798      	blx	r3
 8008040:	6923      	ldr	r3, [r4, #16]
 8008042:	3b01      	subs	r3, #1
 8008044:	6123      	str	r3, [r4, #16]
 8008046:	e7f0      	b.n	800802a <_scanf_float+0x306>
 8008048:	46aa      	mov	sl, r5
 800804a:	46b3      	mov	fp, r6
 800804c:	e7de      	b.n	800800c <_scanf_float+0x2e8>
 800804e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008052:	6923      	ldr	r3, [r4, #16]
 8008054:	2965      	cmp	r1, #101	@ 0x65
 8008056:	f103 33ff 	add.w	r3, r3, #4294967295
 800805a:	f106 35ff 	add.w	r5, r6, #4294967295
 800805e:	6123      	str	r3, [r4, #16]
 8008060:	d00c      	beq.n	800807c <_scanf_float+0x358>
 8008062:	2945      	cmp	r1, #69	@ 0x45
 8008064:	d00a      	beq.n	800807c <_scanf_float+0x358>
 8008066:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800806a:	463a      	mov	r2, r7
 800806c:	4640      	mov	r0, r8
 800806e:	4798      	blx	r3
 8008070:	6923      	ldr	r3, [r4, #16]
 8008072:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008076:	3b01      	subs	r3, #1
 8008078:	1eb5      	subs	r5, r6, #2
 800807a:	6123      	str	r3, [r4, #16]
 800807c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008080:	463a      	mov	r2, r7
 8008082:	4640      	mov	r0, r8
 8008084:	4798      	blx	r3
 8008086:	462e      	mov	r6, r5
 8008088:	6822      	ldr	r2, [r4, #0]
 800808a:	f012 0210 	ands.w	r2, r2, #16
 800808e:	d001      	beq.n	8008094 <_scanf_float+0x370>
 8008090:	2000      	movs	r0, #0
 8008092:	e68b      	b.n	8007dac <_scanf_float+0x88>
 8008094:	7032      	strb	r2, [r6, #0]
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800809c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080a0:	d11c      	bne.n	80080dc <_scanf_float+0x3b8>
 80080a2:	9b02      	ldr	r3, [sp, #8]
 80080a4:	454b      	cmp	r3, r9
 80080a6:	eba3 0209 	sub.w	r2, r3, r9
 80080aa:	d123      	bne.n	80080f4 <_scanf_float+0x3d0>
 80080ac:	9901      	ldr	r1, [sp, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	4640      	mov	r0, r8
 80080b2:	f002 fbf9 	bl	800a8a8 <_strtod_r>
 80080b6:	9b03      	ldr	r3, [sp, #12]
 80080b8:	6821      	ldr	r1, [r4, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f011 0f02 	tst.w	r1, #2
 80080c0:	ec57 6b10 	vmov	r6, r7, d0
 80080c4:	f103 0204 	add.w	r2, r3, #4
 80080c8:	d01f      	beq.n	800810a <_scanf_float+0x3e6>
 80080ca:	9903      	ldr	r1, [sp, #12]
 80080cc:	600a      	str	r2, [r1, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	e9c3 6700 	strd	r6, r7, [r3]
 80080d4:	68e3      	ldr	r3, [r4, #12]
 80080d6:	3301      	adds	r3, #1
 80080d8:	60e3      	str	r3, [r4, #12]
 80080da:	e7d9      	b.n	8008090 <_scanf_float+0x36c>
 80080dc:	9b04      	ldr	r3, [sp, #16]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0e4      	beq.n	80080ac <_scanf_float+0x388>
 80080e2:	9905      	ldr	r1, [sp, #20]
 80080e4:	230a      	movs	r3, #10
 80080e6:	3101      	adds	r1, #1
 80080e8:	4640      	mov	r0, r8
 80080ea:	f002 fc5d 	bl	800a9a8 <_strtol_r>
 80080ee:	9b04      	ldr	r3, [sp, #16]
 80080f0:	9e05      	ldr	r6, [sp, #20]
 80080f2:	1ac2      	subs	r2, r0, r3
 80080f4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80080f8:	429e      	cmp	r6, r3
 80080fa:	bf28      	it	cs
 80080fc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008100:	4910      	ldr	r1, [pc, #64]	@ (8008144 <_scanf_float+0x420>)
 8008102:	4630      	mov	r0, r6
 8008104:	f000 f8e4 	bl	80082d0 <siprintf>
 8008108:	e7d0      	b.n	80080ac <_scanf_float+0x388>
 800810a:	f011 0f04 	tst.w	r1, #4
 800810e:	9903      	ldr	r1, [sp, #12]
 8008110:	600a      	str	r2, [r1, #0]
 8008112:	d1dc      	bne.n	80080ce <_scanf_float+0x3aa>
 8008114:	681d      	ldr	r5, [r3, #0]
 8008116:	4632      	mov	r2, r6
 8008118:	463b      	mov	r3, r7
 800811a:	4630      	mov	r0, r6
 800811c:	4639      	mov	r1, r7
 800811e:	f7f8 fd2d 	bl	8000b7c <__aeabi_dcmpun>
 8008122:	b128      	cbz	r0, 8008130 <_scanf_float+0x40c>
 8008124:	4808      	ldr	r0, [pc, #32]	@ (8008148 <_scanf_float+0x424>)
 8008126:	f000 f9b7 	bl	8008498 <nanf>
 800812a:	ed85 0a00 	vstr	s0, [r5]
 800812e:	e7d1      	b.n	80080d4 <_scanf_float+0x3b0>
 8008130:	4630      	mov	r0, r6
 8008132:	4639      	mov	r1, r7
 8008134:	f7f8 fd80 	bl	8000c38 <__aeabi_d2f>
 8008138:	6028      	str	r0, [r5, #0]
 800813a:	e7cb      	b.n	80080d4 <_scanf_float+0x3b0>
 800813c:	f04f 0900 	mov.w	r9, #0
 8008140:	e629      	b.n	8007d96 <_scanf_float+0x72>
 8008142:	bf00      	nop
 8008144:	0800bc44 	.word	0x0800bc44
 8008148:	0800bfdd 	.word	0x0800bfdd

0800814c <std>:
 800814c:	2300      	movs	r3, #0
 800814e:	b510      	push	{r4, lr}
 8008150:	4604      	mov	r4, r0
 8008152:	e9c0 3300 	strd	r3, r3, [r0]
 8008156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800815a:	6083      	str	r3, [r0, #8]
 800815c:	8181      	strh	r1, [r0, #12]
 800815e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008160:	81c2      	strh	r2, [r0, #14]
 8008162:	6183      	str	r3, [r0, #24]
 8008164:	4619      	mov	r1, r3
 8008166:	2208      	movs	r2, #8
 8008168:	305c      	adds	r0, #92	@ 0x5c
 800816a:	f000 f914 	bl	8008396 <memset>
 800816e:	4b0d      	ldr	r3, [pc, #52]	@ (80081a4 <std+0x58>)
 8008170:	6263      	str	r3, [r4, #36]	@ 0x24
 8008172:	4b0d      	ldr	r3, [pc, #52]	@ (80081a8 <std+0x5c>)
 8008174:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008176:	4b0d      	ldr	r3, [pc, #52]	@ (80081ac <std+0x60>)
 8008178:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800817a:	4b0d      	ldr	r3, [pc, #52]	@ (80081b0 <std+0x64>)
 800817c:	6323      	str	r3, [r4, #48]	@ 0x30
 800817e:	4b0d      	ldr	r3, [pc, #52]	@ (80081b4 <std+0x68>)
 8008180:	6224      	str	r4, [r4, #32]
 8008182:	429c      	cmp	r4, r3
 8008184:	d006      	beq.n	8008194 <std+0x48>
 8008186:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800818a:	4294      	cmp	r4, r2
 800818c:	d002      	beq.n	8008194 <std+0x48>
 800818e:	33d0      	adds	r3, #208	@ 0xd0
 8008190:	429c      	cmp	r4, r3
 8008192:	d105      	bne.n	80081a0 <std+0x54>
 8008194:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800819c:	f000 b978 	b.w	8008490 <__retarget_lock_init_recursive>
 80081a0:	bd10      	pop	{r4, pc}
 80081a2:	bf00      	nop
 80081a4:	08008311 	.word	0x08008311
 80081a8:	08008333 	.word	0x08008333
 80081ac:	0800836b 	.word	0x0800836b
 80081b0:	0800838f 	.word	0x0800838f
 80081b4:	20000520 	.word	0x20000520

080081b8 <stdio_exit_handler>:
 80081b8:	4a02      	ldr	r2, [pc, #8]	@ (80081c4 <stdio_exit_handler+0xc>)
 80081ba:	4903      	ldr	r1, [pc, #12]	@ (80081c8 <stdio_exit_handler+0x10>)
 80081bc:	4803      	ldr	r0, [pc, #12]	@ (80081cc <stdio_exit_handler+0x14>)
 80081be:	f000 b869 	b.w	8008294 <_fwalk_sglue>
 80081c2:	bf00      	nop
 80081c4:	2000000c 	.word	0x2000000c
 80081c8:	0800ad65 	.word	0x0800ad65
 80081cc:	2000001c 	.word	0x2000001c

080081d0 <cleanup_stdio>:
 80081d0:	6841      	ldr	r1, [r0, #4]
 80081d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008204 <cleanup_stdio+0x34>)
 80081d4:	4299      	cmp	r1, r3
 80081d6:	b510      	push	{r4, lr}
 80081d8:	4604      	mov	r4, r0
 80081da:	d001      	beq.n	80081e0 <cleanup_stdio+0x10>
 80081dc:	f002 fdc2 	bl	800ad64 <_fflush_r>
 80081e0:	68a1      	ldr	r1, [r4, #8]
 80081e2:	4b09      	ldr	r3, [pc, #36]	@ (8008208 <cleanup_stdio+0x38>)
 80081e4:	4299      	cmp	r1, r3
 80081e6:	d002      	beq.n	80081ee <cleanup_stdio+0x1e>
 80081e8:	4620      	mov	r0, r4
 80081ea:	f002 fdbb 	bl	800ad64 <_fflush_r>
 80081ee:	68e1      	ldr	r1, [r4, #12]
 80081f0:	4b06      	ldr	r3, [pc, #24]	@ (800820c <cleanup_stdio+0x3c>)
 80081f2:	4299      	cmp	r1, r3
 80081f4:	d004      	beq.n	8008200 <cleanup_stdio+0x30>
 80081f6:	4620      	mov	r0, r4
 80081f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081fc:	f002 bdb2 	b.w	800ad64 <_fflush_r>
 8008200:	bd10      	pop	{r4, pc}
 8008202:	bf00      	nop
 8008204:	20000520 	.word	0x20000520
 8008208:	20000588 	.word	0x20000588
 800820c:	200005f0 	.word	0x200005f0

08008210 <global_stdio_init.part.0>:
 8008210:	b510      	push	{r4, lr}
 8008212:	4b0b      	ldr	r3, [pc, #44]	@ (8008240 <global_stdio_init.part.0+0x30>)
 8008214:	4c0b      	ldr	r4, [pc, #44]	@ (8008244 <global_stdio_init.part.0+0x34>)
 8008216:	4a0c      	ldr	r2, [pc, #48]	@ (8008248 <global_stdio_init.part.0+0x38>)
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	4620      	mov	r0, r4
 800821c:	2200      	movs	r2, #0
 800821e:	2104      	movs	r1, #4
 8008220:	f7ff ff94 	bl	800814c <std>
 8008224:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008228:	2201      	movs	r2, #1
 800822a:	2109      	movs	r1, #9
 800822c:	f7ff ff8e 	bl	800814c <std>
 8008230:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008234:	2202      	movs	r2, #2
 8008236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800823a:	2112      	movs	r1, #18
 800823c:	f7ff bf86 	b.w	800814c <std>
 8008240:	20000658 	.word	0x20000658
 8008244:	20000520 	.word	0x20000520
 8008248:	080081b9 	.word	0x080081b9

0800824c <__sfp_lock_acquire>:
 800824c:	4801      	ldr	r0, [pc, #4]	@ (8008254 <__sfp_lock_acquire+0x8>)
 800824e:	f000 b920 	b.w	8008492 <__retarget_lock_acquire_recursive>
 8008252:	bf00      	nop
 8008254:	20000661 	.word	0x20000661

08008258 <__sfp_lock_release>:
 8008258:	4801      	ldr	r0, [pc, #4]	@ (8008260 <__sfp_lock_release+0x8>)
 800825a:	f000 b91b 	b.w	8008494 <__retarget_lock_release_recursive>
 800825e:	bf00      	nop
 8008260:	20000661 	.word	0x20000661

08008264 <__sinit>:
 8008264:	b510      	push	{r4, lr}
 8008266:	4604      	mov	r4, r0
 8008268:	f7ff fff0 	bl	800824c <__sfp_lock_acquire>
 800826c:	6a23      	ldr	r3, [r4, #32]
 800826e:	b11b      	cbz	r3, 8008278 <__sinit+0x14>
 8008270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008274:	f7ff bff0 	b.w	8008258 <__sfp_lock_release>
 8008278:	4b04      	ldr	r3, [pc, #16]	@ (800828c <__sinit+0x28>)
 800827a:	6223      	str	r3, [r4, #32]
 800827c:	4b04      	ldr	r3, [pc, #16]	@ (8008290 <__sinit+0x2c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1f5      	bne.n	8008270 <__sinit+0xc>
 8008284:	f7ff ffc4 	bl	8008210 <global_stdio_init.part.0>
 8008288:	e7f2      	b.n	8008270 <__sinit+0xc>
 800828a:	bf00      	nop
 800828c:	080081d1 	.word	0x080081d1
 8008290:	20000658 	.word	0x20000658

08008294 <_fwalk_sglue>:
 8008294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008298:	4607      	mov	r7, r0
 800829a:	4688      	mov	r8, r1
 800829c:	4614      	mov	r4, r2
 800829e:	2600      	movs	r6, #0
 80082a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082a4:	f1b9 0901 	subs.w	r9, r9, #1
 80082a8:	d505      	bpl.n	80082b6 <_fwalk_sglue+0x22>
 80082aa:	6824      	ldr	r4, [r4, #0]
 80082ac:	2c00      	cmp	r4, #0
 80082ae:	d1f7      	bne.n	80082a0 <_fwalk_sglue+0xc>
 80082b0:	4630      	mov	r0, r6
 80082b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082b6:	89ab      	ldrh	r3, [r5, #12]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d907      	bls.n	80082cc <_fwalk_sglue+0x38>
 80082bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082c0:	3301      	adds	r3, #1
 80082c2:	d003      	beq.n	80082cc <_fwalk_sglue+0x38>
 80082c4:	4629      	mov	r1, r5
 80082c6:	4638      	mov	r0, r7
 80082c8:	47c0      	blx	r8
 80082ca:	4306      	orrs	r6, r0
 80082cc:	3568      	adds	r5, #104	@ 0x68
 80082ce:	e7e9      	b.n	80082a4 <_fwalk_sglue+0x10>

080082d0 <siprintf>:
 80082d0:	b40e      	push	{r1, r2, r3}
 80082d2:	b500      	push	{lr}
 80082d4:	b09c      	sub	sp, #112	@ 0x70
 80082d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80082d8:	9002      	str	r0, [sp, #8]
 80082da:	9006      	str	r0, [sp, #24]
 80082dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80082e0:	4809      	ldr	r0, [pc, #36]	@ (8008308 <siprintf+0x38>)
 80082e2:	9107      	str	r1, [sp, #28]
 80082e4:	9104      	str	r1, [sp, #16]
 80082e6:	4909      	ldr	r1, [pc, #36]	@ (800830c <siprintf+0x3c>)
 80082e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ec:	9105      	str	r1, [sp, #20]
 80082ee:	6800      	ldr	r0, [r0, #0]
 80082f0:	9301      	str	r3, [sp, #4]
 80082f2:	a902      	add	r1, sp, #8
 80082f4:	f002 fbb6 	bl	800aa64 <_svfiprintf_r>
 80082f8:	9b02      	ldr	r3, [sp, #8]
 80082fa:	2200      	movs	r2, #0
 80082fc:	701a      	strb	r2, [r3, #0]
 80082fe:	b01c      	add	sp, #112	@ 0x70
 8008300:	f85d eb04 	ldr.w	lr, [sp], #4
 8008304:	b003      	add	sp, #12
 8008306:	4770      	bx	lr
 8008308:	20000018 	.word	0x20000018
 800830c:	ffff0208 	.word	0xffff0208

08008310 <__sread>:
 8008310:	b510      	push	{r4, lr}
 8008312:	460c      	mov	r4, r1
 8008314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008318:	f000 f86c 	bl	80083f4 <_read_r>
 800831c:	2800      	cmp	r0, #0
 800831e:	bfab      	itete	ge
 8008320:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008322:	89a3      	ldrhlt	r3, [r4, #12]
 8008324:	181b      	addge	r3, r3, r0
 8008326:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800832a:	bfac      	ite	ge
 800832c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800832e:	81a3      	strhlt	r3, [r4, #12]
 8008330:	bd10      	pop	{r4, pc}

08008332 <__swrite>:
 8008332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008336:	461f      	mov	r7, r3
 8008338:	898b      	ldrh	r3, [r1, #12]
 800833a:	05db      	lsls	r3, r3, #23
 800833c:	4605      	mov	r5, r0
 800833e:	460c      	mov	r4, r1
 8008340:	4616      	mov	r6, r2
 8008342:	d505      	bpl.n	8008350 <__swrite+0x1e>
 8008344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008348:	2302      	movs	r3, #2
 800834a:	2200      	movs	r2, #0
 800834c:	f000 f840 	bl	80083d0 <_lseek_r>
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008356:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800835a:	81a3      	strh	r3, [r4, #12]
 800835c:	4632      	mov	r2, r6
 800835e:	463b      	mov	r3, r7
 8008360:	4628      	mov	r0, r5
 8008362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008366:	f000 b857 	b.w	8008418 <_write_r>

0800836a <__sseek>:
 800836a:	b510      	push	{r4, lr}
 800836c:	460c      	mov	r4, r1
 800836e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008372:	f000 f82d 	bl	80083d0 <_lseek_r>
 8008376:	1c43      	adds	r3, r0, #1
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	bf15      	itete	ne
 800837c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800837e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008382:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008386:	81a3      	strheq	r3, [r4, #12]
 8008388:	bf18      	it	ne
 800838a:	81a3      	strhne	r3, [r4, #12]
 800838c:	bd10      	pop	{r4, pc}

0800838e <__sclose>:
 800838e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008392:	f000 b80d 	b.w	80083b0 <_close_r>

08008396 <memset>:
 8008396:	4402      	add	r2, r0
 8008398:	4603      	mov	r3, r0
 800839a:	4293      	cmp	r3, r2
 800839c:	d100      	bne.n	80083a0 <memset+0xa>
 800839e:	4770      	bx	lr
 80083a0:	f803 1b01 	strb.w	r1, [r3], #1
 80083a4:	e7f9      	b.n	800839a <memset+0x4>
	...

080083a8 <_localeconv_r>:
 80083a8:	4800      	ldr	r0, [pc, #0]	@ (80083ac <_localeconv_r+0x4>)
 80083aa:	4770      	bx	lr
 80083ac:	20000158 	.word	0x20000158

080083b0 <_close_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	4d06      	ldr	r5, [pc, #24]	@ (80083cc <_close_r+0x1c>)
 80083b4:	2300      	movs	r3, #0
 80083b6:	4604      	mov	r4, r0
 80083b8:	4608      	mov	r0, r1
 80083ba:	602b      	str	r3, [r5, #0]
 80083bc:	f7f9 fa9b 	bl	80018f6 <_close>
 80083c0:	1c43      	adds	r3, r0, #1
 80083c2:	d102      	bne.n	80083ca <_close_r+0x1a>
 80083c4:	682b      	ldr	r3, [r5, #0]
 80083c6:	b103      	cbz	r3, 80083ca <_close_r+0x1a>
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
 80083cc:	2000065c 	.word	0x2000065c

080083d0 <_lseek_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4d07      	ldr	r5, [pc, #28]	@ (80083f0 <_lseek_r+0x20>)
 80083d4:	4604      	mov	r4, r0
 80083d6:	4608      	mov	r0, r1
 80083d8:	4611      	mov	r1, r2
 80083da:	2200      	movs	r2, #0
 80083dc:	602a      	str	r2, [r5, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	f7f9 fab0 	bl	8001944 <_lseek>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d102      	bne.n	80083ee <_lseek_r+0x1e>
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	b103      	cbz	r3, 80083ee <_lseek_r+0x1e>
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	2000065c 	.word	0x2000065c

080083f4 <_read_r>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	4d07      	ldr	r5, [pc, #28]	@ (8008414 <_read_r+0x20>)
 80083f8:	4604      	mov	r4, r0
 80083fa:	4608      	mov	r0, r1
 80083fc:	4611      	mov	r1, r2
 80083fe:	2200      	movs	r2, #0
 8008400:	602a      	str	r2, [r5, #0]
 8008402:	461a      	mov	r2, r3
 8008404:	f7f9 fa3e 	bl	8001884 <_read>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	d102      	bne.n	8008412 <_read_r+0x1e>
 800840c:	682b      	ldr	r3, [r5, #0]
 800840e:	b103      	cbz	r3, 8008412 <_read_r+0x1e>
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	bd38      	pop	{r3, r4, r5, pc}
 8008414:	2000065c 	.word	0x2000065c

08008418 <_write_r>:
 8008418:	b538      	push	{r3, r4, r5, lr}
 800841a:	4d07      	ldr	r5, [pc, #28]	@ (8008438 <_write_r+0x20>)
 800841c:	4604      	mov	r4, r0
 800841e:	4608      	mov	r0, r1
 8008420:	4611      	mov	r1, r2
 8008422:	2200      	movs	r2, #0
 8008424:	602a      	str	r2, [r5, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	f7f9 fa49 	bl	80018be <_write>
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	d102      	bne.n	8008436 <_write_r+0x1e>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	b103      	cbz	r3, 8008436 <_write_r+0x1e>
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	bd38      	pop	{r3, r4, r5, pc}
 8008438:	2000065c 	.word	0x2000065c

0800843c <__errno>:
 800843c:	4b01      	ldr	r3, [pc, #4]	@ (8008444 <__errno+0x8>)
 800843e:	6818      	ldr	r0, [r3, #0]
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	20000018 	.word	0x20000018

08008448 <__libc_init_array>:
 8008448:	b570      	push	{r4, r5, r6, lr}
 800844a:	4d0d      	ldr	r5, [pc, #52]	@ (8008480 <__libc_init_array+0x38>)
 800844c:	4c0d      	ldr	r4, [pc, #52]	@ (8008484 <__libc_init_array+0x3c>)
 800844e:	1b64      	subs	r4, r4, r5
 8008450:	10a4      	asrs	r4, r4, #2
 8008452:	2600      	movs	r6, #0
 8008454:	42a6      	cmp	r6, r4
 8008456:	d109      	bne.n	800846c <__libc_init_array+0x24>
 8008458:	4d0b      	ldr	r5, [pc, #44]	@ (8008488 <__libc_init_array+0x40>)
 800845a:	4c0c      	ldr	r4, [pc, #48]	@ (800848c <__libc_init_array+0x44>)
 800845c:	f003 fb72 	bl	800bb44 <_init>
 8008460:	1b64      	subs	r4, r4, r5
 8008462:	10a4      	asrs	r4, r4, #2
 8008464:	2600      	movs	r6, #0
 8008466:	42a6      	cmp	r6, r4
 8008468:	d105      	bne.n	8008476 <__libc_init_array+0x2e>
 800846a:	bd70      	pop	{r4, r5, r6, pc}
 800846c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008470:	4798      	blx	r3
 8008472:	3601      	adds	r6, #1
 8008474:	e7ee      	b.n	8008454 <__libc_init_array+0xc>
 8008476:	f855 3b04 	ldr.w	r3, [r5], #4
 800847a:	4798      	blx	r3
 800847c:	3601      	adds	r6, #1
 800847e:	e7f2      	b.n	8008466 <__libc_init_array+0x1e>
 8008480:	0800c048 	.word	0x0800c048
 8008484:	0800c048 	.word	0x0800c048
 8008488:	0800c048 	.word	0x0800c048
 800848c:	0800c04c 	.word	0x0800c04c

08008490 <__retarget_lock_init_recursive>:
 8008490:	4770      	bx	lr

08008492 <__retarget_lock_acquire_recursive>:
 8008492:	4770      	bx	lr

08008494 <__retarget_lock_release_recursive>:
 8008494:	4770      	bx	lr
	...

08008498 <nanf>:
 8008498:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80084a0 <nanf+0x8>
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	7fc00000 	.word	0x7fc00000

080084a4 <quorem>:
 80084a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a8:	6903      	ldr	r3, [r0, #16]
 80084aa:	690c      	ldr	r4, [r1, #16]
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	4607      	mov	r7, r0
 80084b0:	db7e      	blt.n	80085b0 <quorem+0x10c>
 80084b2:	3c01      	subs	r4, #1
 80084b4:	f101 0814 	add.w	r8, r1, #20
 80084b8:	00a3      	lsls	r3, r4, #2
 80084ba:	f100 0514 	add.w	r5, r0, #20
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084c4:	9301      	str	r3, [sp, #4]
 80084c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084ce:	3301      	adds	r3, #1
 80084d0:	429a      	cmp	r2, r3
 80084d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80084da:	d32e      	bcc.n	800853a <quorem+0x96>
 80084dc:	f04f 0a00 	mov.w	sl, #0
 80084e0:	46c4      	mov	ip, r8
 80084e2:	46ae      	mov	lr, r5
 80084e4:	46d3      	mov	fp, sl
 80084e6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80084ea:	b298      	uxth	r0, r3
 80084ec:	fb06 a000 	mla	r0, r6, r0, sl
 80084f0:	0c02      	lsrs	r2, r0, #16
 80084f2:	0c1b      	lsrs	r3, r3, #16
 80084f4:	fb06 2303 	mla	r3, r6, r3, r2
 80084f8:	f8de 2000 	ldr.w	r2, [lr]
 80084fc:	b280      	uxth	r0, r0
 80084fe:	b292      	uxth	r2, r2
 8008500:	1a12      	subs	r2, r2, r0
 8008502:	445a      	add	r2, fp
 8008504:	f8de 0000 	ldr.w	r0, [lr]
 8008508:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800850c:	b29b      	uxth	r3, r3
 800850e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008512:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008516:	b292      	uxth	r2, r2
 8008518:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800851c:	45e1      	cmp	r9, ip
 800851e:	f84e 2b04 	str.w	r2, [lr], #4
 8008522:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008526:	d2de      	bcs.n	80084e6 <quorem+0x42>
 8008528:	9b00      	ldr	r3, [sp, #0]
 800852a:	58eb      	ldr	r3, [r5, r3]
 800852c:	b92b      	cbnz	r3, 800853a <quorem+0x96>
 800852e:	9b01      	ldr	r3, [sp, #4]
 8008530:	3b04      	subs	r3, #4
 8008532:	429d      	cmp	r5, r3
 8008534:	461a      	mov	r2, r3
 8008536:	d32f      	bcc.n	8008598 <quorem+0xf4>
 8008538:	613c      	str	r4, [r7, #16]
 800853a:	4638      	mov	r0, r7
 800853c:	f001 f9c4 	bl	80098c8 <__mcmp>
 8008540:	2800      	cmp	r0, #0
 8008542:	db25      	blt.n	8008590 <quorem+0xec>
 8008544:	4629      	mov	r1, r5
 8008546:	2000      	movs	r0, #0
 8008548:	f858 2b04 	ldr.w	r2, [r8], #4
 800854c:	f8d1 c000 	ldr.w	ip, [r1]
 8008550:	fa1f fe82 	uxth.w	lr, r2
 8008554:	fa1f f38c 	uxth.w	r3, ip
 8008558:	eba3 030e 	sub.w	r3, r3, lr
 800855c:	4403      	add	r3, r0
 800855e:	0c12      	lsrs	r2, r2, #16
 8008560:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008564:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008568:	b29b      	uxth	r3, r3
 800856a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800856e:	45c1      	cmp	r9, r8
 8008570:	f841 3b04 	str.w	r3, [r1], #4
 8008574:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008578:	d2e6      	bcs.n	8008548 <quorem+0xa4>
 800857a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800857e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008582:	b922      	cbnz	r2, 800858e <quorem+0xea>
 8008584:	3b04      	subs	r3, #4
 8008586:	429d      	cmp	r5, r3
 8008588:	461a      	mov	r2, r3
 800858a:	d30b      	bcc.n	80085a4 <quorem+0x100>
 800858c:	613c      	str	r4, [r7, #16]
 800858e:	3601      	adds	r6, #1
 8008590:	4630      	mov	r0, r6
 8008592:	b003      	add	sp, #12
 8008594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008598:	6812      	ldr	r2, [r2, #0]
 800859a:	3b04      	subs	r3, #4
 800859c:	2a00      	cmp	r2, #0
 800859e:	d1cb      	bne.n	8008538 <quorem+0x94>
 80085a0:	3c01      	subs	r4, #1
 80085a2:	e7c6      	b.n	8008532 <quorem+0x8e>
 80085a4:	6812      	ldr	r2, [r2, #0]
 80085a6:	3b04      	subs	r3, #4
 80085a8:	2a00      	cmp	r2, #0
 80085aa:	d1ef      	bne.n	800858c <quorem+0xe8>
 80085ac:	3c01      	subs	r4, #1
 80085ae:	e7ea      	b.n	8008586 <quorem+0xe2>
 80085b0:	2000      	movs	r0, #0
 80085b2:	e7ee      	b.n	8008592 <quorem+0xee>
 80085b4:	0000      	movs	r0, r0
	...

080085b8 <_dtoa_r>:
 80085b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	69c7      	ldr	r7, [r0, #28]
 80085be:	b099      	sub	sp, #100	@ 0x64
 80085c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80085c4:	ec55 4b10 	vmov	r4, r5, d0
 80085c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80085ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80085cc:	4683      	mov	fp, r0
 80085ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80085d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80085d2:	b97f      	cbnz	r7, 80085f4 <_dtoa_r+0x3c>
 80085d4:	2010      	movs	r0, #16
 80085d6:	f000 fdfd 	bl	80091d4 <malloc>
 80085da:	4602      	mov	r2, r0
 80085dc:	f8cb 001c 	str.w	r0, [fp, #28]
 80085e0:	b920      	cbnz	r0, 80085ec <_dtoa_r+0x34>
 80085e2:	4ba7      	ldr	r3, [pc, #668]	@ (8008880 <_dtoa_r+0x2c8>)
 80085e4:	21ef      	movs	r1, #239	@ 0xef
 80085e6:	48a7      	ldr	r0, [pc, #668]	@ (8008884 <_dtoa_r+0x2cc>)
 80085e8:	f002 fc36 	bl	800ae58 <__assert_func>
 80085ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80085f0:	6007      	str	r7, [r0, #0]
 80085f2:	60c7      	str	r7, [r0, #12]
 80085f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80085f8:	6819      	ldr	r1, [r3, #0]
 80085fa:	b159      	cbz	r1, 8008614 <_dtoa_r+0x5c>
 80085fc:	685a      	ldr	r2, [r3, #4]
 80085fe:	604a      	str	r2, [r1, #4]
 8008600:	2301      	movs	r3, #1
 8008602:	4093      	lsls	r3, r2
 8008604:	608b      	str	r3, [r1, #8]
 8008606:	4658      	mov	r0, fp
 8008608:	f000 feda 	bl	80093c0 <_Bfree>
 800860c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008610:	2200      	movs	r2, #0
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	1e2b      	subs	r3, r5, #0
 8008616:	bfb9      	ittee	lt
 8008618:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800861c:	9303      	strlt	r3, [sp, #12]
 800861e:	2300      	movge	r3, #0
 8008620:	6033      	strge	r3, [r6, #0]
 8008622:	9f03      	ldr	r7, [sp, #12]
 8008624:	4b98      	ldr	r3, [pc, #608]	@ (8008888 <_dtoa_r+0x2d0>)
 8008626:	bfbc      	itt	lt
 8008628:	2201      	movlt	r2, #1
 800862a:	6032      	strlt	r2, [r6, #0]
 800862c:	43bb      	bics	r3, r7
 800862e:	d112      	bne.n	8008656 <_dtoa_r+0x9e>
 8008630:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008632:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800863c:	4323      	orrs	r3, r4
 800863e:	f000 854d 	beq.w	80090dc <_dtoa_r+0xb24>
 8008642:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008644:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800889c <_dtoa_r+0x2e4>
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 854f 	beq.w	80090ec <_dtoa_r+0xb34>
 800864e:	f10a 0303 	add.w	r3, sl, #3
 8008652:	f000 bd49 	b.w	80090e8 <_dtoa_r+0xb30>
 8008656:	ed9d 7b02 	vldr	d7, [sp, #8]
 800865a:	2200      	movs	r2, #0
 800865c:	ec51 0b17 	vmov	r0, r1, d7
 8008660:	2300      	movs	r3, #0
 8008662:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008666:	f7f8 fa57 	bl	8000b18 <__aeabi_dcmpeq>
 800866a:	4680      	mov	r8, r0
 800866c:	b158      	cbz	r0, 8008686 <_dtoa_r+0xce>
 800866e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008670:	2301      	movs	r3, #1
 8008672:	6013      	str	r3, [r2, #0]
 8008674:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008676:	b113      	cbz	r3, 800867e <_dtoa_r+0xc6>
 8008678:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800867a:	4b84      	ldr	r3, [pc, #528]	@ (800888c <_dtoa_r+0x2d4>)
 800867c:	6013      	str	r3, [r2, #0]
 800867e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80088a0 <_dtoa_r+0x2e8>
 8008682:	f000 bd33 	b.w	80090ec <_dtoa_r+0xb34>
 8008686:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800868a:	aa16      	add	r2, sp, #88	@ 0x58
 800868c:	a917      	add	r1, sp, #92	@ 0x5c
 800868e:	4658      	mov	r0, fp
 8008690:	f001 fa3a 	bl	8009b08 <__d2b>
 8008694:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008698:	4681      	mov	r9, r0
 800869a:	2e00      	cmp	r6, #0
 800869c:	d077      	beq.n	800878e <_dtoa_r+0x1d6>
 800869e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80086a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80086b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80086b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80086b8:	4619      	mov	r1, r3
 80086ba:	2200      	movs	r2, #0
 80086bc:	4b74      	ldr	r3, [pc, #464]	@ (8008890 <_dtoa_r+0x2d8>)
 80086be:	f7f7 fe0b 	bl	80002d8 <__aeabi_dsub>
 80086c2:	a369      	add	r3, pc, #420	@ (adr r3, 8008868 <_dtoa_r+0x2b0>)
 80086c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c8:	f7f7 ffbe 	bl	8000648 <__aeabi_dmul>
 80086cc:	a368      	add	r3, pc, #416	@ (adr r3, 8008870 <_dtoa_r+0x2b8>)
 80086ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d2:	f7f7 fe03 	bl	80002dc <__adddf3>
 80086d6:	4604      	mov	r4, r0
 80086d8:	4630      	mov	r0, r6
 80086da:	460d      	mov	r5, r1
 80086dc:	f7f7 ff4a 	bl	8000574 <__aeabi_i2d>
 80086e0:	a365      	add	r3, pc, #404	@ (adr r3, 8008878 <_dtoa_r+0x2c0>)
 80086e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e6:	f7f7 ffaf 	bl	8000648 <__aeabi_dmul>
 80086ea:	4602      	mov	r2, r0
 80086ec:	460b      	mov	r3, r1
 80086ee:	4620      	mov	r0, r4
 80086f0:	4629      	mov	r1, r5
 80086f2:	f7f7 fdf3 	bl	80002dc <__adddf3>
 80086f6:	4604      	mov	r4, r0
 80086f8:	460d      	mov	r5, r1
 80086fa:	f7f8 fa55 	bl	8000ba8 <__aeabi_d2iz>
 80086fe:	2200      	movs	r2, #0
 8008700:	4607      	mov	r7, r0
 8008702:	2300      	movs	r3, #0
 8008704:	4620      	mov	r0, r4
 8008706:	4629      	mov	r1, r5
 8008708:	f7f8 fa10 	bl	8000b2c <__aeabi_dcmplt>
 800870c:	b140      	cbz	r0, 8008720 <_dtoa_r+0x168>
 800870e:	4638      	mov	r0, r7
 8008710:	f7f7 ff30 	bl	8000574 <__aeabi_i2d>
 8008714:	4622      	mov	r2, r4
 8008716:	462b      	mov	r3, r5
 8008718:	f7f8 f9fe 	bl	8000b18 <__aeabi_dcmpeq>
 800871c:	b900      	cbnz	r0, 8008720 <_dtoa_r+0x168>
 800871e:	3f01      	subs	r7, #1
 8008720:	2f16      	cmp	r7, #22
 8008722:	d851      	bhi.n	80087c8 <_dtoa_r+0x210>
 8008724:	4b5b      	ldr	r3, [pc, #364]	@ (8008894 <_dtoa_r+0x2dc>)
 8008726:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800872a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008732:	f7f8 f9fb 	bl	8000b2c <__aeabi_dcmplt>
 8008736:	2800      	cmp	r0, #0
 8008738:	d048      	beq.n	80087cc <_dtoa_r+0x214>
 800873a:	3f01      	subs	r7, #1
 800873c:	2300      	movs	r3, #0
 800873e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008740:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008742:	1b9b      	subs	r3, r3, r6
 8008744:	1e5a      	subs	r2, r3, #1
 8008746:	bf44      	itt	mi
 8008748:	f1c3 0801 	rsbmi	r8, r3, #1
 800874c:	2300      	movmi	r3, #0
 800874e:	9208      	str	r2, [sp, #32]
 8008750:	bf54      	ite	pl
 8008752:	f04f 0800 	movpl.w	r8, #0
 8008756:	9308      	strmi	r3, [sp, #32]
 8008758:	2f00      	cmp	r7, #0
 800875a:	db39      	blt.n	80087d0 <_dtoa_r+0x218>
 800875c:	9b08      	ldr	r3, [sp, #32]
 800875e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008760:	443b      	add	r3, r7
 8008762:	9308      	str	r3, [sp, #32]
 8008764:	2300      	movs	r3, #0
 8008766:	930a      	str	r3, [sp, #40]	@ 0x28
 8008768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800876a:	2b09      	cmp	r3, #9
 800876c:	d864      	bhi.n	8008838 <_dtoa_r+0x280>
 800876e:	2b05      	cmp	r3, #5
 8008770:	bfc4      	itt	gt
 8008772:	3b04      	subgt	r3, #4
 8008774:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008778:	f1a3 0302 	sub.w	r3, r3, #2
 800877c:	bfcc      	ite	gt
 800877e:	2400      	movgt	r4, #0
 8008780:	2401      	movle	r4, #1
 8008782:	2b03      	cmp	r3, #3
 8008784:	d863      	bhi.n	800884e <_dtoa_r+0x296>
 8008786:	e8df f003 	tbb	[pc, r3]
 800878a:	372a      	.short	0x372a
 800878c:	5535      	.short	0x5535
 800878e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008792:	441e      	add	r6, r3
 8008794:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008798:	2b20      	cmp	r3, #32
 800879a:	bfc1      	itttt	gt
 800879c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80087a0:	409f      	lslgt	r7, r3
 80087a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80087a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80087aa:	bfd6      	itet	le
 80087ac:	f1c3 0320 	rsble	r3, r3, #32
 80087b0:	ea47 0003 	orrgt.w	r0, r7, r3
 80087b4:	fa04 f003 	lslle.w	r0, r4, r3
 80087b8:	f7f7 fecc 	bl	8000554 <__aeabi_ui2d>
 80087bc:	2201      	movs	r2, #1
 80087be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80087c2:	3e01      	subs	r6, #1
 80087c4:	9214      	str	r2, [sp, #80]	@ 0x50
 80087c6:	e777      	b.n	80086b8 <_dtoa_r+0x100>
 80087c8:	2301      	movs	r3, #1
 80087ca:	e7b8      	b.n	800873e <_dtoa_r+0x186>
 80087cc:	9012      	str	r0, [sp, #72]	@ 0x48
 80087ce:	e7b7      	b.n	8008740 <_dtoa_r+0x188>
 80087d0:	427b      	negs	r3, r7
 80087d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80087d4:	2300      	movs	r3, #0
 80087d6:	eba8 0807 	sub.w	r8, r8, r7
 80087da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80087dc:	e7c4      	b.n	8008768 <_dtoa_r+0x1b0>
 80087de:	2300      	movs	r3, #0
 80087e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	dc35      	bgt.n	8008854 <_dtoa_r+0x29c>
 80087e8:	2301      	movs	r3, #1
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	9307      	str	r3, [sp, #28]
 80087ee:	461a      	mov	r2, r3
 80087f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80087f2:	e00b      	b.n	800880c <_dtoa_r+0x254>
 80087f4:	2301      	movs	r3, #1
 80087f6:	e7f3      	b.n	80087e0 <_dtoa_r+0x228>
 80087f8:	2300      	movs	r3, #0
 80087fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087fe:	18fb      	adds	r3, r7, r3
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	3301      	adds	r3, #1
 8008804:	2b01      	cmp	r3, #1
 8008806:	9307      	str	r3, [sp, #28]
 8008808:	bfb8      	it	lt
 800880a:	2301      	movlt	r3, #1
 800880c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008810:	2100      	movs	r1, #0
 8008812:	2204      	movs	r2, #4
 8008814:	f102 0514 	add.w	r5, r2, #20
 8008818:	429d      	cmp	r5, r3
 800881a:	d91f      	bls.n	800885c <_dtoa_r+0x2a4>
 800881c:	6041      	str	r1, [r0, #4]
 800881e:	4658      	mov	r0, fp
 8008820:	f000 fd8e 	bl	8009340 <_Balloc>
 8008824:	4682      	mov	sl, r0
 8008826:	2800      	cmp	r0, #0
 8008828:	d13c      	bne.n	80088a4 <_dtoa_r+0x2ec>
 800882a:	4b1b      	ldr	r3, [pc, #108]	@ (8008898 <_dtoa_r+0x2e0>)
 800882c:	4602      	mov	r2, r0
 800882e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008832:	e6d8      	b.n	80085e6 <_dtoa_r+0x2e>
 8008834:	2301      	movs	r3, #1
 8008836:	e7e0      	b.n	80087fa <_dtoa_r+0x242>
 8008838:	2401      	movs	r4, #1
 800883a:	2300      	movs	r3, #0
 800883c:	9309      	str	r3, [sp, #36]	@ 0x24
 800883e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008840:	f04f 33ff 	mov.w	r3, #4294967295
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	9307      	str	r3, [sp, #28]
 8008848:	2200      	movs	r2, #0
 800884a:	2312      	movs	r3, #18
 800884c:	e7d0      	b.n	80087f0 <_dtoa_r+0x238>
 800884e:	2301      	movs	r3, #1
 8008850:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008852:	e7f5      	b.n	8008840 <_dtoa_r+0x288>
 8008854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008856:	9300      	str	r3, [sp, #0]
 8008858:	9307      	str	r3, [sp, #28]
 800885a:	e7d7      	b.n	800880c <_dtoa_r+0x254>
 800885c:	3101      	adds	r1, #1
 800885e:	0052      	lsls	r2, r2, #1
 8008860:	e7d8      	b.n	8008814 <_dtoa_r+0x25c>
 8008862:	bf00      	nop
 8008864:	f3af 8000 	nop.w
 8008868:	636f4361 	.word	0x636f4361
 800886c:	3fd287a7 	.word	0x3fd287a7
 8008870:	8b60c8b3 	.word	0x8b60c8b3
 8008874:	3fc68a28 	.word	0x3fc68a28
 8008878:	509f79fb 	.word	0x509f79fb
 800887c:	3fd34413 	.word	0x3fd34413
 8008880:	0800bc56 	.word	0x0800bc56
 8008884:	0800bc6d 	.word	0x0800bc6d
 8008888:	7ff00000 	.word	0x7ff00000
 800888c:	0800bc21 	.word	0x0800bc21
 8008890:	3ff80000 	.word	0x3ff80000
 8008894:	0800bd68 	.word	0x0800bd68
 8008898:	0800bcc5 	.word	0x0800bcc5
 800889c:	0800bc52 	.word	0x0800bc52
 80088a0:	0800bc20 	.word	0x0800bc20
 80088a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80088a8:	6018      	str	r0, [r3, #0]
 80088aa:	9b07      	ldr	r3, [sp, #28]
 80088ac:	2b0e      	cmp	r3, #14
 80088ae:	f200 80a4 	bhi.w	80089fa <_dtoa_r+0x442>
 80088b2:	2c00      	cmp	r4, #0
 80088b4:	f000 80a1 	beq.w	80089fa <_dtoa_r+0x442>
 80088b8:	2f00      	cmp	r7, #0
 80088ba:	dd33      	ble.n	8008924 <_dtoa_r+0x36c>
 80088bc:	4bad      	ldr	r3, [pc, #692]	@ (8008b74 <_dtoa_r+0x5bc>)
 80088be:	f007 020f 	and.w	r2, r7, #15
 80088c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088c6:	ed93 7b00 	vldr	d7, [r3]
 80088ca:	05f8      	lsls	r0, r7, #23
 80088cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80088d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80088d4:	d516      	bpl.n	8008904 <_dtoa_r+0x34c>
 80088d6:	4ba8      	ldr	r3, [pc, #672]	@ (8008b78 <_dtoa_r+0x5c0>)
 80088d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088e0:	f7f7 ffdc 	bl	800089c <__aeabi_ddiv>
 80088e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088e8:	f004 040f 	and.w	r4, r4, #15
 80088ec:	2603      	movs	r6, #3
 80088ee:	4da2      	ldr	r5, [pc, #648]	@ (8008b78 <_dtoa_r+0x5c0>)
 80088f0:	b954      	cbnz	r4, 8008908 <_dtoa_r+0x350>
 80088f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088fa:	f7f7 ffcf 	bl	800089c <__aeabi_ddiv>
 80088fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008902:	e028      	b.n	8008956 <_dtoa_r+0x39e>
 8008904:	2602      	movs	r6, #2
 8008906:	e7f2      	b.n	80088ee <_dtoa_r+0x336>
 8008908:	07e1      	lsls	r1, r4, #31
 800890a:	d508      	bpl.n	800891e <_dtoa_r+0x366>
 800890c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008910:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008914:	f7f7 fe98 	bl	8000648 <__aeabi_dmul>
 8008918:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800891c:	3601      	adds	r6, #1
 800891e:	1064      	asrs	r4, r4, #1
 8008920:	3508      	adds	r5, #8
 8008922:	e7e5      	b.n	80088f0 <_dtoa_r+0x338>
 8008924:	f000 80d2 	beq.w	8008acc <_dtoa_r+0x514>
 8008928:	427c      	negs	r4, r7
 800892a:	4b92      	ldr	r3, [pc, #584]	@ (8008b74 <_dtoa_r+0x5bc>)
 800892c:	4d92      	ldr	r5, [pc, #584]	@ (8008b78 <_dtoa_r+0x5c0>)
 800892e:	f004 020f 	and.w	r2, r4, #15
 8008932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800893e:	f7f7 fe83 	bl	8000648 <__aeabi_dmul>
 8008942:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008946:	1124      	asrs	r4, r4, #4
 8008948:	2300      	movs	r3, #0
 800894a:	2602      	movs	r6, #2
 800894c:	2c00      	cmp	r4, #0
 800894e:	f040 80b2 	bne.w	8008ab6 <_dtoa_r+0x4fe>
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1d3      	bne.n	80088fe <_dtoa_r+0x346>
 8008956:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008958:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800895c:	2b00      	cmp	r3, #0
 800895e:	f000 80b7 	beq.w	8008ad0 <_dtoa_r+0x518>
 8008962:	4b86      	ldr	r3, [pc, #536]	@ (8008b7c <_dtoa_r+0x5c4>)
 8008964:	2200      	movs	r2, #0
 8008966:	4620      	mov	r0, r4
 8008968:	4629      	mov	r1, r5
 800896a:	f7f8 f8df 	bl	8000b2c <__aeabi_dcmplt>
 800896e:	2800      	cmp	r0, #0
 8008970:	f000 80ae 	beq.w	8008ad0 <_dtoa_r+0x518>
 8008974:	9b07      	ldr	r3, [sp, #28]
 8008976:	2b00      	cmp	r3, #0
 8008978:	f000 80aa 	beq.w	8008ad0 <_dtoa_r+0x518>
 800897c:	9b00      	ldr	r3, [sp, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	dd37      	ble.n	80089f2 <_dtoa_r+0x43a>
 8008982:	1e7b      	subs	r3, r7, #1
 8008984:	9304      	str	r3, [sp, #16]
 8008986:	4620      	mov	r0, r4
 8008988:	4b7d      	ldr	r3, [pc, #500]	@ (8008b80 <_dtoa_r+0x5c8>)
 800898a:	2200      	movs	r2, #0
 800898c:	4629      	mov	r1, r5
 800898e:	f7f7 fe5b 	bl	8000648 <__aeabi_dmul>
 8008992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008996:	9c00      	ldr	r4, [sp, #0]
 8008998:	3601      	adds	r6, #1
 800899a:	4630      	mov	r0, r6
 800899c:	f7f7 fdea 	bl	8000574 <__aeabi_i2d>
 80089a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089a4:	f7f7 fe50 	bl	8000648 <__aeabi_dmul>
 80089a8:	4b76      	ldr	r3, [pc, #472]	@ (8008b84 <_dtoa_r+0x5cc>)
 80089aa:	2200      	movs	r2, #0
 80089ac:	f7f7 fc96 	bl	80002dc <__adddf3>
 80089b0:	4605      	mov	r5, r0
 80089b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80089b6:	2c00      	cmp	r4, #0
 80089b8:	f040 808d 	bne.w	8008ad6 <_dtoa_r+0x51e>
 80089bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089c0:	4b71      	ldr	r3, [pc, #452]	@ (8008b88 <_dtoa_r+0x5d0>)
 80089c2:	2200      	movs	r2, #0
 80089c4:	f7f7 fc88 	bl	80002d8 <__aeabi_dsub>
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80089d0:	462a      	mov	r2, r5
 80089d2:	4633      	mov	r3, r6
 80089d4:	f7f8 f8c8 	bl	8000b68 <__aeabi_dcmpgt>
 80089d8:	2800      	cmp	r0, #0
 80089da:	f040 828b 	bne.w	8008ef4 <_dtoa_r+0x93c>
 80089de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089e2:	462a      	mov	r2, r5
 80089e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80089e8:	f7f8 f8a0 	bl	8000b2c <__aeabi_dcmplt>
 80089ec:	2800      	cmp	r0, #0
 80089ee:	f040 8128 	bne.w	8008c42 <_dtoa_r+0x68a>
 80089f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80089f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80089fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f2c0 815a 	blt.w	8008cb6 <_dtoa_r+0x6fe>
 8008a02:	2f0e      	cmp	r7, #14
 8008a04:	f300 8157 	bgt.w	8008cb6 <_dtoa_r+0x6fe>
 8008a08:	4b5a      	ldr	r3, [pc, #360]	@ (8008b74 <_dtoa_r+0x5bc>)
 8008a0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a0e:	ed93 7b00 	vldr	d7, [r3]
 8008a12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	ed8d 7b00 	vstr	d7, [sp]
 8008a1a:	da03      	bge.n	8008a24 <_dtoa_r+0x46c>
 8008a1c:	9b07      	ldr	r3, [sp, #28]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f340 8101 	ble.w	8008c26 <_dtoa_r+0x66e>
 8008a24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008a28:	4656      	mov	r6, sl
 8008a2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a2e:	4620      	mov	r0, r4
 8008a30:	4629      	mov	r1, r5
 8008a32:	f7f7 ff33 	bl	800089c <__aeabi_ddiv>
 8008a36:	f7f8 f8b7 	bl	8000ba8 <__aeabi_d2iz>
 8008a3a:	4680      	mov	r8, r0
 8008a3c:	f7f7 fd9a 	bl	8000574 <__aeabi_i2d>
 8008a40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a44:	f7f7 fe00 	bl	8000648 <__aeabi_dmul>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	4629      	mov	r1, r5
 8008a50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008a54:	f7f7 fc40 	bl	80002d8 <__aeabi_dsub>
 8008a58:	f806 4b01 	strb.w	r4, [r6], #1
 8008a5c:	9d07      	ldr	r5, [sp, #28]
 8008a5e:	eba6 040a 	sub.w	r4, r6, sl
 8008a62:	42a5      	cmp	r5, r4
 8008a64:	4602      	mov	r2, r0
 8008a66:	460b      	mov	r3, r1
 8008a68:	f040 8117 	bne.w	8008c9a <_dtoa_r+0x6e2>
 8008a6c:	f7f7 fc36 	bl	80002dc <__adddf3>
 8008a70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a74:	4604      	mov	r4, r0
 8008a76:	460d      	mov	r5, r1
 8008a78:	f7f8 f876 	bl	8000b68 <__aeabi_dcmpgt>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	f040 80f9 	bne.w	8008c74 <_dtoa_r+0x6bc>
 8008a82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a86:	4620      	mov	r0, r4
 8008a88:	4629      	mov	r1, r5
 8008a8a:	f7f8 f845 	bl	8000b18 <__aeabi_dcmpeq>
 8008a8e:	b118      	cbz	r0, 8008a98 <_dtoa_r+0x4e0>
 8008a90:	f018 0f01 	tst.w	r8, #1
 8008a94:	f040 80ee 	bne.w	8008c74 <_dtoa_r+0x6bc>
 8008a98:	4649      	mov	r1, r9
 8008a9a:	4658      	mov	r0, fp
 8008a9c:	f000 fc90 	bl	80093c0 <_Bfree>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	7033      	strb	r3, [r6, #0]
 8008aa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008aa6:	3701      	adds	r7, #1
 8008aa8:	601f      	str	r7, [r3, #0]
 8008aaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 831d 	beq.w	80090ec <_dtoa_r+0xb34>
 8008ab2:	601e      	str	r6, [r3, #0]
 8008ab4:	e31a      	b.n	80090ec <_dtoa_r+0xb34>
 8008ab6:	07e2      	lsls	r2, r4, #31
 8008ab8:	d505      	bpl.n	8008ac6 <_dtoa_r+0x50e>
 8008aba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008abe:	f7f7 fdc3 	bl	8000648 <__aeabi_dmul>
 8008ac2:	3601      	adds	r6, #1
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	1064      	asrs	r4, r4, #1
 8008ac8:	3508      	adds	r5, #8
 8008aca:	e73f      	b.n	800894c <_dtoa_r+0x394>
 8008acc:	2602      	movs	r6, #2
 8008ace:	e742      	b.n	8008956 <_dtoa_r+0x39e>
 8008ad0:	9c07      	ldr	r4, [sp, #28]
 8008ad2:	9704      	str	r7, [sp, #16]
 8008ad4:	e761      	b.n	800899a <_dtoa_r+0x3e2>
 8008ad6:	4b27      	ldr	r3, [pc, #156]	@ (8008b74 <_dtoa_r+0x5bc>)
 8008ad8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ada:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ade:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ae2:	4454      	add	r4, sl
 8008ae4:	2900      	cmp	r1, #0
 8008ae6:	d053      	beq.n	8008b90 <_dtoa_r+0x5d8>
 8008ae8:	4928      	ldr	r1, [pc, #160]	@ (8008b8c <_dtoa_r+0x5d4>)
 8008aea:	2000      	movs	r0, #0
 8008aec:	f7f7 fed6 	bl	800089c <__aeabi_ddiv>
 8008af0:	4633      	mov	r3, r6
 8008af2:	462a      	mov	r2, r5
 8008af4:	f7f7 fbf0 	bl	80002d8 <__aeabi_dsub>
 8008af8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008afc:	4656      	mov	r6, sl
 8008afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b02:	f7f8 f851 	bl	8000ba8 <__aeabi_d2iz>
 8008b06:	4605      	mov	r5, r0
 8008b08:	f7f7 fd34 	bl	8000574 <__aeabi_i2d>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	460b      	mov	r3, r1
 8008b10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b14:	f7f7 fbe0 	bl	80002d8 <__aeabi_dsub>
 8008b18:	3530      	adds	r5, #48	@ 0x30
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b22:	f806 5b01 	strb.w	r5, [r6], #1
 8008b26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b2a:	f7f7 ffff 	bl	8000b2c <__aeabi_dcmplt>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	d171      	bne.n	8008c16 <_dtoa_r+0x65e>
 8008b32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b36:	4911      	ldr	r1, [pc, #68]	@ (8008b7c <_dtoa_r+0x5c4>)
 8008b38:	2000      	movs	r0, #0
 8008b3a:	f7f7 fbcd 	bl	80002d8 <__aeabi_dsub>
 8008b3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b42:	f7f7 fff3 	bl	8000b2c <__aeabi_dcmplt>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	f040 8095 	bne.w	8008c76 <_dtoa_r+0x6be>
 8008b4c:	42a6      	cmp	r6, r4
 8008b4e:	f43f af50 	beq.w	80089f2 <_dtoa_r+0x43a>
 8008b52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b56:	4b0a      	ldr	r3, [pc, #40]	@ (8008b80 <_dtoa_r+0x5c8>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f7f7 fd75 	bl	8000648 <__aeabi_dmul>
 8008b5e:	4b08      	ldr	r3, [pc, #32]	@ (8008b80 <_dtoa_r+0x5c8>)
 8008b60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b64:	2200      	movs	r2, #0
 8008b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b6a:	f7f7 fd6d 	bl	8000648 <__aeabi_dmul>
 8008b6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b72:	e7c4      	b.n	8008afe <_dtoa_r+0x546>
 8008b74:	0800bd68 	.word	0x0800bd68
 8008b78:	0800bd40 	.word	0x0800bd40
 8008b7c:	3ff00000 	.word	0x3ff00000
 8008b80:	40240000 	.word	0x40240000
 8008b84:	401c0000 	.word	0x401c0000
 8008b88:	40140000 	.word	0x40140000
 8008b8c:	3fe00000 	.word	0x3fe00000
 8008b90:	4631      	mov	r1, r6
 8008b92:	4628      	mov	r0, r5
 8008b94:	f7f7 fd58 	bl	8000648 <__aeabi_dmul>
 8008b98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b9c:	9415      	str	r4, [sp, #84]	@ 0x54
 8008b9e:	4656      	mov	r6, sl
 8008ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ba4:	f7f8 f800 	bl	8000ba8 <__aeabi_d2iz>
 8008ba8:	4605      	mov	r5, r0
 8008baa:	f7f7 fce3 	bl	8000574 <__aeabi_i2d>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bb6:	f7f7 fb8f 	bl	80002d8 <__aeabi_dsub>
 8008bba:	3530      	adds	r5, #48	@ 0x30
 8008bbc:	f806 5b01 	strb.w	r5, [r6], #1
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	42a6      	cmp	r6, r4
 8008bc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008bca:	f04f 0200 	mov.w	r2, #0
 8008bce:	d124      	bne.n	8008c1a <_dtoa_r+0x662>
 8008bd0:	4bac      	ldr	r3, [pc, #688]	@ (8008e84 <_dtoa_r+0x8cc>)
 8008bd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008bd6:	f7f7 fb81 	bl	80002dc <__adddf3>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008be2:	f7f7 ffc1 	bl	8000b68 <__aeabi_dcmpgt>
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d145      	bne.n	8008c76 <_dtoa_r+0x6be>
 8008bea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008bee:	49a5      	ldr	r1, [pc, #660]	@ (8008e84 <_dtoa_r+0x8cc>)
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	f7f7 fb71 	bl	80002d8 <__aeabi_dsub>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bfe:	f7f7 ff95 	bl	8000b2c <__aeabi_dcmplt>
 8008c02:	2800      	cmp	r0, #0
 8008c04:	f43f aef5 	beq.w	80089f2 <_dtoa_r+0x43a>
 8008c08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008c0a:	1e73      	subs	r3, r6, #1
 8008c0c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008c0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c12:	2b30      	cmp	r3, #48	@ 0x30
 8008c14:	d0f8      	beq.n	8008c08 <_dtoa_r+0x650>
 8008c16:	9f04      	ldr	r7, [sp, #16]
 8008c18:	e73e      	b.n	8008a98 <_dtoa_r+0x4e0>
 8008c1a:	4b9b      	ldr	r3, [pc, #620]	@ (8008e88 <_dtoa_r+0x8d0>)
 8008c1c:	f7f7 fd14 	bl	8000648 <__aeabi_dmul>
 8008c20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c24:	e7bc      	b.n	8008ba0 <_dtoa_r+0x5e8>
 8008c26:	d10c      	bne.n	8008c42 <_dtoa_r+0x68a>
 8008c28:	4b98      	ldr	r3, [pc, #608]	@ (8008e8c <_dtoa_r+0x8d4>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c30:	f7f7 fd0a 	bl	8000648 <__aeabi_dmul>
 8008c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c38:	f7f7 ff8c 	bl	8000b54 <__aeabi_dcmpge>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	f000 8157 	beq.w	8008ef0 <_dtoa_r+0x938>
 8008c42:	2400      	movs	r4, #0
 8008c44:	4625      	mov	r5, r4
 8008c46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c48:	43db      	mvns	r3, r3
 8008c4a:	9304      	str	r3, [sp, #16]
 8008c4c:	4656      	mov	r6, sl
 8008c4e:	2700      	movs	r7, #0
 8008c50:	4621      	mov	r1, r4
 8008c52:	4658      	mov	r0, fp
 8008c54:	f000 fbb4 	bl	80093c0 <_Bfree>
 8008c58:	2d00      	cmp	r5, #0
 8008c5a:	d0dc      	beq.n	8008c16 <_dtoa_r+0x65e>
 8008c5c:	b12f      	cbz	r7, 8008c6a <_dtoa_r+0x6b2>
 8008c5e:	42af      	cmp	r7, r5
 8008c60:	d003      	beq.n	8008c6a <_dtoa_r+0x6b2>
 8008c62:	4639      	mov	r1, r7
 8008c64:	4658      	mov	r0, fp
 8008c66:	f000 fbab 	bl	80093c0 <_Bfree>
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	4658      	mov	r0, fp
 8008c6e:	f000 fba7 	bl	80093c0 <_Bfree>
 8008c72:	e7d0      	b.n	8008c16 <_dtoa_r+0x65e>
 8008c74:	9704      	str	r7, [sp, #16]
 8008c76:	4633      	mov	r3, r6
 8008c78:	461e      	mov	r6, r3
 8008c7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c7e:	2a39      	cmp	r2, #57	@ 0x39
 8008c80:	d107      	bne.n	8008c92 <_dtoa_r+0x6da>
 8008c82:	459a      	cmp	sl, r3
 8008c84:	d1f8      	bne.n	8008c78 <_dtoa_r+0x6c0>
 8008c86:	9a04      	ldr	r2, [sp, #16]
 8008c88:	3201      	adds	r2, #1
 8008c8a:	9204      	str	r2, [sp, #16]
 8008c8c:	2230      	movs	r2, #48	@ 0x30
 8008c8e:	f88a 2000 	strb.w	r2, [sl]
 8008c92:	781a      	ldrb	r2, [r3, #0]
 8008c94:	3201      	adds	r2, #1
 8008c96:	701a      	strb	r2, [r3, #0]
 8008c98:	e7bd      	b.n	8008c16 <_dtoa_r+0x65e>
 8008c9a:	4b7b      	ldr	r3, [pc, #492]	@ (8008e88 <_dtoa_r+0x8d0>)
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f7f7 fcd3 	bl	8000648 <__aeabi_dmul>
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	4604      	mov	r4, r0
 8008ca8:	460d      	mov	r5, r1
 8008caa:	f7f7 ff35 	bl	8000b18 <__aeabi_dcmpeq>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	f43f aebb 	beq.w	8008a2a <_dtoa_r+0x472>
 8008cb4:	e6f0      	b.n	8008a98 <_dtoa_r+0x4e0>
 8008cb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008cb8:	2a00      	cmp	r2, #0
 8008cba:	f000 80db 	beq.w	8008e74 <_dtoa_r+0x8bc>
 8008cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cc0:	2a01      	cmp	r2, #1
 8008cc2:	f300 80bf 	bgt.w	8008e44 <_dtoa_r+0x88c>
 8008cc6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008cc8:	2a00      	cmp	r2, #0
 8008cca:	f000 80b7 	beq.w	8008e3c <_dtoa_r+0x884>
 8008cce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008cd2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008cd4:	4646      	mov	r6, r8
 8008cd6:	9a08      	ldr	r2, [sp, #32]
 8008cd8:	2101      	movs	r1, #1
 8008cda:	441a      	add	r2, r3
 8008cdc:	4658      	mov	r0, fp
 8008cde:	4498      	add	r8, r3
 8008ce0:	9208      	str	r2, [sp, #32]
 8008ce2:	f000 fc6b 	bl	80095bc <__i2b>
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	b15e      	cbz	r6, 8008d02 <_dtoa_r+0x74a>
 8008cea:	9b08      	ldr	r3, [sp, #32]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dd08      	ble.n	8008d02 <_dtoa_r+0x74a>
 8008cf0:	42b3      	cmp	r3, r6
 8008cf2:	9a08      	ldr	r2, [sp, #32]
 8008cf4:	bfa8      	it	ge
 8008cf6:	4633      	movge	r3, r6
 8008cf8:	eba8 0803 	sub.w	r8, r8, r3
 8008cfc:	1af6      	subs	r6, r6, r3
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	9308      	str	r3, [sp, #32]
 8008d02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d04:	b1f3      	cbz	r3, 8008d44 <_dtoa_r+0x78c>
 8008d06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f000 80b7 	beq.w	8008e7c <_dtoa_r+0x8c4>
 8008d0e:	b18c      	cbz	r4, 8008d34 <_dtoa_r+0x77c>
 8008d10:	4629      	mov	r1, r5
 8008d12:	4622      	mov	r2, r4
 8008d14:	4658      	mov	r0, fp
 8008d16:	f000 fd11 	bl	800973c <__pow5mult>
 8008d1a:	464a      	mov	r2, r9
 8008d1c:	4601      	mov	r1, r0
 8008d1e:	4605      	mov	r5, r0
 8008d20:	4658      	mov	r0, fp
 8008d22:	f000 fc61 	bl	80095e8 <__multiply>
 8008d26:	4649      	mov	r1, r9
 8008d28:	9004      	str	r0, [sp, #16]
 8008d2a:	4658      	mov	r0, fp
 8008d2c:	f000 fb48 	bl	80093c0 <_Bfree>
 8008d30:	9b04      	ldr	r3, [sp, #16]
 8008d32:	4699      	mov	r9, r3
 8008d34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d36:	1b1a      	subs	r2, r3, r4
 8008d38:	d004      	beq.n	8008d44 <_dtoa_r+0x78c>
 8008d3a:	4649      	mov	r1, r9
 8008d3c:	4658      	mov	r0, fp
 8008d3e:	f000 fcfd 	bl	800973c <__pow5mult>
 8008d42:	4681      	mov	r9, r0
 8008d44:	2101      	movs	r1, #1
 8008d46:	4658      	mov	r0, fp
 8008d48:	f000 fc38 	bl	80095bc <__i2b>
 8008d4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d4e:	4604      	mov	r4, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 81cf 	beq.w	80090f4 <_dtoa_r+0xb3c>
 8008d56:	461a      	mov	r2, r3
 8008d58:	4601      	mov	r1, r0
 8008d5a:	4658      	mov	r0, fp
 8008d5c:	f000 fcee 	bl	800973c <__pow5mult>
 8008d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	4604      	mov	r4, r0
 8008d66:	f300 8095 	bgt.w	8008e94 <_dtoa_r+0x8dc>
 8008d6a:	9b02      	ldr	r3, [sp, #8]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f040 8087 	bne.w	8008e80 <_dtoa_r+0x8c8>
 8008d72:	9b03      	ldr	r3, [sp, #12]
 8008d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f040 8089 	bne.w	8008e90 <_dtoa_r+0x8d8>
 8008d7e:	9b03      	ldr	r3, [sp, #12]
 8008d80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d84:	0d1b      	lsrs	r3, r3, #20
 8008d86:	051b      	lsls	r3, r3, #20
 8008d88:	b12b      	cbz	r3, 8008d96 <_dtoa_r+0x7de>
 8008d8a:	9b08      	ldr	r3, [sp, #32]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	9308      	str	r3, [sp, #32]
 8008d90:	f108 0801 	add.w	r8, r8, #1
 8008d94:	2301      	movs	r3, #1
 8008d96:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 81b0 	beq.w	8009100 <_dtoa_r+0xb48>
 8008da0:	6923      	ldr	r3, [r4, #16]
 8008da2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008da6:	6918      	ldr	r0, [r3, #16]
 8008da8:	f000 fbbc 	bl	8009524 <__hi0bits>
 8008dac:	f1c0 0020 	rsb	r0, r0, #32
 8008db0:	9b08      	ldr	r3, [sp, #32]
 8008db2:	4418      	add	r0, r3
 8008db4:	f010 001f 	ands.w	r0, r0, #31
 8008db8:	d077      	beq.n	8008eaa <_dtoa_r+0x8f2>
 8008dba:	f1c0 0320 	rsb	r3, r0, #32
 8008dbe:	2b04      	cmp	r3, #4
 8008dc0:	dd6b      	ble.n	8008e9a <_dtoa_r+0x8e2>
 8008dc2:	9b08      	ldr	r3, [sp, #32]
 8008dc4:	f1c0 001c 	rsb	r0, r0, #28
 8008dc8:	4403      	add	r3, r0
 8008dca:	4480      	add	r8, r0
 8008dcc:	4406      	add	r6, r0
 8008dce:	9308      	str	r3, [sp, #32]
 8008dd0:	f1b8 0f00 	cmp.w	r8, #0
 8008dd4:	dd05      	ble.n	8008de2 <_dtoa_r+0x82a>
 8008dd6:	4649      	mov	r1, r9
 8008dd8:	4642      	mov	r2, r8
 8008dda:	4658      	mov	r0, fp
 8008ddc:	f000 fd08 	bl	80097f0 <__lshift>
 8008de0:	4681      	mov	r9, r0
 8008de2:	9b08      	ldr	r3, [sp, #32]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	dd05      	ble.n	8008df4 <_dtoa_r+0x83c>
 8008de8:	4621      	mov	r1, r4
 8008dea:	461a      	mov	r2, r3
 8008dec:	4658      	mov	r0, fp
 8008dee:	f000 fcff 	bl	80097f0 <__lshift>
 8008df2:	4604      	mov	r4, r0
 8008df4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d059      	beq.n	8008eae <_dtoa_r+0x8f6>
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	4648      	mov	r0, r9
 8008dfe:	f000 fd63 	bl	80098c8 <__mcmp>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	da53      	bge.n	8008eae <_dtoa_r+0x8f6>
 8008e06:	1e7b      	subs	r3, r7, #1
 8008e08:	9304      	str	r3, [sp, #16]
 8008e0a:	4649      	mov	r1, r9
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	220a      	movs	r2, #10
 8008e10:	4658      	mov	r0, fp
 8008e12:	f000 faf7 	bl	8009404 <__multadd>
 8008e16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e18:	4681      	mov	r9, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 8172 	beq.w	8009104 <_dtoa_r+0xb4c>
 8008e20:	2300      	movs	r3, #0
 8008e22:	4629      	mov	r1, r5
 8008e24:	220a      	movs	r2, #10
 8008e26:	4658      	mov	r0, fp
 8008e28:	f000 faec 	bl	8009404 <__multadd>
 8008e2c:	9b00      	ldr	r3, [sp, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	4605      	mov	r5, r0
 8008e32:	dc67      	bgt.n	8008f04 <_dtoa_r+0x94c>
 8008e34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	dc41      	bgt.n	8008ebe <_dtoa_r+0x906>
 8008e3a:	e063      	b.n	8008f04 <_dtoa_r+0x94c>
 8008e3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008e3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008e42:	e746      	b.n	8008cd2 <_dtoa_r+0x71a>
 8008e44:	9b07      	ldr	r3, [sp, #28]
 8008e46:	1e5c      	subs	r4, r3, #1
 8008e48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e4a:	42a3      	cmp	r3, r4
 8008e4c:	bfbf      	itttt	lt
 8008e4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008e50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008e52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008e54:	1ae3      	sublt	r3, r4, r3
 8008e56:	bfb4      	ite	lt
 8008e58:	18d2      	addlt	r2, r2, r3
 8008e5a:	1b1c      	subge	r4, r3, r4
 8008e5c:	9b07      	ldr	r3, [sp, #28]
 8008e5e:	bfbc      	itt	lt
 8008e60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008e62:	2400      	movlt	r4, #0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	bfb5      	itete	lt
 8008e68:	eba8 0603 	sublt.w	r6, r8, r3
 8008e6c:	9b07      	ldrge	r3, [sp, #28]
 8008e6e:	2300      	movlt	r3, #0
 8008e70:	4646      	movge	r6, r8
 8008e72:	e730      	b.n	8008cd6 <_dtoa_r+0x71e>
 8008e74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008e76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008e78:	4646      	mov	r6, r8
 8008e7a:	e735      	b.n	8008ce8 <_dtoa_r+0x730>
 8008e7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e7e:	e75c      	b.n	8008d3a <_dtoa_r+0x782>
 8008e80:	2300      	movs	r3, #0
 8008e82:	e788      	b.n	8008d96 <_dtoa_r+0x7de>
 8008e84:	3fe00000 	.word	0x3fe00000
 8008e88:	40240000 	.word	0x40240000
 8008e8c:	40140000 	.word	0x40140000
 8008e90:	9b02      	ldr	r3, [sp, #8]
 8008e92:	e780      	b.n	8008d96 <_dtoa_r+0x7de>
 8008e94:	2300      	movs	r3, #0
 8008e96:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e98:	e782      	b.n	8008da0 <_dtoa_r+0x7e8>
 8008e9a:	d099      	beq.n	8008dd0 <_dtoa_r+0x818>
 8008e9c:	9a08      	ldr	r2, [sp, #32]
 8008e9e:	331c      	adds	r3, #28
 8008ea0:	441a      	add	r2, r3
 8008ea2:	4498      	add	r8, r3
 8008ea4:	441e      	add	r6, r3
 8008ea6:	9208      	str	r2, [sp, #32]
 8008ea8:	e792      	b.n	8008dd0 <_dtoa_r+0x818>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	e7f6      	b.n	8008e9c <_dtoa_r+0x8e4>
 8008eae:	9b07      	ldr	r3, [sp, #28]
 8008eb0:	9704      	str	r7, [sp, #16]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	dc20      	bgt.n	8008ef8 <_dtoa_r+0x940>
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	dd1e      	ble.n	8008efc <_dtoa_r+0x944>
 8008ebe:	9b00      	ldr	r3, [sp, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f47f aec0 	bne.w	8008c46 <_dtoa_r+0x68e>
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	2205      	movs	r2, #5
 8008eca:	4658      	mov	r0, fp
 8008ecc:	f000 fa9a 	bl	8009404 <__multadd>
 8008ed0:	4601      	mov	r1, r0
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	4648      	mov	r0, r9
 8008ed6:	f000 fcf7 	bl	80098c8 <__mcmp>
 8008eda:	2800      	cmp	r0, #0
 8008edc:	f77f aeb3 	ble.w	8008c46 <_dtoa_r+0x68e>
 8008ee0:	4656      	mov	r6, sl
 8008ee2:	2331      	movs	r3, #49	@ 0x31
 8008ee4:	f806 3b01 	strb.w	r3, [r6], #1
 8008ee8:	9b04      	ldr	r3, [sp, #16]
 8008eea:	3301      	adds	r3, #1
 8008eec:	9304      	str	r3, [sp, #16]
 8008eee:	e6ae      	b.n	8008c4e <_dtoa_r+0x696>
 8008ef0:	9c07      	ldr	r4, [sp, #28]
 8008ef2:	9704      	str	r7, [sp, #16]
 8008ef4:	4625      	mov	r5, r4
 8008ef6:	e7f3      	b.n	8008ee0 <_dtoa_r+0x928>
 8008ef8:	9b07      	ldr	r3, [sp, #28]
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f000 8104 	beq.w	800910c <_dtoa_r+0xb54>
 8008f04:	2e00      	cmp	r6, #0
 8008f06:	dd05      	ble.n	8008f14 <_dtoa_r+0x95c>
 8008f08:	4629      	mov	r1, r5
 8008f0a:	4632      	mov	r2, r6
 8008f0c:	4658      	mov	r0, fp
 8008f0e:	f000 fc6f 	bl	80097f0 <__lshift>
 8008f12:	4605      	mov	r5, r0
 8008f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d05a      	beq.n	8008fd0 <_dtoa_r+0xa18>
 8008f1a:	6869      	ldr	r1, [r5, #4]
 8008f1c:	4658      	mov	r0, fp
 8008f1e:	f000 fa0f 	bl	8009340 <_Balloc>
 8008f22:	4606      	mov	r6, r0
 8008f24:	b928      	cbnz	r0, 8008f32 <_dtoa_r+0x97a>
 8008f26:	4b84      	ldr	r3, [pc, #528]	@ (8009138 <_dtoa_r+0xb80>)
 8008f28:	4602      	mov	r2, r0
 8008f2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008f2e:	f7ff bb5a 	b.w	80085e6 <_dtoa_r+0x2e>
 8008f32:	692a      	ldr	r2, [r5, #16]
 8008f34:	3202      	adds	r2, #2
 8008f36:	0092      	lsls	r2, r2, #2
 8008f38:	f105 010c 	add.w	r1, r5, #12
 8008f3c:	300c      	adds	r0, #12
 8008f3e:	f001 ff75 	bl	800ae2c <memcpy>
 8008f42:	2201      	movs	r2, #1
 8008f44:	4631      	mov	r1, r6
 8008f46:	4658      	mov	r0, fp
 8008f48:	f000 fc52 	bl	80097f0 <__lshift>
 8008f4c:	f10a 0301 	add.w	r3, sl, #1
 8008f50:	9307      	str	r3, [sp, #28]
 8008f52:	9b00      	ldr	r3, [sp, #0]
 8008f54:	4453      	add	r3, sl
 8008f56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f58:	9b02      	ldr	r3, [sp, #8]
 8008f5a:	f003 0301 	and.w	r3, r3, #1
 8008f5e:	462f      	mov	r7, r5
 8008f60:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f62:	4605      	mov	r5, r0
 8008f64:	9b07      	ldr	r3, [sp, #28]
 8008f66:	4621      	mov	r1, r4
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	4648      	mov	r0, r9
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	f7ff fa99 	bl	80084a4 <quorem>
 8008f72:	4639      	mov	r1, r7
 8008f74:	9002      	str	r0, [sp, #8]
 8008f76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008f7a:	4648      	mov	r0, r9
 8008f7c:	f000 fca4 	bl	80098c8 <__mcmp>
 8008f80:	462a      	mov	r2, r5
 8008f82:	9008      	str	r0, [sp, #32]
 8008f84:	4621      	mov	r1, r4
 8008f86:	4658      	mov	r0, fp
 8008f88:	f000 fcba 	bl	8009900 <__mdiff>
 8008f8c:	68c2      	ldr	r2, [r0, #12]
 8008f8e:	4606      	mov	r6, r0
 8008f90:	bb02      	cbnz	r2, 8008fd4 <_dtoa_r+0xa1c>
 8008f92:	4601      	mov	r1, r0
 8008f94:	4648      	mov	r0, r9
 8008f96:	f000 fc97 	bl	80098c8 <__mcmp>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	4631      	mov	r1, r6
 8008f9e:	4658      	mov	r0, fp
 8008fa0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fa2:	f000 fa0d 	bl	80093c0 <_Bfree>
 8008fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fa8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008faa:	9e07      	ldr	r6, [sp, #28]
 8008fac:	ea43 0102 	orr.w	r1, r3, r2
 8008fb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fb2:	4319      	orrs	r1, r3
 8008fb4:	d110      	bne.n	8008fd8 <_dtoa_r+0xa20>
 8008fb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008fba:	d029      	beq.n	8009010 <_dtoa_r+0xa58>
 8008fbc:	9b08      	ldr	r3, [sp, #32]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	dd02      	ble.n	8008fc8 <_dtoa_r+0xa10>
 8008fc2:	9b02      	ldr	r3, [sp, #8]
 8008fc4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008fc8:	9b00      	ldr	r3, [sp, #0]
 8008fca:	f883 8000 	strb.w	r8, [r3]
 8008fce:	e63f      	b.n	8008c50 <_dtoa_r+0x698>
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	e7bb      	b.n	8008f4c <_dtoa_r+0x994>
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	e7e1      	b.n	8008f9c <_dtoa_r+0x9e4>
 8008fd8:	9b08      	ldr	r3, [sp, #32]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	db04      	blt.n	8008fe8 <_dtoa_r+0xa30>
 8008fde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008fe0:	430b      	orrs	r3, r1
 8008fe2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008fe4:	430b      	orrs	r3, r1
 8008fe6:	d120      	bne.n	800902a <_dtoa_r+0xa72>
 8008fe8:	2a00      	cmp	r2, #0
 8008fea:	dded      	ble.n	8008fc8 <_dtoa_r+0xa10>
 8008fec:	4649      	mov	r1, r9
 8008fee:	2201      	movs	r2, #1
 8008ff0:	4658      	mov	r0, fp
 8008ff2:	f000 fbfd 	bl	80097f0 <__lshift>
 8008ff6:	4621      	mov	r1, r4
 8008ff8:	4681      	mov	r9, r0
 8008ffa:	f000 fc65 	bl	80098c8 <__mcmp>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	dc03      	bgt.n	800900a <_dtoa_r+0xa52>
 8009002:	d1e1      	bne.n	8008fc8 <_dtoa_r+0xa10>
 8009004:	f018 0f01 	tst.w	r8, #1
 8009008:	d0de      	beq.n	8008fc8 <_dtoa_r+0xa10>
 800900a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800900e:	d1d8      	bne.n	8008fc2 <_dtoa_r+0xa0a>
 8009010:	9a00      	ldr	r2, [sp, #0]
 8009012:	2339      	movs	r3, #57	@ 0x39
 8009014:	7013      	strb	r3, [r2, #0]
 8009016:	4633      	mov	r3, r6
 8009018:	461e      	mov	r6, r3
 800901a:	3b01      	subs	r3, #1
 800901c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009020:	2a39      	cmp	r2, #57	@ 0x39
 8009022:	d052      	beq.n	80090ca <_dtoa_r+0xb12>
 8009024:	3201      	adds	r2, #1
 8009026:	701a      	strb	r2, [r3, #0]
 8009028:	e612      	b.n	8008c50 <_dtoa_r+0x698>
 800902a:	2a00      	cmp	r2, #0
 800902c:	dd07      	ble.n	800903e <_dtoa_r+0xa86>
 800902e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009032:	d0ed      	beq.n	8009010 <_dtoa_r+0xa58>
 8009034:	9a00      	ldr	r2, [sp, #0]
 8009036:	f108 0301 	add.w	r3, r8, #1
 800903a:	7013      	strb	r3, [r2, #0]
 800903c:	e608      	b.n	8008c50 <_dtoa_r+0x698>
 800903e:	9b07      	ldr	r3, [sp, #28]
 8009040:	9a07      	ldr	r2, [sp, #28]
 8009042:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009048:	4293      	cmp	r3, r2
 800904a:	d028      	beq.n	800909e <_dtoa_r+0xae6>
 800904c:	4649      	mov	r1, r9
 800904e:	2300      	movs	r3, #0
 8009050:	220a      	movs	r2, #10
 8009052:	4658      	mov	r0, fp
 8009054:	f000 f9d6 	bl	8009404 <__multadd>
 8009058:	42af      	cmp	r7, r5
 800905a:	4681      	mov	r9, r0
 800905c:	f04f 0300 	mov.w	r3, #0
 8009060:	f04f 020a 	mov.w	r2, #10
 8009064:	4639      	mov	r1, r7
 8009066:	4658      	mov	r0, fp
 8009068:	d107      	bne.n	800907a <_dtoa_r+0xac2>
 800906a:	f000 f9cb 	bl	8009404 <__multadd>
 800906e:	4607      	mov	r7, r0
 8009070:	4605      	mov	r5, r0
 8009072:	9b07      	ldr	r3, [sp, #28]
 8009074:	3301      	adds	r3, #1
 8009076:	9307      	str	r3, [sp, #28]
 8009078:	e774      	b.n	8008f64 <_dtoa_r+0x9ac>
 800907a:	f000 f9c3 	bl	8009404 <__multadd>
 800907e:	4629      	mov	r1, r5
 8009080:	4607      	mov	r7, r0
 8009082:	2300      	movs	r3, #0
 8009084:	220a      	movs	r2, #10
 8009086:	4658      	mov	r0, fp
 8009088:	f000 f9bc 	bl	8009404 <__multadd>
 800908c:	4605      	mov	r5, r0
 800908e:	e7f0      	b.n	8009072 <_dtoa_r+0xaba>
 8009090:	9b00      	ldr	r3, [sp, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	bfcc      	ite	gt
 8009096:	461e      	movgt	r6, r3
 8009098:	2601      	movle	r6, #1
 800909a:	4456      	add	r6, sl
 800909c:	2700      	movs	r7, #0
 800909e:	4649      	mov	r1, r9
 80090a0:	2201      	movs	r2, #1
 80090a2:	4658      	mov	r0, fp
 80090a4:	f000 fba4 	bl	80097f0 <__lshift>
 80090a8:	4621      	mov	r1, r4
 80090aa:	4681      	mov	r9, r0
 80090ac:	f000 fc0c 	bl	80098c8 <__mcmp>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	dcb0      	bgt.n	8009016 <_dtoa_r+0xa5e>
 80090b4:	d102      	bne.n	80090bc <_dtoa_r+0xb04>
 80090b6:	f018 0f01 	tst.w	r8, #1
 80090ba:	d1ac      	bne.n	8009016 <_dtoa_r+0xa5e>
 80090bc:	4633      	mov	r3, r6
 80090be:	461e      	mov	r6, r3
 80090c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090c4:	2a30      	cmp	r2, #48	@ 0x30
 80090c6:	d0fa      	beq.n	80090be <_dtoa_r+0xb06>
 80090c8:	e5c2      	b.n	8008c50 <_dtoa_r+0x698>
 80090ca:	459a      	cmp	sl, r3
 80090cc:	d1a4      	bne.n	8009018 <_dtoa_r+0xa60>
 80090ce:	9b04      	ldr	r3, [sp, #16]
 80090d0:	3301      	adds	r3, #1
 80090d2:	9304      	str	r3, [sp, #16]
 80090d4:	2331      	movs	r3, #49	@ 0x31
 80090d6:	f88a 3000 	strb.w	r3, [sl]
 80090da:	e5b9      	b.n	8008c50 <_dtoa_r+0x698>
 80090dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80090de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800913c <_dtoa_r+0xb84>
 80090e2:	b11b      	cbz	r3, 80090ec <_dtoa_r+0xb34>
 80090e4:	f10a 0308 	add.w	r3, sl, #8
 80090e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80090ea:	6013      	str	r3, [r2, #0]
 80090ec:	4650      	mov	r0, sl
 80090ee:	b019      	add	sp, #100	@ 0x64
 80090f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	f77f ae37 	ble.w	8008d6a <_dtoa_r+0x7b2>
 80090fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009100:	2001      	movs	r0, #1
 8009102:	e655      	b.n	8008db0 <_dtoa_r+0x7f8>
 8009104:	9b00      	ldr	r3, [sp, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	f77f aed6 	ble.w	8008eb8 <_dtoa_r+0x900>
 800910c:	4656      	mov	r6, sl
 800910e:	4621      	mov	r1, r4
 8009110:	4648      	mov	r0, r9
 8009112:	f7ff f9c7 	bl	80084a4 <quorem>
 8009116:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800911a:	f806 8b01 	strb.w	r8, [r6], #1
 800911e:	9b00      	ldr	r3, [sp, #0]
 8009120:	eba6 020a 	sub.w	r2, r6, sl
 8009124:	4293      	cmp	r3, r2
 8009126:	ddb3      	ble.n	8009090 <_dtoa_r+0xad8>
 8009128:	4649      	mov	r1, r9
 800912a:	2300      	movs	r3, #0
 800912c:	220a      	movs	r2, #10
 800912e:	4658      	mov	r0, fp
 8009130:	f000 f968 	bl	8009404 <__multadd>
 8009134:	4681      	mov	r9, r0
 8009136:	e7ea      	b.n	800910e <_dtoa_r+0xb56>
 8009138:	0800bcc5 	.word	0x0800bcc5
 800913c:	0800bc49 	.word	0x0800bc49

08009140 <_free_r>:
 8009140:	b538      	push	{r3, r4, r5, lr}
 8009142:	4605      	mov	r5, r0
 8009144:	2900      	cmp	r1, #0
 8009146:	d041      	beq.n	80091cc <_free_r+0x8c>
 8009148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800914c:	1f0c      	subs	r4, r1, #4
 800914e:	2b00      	cmp	r3, #0
 8009150:	bfb8      	it	lt
 8009152:	18e4      	addlt	r4, r4, r3
 8009154:	f000 f8e8 	bl	8009328 <__malloc_lock>
 8009158:	4a1d      	ldr	r2, [pc, #116]	@ (80091d0 <_free_r+0x90>)
 800915a:	6813      	ldr	r3, [r2, #0]
 800915c:	b933      	cbnz	r3, 800916c <_free_r+0x2c>
 800915e:	6063      	str	r3, [r4, #4]
 8009160:	6014      	str	r4, [r2, #0]
 8009162:	4628      	mov	r0, r5
 8009164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009168:	f000 b8e4 	b.w	8009334 <__malloc_unlock>
 800916c:	42a3      	cmp	r3, r4
 800916e:	d908      	bls.n	8009182 <_free_r+0x42>
 8009170:	6820      	ldr	r0, [r4, #0]
 8009172:	1821      	adds	r1, r4, r0
 8009174:	428b      	cmp	r3, r1
 8009176:	bf01      	itttt	eq
 8009178:	6819      	ldreq	r1, [r3, #0]
 800917a:	685b      	ldreq	r3, [r3, #4]
 800917c:	1809      	addeq	r1, r1, r0
 800917e:	6021      	streq	r1, [r4, #0]
 8009180:	e7ed      	b.n	800915e <_free_r+0x1e>
 8009182:	461a      	mov	r2, r3
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	b10b      	cbz	r3, 800918c <_free_r+0x4c>
 8009188:	42a3      	cmp	r3, r4
 800918a:	d9fa      	bls.n	8009182 <_free_r+0x42>
 800918c:	6811      	ldr	r1, [r2, #0]
 800918e:	1850      	adds	r0, r2, r1
 8009190:	42a0      	cmp	r0, r4
 8009192:	d10b      	bne.n	80091ac <_free_r+0x6c>
 8009194:	6820      	ldr	r0, [r4, #0]
 8009196:	4401      	add	r1, r0
 8009198:	1850      	adds	r0, r2, r1
 800919a:	4283      	cmp	r3, r0
 800919c:	6011      	str	r1, [r2, #0]
 800919e:	d1e0      	bne.n	8009162 <_free_r+0x22>
 80091a0:	6818      	ldr	r0, [r3, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	6053      	str	r3, [r2, #4]
 80091a6:	4408      	add	r0, r1
 80091a8:	6010      	str	r0, [r2, #0]
 80091aa:	e7da      	b.n	8009162 <_free_r+0x22>
 80091ac:	d902      	bls.n	80091b4 <_free_r+0x74>
 80091ae:	230c      	movs	r3, #12
 80091b0:	602b      	str	r3, [r5, #0]
 80091b2:	e7d6      	b.n	8009162 <_free_r+0x22>
 80091b4:	6820      	ldr	r0, [r4, #0]
 80091b6:	1821      	adds	r1, r4, r0
 80091b8:	428b      	cmp	r3, r1
 80091ba:	bf04      	itt	eq
 80091bc:	6819      	ldreq	r1, [r3, #0]
 80091be:	685b      	ldreq	r3, [r3, #4]
 80091c0:	6063      	str	r3, [r4, #4]
 80091c2:	bf04      	itt	eq
 80091c4:	1809      	addeq	r1, r1, r0
 80091c6:	6021      	streq	r1, [r4, #0]
 80091c8:	6054      	str	r4, [r2, #4]
 80091ca:	e7ca      	b.n	8009162 <_free_r+0x22>
 80091cc:	bd38      	pop	{r3, r4, r5, pc}
 80091ce:	bf00      	nop
 80091d0:	20000668 	.word	0x20000668

080091d4 <malloc>:
 80091d4:	4b02      	ldr	r3, [pc, #8]	@ (80091e0 <malloc+0xc>)
 80091d6:	4601      	mov	r1, r0
 80091d8:	6818      	ldr	r0, [r3, #0]
 80091da:	f000 b825 	b.w	8009228 <_malloc_r>
 80091de:	bf00      	nop
 80091e0:	20000018 	.word	0x20000018

080091e4 <sbrk_aligned>:
 80091e4:	b570      	push	{r4, r5, r6, lr}
 80091e6:	4e0f      	ldr	r6, [pc, #60]	@ (8009224 <sbrk_aligned+0x40>)
 80091e8:	460c      	mov	r4, r1
 80091ea:	6831      	ldr	r1, [r6, #0]
 80091ec:	4605      	mov	r5, r0
 80091ee:	b911      	cbnz	r1, 80091f6 <sbrk_aligned+0x12>
 80091f0:	f001 fe0c 	bl	800ae0c <_sbrk_r>
 80091f4:	6030      	str	r0, [r6, #0]
 80091f6:	4621      	mov	r1, r4
 80091f8:	4628      	mov	r0, r5
 80091fa:	f001 fe07 	bl	800ae0c <_sbrk_r>
 80091fe:	1c43      	adds	r3, r0, #1
 8009200:	d103      	bne.n	800920a <sbrk_aligned+0x26>
 8009202:	f04f 34ff 	mov.w	r4, #4294967295
 8009206:	4620      	mov	r0, r4
 8009208:	bd70      	pop	{r4, r5, r6, pc}
 800920a:	1cc4      	adds	r4, r0, #3
 800920c:	f024 0403 	bic.w	r4, r4, #3
 8009210:	42a0      	cmp	r0, r4
 8009212:	d0f8      	beq.n	8009206 <sbrk_aligned+0x22>
 8009214:	1a21      	subs	r1, r4, r0
 8009216:	4628      	mov	r0, r5
 8009218:	f001 fdf8 	bl	800ae0c <_sbrk_r>
 800921c:	3001      	adds	r0, #1
 800921e:	d1f2      	bne.n	8009206 <sbrk_aligned+0x22>
 8009220:	e7ef      	b.n	8009202 <sbrk_aligned+0x1e>
 8009222:	bf00      	nop
 8009224:	20000664 	.word	0x20000664

08009228 <_malloc_r>:
 8009228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800922c:	1ccd      	adds	r5, r1, #3
 800922e:	f025 0503 	bic.w	r5, r5, #3
 8009232:	3508      	adds	r5, #8
 8009234:	2d0c      	cmp	r5, #12
 8009236:	bf38      	it	cc
 8009238:	250c      	movcc	r5, #12
 800923a:	2d00      	cmp	r5, #0
 800923c:	4606      	mov	r6, r0
 800923e:	db01      	blt.n	8009244 <_malloc_r+0x1c>
 8009240:	42a9      	cmp	r1, r5
 8009242:	d904      	bls.n	800924e <_malloc_r+0x26>
 8009244:	230c      	movs	r3, #12
 8009246:	6033      	str	r3, [r6, #0]
 8009248:	2000      	movs	r0, #0
 800924a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800924e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009324 <_malloc_r+0xfc>
 8009252:	f000 f869 	bl	8009328 <__malloc_lock>
 8009256:	f8d8 3000 	ldr.w	r3, [r8]
 800925a:	461c      	mov	r4, r3
 800925c:	bb44      	cbnz	r4, 80092b0 <_malloc_r+0x88>
 800925e:	4629      	mov	r1, r5
 8009260:	4630      	mov	r0, r6
 8009262:	f7ff ffbf 	bl	80091e4 <sbrk_aligned>
 8009266:	1c43      	adds	r3, r0, #1
 8009268:	4604      	mov	r4, r0
 800926a:	d158      	bne.n	800931e <_malloc_r+0xf6>
 800926c:	f8d8 4000 	ldr.w	r4, [r8]
 8009270:	4627      	mov	r7, r4
 8009272:	2f00      	cmp	r7, #0
 8009274:	d143      	bne.n	80092fe <_malloc_r+0xd6>
 8009276:	2c00      	cmp	r4, #0
 8009278:	d04b      	beq.n	8009312 <_malloc_r+0xea>
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	4639      	mov	r1, r7
 800927e:	4630      	mov	r0, r6
 8009280:	eb04 0903 	add.w	r9, r4, r3
 8009284:	f001 fdc2 	bl	800ae0c <_sbrk_r>
 8009288:	4581      	cmp	r9, r0
 800928a:	d142      	bne.n	8009312 <_malloc_r+0xea>
 800928c:	6821      	ldr	r1, [r4, #0]
 800928e:	1a6d      	subs	r5, r5, r1
 8009290:	4629      	mov	r1, r5
 8009292:	4630      	mov	r0, r6
 8009294:	f7ff ffa6 	bl	80091e4 <sbrk_aligned>
 8009298:	3001      	adds	r0, #1
 800929a:	d03a      	beq.n	8009312 <_malloc_r+0xea>
 800929c:	6823      	ldr	r3, [r4, #0]
 800929e:	442b      	add	r3, r5
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	f8d8 3000 	ldr.w	r3, [r8]
 80092a6:	685a      	ldr	r2, [r3, #4]
 80092a8:	bb62      	cbnz	r2, 8009304 <_malloc_r+0xdc>
 80092aa:	f8c8 7000 	str.w	r7, [r8]
 80092ae:	e00f      	b.n	80092d0 <_malloc_r+0xa8>
 80092b0:	6822      	ldr	r2, [r4, #0]
 80092b2:	1b52      	subs	r2, r2, r5
 80092b4:	d420      	bmi.n	80092f8 <_malloc_r+0xd0>
 80092b6:	2a0b      	cmp	r2, #11
 80092b8:	d917      	bls.n	80092ea <_malloc_r+0xc2>
 80092ba:	1961      	adds	r1, r4, r5
 80092bc:	42a3      	cmp	r3, r4
 80092be:	6025      	str	r5, [r4, #0]
 80092c0:	bf18      	it	ne
 80092c2:	6059      	strne	r1, [r3, #4]
 80092c4:	6863      	ldr	r3, [r4, #4]
 80092c6:	bf08      	it	eq
 80092c8:	f8c8 1000 	streq.w	r1, [r8]
 80092cc:	5162      	str	r2, [r4, r5]
 80092ce:	604b      	str	r3, [r1, #4]
 80092d0:	4630      	mov	r0, r6
 80092d2:	f000 f82f 	bl	8009334 <__malloc_unlock>
 80092d6:	f104 000b 	add.w	r0, r4, #11
 80092da:	1d23      	adds	r3, r4, #4
 80092dc:	f020 0007 	bic.w	r0, r0, #7
 80092e0:	1ac2      	subs	r2, r0, r3
 80092e2:	bf1c      	itt	ne
 80092e4:	1a1b      	subne	r3, r3, r0
 80092e6:	50a3      	strne	r3, [r4, r2]
 80092e8:	e7af      	b.n	800924a <_malloc_r+0x22>
 80092ea:	6862      	ldr	r2, [r4, #4]
 80092ec:	42a3      	cmp	r3, r4
 80092ee:	bf0c      	ite	eq
 80092f0:	f8c8 2000 	streq.w	r2, [r8]
 80092f4:	605a      	strne	r2, [r3, #4]
 80092f6:	e7eb      	b.n	80092d0 <_malloc_r+0xa8>
 80092f8:	4623      	mov	r3, r4
 80092fa:	6864      	ldr	r4, [r4, #4]
 80092fc:	e7ae      	b.n	800925c <_malloc_r+0x34>
 80092fe:	463c      	mov	r4, r7
 8009300:	687f      	ldr	r7, [r7, #4]
 8009302:	e7b6      	b.n	8009272 <_malloc_r+0x4a>
 8009304:	461a      	mov	r2, r3
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	42a3      	cmp	r3, r4
 800930a:	d1fb      	bne.n	8009304 <_malloc_r+0xdc>
 800930c:	2300      	movs	r3, #0
 800930e:	6053      	str	r3, [r2, #4]
 8009310:	e7de      	b.n	80092d0 <_malloc_r+0xa8>
 8009312:	230c      	movs	r3, #12
 8009314:	6033      	str	r3, [r6, #0]
 8009316:	4630      	mov	r0, r6
 8009318:	f000 f80c 	bl	8009334 <__malloc_unlock>
 800931c:	e794      	b.n	8009248 <_malloc_r+0x20>
 800931e:	6005      	str	r5, [r0, #0]
 8009320:	e7d6      	b.n	80092d0 <_malloc_r+0xa8>
 8009322:	bf00      	nop
 8009324:	20000668 	.word	0x20000668

08009328 <__malloc_lock>:
 8009328:	4801      	ldr	r0, [pc, #4]	@ (8009330 <__malloc_lock+0x8>)
 800932a:	f7ff b8b2 	b.w	8008492 <__retarget_lock_acquire_recursive>
 800932e:	bf00      	nop
 8009330:	20000660 	.word	0x20000660

08009334 <__malloc_unlock>:
 8009334:	4801      	ldr	r0, [pc, #4]	@ (800933c <__malloc_unlock+0x8>)
 8009336:	f7ff b8ad 	b.w	8008494 <__retarget_lock_release_recursive>
 800933a:	bf00      	nop
 800933c:	20000660 	.word	0x20000660

08009340 <_Balloc>:
 8009340:	b570      	push	{r4, r5, r6, lr}
 8009342:	69c6      	ldr	r6, [r0, #28]
 8009344:	4604      	mov	r4, r0
 8009346:	460d      	mov	r5, r1
 8009348:	b976      	cbnz	r6, 8009368 <_Balloc+0x28>
 800934a:	2010      	movs	r0, #16
 800934c:	f7ff ff42 	bl	80091d4 <malloc>
 8009350:	4602      	mov	r2, r0
 8009352:	61e0      	str	r0, [r4, #28]
 8009354:	b920      	cbnz	r0, 8009360 <_Balloc+0x20>
 8009356:	4b18      	ldr	r3, [pc, #96]	@ (80093b8 <_Balloc+0x78>)
 8009358:	4818      	ldr	r0, [pc, #96]	@ (80093bc <_Balloc+0x7c>)
 800935a:	216b      	movs	r1, #107	@ 0x6b
 800935c:	f001 fd7c 	bl	800ae58 <__assert_func>
 8009360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009364:	6006      	str	r6, [r0, #0]
 8009366:	60c6      	str	r6, [r0, #12]
 8009368:	69e6      	ldr	r6, [r4, #28]
 800936a:	68f3      	ldr	r3, [r6, #12]
 800936c:	b183      	cbz	r3, 8009390 <_Balloc+0x50>
 800936e:	69e3      	ldr	r3, [r4, #28]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009376:	b9b8      	cbnz	r0, 80093a8 <_Balloc+0x68>
 8009378:	2101      	movs	r1, #1
 800937a:	fa01 f605 	lsl.w	r6, r1, r5
 800937e:	1d72      	adds	r2, r6, #5
 8009380:	0092      	lsls	r2, r2, #2
 8009382:	4620      	mov	r0, r4
 8009384:	f001 fd86 	bl	800ae94 <_calloc_r>
 8009388:	b160      	cbz	r0, 80093a4 <_Balloc+0x64>
 800938a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800938e:	e00e      	b.n	80093ae <_Balloc+0x6e>
 8009390:	2221      	movs	r2, #33	@ 0x21
 8009392:	2104      	movs	r1, #4
 8009394:	4620      	mov	r0, r4
 8009396:	f001 fd7d 	bl	800ae94 <_calloc_r>
 800939a:	69e3      	ldr	r3, [r4, #28]
 800939c:	60f0      	str	r0, [r6, #12]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e4      	bne.n	800936e <_Balloc+0x2e>
 80093a4:	2000      	movs	r0, #0
 80093a6:	bd70      	pop	{r4, r5, r6, pc}
 80093a8:	6802      	ldr	r2, [r0, #0]
 80093aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093ae:	2300      	movs	r3, #0
 80093b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093b4:	e7f7      	b.n	80093a6 <_Balloc+0x66>
 80093b6:	bf00      	nop
 80093b8:	0800bc56 	.word	0x0800bc56
 80093bc:	0800bcd6 	.word	0x0800bcd6

080093c0 <_Bfree>:
 80093c0:	b570      	push	{r4, r5, r6, lr}
 80093c2:	69c6      	ldr	r6, [r0, #28]
 80093c4:	4605      	mov	r5, r0
 80093c6:	460c      	mov	r4, r1
 80093c8:	b976      	cbnz	r6, 80093e8 <_Bfree+0x28>
 80093ca:	2010      	movs	r0, #16
 80093cc:	f7ff ff02 	bl	80091d4 <malloc>
 80093d0:	4602      	mov	r2, r0
 80093d2:	61e8      	str	r0, [r5, #28]
 80093d4:	b920      	cbnz	r0, 80093e0 <_Bfree+0x20>
 80093d6:	4b09      	ldr	r3, [pc, #36]	@ (80093fc <_Bfree+0x3c>)
 80093d8:	4809      	ldr	r0, [pc, #36]	@ (8009400 <_Bfree+0x40>)
 80093da:	218f      	movs	r1, #143	@ 0x8f
 80093dc:	f001 fd3c 	bl	800ae58 <__assert_func>
 80093e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093e4:	6006      	str	r6, [r0, #0]
 80093e6:	60c6      	str	r6, [r0, #12]
 80093e8:	b13c      	cbz	r4, 80093fa <_Bfree+0x3a>
 80093ea:	69eb      	ldr	r3, [r5, #28]
 80093ec:	6862      	ldr	r2, [r4, #4]
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093f4:	6021      	str	r1, [r4, #0]
 80093f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80093fa:	bd70      	pop	{r4, r5, r6, pc}
 80093fc:	0800bc56 	.word	0x0800bc56
 8009400:	0800bcd6 	.word	0x0800bcd6

08009404 <__multadd>:
 8009404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009408:	690d      	ldr	r5, [r1, #16]
 800940a:	4607      	mov	r7, r0
 800940c:	460c      	mov	r4, r1
 800940e:	461e      	mov	r6, r3
 8009410:	f101 0c14 	add.w	ip, r1, #20
 8009414:	2000      	movs	r0, #0
 8009416:	f8dc 3000 	ldr.w	r3, [ip]
 800941a:	b299      	uxth	r1, r3
 800941c:	fb02 6101 	mla	r1, r2, r1, r6
 8009420:	0c1e      	lsrs	r6, r3, #16
 8009422:	0c0b      	lsrs	r3, r1, #16
 8009424:	fb02 3306 	mla	r3, r2, r6, r3
 8009428:	b289      	uxth	r1, r1
 800942a:	3001      	adds	r0, #1
 800942c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009430:	4285      	cmp	r5, r0
 8009432:	f84c 1b04 	str.w	r1, [ip], #4
 8009436:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800943a:	dcec      	bgt.n	8009416 <__multadd+0x12>
 800943c:	b30e      	cbz	r6, 8009482 <__multadd+0x7e>
 800943e:	68a3      	ldr	r3, [r4, #8]
 8009440:	42ab      	cmp	r3, r5
 8009442:	dc19      	bgt.n	8009478 <__multadd+0x74>
 8009444:	6861      	ldr	r1, [r4, #4]
 8009446:	4638      	mov	r0, r7
 8009448:	3101      	adds	r1, #1
 800944a:	f7ff ff79 	bl	8009340 <_Balloc>
 800944e:	4680      	mov	r8, r0
 8009450:	b928      	cbnz	r0, 800945e <__multadd+0x5a>
 8009452:	4602      	mov	r2, r0
 8009454:	4b0c      	ldr	r3, [pc, #48]	@ (8009488 <__multadd+0x84>)
 8009456:	480d      	ldr	r0, [pc, #52]	@ (800948c <__multadd+0x88>)
 8009458:	21ba      	movs	r1, #186	@ 0xba
 800945a:	f001 fcfd 	bl	800ae58 <__assert_func>
 800945e:	6922      	ldr	r2, [r4, #16]
 8009460:	3202      	adds	r2, #2
 8009462:	f104 010c 	add.w	r1, r4, #12
 8009466:	0092      	lsls	r2, r2, #2
 8009468:	300c      	adds	r0, #12
 800946a:	f001 fcdf 	bl	800ae2c <memcpy>
 800946e:	4621      	mov	r1, r4
 8009470:	4638      	mov	r0, r7
 8009472:	f7ff ffa5 	bl	80093c0 <_Bfree>
 8009476:	4644      	mov	r4, r8
 8009478:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800947c:	3501      	adds	r5, #1
 800947e:	615e      	str	r6, [r3, #20]
 8009480:	6125      	str	r5, [r4, #16]
 8009482:	4620      	mov	r0, r4
 8009484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009488:	0800bcc5 	.word	0x0800bcc5
 800948c:	0800bcd6 	.word	0x0800bcd6

08009490 <__s2b>:
 8009490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009494:	460c      	mov	r4, r1
 8009496:	4615      	mov	r5, r2
 8009498:	461f      	mov	r7, r3
 800949a:	2209      	movs	r2, #9
 800949c:	3308      	adds	r3, #8
 800949e:	4606      	mov	r6, r0
 80094a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80094a4:	2100      	movs	r1, #0
 80094a6:	2201      	movs	r2, #1
 80094a8:	429a      	cmp	r2, r3
 80094aa:	db09      	blt.n	80094c0 <__s2b+0x30>
 80094ac:	4630      	mov	r0, r6
 80094ae:	f7ff ff47 	bl	8009340 <_Balloc>
 80094b2:	b940      	cbnz	r0, 80094c6 <__s2b+0x36>
 80094b4:	4602      	mov	r2, r0
 80094b6:	4b19      	ldr	r3, [pc, #100]	@ (800951c <__s2b+0x8c>)
 80094b8:	4819      	ldr	r0, [pc, #100]	@ (8009520 <__s2b+0x90>)
 80094ba:	21d3      	movs	r1, #211	@ 0xd3
 80094bc:	f001 fccc 	bl	800ae58 <__assert_func>
 80094c0:	0052      	lsls	r2, r2, #1
 80094c2:	3101      	adds	r1, #1
 80094c4:	e7f0      	b.n	80094a8 <__s2b+0x18>
 80094c6:	9b08      	ldr	r3, [sp, #32]
 80094c8:	6143      	str	r3, [r0, #20]
 80094ca:	2d09      	cmp	r5, #9
 80094cc:	f04f 0301 	mov.w	r3, #1
 80094d0:	6103      	str	r3, [r0, #16]
 80094d2:	dd16      	ble.n	8009502 <__s2b+0x72>
 80094d4:	f104 0909 	add.w	r9, r4, #9
 80094d8:	46c8      	mov	r8, r9
 80094da:	442c      	add	r4, r5
 80094dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80094e0:	4601      	mov	r1, r0
 80094e2:	3b30      	subs	r3, #48	@ 0x30
 80094e4:	220a      	movs	r2, #10
 80094e6:	4630      	mov	r0, r6
 80094e8:	f7ff ff8c 	bl	8009404 <__multadd>
 80094ec:	45a0      	cmp	r8, r4
 80094ee:	d1f5      	bne.n	80094dc <__s2b+0x4c>
 80094f0:	f1a5 0408 	sub.w	r4, r5, #8
 80094f4:	444c      	add	r4, r9
 80094f6:	1b2d      	subs	r5, r5, r4
 80094f8:	1963      	adds	r3, r4, r5
 80094fa:	42bb      	cmp	r3, r7
 80094fc:	db04      	blt.n	8009508 <__s2b+0x78>
 80094fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009502:	340a      	adds	r4, #10
 8009504:	2509      	movs	r5, #9
 8009506:	e7f6      	b.n	80094f6 <__s2b+0x66>
 8009508:	f814 3b01 	ldrb.w	r3, [r4], #1
 800950c:	4601      	mov	r1, r0
 800950e:	3b30      	subs	r3, #48	@ 0x30
 8009510:	220a      	movs	r2, #10
 8009512:	4630      	mov	r0, r6
 8009514:	f7ff ff76 	bl	8009404 <__multadd>
 8009518:	e7ee      	b.n	80094f8 <__s2b+0x68>
 800951a:	bf00      	nop
 800951c:	0800bcc5 	.word	0x0800bcc5
 8009520:	0800bcd6 	.word	0x0800bcd6

08009524 <__hi0bits>:
 8009524:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009528:	4603      	mov	r3, r0
 800952a:	bf36      	itet	cc
 800952c:	0403      	lslcc	r3, r0, #16
 800952e:	2000      	movcs	r0, #0
 8009530:	2010      	movcc	r0, #16
 8009532:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009536:	bf3c      	itt	cc
 8009538:	021b      	lslcc	r3, r3, #8
 800953a:	3008      	addcc	r0, #8
 800953c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009540:	bf3c      	itt	cc
 8009542:	011b      	lslcc	r3, r3, #4
 8009544:	3004      	addcc	r0, #4
 8009546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800954a:	bf3c      	itt	cc
 800954c:	009b      	lslcc	r3, r3, #2
 800954e:	3002      	addcc	r0, #2
 8009550:	2b00      	cmp	r3, #0
 8009552:	db05      	blt.n	8009560 <__hi0bits+0x3c>
 8009554:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009558:	f100 0001 	add.w	r0, r0, #1
 800955c:	bf08      	it	eq
 800955e:	2020      	moveq	r0, #32
 8009560:	4770      	bx	lr

08009562 <__lo0bits>:
 8009562:	6803      	ldr	r3, [r0, #0]
 8009564:	4602      	mov	r2, r0
 8009566:	f013 0007 	ands.w	r0, r3, #7
 800956a:	d00b      	beq.n	8009584 <__lo0bits+0x22>
 800956c:	07d9      	lsls	r1, r3, #31
 800956e:	d421      	bmi.n	80095b4 <__lo0bits+0x52>
 8009570:	0798      	lsls	r0, r3, #30
 8009572:	bf49      	itett	mi
 8009574:	085b      	lsrmi	r3, r3, #1
 8009576:	089b      	lsrpl	r3, r3, #2
 8009578:	2001      	movmi	r0, #1
 800957a:	6013      	strmi	r3, [r2, #0]
 800957c:	bf5c      	itt	pl
 800957e:	6013      	strpl	r3, [r2, #0]
 8009580:	2002      	movpl	r0, #2
 8009582:	4770      	bx	lr
 8009584:	b299      	uxth	r1, r3
 8009586:	b909      	cbnz	r1, 800958c <__lo0bits+0x2a>
 8009588:	0c1b      	lsrs	r3, r3, #16
 800958a:	2010      	movs	r0, #16
 800958c:	b2d9      	uxtb	r1, r3
 800958e:	b909      	cbnz	r1, 8009594 <__lo0bits+0x32>
 8009590:	3008      	adds	r0, #8
 8009592:	0a1b      	lsrs	r3, r3, #8
 8009594:	0719      	lsls	r1, r3, #28
 8009596:	bf04      	itt	eq
 8009598:	091b      	lsreq	r3, r3, #4
 800959a:	3004      	addeq	r0, #4
 800959c:	0799      	lsls	r1, r3, #30
 800959e:	bf04      	itt	eq
 80095a0:	089b      	lsreq	r3, r3, #2
 80095a2:	3002      	addeq	r0, #2
 80095a4:	07d9      	lsls	r1, r3, #31
 80095a6:	d403      	bmi.n	80095b0 <__lo0bits+0x4e>
 80095a8:	085b      	lsrs	r3, r3, #1
 80095aa:	f100 0001 	add.w	r0, r0, #1
 80095ae:	d003      	beq.n	80095b8 <__lo0bits+0x56>
 80095b0:	6013      	str	r3, [r2, #0]
 80095b2:	4770      	bx	lr
 80095b4:	2000      	movs	r0, #0
 80095b6:	4770      	bx	lr
 80095b8:	2020      	movs	r0, #32
 80095ba:	4770      	bx	lr

080095bc <__i2b>:
 80095bc:	b510      	push	{r4, lr}
 80095be:	460c      	mov	r4, r1
 80095c0:	2101      	movs	r1, #1
 80095c2:	f7ff febd 	bl	8009340 <_Balloc>
 80095c6:	4602      	mov	r2, r0
 80095c8:	b928      	cbnz	r0, 80095d6 <__i2b+0x1a>
 80095ca:	4b05      	ldr	r3, [pc, #20]	@ (80095e0 <__i2b+0x24>)
 80095cc:	4805      	ldr	r0, [pc, #20]	@ (80095e4 <__i2b+0x28>)
 80095ce:	f240 1145 	movw	r1, #325	@ 0x145
 80095d2:	f001 fc41 	bl	800ae58 <__assert_func>
 80095d6:	2301      	movs	r3, #1
 80095d8:	6144      	str	r4, [r0, #20]
 80095da:	6103      	str	r3, [r0, #16]
 80095dc:	bd10      	pop	{r4, pc}
 80095de:	bf00      	nop
 80095e0:	0800bcc5 	.word	0x0800bcc5
 80095e4:	0800bcd6 	.word	0x0800bcd6

080095e8 <__multiply>:
 80095e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ec:	4614      	mov	r4, r2
 80095ee:	690a      	ldr	r2, [r1, #16]
 80095f0:	6923      	ldr	r3, [r4, #16]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	bfa8      	it	ge
 80095f6:	4623      	movge	r3, r4
 80095f8:	460f      	mov	r7, r1
 80095fa:	bfa4      	itt	ge
 80095fc:	460c      	movge	r4, r1
 80095fe:	461f      	movge	r7, r3
 8009600:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009604:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009608:	68a3      	ldr	r3, [r4, #8]
 800960a:	6861      	ldr	r1, [r4, #4]
 800960c:	eb0a 0609 	add.w	r6, sl, r9
 8009610:	42b3      	cmp	r3, r6
 8009612:	b085      	sub	sp, #20
 8009614:	bfb8      	it	lt
 8009616:	3101      	addlt	r1, #1
 8009618:	f7ff fe92 	bl	8009340 <_Balloc>
 800961c:	b930      	cbnz	r0, 800962c <__multiply+0x44>
 800961e:	4602      	mov	r2, r0
 8009620:	4b44      	ldr	r3, [pc, #272]	@ (8009734 <__multiply+0x14c>)
 8009622:	4845      	ldr	r0, [pc, #276]	@ (8009738 <__multiply+0x150>)
 8009624:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009628:	f001 fc16 	bl	800ae58 <__assert_func>
 800962c:	f100 0514 	add.w	r5, r0, #20
 8009630:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009634:	462b      	mov	r3, r5
 8009636:	2200      	movs	r2, #0
 8009638:	4543      	cmp	r3, r8
 800963a:	d321      	bcc.n	8009680 <__multiply+0x98>
 800963c:	f107 0114 	add.w	r1, r7, #20
 8009640:	f104 0214 	add.w	r2, r4, #20
 8009644:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009648:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800964c:	9302      	str	r3, [sp, #8]
 800964e:	1b13      	subs	r3, r2, r4
 8009650:	3b15      	subs	r3, #21
 8009652:	f023 0303 	bic.w	r3, r3, #3
 8009656:	3304      	adds	r3, #4
 8009658:	f104 0715 	add.w	r7, r4, #21
 800965c:	42ba      	cmp	r2, r7
 800965e:	bf38      	it	cc
 8009660:	2304      	movcc	r3, #4
 8009662:	9301      	str	r3, [sp, #4]
 8009664:	9b02      	ldr	r3, [sp, #8]
 8009666:	9103      	str	r1, [sp, #12]
 8009668:	428b      	cmp	r3, r1
 800966a:	d80c      	bhi.n	8009686 <__multiply+0x9e>
 800966c:	2e00      	cmp	r6, #0
 800966e:	dd03      	ble.n	8009678 <__multiply+0x90>
 8009670:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009674:	2b00      	cmp	r3, #0
 8009676:	d05b      	beq.n	8009730 <__multiply+0x148>
 8009678:	6106      	str	r6, [r0, #16]
 800967a:	b005      	add	sp, #20
 800967c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009680:	f843 2b04 	str.w	r2, [r3], #4
 8009684:	e7d8      	b.n	8009638 <__multiply+0x50>
 8009686:	f8b1 a000 	ldrh.w	sl, [r1]
 800968a:	f1ba 0f00 	cmp.w	sl, #0
 800968e:	d024      	beq.n	80096da <__multiply+0xf2>
 8009690:	f104 0e14 	add.w	lr, r4, #20
 8009694:	46a9      	mov	r9, r5
 8009696:	f04f 0c00 	mov.w	ip, #0
 800969a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800969e:	f8d9 3000 	ldr.w	r3, [r9]
 80096a2:	fa1f fb87 	uxth.w	fp, r7
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	fb0a 330b 	mla	r3, sl, fp, r3
 80096ac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80096b0:	f8d9 7000 	ldr.w	r7, [r9]
 80096b4:	4463      	add	r3, ip
 80096b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80096ba:	fb0a c70b 	mla	r7, sl, fp, ip
 80096be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80096c8:	4572      	cmp	r2, lr
 80096ca:	f849 3b04 	str.w	r3, [r9], #4
 80096ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80096d2:	d8e2      	bhi.n	800969a <__multiply+0xb2>
 80096d4:	9b01      	ldr	r3, [sp, #4]
 80096d6:	f845 c003 	str.w	ip, [r5, r3]
 80096da:	9b03      	ldr	r3, [sp, #12]
 80096dc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80096e0:	3104      	adds	r1, #4
 80096e2:	f1b9 0f00 	cmp.w	r9, #0
 80096e6:	d021      	beq.n	800972c <__multiply+0x144>
 80096e8:	682b      	ldr	r3, [r5, #0]
 80096ea:	f104 0c14 	add.w	ip, r4, #20
 80096ee:	46ae      	mov	lr, r5
 80096f0:	f04f 0a00 	mov.w	sl, #0
 80096f4:	f8bc b000 	ldrh.w	fp, [ip]
 80096f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80096fc:	fb09 770b 	mla	r7, r9, fp, r7
 8009700:	4457      	add	r7, sl
 8009702:	b29b      	uxth	r3, r3
 8009704:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009708:	f84e 3b04 	str.w	r3, [lr], #4
 800970c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009710:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009714:	f8be 3000 	ldrh.w	r3, [lr]
 8009718:	fb09 330a 	mla	r3, r9, sl, r3
 800971c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009720:	4562      	cmp	r2, ip
 8009722:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009726:	d8e5      	bhi.n	80096f4 <__multiply+0x10c>
 8009728:	9f01      	ldr	r7, [sp, #4]
 800972a:	51eb      	str	r3, [r5, r7]
 800972c:	3504      	adds	r5, #4
 800972e:	e799      	b.n	8009664 <__multiply+0x7c>
 8009730:	3e01      	subs	r6, #1
 8009732:	e79b      	b.n	800966c <__multiply+0x84>
 8009734:	0800bcc5 	.word	0x0800bcc5
 8009738:	0800bcd6 	.word	0x0800bcd6

0800973c <__pow5mult>:
 800973c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009740:	4615      	mov	r5, r2
 8009742:	f012 0203 	ands.w	r2, r2, #3
 8009746:	4607      	mov	r7, r0
 8009748:	460e      	mov	r6, r1
 800974a:	d007      	beq.n	800975c <__pow5mult+0x20>
 800974c:	4c25      	ldr	r4, [pc, #148]	@ (80097e4 <__pow5mult+0xa8>)
 800974e:	3a01      	subs	r2, #1
 8009750:	2300      	movs	r3, #0
 8009752:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009756:	f7ff fe55 	bl	8009404 <__multadd>
 800975a:	4606      	mov	r6, r0
 800975c:	10ad      	asrs	r5, r5, #2
 800975e:	d03d      	beq.n	80097dc <__pow5mult+0xa0>
 8009760:	69fc      	ldr	r4, [r7, #28]
 8009762:	b97c      	cbnz	r4, 8009784 <__pow5mult+0x48>
 8009764:	2010      	movs	r0, #16
 8009766:	f7ff fd35 	bl	80091d4 <malloc>
 800976a:	4602      	mov	r2, r0
 800976c:	61f8      	str	r0, [r7, #28]
 800976e:	b928      	cbnz	r0, 800977c <__pow5mult+0x40>
 8009770:	4b1d      	ldr	r3, [pc, #116]	@ (80097e8 <__pow5mult+0xac>)
 8009772:	481e      	ldr	r0, [pc, #120]	@ (80097ec <__pow5mult+0xb0>)
 8009774:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009778:	f001 fb6e 	bl	800ae58 <__assert_func>
 800977c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009780:	6004      	str	r4, [r0, #0]
 8009782:	60c4      	str	r4, [r0, #12]
 8009784:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009788:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800978c:	b94c      	cbnz	r4, 80097a2 <__pow5mult+0x66>
 800978e:	f240 2171 	movw	r1, #625	@ 0x271
 8009792:	4638      	mov	r0, r7
 8009794:	f7ff ff12 	bl	80095bc <__i2b>
 8009798:	2300      	movs	r3, #0
 800979a:	f8c8 0008 	str.w	r0, [r8, #8]
 800979e:	4604      	mov	r4, r0
 80097a0:	6003      	str	r3, [r0, #0]
 80097a2:	f04f 0900 	mov.w	r9, #0
 80097a6:	07eb      	lsls	r3, r5, #31
 80097a8:	d50a      	bpl.n	80097c0 <__pow5mult+0x84>
 80097aa:	4631      	mov	r1, r6
 80097ac:	4622      	mov	r2, r4
 80097ae:	4638      	mov	r0, r7
 80097b0:	f7ff ff1a 	bl	80095e8 <__multiply>
 80097b4:	4631      	mov	r1, r6
 80097b6:	4680      	mov	r8, r0
 80097b8:	4638      	mov	r0, r7
 80097ba:	f7ff fe01 	bl	80093c0 <_Bfree>
 80097be:	4646      	mov	r6, r8
 80097c0:	106d      	asrs	r5, r5, #1
 80097c2:	d00b      	beq.n	80097dc <__pow5mult+0xa0>
 80097c4:	6820      	ldr	r0, [r4, #0]
 80097c6:	b938      	cbnz	r0, 80097d8 <__pow5mult+0x9c>
 80097c8:	4622      	mov	r2, r4
 80097ca:	4621      	mov	r1, r4
 80097cc:	4638      	mov	r0, r7
 80097ce:	f7ff ff0b 	bl	80095e8 <__multiply>
 80097d2:	6020      	str	r0, [r4, #0]
 80097d4:	f8c0 9000 	str.w	r9, [r0]
 80097d8:	4604      	mov	r4, r0
 80097da:	e7e4      	b.n	80097a6 <__pow5mult+0x6a>
 80097dc:	4630      	mov	r0, r6
 80097de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097e2:	bf00      	nop
 80097e4:	0800bd30 	.word	0x0800bd30
 80097e8:	0800bc56 	.word	0x0800bc56
 80097ec:	0800bcd6 	.word	0x0800bcd6

080097f0 <__lshift>:
 80097f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097f4:	460c      	mov	r4, r1
 80097f6:	6849      	ldr	r1, [r1, #4]
 80097f8:	6923      	ldr	r3, [r4, #16]
 80097fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097fe:	68a3      	ldr	r3, [r4, #8]
 8009800:	4607      	mov	r7, r0
 8009802:	4691      	mov	r9, r2
 8009804:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009808:	f108 0601 	add.w	r6, r8, #1
 800980c:	42b3      	cmp	r3, r6
 800980e:	db0b      	blt.n	8009828 <__lshift+0x38>
 8009810:	4638      	mov	r0, r7
 8009812:	f7ff fd95 	bl	8009340 <_Balloc>
 8009816:	4605      	mov	r5, r0
 8009818:	b948      	cbnz	r0, 800982e <__lshift+0x3e>
 800981a:	4602      	mov	r2, r0
 800981c:	4b28      	ldr	r3, [pc, #160]	@ (80098c0 <__lshift+0xd0>)
 800981e:	4829      	ldr	r0, [pc, #164]	@ (80098c4 <__lshift+0xd4>)
 8009820:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009824:	f001 fb18 	bl	800ae58 <__assert_func>
 8009828:	3101      	adds	r1, #1
 800982a:	005b      	lsls	r3, r3, #1
 800982c:	e7ee      	b.n	800980c <__lshift+0x1c>
 800982e:	2300      	movs	r3, #0
 8009830:	f100 0114 	add.w	r1, r0, #20
 8009834:	f100 0210 	add.w	r2, r0, #16
 8009838:	4618      	mov	r0, r3
 800983a:	4553      	cmp	r3, sl
 800983c:	db33      	blt.n	80098a6 <__lshift+0xb6>
 800983e:	6920      	ldr	r0, [r4, #16]
 8009840:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009844:	f104 0314 	add.w	r3, r4, #20
 8009848:	f019 091f 	ands.w	r9, r9, #31
 800984c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009850:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009854:	d02b      	beq.n	80098ae <__lshift+0xbe>
 8009856:	f1c9 0e20 	rsb	lr, r9, #32
 800985a:	468a      	mov	sl, r1
 800985c:	2200      	movs	r2, #0
 800985e:	6818      	ldr	r0, [r3, #0]
 8009860:	fa00 f009 	lsl.w	r0, r0, r9
 8009864:	4310      	orrs	r0, r2
 8009866:	f84a 0b04 	str.w	r0, [sl], #4
 800986a:	f853 2b04 	ldr.w	r2, [r3], #4
 800986e:	459c      	cmp	ip, r3
 8009870:	fa22 f20e 	lsr.w	r2, r2, lr
 8009874:	d8f3      	bhi.n	800985e <__lshift+0x6e>
 8009876:	ebac 0304 	sub.w	r3, ip, r4
 800987a:	3b15      	subs	r3, #21
 800987c:	f023 0303 	bic.w	r3, r3, #3
 8009880:	3304      	adds	r3, #4
 8009882:	f104 0015 	add.w	r0, r4, #21
 8009886:	4584      	cmp	ip, r0
 8009888:	bf38      	it	cc
 800988a:	2304      	movcc	r3, #4
 800988c:	50ca      	str	r2, [r1, r3]
 800988e:	b10a      	cbz	r2, 8009894 <__lshift+0xa4>
 8009890:	f108 0602 	add.w	r6, r8, #2
 8009894:	3e01      	subs	r6, #1
 8009896:	4638      	mov	r0, r7
 8009898:	612e      	str	r6, [r5, #16]
 800989a:	4621      	mov	r1, r4
 800989c:	f7ff fd90 	bl	80093c0 <_Bfree>
 80098a0:	4628      	mov	r0, r5
 80098a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80098aa:	3301      	adds	r3, #1
 80098ac:	e7c5      	b.n	800983a <__lshift+0x4a>
 80098ae:	3904      	subs	r1, #4
 80098b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80098b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80098b8:	459c      	cmp	ip, r3
 80098ba:	d8f9      	bhi.n	80098b0 <__lshift+0xc0>
 80098bc:	e7ea      	b.n	8009894 <__lshift+0xa4>
 80098be:	bf00      	nop
 80098c0:	0800bcc5 	.word	0x0800bcc5
 80098c4:	0800bcd6 	.word	0x0800bcd6

080098c8 <__mcmp>:
 80098c8:	690a      	ldr	r2, [r1, #16]
 80098ca:	4603      	mov	r3, r0
 80098cc:	6900      	ldr	r0, [r0, #16]
 80098ce:	1a80      	subs	r0, r0, r2
 80098d0:	b530      	push	{r4, r5, lr}
 80098d2:	d10e      	bne.n	80098f2 <__mcmp+0x2a>
 80098d4:	3314      	adds	r3, #20
 80098d6:	3114      	adds	r1, #20
 80098d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80098dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80098e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80098e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80098e8:	4295      	cmp	r5, r2
 80098ea:	d003      	beq.n	80098f4 <__mcmp+0x2c>
 80098ec:	d205      	bcs.n	80098fa <__mcmp+0x32>
 80098ee:	f04f 30ff 	mov.w	r0, #4294967295
 80098f2:	bd30      	pop	{r4, r5, pc}
 80098f4:	42a3      	cmp	r3, r4
 80098f6:	d3f3      	bcc.n	80098e0 <__mcmp+0x18>
 80098f8:	e7fb      	b.n	80098f2 <__mcmp+0x2a>
 80098fa:	2001      	movs	r0, #1
 80098fc:	e7f9      	b.n	80098f2 <__mcmp+0x2a>
	...

08009900 <__mdiff>:
 8009900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009904:	4689      	mov	r9, r1
 8009906:	4606      	mov	r6, r0
 8009908:	4611      	mov	r1, r2
 800990a:	4648      	mov	r0, r9
 800990c:	4614      	mov	r4, r2
 800990e:	f7ff ffdb 	bl	80098c8 <__mcmp>
 8009912:	1e05      	subs	r5, r0, #0
 8009914:	d112      	bne.n	800993c <__mdiff+0x3c>
 8009916:	4629      	mov	r1, r5
 8009918:	4630      	mov	r0, r6
 800991a:	f7ff fd11 	bl	8009340 <_Balloc>
 800991e:	4602      	mov	r2, r0
 8009920:	b928      	cbnz	r0, 800992e <__mdiff+0x2e>
 8009922:	4b3f      	ldr	r3, [pc, #252]	@ (8009a20 <__mdiff+0x120>)
 8009924:	f240 2137 	movw	r1, #567	@ 0x237
 8009928:	483e      	ldr	r0, [pc, #248]	@ (8009a24 <__mdiff+0x124>)
 800992a:	f001 fa95 	bl	800ae58 <__assert_func>
 800992e:	2301      	movs	r3, #1
 8009930:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009934:	4610      	mov	r0, r2
 8009936:	b003      	add	sp, #12
 8009938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993c:	bfbc      	itt	lt
 800993e:	464b      	movlt	r3, r9
 8009940:	46a1      	movlt	r9, r4
 8009942:	4630      	mov	r0, r6
 8009944:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009948:	bfba      	itte	lt
 800994a:	461c      	movlt	r4, r3
 800994c:	2501      	movlt	r5, #1
 800994e:	2500      	movge	r5, #0
 8009950:	f7ff fcf6 	bl	8009340 <_Balloc>
 8009954:	4602      	mov	r2, r0
 8009956:	b918      	cbnz	r0, 8009960 <__mdiff+0x60>
 8009958:	4b31      	ldr	r3, [pc, #196]	@ (8009a20 <__mdiff+0x120>)
 800995a:	f240 2145 	movw	r1, #581	@ 0x245
 800995e:	e7e3      	b.n	8009928 <__mdiff+0x28>
 8009960:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009964:	6926      	ldr	r6, [r4, #16]
 8009966:	60c5      	str	r5, [r0, #12]
 8009968:	f109 0310 	add.w	r3, r9, #16
 800996c:	f109 0514 	add.w	r5, r9, #20
 8009970:	f104 0e14 	add.w	lr, r4, #20
 8009974:	f100 0b14 	add.w	fp, r0, #20
 8009978:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800997c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009980:	9301      	str	r3, [sp, #4]
 8009982:	46d9      	mov	r9, fp
 8009984:	f04f 0c00 	mov.w	ip, #0
 8009988:	9b01      	ldr	r3, [sp, #4]
 800998a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800998e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009992:	9301      	str	r3, [sp, #4]
 8009994:	fa1f f38a 	uxth.w	r3, sl
 8009998:	4619      	mov	r1, r3
 800999a:	b283      	uxth	r3, r0
 800999c:	1acb      	subs	r3, r1, r3
 800999e:	0c00      	lsrs	r0, r0, #16
 80099a0:	4463      	add	r3, ip
 80099a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80099a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80099b0:	4576      	cmp	r6, lr
 80099b2:	f849 3b04 	str.w	r3, [r9], #4
 80099b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80099ba:	d8e5      	bhi.n	8009988 <__mdiff+0x88>
 80099bc:	1b33      	subs	r3, r6, r4
 80099be:	3b15      	subs	r3, #21
 80099c0:	f023 0303 	bic.w	r3, r3, #3
 80099c4:	3415      	adds	r4, #21
 80099c6:	3304      	adds	r3, #4
 80099c8:	42a6      	cmp	r6, r4
 80099ca:	bf38      	it	cc
 80099cc:	2304      	movcc	r3, #4
 80099ce:	441d      	add	r5, r3
 80099d0:	445b      	add	r3, fp
 80099d2:	461e      	mov	r6, r3
 80099d4:	462c      	mov	r4, r5
 80099d6:	4544      	cmp	r4, r8
 80099d8:	d30e      	bcc.n	80099f8 <__mdiff+0xf8>
 80099da:	f108 0103 	add.w	r1, r8, #3
 80099de:	1b49      	subs	r1, r1, r5
 80099e0:	f021 0103 	bic.w	r1, r1, #3
 80099e4:	3d03      	subs	r5, #3
 80099e6:	45a8      	cmp	r8, r5
 80099e8:	bf38      	it	cc
 80099ea:	2100      	movcc	r1, #0
 80099ec:	440b      	add	r3, r1
 80099ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099f2:	b191      	cbz	r1, 8009a1a <__mdiff+0x11a>
 80099f4:	6117      	str	r7, [r2, #16]
 80099f6:	e79d      	b.n	8009934 <__mdiff+0x34>
 80099f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80099fc:	46e6      	mov	lr, ip
 80099fe:	0c08      	lsrs	r0, r1, #16
 8009a00:	fa1c fc81 	uxtah	ip, ip, r1
 8009a04:	4471      	add	r1, lr
 8009a06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009a0a:	b289      	uxth	r1, r1
 8009a0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009a10:	f846 1b04 	str.w	r1, [r6], #4
 8009a14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a18:	e7dd      	b.n	80099d6 <__mdiff+0xd6>
 8009a1a:	3f01      	subs	r7, #1
 8009a1c:	e7e7      	b.n	80099ee <__mdiff+0xee>
 8009a1e:	bf00      	nop
 8009a20:	0800bcc5 	.word	0x0800bcc5
 8009a24:	0800bcd6 	.word	0x0800bcd6

08009a28 <__ulp>:
 8009a28:	b082      	sub	sp, #8
 8009a2a:	ed8d 0b00 	vstr	d0, [sp]
 8009a2e:	9a01      	ldr	r2, [sp, #4]
 8009a30:	4b0f      	ldr	r3, [pc, #60]	@ (8009a70 <__ulp+0x48>)
 8009a32:	4013      	ands	r3, r2
 8009a34:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	dc08      	bgt.n	8009a4e <__ulp+0x26>
 8009a3c:	425b      	negs	r3, r3
 8009a3e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009a42:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009a46:	da04      	bge.n	8009a52 <__ulp+0x2a>
 8009a48:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009a4c:	4113      	asrs	r3, r2
 8009a4e:	2200      	movs	r2, #0
 8009a50:	e008      	b.n	8009a64 <__ulp+0x3c>
 8009a52:	f1a2 0314 	sub.w	r3, r2, #20
 8009a56:	2b1e      	cmp	r3, #30
 8009a58:	bfda      	itte	le
 8009a5a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009a5e:	40da      	lsrle	r2, r3
 8009a60:	2201      	movgt	r2, #1
 8009a62:	2300      	movs	r3, #0
 8009a64:	4619      	mov	r1, r3
 8009a66:	4610      	mov	r0, r2
 8009a68:	ec41 0b10 	vmov	d0, r0, r1
 8009a6c:	b002      	add	sp, #8
 8009a6e:	4770      	bx	lr
 8009a70:	7ff00000 	.word	0x7ff00000

08009a74 <__b2d>:
 8009a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a78:	6906      	ldr	r6, [r0, #16]
 8009a7a:	f100 0814 	add.w	r8, r0, #20
 8009a7e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009a82:	1f37      	subs	r7, r6, #4
 8009a84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009a88:	4610      	mov	r0, r2
 8009a8a:	f7ff fd4b 	bl	8009524 <__hi0bits>
 8009a8e:	f1c0 0320 	rsb	r3, r0, #32
 8009a92:	280a      	cmp	r0, #10
 8009a94:	600b      	str	r3, [r1, #0]
 8009a96:	491b      	ldr	r1, [pc, #108]	@ (8009b04 <__b2d+0x90>)
 8009a98:	dc15      	bgt.n	8009ac6 <__b2d+0x52>
 8009a9a:	f1c0 0c0b 	rsb	ip, r0, #11
 8009a9e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009aa2:	45b8      	cmp	r8, r7
 8009aa4:	ea43 0501 	orr.w	r5, r3, r1
 8009aa8:	bf34      	ite	cc
 8009aaa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009aae:	2300      	movcs	r3, #0
 8009ab0:	3015      	adds	r0, #21
 8009ab2:	fa02 f000 	lsl.w	r0, r2, r0
 8009ab6:	fa23 f30c 	lsr.w	r3, r3, ip
 8009aba:	4303      	orrs	r3, r0
 8009abc:	461c      	mov	r4, r3
 8009abe:	ec45 4b10 	vmov	d0, r4, r5
 8009ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ac6:	45b8      	cmp	r8, r7
 8009ac8:	bf3a      	itte	cc
 8009aca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009ace:	f1a6 0708 	subcc.w	r7, r6, #8
 8009ad2:	2300      	movcs	r3, #0
 8009ad4:	380b      	subs	r0, #11
 8009ad6:	d012      	beq.n	8009afe <__b2d+0x8a>
 8009ad8:	f1c0 0120 	rsb	r1, r0, #32
 8009adc:	fa23 f401 	lsr.w	r4, r3, r1
 8009ae0:	4082      	lsls	r2, r0
 8009ae2:	4322      	orrs	r2, r4
 8009ae4:	4547      	cmp	r7, r8
 8009ae6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009aea:	bf8c      	ite	hi
 8009aec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009af0:	2200      	movls	r2, #0
 8009af2:	4083      	lsls	r3, r0
 8009af4:	40ca      	lsrs	r2, r1
 8009af6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009afa:	4313      	orrs	r3, r2
 8009afc:	e7de      	b.n	8009abc <__b2d+0x48>
 8009afe:	ea42 0501 	orr.w	r5, r2, r1
 8009b02:	e7db      	b.n	8009abc <__b2d+0x48>
 8009b04:	3ff00000 	.word	0x3ff00000

08009b08 <__d2b>:
 8009b08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b0c:	460f      	mov	r7, r1
 8009b0e:	2101      	movs	r1, #1
 8009b10:	ec59 8b10 	vmov	r8, r9, d0
 8009b14:	4616      	mov	r6, r2
 8009b16:	f7ff fc13 	bl	8009340 <_Balloc>
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	b930      	cbnz	r0, 8009b2c <__d2b+0x24>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	4b23      	ldr	r3, [pc, #140]	@ (8009bb0 <__d2b+0xa8>)
 8009b22:	4824      	ldr	r0, [pc, #144]	@ (8009bb4 <__d2b+0xac>)
 8009b24:	f240 310f 	movw	r1, #783	@ 0x30f
 8009b28:	f001 f996 	bl	800ae58 <__assert_func>
 8009b2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009b30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b34:	b10d      	cbz	r5, 8009b3a <__d2b+0x32>
 8009b36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b3a:	9301      	str	r3, [sp, #4]
 8009b3c:	f1b8 0300 	subs.w	r3, r8, #0
 8009b40:	d023      	beq.n	8009b8a <__d2b+0x82>
 8009b42:	4668      	mov	r0, sp
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	f7ff fd0c 	bl	8009562 <__lo0bits>
 8009b4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009b4e:	b1d0      	cbz	r0, 8009b86 <__d2b+0x7e>
 8009b50:	f1c0 0320 	rsb	r3, r0, #32
 8009b54:	fa02 f303 	lsl.w	r3, r2, r3
 8009b58:	430b      	orrs	r3, r1
 8009b5a:	40c2      	lsrs	r2, r0
 8009b5c:	6163      	str	r3, [r4, #20]
 8009b5e:	9201      	str	r2, [sp, #4]
 8009b60:	9b01      	ldr	r3, [sp, #4]
 8009b62:	61a3      	str	r3, [r4, #24]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	bf0c      	ite	eq
 8009b68:	2201      	moveq	r2, #1
 8009b6a:	2202      	movne	r2, #2
 8009b6c:	6122      	str	r2, [r4, #16]
 8009b6e:	b1a5      	cbz	r5, 8009b9a <__d2b+0x92>
 8009b70:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009b74:	4405      	add	r5, r0
 8009b76:	603d      	str	r5, [r7, #0]
 8009b78:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009b7c:	6030      	str	r0, [r6, #0]
 8009b7e:	4620      	mov	r0, r4
 8009b80:	b003      	add	sp, #12
 8009b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b86:	6161      	str	r1, [r4, #20]
 8009b88:	e7ea      	b.n	8009b60 <__d2b+0x58>
 8009b8a:	a801      	add	r0, sp, #4
 8009b8c:	f7ff fce9 	bl	8009562 <__lo0bits>
 8009b90:	9b01      	ldr	r3, [sp, #4]
 8009b92:	6163      	str	r3, [r4, #20]
 8009b94:	3020      	adds	r0, #32
 8009b96:	2201      	movs	r2, #1
 8009b98:	e7e8      	b.n	8009b6c <__d2b+0x64>
 8009b9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009ba2:	6038      	str	r0, [r7, #0]
 8009ba4:	6918      	ldr	r0, [r3, #16]
 8009ba6:	f7ff fcbd 	bl	8009524 <__hi0bits>
 8009baa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009bae:	e7e5      	b.n	8009b7c <__d2b+0x74>
 8009bb0:	0800bcc5 	.word	0x0800bcc5
 8009bb4:	0800bcd6 	.word	0x0800bcd6

08009bb8 <__ratio>:
 8009bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	b085      	sub	sp, #20
 8009bbe:	e9cd 1000 	strd	r1, r0, [sp]
 8009bc2:	a902      	add	r1, sp, #8
 8009bc4:	f7ff ff56 	bl	8009a74 <__b2d>
 8009bc8:	9800      	ldr	r0, [sp, #0]
 8009bca:	a903      	add	r1, sp, #12
 8009bcc:	ec55 4b10 	vmov	r4, r5, d0
 8009bd0:	f7ff ff50 	bl	8009a74 <__b2d>
 8009bd4:	9b01      	ldr	r3, [sp, #4]
 8009bd6:	6919      	ldr	r1, [r3, #16]
 8009bd8:	9b00      	ldr	r3, [sp, #0]
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	1ac9      	subs	r1, r1, r3
 8009bde:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009be2:	1a9b      	subs	r3, r3, r2
 8009be4:	ec5b ab10 	vmov	sl, fp, d0
 8009be8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	bfce      	itee	gt
 8009bf0:	462a      	movgt	r2, r5
 8009bf2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009bf6:	465a      	movle	r2, fp
 8009bf8:	462f      	mov	r7, r5
 8009bfa:	46d9      	mov	r9, fp
 8009bfc:	bfcc      	ite	gt
 8009bfe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009c02:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009c06:	464b      	mov	r3, r9
 8009c08:	4652      	mov	r2, sl
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	4639      	mov	r1, r7
 8009c0e:	f7f6 fe45 	bl	800089c <__aeabi_ddiv>
 8009c12:	ec41 0b10 	vmov	d0, r0, r1
 8009c16:	b005      	add	sp, #20
 8009c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c1c <__copybits>:
 8009c1c:	3901      	subs	r1, #1
 8009c1e:	b570      	push	{r4, r5, r6, lr}
 8009c20:	1149      	asrs	r1, r1, #5
 8009c22:	6914      	ldr	r4, [r2, #16]
 8009c24:	3101      	adds	r1, #1
 8009c26:	f102 0314 	add.w	r3, r2, #20
 8009c2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009c2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009c32:	1f05      	subs	r5, r0, #4
 8009c34:	42a3      	cmp	r3, r4
 8009c36:	d30c      	bcc.n	8009c52 <__copybits+0x36>
 8009c38:	1aa3      	subs	r3, r4, r2
 8009c3a:	3b11      	subs	r3, #17
 8009c3c:	f023 0303 	bic.w	r3, r3, #3
 8009c40:	3211      	adds	r2, #17
 8009c42:	42a2      	cmp	r2, r4
 8009c44:	bf88      	it	hi
 8009c46:	2300      	movhi	r3, #0
 8009c48:	4418      	add	r0, r3
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	4288      	cmp	r0, r1
 8009c4e:	d305      	bcc.n	8009c5c <__copybits+0x40>
 8009c50:	bd70      	pop	{r4, r5, r6, pc}
 8009c52:	f853 6b04 	ldr.w	r6, [r3], #4
 8009c56:	f845 6f04 	str.w	r6, [r5, #4]!
 8009c5a:	e7eb      	b.n	8009c34 <__copybits+0x18>
 8009c5c:	f840 3b04 	str.w	r3, [r0], #4
 8009c60:	e7f4      	b.n	8009c4c <__copybits+0x30>

08009c62 <__any_on>:
 8009c62:	f100 0214 	add.w	r2, r0, #20
 8009c66:	6900      	ldr	r0, [r0, #16]
 8009c68:	114b      	asrs	r3, r1, #5
 8009c6a:	4298      	cmp	r0, r3
 8009c6c:	b510      	push	{r4, lr}
 8009c6e:	db11      	blt.n	8009c94 <__any_on+0x32>
 8009c70:	dd0a      	ble.n	8009c88 <__any_on+0x26>
 8009c72:	f011 011f 	ands.w	r1, r1, #31
 8009c76:	d007      	beq.n	8009c88 <__any_on+0x26>
 8009c78:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009c7c:	fa24 f001 	lsr.w	r0, r4, r1
 8009c80:	fa00 f101 	lsl.w	r1, r0, r1
 8009c84:	428c      	cmp	r4, r1
 8009c86:	d10b      	bne.n	8009ca0 <__any_on+0x3e>
 8009c88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d803      	bhi.n	8009c98 <__any_on+0x36>
 8009c90:	2000      	movs	r0, #0
 8009c92:	bd10      	pop	{r4, pc}
 8009c94:	4603      	mov	r3, r0
 8009c96:	e7f7      	b.n	8009c88 <__any_on+0x26>
 8009c98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c9c:	2900      	cmp	r1, #0
 8009c9e:	d0f5      	beq.n	8009c8c <__any_on+0x2a>
 8009ca0:	2001      	movs	r0, #1
 8009ca2:	e7f6      	b.n	8009c92 <__any_on+0x30>

08009ca4 <sulp>:
 8009ca4:	b570      	push	{r4, r5, r6, lr}
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	460d      	mov	r5, r1
 8009caa:	ec45 4b10 	vmov	d0, r4, r5
 8009cae:	4616      	mov	r6, r2
 8009cb0:	f7ff feba 	bl	8009a28 <__ulp>
 8009cb4:	ec51 0b10 	vmov	r0, r1, d0
 8009cb8:	b17e      	cbz	r6, 8009cda <sulp+0x36>
 8009cba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009cbe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	dd09      	ble.n	8009cda <sulp+0x36>
 8009cc6:	051b      	lsls	r3, r3, #20
 8009cc8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009ccc:	2400      	movs	r4, #0
 8009cce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009cd2:	4622      	mov	r2, r4
 8009cd4:	462b      	mov	r3, r5
 8009cd6:	f7f6 fcb7 	bl	8000648 <__aeabi_dmul>
 8009cda:	ec41 0b10 	vmov	d0, r0, r1
 8009cde:	bd70      	pop	{r4, r5, r6, pc}

08009ce0 <_strtod_l>:
 8009ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce4:	b09f      	sub	sp, #124	@ 0x7c
 8009ce6:	460c      	mov	r4, r1
 8009ce8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009cea:	2200      	movs	r2, #0
 8009cec:	921a      	str	r2, [sp, #104]	@ 0x68
 8009cee:	9005      	str	r0, [sp, #20]
 8009cf0:	f04f 0a00 	mov.w	sl, #0
 8009cf4:	f04f 0b00 	mov.w	fp, #0
 8009cf8:	460a      	mov	r2, r1
 8009cfa:	9219      	str	r2, [sp, #100]	@ 0x64
 8009cfc:	7811      	ldrb	r1, [r2, #0]
 8009cfe:	292b      	cmp	r1, #43	@ 0x2b
 8009d00:	d04a      	beq.n	8009d98 <_strtod_l+0xb8>
 8009d02:	d838      	bhi.n	8009d76 <_strtod_l+0x96>
 8009d04:	290d      	cmp	r1, #13
 8009d06:	d832      	bhi.n	8009d6e <_strtod_l+0x8e>
 8009d08:	2908      	cmp	r1, #8
 8009d0a:	d832      	bhi.n	8009d72 <_strtod_l+0x92>
 8009d0c:	2900      	cmp	r1, #0
 8009d0e:	d03b      	beq.n	8009d88 <_strtod_l+0xa8>
 8009d10:	2200      	movs	r2, #0
 8009d12:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009d14:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009d16:	782a      	ldrb	r2, [r5, #0]
 8009d18:	2a30      	cmp	r2, #48	@ 0x30
 8009d1a:	f040 80b3 	bne.w	8009e84 <_strtod_l+0x1a4>
 8009d1e:	786a      	ldrb	r2, [r5, #1]
 8009d20:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d24:	2a58      	cmp	r2, #88	@ 0x58
 8009d26:	d16e      	bne.n	8009e06 <_strtod_l+0x126>
 8009d28:	9302      	str	r3, [sp, #8]
 8009d2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d2c:	9301      	str	r3, [sp, #4]
 8009d2e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	4a8e      	ldr	r2, [pc, #568]	@ (8009f6c <_strtod_l+0x28c>)
 8009d34:	9805      	ldr	r0, [sp, #20]
 8009d36:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009d38:	a919      	add	r1, sp, #100	@ 0x64
 8009d3a:	f001 f927 	bl	800af8c <__gethex>
 8009d3e:	f010 060f 	ands.w	r6, r0, #15
 8009d42:	4604      	mov	r4, r0
 8009d44:	d005      	beq.n	8009d52 <_strtod_l+0x72>
 8009d46:	2e06      	cmp	r6, #6
 8009d48:	d128      	bne.n	8009d9c <_strtod_l+0xbc>
 8009d4a:	3501      	adds	r5, #1
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009d50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f040 858e 	bne.w	800a876 <_strtod_l+0xb96>
 8009d5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d5c:	b1cb      	cbz	r3, 8009d92 <_strtod_l+0xb2>
 8009d5e:	4652      	mov	r2, sl
 8009d60:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009d64:	ec43 2b10 	vmov	d0, r2, r3
 8009d68:	b01f      	add	sp, #124	@ 0x7c
 8009d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d6e:	2920      	cmp	r1, #32
 8009d70:	d1ce      	bne.n	8009d10 <_strtod_l+0x30>
 8009d72:	3201      	adds	r2, #1
 8009d74:	e7c1      	b.n	8009cfa <_strtod_l+0x1a>
 8009d76:	292d      	cmp	r1, #45	@ 0x2d
 8009d78:	d1ca      	bne.n	8009d10 <_strtod_l+0x30>
 8009d7a:	2101      	movs	r1, #1
 8009d7c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009d7e:	1c51      	adds	r1, r2, #1
 8009d80:	9119      	str	r1, [sp, #100]	@ 0x64
 8009d82:	7852      	ldrb	r2, [r2, #1]
 8009d84:	2a00      	cmp	r2, #0
 8009d86:	d1c5      	bne.n	8009d14 <_strtod_l+0x34>
 8009d88:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009d8a:	9419      	str	r4, [sp, #100]	@ 0x64
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f040 8570 	bne.w	800a872 <_strtod_l+0xb92>
 8009d92:	4652      	mov	r2, sl
 8009d94:	465b      	mov	r3, fp
 8009d96:	e7e5      	b.n	8009d64 <_strtod_l+0x84>
 8009d98:	2100      	movs	r1, #0
 8009d9a:	e7ef      	b.n	8009d7c <_strtod_l+0x9c>
 8009d9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009d9e:	b13a      	cbz	r2, 8009db0 <_strtod_l+0xd0>
 8009da0:	2135      	movs	r1, #53	@ 0x35
 8009da2:	a81c      	add	r0, sp, #112	@ 0x70
 8009da4:	f7ff ff3a 	bl	8009c1c <__copybits>
 8009da8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009daa:	9805      	ldr	r0, [sp, #20]
 8009dac:	f7ff fb08 	bl	80093c0 <_Bfree>
 8009db0:	3e01      	subs	r6, #1
 8009db2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009db4:	2e04      	cmp	r6, #4
 8009db6:	d806      	bhi.n	8009dc6 <_strtod_l+0xe6>
 8009db8:	e8df f006 	tbb	[pc, r6]
 8009dbc:	201d0314 	.word	0x201d0314
 8009dc0:	14          	.byte	0x14
 8009dc1:	00          	.byte	0x00
 8009dc2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009dc6:	05e1      	lsls	r1, r4, #23
 8009dc8:	bf48      	it	mi
 8009dca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009dce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009dd2:	0d1b      	lsrs	r3, r3, #20
 8009dd4:	051b      	lsls	r3, r3, #20
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1bb      	bne.n	8009d52 <_strtod_l+0x72>
 8009dda:	f7fe fb2f 	bl	800843c <__errno>
 8009dde:	2322      	movs	r3, #34	@ 0x22
 8009de0:	6003      	str	r3, [r0, #0]
 8009de2:	e7b6      	b.n	8009d52 <_strtod_l+0x72>
 8009de4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009de8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009dec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009df0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009df4:	e7e7      	b.n	8009dc6 <_strtod_l+0xe6>
 8009df6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009f74 <_strtod_l+0x294>
 8009dfa:	e7e4      	b.n	8009dc6 <_strtod_l+0xe6>
 8009dfc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009e00:	f04f 3aff 	mov.w	sl, #4294967295
 8009e04:	e7df      	b.n	8009dc6 <_strtod_l+0xe6>
 8009e06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e08:	1c5a      	adds	r2, r3, #1
 8009e0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e0c:	785b      	ldrb	r3, [r3, #1]
 8009e0e:	2b30      	cmp	r3, #48	@ 0x30
 8009e10:	d0f9      	beq.n	8009e06 <_strtod_l+0x126>
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d09d      	beq.n	8009d52 <_strtod_l+0x72>
 8009e16:	2301      	movs	r3, #1
 8009e18:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e1e:	2300      	movs	r3, #0
 8009e20:	9308      	str	r3, [sp, #32]
 8009e22:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e24:	461f      	mov	r7, r3
 8009e26:	220a      	movs	r2, #10
 8009e28:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009e2a:	7805      	ldrb	r5, [r0, #0]
 8009e2c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009e30:	b2d9      	uxtb	r1, r3
 8009e32:	2909      	cmp	r1, #9
 8009e34:	d928      	bls.n	8009e88 <_strtod_l+0x1a8>
 8009e36:	494e      	ldr	r1, [pc, #312]	@ (8009f70 <_strtod_l+0x290>)
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f000 ffd5 	bl	800ade8 <strncmp>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d032      	beq.n	8009ea8 <_strtod_l+0x1c8>
 8009e42:	2000      	movs	r0, #0
 8009e44:	462a      	mov	r2, r5
 8009e46:	4681      	mov	r9, r0
 8009e48:	463d      	mov	r5, r7
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2a65      	cmp	r2, #101	@ 0x65
 8009e4e:	d001      	beq.n	8009e54 <_strtod_l+0x174>
 8009e50:	2a45      	cmp	r2, #69	@ 0x45
 8009e52:	d114      	bne.n	8009e7e <_strtod_l+0x19e>
 8009e54:	b91d      	cbnz	r5, 8009e5e <_strtod_l+0x17e>
 8009e56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e58:	4302      	orrs	r2, r0
 8009e5a:	d095      	beq.n	8009d88 <_strtod_l+0xa8>
 8009e5c:	2500      	movs	r5, #0
 8009e5e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009e60:	1c62      	adds	r2, r4, #1
 8009e62:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e64:	7862      	ldrb	r2, [r4, #1]
 8009e66:	2a2b      	cmp	r2, #43	@ 0x2b
 8009e68:	d077      	beq.n	8009f5a <_strtod_l+0x27a>
 8009e6a:	2a2d      	cmp	r2, #45	@ 0x2d
 8009e6c:	d07b      	beq.n	8009f66 <_strtod_l+0x286>
 8009e6e:	f04f 0c00 	mov.w	ip, #0
 8009e72:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009e76:	2909      	cmp	r1, #9
 8009e78:	f240 8082 	bls.w	8009f80 <_strtod_l+0x2a0>
 8009e7c:	9419      	str	r4, [sp, #100]	@ 0x64
 8009e7e:	f04f 0800 	mov.w	r8, #0
 8009e82:	e0a2      	b.n	8009fca <_strtod_l+0x2ea>
 8009e84:	2300      	movs	r3, #0
 8009e86:	e7c7      	b.n	8009e18 <_strtod_l+0x138>
 8009e88:	2f08      	cmp	r7, #8
 8009e8a:	bfd5      	itete	le
 8009e8c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009e8e:	9908      	ldrgt	r1, [sp, #32]
 8009e90:	fb02 3301 	mlale	r3, r2, r1, r3
 8009e94:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009e98:	f100 0001 	add.w	r0, r0, #1
 8009e9c:	bfd4      	ite	le
 8009e9e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009ea0:	9308      	strgt	r3, [sp, #32]
 8009ea2:	3701      	adds	r7, #1
 8009ea4:	9019      	str	r0, [sp, #100]	@ 0x64
 8009ea6:	e7bf      	b.n	8009e28 <_strtod_l+0x148>
 8009ea8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009eaa:	1c5a      	adds	r2, r3, #1
 8009eac:	9219      	str	r2, [sp, #100]	@ 0x64
 8009eae:	785a      	ldrb	r2, [r3, #1]
 8009eb0:	b37f      	cbz	r7, 8009f12 <_strtod_l+0x232>
 8009eb2:	4681      	mov	r9, r0
 8009eb4:	463d      	mov	r5, r7
 8009eb6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009eba:	2b09      	cmp	r3, #9
 8009ebc:	d912      	bls.n	8009ee4 <_strtod_l+0x204>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e7c4      	b.n	8009e4c <_strtod_l+0x16c>
 8009ec2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ec4:	1c5a      	adds	r2, r3, #1
 8009ec6:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ec8:	785a      	ldrb	r2, [r3, #1]
 8009eca:	3001      	adds	r0, #1
 8009ecc:	2a30      	cmp	r2, #48	@ 0x30
 8009ece:	d0f8      	beq.n	8009ec2 <_strtod_l+0x1e2>
 8009ed0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009ed4:	2b08      	cmp	r3, #8
 8009ed6:	f200 84d3 	bhi.w	800a880 <_strtod_l+0xba0>
 8009eda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009edc:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ede:	4681      	mov	r9, r0
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	4605      	mov	r5, r0
 8009ee4:	3a30      	subs	r2, #48	@ 0x30
 8009ee6:	f100 0301 	add.w	r3, r0, #1
 8009eea:	d02a      	beq.n	8009f42 <_strtod_l+0x262>
 8009eec:	4499      	add	r9, r3
 8009eee:	eb00 0c05 	add.w	ip, r0, r5
 8009ef2:	462b      	mov	r3, r5
 8009ef4:	210a      	movs	r1, #10
 8009ef6:	4563      	cmp	r3, ip
 8009ef8:	d10d      	bne.n	8009f16 <_strtod_l+0x236>
 8009efa:	1c69      	adds	r1, r5, #1
 8009efc:	4401      	add	r1, r0
 8009efe:	4428      	add	r0, r5
 8009f00:	2808      	cmp	r0, #8
 8009f02:	dc16      	bgt.n	8009f32 <_strtod_l+0x252>
 8009f04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009f06:	230a      	movs	r3, #10
 8009f08:	fb03 2300 	mla	r3, r3, r0, r2
 8009f0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f0e:	2300      	movs	r3, #0
 8009f10:	e018      	b.n	8009f44 <_strtod_l+0x264>
 8009f12:	4638      	mov	r0, r7
 8009f14:	e7da      	b.n	8009ecc <_strtod_l+0x1ec>
 8009f16:	2b08      	cmp	r3, #8
 8009f18:	f103 0301 	add.w	r3, r3, #1
 8009f1c:	dc03      	bgt.n	8009f26 <_strtod_l+0x246>
 8009f1e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009f20:	434e      	muls	r6, r1
 8009f22:	960a      	str	r6, [sp, #40]	@ 0x28
 8009f24:	e7e7      	b.n	8009ef6 <_strtod_l+0x216>
 8009f26:	2b10      	cmp	r3, #16
 8009f28:	bfde      	ittt	le
 8009f2a:	9e08      	ldrle	r6, [sp, #32]
 8009f2c:	434e      	mulle	r6, r1
 8009f2e:	9608      	strle	r6, [sp, #32]
 8009f30:	e7e1      	b.n	8009ef6 <_strtod_l+0x216>
 8009f32:	280f      	cmp	r0, #15
 8009f34:	dceb      	bgt.n	8009f0e <_strtod_l+0x22e>
 8009f36:	9808      	ldr	r0, [sp, #32]
 8009f38:	230a      	movs	r3, #10
 8009f3a:	fb03 2300 	mla	r3, r3, r0, r2
 8009f3e:	9308      	str	r3, [sp, #32]
 8009f40:	e7e5      	b.n	8009f0e <_strtod_l+0x22e>
 8009f42:	4629      	mov	r1, r5
 8009f44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f46:	1c50      	adds	r0, r2, #1
 8009f48:	9019      	str	r0, [sp, #100]	@ 0x64
 8009f4a:	7852      	ldrb	r2, [r2, #1]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	460d      	mov	r5, r1
 8009f50:	e7b1      	b.n	8009eb6 <_strtod_l+0x1d6>
 8009f52:	f04f 0900 	mov.w	r9, #0
 8009f56:	2301      	movs	r3, #1
 8009f58:	e77d      	b.n	8009e56 <_strtod_l+0x176>
 8009f5a:	f04f 0c00 	mov.w	ip, #0
 8009f5e:	1ca2      	adds	r2, r4, #2
 8009f60:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f62:	78a2      	ldrb	r2, [r4, #2]
 8009f64:	e785      	b.n	8009e72 <_strtod_l+0x192>
 8009f66:	f04f 0c01 	mov.w	ip, #1
 8009f6a:	e7f8      	b.n	8009f5e <_strtod_l+0x27e>
 8009f6c:	0800be48 	.word	0x0800be48
 8009f70:	0800be30 	.word	0x0800be30
 8009f74:	7ff00000 	.word	0x7ff00000
 8009f78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f7a:	1c51      	adds	r1, r2, #1
 8009f7c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009f7e:	7852      	ldrb	r2, [r2, #1]
 8009f80:	2a30      	cmp	r2, #48	@ 0x30
 8009f82:	d0f9      	beq.n	8009f78 <_strtod_l+0x298>
 8009f84:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009f88:	2908      	cmp	r1, #8
 8009f8a:	f63f af78 	bhi.w	8009e7e <_strtod_l+0x19e>
 8009f8e:	3a30      	subs	r2, #48	@ 0x30
 8009f90:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f94:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009f96:	f04f 080a 	mov.w	r8, #10
 8009f9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f9c:	1c56      	adds	r6, r2, #1
 8009f9e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009fa0:	7852      	ldrb	r2, [r2, #1]
 8009fa2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009fa6:	f1be 0f09 	cmp.w	lr, #9
 8009faa:	d939      	bls.n	800a020 <_strtod_l+0x340>
 8009fac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009fae:	1a76      	subs	r6, r6, r1
 8009fb0:	2e08      	cmp	r6, #8
 8009fb2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009fb6:	dc03      	bgt.n	8009fc0 <_strtod_l+0x2e0>
 8009fb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009fba:	4588      	cmp	r8, r1
 8009fbc:	bfa8      	it	ge
 8009fbe:	4688      	movge	r8, r1
 8009fc0:	f1bc 0f00 	cmp.w	ip, #0
 8009fc4:	d001      	beq.n	8009fca <_strtod_l+0x2ea>
 8009fc6:	f1c8 0800 	rsb	r8, r8, #0
 8009fca:	2d00      	cmp	r5, #0
 8009fcc:	d14e      	bne.n	800a06c <_strtod_l+0x38c>
 8009fce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009fd0:	4308      	orrs	r0, r1
 8009fd2:	f47f aebe 	bne.w	8009d52 <_strtod_l+0x72>
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f47f aed6 	bne.w	8009d88 <_strtod_l+0xa8>
 8009fdc:	2a69      	cmp	r2, #105	@ 0x69
 8009fde:	d028      	beq.n	800a032 <_strtod_l+0x352>
 8009fe0:	dc25      	bgt.n	800a02e <_strtod_l+0x34e>
 8009fe2:	2a49      	cmp	r2, #73	@ 0x49
 8009fe4:	d025      	beq.n	800a032 <_strtod_l+0x352>
 8009fe6:	2a4e      	cmp	r2, #78	@ 0x4e
 8009fe8:	f47f aece 	bne.w	8009d88 <_strtod_l+0xa8>
 8009fec:	499b      	ldr	r1, [pc, #620]	@ (800a25c <_strtod_l+0x57c>)
 8009fee:	a819      	add	r0, sp, #100	@ 0x64
 8009ff0:	f001 f9ee 	bl	800b3d0 <__match>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	f43f aec7 	beq.w	8009d88 <_strtod_l+0xa8>
 8009ffa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	2b28      	cmp	r3, #40	@ 0x28
 800a000:	d12e      	bne.n	800a060 <_strtod_l+0x380>
 800a002:	4997      	ldr	r1, [pc, #604]	@ (800a260 <_strtod_l+0x580>)
 800a004:	aa1c      	add	r2, sp, #112	@ 0x70
 800a006:	a819      	add	r0, sp, #100	@ 0x64
 800a008:	f001 f9f6 	bl	800b3f8 <__hexnan>
 800a00c:	2805      	cmp	r0, #5
 800a00e:	d127      	bne.n	800a060 <_strtod_l+0x380>
 800a010:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a012:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a016:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a01a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a01e:	e698      	b.n	8009d52 <_strtod_l+0x72>
 800a020:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a022:	fb08 2101 	mla	r1, r8, r1, r2
 800a026:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a02a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a02c:	e7b5      	b.n	8009f9a <_strtod_l+0x2ba>
 800a02e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a030:	e7da      	b.n	8009fe8 <_strtod_l+0x308>
 800a032:	498c      	ldr	r1, [pc, #560]	@ (800a264 <_strtod_l+0x584>)
 800a034:	a819      	add	r0, sp, #100	@ 0x64
 800a036:	f001 f9cb 	bl	800b3d0 <__match>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	f43f aea4 	beq.w	8009d88 <_strtod_l+0xa8>
 800a040:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a042:	4989      	ldr	r1, [pc, #548]	@ (800a268 <_strtod_l+0x588>)
 800a044:	3b01      	subs	r3, #1
 800a046:	a819      	add	r0, sp, #100	@ 0x64
 800a048:	9319      	str	r3, [sp, #100]	@ 0x64
 800a04a:	f001 f9c1 	bl	800b3d0 <__match>
 800a04e:	b910      	cbnz	r0, 800a056 <_strtod_l+0x376>
 800a050:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a052:	3301      	adds	r3, #1
 800a054:	9319      	str	r3, [sp, #100]	@ 0x64
 800a056:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a278 <_strtod_l+0x598>
 800a05a:	f04f 0a00 	mov.w	sl, #0
 800a05e:	e678      	b.n	8009d52 <_strtod_l+0x72>
 800a060:	4882      	ldr	r0, [pc, #520]	@ (800a26c <_strtod_l+0x58c>)
 800a062:	f000 fef1 	bl	800ae48 <nan>
 800a066:	ec5b ab10 	vmov	sl, fp, d0
 800a06a:	e672      	b.n	8009d52 <_strtod_l+0x72>
 800a06c:	eba8 0309 	sub.w	r3, r8, r9
 800a070:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a072:	9309      	str	r3, [sp, #36]	@ 0x24
 800a074:	2f00      	cmp	r7, #0
 800a076:	bf08      	it	eq
 800a078:	462f      	moveq	r7, r5
 800a07a:	2d10      	cmp	r5, #16
 800a07c:	462c      	mov	r4, r5
 800a07e:	bfa8      	it	ge
 800a080:	2410      	movge	r4, #16
 800a082:	f7f6 fa67 	bl	8000554 <__aeabi_ui2d>
 800a086:	2d09      	cmp	r5, #9
 800a088:	4682      	mov	sl, r0
 800a08a:	468b      	mov	fp, r1
 800a08c:	dc13      	bgt.n	800a0b6 <_strtod_l+0x3d6>
 800a08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a090:	2b00      	cmp	r3, #0
 800a092:	f43f ae5e 	beq.w	8009d52 <_strtod_l+0x72>
 800a096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a098:	dd78      	ble.n	800a18c <_strtod_l+0x4ac>
 800a09a:	2b16      	cmp	r3, #22
 800a09c:	dc5f      	bgt.n	800a15e <_strtod_l+0x47e>
 800a09e:	4974      	ldr	r1, [pc, #464]	@ (800a270 <_strtod_l+0x590>)
 800a0a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a0a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0a8:	4652      	mov	r2, sl
 800a0aa:	465b      	mov	r3, fp
 800a0ac:	f7f6 facc 	bl	8000648 <__aeabi_dmul>
 800a0b0:	4682      	mov	sl, r0
 800a0b2:	468b      	mov	fp, r1
 800a0b4:	e64d      	b.n	8009d52 <_strtod_l+0x72>
 800a0b6:	4b6e      	ldr	r3, [pc, #440]	@ (800a270 <_strtod_l+0x590>)
 800a0b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a0bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a0c0:	f7f6 fac2 	bl	8000648 <__aeabi_dmul>
 800a0c4:	4682      	mov	sl, r0
 800a0c6:	9808      	ldr	r0, [sp, #32]
 800a0c8:	468b      	mov	fp, r1
 800a0ca:	f7f6 fa43 	bl	8000554 <__aeabi_ui2d>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	4650      	mov	r0, sl
 800a0d4:	4659      	mov	r1, fp
 800a0d6:	f7f6 f901 	bl	80002dc <__adddf3>
 800a0da:	2d0f      	cmp	r5, #15
 800a0dc:	4682      	mov	sl, r0
 800a0de:	468b      	mov	fp, r1
 800a0e0:	ddd5      	ble.n	800a08e <_strtod_l+0x3ae>
 800a0e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0e4:	1b2c      	subs	r4, r5, r4
 800a0e6:	441c      	add	r4, r3
 800a0e8:	2c00      	cmp	r4, #0
 800a0ea:	f340 8096 	ble.w	800a21a <_strtod_l+0x53a>
 800a0ee:	f014 030f 	ands.w	r3, r4, #15
 800a0f2:	d00a      	beq.n	800a10a <_strtod_l+0x42a>
 800a0f4:	495e      	ldr	r1, [pc, #376]	@ (800a270 <_strtod_l+0x590>)
 800a0f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a0fa:	4652      	mov	r2, sl
 800a0fc:	465b      	mov	r3, fp
 800a0fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a102:	f7f6 faa1 	bl	8000648 <__aeabi_dmul>
 800a106:	4682      	mov	sl, r0
 800a108:	468b      	mov	fp, r1
 800a10a:	f034 040f 	bics.w	r4, r4, #15
 800a10e:	d073      	beq.n	800a1f8 <_strtod_l+0x518>
 800a110:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a114:	dd48      	ble.n	800a1a8 <_strtod_l+0x4c8>
 800a116:	2400      	movs	r4, #0
 800a118:	46a0      	mov	r8, r4
 800a11a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a11c:	46a1      	mov	r9, r4
 800a11e:	9a05      	ldr	r2, [sp, #20]
 800a120:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a278 <_strtod_l+0x598>
 800a124:	2322      	movs	r3, #34	@ 0x22
 800a126:	6013      	str	r3, [r2, #0]
 800a128:	f04f 0a00 	mov.w	sl, #0
 800a12c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f43f ae0f 	beq.w	8009d52 <_strtod_l+0x72>
 800a134:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a136:	9805      	ldr	r0, [sp, #20]
 800a138:	f7ff f942 	bl	80093c0 <_Bfree>
 800a13c:	9805      	ldr	r0, [sp, #20]
 800a13e:	4649      	mov	r1, r9
 800a140:	f7ff f93e 	bl	80093c0 <_Bfree>
 800a144:	9805      	ldr	r0, [sp, #20]
 800a146:	4641      	mov	r1, r8
 800a148:	f7ff f93a 	bl	80093c0 <_Bfree>
 800a14c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a14e:	9805      	ldr	r0, [sp, #20]
 800a150:	f7ff f936 	bl	80093c0 <_Bfree>
 800a154:	9805      	ldr	r0, [sp, #20]
 800a156:	4621      	mov	r1, r4
 800a158:	f7ff f932 	bl	80093c0 <_Bfree>
 800a15c:	e5f9      	b.n	8009d52 <_strtod_l+0x72>
 800a15e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a160:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a164:	4293      	cmp	r3, r2
 800a166:	dbbc      	blt.n	800a0e2 <_strtod_l+0x402>
 800a168:	4c41      	ldr	r4, [pc, #260]	@ (800a270 <_strtod_l+0x590>)
 800a16a:	f1c5 050f 	rsb	r5, r5, #15
 800a16e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a172:	4652      	mov	r2, sl
 800a174:	465b      	mov	r3, fp
 800a176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a17a:	f7f6 fa65 	bl	8000648 <__aeabi_dmul>
 800a17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a180:	1b5d      	subs	r5, r3, r5
 800a182:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a186:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a18a:	e78f      	b.n	800a0ac <_strtod_l+0x3cc>
 800a18c:	3316      	adds	r3, #22
 800a18e:	dba8      	blt.n	800a0e2 <_strtod_l+0x402>
 800a190:	4b37      	ldr	r3, [pc, #220]	@ (800a270 <_strtod_l+0x590>)
 800a192:	eba9 0808 	sub.w	r8, r9, r8
 800a196:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a19a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a19e:	4650      	mov	r0, sl
 800a1a0:	4659      	mov	r1, fp
 800a1a2:	f7f6 fb7b 	bl	800089c <__aeabi_ddiv>
 800a1a6:	e783      	b.n	800a0b0 <_strtod_l+0x3d0>
 800a1a8:	4b32      	ldr	r3, [pc, #200]	@ (800a274 <_strtod_l+0x594>)
 800a1aa:	9308      	str	r3, [sp, #32]
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	1124      	asrs	r4, r4, #4
 800a1b0:	4650      	mov	r0, sl
 800a1b2:	4659      	mov	r1, fp
 800a1b4:	461e      	mov	r6, r3
 800a1b6:	2c01      	cmp	r4, #1
 800a1b8:	dc21      	bgt.n	800a1fe <_strtod_l+0x51e>
 800a1ba:	b10b      	cbz	r3, 800a1c0 <_strtod_l+0x4e0>
 800a1bc:	4682      	mov	sl, r0
 800a1be:	468b      	mov	fp, r1
 800a1c0:	492c      	ldr	r1, [pc, #176]	@ (800a274 <_strtod_l+0x594>)
 800a1c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a1c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a1ca:	4652      	mov	r2, sl
 800a1cc:	465b      	mov	r3, fp
 800a1ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1d2:	f7f6 fa39 	bl	8000648 <__aeabi_dmul>
 800a1d6:	4b28      	ldr	r3, [pc, #160]	@ (800a278 <_strtod_l+0x598>)
 800a1d8:	460a      	mov	r2, r1
 800a1da:	400b      	ands	r3, r1
 800a1dc:	4927      	ldr	r1, [pc, #156]	@ (800a27c <_strtod_l+0x59c>)
 800a1de:	428b      	cmp	r3, r1
 800a1e0:	4682      	mov	sl, r0
 800a1e2:	d898      	bhi.n	800a116 <_strtod_l+0x436>
 800a1e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a1e8:	428b      	cmp	r3, r1
 800a1ea:	bf86      	itte	hi
 800a1ec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a280 <_strtod_l+0x5a0>
 800a1f0:	f04f 3aff 	movhi.w	sl, #4294967295
 800a1f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	9308      	str	r3, [sp, #32]
 800a1fc:	e07a      	b.n	800a2f4 <_strtod_l+0x614>
 800a1fe:	07e2      	lsls	r2, r4, #31
 800a200:	d505      	bpl.n	800a20e <_strtod_l+0x52e>
 800a202:	9b08      	ldr	r3, [sp, #32]
 800a204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a208:	f7f6 fa1e 	bl	8000648 <__aeabi_dmul>
 800a20c:	2301      	movs	r3, #1
 800a20e:	9a08      	ldr	r2, [sp, #32]
 800a210:	3208      	adds	r2, #8
 800a212:	3601      	adds	r6, #1
 800a214:	1064      	asrs	r4, r4, #1
 800a216:	9208      	str	r2, [sp, #32]
 800a218:	e7cd      	b.n	800a1b6 <_strtod_l+0x4d6>
 800a21a:	d0ed      	beq.n	800a1f8 <_strtod_l+0x518>
 800a21c:	4264      	negs	r4, r4
 800a21e:	f014 020f 	ands.w	r2, r4, #15
 800a222:	d00a      	beq.n	800a23a <_strtod_l+0x55a>
 800a224:	4b12      	ldr	r3, [pc, #72]	@ (800a270 <_strtod_l+0x590>)
 800a226:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a22a:	4650      	mov	r0, sl
 800a22c:	4659      	mov	r1, fp
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	f7f6 fb33 	bl	800089c <__aeabi_ddiv>
 800a236:	4682      	mov	sl, r0
 800a238:	468b      	mov	fp, r1
 800a23a:	1124      	asrs	r4, r4, #4
 800a23c:	d0dc      	beq.n	800a1f8 <_strtod_l+0x518>
 800a23e:	2c1f      	cmp	r4, #31
 800a240:	dd20      	ble.n	800a284 <_strtod_l+0x5a4>
 800a242:	2400      	movs	r4, #0
 800a244:	46a0      	mov	r8, r4
 800a246:	940a      	str	r4, [sp, #40]	@ 0x28
 800a248:	46a1      	mov	r9, r4
 800a24a:	9a05      	ldr	r2, [sp, #20]
 800a24c:	2322      	movs	r3, #34	@ 0x22
 800a24e:	f04f 0a00 	mov.w	sl, #0
 800a252:	f04f 0b00 	mov.w	fp, #0
 800a256:	6013      	str	r3, [r2, #0]
 800a258:	e768      	b.n	800a12c <_strtod_l+0x44c>
 800a25a:	bf00      	nop
 800a25c:	0800bc1d 	.word	0x0800bc1d
 800a260:	0800be34 	.word	0x0800be34
 800a264:	0800bc15 	.word	0x0800bc15
 800a268:	0800bc4c 	.word	0x0800bc4c
 800a26c:	0800bfdd 	.word	0x0800bfdd
 800a270:	0800bd68 	.word	0x0800bd68
 800a274:	0800bd40 	.word	0x0800bd40
 800a278:	7ff00000 	.word	0x7ff00000
 800a27c:	7ca00000 	.word	0x7ca00000
 800a280:	7fefffff 	.word	0x7fefffff
 800a284:	f014 0310 	ands.w	r3, r4, #16
 800a288:	bf18      	it	ne
 800a28a:	236a      	movne	r3, #106	@ 0x6a
 800a28c:	4ea9      	ldr	r6, [pc, #676]	@ (800a534 <_strtod_l+0x854>)
 800a28e:	9308      	str	r3, [sp, #32]
 800a290:	4650      	mov	r0, sl
 800a292:	4659      	mov	r1, fp
 800a294:	2300      	movs	r3, #0
 800a296:	07e2      	lsls	r2, r4, #31
 800a298:	d504      	bpl.n	800a2a4 <_strtod_l+0x5c4>
 800a29a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a29e:	f7f6 f9d3 	bl	8000648 <__aeabi_dmul>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	1064      	asrs	r4, r4, #1
 800a2a6:	f106 0608 	add.w	r6, r6, #8
 800a2aa:	d1f4      	bne.n	800a296 <_strtod_l+0x5b6>
 800a2ac:	b10b      	cbz	r3, 800a2b2 <_strtod_l+0x5d2>
 800a2ae:	4682      	mov	sl, r0
 800a2b0:	468b      	mov	fp, r1
 800a2b2:	9b08      	ldr	r3, [sp, #32]
 800a2b4:	b1b3      	cbz	r3, 800a2e4 <_strtod_l+0x604>
 800a2b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a2ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	4659      	mov	r1, fp
 800a2c2:	dd0f      	ble.n	800a2e4 <_strtod_l+0x604>
 800a2c4:	2b1f      	cmp	r3, #31
 800a2c6:	dd55      	ble.n	800a374 <_strtod_l+0x694>
 800a2c8:	2b34      	cmp	r3, #52	@ 0x34
 800a2ca:	bfde      	ittt	le
 800a2cc:	f04f 33ff 	movle.w	r3, #4294967295
 800a2d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a2d4:	4093      	lslle	r3, r2
 800a2d6:	f04f 0a00 	mov.w	sl, #0
 800a2da:	bfcc      	ite	gt
 800a2dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a2e0:	ea03 0b01 	andle.w	fp, r3, r1
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	4650      	mov	r0, sl
 800a2ea:	4659      	mov	r1, fp
 800a2ec:	f7f6 fc14 	bl	8000b18 <__aeabi_dcmpeq>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	d1a6      	bne.n	800a242 <_strtod_l+0x562>
 800a2f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a2fa:	9805      	ldr	r0, [sp, #20]
 800a2fc:	462b      	mov	r3, r5
 800a2fe:	463a      	mov	r2, r7
 800a300:	f7ff f8c6 	bl	8009490 <__s2b>
 800a304:	900a      	str	r0, [sp, #40]	@ 0x28
 800a306:	2800      	cmp	r0, #0
 800a308:	f43f af05 	beq.w	800a116 <_strtod_l+0x436>
 800a30c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a30e:	2a00      	cmp	r2, #0
 800a310:	eba9 0308 	sub.w	r3, r9, r8
 800a314:	bfa8      	it	ge
 800a316:	2300      	movge	r3, #0
 800a318:	9312      	str	r3, [sp, #72]	@ 0x48
 800a31a:	2400      	movs	r4, #0
 800a31c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a320:	9316      	str	r3, [sp, #88]	@ 0x58
 800a322:	46a0      	mov	r8, r4
 800a324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a326:	9805      	ldr	r0, [sp, #20]
 800a328:	6859      	ldr	r1, [r3, #4]
 800a32a:	f7ff f809 	bl	8009340 <_Balloc>
 800a32e:	4681      	mov	r9, r0
 800a330:	2800      	cmp	r0, #0
 800a332:	f43f aef4 	beq.w	800a11e <_strtod_l+0x43e>
 800a336:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a338:	691a      	ldr	r2, [r3, #16]
 800a33a:	3202      	adds	r2, #2
 800a33c:	f103 010c 	add.w	r1, r3, #12
 800a340:	0092      	lsls	r2, r2, #2
 800a342:	300c      	adds	r0, #12
 800a344:	f000 fd72 	bl	800ae2c <memcpy>
 800a348:	ec4b ab10 	vmov	d0, sl, fp
 800a34c:	9805      	ldr	r0, [sp, #20]
 800a34e:	aa1c      	add	r2, sp, #112	@ 0x70
 800a350:	a91b      	add	r1, sp, #108	@ 0x6c
 800a352:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a356:	f7ff fbd7 	bl	8009b08 <__d2b>
 800a35a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a35c:	2800      	cmp	r0, #0
 800a35e:	f43f aede 	beq.w	800a11e <_strtod_l+0x43e>
 800a362:	9805      	ldr	r0, [sp, #20]
 800a364:	2101      	movs	r1, #1
 800a366:	f7ff f929 	bl	80095bc <__i2b>
 800a36a:	4680      	mov	r8, r0
 800a36c:	b948      	cbnz	r0, 800a382 <_strtod_l+0x6a2>
 800a36e:	f04f 0800 	mov.w	r8, #0
 800a372:	e6d4      	b.n	800a11e <_strtod_l+0x43e>
 800a374:	f04f 32ff 	mov.w	r2, #4294967295
 800a378:	fa02 f303 	lsl.w	r3, r2, r3
 800a37c:	ea03 0a0a 	and.w	sl, r3, sl
 800a380:	e7b0      	b.n	800a2e4 <_strtod_l+0x604>
 800a382:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a384:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a386:	2d00      	cmp	r5, #0
 800a388:	bfab      	itete	ge
 800a38a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a38c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a38e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a390:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a392:	bfac      	ite	ge
 800a394:	18ef      	addge	r7, r5, r3
 800a396:	1b5e      	sublt	r6, r3, r5
 800a398:	9b08      	ldr	r3, [sp, #32]
 800a39a:	1aed      	subs	r5, r5, r3
 800a39c:	4415      	add	r5, r2
 800a39e:	4b66      	ldr	r3, [pc, #408]	@ (800a538 <_strtod_l+0x858>)
 800a3a0:	3d01      	subs	r5, #1
 800a3a2:	429d      	cmp	r5, r3
 800a3a4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a3a8:	da50      	bge.n	800a44c <_strtod_l+0x76c>
 800a3aa:	1b5b      	subs	r3, r3, r5
 800a3ac:	2b1f      	cmp	r3, #31
 800a3ae:	eba2 0203 	sub.w	r2, r2, r3
 800a3b2:	f04f 0101 	mov.w	r1, #1
 800a3b6:	dc3d      	bgt.n	800a434 <_strtod_l+0x754>
 800a3b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a3bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a3be:	2300      	movs	r3, #0
 800a3c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a3c2:	18bd      	adds	r5, r7, r2
 800a3c4:	9b08      	ldr	r3, [sp, #32]
 800a3c6:	42af      	cmp	r7, r5
 800a3c8:	4416      	add	r6, r2
 800a3ca:	441e      	add	r6, r3
 800a3cc:	463b      	mov	r3, r7
 800a3ce:	bfa8      	it	ge
 800a3d0:	462b      	movge	r3, r5
 800a3d2:	42b3      	cmp	r3, r6
 800a3d4:	bfa8      	it	ge
 800a3d6:	4633      	movge	r3, r6
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	bfc2      	ittt	gt
 800a3dc:	1aed      	subgt	r5, r5, r3
 800a3de:	1af6      	subgt	r6, r6, r3
 800a3e0:	1aff      	subgt	r7, r7, r3
 800a3e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	dd16      	ble.n	800a416 <_strtod_l+0x736>
 800a3e8:	4641      	mov	r1, r8
 800a3ea:	9805      	ldr	r0, [sp, #20]
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	f7ff f9a5 	bl	800973c <__pow5mult>
 800a3f2:	4680      	mov	r8, r0
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	d0ba      	beq.n	800a36e <_strtod_l+0x68e>
 800a3f8:	4601      	mov	r1, r0
 800a3fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a3fc:	9805      	ldr	r0, [sp, #20]
 800a3fe:	f7ff f8f3 	bl	80095e8 <__multiply>
 800a402:	900e      	str	r0, [sp, #56]	@ 0x38
 800a404:	2800      	cmp	r0, #0
 800a406:	f43f ae8a 	beq.w	800a11e <_strtod_l+0x43e>
 800a40a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a40c:	9805      	ldr	r0, [sp, #20]
 800a40e:	f7fe ffd7 	bl	80093c0 <_Bfree>
 800a412:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a414:	931a      	str	r3, [sp, #104]	@ 0x68
 800a416:	2d00      	cmp	r5, #0
 800a418:	dc1d      	bgt.n	800a456 <_strtod_l+0x776>
 800a41a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	dd23      	ble.n	800a468 <_strtod_l+0x788>
 800a420:	4649      	mov	r1, r9
 800a422:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a424:	9805      	ldr	r0, [sp, #20]
 800a426:	f7ff f989 	bl	800973c <__pow5mult>
 800a42a:	4681      	mov	r9, r0
 800a42c:	b9e0      	cbnz	r0, 800a468 <_strtod_l+0x788>
 800a42e:	f04f 0900 	mov.w	r9, #0
 800a432:	e674      	b.n	800a11e <_strtod_l+0x43e>
 800a434:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a438:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a43c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a440:	35e2      	adds	r5, #226	@ 0xe2
 800a442:	fa01 f305 	lsl.w	r3, r1, r5
 800a446:	9310      	str	r3, [sp, #64]	@ 0x40
 800a448:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a44a:	e7ba      	b.n	800a3c2 <_strtod_l+0x6e2>
 800a44c:	2300      	movs	r3, #0
 800a44e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a450:	2301      	movs	r3, #1
 800a452:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a454:	e7b5      	b.n	800a3c2 <_strtod_l+0x6e2>
 800a456:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a458:	9805      	ldr	r0, [sp, #20]
 800a45a:	462a      	mov	r2, r5
 800a45c:	f7ff f9c8 	bl	80097f0 <__lshift>
 800a460:	901a      	str	r0, [sp, #104]	@ 0x68
 800a462:	2800      	cmp	r0, #0
 800a464:	d1d9      	bne.n	800a41a <_strtod_l+0x73a>
 800a466:	e65a      	b.n	800a11e <_strtod_l+0x43e>
 800a468:	2e00      	cmp	r6, #0
 800a46a:	dd07      	ble.n	800a47c <_strtod_l+0x79c>
 800a46c:	4649      	mov	r1, r9
 800a46e:	9805      	ldr	r0, [sp, #20]
 800a470:	4632      	mov	r2, r6
 800a472:	f7ff f9bd 	bl	80097f0 <__lshift>
 800a476:	4681      	mov	r9, r0
 800a478:	2800      	cmp	r0, #0
 800a47a:	d0d8      	beq.n	800a42e <_strtod_l+0x74e>
 800a47c:	2f00      	cmp	r7, #0
 800a47e:	dd08      	ble.n	800a492 <_strtod_l+0x7b2>
 800a480:	4641      	mov	r1, r8
 800a482:	9805      	ldr	r0, [sp, #20]
 800a484:	463a      	mov	r2, r7
 800a486:	f7ff f9b3 	bl	80097f0 <__lshift>
 800a48a:	4680      	mov	r8, r0
 800a48c:	2800      	cmp	r0, #0
 800a48e:	f43f ae46 	beq.w	800a11e <_strtod_l+0x43e>
 800a492:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a494:	9805      	ldr	r0, [sp, #20]
 800a496:	464a      	mov	r2, r9
 800a498:	f7ff fa32 	bl	8009900 <__mdiff>
 800a49c:	4604      	mov	r4, r0
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	f43f ae3d 	beq.w	800a11e <_strtod_l+0x43e>
 800a4a4:	68c3      	ldr	r3, [r0, #12]
 800a4a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	60c3      	str	r3, [r0, #12]
 800a4ac:	4641      	mov	r1, r8
 800a4ae:	f7ff fa0b 	bl	80098c8 <__mcmp>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	da46      	bge.n	800a544 <_strtod_l+0x864>
 800a4b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4b8:	ea53 030a 	orrs.w	r3, r3, sl
 800a4bc:	d16c      	bne.n	800a598 <_strtod_l+0x8b8>
 800a4be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d168      	bne.n	800a598 <_strtod_l+0x8b8>
 800a4c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a4ca:	0d1b      	lsrs	r3, r3, #20
 800a4cc:	051b      	lsls	r3, r3, #20
 800a4ce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a4d2:	d961      	bls.n	800a598 <_strtod_l+0x8b8>
 800a4d4:	6963      	ldr	r3, [r4, #20]
 800a4d6:	b913      	cbnz	r3, 800a4de <_strtod_l+0x7fe>
 800a4d8:	6923      	ldr	r3, [r4, #16]
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	dd5c      	ble.n	800a598 <_strtod_l+0x8b8>
 800a4de:	4621      	mov	r1, r4
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	9805      	ldr	r0, [sp, #20]
 800a4e4:	f7ff f984 	bl	80097f0 <__lshift>
 800a4e8:	4641      	mov	r1, r8
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	f7ff f9ec 	bl	80098c8 <__mcmp>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	dd51      	ble.n	800a598 <_strtod_l+0x8b8>
 800a4f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a4f8:	9a08      	ldr	r2, [sp, #32]
 800a4fa:	0d1b      	lsrs	r3, r3, #20
 800a4fc:	051b      	lsls	r3, r3, #20
 800a4fe:	2a00      	cmp	r2, #0
 800a500:	d06b      	beq.n	800a5da <_strtod_l+0x8fa>
 800a502:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a506:	d868      	bhi.n	800a5da <_strtod_l+0x8fa>
 800a508:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a50c:	f67f ae9d 	bls.w	800a24a <_strtod_l+0x56a>
 800a510:	4b0a      	ldr	r3, [pc, #40]	@ (800a53c <_strtod_l+0x85c>)
 800a512:	4650      	mov	r0, sl
 800a514:	4659      	mov	r1, fp
 800a516:	2200      	movs	r2, #0
 800a518:	f7f6 f896 	bl	8000648 <__aeabi_dmul>
 800a51c:	4b08      	ldr	r3, [pc, #32]	@ (800a540 <_strtod_l+0x860>)
 800a51e:	400b      	ands	r3, r1
 800a520:	4682      	mov	sl, r0
 800a522:	468b      	mov	fp, r1
 800a524:	2b00      	cmp	r3, #0
 800a526:	f47f ae05 	bne.w	800a134 <_strtod_l+0x454>
 800a52a:	9a05      	ldr	r2, [sp, #20]
 800a52c:	2322      	movs	r3, #34	@ 0x22
 800a52e:	6013      	str	r3, [r2, #0]
 800a530:	e600      	b.n	800a134 <_strtod_l+0x454>
 800a532:	bf00      	nop
 800a534:	0800be60 	.word	0x0800be60
 800a538:	fffffc02 	.word	0xfffffc02
 800a53c:	39500000 	.word	0x39500000
 800a540:	7ff00000 	.word	0x7ff00000
 800a544:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a548:	d165      	bne.n	800a616 <_strtod_l+0x936>
 800a54a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a54c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a550:	b35a      	cbz	r2, 800a5aa <_strtod_l+0x8ca>
 800a552:	4a9f      	ldr	r2, [pc, #636]	@ (800a7d0 <_strtod_l+0xaf0>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d12b      	bne.n	800a5b0 <_strtod_l+0x8d0>
 800a558:	9b08      	ldr	r3, [sp, #32]
 800a55a:	4651      	mov	r1, sl
 800a55c:	b303      	cbz	r3, 800a5a0 <_strtod_l+0x8c0>
 800a55e:	4b9d      	ldr	r3, [pc, #628]	@ (800a7d4 <_strtod_l+0xaf4>)
 800a560:	465a      	mov	r2, fp
 800a562:	4013      	ands	r3, r2
 800a564:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a568:	f04f 32ff 	mov.w	r2, #4294967295
 800a56c:	d81b      	bhi.n	800a5a6 <_strtod_l+0x8c6>
 800a56e:	0d1b      	lsrs	r3, r3, #20
 800a570:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a574:	fa02 f303 	lsl.w	r3, r2, r3
 800a578:	4299      	cmp	r1, r3
 800a57a:	d119      	bne.n	800a5b0 <_strtod_l+0x8d0>
 800a57c:	4b96      	ldr	r3, [pc, #600]	@ (800a7d8 <_strtod_l+0xaf8>)
 800a57e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a580:	429a      	cmp	r2, r3
 800a582:	d102      	bne.n	800a58a <_strtod_l+0x8aa>
 800a584:	3101      	adds	r1, #1
 800a586:	f43f adca 	beq.w	800a11e <_strtod_l+0x43e>
 800a58a:	4b92      	ldr	r3, [pc, #584]	@ (800a7d4 <_strtod_l+0xaf4>)
 800a58c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a58e:	401a      	ands	r2, r3
 800a590:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a594:	f04f 0a00 	mov.w	sl, #0
 800a598:	9b08      	ldr	r3, [sp, #32]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d1b8      	bne.n	800a510 <_strtod_l+0x830>
 800a59e:	e5c9      	b.n	800a134 <_strtod_l+0x454>
 800a5a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5a4:	e7e8      	b.n	800a578 <_strtod_l+0x898>
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	e7e6      	b.n	800a578 <_strtod_l+0x898>
 800a5aa:	ea53 030a 	orrs.w	r3, r3, sl
 800a5ae:	d0a1      	beq.n	800a4f4 <_strtod_l+0x814>
 800a5b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a5b2:	b1db      	cbz	r3, 800a5ec <_strtod_l+0x90c>
 800a5b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a5b6:	4213      	tst	r3, r2
 800a5b8:	d0ee      	beq.n	800a598 <_strtod_l+0x8b8>
 800a5ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5bc:	9a08      	ldr	r2, [sp, #32]
 800a5be:	4650      	mov	r0, sl
 800a5c0:	4659      	mov	r1, fp
 800a5c2:	b1bb      	cbz	r3, 800a5f4 <_strtod_l+0x914>
 800a5c4:	f7ff fb6e 	bl	8009ca4 <sulp>
 800a5c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5cc:	ec53 2b10 	vmov	r2, r3, d0
 800a5d0:	f7f5 fe84 	bl	80002dc <__adddf3>
 800a5d4:	4682      	mov	sl, r0
 800a5d6:	468b      	mov	fp, r1
 800a5d8:	e7de      	b.n	800a598 <_strtod_l+0x8b8>
 800a5da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a5de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a5e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a5e6:	f04f 3aff 	mov.w	sl, #4294967295
 800a5ea:	e7d5      	b.n	800a598 <_strtod_l+0x8b8>
 800a5ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a5ee:	ea13 0f0a 	tst.w	r3, sl
 800a5f2:	e7e1      	b.n	800a5b8 <_strtod_l+0x8d8>
 800a5f4:	f7ff fb56 	bl	8009ca4 <sulp>
 800a5f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5fc:	ec53 2b10 	vmov	r2, r3, d0
 800a600:	f7f5 fe6a 	bl	80002d8 <__aeabi_dsub>
 800a604:	2200      	movs	r2, #0
 800a606:	2300      	movs	r3, #0
 800a608:	4682      	mov	sl, r0
 800a60a:	468b      	mov	fp, r1
 800a60c:	f7f6 fa84 	bl	8000b18 <__aeabi_dcmpeq>
 800a610:	2800      	cmp	r0, #0
 800a612:	d0c1      	beq.n	800a598 <_strtod_l+0x8b8>
 800a614:	e619      	b.n	800a24a <_strtod_l+0x56a>
 800a616:	4641      	mov	r1, r8
 800a618:	4620      	mov	r0, r4
 800a61a:	f7ff facd 	bl	8009bb8 <__ratio>
 800a61e:	ec57 6b10 	vmov	r6, r7, d0
 800a622:	2200      	movs	r2, #0
 800a624:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a628:	4630      	mov	r0, r6
 800a62a:	4639      	mov	r1, r7
 800a62c:	f7f6 fa88 	bl	8000b40 <__aeabi_dcmple>
 800a630:	2800      	cmp	r0, #0
 800a632:	d06f      	beq.n	800a714 <_strtod_l+0xa34>
 800a634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a636:	2b00      	cmp	r3, #0
 800a638:	d17a      	bne.n	800a730 <_strtod_l+0xa50>
 800a63a:	f1ba 0f00 	cmp.w	sl, #0
 800a63e:	d158      	bne.n	800a6f2 <_strtod_l+0xa12>
 800a640:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a642:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a646:	2b00      	cmp	r3, #0
 800a648:	d15a      	bne.n	800a700 <_strtod_l+0xa20>
 800a64a:	4b64      	ldr	r3, [pc, #400]	@ (800a7dc <_strtod_l+0xafc>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	4630      	mov	r0, r6
 800a650:	4639      	mov	r1, r7
 800a652:	f7f6 fa6b 	bl	8000b2c <__aeabi_dcmplt>
 800a656:	2800      	cmp	r0, #0
 800a658:	d159      	bne.n	800a70e <_strtod_l+0xa2e>
 800a65a:	4630      	mov	r0, r6
 800a65c:	4639      	mov	r1, r7
 800a65e:	4b60      	ldr	r3, [pc, #384]	@ (800a7e0 <_strtod_l+0xb00>)
 800a660:	2200      	movs	r2, #0
 800a662:	f7f5 fff1 	bl	8000648 <__aeabi_dmul>
 800a666:	4606      	mov	r6, r0
 800a668:	460f      	mov	r7, r1
 800a66a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a66e:	9606      	str	r6, [sp, #24]
 800a670:	9307      	str	r3, [sp, #28]
 800a672:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a676:	4d57      	ldr	r5, [pc, #348]	@ (800a7d4 <_strtod_l+0xaf4>)
 800a678:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a67c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a67e:	401d      	ands	r5, r3
 800a680:	4b58      	ldr	r3, [pc, #352]	@ (800a7e4 <_strtod_l+0xb04>)
 800a682:	429d      	cmp	r5, r3
 800a684:	f040 80b2 	bne.w	800a7ec <_strtod_l+0xb0c>
 800a688:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a68a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a68e:	ec4b ab10 	vmov	d0, sl, fp
 800a692:	f7ff f9c9 	bl	8009a28 <__ulp>
 800a696:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a69a:	ec51 0b10 	vmov	r0, r1, d0
 800a69e:	f7f5 ffd3 	bl	8000648 <__aeabi_dmul>
 800a6a2:	4652      	mov	r2, sl
 800a6a4:	465b      	mov	r3, fp
 800a6a6:	f7f5 fe19 	bl	80002dc <__adddf3>
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4949      	ldr	r1, [pc, #292]	@ (800a7d4 <_strtod_l+0xaf4>)
 800a6ae:	4a4e      	ldr	r2, [pc, #312]	@ (800a7e8 <_strtod_l+0xb08>)
 800a6b0:	4019      	ands	r1, r3
 800a6b2:	4291      	cmp	r1, r2
 800a6b4:	4682      	mov	sl, r0
 800a6b6:	d942      	bls.n	800a73e <_strtod_l+0xa5e>
 800a6b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a6ba:	4b47      	ldr	r3, [pc, #284]	@ (800a7d8 <_strtod_l+0xaf8>)
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d103      	bne.n	800a6c8 <_strtod_l+0x9e8>
 800a6c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	f43f ad2b 	beq.w	800a11e <_strtod_l+0x43e>
 800a6c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a7d8 <_strtod_l+0xaf8>
 800a6cc:	f04f 3aff 	mov.w	sl, #4294967295
 800a6d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6d2:	9805      	ldr	r0, [sp, #20]
 800a6d4:	f7fe fe74 	bl	80093c0 <_Bfree>
 800a6d8:	9805      	ldr	r0, [sp, #20]
 800a6da:	4649      	mov	r1, r9
 800a6dc:	f7fe fe70 	bl	80093c0 <_Bfree>
 800a6e0:	9805      	ldr	r0, [sp, #20]
 800a6e2:	4641      	mov	r1, r8
 800a6e4:	f7fe fe6c 	bl	80093c0 <_Bfree>
 800a6e8:	9805      	ldr	r0, [sp, #20]
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	f7fe fe68 	bl	80093c0 <_Bfree>
 800a6f0:	e618      	b.n	800a324 <_strtod_l+0x644>
 800a6f2:	f1ba 0f01 	cmp.w	sl, #1
 800a6f6:	d103      	bne.n	800a700 <_strtod_l+0xa20>
 800a6f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f43f ada5 	beq.w	800a24a <_strtod_l+0x56a>
 800a700:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a7b0 <_strtod_l+0xad0>
 800a704:	4f35      	ldr	r7, [pc, #212]	@ (800a7dc <_strtod_l+0xafc>)
 800a706:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a70a:	2600      	movs	r6, #0
 800a70c:	e7b1      	b.n	800a672 <_strtod_l+0x992>
 800a70e:	4f34      	ldr	r7, [pc, #208]	@ (800a7e0 <_strtod_l+0xb00>)
 800a710:	2600      	movs	r6, #0
 800a712:	e7aa      	b.n	800a66a <_strtod_l+0x98a>
 800a714:	4b32      	ldr	r3, [pc, #200]	@ (800a7e0 <_strtod_l+0xb00>)
 800a716:	4630      	mov	r0, r6
 800a718:	4639      	mov	r1, r7
 800a71a:	2200      	movs	r2, #0
 800a71c:	f7f5 ff94 	bl	8000648 <__aeabi_dmul>
 800a720:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a722:	4606      	mov	r6, r0
 800a724:	460f      	mov	r7, r1
 800a726:	2b00      	cmp	r3, #0
 800a728:	d09f      	beq.n	800a66a <_strtod_l+0x98a>
 800a72a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a72e:	e7a0      	b.n	800a672 <_strtod_l+0x992>
 800a730:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a7b8 <_strtod_l+0xad8>
 800a734:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a738:	ec57 6b17 	vmov	r6, r7, d7
 800a73c:	e799      	b.n	800a672 <_strtod_l+0x992>
 800a73e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a742:	9b08      	ldr	r3, [sp, #32]
 800a744:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1c1      	bne.n	800a6d0 <_strtod_l+0x9f0>
 800a74c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a750:	0d1b      	lsrs	r3, r3, #20
 800a752:	051b      	lsls	r3, r3, #20
 800a754:	429d      	cmp	r5, r3
 800a756:	d1bb      	bne.n	800a6d0 <_strtod_l+0x9f0>
 800a758:	4630      	mov	r0, r6
 800a75a:	4639      	mov	r1, r7
 800a75c:	f7f6 fad4 	bl	8000d08 <__aeabi_d2lz>
 800a760:	f7f5 ff44 	bl	80005ec <__aeabi_l2d>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	4630      	mov	r0, r6
 800a76a:	4639      	mov	r1, r7
 800a76c:	f7f5 fdb4 	bl	80002d8 <__aeabi_dsub>
 800a770:	460b      	mov	r3, r1
 800a772:	4602      	mov	r2, r0
 800a774:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a778:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a77c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a77e:	ea46 060a 	orr.w	r6, r6, sl
 800a782:	431e      	orrs	r6, r3
 800a784:	d06f      	beq.n	800a866 <_strtod_l+0xb86>
 800a786:	a30e      	add	r3, pc, #56	@ (adr r3, 800a7c0 <_strtod_l+0xae0>)
 800a788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78c:	f7f6 f9ce 	bl	8000b2c <__aeabi_dcmplt>
 800a790:	2800      	cmp	r0, #0
 800a792:	f47f accf 	bne.w	800a134 <_strtod_l+0x454>
 800a796:	a30c      	add	r3, pc, #48	@ (adr r3, 800a7c8 <_strtod_l+0xae8>)
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7a0:	f7f6 f9e2 	bl	8000b68 <__aeabi_dcmpgt>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	d093      	beq.n	800a6d0 <_strtod_l+0x9f0>
 800a7a8:	e4c4      	b.n	800a134 <_strtod_l+0x454>
 800a7aa:	bf00      	nop
 800a7ac:	f3af 8000 	nop.w
 800a7b0:	00000000 	.word	0x00000000
 800a7b4:	bff00000 	.word	0xbff00000
 800a7b8:	00000000 	.word	0x00000000
 800a7bc:	3ff00000 	.word	0x3ff00000
 800a7c0:	94a03595 	.word	0x94a03595
 800a7c4:	3fdfffff 	.word	0x3fdfffff
 800a7c8:	35afe535 	.word	0x35afe535
 800a7cc:	3fe00000 	.word	0x3fe00000
 800a7d0:	000fffff 	.word	0x000fffff
 800a7d4:	7ff00000 	.word	0x7ff00000
 800a7d8:	7fefffff 	.word	0x7fefffff
 800a7dc:	3ff00000 	.word	0x3ff00000
 800a7e0:	3fe00000 	.word	0x3fe00000
 800a7e4:	7fe00000 	.word	0x7fe00000
 800a7e8:	7c9fffff 	.word	0x7c9fffff
 800a7ec:	9b08      	ldr	r3, [sp, #32]
 800a7ee:	b323      	cbz	r3, 800a83a <_strtod_l+0xb5a>
 800a7f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a7f4:	d821      	bhi.n	800a83a <_strtod_l+0xb5a>
 800a7f6:	a328      	add	r3, pc, #160	@ (adr r3, 800a898 <_strtod_l+0xbb8>)
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	4639      	mov	r1, r7
 800a800:	f7f6 f99e 	bl	8000b40 <__aeabi_dcmple>
 800a804:	b1a0      	cbz	r0, 800a830 <_strtod_l+0xb50>
 800a806:	4639      	mov	r1, r7
 800a808:	4630      	mov	r0, r6
 800a80a:	f7f6 f9f5 	bl	8000bf8 <__aeabi_d2uiz>
 800a80e:	2801      	cmp	r0, #1
 800a810:	bf38      	it	cc
 800a812:	2001      	movcc	r0, #1
 800a814:	f7f5 fe9e 	bl	8000554 <__aeabi_ui2d>
 800a818:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a81a:	4606      	mov	r6, r0
 800a81c:	460f      	mov	r7, r1
 800a81e:	b9fb      	cbnz	r3, 800a860 <_strtod_l+0xb80>
 800a820:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a824:	9014      	str	r0, [sp, #80]	@ 0x50
 800a826:	9315      	str	r3, [sp, #84]	@ 0x54
 800a828:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a82c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a830:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a832:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a836:	1b5b      	subs	r3, r3, r5
 800a838:	9311      	str	r3, [sp, #68]	@ 0x44
 800a83a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a83e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a842:	f7ff f8f1 	bl	8009a28 <__ulp>
 800a846:	4650      	mov	r0, sl
 800a848:	ec53 2b10 	vmov	r2, r3, d0
 800a84c:	4659      	mov	r1, fp
 800a84e:	f7f5 fefb 	bl	8000648 <__aeabi_dmul>
 800a852:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a856:	f7f5 fd41 	bl	80002dc <__adddf3>
 800a85a:	4682      	mov	sl, r0
 800a85c:	468b      	mov	fp, r1
 800a85e:	e770      	b.n	800a742 <_strtod_l+0xa62>
 800a860:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a864:	e7e0      	b.n	800a828 <_strtod_l+0xb48>
 800a866:	a30e      	add	r3, pc, #56	@ (adr r3, 800a8a0 <_strtod_l+0xbc0>)
 800a868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86c:	f7f6 f95e 	bl	8000b2c <__aeabi_dcmplt>
 800a870:	e798      	b.n	800a7a4 <_strtod_l+0xac4>
 800a872:	2300      	movs	r3, #0
 800a874:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a876:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a878:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a87a:	6013      	str	r3, [r2, #0]
 800a87c:	f7ff ba6d 	b.w	8009d5a <_strtod_l+0x7a>
 800a880:	2a65      	cmp	r2, #101	@ 0x65
 800a882:	f43f ab66 	beq.w	8009f52 <_strtod_l+0x272>
 800a886:	2a45      	cmp	r2, #69	@ 0x45
 800a888:	f43f ab63 	beq.w	8009f52 <_strtod_l+0x272>
 800a88c:	2301      	movs	r3, #1
 800a88e:	f7ff bb9e 	b.w	8009fce <_strtod_l+0x2ee>
 800a892:	bf00      	nop
 800a894:	f3af 8000 	nop.w
 800a898:	ffc00000 	.word	0xffc00000
 800a89c:	41dfffff 	.word	0x41dfffff
 800a8a0:	94a03595 	.word	0x94a03595
 800a8a4:	3fcfffff 	.word	0x3fcfffff

0800a8a8 <_strtod_r>:
 800a8a8:	4b01      	ldr	r3, [pc, #4]	@ (800a8b0 <_strtod_r+0x8>)
 800a8aa:	f7ff ba19 	b.w	8009ce0 <_strtod_l>
 800a8ae:	bf00      	nop
 800a8b0:	20000068 	.word	0x20000068

0800a8b4 <_strtol_l.constprop.0>:
 800a8b4:	2b24      	cmp	r3, #36	@ 0x24
 800a8b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ba:	4686      	mov	lr, r0
 800a8bc:	4690      	mov	r8, r2
 800a8be:	d801      	bhi.n	800a8c4 <_strtol_l.constprop.0+0x10>
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d106      	bne.n	800a8d2 <_strtol_l.constprop.0+0x1e>
 800a8c4:	f7fd fdba 	bl	800843c <__errno>
 800a8c8:	2316      	movs	r3, #22
 800a8ca:	6003      	str	r3, [r0, #0]
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d2:	4834      	ldr	r0, [pc, #208]	@ (800a9a4 <_strtol_l.constprop.0+0xf0>)
 800a8d4:	460d      	mov	r5, r1
 800a8d6:	462a      	mov	r2, r5
 800a8d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8dc:	5d06      	ldrb	r6, [r0, r4]
 800a8de:	f016 0608 	ands.w	r6, r6, #8
 800a8e2:	d1f8      	bne.n	800a8d6 <_strtol_l.constprop.0+0x22>
 800a8e4:	2c2d      	cmp	r4, #45	@ 0x2d
 800a8e6:	d12d      	bne.n	800a944 <_strtol_l.constprop.0+0x90>
 800a8e8:	782c      	ldrb	r4, [r5, #0]
 800a8ea:	2601      	movs	r6, #1
 800a8ec:	1c95      	adds	r5, r2, #2
 800a8ee:	f033 0210 	bics.w	r2, r3, #16
 800a8f2:	d109      	bne.n	800a908 <_strtol_l.constprop.0+0x54>
 800a8f4:	2c30      	cmp	r4, #48	@ 0x30
 800a8f6:	d12a      	bne.n	800a94e <_strtol_l.constprop.0+0x9a>
 800a8f8:	782a      	ldrb	r2, [r5, #0]
 800a8fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a8fe:	2a58      	cmp	r2, #88	@ 0x58
 800a900:	d125      	bne.n	800a94e <_strtol_l.constprop.0+0x9a>
 800a902:	786c      	ldrb	r4, [r5, #1]
 800a904:	2310      	movs	r3, #16
 800a906:	3502      	adds	r5, #2
 800a908:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a90c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a910:	2200      	movs	r2, #0
 800a912:	fbbc f9f3 	udiv	r9, ip, r3
 800a916:	4610      	mov	r0, r2
 800a918:	fb03 ca19 	mls	sl, r3, r9, ip
 800a91c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a920:	2f09      	cmp	r7, #9
 800a922:	d81b      	bhi.n	800a95c <_strtol_l.constprop.0+0xa8>
 800a924:	463c      	mov	r4, r7
 800a926:	42a3      	cmp	r3, r4
 800a928:	dd27      	ble.n	800a97a <_strtol_l.constprop.0+0xc6>
 800a92a:	1c57      	adds	r7, r2, #1
 800a92c:	d007      	beq.n	800a93e <_strtol_l.constprop.0+0x8a>
 800a92e:	4581      	cmp	r9, r0
 800a930:	d320      	bcc.n	800a974 <_strtol_l.constprop.0+0xc0>
 800a932:	d101      	bne.n	800a938 <_strtol_l.constprop.0+0x84>
 800a934:	45a2      	cmp	sl, r4
 800a936:	db1d      	blt.n	800a974 <_strtol_l.constprop.0+0xc0>
 800a938:	fb00 4003 	mla	r0, r0, r3, r4
 800a93c:	2201      	movs	r2, #1
 800a93e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a942:	e7eb      	b.n	800a91c <_strtol_l.constprop.0+0x68>
 800a944:	2c2b      	cmp	r4, #43	@ 0x2b
 800a946:	bf04      	itt	eq
 800a948:	782c      	ldrbeq	r4, [r5, #0]
 800a94a:	1c95      	addeq	r5, r2, #2
 800a94c:	e7cf      	b.n	800a8ee <_strtol_l.constprop.0+0x3a>
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1da      	bne.n	800a908 <_strtol_l.constprop.0+0x54>
 800a952:	2c30      	cmp	r4, #48	@ 0x30
 800a954:	bf0c      	ite	eq
 800a956:	2308      	moveq	r3, #8
 800a958:	230a      	movne	r3, #10
 800a95a:	e7d5      	b.n	800a908 <_strtol_l.constprop.0+0x54>
 800a95c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a960:	2f19      	cmp	r7, #25
 800a962:	d801      	bhi.n	800a968 <_strtol_l.constprop.0+0xb4>
 800a964:	3c37      	subs	r4, #55	@ 0x37
 800a966:	e7de      	b.n	800a926 <_strtol_l.constprop.0+0x72>
 800a968:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a96c:	2f19      	cmp	r7, #25
 800a96e:	d804      	bhi.n	800a97a <_strtol_l.constprop.0+0xc6>
 800a970:	3c57      	subs	r4, #87	@ 0x57
 800a972:	e7d8      	b.n	800a926 <_strtol_l.constprop.0+0x72>
 800a974:	f04f 32ff 	mov.w	r2, #4294967295
 800a978:	e7e1      	b.n	800a93e <_strtol_l.constprop.0+0x8a>
 800a97a:	1c53      	adds	r3, r2, #1
 800a97c:	d108      	bne.n	800a990 <_strtol_l.constprop.0+0xdc>
 800a97e:	2322      	movs	r3, #34	@ 0x22
 800a980:	f8ce 3000 	str.w	r3, [lr]
 800a984:	4660      	mov	r0, ip
 800a986:	f1b8 0f00 	cmp.w	r8, #0
 800a98a:	d0a0      	beq.n	800a8ce <_strtol_l.constprop.0+0x1a>
 800a98c:	1e69      	subs	r1, r5, #1
 800a98e:	e006      	b.n	800a99e <_strtol_l.constprop.0+0xea>
 800a990:	b106      	cbz	r6, 800a994 <_strtol_l.constprop.0+0xe0>
 800a992:	4240      	negs	r0, r0
 800a994:	f1b8 0f00 	cmp.w	r8, #0
 800a998:	d099      	beq.n	800a8ce <_strtol_l.constprop.0+0x1a>
 800a99a:	2a00      	cmp	r2, #0
 800a99c:	d1f6      	bne.n	800a98c <_strtol_l.constprop.0+0xd8>
 800a99e:	f8c8 1000 	str.w	r1, [r8]
 800a9a2:	e794      	b.n	800a8ce <_strtol_l.constprop.0+0x1a>
 800a9a4:	0800be89 	.word	0x0800be89

0800a9a8 <_strtol_r>:
 800a9a8:	f7ff bf84 	b.w	800a8b4 <_strtol_l.constprop.0>

0800a9ac <__ssputs_r>:
 800a9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b0:	688e      	ldr	r6, [r1, #8]
 800a9b2:	461f      	mov	r7, r3
 800a9b4:	42be      	cmp	r6, r7
 800a9b6:	680b      	ldr	r3, [r1, #0]
 800a9b8:	4682      	mov	sl, r0
 800a9ba:	460c      	mov	r4, r1
 800a9bc:	4690      	mov	r8, r2
 800a9be:	d82d      	bhi.n	800aa1c <__ssputs_r+0x70>
 800a9c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a9c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a9c8:	d026      	beq.n	800aa18 <__ssputs_r+0x6c>
 800a9ca:	6965      	ldr	r5, [r4, #20]
 800a9cc:	6909      	ldr	r1, [r1, #16]
 800a9ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9d2:	eba3 0901 	sub.w	r9, r3, r1
 800a9d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9da:	1c7b      	adds	r3, r7, #1
 800a9dc:	444b      	add	r3, r9
 800a9de:	106d      	asrs	r5, r5, #1
 800a9e0:	429d      	cmp	r5, r3
 800a9e2:	bf38      	it	cc
 800a9e4:	461d      	movcc	r5, r3
 800a9e6:	0553      	lsls	r3, r2, #21
 800a9e8:	d527      	bpl.n	800aa3a <__ssputs_r+0x8e>
 800a9ea:	4629      	mov	r1, r5
 800a9ec:	f7fe fc1c 	bl	8009228 <_malloc_r>
 800a9f0:	4606      	mov	r6, r0
 800a9f2:	b360      	cbz	r0, 800aa4e <__ssputs_r+0xa2>
 800a9f4:	6921      	ldr	r1, [r4, #16]
 800a9f6:	464a      	mov	r2, r9
 800a9f8:	f000 fa18 	bl	800ae2c <memcpy>
 800a9fc:	89a3      	ldrh	r3, [r4, #12]
 800a9fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aa02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa06:	81a3      	strh	r3, [r4, #12]
 800aa08:	6126      	str	r6, [r4, #16]
 800aa0a:	6165      	str	r5, [r4, #20]
 800aa0c:	444e      	add	r6, r9
 800aa0e:	eba5 0509 	sub.w	r5, r5, r9
 800aa12:	6026      	str	r6, [r4, #0]
 800aa14:	60a5      	str	r5, [r4, #8]
 800aa16:	463e      	mov	r6, r7
 800aa18:	42be      	cmp	r6, r7
 800aa1a:	d900      	bls.n	800aa1e <__ssputs_r+0x72>
 800aa1c:	463e      	mov	r6, r7
 800aa1e:	6820      	ldr	r0, [r4, #0]
 800aa20:	4632      	mov	r2, r6
 800aa22:	4641      	mov	r1, r8
 800aa24:	f000 f9c6 	bl	800adb4 <memmove>
 800aa28:	68a3      	ldr	r3, [r4, #8]
 800aa2a:	1b9b      	subs	r3, r3, r6
 800aa2c:	60a3      	str	r3, [r4, #8]
 800aa2e:	6823      	ldr	r3, [r4, #0]
 800aa30:	4433      	add	r3, r6
 800aa32:	6023      	str	r3, [r4, #0]
 800aa34:	2000      	movs	r0, #0
 800aa36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa3a:	462a      	mov	r2, r5
 800aa3c:	f000 fd89 	bl	800b552 <_realloc_r>
 800aa40:	4606      	mov	r6, r0
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d1e0      	bne.n	800aa08 <__ssputs_r+0x5c>
 800aa46:	6921      	ldr	r1, [r4, #16]
 800aa48:	4650      	mov	r0, sl
 800aa4a:	f7fe fb79 	bl	8009140 <_free_r>
 800aa4e:	230c      	movs	r3, #12
 800aa50:	f8ca 3000 	str.w	r3, [sl]
 800aa54:	89a3      	ldrh	r3, [r4, #12]
 800aa56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa5a:	81a3      	strh	r3, [r4, #12]
 800aa5c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa60:	e7e9      	b.n	800aa36 <__ssputs_r+0x8a>
	...

0800aa64 <_svfiprintf_r>:
 800aa64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa68:	4698      	mov	r8, r3
 800aa6a:	898b      	ldrh	r3, [r1, #12]
 800aa6c:	061b      	lsls	r3, r3, #24
 800aa6e:	b09d      	sub	sp, #116	@ 0x74
 800aa70:	4607      	mov	r7, r0
 800aa72:	460d      	mov	r5, r1
 800aa74:	4614      	mov	r4, r2
 800aa76:	d510      	bpl.n	800aa9a <_svfiprintf_r+0x36>
 800aa78:	690b      	ldr	r3, [r1, #16]
 800aa7a:	b973      	cbnz	r3, 800aa9a <_svfiprintf_r+0x36>
 800aa7c:	2140      	movs	r1, #64	@ 0x40
 800aa7e:	f7fe fbd3 	bl	8009228 <_malloc_r>
 800aa82:	6028      	str	r0, [r5, #0]
 800aa84:	6128      	str	r0, [r5, #16]
 800aa86:	b930      	cbnz	r0, 800aa96 <_svfiprintf_r+0x32>
 800aa88:	230c      	movs	r3, #12
 800aa8a:	603b      	str	r3, [r7, #0]
 800aa8c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa90:	b01d      	add	sp, #116	@ 0x74
 800aa92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa96:	2340      	movs	r3, #64	@ 0x40
 800aa98:	616b      	str	r3, [r5, #20]
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa9e:	2320      	movs	r3, #32
 800aaa0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aaa4:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaa8:	2330      	movs	r3, #48	@ 0x30
 800aaaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ac48 <_svfiprintf_r+0x1e4>
 800aaae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aab2:	f04f 0901 	mov.w	r9, #1
 800aab6:	4623      	mov	r3, r4
 800aab8:	469a      	mov	sl, r3
 800aaba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aabe:	b10a      	cbz	r2, 800aac4 <_svfiprintf_r+0x60>
 800aac0:	2a25      	cmp	r2, #37	@ 0x25
 800aac2:	d1f9      	bne.n	800aab8 <_svfiprintf_r+0x54>
 800aac4:	ebba 0b04 	subs.w	fp, sl, r4
 800aac8:	d00b      	beq.n	800aae2 <_svfiprintf_r+0x7e>
 800aaca:	465b      	mov	r3, fp
 800aacc:	4622      	mov	r2, r4
 800aace:	4629      	mov	r1, r5
 800aad0:	4638      	mov	r0, r7
 800aad2:	f7ff ff6b 	bl	800a9ac <__ssputs_r>
 800aad6:	3001      	adds	r0, #1
 800aad8:	f000 80a7 	beq.w	800ac2a <_svfiprintf_r+0x1c6>
 800aadc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aade:	445a      	add	r2, fp
 800aae0:	9209      	str	r2, [sp, #36]	@ 0x24
 800aae2:	f89a 3000 	ldrb.w	r3, [sl]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	f000 809f 	beq.w	800ac2a <_svfiprintf_r+0x1c6>
 800aaec:	2300      	movs	r3, #0
 800aaee:	f04f 32ff 	mov.w	r2, #4294967295
 800aaf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaf6:	f10a 0a01 	add.w	sl, sl, #1
 800aafa:	9304      	str	r3, [sp, #16]
 800aafc:	9307      	str	r3, [sp, #28]
 800aafe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab02:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab04:	4654      	mov	r4, sl
 800ab06:	2205      	movs	r2, #5
 800ab08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab0c:	484e      	ldr	r0, [pc, #312]	@ (800ac48 <_svfiprintf_r+0x1e4>)
 800ab0e:	f7f5 fb87 	bl	8000220 <memchr>
 800ab12:	9a04      	ldr	r2, [sp, #16]
 800ab14:	b9d8      	cbnz	r0, 800ab4e <_svfiprintf_r+0xea>
 800ab16:	06d0      	lsls	r0, r2, #27
 800ab18:	bf44      	itt	mi
 800ab1a:	2320      	movmi	r3, #32
 800ab1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab20:	0711      	lsls	r1, r2, #28
 800ab22:	bf44      	itt	mi
 800ab24:	232b      	movmi	r3, #43	@ 0x2b
 800ab26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab2a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab30:	d015      	beq.n	800ab5e <_svfiprintf_r+0xfa>
 800ab32:	9a07      	ldr	r2, [sp, #28]
 800ab34:	4654      	mov	r4, sl
 800ab36:	2000      	movs	r0, #0
 800ab38:	f04f 0c0a 	mov.w	ip, #10
 800ab3c:	4621      	mov	r1, r4
 800ab3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab42:	3b30      	subs	r3, #48	@ 0x30
 800ab44:	2b09      	cmp	r3, #9
 800ab46:	d94b      	bls.n	800abe0 <_svfiprintf_r+0x17c>
 800ab48:	b1b0      	cbz	r0, 800ab78 <_svfiprintf_r+0x114>
 800ab4a:	9207      	str	r2, [sp, #28]
 800ab4c:	e014      	b.n	800ab78 <_svfiprintf_r+0x114>
 800ab4e:	eba0 0308 	sub.w	r3, r0, r8
 800ab52:	fa09 f303 	lsl.w	r3, r9, r3
 800ab56:	4313      	orrs	r3, r2
 800ab58:	9304      	str	r3, [sp, #16]
 800ab5a:	46a2      	mov	sl, r4
 800ab5c:	e7d2      	b.n	800ab04 <_svfiprintf_r+0xa0>
 800ab5e:	9b03      	ldr	r3, [sp, #12]
 800ab60:	1d19      	adds	r1, r3, #4
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	9103      	str	r1, [sp, #12]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	bfbb      	ittet	lt
 800ab6a:	425b      	neglt	r3, r3
 800ab6c:	f042 0202 	orrlt.w	r2, r2, #2
 800ab70:	9307      	strge	r3, [sp, #28]
 800ab72:	9307      	strlt	r3, [sp, #28]
 800ab74:	bfb8      	it	lt
 800ab76:	9204      	strlt	r2, [sp, #16]
 800ab78:	7823      	ldrb	r3, [r4, #0]
 800ab7a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab7c:	d10a      	bne.n	800ab94 <_svfiprintf_r+0x130>
 800ab7e:	7863      	ldrb	r3, [r4, #1]
 800ab80:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab82:	d132      	bne.n	800abea <_svfiprintf_r+0x186>
 800ab84:	9b03      	ldr	r3, [sp, #12]
 800ab86:	1d1a      	adds	r2, r3, #4
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	9203      	str	r2, [sp, #12]
 800ab8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab90:	3402      	adds	r4, #2
 800ab92:	9305      	str	r3, [sp, #20]
 800ab94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ac58 <_svfiprintf_r+0x1f4>
 800ab98:	7821      	ldrb	r1, [r4, #0]
 800ab9a:	2203      	movs	r2, #3
 800ab9c:	4650      	mov	r0, sl
 800ab9e:	f7f5 fb3f 	bl	8000220 <memchr>
 800aba2:	b138      	cbz	r0, 800abb4 <_svfiprintf_r+0x150>
 800aba4:	9b04      	ldr	r3, [sp, #16]
 800aba6:	eba0 000a 	sub.w	r0, r0, sl
 800abaa:	2240      	movs	r2, #64	@ 0x40
 800abac:	4082      	lsls	r2, r0
 800abae:	4313      	orrs	r3, r2
 800abb0:	3401      	adds	r4, #1
 800abb2:	9304      	str	r3, [sp, #16]
 800abb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abb8:	4824      	ldr	r0, [pc, #144]	@ (800ac4c <_svfiprintf_r+0x1e8>)
 800abba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800abbe:	2206      	movs	r2, #6
 800abc0:	f7f5 fb2e 	bl	8000220 <memchr>
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d036      	beq.n	800ac36 <_svfiprintf_r+0x1d2>
 800abc8:	4b21      	ldr	r3, [pc, #132]	@ (800ac50 <_svfiprintf_r+0x1ec>)
 800abca:	bb1b      	cbnz	r3, 800ac14 <_svfiprintf_r+0x1b0>
 800abcc:	9b03      	ldr	r3, [sp, #12]
 800abce:	3307      	adds	r3, #7
 800abd0:	f023 0307 	bic.w	r3, r3, #7
 800abd4:	3308      	adds	r3, #8
 800abd6:	9303      	str	r3, [sp, #12]
 800abd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abda:	4433      	add	r3, r6
 800abdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800abde:	e76a      	b.n	800aab6 <_svfiprintf_r+0x52>
 800abe0:	fb0c 3202 	mla	r2, ip, r2, r3
 800abe4:	460c      	mov	r4, r1
 800abe6:	2001      	movs	r0, #1
 800abe8:	e7a8      	b.n	800ab3c <_svfiprintf_r+0xd8>
 800abea:	2300      	movs	r3, #0
 800abec:	3401      	adds	r4, #1
 800abee:	9305      	str	r3, [sp, #20]
 800abf0:	4619      	mov	r1, r3
 800abf2:	f04f 0c0a 	mov.w	ip, #10
 800abf6:	4620      	mov	r0, r4
 800abf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abfc:	3a30      	subs	r2, #48	@ 0x30
 800abfe:	2a09      	cmp	r2, #9
 800ac00:	d903      	bls.n	800ac0a <_svfiprintf_r+0x1a6>
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d0c6      	beq.n	800ab94 <_svfiprintf_r+0x130>
 800ac06:	9105      	str	r1, [sp, #20]
 800ac08:	e7c4      	b.n	800ab94 <_svfiprintf_r+0x130>
 800ac0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac0e:	4604      	mov	r4, r0
 800ac10:	2301      	movs	r3, #1
 800ac12:	e7f0      	b.n	800abf6 <_svfiprintf_r+0x192>
 800ac14:	ab03      	add	r3, sp, #12
 800ac16:	9300      	str	r3, [sp, #0]
 800ac18:	462a      	mov	r2, r5
 800ac1a:	4b0e      	ldr	r3, [pc, #56]	@ (800ac54 <_svfiprintf_r+0x1f0>)
 800ac1c:	a904      	add	r1, sp, #16
 800ac1e:	4638      	mov	r0, r7
 800ac20:	f7fc fcc8 	bl	80075b4 <_printf_float>
 800ac24:	1c42      	adds	r2, r0, #1
 800ac26:	4606      	mov	r6, r0
 800ac28:	d1d6      	bne.n	800abd8 <_svfiprintf_r+0x174>
 800ac2a:	89ab      	ldrh	r3, [r5, #12]
 800ac2c:	065b      	lsls	r3, r3, #25
 800ac2e:	f53f af2d 	bmi.w	800aa8c <_svfiprintf_r+0x28>
 800ac32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac34:	e72c      	b.n	800aa90 <_svfiprintf_r+0x2c>
 800ac36:	ab03      	add	r3, sp, #12
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	462a      	mov	r2, r5
 800ac3c:	4b05      	ldr	r3, [pc, #20]	@ (800ac54 <_svfiprintf_r+0x1f0>)
 800ac3e:	a904      	add	r1, sp, #16
 800ac40:	4638      	mov	r0, r7
 800ac42:	f7fc ff4f 	bl	8007ae4 <_printf_i>
 800ac46:	e7ed      	b.n	800ac24 <_svfiprintf_r+0x1c0>
 800ac48:	0800bf89 	.word	0x0800bf89
 800ac4c:	0800bf93 	.word	0x0800bf93
 800ac50:	080075b5 	.word	0x080075b5
 800ac54:	0800a9ad 	.word	0x0800a9ad
 800ac58:	0800bf8f 	.word	0x0800bf8f

0800ac5c <__sflush_r>:
 800ac5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac64:	0716      	lsls	r6, r2, #28
 800ac66:	4605      	mov	r5, r0
 800ac68:	460c      	mov	r4, r1
 800ac6a:	d454      	bmi.n	800ad16 <__sflush_r+0xba>
 800ac6c:	684b      	ldr	r3, [r1, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	dc02      	bgt.n	800ac78 <__sflush_r+0x1c>
 800ac72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	dd48      	ble.n	800ad0a <__sflush_r+0xae>
 800ac78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac7a:	2e00      	cmp	r6, #0
 800ac7c:	d045      	beq.n	800ad0a <__sflush_r+0xae>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac84:	682f      	ldr	r7, [r5, #0]
 800ac86:	6a21      	ldr	r1, [r4, #32]
 800ac88:	602b      	str	r3, [r5, #0]
 800ac8a:	d030      	beq.n	800acee <__sflush_r+0x92>
 800ac8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac8e:	89a3      	ldrh	r3, [r4, #12]
 800ac90:	0759      	lsls	r1, r3, #29
 800ac92:	d505      	bpl.n	800aca0 <__sflush_r+0x44>
 800ac94:	6863      	ldr	r3, [r4, #4]
 800ac96:	1ad2      	subs	r2, r2, r3
 800ac98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac9a:	b10b      	cbz	r3, 800aca0 <__sflush_r+0x44>
 800ac9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac9e:	1ad2      	subs	r2, r2, r3
 800aca0:	2300      	movs	r3, #0
 800aca2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aca4:	6a21      	ldr	r1, [r4, #32]
 800aca6:	4628      	mov	r0, r5
 800aca8:	47b0      	blx	r6
 800acaa:	1c43      	adds	r3, r0, #1
 800acac:	89a3      	ldrh	r3, [r4, #12]
 800acae:	d106      	bne.n	800acbe <__sflush_r+0x62>
 800acb0:	6829      	ldr	r1, [r5, #0]
 800acb2:	291d      	cmp	r1, #29
 800acb4:	d82b      	bhi.n	800ad0e <__sflush_r+0xb2>
 800acb6:	4a2a      	ldr	r2, [pc, #168]	@ (800ad60 <__sflush_r+0x104>)
 800acb8:	410a      	asrs	r2, r1
 800acba:	07d6      	lsls	r6, r2, #31
 800acbc:	d427      	bmi.n	800ad0e <__sflush_r+0xb2>
 800acbe:	2200      	movs	r2, #0
 800acc0:	6062      	str	r2, [r4, #4]
 800acc2:	04d9      	lsls	r1, r3, #19
 800acc4:	6922      	ldr	r2, [r4, #16]
 800acc6:	6022      	str	r2, [r4, #0]
 800acc8:	d504      	bpl.n	800acd4 <__sflush_r+0x78>
 800acca:	1c42      	adds	r2, r0, #1
 800accc:	d101      	bne.n	800acd2 <__sflush_r+0x76>
 800acce:	682b      	ldr	r3, [r5, #0]
 800acd0:	b903      	cbnz	r3, 800acd4 <__sflush_r+0x78>
 800acd2:	6560      	str	r0, [r4, #84]	@ 0x54
 800acd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800acd6:	602f      	str	r7, [r5, #0]
 800acd8:	b1b9      	cbz	r1, 800ad0a <__sflush_r+0xae>
 800acda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800acde:	4299      	cmp	r1, r3
 800ace0:	d002      	beq.n	800ace8 <__sflush_r+0x8c>
 800ace2:	4628      	mov	r0, r5
 800ace4:	f7fe fa2c 	bl	8009140 <_free_r>
 800ace8:	2300      	movs	r3, #0
 800acea:	6363      	str	r3, [r4, #52]	@ 0x34
 800acec:	e00d      	b.n	800ad0a <__sflush_r+0xae>
 800acee:	2301      	movs	r3, #1
 800acf0:	4628      	mov	r0, r5
 800acf2:	47b0      	blx	r6
 800acf4:	4602      	mov	r2, r0
 800acf6:	1c50      	adds	r0, r2, #1
 800acf8:	d1c9      	bne.n	800ac8e <__sflush_r+0x32>
 800acfa:	682b      	ldr	r3, [r5, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d0c6      	beq.n	800ac8e <__sflush_r+0x32>
 800ad00:	2b1d      	cmp	r3, #29
 800ad02:	d001      	beq.n	800ad08 <__sflush_r+0xac>
 800ad04:	2b16      	cmp	r3, #22
 800ad06:	d11e      	bne.n	800ad46 <__sflush_r+0xea>
 800ad08:	602f      	str	r7, [r5, #0]
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	e022      	b.n	800ad54 <__sflush_r+0xf8>
 800ad0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad12:	b21b      	sxth	r3, r3
 800ad14:	e01b      	b.n	800ad4e <__sflush_r+0xf2>
 800ad16:	690f      	ldr	r7, [r1, #16]
 800ad18:	2f00      	cmp	r7, #0
 800ad1a:	d0f6      	beq.n	800ad0a <__sflush_r+0xae>
 800ad1c:	0793      	lsls	r3, r2, #30
 800ad1e:	680e      	ldr	r6, [r1, #0]
 800ad20:	bf08      	it	eq
 800ad22:	694b      	ldreq	r3, [r1, #20]
 800ad24:	600f      	str	r7, [r1, #0]
 800ad26:	bf18      	it	ne
 800ad28:	2300      	movne	r3, #0
 800ad2a:	eba6 0807 	sub.w	r8, r6, r7
 800ad2e:	608b      	str	r3, [r1, #8]
 800ad30:	f1b8 0f00 	cmp.w	r8, #0
 800ad34:	dde9      	ble.n	800ad0a <__sflush_r+0xae>
 800ad36:	6a21      	ldr	r1, [r4, #32]
 800ad38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ad3a:	4643      	mov	r3, r8
 800ad3c:	463a      	mov	r2, r7
 800ad3e:	4628      	mov	r0, r5
 800ad40:	47b0      	blx	r6
 800ad42:	2800      	cmp	r0, #0
 800ad44:	dc08      	bgt.n	800ad58 <__sflush_r+0xfc>
 800ad46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad4e:	81a3      	strh	r3, [r4, #12]
 800ad50:	f04f 30ff 	mov.w	r0, #4294967295
 800ad54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad58:	4407      	add	r7, r0
 800ad5a:	eba8 0800 	sub.w	r8, r8, r0
 800ad5e:	e7e7      	b.n	800ad30 <__sflush_r+0xd4>
 800ad60:	dfbffffe 	.word	0xdfbffffe

0800ad64 <_fflush_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	690b      	ldr	r3, [r1, #16]
 800ad68:	4605      	mov	r5, r0
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	b913      	cbnz	r3, 800ad74 <_fflush_r+0x10>
 800ad6e:	2500      	movs	r5, #0
 800ad70:	4628      	mov	r0, r5
 800ad72:	bd38      	pop	{r3, r4, r5, pc}
 800ad74:	b118      	cbz	r0, 800ad7e <_fflush_r+0x1a>
 800ad76:	6a03      	ldr	r3, [r0, #32]
 800ad78:	b90b      	cbnz	r3, 800ad7e <_fflush_r+0x1a>
 800ad7a:	f7fd fa73 	bl	8008264 <__sinit>
 800ad7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d0f3      	beq.n	800ad6e <_fflush_r+0xa>
 800ad86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad88:	07d0      	lsls	r0, r2, #31
 800ad8a:	d404      	bmi.n	800ad96 <_fflush_r+0x32>
 800ad8c:	0599      	lsls	r1, r3, #22
 800ad8e:	d402      	bmi.n	800ad96 <_fflush_r+0x32>
 800ad90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad92:	f7fd fb7e 	bl	8008492 <__retarget_lock_acquire_recursive>
 800ad96:	4628      	mov	r0, r5
 800ad98:	4621      	mov	r1, r4
 800ad9a:	f7ff ff5f 	bl	800ac5c <__sflush_r>
 800ad9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ada0:	07da      	lsls	r2, r3, #31
 800ada2:	4605      	mov	r5, r0
 800ada4:	d4e4      	bmi.n	800ad70 <_fflush_r+0xc>
 800ada6:	89a3      	ldrh	r3, [r4, #12]
 800ada8:	059b      	lsls	r3, r3, #22
 800adaa:	d4e1      	bmi.n	800ad70 <_fflush_r+0xc>
 800adac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800adae:	f7fd fb71 	bl	8008494 <__retarget_lock_release_recursive>
 800adb2:	e7dd      	b.n	800ad70 <_fflush_r+0xc>

0800adb4 <memmove>:
 800adb4:	4288      	cmp	r0, r1
 800adb6:	b510      	push	{r4, lr}
 800adb8:	eb01 0402 	add.w	r4, r1, r2
 800adbc:	d902      	bls.n	800adc4 <memmove+0x10>
 800adbe:	4284      	cmp	r4, r0
 800adc0:	4623      	mov	r3, r4
 800adc2:	d807      	bhi.n	800add4 <memmove+0x20>
 800adc4:	1e43      	subs	r3, r0, #1
 800adc6:	42a1      	cmp	r1, r4
 800adc8:	d008      	beq.n	800addc <memmove+0x28>
 800adca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800add2:	e7f8      	b.n	800adc6 <memmove+0x12>
 800add4:	4402      	add	r2, r0
 800add6:	4601      	mov	r1, r0
 800add8:	428a      	cmp	r2, r1
 800adda:	d100      	bne.n	800adde <memmove+0x2a>
 800addc:	bd10      	pop	{r4, pc}
 800adde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ade2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ade6:	e7f7      	b.n	800add8 <memmove+0x24>

0800ade8 <strncmp>:
 800ade8:	b510      	push	{r4, lr}
 800adea:	b16a      	cbz	r2, 800ae08 <strncmp+0x20>
 800adec:	3901      	subs	r1, #1
 800adee:	1884      	adds	r4, r0, r2
 800adf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adf4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d103      	bne.n	800ae04 <strncmp+0x1c>
 800adfc:	42a0      	cmp	r0, r4
 800adfe:	d001      	beq.n	800ae04 <strncmp+0x1c>
 800ae00:	2a00      	cmp	r2, #0
 800ae02:	d1f5      	bne.n	800adf0 <strncmp+0x8>
 800ae04:	1ad0      	subs	r0, r2, r3
 800ae06:	bd10      	pop	{r4, pc}
 800ae08:	4610      	mov	r0, r2
 800ae0a:	e7fc      	b.n	800ae06 <strncmp+0x1e>

0800ae0c <_sbrk_r>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	4d06      	ldr	r5, [pc, #24]	@ (800ae28 <_sbrk_r+0x1c>)
 800ae10:	2300      	movs	r3, #0
 800ae12:	4604      	mov	r4, r0
 800ae14:	4608      	mov	r0, r1
 800ae16:	602b      	str	r3, [r5, #0]
 800ae18:	f7f6 fda2 	bl	8001960 <_sbrk>
 800ae1c:	1c43      	adds	r3, r0, #1
 800ae1e:	d102      	bne.n	800ae26 <_sbrk_r+0x1a>
 800ae20:	682b      	ldr	r3, [r5, #0]
 800ae22:	b103      	cbz	r3, 800ae26 <_sbrk_r+0x1a>
 800ae24:	6023      	str	r3, [r4, #0]
 800ae26:	bd38      	pop	{r3, r4, r5, pc}
 800ae28:	2000065c 	.word	0x2000065c

0800ae2c <memcpy>:
 800ae2c:	440a      	add	r2, r1
 800ae2e:	4291      	cmp	r1, r2
 800ae30:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae34:	d100      	bne.n	800ae38 <memcpy+0xc>
 800ae36:	4770      	bx	lr
 800ae38:	b510      	push	{r4, lr}
 800ae3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae42:	4291      	cmp	r1, r2
 800ae44:	d1f9      	bne.n	800ae3a <memcpy+0xe>
 800ae46:	bd10      	pop	{r4, pc}

0800ae48 <nan>:
 800ae48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ae50 <nan+0x8>
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	00000000 	.word	0x00000000
 800ae54:	7ff80000 	.word	0x7ff80000

0800ae58 <__assert_func>:
 800ae58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae5a:	4614      	mov	r4, r2
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	4b09      	ldr	r3, [pc, #36]	@ (800ae84 <__assert_func+0x2c>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4605      	mov	r5, r0
 800ae64:	68d8      	ldr	r0, [r3, #12]
 800ae66:	b954      	cbnz	r4, 800ae7e <__assert_func+0x26>
 800ae68:	4b07      	ldr	r3, [pc, #28]	@ (800ae88 <__assert_func+0x30>)
 800ae6a:	461c      	mov	r4, r3
 800ae6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae70:	9100      	str	r1, [sp, #0]
 800ae72:	462b      	mov	r3, r5
 800ae74:	4905      	ldr	r1, [pc, #20]	@ (800ae8c <__assert_func+0x34>)
 800ae76:	f000 fba7 	bl	800b5c8 <fiprintf>
 800ae7a:	f000 fbb7 	bl	800b5ec <abort>
 800ae7e:	4b04      	ldr	r3, [pc, #16]	@ (800ae90 <__assert_func+0x38>)
 800ae80:	e7f4      	b.n	800ae6c <__assert_func+0x14>
 800ae82:	bf00      	nop
 800ae84:	20000018 	.word	0x20000018
 800ae88:	0800bfdd 	.word	0x0800bfdd
 800ae8c:	0800bfaf 	.word	0x0800bfaf
 800ae90:	0800bfa2 	.word	0x0800bfa2

0800ae94 <_calloc_r>:
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	fba1 5402 	umull	r5, r4, r1, r2
 800ae9a:	b93c      	cbnz	r4, 800aeac <_calloc_r+0x18>
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	f7fe f9c3 	bl	8009228 <_malloc_r>
 800aea2:	4606      	mov	r6, r0
 800aea4:	b928      	cbnz	r0, 800aeb2 <_calloc_r+0x1e>
 800aea6:	2600      	movs	r6, #0
 800aea8:	4630      	mov	r0, r6
 800aeaa:	bd70      	pop	{r4, r5, r6, pc}
 800aeac:	220c      	movs	r2, #12
 800aeae:	6002      	str	r2, [r0, #0]
 800aeb0:	e7f9      	b.n	800aea6 <_calloc_r+0x12>
 800aeb2:	462a      	mov	r2, r5
 800aeb4:	4621      	mov	r1, r4
 800aeb6:	f7fd fa6e 	bl	8008396 <memset>
 800aeba:	e7f5      	b.n	800aea8 <_calloc_r+0x14>

0800aebc <rshift>:
 800aebc:	6903      	ldr	r3, [r0, #16]
 800aebe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aec2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aec6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aeca:	f100 0414 	add.w	r4, r0, #20
 800aece:	dd45      	ble.n	800af5c <rshift+0xa0>
 800aed0:	f011 011f 	ands.w	r1, r1, #31
 800aed4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aed8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aedc:	d10c      	bne.n	800aef8 <rshift+0x3c>
 800aede:	f100 0710 	add.w	r7, r0, #16
 800aee2:	4629      	mov	r1, r5
 800aee4:	42b1      	cmp	r1, r6
 800aee6:	d334      	bcc.n	800af52 <rshift+0x96>
 800aee8:	1a9b      	subs	r3, r3, r2
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	1eea      	subs	r2, r5, #3
 800aeee:	4296      	cmp	r6, r2
 800aef0:	bf38      	it	cc
 800aef2:	2300      	movcc	r3, #0
 800aef4:	4423      	add	r3, r4
 800aef6:	e015      	b.n	800af24 <rshift+0x68>
 800aef8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aefc:	f1c1 0820 	rsb	r8, r1, #32
 800af00:	40cf      	lsrs	r7, r1
 800af02:	f105 0e04 	add.w	lr, r5, #4
 800af06:	46a1      	mov	r9, r4
 800af08:	4576      	cmp	r6, lr
 800af0a:	46f4      	mov	ip, lr
 800af0c:	d815      	bhi.n	800af3a <rshift+0x7e>
 800af0e:	1a9a      	subs	r2, r3, r2
 800af10:	0092      	lsls	r2, r2, #2
 800af12:	3a04      	subs	r2, #4
 800af14:	3501      	adds	r5, #1
 800af16:	42ae      	cmp	r6, r5
 800af18:	bf38      	it	cc
 800af1a:	2200      	movcc	r2, #0
 800af1c:	18a3      	adds	r3, r4, r2
 800af1e:	50a7      	str	r7, [r4, r2]
 800af20:	b107      	cbz	r7, 800af24 <rshift+0x68>
 800af22:	3304      	adds	r3, #4
 800af24:	1b1a      	subs	r2, r3, r4
 800af26:	42a3      	cmp	r3, r4
 800af28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af2c:	bf08      	it	eq
 800af2e:	2300      	moveq	r3, #0
 800af30:	6102      	str	r2, [r0, #16]
 800af32:	bf08      	it	eq
 800af34:	6143      	streq	r3, [r0, #20]
 800af36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af3a:	f8dc c000 	ldr.w	ip, [ip]
 800af3e:	fa0c fc08 	lsl.w	ip, ip, r8
 800af42:	ea4c 0707 	orr.w	r7, ip, r7
 800af46:	f849 7b04 	str.w	r7, [r9], #4
 800af4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af4e:	40cf      	lsrs	r7, r1
 800af50:	e7da      	b.n	800af08 <rshift+0x4c>
 800af52:	f851 cb04 	ldr.w	ip, [r1], #4
 800af56:	f847 cf04 	str.w	ip, [r7, #4]!
 800af5a:	e7c3      	b.n	800aee4 <rshift+0x28>
 800af5c:	4623      	mov	r3, r4
 800af5e:	e7e1      	b.n	800af24 <rshift+0x68>

0800af60 <__hexdig_fun>:
 800af60:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800af64:	2b09      	cmp	r3, #9
 800af66:	d802      	bhi.n	800af6e <__hexdig_fun+0xe>
 800af68:	3820      	subs	r0, #32
 800af6a:	b2c0      	uxtb	r0, r0
 800af6c:	4770      	bx	lr
 800af6e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800af72:	2b05      	cmp	r3, #5
 800af74:	d801      	bhi.n	800af7a <__hexdig_fun+0x1a>
 800af76:	3847      	subs	r0, #71	@ 0x47
 800af78:	e7f7      	b.n	800af6a <__hexdig_fun+0xa>
 800af7a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800af7e:	2b05      	cmp	r3, #5
 800af80:	d801      	bhi.n	800af86 <__hexdig_fun+0x26>
 800af82:	3827      	subs	r0, #39	@ 0x27
 800af84:	e7f1      	b.n	800af6a <__hexdig_fun+0xa>
 800af86:	2000      	movs	r0, #0
 800af88:	4770      	bx	lr
	...

0800af8c <__gethex>:
 800af8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af90:	b085      	sub	sp, #20
 800af92:	468a      	mov	sl, r1
 800af94:	9302      	str	r3, [sp, #8]
 800af96:	680b      	ldr	r3, [r1, #0]
 800af98:	9001      	str	r0, [sp, #4]
 800af9a:	4690      	mov	r8, r2
 800af9c:	1c9c      	adds	r4, r3, #2
 800af9e:	46a1      	mov	r9, r4
 800afa0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800afa4:	2830      	cmp	r0, #48	@ 0x30
 800afa6:	d0fa      	beq.n	800af9e <__gethex+0x12>
 800afa8:	eba9 0303 	sub.w	r3, r9, r3
 800afac:	f1a3 0b02 	sub.w	fp, r3, #2
 800afb0:	f7ff ffd6 	bl	800af60 <__hexdig_fun>
 800afb4:	4605      	mov	r5, r0
 800afb6:	2800      	cmp	r0, #0
 800afb8:	d168      	bne.n	800b08c <__gethex+0x100>
 800afba:	49a0      	ldr	r1, [pc, #640]	@ (800b23c <__gethex+0x2b0>)
 800afbc:	2201      	movs	r2, #1
 800afbe:	4648      	mov	r0, r9
 800afc0:	f7ff ff12 	bl	800ade8 <strncmp>
 800afc4:	4607      	mov	r7, r0
 800afc6:	2800      	cmp	r0, #0
 800afc8:	d167      	bne.n	800b09a <__gethex+0x10e>
 800afca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800afce:	4626      	mov	r6, r4
 800afd0:	f7ff ffc6 	bl	800af60 <__hexdig_fun>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d062      	beq.n	800b09e <__gethex+0x112>
 800afd8:	4623      	mov	r3, r4
 800afda:	7818      	ldrb	r0, [r3, #0]
 800afdc:	2830      	cmp	r0, #48	@ 0x30
 800afde:	4699      	mov	r9, r3
 800afe0:	f103 0301 	add.w	r3, r3, #1
 800afe4:	d0f9      	beq.n	800afda <__gethex+0x4e>
 800afe6:	f7ff ffbb 	bl	800af60 <__hexdig_fun>
 800afea:	fab0 f580 	clz	r5, r0
 800afee:	096d      	lsrs	r5, r5, #5
 800aff0:	f04f 0b01 	mov.w	fp, #1
 800aff4:	464a      	mov	r2, r9
 800aff6:	4616      	mov	r6, r2
 800aff8:	3201      	adds	r2, #1
 800affa:	7830      	ldrb	r0, [r6, #0]
 800affc:	f7ff ffb0 	bl	800af60 <__hexdig_fun>
 800b000:	2800      	cmp	r0, #0
 800b002:	d1f8      	bne.n	800aff6 <__gethex+0x6a>
 800b004:	498d      	ldr	r1, [pc, #564]	@ (800b23c <__gethex+0x2b0>)
 800b006:	2201      	movs	r2, #1
 800b008:	4630      	mov	r0, r6
 800b00a:	f7ff feed 	bl	800ade8 <strncmp>
 800b00e:	2800      	cmp	r0, #0
 800b010:	d13f      	bne.n	800b092 <__gethex+0x106>
 800b012:	b944      	cbnz	r4, 800b026 <__gethex+0x9a>
 800b014:	1c74      	adds	r4, r6, #1
 800b016:	4622      	mov	r2, r4
 800b018:	4616      	mov	r6, r2
 800b01a:	3201      	adds	r2, #1
 800b01c:	7830      	ldrb	r0, [r6, #0]
 800b01e:	f7ff ff9f 	bl	800af60 <__hexdig_fun>
 800b022:	2800      	cmp	r0, #0
 800b024:	d1f8      	bne.n	800b018 <__gethex+0x8c>
 800b026:	1ba4      	subs	r4, r4, r6
 800b028:	00a7      	lsls	r7, r4, #2
 800b02a:	7833      	ldrb	r3, [r6, #0]
 800b02c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b030:	2b50      	cmp	r3, #80	@ 0x50
 800b032:	d13e      	bne.n	800b0b2 <__gethex+0x126>
 800b034:	7873      	ldrb	r3, [r6, #1]
 800b036:	2b2b      	cmp	r3, #43	@ 0x2b
 800b038:	d033      	beq.n	800b0a2 <__gethex+0x116>
 800b03a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b03c:	d034      	beq.n	800b0a8 <__gethex+0x11c>
 800b03e:	1c71      	adds	r1, r6, #1
 800b040:	2400      	movs	r4, #0
 800b042:	7808      	ldrb	r0, [r1, #0]
 800b044:	f7ff ff8c 	bl	800af60 <__hexdig_fun>
 800b048:	1e43      	subs	r3, r0, #1
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	2b18      	cmp	r3, #24
 800b04e:	d830      	bhi.n	800b0b2 <__gethex+0x126>
 800b050:	f1a0 0210 	sub.w	r2, r0, #16
 800b054:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b058:	f7ff ff82 	bl	800af60 <__hexdig_fun>
 800b05c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b060:	fa5f fc8c 	uxtb.w	ip, ip
 800b064:	f1bc 0f18 	cmp.w	ip, #24
 800b068:	f04f 030a 	mov.w	r3, #10
 800b06c:	d91e      	bls.n	800b0ac <__gethex+0x120>
 800b06e:	b104      	cbz	r4, 800b072 <__gethex+0xe6>
 800b070:	4252      	negs	r2, r2
 800b072:	4417      	add	r7, r2
 800b074:	f8ca 1000 	str.w	r1, [sl]
 800b078:	b1ed      	cbz	r5, 800b0b6 <__gethex+0x12a>
 800b07a:	f1bb 0f00 	cmp.w	fp, #0
 800b07e:	bf0c      	ite	eq
 800b080:	2506      	moveq	r5, #6
 800b082:	2500      	movne	r5, #0
 800b084:	4628      	mov	r0, r5
 800b086:	b005      	add	sp, #20
 800b088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b08c:	2500      	movs	r5, #0
 800b08e:	462c      	mov	r4, r5
 800b090:	e7b0      	b.n	800aff4 <__gethex+0x68>
 800b092:	2c00      	cmp	r4, #0
 800b094:	d1c7      	bne.n	800b026 <__gethex+0x9a>
 800b096:	4627      	mov	r7, r4
 800b098:	e7c7      	b.n	800b02a <__gethex+0x9e>
 800b09a:	464e      	mov	r6, r9
 800b09c:	462f      	mov	r7, r5
 800b09e:	2501      	movs	r5, #1
 800b0a0:	e7c3      	b.n	800b02a <__gethex+0x9e>
 800b0a2:	2400      	movs	r4, #0
 800b0a4:	1cb1      	adds	r1, r6, #2
 800b0a6:	e7cc      	b.n	800b042 <__gethex+0xb6>
 800b0a8:	2401      	movs	r4, #1
 800b0aa:	e7fb      	b.n	800b0a4 <__gethex+0x118>
 800b0ac:	fb03 0002 	mla	r0, r3, r2, r0
 800b0b0:	e7ce      	b.n	800b050 <__gethex+0xc4>
 800b0b2:	4631      	mov	r1, r6
 800b0b4:	e7de      	b.n	800b074 <__gethex+0xe8>
 800b0b6:	eba6 0309 	sub.w	r3, r6, r9
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	4629      	mov	r1, r5
 800b0be:	2b07      	cmp	r3, #7
 800b0c0:	dc0a      	bgt.n	800b0d8 <__gethex+0x14c>
 800b0c2:	9801      	ldr	r0, [sp, #4]
 800b0c4:	f7fe f93c 	bl	8009340 <_Balloc>
 800b0c8:	4604      	mov	r4, r0
 800b0ca:	b940      	cbnz	r0, 800b0de <__gethex+0x152>
 800b0cc:	4b5c      	ldr	r3, [pc, #368]	@ (800b240 <__gethex+0x2b4>)
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	21e4      	movs	r1, #228	@ 0xe4
 800b0d2:	485c      	ldr	r0, [pc, #368]	@ (800b244 <__gethex+0x2b8>)
 800b0d4:	f7ff fec0 	bl	800ae58 <__assert_func>
 800b0d8:	3101      	adds	r1, #1
 800b0da:	105b      	asrs	r3, r3, #1
 800b0dc:	e7ef      	b.n	800b0be <__gethex+0x132>
 800b0de:	f100 0a14 	add.w	sl, r0, #20
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	4655      	mov	r5, sl
 800b0e6:	469b      	mov	fp, r3
 800b0e8:	45b1      	cmp	r9, r6
 800b0ea:	d337      	bcc.n	800b15c <__gethex+0x1d0>
 800b0ec:	f845 bb04 	str.w	fp, [r5], #4
 800b0f0:	eba5 050a 	sub.w	r5, r5, sl
 800b0f4:	10ad      	asrs	r5, r5, #2
 800b0f6:	6125      	str	r5, [r4, #16]
 800b0f8:	4658      	mov	r0, fp
 800b0fa:	f7fe fa13 	bl	8009524 <__hi0bits>
 800b0fe:	016d      	lsls	r5, r5, #5
 800b100:	f8d8 6000 	ldr.w	r6, [r8]
 800b104:	1a2d      	subs	r5, r5, r0
 800b106:	42b5      	cmp	r5, r6
 800b108:	dd54      	ble.n	800b1b4 <__gethex+0x228>
 800b10a:	1bad      	subs	r5, r5, r6
 800b10c:	4629      	mov	r1, r5
 800b10e:	4620      	mov	r0, r4
 800b110:	f7fe fda7 	bl	8009c62 <__any_on>
 800b114:	4681      	mov	r9, r0
 800b116:	b178      	cbz	r0, 800b138 <__gethex+0x1ac>
 800b118:	1e6b      	subs	r3, r5, #1
 800b11a:	1159      	asrs	r1, r3, #5
 800b11c:	f003 021f 	and.w	r2, r3, #31
 800b120:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b124:	f04f 0901 	mov.w	r9, #1
 800b128:	fa09 f202 	lsl.w	r2, r9, r2
 800b12c:	420a      	tst	r2, r1
 800b12e:	d003      	beq.n	800b138 <__gethex+0x1ac>
 800b130:	454b      	cmp	r3, r9
 800b132:	dc36      	bgt.n	800b1a2 <__gethex+0x216>
 800b134:	f04f 0902 	mov.w	r9, #2
 800b138:	4629      	mov	r1, r5
 800b13a:	4620      	mov	r0, r4
 800b13c:	f7ff febe 	bl	800aebc <rshift>
 800b140:	442f      	add	r7, r5
 800b142:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b146:	42bb      	cmp	r3, r7
 800b148:	da42      	bge.n	800b1d0 <__gethex+0x244>
 800b14a:	9801      	ldr	r0, [sp, #4]
 800b14c:	4621      	mov	r1, r4
 800b14e:	f7fe f937 	bl	80093c0 <_Bfree>
 800b152:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b154:	2300      	movs	r3, #0
 800b156:	6013      	str	r3, [r2, #0]
 800b158:	25a3      	movs	r5, #163	@ 0xa3
 800b15a:	e793      	b.n	800b084 <__gethex+0xf8>
 800b15c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b160:	2a2e      	cmp	r2, #46	@ 0x2e
 800b162:	d012      	beq.n	800b18a <__gethex+0x1fe>
 800b164:	2b20      	cmp	r3, #32
 800b166:	d104      	bne.n	800b172 <__gethex+0x1e6>
 800b168:	f845 bb04 	str.w	fp, [r5], #4
 800b16c:	f04f 0b00 	mov.w	fp, #0
 800b170:	465b      	mov	r3, fp
 800b172:	7830      	ldrb	r0, [r6, #0]
 800b174:	9303      	str	r3, [sp, #12]
 800b176:	f7ff fef3 	bl	800af60 <__hexdig_fun>
 800b17a:	9b03      	ldr	r3, [sp, #12]
 800b17c:	f000 000f 	and.w	r0, r0, #15
 800b180:	4098      	lsls	r0, r3
 800b182:	ea4b 0b00 	orr.w	fp, fp, r0
 800b186:	3304      	adds	r3, #4
 800b188:	e7ae      	b.n	800b0e8 <__gethex+0x15c>
 800b18a:	45b1      	cmp	r9, r6
 800b18c:	d8ea      	bhi.n	800b164 <__gethex+0x1d8>
 800b18e:	492b      	ldr	r1, [pc, #172]	@ (800b23c <__gethex+0x2b0>)
 800b190:	9303      	str	r3, [sp, #12]
 800b192:	2201      	movs	r2, #1
 800b194:	4630      	mov	r0, r6
 800b196:	f7ff fe27 	bl	800ade8 <strncmp>
 800b19a:	9b03      	ldr	r3, [sp, #12]
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d1e1      	bne.n	800b164 <__gethex+0x1d8>
 800b1a0:	e7a2      	b.n	800b0e8 <__gethex+0x15c>
 800b1a2:	1ea9      	subs	r1, r5, #2
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	f7fe fd5c 	bl	8009c62 <__any_on>
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	d0c2      	beq.n	800b134 <__gethex+0x1a8>
 800b1ae:	f04f 0903 	mov.w	r9, #3
 800b1b2:	e7c1      	b.n	800b138 <__gethex+0x1ac>
 800b1b4:	da09      	bge.n	800b1ca <__gethex+0x23e>
 800b1b6:	1b75      	subs	r5, r6, r5
 800b1b8:	4621      	mov	r1, r4
 800b1ba:	9801      	ldr	r0, [sp, #4]
 800b1bc:	462a      	mov	r2, r5
 800b1be:	f7fe fb17 	bl	80097f0 <__lshift>
 800b1c2:	1b7f      	subs	r7, r7, r5
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	f100 0a14 	add.w	sl, r0, #20
 800b1ca:	f04f 0900 	mov.w	r9, #0
 800b1ce:	e7b8      	b.n	800b142 <__gethex+0x1b6>
 800b1d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b1d4:	42bd      	cmp	r5, r7
 800b1d6:	dd6f      	ble.n	800b2b8 <__gethex+0x32c>
 800b1d8:	1bed      	subs	r5, r5, r7
 800b1da:	42ae      	cmp	r6, r5
 800b1dc:	dc34      	bgt.n	800b248 <__gethex+0x2bc>
 800b1de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1e2:	2b02      	cmp	r3, #2
 800b1e4:	d022      	beq.n	800b22c <__gethex+0x2a0>
 800b1e6:	2b03      	cmp	r3, #3
 800b1e8:	d024      	beq.n	800b234 <__gethex+0x2a8>
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d115      	bne.n	800b21a <__gethex+0x28e>
 800b1ee:	42ae      	cmp	r6, r5
 800b1f0:	d113      	bne.n	800b21a <__gethex+0x28e>
 800b1f2:	2e01      	cmp	r6, #1
 800b1f4:	d10b      	bne.n	800b20e <__gethex+0x282>
 800b1f6:	9a02      	ldr	r2, [sp, #8]
 800b1f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b1fc:	6013      	str	r3, [r2, #0]
 800b1fe:	2301      	movs	r3, #1
 800b200:	6123      	str	r3, [r4, #16]
 800b202:	f8ca 3000 	str.w	r3, [sl]
 800b206:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b208:	2562      	movs	r5, #98	@ 0x62
 800b20a:	601c      	str	r4, [r3, #0]
 800b20c:	e73a      	b.n	800b084 <__gethex+0xf8>
 800b20e:	1e71      	subs	r1, r6, #1
 800b210:	4620      	mov	r0, r4
 800b212:	f7fe fd26 	bl	8009c62 <__any_on>
 800b216:	2800      	cmp	r0, #0
 800b218:	d1ed      	bne.n	800b1f6 <__gethex+0x26a>
 800b21a:	9801      	ldr	r0, [sp, #4]
 800b21c:	4621      	mov	r1, r4
 800b21e:	f7fe f8cf 	bl	80093c0 <_Bfree>
 800b222:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b224:	2300      	movs	r3, #0
 800b226:	6013      	str	r3, [r2, #0]
 800b228:	2550      	movs	r5, #80	@ 0x50
 800b22a:	e72b      	b.n	800b084 <__gethex+0xf8>
 800b22c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1f3      	bne.n	800b21a <__gethex+0x28e>
 800b232:	e7e0      	b.n	800b1f6 <__gethex+0x26a>
 800b234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b236:	2b00      	cmp	r3, #0
 800b238:	d1dd      	bne.n	800b1f6 <__gethex+0x26a>
 800b23a:	e7ee      	b.n	800b21a <__gethex+0x28e>
 800b23c:	0800be30 	.word	0x0800be30
 800b240:	0800bcc5 	.word	0x0800bcc5
 800b244:	0800bfde 	.word	0x0800bfde
 800b248:	1e6f      	subs	r7, r5, #1
 800b24a:	f1b9 0f00 	cmp.w	r9, #0
 800b24e:	d130      	bne.n	800b2b2 <__gethex+0x326>
 800b250:	b127      	cbz	r7, 800b25c <__gethex+0x2d0>
 800b252:	4639      	mov	r1, r7
 800b254:	4620      	mov	r0, r4
 800b256:	f7fe fd04 	bl	8009c62 <__any_on>
 800b25a:	4681      	mov	r9, r0
 800b25c:	117a      	asrs	r2, r7, #5
 800b25e:	2301      	movs	r3, #1
 800b260:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b264:	f007 071f 	and.w	r7, r7, #31
 800b268:	40bb      	lsls	r3, r7
 800b26a:	4213      	tst	r3, r2
 800b26c:	4629      	mov	r1, r5
 800b26e:	4620      	mov	r0, r4
 800b270:	bf18      	it	ne
 800b272:	f049 0902 	orrne.w	r9, r9, #2
 800b276:	f7ff fe21 	bl	800aebc <rshift>
 800b27a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b27e:	1b76      	subs	r6, r6, r5
 800b280:	2502      	movs	r5, #2
 800b282:	f1b9 0f00 	cmp.w	r9, #0
 800b286:	d047      	beq.n	800b318 <__gethex+0x38c>
 800b288:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b28c:	2b02      	cmp	r3, #2
 800b28e:	d015      	beq.n	800b2bc <__gethex+0x330>
 800b290:	2b03      	cmp	r3, #3
 800b292:	d017      	beq.n	800b2c4 <__gethex+0x338>
 800b294:	2b01      	cmp	r3, #1
 800b296:	d109      	bne.n	800b2ac <__gethex+0x320>
 800b298:	f019 0f02 	tst.w	r9, #2
 800b29c:	d006      	beq.n	800b2ac <__gethex+0x320>
 800b29e:	f8da 3000 	ldr.w	r3, [sl]
 800b2a2:	ea49 0903 	orr.w	r9, r9, r3
 800b2a6:	f019 0f01 	tst.w	r9, #1
 800b2aa:	d10e      	bne.n	800b2ca <__gethex+0x33e>
 800b2ac:	f045 0510 	orr.w	r5, r5, #16
 800b2b0:	e032      	b.n	800b318 <__gethex+0x38c>
 800b2b2:	f04f 0901 	mov.w	r9, #1
 800b2b6:	e7d1      	b.n	800b25c <__gethex+0x2d0>
 800b2b8:	2501      	movs	r5, #1
 800b2ba:	e7e2      	b.n	800b282 <__gethex+0x2f6>
 800b2bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2be:	f1c3 0301 	rsb	r3, r3, #1
 800b2c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d0f0      	beq.n	800b2ac <__gethex+0x320>
 800b2ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2ce:	f104 0314 	add.w	r3, r4, #20
 800b2d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b2d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b2da:	f04f 0c00 	mov.w	ip, #0
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b2e8:	d01b      	beq.n	800b322 <__gethex+0x396>
 800b2ea:	3201      	adds	r2, #1
 800b2ec:	6002      	str	r2, [r0, #0]
 800b2ee:	2d02      	cmp	r5, #2
 800b2f0:	f104 0314 	add.w	r3, r4, #20
 800b2f4:	d13c      	bne.n	800b370 <__gethex+0x3e4>
 800b2f6:	f8d8 2000 	ldr.w	r2, [r8]
 800b2fa:	3a01      	subs	r2, #1
 800b2fc:	42b2      	cmp	r2, r6
 800b2fe:	d109      	bne.n	800b314 <__gethex+0x388>
 800b300:	1171      	asrs	r1, r6, #5
 800b302:	2201      	movs	r2, #1
 800b304:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b308:	f006 061f 	and.w	r6, r6, #31
 800b30c:	fa02 f606 	lsl.w	r6, r2, r6
 800b310:	421e      	tst	r6, r3
 800b312:	d13a      	bne.n	800b38a <__gethex+0x3fe>
 800b314:	f045 0520 	orr.w	r5, r5, #32
 800b318:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b31a:	601c      	str	r4, [r3, #0]
 800b31c:	9b02      	ldr	r3, [sp, #8]
 800b31e:	601f      	str	r7, [r3, #0]
 800b320:	e6b0      	b.n	800b084 <__gethex+0xf8>
 800b322:	4299      	cmp	r1, r3
 800b324:	f843 cc04 	str.w	ip, [r3, #-4]
 800b328:	d8d9      	bhi.n	800b2de <__gethex+0x352>
 800b32a:	68a3      	ldr	r3, [r4, #8]
 800b32c:	459b      	cmp	fp, r3
 800b32e:	db17      	blt.n	800b360 <__gethex+0x3d4>
 800b330:	6861      	ldr	r1, [r4, #4]
 800b332:	9801      	ldr	r0, [sp, #4]
 800b334:	3101      	adds	r1, #1
 800b336:	f7fe f803 	bl	8009340 <_Balloc>
 800b33a:	4681      	mov	r9, r0
 800b33c:	b918      	cbnz	r0, 800b346 <__gethex+0x3ba>
 800b33e:	4b1a      	ldr	r3, [pc, #104]	@ (800b3a8 <__gethex+0x41c>)
 800b340:	4602      	mov	r2, r0
 800b342:	2184      	movs	r1, #132	@ 0x84
 800b344:	e6c5      	b.n	800b0d2 <__gethex+0x146>
 800b346:	6922      	ldr	r2, [r4, #16]
 800b348:	3202      	adds	r2, #2
 800b34a:	f104 010c 	add.w	r1, r4, #12
 800b34e:	0092      	lsls	r2, r2, #2
 800b350:	300c      	adds	r0, #12
 800b352:	f7ff fd6b 	bl	800ae2c <memcpy>
 800b356:	4621      	mov	r1, r4
 800b358:	9801      	ldr	r0, [sp, #4]
 800b35a:	f7fe f831 	bl	80093c0 <_Bfree>
 800b35e:	464c      	mov	r4, r9
 800b360:	6923      	ldr	r3, [r4, #16]
 800b362:	1c5a      	adds	r2, r3, #1
 800b364:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b368:	6122      	str	r2, [r4, #16]
 800b36a:	2201      	movs	r2, #1
 800b36c:	615a      	str	r2, [r3, #20]
 800b36e:	e7be      	b.n	800b2ee <__gethex+0x362>
 800b370:	6922      	ldr	r2, [r4, #16]
 800b372:	455a      	cmp	r2, fp
 800b374:	dd0b      	ble.n	800b38e <__gethex+0x402>
 800b376:	2101      	movs	r1, #1
 800b378:	4620      	mov	r0, r4
 800b37a:	f7ff fd9f 	bl	800aebc <rshift>
 800b37e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b382:	3701      	adds	r7, #1
 800b384:	42bb      	cmp	r3, r7
 800b386:	f6ff aee0 	blt.w	800b14a <__gethex+0x1be>
 800b38a:	2501      	movs	r5, #1
 800b38c:	e7c2      	b.n	800b314 <__gethex+0x388>
 800b38e:	f016 061f 	ands.w	r6, r6, #31
 800b392:	d0fa      	beq.n	800b38a <__gethex+0x3fe>
 800b394:	4453      	add	r3, sl
 800b396:	f1c6 0620 	rsb	r6, r6, #32
 800b39a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b39e:	f7fe f8c1 	bl	8009524 <__hi0bits>
 800b3a2:	42b0      	cmp	r0, r6
 800b3a4:	dbe7      	blt.n	800b376 <__gethex+0x3ea>
 800b3a6:	e7f0      	b.n	800b38a <__gethex+0x3fe>
 800b3a8:	0800bcc5 	.word	0x0800bcc5

0800b3ac <L_shift>:
 800b3ac:	f1c2 0208 	rsb	r2, r2, #8
 800b3b0:	0092      	lsls	r2, r2, #2
 800b3b2:	b570      	push	{r4, r5, r6, lr}
 800b3b4:	f1c2 0620 	rsb	r6, r2, #32
 800b3b8:	6843      	ldr	r3, [r0, #4]
 800b3ba:	6804      	ldr	r4, [r0, #0]
 800b3bc:	fa03 f506 	lsl.w	r5, r3, r6
 800b3c0:	432c      	orrs	r4, r5
 800b3c2:	40d3      	lsrs	r3, r2
 800b3c4:	6004      	str	r4, [r0, #0]
 800b3c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3ca:	4288      	cmp	r0, r1
 800b3cc:	d3f4      	bcc.n	800b3b8 <L_shift+0xc>
 800b3ce:	bd70      	pop	{r4, r5, r6, pc}

0800b3d0 <__match>:
 800b3d0:	b530      	push	{r4, r5, lr}
 800b3d2:	6803      	ldr	r3, [r0, #0]
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3da:	b914      	cbnz	r4, 800b3e2 <__match+0x12>
 800b3dc:	6003      	str	r3, [r0, #0]
 800b3de:	2001      	movs	r0, #1
 800b3e0:	bd30      	pop	{r4, r5, pc}
 800b3e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b3ea:	2d19      	cmp	r5, #25
 800b3ec:	bf98      	it	ls
 800b3ee:	3220      	addls	r2, #32
 800b3f0:	42a2      	cmp	r2, r4
 800b3f2:	d0f0      	beq.n	800b3d6 <__match+0x6>
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	e7f3      	b.n	800b3e0 <__match+0x10>

0800b3f8 <__hexnan>:
 800b3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fc:	680b      	ldr	r3, [r1, #0]
 800b3fe:	6801      	ldr	r1, [r0, #0]
 800b400:	115e      	asrs	r6, r3, #5
 800b402:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b406:	f013 031f 	ands.w	r3, r3, #31
 800b40a:	b087      	sub	sp, #28
 800b40c:	bf18      	it	ne
 800b40e:	3604      	addne	r6, #4
 800b410:	2500      	movs	r5, #0
 800b412:	1f37      	subs	r7, r6, #4
 800b414:	4682      	mov	sl, r0
 800b416:	4690      	mov	r8, r2
 800b418:	9301      	str	r3, [sp, #4]
 800b41a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b41e:	46b9      	mov	r9, r7
 800b420:	463c      	mov	r4, r7
 800b422:	9502      	str	r5, [sp, #8]
 800b424:	46ab      	mov	fp, r5
 800b426:	784a      	ldrb	r2, [r1, #1]
 800b428:	1c4b      	adds	r3, r1, #1
 800b42a:	9303      	str	r3, [sp, #12]
 800b42c:	b342      	cbz	r2, 800b480 <__hexnan+0x88>
 800b42e:	4610      	mov	r0, r2
 800b430:	9105      	str	r1, [sp, #20]
 800b432:	9204      	str	r2, [sp, #16]
 800b434:	f7ff fd94 	bl	800af60 <__hexdig_fun>
 800b438:	2800      	cmp	r0, #0
 800b43a:	d151      	bne.n	800b4e0 <__hexnan+0xe8>
 800b43c:	9a04      	ldr	r2, [sp, #16]
 800b43e:	9905      	ldr	r1, [sp, #20]
 800b440:	2a20      	cmp	r2, #32
 800b442:	d818      	bhi.n	800b476 <__hexnan+0x7e>
 800b444:	9b02      	ldr	r3, [sp, #8]
 800b446:	459b      	cmp	fp, r3
 800b448:	dd13      	ble.n	800b472 <__hexnan+0x7a>
 800b44a:	454c      	cmp	r4, r9
 800b44c:	d206      	bcs.n	800b45c <__hexnan+0x64>
 800b44e:	2d07      	cmp	r5, #7
 800b450:	dc04      	bgt.n	800b45c <__hexnan+0x64>
 800b452:	462a      	mov	r2, r5
 800b454:	4649      	mov	r1, r9
 800b456:	4620      	mov	r0, r4
 800b458:	f7ff ffa8 	bl	800b3ac <L_shift>
 800b45c:	4544      	cmp	r4, r8
 800b45e:	d952      	bls.n	800b506 <__hexnan+0x10e>
 800b460:	2300      	movs	r3, #0
 800b462:	f1a4 0904 	sub.w	r9, r4, #4
 800b466:	f844 3c04 	str.w	r3, [r4, #-4]
 800b46a:	f8cd b008 	str.w	fp, [sp, #8]
 800b46e:	464c      	mov	r4, r9
 800b470:	461d      	mov	r5, r3
 800b472:	9903      	ldr	r1, [sp, #12]
 800b474:	e7d7      	b.n	800b426 <__hexnan+0x2e>
 800b476:	2a29      	cmp	r2, #41	@ 0x29
 800b478:	d157      	bne.n	800b52a <__hexnan+0x132>
 800b47a:	3102      	adds	r1, #2
 800b47c:	f8ca 1000 	str.w	r1, [sl]
 800b480:	f1bb 0f00 	cmp.w	fp, #0
 800b484:	d051      	beq.n	800b52a <__hexnan+0x132>
 800b486:	454c      	cmp	r4, r9
 800b488:	d206      	bcs.n	800b498 <__hexnan+0xa0>
 800b48a:	2d07      	cmp	r5, #7
 800b48c:	dc04      	bgt.n	800b498 <__hexnan+0xa0>
 800b48e:	462a      	mov	r2, r5
 800b490:	4649      	mov	r1, r9
 800b492:	4620      	mov	r0, r4
 800b494:	f7ff ff8a 	bl	800b3ac <L_shift>
 800b498:	4544      	cmp	r4, r8
 800b49a:	d936      	bls.n	800b50a <__hexnan+0x112>
 800b49c:	f1a8 0204 	sub.w	r2, r8, #4
 800b4a0:	4623      	mov	r3, r4
 800b4a2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4a6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4aa:	429f      	cmp	r7, r3
 800b4ac:	d2f9      	bcs.n	800b4a2 <__hexnan+0xaa>
 800b4ae:	1b3b      	subs	r3, r7, r4
 800b4b0:	f023 0303 	bic.w	r3, r3, #3
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	3401      	adds	r4, #1
 800b4b8:	3e03      	subs	r6, #3
 800b4ba:	42b4      	cmp	r4, r6
 800b4bc:	bf88      	it	hi
 800b4be:	2304      	movhi	r3, #4
 800b4c0:	4443      	add	r3, r8
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f843 2b04 	str.w	r2, [r3], #4
 800b4c8:	429f      	cmp	r7, r3
 800b4ca:	d2fb      	bcs.n	800b4c4 <__hexnan+0xcc>
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	b91b      	cbnz	r3, 800b4d8 <__hexnan+0xe0>
 800b4d0:	4547      	cmp	r7, r8
 800b4d2:	d128      	bne.n	800b526 <__hexnan+0x12e>
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	603b      	str	r3, [r7, #0]
 800b4d8:	2005      	movs	r0, #5
 800b4da:	b007      	add	sp, #28
 800b4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e0:	3501      	adds	r5, #1
 800b4e2:	2d08      	cmp	r5, #8
 800b4e4:	f10b 0b01 	add.w	fp, fp, #1
 800b4e8:	dd06      	ble.n	800b4f8 <__hexnan+0x100>
 800b4ea:	4544      	cmp	r4, r8
 800b4ec:	d9c1      	bls.n	800b472 <__hexnan+0x7a>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4f4:	2501      	movs	r5, #1
 800b4f6:	3c04      	subs	r4, #4
 800b4f8:	6822      	ldr	r2, [r4, #0]
 800b4fa:	f000 000f 	and.w	r0, r0, #15
 800b4fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b502:	6020      	str	r0, [r4, #0]
 800b504:	e7b5      	b.n	800b472 <__hexnan+0x7a>
 800b506:	2508      	movs	r5, #8
 800b508:	e7b3      	b.n	800b472 <__hexnan+0x7a>
 800b50a:	9b01      	ldr	r3, [sp, #4]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d0dd      	beq.n	800b4cc <__hexnan+0xd4>
 800b510:	f1c3 0320 	rsb	r3, r3, #32
 800b514:	f04f 32ff 	mov.w	r2, #4294967295
 800b518:	40da      	lsrs	r2, r3
 800b51a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b51e:	4013      	ands	r3, r2
 800b520:	f846 3c04 	str.w	r3, [r6, #-4]
 800b524:	e7d2      	b.n	800b4cc <__hexnan+0xd4>
 800b526:	3f04      	subs	r7, #4
 800b528:	e7d0      	b.n	800b4cc <__hexnan+0xd4>
 800b52a:	2004      	movs	r0, #4
 800b52c:	e7d5      	b.n	800b4da <__hexnan+0xe2>

0800b52e <__ascii_mbtowc>:
 800b52e:	b082      	sub	sp, #8
 800b530:	b901      	cbnz	r1, 800b534 <__ascii_mbtowc+0x6>
 800b532:	a901      	add	r1, sp, #4
 800b534:	b142      	cbz	r2, 800b548 <__ascii_mbtowc+0x1a>
 800b536:	b14b      	cbz	r3, 800b54c <__ascii_mbtowc+0x1e>
 800b538:	7813      	ldrb	r3, [r2, #0]
 800b53a:	600b      	str	r3, [r1, #0]
 800b53c:	7812      	ldrb	r2, [r2, #0]
 800b53e:	1e10      	subs	r0, r2, #0
 800b540:	bf18      	it	ne
 800b542:	2001      	movne	r0, #1
 800b544:	b002      	add	sp, #8
 800b546:	4770      	bx	lr
 800b548:	4610      	mov	r0, r2
 800b54a:	e7fb      	b.n	800b544 <__ascii_mbtowc+0x16>
 800b54c:	f06f 0001 	mvn.w	r0, #1
 800b550:	e7f8      	b.n	800b544 <__ascii_mbtowc+0x16>

0800b552 <_realloc_r>:
 800b552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b556:	4680      	mov	r8, r0
 800b558:	4615      	mov	r5, r2
 800b55a:	460c      	mov	r4, r1
 800b55c:	b921      	cbnz	r1, 800b568 <_realloc_r+0x16>
 800b55e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b562:	4611      	mov	r1, r2
 800b564:	f7fd be60 	b.w	8009228 <_malloc_r>
 800b568:	b92a      	cbnz	r2, 800b576 <_realloc_r+0x24>
 800b56a:	f7fd fde9 	bl	8009140 <_free_r>
 800b56e:	2400      	movs	r4, #0
 800b570:	4620      	mov	r0, r4
 800b572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b576:	f000 f840 	bl	800b5fa <_malloc_usable_size_r>
 800b57a:	4285      	cmp	r5, r0
 800b57c:	4606      	mov	r6, r0
 800b57e:	d802      	bhi.n	800b586 <_realloc_r+0x34>
 800b580:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b584:	d8f4      	bhi.n	800b570 <_realloc_r+0x1e>
 800b586:	4629      	mov	r1, r5
 800b588:	4640      	mov	r0, r8
 800b58a:	f7fd fe4d 	bl	8009228 <_malloc_r>
 800b58e:	4607      	mov	r7, r0
 800b590:	2800      	cmp	r0, #0
 800b592:	d0ec      	beq.n	800b56e <_realloc_r+0x1c>
 800b594:	42b5      	cmp	r5, r6
 800b596:	462a      	mov	r2, r5
 800b598:	4621      	mov	r1, r4
 800b59a:	bf28      	it	cs
 800b59c:	4632      	movcs	r2, r6
 800b59e:	f7ff fc45 	bl	800ae2c <memcpy>
 800b5a2:	4621      	mov	r1, r4
 800b5a4:	4640      	mov	r0, r8
 800b5a6:	f7fd fdcb 	bl	8009140 <_free_r>
 800b5aa:	463c      	mov	r4, r7
 800b5ac:	e7e0      	b.n	800b570 <_realloc_r+0x1e>

0800b5ae <__ascii_wctomb>:
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	4608      	mov	r0, r1
 800b5b2:	b141      	cbz	r1, 800b5c6 <__ascii_wctomb+0x18>
 800b5b4:	2aff      	cmp	r2, #255	@ 0xff
 800b5b6:	d904      	bls.n	800b5c2 <__ascii_wctomb+0x14>
 800b5b8:	228a      	movs	r2, #138	@ 0x8a
 800b5ba:	601a      	str	r2, [r3, #0]
 800b5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c0:	4770      	bx	lr
 800b5c2:	700a      	strb	r2, [r1, #0]
 800b5c4:	2001      	movs	r0, #1
 800b5c6:	4770      	bx	lr

0800b5c8 <fiprintf>:
 800b5c8:	b40e      	push	{r1, r2, r3}
 800b5ca:	b503      	push	{r0, r1, lr}
 800b5cc:	4601      	mov	r1, r0
 800b5ce:	ab03      	add	r3, sp, #12
 800b5d0:	4805      	ldr	r0, [pc, #20]	@ (800b5e8 <fiprintf+0x20>)
 800b5d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5d6:	6800      	ldr	r0, [r0, #0]
 800b5d8:	9301      	str	r3, [sp, #4]
 800b5da:	f000 f83f 	bl	800b65c <_vfiprintf_r>
 800b5de:	b002      	add	sp, #8
 800b5e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5e4:	b003      	add	sp, #12
 800b5e6:	4770      	bx	lr
 800b5e8:	20000018 	.word	0x20000018

0800b5ec <abort>:
 800b5ec:	b508      	push	{r3, lr}
 800b5ee:	2006      	movs	r0, #6
 800b5f0:	f000 fa08 	bl	800ba04 <raise>
 800b5f4:	2001      	movs	r0, #1
 800b5f6:	f7f6 f93a 	bl	800186e <_exit>

0800b5fa <_malloc_usable_size_r>:
 800b5fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5fe:	1f18      	subs	r0, r3, #4
 800b600:	2b00      	cmp	r3, #0
 800b602:	bfbc      	itt	lt
 800b604:	580b      	ldrlt	r3, [r1, r0]
 800b606:	18c0      	addlt	r0, r0, r3
 800b608:	4770      	bx	lr

0800b60a <__sfputc_r>:
 800b60a:	6893      	ldr	r3, [r2, #8]
 800b60c:	3b01      	subs	r3, #1
 800b60e:	2b00      	cmp	r3, #0
 800b610:	b410      	push	{r4}
 800b612:	6093      	str	r3, [r2, #8]
 800b614:	da08      	bge.n	800b628 <__sfputc_r+0x1e>
 800b616:	6994      	ldr	r4, [r2, #24]
 800b618:	42a3      	cmp	r3, r4
 800b61a:	db01      	blt.n	800b620 <__sfputc_r+0x16>
 800b61c:	290a      	cmp	r1, #10
 800b61e:	d103      	bne.n	800b628 <__sfputc_r+0x1e>
 800b620:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b624:	f000 b932 	b.w	800b88c <__swbuf_r>
 800b628:	6813      	ldr	r3, [r2, #0]
 800b62a:	1c58      	adds	r0, r3, #1
 800b62c:	6010      	str	r0, [r2, #0]
 800b62e:	7019      	strb	r1, [r3, #0]
 800b630:	4608      	mov	r0, r1
 800b632:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <__sfputs_r>:
 800b638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b63a:	4606      	mov	r6, r0
 800b63c:	460f      	mov	r7, r1
 800b63e:	4614      	mov	r4, r2
 800b640:	18d5      	adds	r5, r2, r3
 800b642:	42ac      	cmp	r4, r5
 800b644:	d101      	bne.n	800b64a <__sfputs_r+0x12>
 800b646:	2000      	movs	r0, #0
 800b648:	e007      	b.n	800b65a <__sfputs_r+0x22>
 800b64a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b64e:	463a      	mov	r2, r7
 800b650:	4630      	mov	r0, r6
 800b652:	f7ff ffda 	bl	800b60a <__sfputc_r>
 800b656:	1c43      	adds	r3, r0, #1
 800b658:	d1f3      	bne.n	800b642 <__sfputs_r+0xa>
 800b65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b65c <_vfiprintf_r>:
 800b65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b660:	460d      	mov	r5, r1
 800b662:	b09d      	sub	sp, #116	@ 0x74
 800b664:	4614      	mov	r4, r2
 800b666:	4698      	mov	r8, r3
 800b668:	4606      	mov	r6, r0
 800b66a:	b118      	cbz	r0, 800b674 <_vfiprintf_r+0x18>
 800b66c:	6a03      	ldr	r3, [r0, #32]
 800b66e:	b90b      	cbnz	r3, 800b674 <_vfiprintf_r+0x18>
 800b670:	f7fc fdf8 	bl	8008264 <__sinit>
 800b674:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b676:	07d9      	lsls	r1, r3, #31
 800b678:	d405      	bmi.n	800b686 <_vfiprintf_r+0x2a>
 800b67a:	89ab      	ldrh	r3, [r5, #12]
 800b67c:	059a      	lsls	r2, r3, #22
 800b67e:	d402      	bmi.n	800b686 <_vfiprintf_r+0x2a>
 800b680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b682:	f7fc ff06 	bl	8008492 <__retarget_lock_acquire_recursive>
 800b686:	89ab      	ldrh	r3, [r5, #12]
 800b688:	071b      	lsls	r3, r3, #28
 800b68a:	d501      	bpl.n	800b690 <_vfiprintf_r+0x34>
 800b68c:	692b      	ldr	r3, [r5, #16]
 800b68e:	b99b      	cbnz	r3, 800b6b8 <_vfiprintf_r+0x5c>
 800b690:	4629      	mov	r1, r5
 800b692:	4630      	mov	r0, r6
 800b694:	f000 f938 	bl	800b908 <__swsetup_r>
 800b698:	b170      	cbz	r0, 800b6b8 <_vfiprintf_r+0x5c>
 800b69a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b69c:	07dc      	lsls	r4, r3, #31
 800b69e:	d504      	bpl.n	800b6aa <_vfiprintf_r+0x4e>
 800b6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a4:	b01d      	add	sp, #116	@ 0x74
 800b6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6aa:	89ab      	ldrh	r3, [r5, #12]
 800b6ac:	0598      	lsls	r0, r3, #22
 800b6ae:	d4f7      	bmi.n	800b6a0 <_vfiprintf_r+0x44>
 800b6b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6b2:	f7fc feef 	bl	8008494 <__retarget_lock_release_recursive>
 800b6b6:	e7f3      	b.n	800b6a0 <_vfiprintf_r+0x44>
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6bc:	2320      	movs	r3, #32
 800b6be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b6c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6c6:	2330      	movs	r3, #48	@ 0x30
 800b6c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b878 <_vfiprintf_r+0x21c>
 800b6cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b6d0:	f04f 0901 	mov.w	r9, #1
 800b6d4:	4623      	mov	r3, r4
 800b6d6:	469a      	mov	sl, r3
 800b6d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6dc:	b10a      	cbz	r2, 800b6e2 <_vfiprintf_r+0x86>
 800b6de:	2a25      	cmp	r2, #37	@ 0x25
 800b6e0:	d1f9      	bne.n	800b6d6 <_vfiprintf_r+0x7a>
 800b6e2:	ebba 0b04 	subs.w	fp, sl, r4
 800b6e6:	d00b      	beq.n	800b700 <_vfiprintf_r+0xa4>
 800b6e8:	465b      	mov	r3, fp
 800b6ea:	4622      	mov	r2, r4
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	f7ff ffa2 	bl	800b638 <__sfputs_r>
 800b6f4:	3001      	adds	r0, #1
 800b6f6:	f000 80a7 	beq.w	800b848 <_vfiprintf_r+0x1ec>
 800b6fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6fc:	445a      	add	r2, fp
 800b6fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800b700:	f89a 3000 	ldrb.w	r3, [sl]
 800b704:	2b00      	cmp	r3, #0
 800b706:	f000 809f 	beq.w	800b848 <_vfiprintf_r+0x1ec>
 800b70a:	2300      	movs	r3, #0
 800b70c:	f04f 32ff 	mov.w	r2, #4294967295
 800b710:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b714:	f10a 0a01 	add.w	sl, sl, #1
 800b718:	9304      	str	r3, [sp, #16]
 800b71a:	9307      	str	r3, [sp, #28]
 800b71c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b720:	931a      	str	r3, [sp, #104]	@ 0x68
 800b722:	4654      	mov	r4, sl
 800b724:	2205      	movs	r2, #5
 800b726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b72a:	4853      	ldr	r0, [pc, #332]	@ (800b878 <_vfiprintf_r+0x21c>)
 800b72c:	f7f4 fd78 	bl	8000220 <memchr>
 800b730:	9a04      	ldr	r2, [sp, #16]
 800b732:	b9d8      	cbnz	r0, 800b76c <_vfiprintf_r+0x110>
 800b734:	06d1      	lsls	r1, r2, #27
 800b736:	bf44      	itt	mi
 800b738:	2320      	movmi	r3, #32
 800b73a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b73e:	0713      	lsls	r3, r2, #28
 800b740:	bf44      	itt	mi
 800b742:	232b      	movmi	r3, #43	@ 0x2b
 800b744:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b748:	f89a 3000 	ldrb.w	r3, [sl]
 800b74c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b74e:	d015      	beq.n	800b77c <_vfiprintf_r+0x120>
 800b750:	9a07      	ldr	r2, [sp, #28]
 800b752:	4654      	mov	r4, sl
 800b754:	2000      	movs	r0, #0
 800b756:	f04f 0c0a 	mov.w	ip, #10
 800b75a:	4621      	mov	r1, r4
 800b75c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b760:	3b30      	subs	r3, #48	@ 0x30
 800b762:	2b09      	cmp	r3, #9
 800b764:	d94b      	bls.n	800b7fe <_vfiprintf_r+0x1a2>
 800b766:	b1b0      	cbz	r0, 800b796 <_vfiprintf_r+0x13a>
 800b768:	9207      	str	r2, [sp, #28]
 800b76a:	e014      	b.n	800b796 <_vfiprintf_r+0x13a>
 800b76c:	eba0 0308 	sub.w	r3, r0, r8
 800b770:	fa09 f303 	lsl.w	r3, r9, r3
 800b774:	4313      	orrs	r3, r2
 800b776:	9304      	str	r3, [sp, #16]
 800b778:	46a2      	mov	sl, r4
 800b77a:	e7d2      	b.n	800b722 <_vfiprintf_r+0xc6>
 800b77c:	9b03      	ldr	r3, [sp, #12]
 800b77e:	1d19      	adds	r1, r3, #4
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	9103      	str	r1, [sp, #12]
 800b784:	2b00      	cmp	r3, #0
 800b786:	bfbb      	ittet	lt
 800b788:	425b      	neglt	r3, r3
 800b78a:	f042 0202 	orrlt.w	r2, r2, #2
 800b78e:	9307      	strge	r3, [sp, #28]
 800b790:	9307      	strlt	r3, [sp, #28]
 800b792:	bfb8      	it	lt
 800b794:	9204      	strlt	r2, [sp, #16]
 800b796:	7823      	ldrb	r3, [r4, #0]
 800b798:	2b2e      	cmp	r3, #46	@ 0x2e
 800b79a:	d10a      	bne.n	800b7b2 <_vfiprintf_r+0x156>
 800b79c:	7863      	ldrb	r3, [r4, #1]
 800b79e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7a0:	d132      	bne.n	800b808 <_vfiprintf_r+0x1ac>
 800b7a2:	9b03      	ldr	r3, [sp, #12]
 800b7a4:	1d1a      	adds	r2, r3, #4
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	9203      	str	r2, [sp, #12]
 800b7aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b7ae:	3402      	adds	r4, #2
 800b7b0:	9305      	str	r3, [sp, #20]
 800b7b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b888 <_vfiprintf_r+0x22c>
 800b7b6:	7821      	ldrb	r1, [r4, #0]
 800b7b8:	2203      	movs	r2, #3
 800b7ba:	4650      	mov	r0, sl
 800b7bc:	f7f4 fd30 	bl	8000220 <memchr>
 800b7c0:	b138      	cbz	r0, 800b7d2 <_vfiprintf_r+0x176>
 800b7c2:	9b04      	ldr	r3, [sp, #16]
 800b7c4:	eba0 000a 	sub.w	r0, r0, sl
 800b7c8:	2240      	movs	r2, #64	@ 0x40
 800b7ca:	4082      	lsls	r2, r0
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	3401      	adds	r4, #1
 800b7d0:	9304      	str	r3, [sp, #16]
 800b7d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7d6:	4829      	ldr	r0, [pc, #164]	@ (800b87c <_vfiprintf_r+0x220>)
 800b7d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b7dc:	2206      	movs	r2, #6
 800b7de:	f7f4 fd1f 	bl	8000220 <memchr>
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	d03f      	beq.n	800b866 <_vfiprintf_r+0x20a>
 800b7e6:	4b26      	ldr	r3, [pc, #152]	@ (800b880 <_vfiprintf_r+0x224>)
 800b7e8:	bb1b      	cbnz	r3, 800b832 <_vfiprintf_r+0x1d6>
 800b7ea:	9b03      	ldr	r3, [sp, #12]
 800b7ec:	3307      	adds	r3, #7
 800b7ee:	f023 0307 	bic.w	r3, r3, #7
 800b7f2:	3308      	adds	r3, #8
 800b7f4:	9303      	str	r3, [sp, #12]
 800b7f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7f8:	443b      	add	r3, r7
 800b7fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7fc:	e76a      	b.n	800b6d4 <_vfiprintf_r+0x78>
 800b7fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800b802:	460c      	mov	r4, r1
 800b804:	2001      	movs	r0, #1
 800b806:	e7a8      	b.n	800b75a <_vfiprintf_r+0xfe>
 800b808:	2300      	movs	r3, #0
 800b80a:	3401      	adds	r4, #1
 800b80c:	9305      	str	r3, [sp, #20]
 800b80e:	4619      	mov	r1, r3
 800b810:	f04f 0c0a 	mov.w	ip, #10
 800b814:	4620      	mov	r0, r4
 800b816:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b81a:	3a30      	subs	r2, #48	@ 0x30
 800b81c:	2a09      	cmp	r2, #9
 800b81e:	d903      	bls.n	800b828 <_vfiprintf_r+0x1cc>
 800b820:	2b00      	cmp	r3, #0
 800b822:	d0c6      	beq.n	800b7b2 <_vfiprintf_r+0x156>
 800b824:	9105      	str	r1, [sp, #20]
 800b826:	e7c4      	b.n	800b7b2 <_vfiprintf_r+0x156>
 800b828:	fb0c 2101 	mla	r1, ip, r1, r2
 800b82c:	4604      	mov	r4, r0
 800b82e:	2301      	movs	r3, #1
 800b830:	e7f0      	b.n	800b814 <_vfiprintf_r+0x1b8>
 800b832:	ab03      	add	r3, sp, #12
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	462a      	mov	r2, r5
 800b838:	4b12      	ldr	r3, [pc, #72]	@ (800b884 <_vfiprintf_r+0x228>)
 800b83a:	a904      	add	r1, sp, #16
 800b83c:	4630      	mov	r0, r6
 800b83e:	f7fb feb9 	bl	80075b4 <_printf_float>
 800b842:	4607      	mov	r7, r0
 800b844:	1c78      	adds	r0, r7, #1
 800b846:	d1d6      	bne.n	800b7f6 <_vfiprintf_r+0x19a>
 800b848:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b84a:	07d9      	lsls	r1, r3, #31
 800b84c:	d405      	bmi.n	800b85a <_vfiprintf_r+0x1fe>
 800b84e:	89ab      	ldrh	r3, [r5, #12]
 800b850:	059a      	lsls	r2, r3, #22
 800b852:	d402      	bmi.n	800b85a <_vfiprintf_r+0x1fe>
 800b854:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b856:	f7fc fe1d 	bl	8008494 <__retarget_lock_release_recursive>
 800b85a:	89ab      	ldrh	r3, [r5, #12]
 800b85c:	065b      	lsls	r3, r3, #25
 800b85e:	f53f af1f 	bmi.w	800b6a0 <_vfiprintf_r+0x44>
 800b862:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b864:	e71e      	b.n	800b6a4 <_vfiprintf_r+0x48>
 800b866:	ab03      	add	r3, sp, #12
 800b868:	9300      	str	r3, [sp, #0]
 800b86a:	462a      	mov	r2, r5
 800b86c:	4b05      	ldr	r3, [pc, #20]	@ (800b884 <_vfiprintf_r+0x228>)
 800b86e:	a904      	add	r1, sp, #16
 800b870:	4630      	mov	r0, r6
 800b872:	f7fc f937 	bl	8007ae4 <_printf_i>
 800b876:	e7e4      	b.n	800b842 <_vfiprintf_r+0x1e6>
 800b878:	0800bf89 	.word	0x0800bf89
 800b87c:	0800bf93 	.word	0x0800bf93
 800b880:	080075b5 	.word	0x080075b5
 800b884:	0800b639 	.word	0x0800b639
 800b888:	0800bf8f 	.word	0x0800bf8f

0800b88c <__swbuf_r>:
 800b88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b88e:	460e      	mov	r6, r1
 800b890:	4614      	mov	r4, r2
 800b892:	4605      	mov	r5, r0
 800b894:	b118      	cbz	r0, 800b89e <__swbuf_r+0x12>
 800b896:	6a03      	ldr	r3, [r0, #32]
 800b898:	b90b      	cbnz	r3, 800b89e <__swbuf_r+0x12>
 800b89a:	f7fc fce3 	bl	8008264 <__sinit>
 800b89e:	69a3      	ldr	r3, [r4, #24]
 800b8a0:	60a3      	str	r3, [r4, #8]
 800b8a2:	89a3      	ldrh	r3, [r4, #12]
 800b8a4:	071a      	lsls	r2, r3, #28
 800b8a6:	d501      	bpl.n	800b8ac <__swbuf_r+0x20>
 800b8a8:	6923      	ldr	r3, [r4, #16]
 800b8aa:	b943      	cbnz	r3, 800b8be <__swbuf_r+0x32>
 800b8ac:	4621      	mov	r1, r4
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	f000 f82a 	bl	800b908 <__swsetup_r>
 800b8b4:	b118      	cbz	r0, 800b8be <__swbuf_r+0x32>
 800b8b6:	f04f 37ff 	mov.w	r7, #4294967295
 800b8ba:	4638      	mov	r0, r7
 800b8bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8be:	6823      	ldr	r3, [r4, #0]
 800b8c0:	6922      	ldr	r2, [r4, #16]
 800b8c2:	1a98      	subs	r0, r3, r2
 800b8c4:	6963      	ldr	r3, [r4, #20]
 800b8c6:	b2f6      	uxtb	r6, r6
 800b8c8:	4283      	cmp	r3, r0
 800b8ca:	4637      	mov	r7, r6
 800b8cc:	dc05      	bgt.n	800b8da <__swbuf_r+0x4e>
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	f7ff fa47 	bl	800ad64 <_fflush_r>
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	d1ed      	bne.n	800b8b6 <__swbuf_r+0x2a>
 800b8da:	68a3      	ldr	r3, [r4, #8]
 800b8dc:	3b01      	subs	r3, #1
 800b8de:	60a3      	str	r3, [r4, #8]
 800b8e0:	6823      	ldr	r3, [r4, #0]
 800b8e2:	1c5a      	adds	r2, r3, #1
 800b8e4:	6022      	str	r2, [r4, #0]
 800b8e6:	701e      	strb	r6, [r3, #0]
 800b8e8:	6962      	ldr	r2, [r4, #20]
 800b8ea:	1c43      	adds	r3, r0, #1
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d004      	beq.n	800b8fa <__swbuf_r+0x6e>
 800b8f0:	89a3      	ldrh	r3, [r4, #12]
 800b8f2:	07db      	lsls	r3, r3, #31
 800b8f4:	d5e1      	bpl.n	800b8ba <__swbuf_r+0x2e>
 800b8f6:	2e0a      	cmp	r6, #10
 800b8f8:	d1df      	bne.n	800b8ba <__swbuf_r+0x2e>
 800b8fa:	4621      	mov	r1, r4
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	f7ff fa31 	bl	800ad64 <_fflush_r>
 800b902:	2800      	cmp	r0, #0
 800b904:	d0d9      	beq.n	800b8ba <__swbuf_r+0x2e>
 800b906:	e7d6      	b.n	800b8b6 <__swbuf_r+0x2a>

0800b908 <__swsetup_r>:
 800b908:	b538      	push	{r3, r4, r5, lr}
 800b90a:	4b29      	ldr	r3, [pc, #164]	@ (800b9b0 <__swsetup_r+0xa8>)
 800b90c:	4605      	mov	r5, r0
 800b90e:	6818      	ldr	r0, [r3, #0]
 800b910:	460c      	mov	r4, r1
 800b912:	b118      	cbz	r0, 800b91c <__swsetup_r+0x14>
 800b914:	6a03      	ldr	r3, [r0, #32]
 800b916:	b90b      	cbnz	r3, 800b91c <__swsetup_r+0x14>
 800b918:	f7fc fca4 	bl	8008264 <__sinit>
 800b91c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b920:	0719      	lsls	r1, r3, #28
 800b922:	d422      	bmi.n	800b96a <__swsetup_r+0x62>
 800b924:	06da      	lsls	r2, r3, #27
 800b926:	d407      	bmi.n	800b938 <__swsetup_r+0x30>
 800b928:	2209      	movs	r2, #9
 800b92a:	602a      	str	r2, [r5, #0]
 800b92c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b930:	81a3      	strh	r3, [r4, #12]
 800b932:	f04f 30ff 	mov.w	r0, #4294967295
 800b936:	e033      	b.n	800b9a0 <__swsetup_r+0x98>
 800b938:	0758      	lsls	r0, r3, #29
 800b93a:	d512      	bpl.n	800b962 <__swsetup_r+0x5a>
 800b93c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b93e:	b141      	cbz	r1, 800b952 <__swsetup_r+0x4a>
 800b940:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b944:	4299      	cmp	r1, r3
 800b946:	d002      	beq.n	800b94e <__swsetup_r+0x46>
 800b948:	4628      	mov	r0, r5
 800b94a:	f7fd fbf9 	bl	8009140 <_free_r>
 800b94e:	2300      	movs	r3, #0
 800b950:	6363      	str	r3, [r4, #52]	@ 0x34
 800b952:	89a3      	ldrh	r3, [r4, #12]
 800b954:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b958:	81a3      	strh	r3, [r4, #12]
 800b95a:	2300      	movs	r3, #0
 800b95c:	6063      	str	r3, [r4, #4]
 800b95e:	6923      	ldr	r3, [r4, #16]
 800b960:	6023      	str	r3, [r4, #0]
 800b962:	89a3      	ldrh	r3, [r4, #12]
 800b964:	f043 0308 	orr.w	r3, r3, #8
 800b968:	81a3      	strh	r3, [r4, #12]
 800b96a:	6923      	ldr	r3, [r4, #16]
 800b96c:	b94b      	cbnz	r3, 800b982 <__swsetup_r+0x7a>
 800b96e:	89a3      	ldrh	r3, [r4, #12]
 800b970:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b978:	d003      	beq.n	800b982 <__swsetup_r+0x7a>
 800b97a:	4621      	mov	r1, r4
 800b97c:	4628      	mov	r0, r5
 800b97e:	f000 f883 	bl	800ba88 <__smakebuf_r>
 800b982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b986:	f013 0201 	ands.w	r2, r3, #1
 800b98a:	d00a      	beq.n	800b9a2 <__swsetup_r+0x9a>
 800b98c:	2200      	movs	r2, #0
 800b98e:	60a2      	str	r2, [r4, #8]
 800b990:	6962      	ldr	r2, [r4, #20]
 800b992:	4252      	negs	r2, r2
 800b994:	61a2      	str	r2, [r4, #24]
 800b996:	6922      	ldr	r2, [r4, #16]
 800b998:	b942      	cbnz	r2, 800b9ac <__swsetup_r+0xa4>
 800b99a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b99e:	d1c5      	bne.n	800b92c <__swsetup_r+0x24>
 800b9a0:	bd38      	pop	{r3, r4, r5, pc}
 800b9a2:	0799      	lsls	r1, r3, #30
 800b9a4:	bf58      	it	pl
 800b9a6:	6962      	ldrpl	r2, [r4, #20]
 800b9a8:	60a2      	str	r2, [r4, #8]
 800b9aa:	e7f4      	b.n	800b996 <__swsetup_r+0x8e>
 800b9ac:	2000      	movs	r0, #0
 800b9ae:	e7f7      	b.n	800b9a0 <__swsetup_r+0x98>
 800b9b0:	20000018 	.word	0x20000018

0800b9b4 <_raise_r>:
 800b9b4:	291f      	cmp	r1, #31
 800b9b6:	b538      	push	{r3, r4, r5, lr}
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	460c      	mov	r4, r1
 800b9bc:	d904      	bls.n	800b9c8 <_raise_r+0x14>
 800b9be:	2316      	movs	r3, #22
 800b9c0:	6003      	str	r3, [r0, #0]
 800b9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c6:	bd38      	pop	{r3, r4, r5, pc}
 800b9c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b9ca:	b112      	cbz	r2, 800b9d2 <_raise_r+0x1e>
 800b9cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9d0:	b94b      	cbnz	r3, 800b9e6 <_raise_r+0x32>
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	f000 f830 	bl	800ba38 <_getpid_r>
 800b9d8:	4622      	mov	r2, r4
 800b9da:	4601      	mov	r1, r0
 800b9dc:	4628      	mov	r0, r5
 800b9de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9e2:	f000 b817 	b.w	800ba14 <_kill_r>
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d00a      	beq.n	800ba00 <_raise_r+0x4c>
 800b9ea:	1c59      	adds	r1, r3, #1
 800b9ec:	d103      	bne.n	800b9f6 <_raise_r+0x42>
 800b9ee:	2316      	movs	r3, #22
 800b9f0:	6003      	str	r3, [r0, #0]
 800b9f2:	2001      	movs	r0, #1
 800b9f4:	e7e7      	b.n	800b9c6 <_raise_r+0x12>
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	4798      	blx	r3
 800ba00:	2000      	movs	r0, #0
 800ba02:	e7e0      	b.n	800b9c6 <_raise_r+0x12>

0800ba04 <raise>:
 800ba04:	4b02      	ldr	r3, [pc, #8]	@ (800ba10 <raise+0xc>)
 800ba06:	4601      	mov	r1, r0
 800ba08:	6818      	ldr	r0, [r3, #0]
 800ba0a:	f7ff bfd3 	b.w	800b9b4 <_raise_r>
 800ba0e:	bf00      	nop
 800ba10:	20000018 	.word	0x20000018

0800ba14 <_kill_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	4d07      	ldr	r5, [pc, #28]	@ (800ba34 <_kill_r+0x20>)
 800ba18:	2300      	movs	r3, #0
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	4608      	mov	r0, r1
 800ba1e:	4611      	mov	r1, r2
 800ba20:	602b      	str	r3, [r5, #0]
 800ba22:	f7f5 ff14 	bl	800184e <_kill>
 800ba26:	1c43      	adds	r3, r0, #1
 800ba28:	d102      	bne.n	800ba30 <_kill_r+0x1c>
 800ba2a:	682b      	ldr	r3, [r5, #0]
 800ba2c:	b103      	cbz	r3, 800ba30 <_kill_r+0x1c>
 800ba2e:	6023      	str	r3, [r4, #0]
 800ba30:	bd38      	pop	{r3, r4, r5, pc}
 800ba32:	bf00      	nop
 800ba34:	2000065c 	.word	0x2000065c

0800ba38 <_getpid_r>:
 800ba38:	f7f5 bf01 	b.w	800183e <_getpid>

0800ba3c <__swhatbuf_r>:
 800ba3c:	b570      	push	{r4, r5, r6, lr}
 800ba3e:	460c      	mov	r4, r1
 800ba40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba44:	2900      	cmp	r1, #0
 800ba46:	b096      	sub	sp, #88	@ 0x58
 800ba48:	4615      	mov	r5, r2
 800ba4a:	461e      	mov	r6, r3
 800ba4c:	da0d      	bge.n	800ba6a <__swhatbuf_r+0x2e>
 800ba4e:	89a3      	ldrh	r3, [r4, #12]
 800ba50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ba54:	f04f 0100 	mov.w	r1, #0
 800ba58:	bf14      	ite	ne
 800ba5a:	2340      	movne	r3, #64	@ 0x40
 800ba5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ba60:	2000      	movs	r0, #0
 800ba62:	6031      	str	r1, [r6, #0]
 800ba64:	602b      	str	r3, [r5, #0]
 800ba66:	b016      	add	sp, #88	@ 0x58
 800ba68:	bd70      	pop	{r4, r5, r6, pc}
 800ba6a:	466a      	mov	r2, sp
 800ba6c:	f000 f848 	bl	800bb00 <_fstat_r>
 800ba70:	2800      	cmp	r0, #0
 800ba72:	dbec      	blt.n	800ba4e <__swhatbuf_r+0x12>
 800ba74:	9901      	ldr	r1, [sp, #4]
 800ba76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba7e:	4259      	negs	r1, r3
 800ba80:	4159      	adcs	r1, r3
 800ba82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba86:	e7eb      	b.n	800ba60 <__swhatbuf_r+0x24>

0800ba88 <__smakebuf_r>:
 800ba88:	898b      	ldrh	r3, [r1, #12]
 800ba8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba8c:	079d      	lsls	r5, r3, #30
 800ba8e:	4606      	mov	r6, r0
 800ba90:	460c      	mov	r4, r1
 800ba92:	d507      	bpl.n	800baa4 <__smakebuf_r+0x1c>
 800ba94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ba98:	6023      	str	r3, [r4, #0]
 800ba9a:	6123      	str	r3, [r4, #16]
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	6163      	str	r3, [r4, #20]
 800baa0:	b003      	add	sp, #12
 800baa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baa4:	ab01      	add	r3, sp, #4
 800baa6:	466a      	mov	r2, sp
 800baa8:	f7ff ffc8 	bl	800ba3c <__swhatbuf_r>
 800baac:	9f00      	ldr	r7, [sp, #0]
 800baae:	4605      	mov	r5, r0
 800bab0:	4639      	mov	r1, r7
 800bab2:	4630      	mov	r0, r6
 800bab4:	f7fd fbb8 	bl	8009228 <_malloc_r>
 800bab8:	b948      	cbnz	r0, 800bace <__smakebuf_r+0x46>
 800baba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800babe:	059a      	lsls	r2, r3, #22
 800bac0:	d4ee      	bmi.n	800baa0 <__smakebuf_r+0x18>
 800bac2:	f023 0303 	bic.w	r3, r3, #3
 800bac6:	f043 0302 	orr.w	r3, r3, #2
 800baca:	81a3      	strh	r3, [r4, #12]
 800bacc:	e7e2      	b.n	800ba94 <__smakebuf_r+0xc>
 800bace:	89a3      	ldrh	r3, [r4, #12]
 800bad0:	6020      	str	r0, [r4, #0]
 800bad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bad6:	81a3      	strh	r3, [r4, #12]
 800bad8:	9b01      	ldr	r3, [sp, #4]
 800bada:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bade:	b15b      	cbz	r3, 800baf8 <__smakebuf_r+0x70>
 800bae0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bae4:	4630      	mov	r0, r6
 800bae6:	f000 f81d 	bl	800bb24 <_isatty_r>
 800baea:	b128      	cbz	r0, 800baf8 <__smakebuf_r+0x70>
 800baec:	89a3      	ldrh	r3, [r4, #12]
 800baee:	f023 0303 	bic.w	r3, r3, #3
 800baf2:	f043 0301 	orr.w	r3, r3, #1
 800baf6:	81a3      	strh	r3, [r4, #12]
 800baf8:	89a3      	ldrh	r3, [r4, #12]
 800bafa:	431d      	orrs	r5, r3
 800bafc:	81a5      	strh	r5, [r4, #12]
 800bafe:	e7cf      	b.n	800baa0 <__smakebuf_r+0x18>

0800bb00 <_fstat_r>:
 800bb00:	b538      	push	{r3, r4, r5, lr}
 800bb02:	4d07      	ldr	r5, [pc, #28]	@ (800bb20 <_fstat_r+0x20>)
 800bb04:	2300      	movs	r3, #0
 800bb06:	4604      	mov	r4, r0
 800bb08:	4608      	mov	r0, r1
 800bb0a:	4611      	mov	r1, r2
 800bb0c:	602b      	str	r3, [r5, #0]
 800bb0e:	f7f5 fefe 	bl	800190e <_fstat>
 800bb12:	1c43      	adds	r3, r0, #1
 800bb14:	d102      	bne.n	800bb1c <_fstat_r+0x1c>
 800bb16:	682b      	ldr	r3, [r5, #0]
 800bb18:	b103      	cbz	r3, 800bb1c <_fstat_r+0x1c>
 800bb1a:	6023      	str	r3, [r4, #0]
 800bb1c:	bd38      	pop	{r3, r4, r5, pc}
 800bb1e:	bf00      	nop
 800bb20:	2000065c 	.word	0x2000065c

0800bb24 <_isatty_r>:
 800bb24:	b538      	push	{r3, r4, r5, lr}
 800bb26:	4d06      	ldr	r5, [pc, #24]	@ (800bb40 <_isatty_r+0x1c>)
 800bb28:	2300      	movs	r3, #0
 800bb2a:	4604      	mov	r4, r0
 800bb2c:	4608      	mov	r0, r1
 800bb2e:	602b      	str	r3, [r5, #0]
 800bb30:	f7f5 fefd 	bl	800192e <_isatty>
 800bb34:	1c43      	adds	r3, r0, #1
 800bb36:	d102      	bne.n	800bb3e <_isatty_r+0x1a>
 800bb38:	682b      	ldr	r3, [r5, #0]
 800bb3a:	b103      	cbz	r3, 800bb3e <_isatty_r+0x1a>
 800bb3c:	6023      	str	r3, [r4, #0]
 800bb3e:	bd38      	pop	{r3, r4, r5, pc}
 800bb40:	2000065c 	.word	0x2000065c

0800bb44 <_init>:
 800bb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb46:	bf00      	nop
 800bb48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb4a:	bc08      	pop	{r3}
 800bb4c:	469e      	mov	lr, r3
 800bb4e:	4770      	bx	lr

0800bb50 <_fini>:
 800bb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb52:	bf00      	nop
 800bb54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb56:	bc08      	pop	{r3}
 800bb58:	469e      	mov	lr, r3
 800bb5a:	4770      	bx	lr
