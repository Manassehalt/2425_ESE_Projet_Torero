
Projet_Torero_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebd8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  0800edb8  0800edb8  0000fdb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f388  0800f388  000111dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f388  0800f388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f390  0800f390  000111dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f390  0800f390  00010390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f394  0800f394  00010394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800f398  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004034  200001dc  0800f574  000111dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004210  0800f574  00011210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021ad6  00000000  00000000  0001120c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cfc  00000000  00000000  00032ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ea8  00000000  00000000  000379e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017b0  00000000  00000000  00039888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d88  00000000  00000000  0003b038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024b0d  00000000  00000000  0005fdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e915b  00000000  00000000  000848cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016da28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009768  00000000  00000000  0016da6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  001771d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800eda0 	.word	0x0800eda0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0800eda0 	.word	0x0800eda0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f00a fb41 	bl	800b6d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001054:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800105a:	4b30      	ldr	r3, [pc, #192]	@ (800111c <MX_ADC1_Init+0xe8>)
 800105c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <MX_ADC1_Init+0xe8>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001074:	4b29      	ldr	r3, [pc, #164]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b28      	ldr	r3, [pc, #160]	@ (800111c <MX_ADC1_Init+0xe8>)
 800107c:	2204      	movs	r2, #4
 800107e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001088:	2200      	movs	r2, #0
 800108a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <MX_ADC1_Init+0xe8>)
 800108e:	2201      	movs	r2, #1
 8001090:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010bc:	4817      	ldr	r0, [pc, #92]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010be:	f001 fe1b 	bl	8002cf8 <HAL_ADC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010c8:	f000 fb8c 	bl	80017e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d4:	4619      	mov	r1, r3
 80010d6:	4811      	ldr	r0, [pc, #68]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010d8:	f002 fba8 	bl	800382c <HAL_ADCEx_MultiModeConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010e2:	f000 fb7f 	bl	80017e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_ADC1_Init+0xec>)
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ea:	2306      	movs	r3, #6
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f2:	237f      	movs	r3, #127	@ 0x7f
 80010f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f6:	2304      	movs	r3, #4
 80010f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001104:	f001 ff7c 	bl	8003000 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800110e:	f000 fb69 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3730      	adds	r7, #48	@ 0x30
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001f8 	.word	0x200001f8
 8001120:	32601000 	.word	0x32601000

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09a      	sub	sp, #104	@ 0x68
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	2244      	movs	r2, #68	@ 0x44
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f00a fac5 	bl	800b6d4 <memset>
  if(adcHandle->Instance==ADC1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001152:	d133      	bne.n	80011bc <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001154:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001158:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800115a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800115e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4618      	mov	r0, r3
 8001166:	f003 feff 	bl	8004f68 <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001170:	f000 fb38 	bl	80017e4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 800117a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001190:	4a0c      	ldr	r2, [pc, #48]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 8001192:	f043 0302 	orr.w	r3, r3, #2
 8001196:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001198:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = CAPTEUR_D_Pin;
 80011a4:	2302      	movs	r3, #2
 80011a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a8:	2303      	movs	r3, #3
 80011aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(CAPTEUR_D_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b4:	4619      	mov	r1, r3
 80011b6:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 80011b8:	f002 ff5e 	bl	8004078 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011bc:	bf00      	nop
 80011be:	3768      	adds	r7, #104	@ 0x68
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021000 	.word	0x40021000
 80011c8:	48000400 	.word	0x48000400

080011cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011cc:	b5b0      	push	{r4, r5, r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80011d2:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <MX_FREERTOS_Init+0x2c>)
 80011d4:	1d3c      	adds	r4, r7, #4
 80011d6:	461d      	mov	r5, r3
 80011d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011dc:	682b      	ldr	r3, [r5, #0]
 80011de:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f007 f8e8 	bl	80083ba <osThreadCreate>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a03      	ldr	r2, [pc, #12]	@ (80011fc <MX_FREERTOS_Init+0x30>)
 80011ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80011f0:	bf00      	nop
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bdb0      	pop	{r4, r5, r7, pc}
 80011f8:	0800edc4 	.word	0x0800edc4
 80011fc:	20000264 	.word	0x20000264

08001200 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001208:	2001      	movs	r0, #1
 800120a:	f007 f8fd 	bl	8008408 <osDelay>
 800120e:	e7fb      	b.n	8001208 <StartDefaultTask+0x8>

08001210 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001216:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_DMA_Init+0x50>)
 8001218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800121a:	4a11      	ldr	r2, [pc, #68]	@ (8001260 <MX_DMA_Init+0x50>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	6493      	str	r3, [r2, #72]	@ 0x48
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_DMA_Init+0x50>)
 8001224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_DMA_Init+0x50>)
 8001230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001232:	4a0b      	ldr	r2, [pc, #44]	@ (8001260 <MX_DMA_Init+0x50>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6493      	str	r3, [r2, #72]	@ 0x48
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_DMA_Init+0x50>)
 800123c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2105      	movs	r1, #5
 800124a:	200b      	movs	r0, #11
 800124c:	f002 fc6d 	bl	8003b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001250:	200b      	movs	r0, #11
 8001252:	f002 fc84 	bl	8003b5e <HAL_NVIC_EnableIRQ>

}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000

08001264 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	@ 0x28
 8001268:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	4b51      	ldr	r3, [pc, #324]	@ (80013c0 <MX_GPIO_Init+0x15c>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	4a50      	ldr	r2, [pc, #320]	@ (80013c0 <MX_GPIO_Init+0x15c>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001286:	4b4e      	ldr	r3, [pc, #312]	@ (80013c0 <MX_GPIO_Init+0x15c>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001292:	4b4b      	ldr	r3, [pc, #300]	@ (80013c0 <MX_GPIO_Init+0x15c>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	4a4a      	ldr	r2, [pc, #296]	@ (80013c0 <MX_GPIO_Init+0x15c>)
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129e:	4b48      	ldr	r3, [pc, #288]	@ (80013c0 <MX_GPIO_Init+0x15c>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a2:	f003 0320 	and.w	r3, r3, #32
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012aa:	4b45      	ldr	r3, [pc, #276]	@ (80013c0 <MX_GPIO_Init+0x15c>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ae:	4a44      	ldr	r2, [pc, #272]	@ (80013c0 <MX_GPIO_Init+0x15c>)
 80012b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b6:	4b42      	ldr	r3, [pc, #264]	@ (80013c0 <MX_GPIO_Init+0x15c>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b3f      	ldr	r3, [pc, #252]	@ (80013c0 <MX_GPIO_Init+0x15c>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c6:	4a3e      	ldr	r2, [pc, #248]	@ (80013c0 <MX_GPIO_Init+0x15c>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ce:	4b3c      	ldr	r3, [pc, #240]	@ (80013c0 <MX_GPIO_Init+0x15c>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	4b39      	ldr	r3, [pc, #228]	@ (80013c0 <MX_GPIO_Init+0x15c>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	4a38      	ldr	r2, [pc, #224]	@ (80013c0 <MX_GPIO_Init+0x15c>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e6:	4b36      	ldr	r3, [pc, #216]	@ (80013c0 <MX_GPIO_Init+0x15c>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INT2_ACC_Pin|LED_SE_Pin|LED_SW_Pin|Status_LED_Pin
 80012f2:	2200      	movs	r2, #0
 80012f4:	f642 4150 	movw	r1, #11344	@ 0x2c50
 80012f8:	4832      	ldr	r0, [pc, #200]	@ (80013c4 <MX_GPIO_Init+0x160>)
 80012fa:	f003 f83f 	bl	800437c <HAL_GPIO_WritePin>
                          |Status_LED_debbug_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_SET);
 80012fe:	2201      	movs	r2, #1
 8001300:	2120      	movs	r1, #32
 8001302:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001306:	f003 f839 	bl	800437c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_NE_Pin|INT1_ACC_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	f248 4180 	movw	r1, #33920	@ 0x8480
 8001310:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001314:	f003 f832 	bl	800437c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 8001318:	2200      	movs	r2, #0
 800131a:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 800131e:	482a      	ldr	r0, [pc, #168]	@ (80013c8 <MX_GPIO_Init+0x164>)
 8001320:	f003 f82c 	bl	800437c <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_S_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = INT2_ACC_Pin|LED_SE_Pin|LED_SW_Pin|Status_LED_Pin
 8001324:	f642 4350 	movw	r3, #11344	@ 0x2c50
 8001328:	617b      	str	r3, [r7, #20]
                          |Status_LED_debbug_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4821      	ldr	r0, [pc, #132]	@ (80013c4 <MX_GPIO_Init+0x160>)
 800133e:	f002 fe9b 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8001342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	481d      	ldr	r0, [pc, #116]	@ (80013cc <MX_GPIO_Init+0x168>)
 8001358:	f002 fe8e 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_ACC_Pin|LED_NE_Pin|INT1_ACC_Pin|DEV_EN_LIDAR_Pin;
 800135c:	f248 43a0 	movw	r3, #33952	@ 0x84a0
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001378:	f002 fe7e 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB8 */
  GPIO_InitStruct.Pin = CAPTEUR_G_Pin|GPIO_PIN_8;
 800137c:	f240 1301 	movw	r3, #257	@ 0x101
 8001380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001382:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	480d      	ldr	r0, [pc, #52]	@ (80013c8 <MX_GPIO_Init+0x164>)
 8001394:	f002 fe70 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 8001398:	f241 03f4 	movw	r3, #4340	@ 0x10f4
 800139c:	617b      	str	r3, [r7, #20]
                          |LED_E_Pin|LED_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	@ (80013c8 <MX_GPIO_Init+0x164>)
 80013b2:	f002 fe61 	bl	8004078 <HAL_GPIO_Init>

}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	@ 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000
 80013c4:	48000800 	.word	0x48000800
 80013c8:	48000400 	.word	0x48000400
 80013cc:	48001800 	.word	0x48001800

080013d0 <__io_putchar>:

int read_sensor_Right(void) {
    return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
}

int __io_putchar(int chr){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 80013d8:	1d39      	adds	r1, r7, #4
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	2201      	movs	r2, #1
 80013e0:	4803      	ldr	r0, [pc, #12]	@ (80013f0 <__io_putchar+0x20>)
 80013e2:	f005 ff0f 	bl	8007204 <HAL_UART_Transmit>
	return chr;
 80013e6:	687b      	ldr	r3, [r7, #4]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200016d4 	.word	0x200016d4

080013f4 <TaskETAT>:
			printf("%d : %d\r\n", i, pData[i]);
		}
	}
}

void TaskETAT(void * pvParameters){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	for (;;) {
		// Attendre que le sémaphore soit donné
		if (xSemaphoreTake(xShockSemaphore, portMAX_DELAY) == pdTRUE) {
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <TaskETAT+0x54>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	4618      	mov	r0, r3
 8001406:	f007 fb19 	bl	8008a3c <xQueueSemaphoreTake>
 800140a:	4603      	mov	r3, r0
 800140c:	2b01      	cmp	r3, #1
 800140e:	d1f5      	bne.n	80013fc <TaskETAT+0x8>
			printf("%f\r\n", delta);
 8001410:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <TaskETAT+0x58>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f8bf 	bl	8000598 <__aeabi_f2d>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	480c      	ldr	r0, [pc, #48]	@ (8001450 <TaskETAT+0x5c>)
 8001420:	f009 fff0 	bl	800b404 <iprintf>
			if(chat == pdTRUE){
 8001424:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <TaskETAT+0x60>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d106      	bne.n	800143a <TaskETAT+0x46>
				chat = pdFALSE;
 800142c:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <TaskETAT+0x60>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
				printf("Squik\r\n");
 8001432:	4809      	ldr	r0, [pc, #36]	@ (8001458 <TaskETAT+0x64>)
 8001434:	f00a f84e 	bl	800b4d4 <puts>
 8001438:	e7e0      	b.n	80013fc <TaskETAT+0x8>
			}
			else{
				// Le choc a été détecté
				chat = pdTRUE;
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <TaskETAT+0x60>)
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]
				printf("Miaou\r\n");
 8001440:	4806      	ldr	r0, [pc, #24]	@ (800145c <TaskETAT+0x68>)
 8001442:	f00a f847 	bl	800b4d4 <puts>
		if (xSemaphoreTake(xShockSemaphore, portMAX_DELAY) == pdTRUE) {
 8001446:	e7d9      	b.n	80013fc <TaskETAT+0x8>
 8001448:	2000152c 	.word	0x2000152c
 800144c:	20001528 	.word	0x20001528
 8001450:	0800ede8 	.word	0x0800ede8
 8001454:	20000000 	.word	0x20000000
 8001458:	0800edf0 	.word	0x0800edf0
 800145c:	0800edf8 	.word	0x0800edf8

08001460 <TaskACC>:
		printf("lidar\r\n");
		vTaskDelay(100);
	}
}

void TaskACC(void * pvParameters){
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	float current_data[3] = {0.0f, 0.0f, 0.0f}; // Valeur actuelle de X, Y, Z
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
	float prev_data[3] = {0.0f, 0.0f, 0.0f};    // Valeur précédente de X, Y, Z
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	f04f 0300 	mov.w	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
	                               // Variation de magnitude entre deux lectures

	for (;;) {
		// Lire les données actuelles de l'accéléromètre
		if (Read_Acceleration(current_data) == HAL_OK) {  // Fonction de lecture à implémenter
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fa89 	bl	80019a8 <Read_Acceleration>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d153      	bne.n	8001544 <TaskACC+0xe4>
			// Calculer la magnitude des vecteurs actuel et précédent
			float current_magnitude = sqrtf(current_data[0] * current_data[0] +
 800149c:	ed97 7a05 	vldr	s14, [r7, #20]
 80014a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80014a4:	ee27 7a27 	vmul.f32	s14, s14, s15
					current_data[1] * current_data[1] +
 80014a8:	edd7 6a06 	vldr	s13, [r7, #24]
 80014ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80014b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
			float current_magnitude = sqrtf(current_data[0] * current_data[0] +
 80014b4:	ee37 7a27 	vadd.f32	s14, s14, s15
					current_data[2] * current_data[2]);
 80014b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80014bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
			float current_magnitude = sqrtf(current_data[0] * current_data[0] +
 80014c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c8:	eeb0 0a67 	vmov.f32	s0, s15
 80014cc:	f00d fc46 	bl	800ed5c <sqrtf>
 80014d0:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

			float prev_magnitude = sqrtf(prev_data[0] * prev_data[0] +
 80014d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80014d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80014dc:	ee27 7a27 	vmul.f32	s14, s14, s15
					prev_data[1] * prev_data[1] +
 80014e0:	edd7 6a03 	vldr	s13, [r7, #12]
 80014e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
			float prev_magnitude = sqrtf(prev_data[0] * prev_data[0] +
 80014ec:	ee37 7a27 	vadd.f32	s14, s14, s15
					prev_data[2] * prev_data[2]);
 80014f0:	edd7 6a04 	vldr	s13, [r7, #16]
 80014f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80014f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
			float prev_magnitude = sqrtf(prev_data[0] * prev_data[0] +
 80014fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001500:	eeb0 0a67 	vmov.f32	s0, s15
 8001504:	f00d fc2a 	bl	800ed5c <sqrtf>
 8001508:	ed87 0a08 	vstr	s0, [r7, #32]

			// Calculer la différence entre la magnitude actuelle et précédente
			delta = fabsf(current_magnitude - prev_magnitude);
 800150c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001510:	edd7 7a08 	vldr	s15, [r7, #32]
 8001514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001518:	eef0 7ae7 	vabs.f32	s15, s15
 800151c:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <TaskACC+0xf8>)
 800151e:	edc3 7a00 	vstr	s15, [r3]

			// Si la variation dépasse le seuil, signaler un choc
			if (delta > SHOCK_THRESHOLD) {
 8001522:	4b0d      	ldr	r3, [pc, #52]	@ (8001558 <TaskACC+0xf8>)
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800152c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001534:	dd06      	ble.n	8001544 <TaskACC+0xe4>
				xSemaphoreGive(xShockSemaphore);
 8001536:	4b09      	ldr	r3, [pc, #36]	@ (800155c <TaskACC+0xfc>)
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	2300      	movs	r3, #0
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	f007 f8ea 	bl	8008718 <xQueueGenericSend>
			}
		}

		// Mettre à jour les valeurs précédentes
		prev_data[0] = current_data[0];
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	60bb      	str	r3, [r7, #8]
		prev_data[1] = current_data[1];
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	60fb      	str	r3, [r7, #12]
		prev_data[2] = current_data[2];
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	613b      	str	r3, [r7, #16]


		//printf("%f\r\n", delta);
		vTaskDelay(50);
 8001550:	2032      	movs	r0, #50	@ 0x32
 8001552:	f007 fdb9 	bl	80090c8 <vTaskDelay>
		if (Read_Acceleration(current_data) == HAL_OK) {  // Fonction de lecture à implémenter
 8001556:	e799      	b.n	800148c <TaskACC+0x2c>
 8001558:	20001528 	.word	0x20001528
 800155c:	2000152c 	.word	0x2000152c

08001560 <TaskMOTOR>:


}


void TaskMOTOR (void * pvParameters){
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	for(;;){
		Motor_SetSpeed(100);
 8001568:	2064      	movs	r0, #100	@ 0x64
 800156a:	f000 ff0b 	bl	8002384 <Motor_SetSpeed>
		vTaskDelay(100);
 800156e:	2064      	movs	r0, #100	@ 0x64
 8001570:	f007 fdaa 	bl	80090c8 <vTaskDelay>
		Motor_SetSpeed(100);
 8001574:	bf00      	nop
 8001576:	e7f7      	b.n	8001568 <TaskMOTOR+0x8>

08001578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	TaskHandle_t xHandleLIDAR = NULL;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
	TaskHandle_t xHandleETAT = NULL;
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
	TaskHandle_t xHandleACC = NULL;
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
	TaskHandle_t xHandleMOTOR = NULL;
 800158a:	2300      	movs	r3, #0
 800158c:	603b      	str	r3, [r7, #0]
	TaskHandle_t xHandleEDGE = NULL;
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001592:	f001 f948 	bl	8002826 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001596:	f000 f8a3 	bl	80016e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159a:	f7ff fe63 	bl	8001264 <MX_GPIO_Init>
  MX_DMA_Init();
 800159e:	f7ff fe37 	bl	8001210 <MX_DMA_Init>
  MX_ADC1_Init();
 80015a2:	f7ff fd47 	bl	8001034 <MX_ADC1_Init>
  MX_SPI2_Init();
 80015a6:	f000 f923 	bl	80017f0 <MX_SPI2_Init>
  MX_TIM1_Init();
 80015aa:	f000 fbcf 	bl	8001d4c <MX_TIM1_Init>
  MX_TIM2_Init();
 80015ae:	f000 fc6d 	bl	8001e8c <MX_TIM2_Init>
  MX_TIM3_Init();
 80015b2:	f000 fccf 	bl	8001f54 <MX_TIM3_Init>
  MX_TIM4_Init();
 80015b6:	f000 fd23 	bl	8002000 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80015ba:	f000 ff6b 	bl	8002494 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80015be:	f000 ffb5 	bl	800252c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Start_Motors();
 80015c2:	f000 fec9 	bl	8002358 <Start_Motors>
	ADXL343_Init();
 80015c6:	f000 fa4d 	bl	8001a64 <ADXL343_Init>
	LIDAR_Init(&hlidar);
 80015ca:	4835      	ldr	r0, [pc, #212]	@ (80016a0 <main+0x128>)
 80015cc:	f001 f8c0 	bl	8002750 <LIDAR_Init>
	LIDAR_Start(&hlidar);
 80015d0:	4833      	ldr	r0, [pc, #204]	@ (80016a0 <main+0x128>)
 80015d2:	f001 f8d9 	bl	8002788 <LIDAR_Start>

	ret = xTaskCreate(TaskETAT,"TaskETAT",STACK_SIZE,(void *) NULL,5,&xHandleETAT);
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	2305      	movs	r3, #5
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2300      	movs	r3, #0
 80015e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015e6:	492f      	ldr	r1, [pc, #188]	@ (80016a4 <main+0x12c>)
 80015e8:	482f      	ldr	r0, [pc, #188]	@ (80016a8 <main+0x130>)
 80015ea:	f007 fc39 	bl	8008e60 <xTaskCreate>
 80015ee:	60f8      	str	r0, [r7, #12]
	if (ret != pdPASS)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d004      	beq.n	8001600 <main+0x88>
	{
		printf("Error creating TaskETAT\r\n");
 80015f6:	482d      	ldr	r0, [pc, #180]	@ (80016ac <main+0x134>)
 80015f8:	f009 ff6c 	bl	800b4d4 <puts>
		Error_Handler();
 80015fc:	f000 f8f2 	bl	80017e4 <Error_Handler>
	}
	printf("Task ETAT created\r\n");
 8001600:	482b      	ldr	r0, [pc, #172]	@ (80016b0 <main+0x138>)
 8001602:	f009 ff67 	bl	800b4d4 <puts>
		printf("Error creating TaskLIDAR\r\n");
		Error_Handler();
	}
	printf("Task LIDAR created\r\n");
*/
	ret = xTaskCreate(TaskACC,"TaskACC",STACK_SIZE,(void *) NULL,4,&xHandleACC);
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	2304      	movs	r3, #4
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2300      	movs	r3, #0
 8001610:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001614:	4927      	ldr	r1, [pc, #156]	@ (80016b4 <main+0x13c>)
 8001616:	4828      	ldr	r0, [pc, #160]	@ (80016b8 <main+0x140>)
 8001618:	f007 fc22 	bl	8008e60 <xTaskCreate>
 800161c:	60f8      	str	r0, [r7, #12]
	if (ret != pdPASS)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d004      	beq.n	800162e <main+0xb6>
	{
		printf("Error creating TaskACC\r\n");
 8001624:	4825      	ldr	r0, [pc, #148]	@ (80016bc <main+0x144>)
 8001626:	f009 ff55 	bl	800b4d4 <puts>
		Error_Handler();
 800162a:	f000 f8db 	bl	80017e4 <Error_Handler>
	}
	printf("Task ACC created\r\n");
 800162e:	4824      	ldr	r0, [pc, #144]	@ (80016c0 <main+0x148>)
 8001630:	f009 ff50 	bl	800b4d4 <puts>

	ret = xTaskCreate(TaskMOTOR,"TaskMOTOR",STACK_SIZE,(void *) NULL,1,&xHandleMOTOR);
 8001634:	463b      	mov	r3, r7
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	2301      	movs	r3, #1
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2300      	movs	r3, #0
 800163e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001642:	4920      	ldr	r1, [pc, #128]	@ (80016c4 <main+0x14c>)
 8001644:	4820      	ldr	r0, [pc, #128]	@ (80016c8 <main+0x150>)
 8001646:	f007 fc0b 	bl	8008e60 <xTaskCreate>
 800164a:	60f8      	str	r0, [r7, #12]
	if (ret != pdPASS)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d004      	beq.n	800165c <main+0xe4>
	{
		printf("Error creating TaskMOTOR\r\n");
 8001652:	481e      	ldr	r0, [pc, #120]	@ (80016cc <main+0x154>)
 8001654:	f009 ff3e 	bl	800b4d4 <puts>
		Error_Handler();
 8001658:	f000 f8c4 	bl	80017e4 <Error_Handler>
	}
	printf("Task MOTOR created\r\n");
 800165c:	481c      	ldr	r0, [pc, #112]	@ (80016d0 <main+0x158>)
 800165e:	f009 ff39 	bl	800b4d4 <puts>
		printf("Error creating TaskEDGE\r\n");
		Error_Handler();
	}
	printf("Task EDGE created\r\n");
*/
	SemDMAHalfCallBack = xSemaphoreCreateBinary();
 8001662:	2203      	movs	r2, #3
 8001664:	2100      	movs	r1, #0
 8001666:	2001      	movs	r0, #1
 8001668:	f007 f800 	bl	800866c <xQueueGenericCreate>
 800166c:	4603      	mov	r3, r0
 800166e:	4a19      	ldr	r2, [pc, #100]	@ (80016d4 <main+0x15c>)
 8001670:	6013      	str	r3, [r2, #0]
	SemDMAClpCallBack = xSemaphoreCreateBinary();
 8001672:	2203      	movs	r2, #3
 8001674:	2100      	movs	r1, #0
 8001676:	2001      	movs	r0, #1
 8001678:	f006 fff8 	bl	800866c <xQueueGenericCreate>
 800167c:	4603      	mov	r3, r0
 800167e:	4a16      	ldr	r2, [pc, #88]	@ (80016d8 <main+0x160>)
 8001680:	6013      	str	r3, [r2, #0]
	xShockSemaphore = xSemaphoreCreateBinary();
 8001682:	2203      	movs	r2, #3
 8001684:	2100      	movs	r1, #0
 8001686:	2001      	movs	r0, #1
 8001688:	f006 fff0 	bl	800866c <xQueueGenericCreate>
 800168c:	4603      	mov	r3, r0
 800168e:	4a13      	ldr	r2, [pc, #76]	@ (80016dc <main+0x164>)
 8001690:	6013      	str	r3, [r2, #0]
	//xNoSignalSemaphore = xSemaphoreCreateBinary();
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001692:	f7ff fd9b 	bl	80011cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001696:	f006 fe89 	bl	80083ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800169a:	bf00      	nop
 800169c:	e7fd      	b.n	800169a <main+0x122>
 800169e:	bf00      	nop
 80016a0:	20000268 	.word	0x20000268
 80016a4:	0800ee1c 	.word	0x0800ee1c
 80016a8:	080013f5 	.word	0x080013f5
 80016ac:	0800ee28 	.word	0x0800ee28
 80016b0:	0800ee44 	.word	0x0800ee44
 80016b4:	0800ee58 	.word	0x0800ee58
 80016b8:	08001461 	.word	0x08001461
 80016bc:	0800ee60 	.word	0x0800ee60
 80016c0:	0800ee78 	.word	0x0800ee78
 80016c4:	0800ee8c 	.word	0x0800ee8c
 80016c8:	08001561 	.word	0x08001561
 80016cc:	0800ee98 	.word	0x0800ee98
 80016d0:	0800eeb4 	.word	0x0800eeb4
 80016d4:	20001530 	.word	0x20001530
 80016d8:	20001534 	.word	0x20001534
 80016dc:	2000152c 	.word	0x2000152c

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b094      	sub	sp, #80	@ 0x50
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0318 	add.w	r3, r7, #24
 80016ea:	2238      	movs	r2, #56	@ 0x38
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f009 fff0 	bl	800b6d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001702:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001706:	f002 fe51 	bl	80043ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800170a:	2301      	movs	r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800170e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001714:	2300      	movs	r3, #0
 8001716:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001718:	f107 0318 	add.w	r3, r7, #24
 800171c:	4618      	mov	r0, r3
 800171e:	f002 fef9 	bl	8004514 <HAL_RCC_OscConfig>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <SystemClock_Config+0x4c>
  {
    Error_Handler();
 8001728:	f000 f85c 	bl	80017e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800172c:	230f      	movs	r3, #15
 800172e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001730:	2302      	movs	r3, #2
 8001732:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f003 f9f7 	bl	8004b38 <HAL_RCC_ClockConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001750:	f000 f848 	bl	80017e4 <Error_Handler>
  }
}
 8001754:	bf00      	nop
 8001756:	3750      	adds	r7, #80	@ 0x50
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_UART_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	BaseType_t higher_priority_task_woken = pdFALSE;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(SemHalfCallBack,&higher_priority_task_woken);
 8001768:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <HAL_UART_RxHalfCpltCallback+0x3c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f107 020c 	add.w	r2, r7, #12
 8001770:	4611      	mov	r1, r2
 8001772:	4618      	mov	r0, r3
 8001774:	f007 f8d2 	bl	800891c <xQueueGiveFromISR>
	portYIELD_FROM_ISR(higher_priority_task_woken);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d007      	beq.n	800178e <HAL_UART_RxHalfCpltCallback+0x32>
 800177e:	4b07      	ldr	r3, [pc, #28]	@ (800179c <HAL_UART_RxHalfCpltCallback+0x40>)
 8001780:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	f3bf 8f4f 	dsb	sy
 800178a:	f3bf 8f6f 	isb	sy
}
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20001520 	.word	0x20001520
 800179c:	e000ed04 	.word	0xe000ed04

080017a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	BaseType_t higher_priority_task_woken = pdFALSE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(SemClpCallBack,&higher_priority_task_woken);
 80017ac:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <HAL_UART_RxCpltCallback+0x3c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f107 020c 	add.w	r2, r7, #12
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f007 f8b0 	bl	800891c <xQueueGiveFromISR>
	portYIELD_FROM_ISR(higher_priority_task_woken);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d007      	beq.n	80017d2 <HAL_UART_RxCpltCallback+0x32>
 80017c2:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <HAL_UART_RxCpltCallback+0x40>)
 80017c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	f3bf 8f4f 	dsb	sy
 80017ce:	f3bf 8f6f 	isb	sy
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20001524 	.word	0x20001524
 80017e0:	e000ed04 	.word	0xe000ed04

080017e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e8:	b672      	cpsid	i
}
 80017ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <Error_Handler+0x8>

080017f0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80017f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001864 <MX_SPI2_Init+0x74>)
 80017f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001868 <MX_SPI2_Init+0x78>)
 80017f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001864 <MX_SPI2_Init+0x74>)
 80017fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001800:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001802:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <MX_SPI2_Init+0x74>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001808:	4b16      	ldr	r3, [pc, #88]	@ (8001864 <MX_SPI2_Init+0x74>)
 800180a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800180e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001810:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <MX_SPI2_Init+0x74>)
 8001812:	2202      	movs	r2, #2
 8001814:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001816:	4b13      	ldr	r3, [pc, #76]	@ (8001864 <MX_SPI2_Init+0x74>)
 8001818:	2201      	movs	r2, #1
 800181a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800181c:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <MX_SPI2_Init+0x74>)
 800181e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001822:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001824:	4b0f      	ldr	r3, [pc, #60]	@ (8001864 <MX_SPI2_Init+0x74>)
 8001826:	2218      	movs	r2, #24
 8001828:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800182a:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <MX_SPI2_Init+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001830:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <MX_SPI2_Init+0x74>)
 8001832:	2200      	movs	r2, #0
 8001834:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001836:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <MX_SPI2_Init+0x74>)
 8001838:	2200      	movs	r2, #0
 800183a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800183c:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <MX_SPI2_Init+0x74>)
 800183e:	2207      	movs	r2, #7
 8001840:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001842:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <MX_SPI2_Init+0x74>)
 8001844:	2200      	movs	r2, #0
 8001846:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001848:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <MX_SPI2_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800184e:	4805      	ldr	r0, [pc, #20]	@ (8001864 <MX_SPI2_Init+0x74>)
 8001850:	f003 fd7a 	bl	8005348 <HAL_SPI_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800185a:	f7ff ffc3 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20001538 	.word	0x20001538
 8001868:	40003800 	.word	0x40003800

0800186c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	@ 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a17      	ldr	r2, [pc, #92]	@ (80018e8 <HAL_SPI_MspInit+0x7c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d128      	bne.n	80018e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800188e:	4b17      	ldr	r3, [pc, #92]	@ (80018ec <HAL_SPI_MspInit+0x80>)
 8001890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001892:	4a16      	ldr	r2, [pc, #88]	@ (80018ec <HAL_SPI_MspInit+0x80>)
 8001894:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001898:	6593      	str	r3, [r2, #88]	@ 0x58
 800189a:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <HAL_SPI_MspInit+0x80>)
 800189c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <HAL_SPI_MspInit+0x80>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018aa:	4a10      	ldr	r2, [pc, #64]	@ (80018ec <HAL_SPI_MspInit+0x80>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b2:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <HAL_SPI_MspInit+0x80>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_TO_SCLK_ACC_Pin|SPI2_MISO_TO_SDO_ACC_Pin|SPI2_MOSI_TO_SDI_ACC_Pin;
 80018be:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80018c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018d0:	2305      	movs	r3, #5
 80018d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	4805      	ldr	r0, [pc, #20]	@ (80018f0 <HAL_SPI_MspInit+0x84>)
 80018dc:	f002 fbcc 	bl	8004078 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80018e0:	bf00      	nop
 80018e2:	3728      	adds	r7, #40	@ 0x28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40003800 	.word	0x40003800
 80018ec:	40021000 	.word	0x40021000
 80018f0:	48000400 	.word	0x48000400

080018f4 <SPI_Write>:
  /* USER CODE END SPI2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void SPI_Write(uint8_t reg, uint8_t value) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	460a      	mov	r2, r1
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	4613      	mov	r3, r2
 8001902:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg | 0x40;
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800190a:	b2db      	uxtb	r3, r3
 800190c:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 800190e:	79bb      	ldrb	r3, [r7, #6]
 8001910:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	2120      	movs	r1, #32
 8001916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800191a:	f002 fd2f 	bl	800437c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
 800191e:	f107 010c 	add.w	r1, r7, #12
 8001922:	f04f 33ff 	mov.w	r3, #4294967295
 8001926:	2202      	movs	r2, #2
 8001928:	4806      	ldr	r0, [pc, #24]	@ (8001944 <SPI_Write+0x50>)
 800192a:	f003 fdb8 	bl	800549e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 800192e:	2201      	movs	r2, #1
 8001930:	2120      	movs	r1, #32
 8001932:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001936:	f002 fd21 	bl	800437c <HAL_GPIO_WritePin>
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20001538 	.word	0x20001538

08001948 <SPI_Read>:

uint8_t SPI_Read(uint8_t reg) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_data = reg | 0x80;
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001958:	b2db      	uxtb	r3, r3
 800195a:	73fb      	strb	r3, [r7, #15]
	uint8_t rx_data = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	2120      	movs	r1, #32
 8001964:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001968:	f002 fd08 	bl	800437c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &tx_data, 1, HAL_MAX_DELAY);
 800196c:	f107 010f 	add.w	r1, r7, #15
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
 8001974:	2201      	movs	r2, #1
 8001976:	480b      	ldr	r0, [pc, #44]	@ (80019a4 <SPI_Read+0x5c>)
 8001978:	f003 fd91 	bl	800549e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &rx_data, 1, HAL_MAX_DELAY);
 800197c:	f107 010e 	add.w	r1, r7, #14
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	2201      	movs	r2, #1
 8001986:	4807      	ldr	r0, [pc, #28]	@ (80019a4 <SPI_Read+0x5c>)
 8001988:	f003 fefe 	bl	8005788 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	2120      	movs	r1, #32
 8001990:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001994:	f002 fcf2 	bl	800437c <HAL_GPIO_WritePin>

	return rx_data;
 8001998:	7bbb      	ldrb	r3, [r7, #14]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20001538 	.word	0x20001538

080019a8 <Read_Acceleration>:

HAL_StatusTypeDef Read_Acceleration(float *accel_data) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6];
	int16_t raw_accel[3]; // Valeurs brutes signées (16 bits) pour X, Y, Z
	uint8_t reg = 0x32 | 0xC0;  // Commande de lecture multiple à partir de DATAX0
 80019b0:	23f2      	movs	r3, #242	@ 0xf2
 80019b2:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2120      	movs	r1, #32
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019bc:	f002 fcde 	bl	800437c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &reg, 1, HAL_MAX_DELAY);
 80019c0:	f107 010f 	add.w	r1, r7, #15
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
 80019c8:	2201      	movs	r2, #1
 80019ca:	4825      	ldr	r0, [pc, #148]	@ (8001a60 <Read_Acceleration+0xb8>)
 80019cc:	f003 fd67 	bl	800549e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, buffer, 6, HAL_MAX_DELAY);
 80019d0:	f107 0118 	add.w	r1, r7, #24
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
 80019d8:	2206      	movs	r2, #6
 80019da:	4821      	ldr	r0, [pc, #132]	@ (8001a60 <Read_Acceleration+0xb8>)
 80019dc:	f003 fed4 	bl	8005788 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 80019e0:	2201      	movs	r2, #1
 80019e2:	2120      	movs	r1, #32
 80019e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019e8:	f002 fcc8 	bl	800437c <HAL_GPIO_WritePin>

	// Combinaison des octets pour obtenir des valeurs 16 bits signées
	raw_accel[0] = (int16_t)((buffer[1] << 8) | buffer[0]);
 80019ec:	7e7b      	ldrb	r3, [r7, #25]
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	7e3b      	ldrb	r3, [r7, #24]
 80019f4:	b21b      	sxth	r3, r3
 80019f6:	4313      	orrs	r3, r2
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	823b      	strh	r3, [r7, #16]
	raw_accel[1] = (int16_t)((buffer[3] << 8) | buffer[2]);
 80019fc:	7efb      	ldrb	r3, [r7, #27]
 80019fe:	021b      	lsls	r3, r3, #8
 8001a00:	b21a      	sxth	r2, r3
 8001a02:	7ebb      	ldrb	r3, [r7, #26]
 8001a04:	b21b      	sxth	r3, r3
 8001a06:	4313      	orrs	r3, r2
 8001a08:	b21b      	sxth	r3, r3
 8001a0a:	827b      	strh	r3, [r7, #18]
	raw_accel[2] = (int16_t)((buffer[5] << 8) | buffer[4]);
 8001a0c:	7f7b      	ldrb	r3, [r7, #29]
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	b21a      	sxth	r2, r3
 8001a12:	7f3b      	ldrb	r3, [r7, #28]
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	4313      	orrs	r3, r2
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	82bb      	strh	r3, [r7, #20]

	// Conversion en g (±2g, Full Resolution ou Fixed 10-bit)
	//float scale = 3.9 / 1000.0;  // Sensibilité pour ±2g en g/LSB

	// Convertir les données brutes en 'g'
	accel_data[0] = (float)raw_accel[0]; // Accélération X en g
 8001a1c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	edc3 7a00 	vstr	s15, [r3]
	accel_data[1] = (float)raw_accel[1]; // Accélération Y en g
 8001a2e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3304      	adds	r3, #4
 8001a36:	ee07 2a90 	vmov	s15, r2
 8001a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a3e:	edc3 7a00 	vstr	s15, [r3]
	accel_data[2] = (float)raw_accel[2]; // Accélération Z en g
 8001a42:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3308      	adds	r3, #8
 8001a4a:	ee07 2a90 	vmov	s15, r2
 8001a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a52:	edc3 7a00 	vstr	s15, [r3]

	return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3720      	adds	r7, #32
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20001538 	.word	0x20001538

08001a64 <ADXL343_Init>:

void ADXL343_Init(void) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
	uint8_t devid = SPI_Read(0x00);  // Lire le registre DEVID (0x00)
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f7ff ff6c 	bl	8001948 <SPI_Read>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]

	if (devid == 0xE5) {
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	2be5      	cmp	r3, #229	@ 0xe5
 8001a78:	d11d      	bne.n	8001ab6 <ADXL343_Init+0x52>
		// Le composant est détecté, procéder à l'initialisation
		SPI_Write(0x2C, 0x0F);  // Configurer la bande passante à 1.56 Hz
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	202c      	movs	r0, #44	@ 0x2c
 8001a7e:	f7ff ff39 	bl	80018f4 <SPI_Write>
		SPI_Write(0x2E, 0x80);  // Activer DATA_READY
 8001a82:	2180      	movs	r1, #128	@ 0x80
 8001a84:	202e      	movs	r0, #46	@ 0x2e
 8001a86:	f7ff ff35 	bl	80018f4 <SPI_Write>
		SPI_Write(0x31, 0x08);  // DATA_FORMAT : FULL_RES = 1, RANGE = ±2g
 8001a8a:	2108      	movs	r1, #8
 8001a8c:	2031      	movs	r0, #49	@ 0x31
 8001a8e:	f7ff ff31 	bl	80018f4 <SPI_Write>
		SPI_Write(0x2D, 0x08);  // Activer le mode mesure
 8001a92:	2108      	movs	r1, #8
 8001a94:	202d      	movs	r0, #45	@ 0x2d
 8001a96:	f7ff ff2d 	bl	80018f4 <SPI_Write>
		//Read_Acceleration(float *accel_data);    // Lire les données pour effacer l'interruption

		char *msg = "ADXL343 detecte et initialise !\r\n";
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <ADXL343_Init+0x74>)
 8001a9c:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7fe fc0e 	bl	80002c0 <strlen>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	480b      	ldr	r0, [pc, #44]	@ (8001adc <ADXL343_Init+0x78>)
 8001ab0:	f005 fba8 	bl	8007204 <HAL_UART_Transmit>
	} else {
		char *error_msg = "Erreur : ADXL343 non detecte !\r\n";
		HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
	}
}
 8001ab4:	e00c      	b.n	8001ad0 <ADXL343_Init+0x6c>
		char *error_msg = "Erreur : ADXL343 non detecte !\r\n";
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <ADXL343_Init+0x7c>)
 8001ab8:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8001aba:	68b8      	ldr	r0, [r7, #8]
 8001abc:	f7fe fc00 	bl	80002c0 <strlen>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	4804      	ldr	r0, [pc, #16]	@ (8001adc <ADXL343_Init+0x78>)
 8001acc:	f005 fb9a 	bl	8007204 <HAL_UART_Transmit>
}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	0800eec8 	.word	0x0800eec8
 8001adc:	200016d4 	.word	0x200016d4
 8001ae0:	0800eeec 	.word	0x0800eeec

08001ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	4b12      	ldr	r3, [pc, #72]	@ (8001b34 <HAL_MspInit+0x50>)
 8001aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aee:	4a11      	ldr	r2, [pc, #68]	@ (8001b34 <HAL_MspInit+0x50>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001af6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <HAL_MspInit+0x50>)
 8001af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <HAL_MspInit+0x50>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b06:	4a0b      	ldr	r2, [pc, #44]	@ (8001b34 <HAL_MspInit+0x50>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <HAL_MspInit+0x50>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	210f      	movs	r1, #15
 8001b1e:	f06f 0001 	mvn.w	r0, #1
 8001b22:	f002 f802 	bl	8003b2a <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001b26:	f002 fce5 	bl	80044f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <NMI_Handler+0x4>

08001b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <MemManage_Handler+0x4>

08001b50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <BusFault_Handler+0x4>

08001b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <UsageFault_Handler+0x4>

08001b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b72:	f000 feab 	bl	80028cc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b76:	f007 fead 	bl	80098d4 <xTaskGetSchedulerState>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d001      	beq.n	8001b84 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b80:	f008 fa92 	bl	800a0a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b8c:	4802      	ldr	r0, [pc, #8]	@ (8001b98 <DMA1_Channel1_IRQHandler+0x10>)
 8001b8e:	f002 f924 	bl	8003dda <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200017fc 	.word	0x200017fc

08001b9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return 1;
 8001ba0:	2301      	movs	r3, #1
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <_kill>:

int _kill(int pid, int sig)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bb6:	f009 fddf 	bl	800b778 <__errno>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2216      	movs	r2, #22
 8001bbe:	601a      	str	r2, [r3, #0]
  return -1;
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <_exit>:

void _exit (int status)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ffe7 	bl	8001bac <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bde:	bf00      	nop
 8001be0:	e7fd      	b.n	8001bde <_exit+0x12>

08001be2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e00a      	b.n	8001c0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	4601      	mov	r1, r0
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	60ba      	str	r2, [r7, #8]
 8001c00:	b2ca      	uxtb	r2, r1
 8001c02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3301      	adds	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	dbf0      	blt.n	8001bf4 <_read+0x12>
  }

  return len;
 8001c12:	687b      	ldr	r3, [r7, #4]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	e009      	b.n	8001c42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	60ba      	str	r2, [r7, #8]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fbca 	bl	80013d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	dbf1      	blt.n	8001c2e <_write+0x12>
  }
  return len;
 8001c4a:	687b      	ldr	r3, [r7, #4]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <_close>:

int _close(int file)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c7c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_isatty>:

int _isatty(int file)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c94:	2301      	movs	r3, #1
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b085      	sub	sp, #20
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc4:	4a14      	ldr	r2, [pc, #80]	@ (8001d18 <_sbrk+0x5c>)
 8001cc6:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <_sbrk+0x60>)
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd0:	4b13      	ldr	r3, [pc, #76]	@ (8001d20 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <_sbrk+0x64>)
 8001cda:	4a12      	ldr	r2, [pc, #72]	@ (8001d24 <_sbrk+0x68>)
 8001cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cde:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <_sbrk+0x64>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d207      	bcs.n	8001cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cec:	f009 fd44 	bl	800b778 <__errno>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	e009      	b.n	8001d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cfc:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <_sbrk+0x64>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d02:	4b07      	ldr	r3, [pc, #28]	@ (8001d20 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	4a05      	ldr	r2, [pc, #20]	@ (8001d20 <_sbrk+0x64>)
 8001d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20008000 	.word	0x20008000
 8001d1c:	00000400 	.word	0x00000400
 8001d20:	2000159c 	.word	0x2000159c
 8001d24:	20004210 	.word	0x20004210

08001d28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d2c:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <SystemInit+0x20>)
 8001d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d32:	4a05      	ldr	r2, [pc, #20]	@ (8001d48 <SystemInit+0x20>)
 8001d34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b098      	sub	sp, #96	@ 0x60
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d52:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d5e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	611a      	str	r2, [r3, #16]
 8001d6e:	615a      	str	r2, [r3, #20]
 8001d70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	2234      	movs	r2, #52	@ 0x34
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f009 fcab 	bl	800b6d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d7e:	4b41      	ldr	r3, [pc, #260]	@ (8001e84 <MX_TIM1_Init+0x138>)
 8001d80:	4a41      	ldr	r2, [pc, #260]	@ (8001e88 <MX_TIM1_Init+0x13c>)
 8001d82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d84:	4b3f      	ldr	r3, [pc, #252]	@ (8001e84 <MX_TIM1_Init+0x138>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e84 <MX_TIM1_Init+0x138>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d90:	4b3c      	ldr	r3, [pc, #240]	@ (8001e84 <MX_TIM1_Init+0x138>)
 8001d92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d98:	4b3a      	ldr	r3, [pc, #232]	@ (8001e84 <MX_TIM1_Init+0x138>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d9e:	4b39      	ldr	r3, [pc, #228]	@ (8001e84 <MX_TIM1_Init+0x138>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da4:	4b37      	ldr	r3, [pc, #220]	@ (8001e84 <MX_TIM1_Init+0x138>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001daa:	4836      	ldr	r0, [pc, #216]	@ (8001e84 <MX_TIM1_Init+0x138>)
 8001dac:	f004 fa02 	bl	80061b4 <HAL_TIM_PWM_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001db6:	f7ff fd15 	bl	80017e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dc6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dca:	4619      	mov	r1, r3
 8001dcc:	482d      	ldr	r0, [pc, #180]	@ (8001e84 <MX_TIM1_Init+0x138>)
 8001dce:	f005 f8bb 	bl	8006f48 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001dd8:	f7ff fd04 	bl	80017e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ddc:	2360      	movs	r3, #96	@ 0x60
 8001dde:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de4:	2300      	movs	r3, #0
 8001de6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001de8:	2300      	movs	r3, #0
 8001dea:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001df4:	2300      	movs	r3, #0
 8001df6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001df8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4820      	ldr	r0, [pc, #128]	@ (8001e84 <MX_TIM1_Init+0x138>)
 8001e02:	f004 fbd5 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e0c:	f7ff fcea 	bl	80017e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e10:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e14:	2204      	movs	r2, #4
 8001e16:	4619      	mov	r1, r3
 8001e18:	481a      	ldr	r0, [pc, #104]	@ (8001e84 <MX_TIM1_Init+0x138>)
 8001e1a:	f004 fbc9 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001e24:	f7ff fcde 	bl	80017e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e52:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	4619      	mov	r1, r3
 8001e64:	4807      	ldr	r0, [pc, #28]	@ (8001e84 <MX_TIM1_Init+0x138>)
 8001e66:	f005 f8f1 	bl	800704c <HAL_TIMEx_ConfigBreakDeadTime>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001e70:	f7ff fcb8 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e74:	4803      	ldr	r0, [pc, #12]	@ (8001e84 <MX_TIM1_Init+0x138>)
 8001e76:	f000 f9ed 	bl	8002254 <HAL_TIM_MspPostInit>

}
 8001e7a:	bf00      	nop
 8001e7c:	3760      	adds	r7, #96	@ 0x60
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200015a0 	.word	0x200015a0
 8001e88:	40012c00 	.word	0x40012c00

08001e8c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	@ 0x28
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e92:	f107 031c 	add.w	r3, r7, #28
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
 8001eac:	615a      	str	r2, [r3, #20]
 8001eae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eb0:	4b27      	ldr	r3, [pc, #156]	@ (8001f50 <MX_TIM2_Init+0xc4>)
 8001eb2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001eb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001eb8:	4b25      	ldr	r3, [pc, #148]	@ (8001f50 <MX_TIM2_Init+0xc4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebe:	4b24      	ldr	r3, [pc, #144]	@ (8001f50 <MX_TIM2_Init+0xc4>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ec4:	4b22      	ldr	r3, [pc, #136]	@ (8001f50 <MX_TIM2_Init+0xc4>)
 8001ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ecc:	4b20      	ldr	r3, [pc, #128]	@ (8001f50 <MX_TIM2_Init+0xc4>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f50 <MX_TIM2_Init+0xc4>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ed8:	481d      	ldr	r0, [pc, #116]	@ (8001f50 <MX_TIM2_Init+0xc4>)
 8001eda:	f004 f96b 	bl	80061b4 <HAL_TIM_PWM_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001ee4:	f7ff fc7e 	bl	80017e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ef0:	f107 031c 	add.w	r3, r7, #28
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4816      	ldr	r0, [pc, #88]	@ (8001f50 <MX_TIM2_Init+0xc4>)
 8001ef8:	f005 f826 	bl	8006f48 <HAL_TIMEx_MasterConfigSynchronization>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001f02:	f7ff fc6f 	bl	80017e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f06:	2360      	movs	r3, #96	@ 0x60
 8001f08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f16:	463b      	mov	r3, r7
 8001f18:	2200      	movs	r2, #0
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	480c      	ldr	r0, [pc, #48]	@ (8001f50 <MX_TIM2_Init+0xc4>)
 8001f1e:	f004 fb47 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001f28:	f7ff fc5c 	bl	80017e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	2204      	movs	r2, #4
 8001f30:	4619      	mov	r1, r3
 8001f32:	4807      	ldr	r0, [pc, #28]	@ (8001f50 <MX_TIM2_Init+0xc4>)
 8001f34:	f004 fb3c 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001f3e:	f7ff fc51 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f42:	4803      	ldr	r0, [pc, #12]	@ (8001f50 <MX_TIM2_Init+0xc4>)
 8001f44:	f000 f986 	bl	8002254 <HAL_TIM_MspPostInit>

}
 8001f48:	bf00      	nop
 8001f4a:	3728      	adds	r7, #40	@ 0x28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200015ec 	.word	0x200015ec

08001f54 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08c      	sub	sp, #48	@ 0x30
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f5a:	f107 030c 	add.w	r3, r7, #12
 8001f5e:	2224      	movs	r2, #36	@ 0x24
 8001f60:	2100      	movs	r1, #0
 8001f62:	4618      	mov	r0, r3
 8001f64:	f009 fbb6 	bl	800b6d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f68:	463b      	mov	r3, r7
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f72:	4b21      	ldr	r3, [pc, #132]	@ (8001ff8 <MX_TIM3_Init+0xa4>)
 8001f74:	4a21      	ldr	r2, [pc, #132]	@ (8001ffc <MX_TIM3_Init+0xa8>)
 8001f76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f78:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff8 <MX_TIM3_Init+0xa4>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff8 <MX_TIM3_Init+0xa4>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff8 <MX_TIM3_Init+0xa4>)
 8001f86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff8 <MX_TIM3_Init+0xa4>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f92:	4b19      	ldr	r3, [pc, #100]	@ (8001ff8 <MX_TIM3_Init+0xa4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fac:	2300      	movs	r3, #0
 8001fae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001fbc:	f107 030c 	add.w	r3, r7, #12
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	480d      	ldr	r0, [pc, #52]	@ (8001ff8 <MX_TIM3_Init+0xa4>)
 8001fc4:	f004 fa4e 	bl	8006464 <HAL_TIM_Encoder_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001fce:	f7ff fc09 	bl	80017e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fda:	463b      	mov	r3, r7
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4806      	ldr	r0, [pc, #24]	@ (8001ff8 <MX_TIM3_Init+0xa4>)
 8001fe0:	f004 ffb2 	bl	8006f48 <HAL_TIMEx_MasterConfigSynchronization>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001fea:	f7ff fbfb 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fee:	bf00      	nop
 8001ff0:	3730      	adds	r7, #48	@ 0x30
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20001638 	.word	0x20001638
 8001ffc:	40000400 	.word	0x40000400

08002000 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b094      	sub	sp, #80	@ 0x50
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002006:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800200a:	2224      	movs	r2, #36	@ 0x24
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f009 fb60 	bl	800b6d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002014:	f107 0320 	add.w	r3, r7, #32
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
 800202c:	611a      	str	r2, [r3, #16]
 800202e:	615a      	str	r2, [r3, #20]
 8002030:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002032:	4b30      	ldr	r3, [pc, #192]	@ (80020f4 <MX_TIM4_Init+0xf4>)
 8002034:	4a30      	ldr	r2, [pc, #192]	@ (80020f8 <MX_TIM4_Init+0xf8>)
 8002036:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002038:	4b2e      	ldr	r3, [pc, #184]	@ (80020f4 <MX_TIM4_Init+0xf4>)
 800203a:	2200      	movs	r2, #0
 800203c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203e:	4b2d      	ldr	r3, [pc, #180]	@ (80020f4 <MX_TIM4_Init+0xf4>)
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002044:	4b2b      	ldr	r3, [pc, #172]	@ (80020f4 <MX_TIM4_Init+0xf4>)
 8002046:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800204a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800204c:	4b29      	ldr	r3, [pc, #164]	@ (80020f4 <MX_TIM4_Init+0xf4>)
 800204e:	2200      	movs	r2, #0
 8002050:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002052:	4b28      	ldr	r3, [pc, #160]	@ (80020f4 <MX_TIM4_Init+0xf4>)
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002058:	4826      	ldr	r0, [pc, #152]	@ (80020f4 <MX_TIM4_Init+0xf4>)
 800205a:	f004 f8ab 	bl	80061b4 <HAL_TIM_PWM_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002064:	f7ff fbbe 	bl	80017e4 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002068:	2301      	movs	r3, #1
 800206a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800206c:	2300      	movs	r3, #0
 800206e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002070:	2301      	movs	r3, #1
 8002072:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002074:	2300      	movs	r3, #0
 8002076:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC1Filter = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800207c:	2300      	movs	r3, #0
 800207e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002080:	2301      	movs	r3, #1
 8002082:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002084:	2300      	movs	r3, #0
 8002086:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.IC2Filter = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800208c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002090:	4619      	mov	r1, r3
 8002092:	4818      	ldr	r0, [pc, #96]	@ (80020f4 <MX_TIM4_Init+0xf4>)
 8002094:	f004 f9e6 	bl	8006464 <HAL_TIM_Encoder_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 800209e:	f7ff fba1 	bl	80017e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020aa:	f107 0320 	add.w	r3, r7, #32
 80020ae:	4619      	mov	r1, r3
 80020b0:	4810      	ldr	r0, [pc, #64]	@ (80020f4 <MX_TIM4_Init+0xf4>)
 80020b2:	f004 ff49 	bl	8006f48 <HAL_TIMEx_MasterConfigSynchronization>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 80020bc:	f7ff fb92 	bl	80017e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020c0:	2360      	movs	r3, #96	@ 0x60
 80020c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020d0:	1d3b      	adds	r3, r7, #4
 80020d2:	220c      	movs	r2, #12
 80020d4:	4619      	mov	r1, r3
 80020d6:	4807      	ldr	r0, [pc, #28]	@ (80020f4 <MX_TIM4_Init+0xf4>)
 80020d8:	f004 fa6a 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 80020e2:	f7ff fb7f 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80020e6:	4803      	ldr	r0, [pc, #12]	@ (80020f4 <MX_TIM4_Init+0xf4>)
 80020e8:	f000 f8b4 	bl	8002254 <HAL_TIM_MspPostInit>

}
 80020ec:	bf00      	nop
 80020ee:	3750      	adds	r7, #80	@ 0x50
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20001684 	.word	0x20001684
 80020f8:	40000800 	.word	0x40000800

080020fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08c      	sub	sp, #48	@ 0x30
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 031c 	add.w	r3, r7, #28
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a2a      	ldr	r2, [pc, #168]	@ (80021c4 <HAL_TIM_PWM_MspInit+0xc8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d10c      	bne.n	8002138 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800211e:	4b2a      	ldr	r3, [pc, #168]	@ (80021c8 <HAL_TIM_PWM_MspInit+0xcc>)
 8002120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002122:	4a29      	ldr	r2, [pc, #164]	@ (80021c8 <HAL_TIM_PWM_MspInit+0xcc>)
 8002124:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002128:	6613      	str	r3, [r2, #96]	@ 0x60
 800212a:	4b27      	ldr	r3, [pc, #156]	@ (80021c8 <HAL_TIM_PWM_MspInit+0xcc>)
 800212c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002132:	61bb      	str	r3, [r7, #24]
 8002134:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002136:	e040      	b.n	80021ba <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002140:	d10c      	bne.n	800215c <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002142:	4b21      	ldr	r3, [pc, #132]	@ (80021c8 <HAL_TIM_PWM_MspInit+0xcc>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002146:	4a20      	ldr	r2, [pc, #128]	@ (80021c8 <HAL_TIM_PWM_MspInit+0xcc>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6593      	str	r3, [r2, #88]	@ 0x58
 800214e:	4b1e      	ldr	r3, [pc, #120]	@ (80021c8 <HAL_TIM_PWM_MspInit+0xcc>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697b      	ldr	r3, [r7, #20]
}
 800215a:	e02e      	b.n	80021ba <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM4)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1a      	ldr	r2, [pc, #104]	@ (80021cc <HAL_TIM_PWM_MspInit+0xd0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d129      	bne.n	80021ba <HAL_TIM_PWM_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002166:	4b18      	ldr	r3, [pc, #96]	@ (80021c8 <HAL_TIM_PWM_MspInit+0xcc>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216a:	4a17      	ldr	r2, [pc, #92]	@ (80021c8 <HAL_TIM_PWM_MspInit+0xcc>)
 800216c:	f043 0304 	orr.w	r3, r3, #4
 8002170:	6593      	str	r3, [r2, #88]	@ 0x58
 8002172:	4b15      	ldr	r3, [pc, #84]	@ (80021c8 <HAL_TIM_PWM_MspInit+0xcc>)
 8002174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217e:	4b12      	ldr	r3, [pc, #72]	@ (80021c8 <HAL_TIM_PWM_MspInit+0xcc>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002182:	4a11      	ldr	r2, [pc, #68]	@ (80021c8 <HAL_TIM_PWM_MspInit+0xcc>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800218a:	4b0f      	ldr	r3, [pc, #60]	@ (80021c8 <HAL_TIM_PWM_MspInit+0xcc>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002196:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800219a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80021a8:	230a      	movs	r3, #10
 80021aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	4619      	mov	r1, r3
 80021b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021b6:	f001 ff5f 	bl	8004078 <HAL_GPIO_Init>
}
 80021ba:	bf00      	nop
 80021bc:	3730      	adds	r7, #48	@ 0x30
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40012c00 	.word	0x40012c00
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40000800 	.word	0x40000800

080021d0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	@ 0x28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a17      	ldr	r2, [pc, #92]	@ (800224c <HAL_TIM_Encoder_MspInit+0x7c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d128      	bne.n	8002244 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021f2:	4b17      	ldr	r3, [pc, #92]	@ (8002250 <HAL_TIM_Encoder_MspInit+0x80>)
 80021f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f6:	4a16      	ldr	r2, [pc, #88]	@ (8002250 <HAL_TIM_Encoder_MspInit+0x80>)
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80021fe:	4b14      	ldr	r3, [pc, #80]	@ (8002250 <HAL_TIM_Encoder_MspInit+0x80>)
 8002200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220a:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <HAL_TIM_Encoder_MspInit+0x80>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	4a10      	ldr	r2, [pc, #64]	@ (8002250 <HAL_TIM_Encoder_MspInit+0x80>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002216:	4b0e      	ldr	r3, [pc, #56]	@ (8002250 <HAL_TIM_Encoder_MspInit+0x80>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002222:	2350      	movs	r3, #80	@ 0x50
 8002224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	2300      	movs	r3, #0
 8002230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002232:	2302      	movs	r3, #2
 8002234:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002240:	f001 ff1a 	bl	8004078 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002244:	bf00      	nop
 8002246:	3728      	adds	r7, #40	@ 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40000400 	.word	0x40000400
 8002250:	40021000 	.word	0x40021000

08002254 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	@ 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a35      	ldr	r2, [pc, #212]	@ (8002348 <HAL_TIM_MspPostInit+0xf4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d11e      	bne.n	80022b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	4b35      	ldr	r3, [pc, #212]	@ (800234c <HAL_TIM_MspPostInit+0xf8>)
 8002278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227a:	4a34      	ldr	r2, [pc, #208]	@ (800234c <HAL_TIM_MspPostInit+0xf8>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002282:	4b32      	ldr	r3, [pc, #200]	@ (800234c <HAL_TIM_MspPostInit+0xf8>)
 8002284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800228e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2300      	movs	r3, #0
 800229e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80022a0:	2306      	movs	r3, #6
 80022a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	4619      	mov	r1, r3
 80022aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ae:	f001 fee3 	bl	8004078 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80022b2:	e044      	b.n	800233e <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022bc:	d11d      	bne.n	80022fa <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022be:	4b23      	ldr	r3, [pc, #140]	@ (800234c <HAL_TIM_MspPostInit+0xf8>)
 80022c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c2:	4a22      	ldr	r2, [pc, #136]	@ (800234c <HAL_TIM_MspPostInit+0xf8>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ca:	4b20      	ldr	r3, [pc, #128]	@ (800234c <HAL_TIM_MspPostInit+0xf8>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022d6:	2303      	movs	r3, #3
 80022d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022e6:	2301      	movs	r3, #1
 80022e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022f4:	f001 fec0 	bl	8004078 <HAL_GPIO_Init>
}
 80022f8:	e021      	b.n	800233e <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM4)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a14      	ldr	r2, [pc, #80]	@ (8002350 <HAL_TIM_MspPostInit+0xfc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d11c      	bne.n	800233e <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002304:	4b11      	ldr	r3, [pc, #68]	@ (800234c <HAL_TIM_MspPostInit+0xf8>)
 8002306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002308:	4a10      	ldr	r2, [pc, #64]	@ (800234c <HAL_TIM_MspPostInit+0xf8>)
 800230a:	f043 0302 	orr.w	r3, r3, #2
 800230e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002310:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <HAL_TIM_MspPostInit+0xf8>)
 8002312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_CH4_M_SCTR_LIDAR_Pin;
 800231c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800232e:	2302      	movs	r3, #2
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM4_CH4_M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4619      	mov	r1, r3
 8002338:	4806      	ldr	r0, [pc, #24]	@ (8002354 <HAL_TIM_MspPostInit+0x100>)
 800233a:	f001 fe9d 	bl	8004078 <HAL_GPIO_Init>
}
 800233e:	bf00      	nop
 8002340:	3728      	adds	r7, #40	@ 0x28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40012c00 	.word	0x40012c00
 800234c:	40021000 	.word	0x40021000
 8002350:	40000800 	.word	0x40000800
 8002354:	48000400 	.word	0x48000400

08002358 <Start_Motors>:
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
    TIM1->CCR1 = 0;
    TIM1->CCR2 = 0;
}

void Start_Motors(void) {
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800235c:	2100      	movs	r1, #0
 800235e:	4807      	ldr	r0, [pc, #28]	@ (800237c <Start_Motors+0x24>)
 8002360:	f003 ff80 	bl	8006264 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002364:	2104      	movs	r1, #4
 8002366:	4805      	ldr	r0, [pc, #20]	@ (800237c <Start_Motors+0x24>)
 8002368:	f003 ff7c 	bl	8006264 <HAL_TIM_PWM_Start>
    TIM1->CCR1 = 0;
 800236c:	4b04      	ldr	r3, [pc, #16]	@ (8002380 <Start_Motors+0x28>)
 800236e:	2200      	movs	r2, #0
 8002370:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = 0;
 8002372:	4b03      	ldr	r3, [pc, #12]	@ (8002380 <Start_Motors+0x28>)
 8002374:	2200      	movs	r2, #0
 8002376:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}
 800237c:	200015a0 	.word	0x200015a0
 8002380:	40012c00 	.word	0x40012c00

08002384 <Motor_SetSpeed>:

void Reset_Encoder(TIM_HandleTypeDef *htim) {
    __HAL_TIM_SET_COUNTER(htim, 0);    // Réinitialiser le compteur
}

void Motor_SetSpeed(int percentage) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
    static int currentSpeed = 0;  // Maintenir la vitesse actuelle
    int step = (percentage > currentSpeed) ? 1 : -1; // Déterminer le pas (incrément ou décrément)
 800238c:	4b3e      	ldr	r3, [pc, #248]	@ (8002488 <Motor_SetSpeed+0x104>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	429a      	cmp	r2, r3
 8002394:	dd01      	ble.n	800239a <Motor_SetSpeed+0x16>
 8002396:	2301      	movs	r3, #1
 8002398:	e001      	b.n	800239e <Motor_SetSpeed+0x1a>
 800239a:	f04f 33ff 	mov.w	r3, #4294967295
 800239e:	60fb      	str	r3, [r7, #12]

    // Limiter la cible au pourcentage maximal autorisé
    if (percentage > 100) percentage = 100;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b64      	cmp	r3, #100	@ 0x64
 80023a4:	dd01      	ble.n	80023aa <Motor_SetSpeed+0x26>
 80023a6:	2364      	movs	r3, #100	@ 0x64
 80023a8:	607b      	str	r3, [r7, #4]
    if (percentage < -100) percentage = -100;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80023b0:	da60      	bge.n	8002474 <Motor_SetSpeed+0xf0>
 80023b2:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80023b6:	607b      	str	r3, [r7, #4]

    // Effectuer un ramp-up ou ramp-down jusqu'à la vitesse cible
    while (currentSpeed != percentage) {
 80023b8:	e05c      	b.n	8002474 <Motor_SetSpeed+0xf0>
        currentSpeed += step;
 80023ba:	4b33      	ldr	r3, [pc, #204]	@ (8002488 <Motor_SetSpeed+0x104>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4413      	add	r3, r2
 80023c2:	4a31      	ldr	r2, [pc, #196]	@ (8002488 <Motor_SetSpeed+0x104>)
 80023c4:	6013      	str	r3, [r2, #0]

        if (currentSpeed > 0) {
 80023c6:	4b30      	ldr	r3, [pc, #192]	@ (8002488 <Motor_SetSpeed+0x104>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	dd1b      	ble.n	8002406 <Motor_SetSpeed+0x82>
            // Motor Forward
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); // Stop Reverse
 80023ce:	2200      	movs	r2, #0
 80023d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023d8:	f001 ffd0 	bl	800437c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);   // Start Forward
 80023dc:	2201      	movs	r2, #1
 80023de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023e6:	f001 ffc9 	bl	800437c <HAL_GPIO_WritePin>
            TIM1->CCR1 = (65535 * currentSpeed) / 100;             // Ajuster le rapport cyclique sur CCR1
 80023ea:	4b27      	ldr	r3, [pc, #156]	@ (8002488 <Motor_SetSpeed+0x104>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4613      	mov	r3, r2
 80023f0:	041b      	lsls	r3, r3, #16
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	4a25      	ldr	r2, [pc, #148]	@ (800248c <Motor_SetSpeed+0x108>)
 80023f6:	fb82 1203 	smull	r1, r2, r2, r3
 80023fa:	1152      	asrs	r2, r2, #5
 80023fc:	17db      	asrs	r3, r3, #31
 80023fe:	1ad2      	subs	r2, r2, r3
 8002400:	4b23      	ldr	r3, [pc, #140]	@ (8002490 <Motor_SetSpeed+0x10c>)
 8002402:	635a      	str	r2, [r3, #52]	@ 0x34
 8002404:	e033      	b.n	800246e <Motor_SetSpeed+0xea>
        } else if (currentSpeed < 0) {
 8002406:	4b20      	ldr	r3, [pc, #128]	@ (8002488 <Motor_SetSpeed+0x104>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	da1b      	bge.n	8002446 <Motor_SetSpeed+0xc2>
            // Motor Reverse
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // Stop Forward
 800240e:	2200      	movs	r2, #0
 8002410:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002414:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002418:	f001 ffb0 	bl	800437c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);   // Start Reverse
 800241c:	2201      	movs	r2, #1
 800241e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002422:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002426:	f001 ffa9 	bl	800437c <HAL_GPIO_WritePin>
            TIM1->CCR2 = (65535 * -currentSpeed) / 100;            // Ajuster le rapport cyclique sur CCR2
 800242a:	4b17      	ldr	r3, [pc, #92]	@ (8002488 <Motor_SetSpeed+0x104>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	041b      	lsls	r3, r3, #16
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	4a15      	ldr	r2, [pc, #84]	@ (800248c <Motor_SetSpeed+0x108>)
 8002436:	fb82 1203 	smull	r1, r2, r2, r3
 800243a:	1152      	asrs	r2, r2, #5
 800243c:	17db      	asrs	r3, r3, #31
 800243e:	1ad2      	subs	r2, r2, r3
 8002440:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <Motor_SetSpeed+0x10c>)
 8002442:	639a      	str	r2, [r3, #56]	@ 0x38
 8002444:	e013      	b.n	800246e <Motor_SetSpeed+0xea>
        } else {
            // Stop both directions
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002446:	2200      	movs	r2, #0
 8002448:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800244c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002450:	f001 ff94 	bl	800437c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002454:	2200      	movs	r2, #0
 8002456:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800245a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800245e:	f001 ff8d 	bl	800437c <HAL_GPIO_WritePin>
            TIM1->CCR1 = 0;  // Désactiver Forward
 8002462:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <Motor_SetSpeed+0x10c>)
 8002464:	2200      	movs	r2, #0
 8002466:	635a      	str	r2, [r3, #52]	@ 0x34
            TIM1->CCR2 = 0;  // Désactiver Reverse
 8002468:	4b09      	ldr	r3, [pc, #36]	@ (8002490 <Motor_SetSpeed+0x10c>)
 800246a:	2200      	movs	r2, #0
 800246c:	639a      	str	r2, [r3, #56]	@ 0x38
        }

        // Délai pour un changement progressif
        HAL_Delay(10);
 800246e:	200a      	movs	r0, #10
 8002470:	f000 fa4a 	bl	8002908 <HAL_Delay>
    while (currentSpeed != percentage) {
 8002474:	4b04      	ldr	r3, [pc, #16]	@ (8002488 <Motor_SetSpeed+0x104>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	429a      	cmp	r2, r3
 800247c:	d19d      	bne.n	80023ba <Motor_SetSpeed+0x36>
    }
}
 800247e:	bf00      	nop
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	200016d0 	.word	0x200016d0
 800248c:	51eb851f 	.word	0x51eb851f
 8002490:	40012c00 	.word	0x40012c00

08002494 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002498:	4b22      	ldr	r3, [pc, #136]	@ (8002524 <MX_USART2_UART_Init+0x90>)
 800249a:	4a23      	ldr	r2, [pc, #140]	@ (8002528 <MX_USART2_UART_Init+0x94>)
 800249c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800249e:	4b21      	ldr	r3, [pc, #132]	@ (8002524 <MX_USART2_UART_Init+0x90>)
 80024a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002524 <MX_USART2_UART_Init+0x90>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002524 <MX_USART2_UART_Init+0x90>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002524 <MX_USART2_UART_Init+0x90>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002524 <MX_USART2_UART_Init+0x90>)
 80024ba:	220c      	movs	r2, #12
 80024bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024be:	4b19      	ldr	r3, [pc, #100]	@ (8002524 <MX_USART2_UART_Init+0x90>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c4:	4b17      	ldr	r3, [pc, #92]	@ (8002524 <MX_USART2_UART_Init+0x90>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ca:	4b16      	ldr	r3, [pc, #88]	@ (8002524 <MX_USART2_UART_Init+0x90>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024d0:	4b14      	ldr	r3, [pc, #80]	@ (8002524 <MX_USART2_UART_Init+0x90>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024d6:	4b13      	ldr	r3, [pc, #76]	@ (8002524 <MX_USART2_UART_Init+0x90>)
 80024d8:	2200      	movs	r2, #0
 80024da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024dc:	4811      	ldr	r0, [pc, #68]	@ (8002524 <MX_USART2_UART_Init+0x90>)
 80024de:	f004 fe41 	bl	8007164 <HAL_UART_Init>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80024e8:	f7ff f97c 	bl	80017e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024ec:	2100      	movs	r1, #0
 80024ee:	480d      	ldr	r0, [pc, #52]	@ (8002524 <MX_USART2_UART_Init+0x90>)
 80024f0:	f005 fe79 	bl	80081e6 <HAL_UARTEx_SetTxFifoThreshold>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80024fa:	f7ff f973 	bl	80017e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024fe:	2100      	movs	r1, #0
 8002500:	4808      	ldr	r0, [pc, #32]	@ (8002524 <MX_USART2_UART_Init+0x90>)
 8002502:	f005 feae 	bl	8008262 <HAL_UARTEx_SetRxFifoThreshold>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800250c:	f7ff f96a 	bl	80017e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002510:	4804      	ldr	r0, [pc, #16]	@ (8002524 <MX_USART2_UART_Init+0x90>)
 8002512:	f005 fe2f 	bl	8008174 <HAL_UARTEx_DisableFifoMode>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800251c:	f7ff f962 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}
 8002524:	200016d4 	.word	0x200016d4
 8002528:	40004400 	.word	0x40004400

0800252c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002530:	4b22      	ldr	r3, [pc, #136]	@ (80025bc <MX_USART3_UART_Init+0x90>)
 8002532:	4a23      	ldr	r2, [pc, #140]	@ (80025c0 <MX_USART3_UART_Init+0x94>)
 8002534:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 128000;
 8002536:	4b21      	ldr	r3, [pc, #132]	@ (80025bc <MX_USART3_UART_Init+0x90>)
 8002538:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 800253c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800253e:	4b1f      	ldr	r3, [pc, #124]	@ (80025bc <MX_USART3_UART_Init+0x90>)
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002544:	4b1d      	ldr	r3, [pc, #116]	@ (80025bc <MX_USART3_UART_Init+0x90>)
 8002546:	2200      	movs	r2, #0
 8002548:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800254a:	4b1c      	ldr	r3, [pc, #112]	@ (80025bc <MX_USART3_UART_Init+0x90>)
 800254c:	2200      	movs	r2, #0
 800254e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002550:	4b1a      	ldr	r3, [pc, #104]	@ (80025bc <MX_USART3_UART_Init+0x90>)
 8002552:	220c      	movs	r2, #12
 8002554:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002556:	4b19      	ldr	r3, [pc, #100]	@ (80025bc <MX_USART3_UART_Init+0x90>)
 8002558:	2200      	movs	r2, #0
 800255a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800255c:	4b17      	ldr	r3, [pc, #92]	@ (80025bc <MX_USART3_UART_Init+0x90>)
 800255e:	2200      	movs	r2, #0
 8002560:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002562:	4b16      	ldr	r3, [pc, #88]	@ (80025bc <MX_USART3_UART_Init+0x90>)
 8002564:	2200      	movs	r2, #0
 8002566:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002568:	4b14      	ldr	r3, [pc, #80]	@ (80025bc <MX_USART3_UART_Init+0x90>)
 800256a:	2200      	movs	r2, #0
 800256c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800256e:	4b13      	ldr	r3, [pc, #76]	@ (80025bc <MX_USART3_UART_Init+0x90>)
 8002570:	2200      	movs	r2, #0
 8002572:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002574:	4811      	ldr	r0, [pc, #68]	@ (80025bc <MX_USART3_UART_Init+0x90>)
 8002576:	f004 fdf5 	bl	8007164 <HAL_UART_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002580:	f7ff f930 	bl	80017e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002584:	2100      	movs	r1, #0
 8002586:	480d      	ldr	r0, [pc, #52]	@ (80025bc <MX_USART3_UART_Init+0x90>)
 8002588:	f005 fe2d 	bl	80081e6 <HAL_UARTEx_SetTxFifoThreshold>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002592:	f7ff f927 	bl	80017e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002596:	2100      	movs	r1, #0
 8002598:	4808      	ldr	r0, [pc, #32]	@ (80025bc <MX_USART3_UART_Init+0x90>)
 800259a:	f005 fe62 	bl	8008262 <HAL_UARTEx_SetRxFifoThreshold>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80025a4:	f7ff f91e 	bl	80017e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80025a8:	4804      	ldr	r0, [pc, #16]	@ (80025bc <MX_USART3_UART_Init+0x90>)
 80025aa:	f005 fde3 	bl	8008174 <HAL_UARTEx_DisableFifoMode>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80025b4:	f7ff f916 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025b8:	bf00      	nop
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20001768 	.word	0x20001768
 80025c0:	40004800 	.word	0x40004800

080025c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b09c      	sub	sp, #112	@ 0x70
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025dc:	f107 0318 	add.w	r3, r7, #24
 80025e0:	2244      	movs	r2, #68	@ 0x44
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f009 f875 	bl	800b6d4 <memset>
  if(uartHandle->Instance==USART2)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a52      	ldr	r2, [pc, #328]	@ (8002738 <HAL_UART_MspInit+0x174>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d137      	bne.n	8002664 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025f4:	2302      	movs	r3, #2
 80025f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025f8:	2300      	movs	r3, #0
 80025fa:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025fc:	f107 0318 	add.w	r3, r7, #24
 8002600:	4618      	mov	r0, r3
 8002602:	f002 fcb1 	bl	8004f68 <HAL_RCCEx_PeriphCLKConfig>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800260c:	f7ff f8ea 	bl	80017e4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002610:	4b4a      	ldr	r3, [pc, #296]	@ (800273c <HAL_UART_MspInit+0x178>)
 8002612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002614:	4a49      	ldr	r2, [pc, #292]	@ (800273c <HAL_UART_MspInit+0x178>)
 8002616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800261a:	6593      	str	r3, [r2, #88]	@ 0x58
 800261c:	4b47      	ldr	r3, [pc, #284]	@ (800273c <HAL_UART_MspInit+0x178>)
 800261e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002628:	4b44      	ldr	r3, [pc, #272]	@ (800273c <HAL_UART_MspInit+0x178>)
 800262a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262c:	4a43      	ldr	r2, [pc, #268]	@ (800273c <HAL_UART_MspInit+0x178>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002634:	4b41      	ldr	r3, [pc, #260]	@ (800273c <HAL_UART_MspInit+0x178>)
 8002636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002640:	230c      	movs	r3, #12
 8002642:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002644:	2302      	movs	r3, #2
 8002646:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002650:	2307      	movs	r3, #7
 8002652:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002654:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002658:	4619      	mov	r1, r3
 800265a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800265e:	f001 fd0b 	bl	8004078 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002662:	e065      	b.n	8002730 <HAL_UART_MspInit+0x16c>
  else if(uartHandle->Instance==USART3)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a35      	ldr	r2, [pc, #212]	@ (8002740 <HAL_UART_MspInit+0x17c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d160      	bne.n	8002730 <HAL_UART_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800266e:	2304      	movs	r3, #4
 8002670:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002672:	2300      	movs	r3, #0
 8002674:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002676:	f107 0318 	add.w	r3, r7, #24
 800267a:	4618      	mov	r0, r3
 800267c:	f002 fc74 	bl	8004f68 <HAL_RCCEx_PeriphCLKConfig>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8002686:	f7ff f8ad 	bl	80017e4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800268a:	4b2c      	ldr	r3, [pc, #176]	@ (800273c <HAL_UART_MspInit+0x178>)
 800268c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268e:	4a2b      	ldr	r2, [pc, #172]	@ (800273c <HAL_UART_MspInit+0x178>)
 8002690:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002694:	6593      	str	r3, [r2, #88]	@ 0x58
 8002696:	4b29      	ldr	r3, [pc, #164]	@ (800273c <HAL_UART_MspInit+0x178>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a2:	4b26      	ldr	r3, [pc, #152]	@ (800273c <HAL_UART_MspInit+0x178>)
 80026a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a6:	4a25      	ldr	r2, [pc, #148]	@ (800273c <HAL_UART_MspInit+0x178>)
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ae:	4b23      	ldr	r3, [pc, #140]	@ (800273c <HAL_UART_MspInit+0x178>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_LIDAR_Pin|USART3_RX_LIDAR_Pin;
 80026ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80026be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	2300      	movs	r3, #0
 80026ca:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026cc:	2307      	movs	r3, #7
 80026ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80026d4:	4619      	mov	r1, r3
 80026d6:	481b      	ldr	r0, [pc, #108]	@ (8002744 <HAL_UART_MspInit+0x180>)
 80026d8:	f001 fcce 	bl	8004078 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 80026dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002748 <HAL_UART_MspInit+0x184>)
 80026de:	4a1b      	ldr	r2, [pc, #108]	@ (800274c <HAL_UART_MspInit+0x188>)
 80026e0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80026e2:	4b19      	ldr	r3, [pc, #100]	@ (8002748 <HAL_UART_MspInit+0x184>)
 80026e4:	221c      	movs	r2, #28
 80026e6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026e8:	4b17      	ldr	r3, [pc, #92]	@ (8002748 <HAL_UART_MspInit+0x184>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ee:	4b16      	ldr	r3, [pc, #88]	@ (8002748 <HAL_UART_MspInit+0x184>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026f4:	4b14      	ldr	r3, [pc, #80]	@ (8002748 <HAL_UART_MspInit+0x184>)
 80026f6:	2280      	movs	r2, #128	@ 0x80
 80026f8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026fa:	4b13      	ldr	r3, [pc, #76]	@ (8002748 <HAL_UART_MspInit+0x184>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002700:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <HAL_UART_MspInit+0x184>)
 8002702:	2200      	movs	r2, #0
 8002704:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002706:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <HAL_UART_MspInit+0x184>)
 8002708:	2220      	movs	r2, #32
 800270a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800270c:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <HAL_UART_MspInit+0x184>)
 800270e:	2200      	movs	r2, #0
 8002710:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002712:	480d      	ldr	r0, [pc, #52]	@ (8002748 <HAL_UART_MspInit+0x184>)
 8002714:	f001 fa3e 	bl	8003b94 <HAL_DMA_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_UART_MspInit+0x15e>
      Error_Handler();
 800271e:	f7ff f861 	bl	80017e4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a08      	ldr	r2, [pc, #32]	@ (8002748 <HAL_UART_MspInit+0x184>)
 8002726:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800272a:	4a07      	ldr	r2, [pc, #28]	@ (8002748 <HAL_UART_MspInit+0x184>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002730:	bf00      	nop
 8002732:	3770      	adds	r7, #112	@ 0x70
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40004400 	.word	0x40004400
 800273c:	40021000 	.word	0x40021000
 8002740:	40004800 	.word	0x40004800
 8002744:	48000400 	.word	0x48000400
 8002748:	200017fc 	.word	0x200017fc
 800274c:	40020008 	.word	0x40020008

08002750 <LIDAR_Init>:

/*
 * @brief Initialization of the lidar
 * @param
 */
void LIDAR_Init(LIDAR_HandleTypeDef_t * hlidar){
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	hlidar->huart = &huart3;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a09      	ldr	r2, [pc, #36]	@ (8002780 <LIDAR_Init+0x30>)
 800275c:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, DEV_EN_LIDAR_Pin, GPIO_PIN_SET);
 800275e:	2201      	movs	r2, #1
 8002760:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002768:	f001 fe08 	bl	800437c <HAL_GPIO_WritePin>
	// Enable M_EN lidar
	HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_SET);
 800276c:	2201      	movs	r2, #1
 800276e:	2104      	movs	r1, #4
 8002770:	4804      	ldr	r0, [pc, #16]	@ (8002784 <LIDAR_Init+0x34>)
 8002772:	f001 fe03 	bl	800437c <HAL_GPIO_WritePin>

}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20001768 	.word	0x20001768
 8002784:	48000400 	.word	0x48000400

08002788 <LIDAR_Start>:

/*
 * @brief
 * @param
 */
HAL_StatusTypeDef LIDAR_Start(LIDAR_HandleTypeDef_t * hlidar){
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	uint8_t lidar_command[2] = {START_CMD_LIDAR, SCAN_CMD_LIDAR};
 8002790:	f246 03a5 	movw	r3, #24741	@ 0x60a5
 8002794:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_UART_Transmit(hlidar->huart, lidar_command, 2, 2000);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	f107 010c 	add.w	r1, r7, #12
 800279e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80027a2:	2202      	movs	r2, #2
 80027a4:	f004 fd2e 	bl	8007204 <HAL_UART_Transmit>
 80027a8:	4603      	mov	r3, r0
 80027aa:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK){
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10a      	bne.n	80027c8 <LIDAR_Start+0x40>
		HAL_UART_Receive_DMA(hlidar->huart, hlidar->data_buff, DATA_BUFF_SIZE_LIDAR);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3329      	adds	r3, #41	@ 0x29
 80027ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027be:	4619      	mov	r1, r3
 80027c0:	f004 fdae 	bl	8007320 <HAL_UART_Receive_DMA>
		return status;
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	e000      	b.n	80027ca <LIDAR_Start+0x42>
	}
	else{
		return status;
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027d4:	480d      	ldr	r0, [pc, #52]	@ (800280c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027d6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80027d8:	f7ff faa6 	bl	8001d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027dc:	480c      	ldr	r0, [pc, #48]	@ (8002810 <LoopForever+0x6>)
  ldr r1, =_edata
 80027de:	490d      	ldr	r1, [pc, #52]	@ (8002814 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002818 <LoopForever+0xe>)
  movs r3, #0
 80027e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80027e4:	e002      	b.n	80027ec <LoopCopyDataInit>

080027e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ea:	3304      	adds	r3, #4

080027ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f0:	d3f9      	bcc.n	80027e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027f2:	4a0a      	ldr	r2, [pc, #40]	@ (800281c <LoopForever+0x12>)
  ldr r4, =_ebss
 80027f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002820 <LoopForever+0x16>)
  movs r3, #0
 80027f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f8:	e001      	b.n	80027fe <LoopFillZerobss>

080027fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027fc:	3204      	adds	r2, #4

080027fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002800:	d3fb      	bcc.n	80027fa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002802:	f008 ffbf 	bl	800b784 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002806:	f7fe feb7 	bl	8001578 <main>

0800280a <LoopForever>:

LoopForever:
    b LoopForever
 800280a:	e7fe      	b.n	800280a <LoopForever>
  ldr   r0, =_estack
 800280c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002814:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002818:	0800f398 	.word	0x0800f398
  ldr r2, =_sbss
 800281c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002820:	20004210 	.word	0x20004210

08002824 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002824:	e7fe      	b.n	8002824 <ADC1_2_IRQHandler>

08002826 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002830:	2003      	movs	r0, #3
 8002832:	f001 f96f 	bl	8003b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002836:	200f      	movs	r0, #15
 8002838:	f000 f80e 	bl	8002858 <HAL_InitTick>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	71fb      	strb	r3, [r7, #7]
 8002846:	e001      	b.n	800284c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002848:	f7ff f94c 	bl	8001ae4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800284c:	79fb      	ldrb	r3, [r7, #7]

}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002864:	4b16      	ldr	r3, [pc, #88]	@ (80028c0 <HAL_InitTick+0x68>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d022      	beq.n	80028b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800286c:	4b15      	ldr	r3, [pc, #84]	@ (80028c4 <HAL_InitTick+0x6c>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b13      	ldr	r3, [pc, #76]	@ (80028c0 <HAL_InitTick+0x68>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002878:	fbb1 f3f3 	udiv	r3, r1, r3
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	4618      	mov	r0, r3
 8002882:	f001 f97a 	bl	8003b7a <HAL_SYSTICK_Config>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10f      	bne.n	80028ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b0f      	cmp	r3, #15
 8002890:	d809      	bhi.n	80028a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002892:	2200      	movs	r2, #0
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	f04f 30ff 	mov.w	r0, #4294967295
 800289a:	f001 f946 	bl	8003b2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800289e:	4a0a      	ldr	r2, [pc, #40]	@ (80028c8 <HAL_InitTick+0x70>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	e007      	b.n	80028b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
 80028aa:	e004      	b.n	80028b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	73fb      	strb	r3, [r7, #15]
 80028b0:	e001      	b.n	80028b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	2000000c 	.word	0x2000000c
 80028c4:	20000004 	.word	0x20000004
 80028c8:	20000008 	.word	0x20000008

080028cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028d0:	4b05      	ldr	r3, [pc, #20]	@ (80028e8 <HAL_IncTick+0x1c>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b05      	ldr	r3, [pc, #20]	@ (80028ec <HAL_IncTick+0x20>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4413      	add	r3, r2
 80028da:	4a03      	ldr	r2, [pc, #12]	@ (80028e8 <HAL_IncTick+0x1c>)
 80028dc:	6013      	str	r3, [r2, #0]
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	2000185c 	.word	0x2000185c
 80028ec:	2000000c 	.word	0x2000000c

080028f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return uwTick;
 80028f4:	4b03      	ldr	r3, [pc, #12]	@ (8002904 <HAL_GetTick+0x14>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	2000185c 	.word	0x2000185c

08002908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002910:	f7ff ffee 	bl	80028f0 <HAL_GetTick>
 8002914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d004      	beq.n	800292c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002922:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <HAL_Delay+0x40>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4413      	add	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800292c:	bf00      	nop
 800292e:	f7ff ffdf 	bl	80028f0 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	429a      	cmp	r2, r3
 800293c:	d8f7      	bhi.n	800292e <HAL_Delay+0x26>
  {
  }
}
 800293e:	bf00      	nop
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	2000000c 	.word	0x2000000c

0800294c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	609a      	str	r2, [r3, #8]
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	609a      	str	r2, [r3, #8]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	3360      	adds	r3, #96	@ 0x60
 80029c6:	461a      	mov	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b08      	ldr	r3, [pc, #32]	@ (80029f8 <LL_ADC_SetOffset+0x44>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029ec:	bf00      	nop
 80029ee:	371c      	adds	r7, #28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	03fff000 	.word	0x03fff000

080029fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3360      	adds	r3, #96	@ 0x60
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3360      	adds	r3, #96	@ 0x60
 8002a38:	461a      	mov	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a52:	bf00      	nop
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b087      	sub	sp, #28
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3360      	adds	r3, #96	@ 0x60
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002a88:	bf00      	nop
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3360      	adds	r3, #96	@ 0x60
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002abe:	bf00      	nop
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	615a      	str	r2, [r3, #20]
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	3330      	adds	r3, #48	@ 0x30
 8002b00:	461a      	mov	r2, r3
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	0a1b      	lsrs	r3, r3, #8
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	f003 030c 	and.w	r3, r3, #12
 8002b0c:	4413      	add	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f003 031f 	and.w	r3, r3, #31
 8002b1a:	211f      	movs	r1, #31
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	401a      	ands	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	0e9b      	lsrs	r3, r3, #26
 8002b28:	f003 011f 	and.w	r1, r3, #31
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f003 031f 	and.w	r3, r3, #31
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	431a      	orrs	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b3c:	bf00      	nop
 8002b3e:	371c      	adds	r7, #28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3314      	adds	r3, #20
 8002b58:	461a      	mov	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	0e5b      	lsrs	r3, r3, #25
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	4413      	add	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	0d1b      	lsrs	r3, r3, #20
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	2107      	movs	r1, #7
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	0d1b      	lsrs	r3, r3, #20
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b92:	bf00      	nop
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	401a      	ands	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f003 0318 	and.w	r3, r3, #24
 8002bc2:	4908      	ldr	r1, [pc, #32]	@ (8002be4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002bc4:	40d9      	lsrs	r1, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	400b      	ands	r3, r1
 8002bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	0007ffff 	.word	0x0007ffff

08002be8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002bf8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6093      	str	r3, [r2, #8]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c20:	d101      	bne.n	8002c26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002c44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c70:	d101      	bne.n	8002c76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <LL_ADC_IsEnabled+0x18>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <LL_ADC_IsEnabled+0x1a>
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d101      	bne.n	8002cc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d101      	bne.n	8002ce8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
	...

08002cf8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cf8:	b590      	push	{r4, r7, lr}
 8002cfa:	b089      	sub	sp, #36	@ 0x24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e167      	b.n	8002fe2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d109      	bne.n	8002d34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7fe f9ff 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff67 	bl	8002c0c <LL_ADC_IsDeepPowerDownEnabled>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d004      	beq.n	8002d4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff4d 	bl	8002be8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff ff82 	bl	8002c5c <LL_ADC_IsInternalRegulatorEnabled>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d115      	bne.n	8002d8a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff ff66 	bl	8002c34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d68:	4ba0      	ldr	r3, [pc, #640]	@ (8002fec <HAL_ADC_Init+0x2f4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	099b      	lsrs	r3, r3, #6
 8002d6e:	4aa0      	ldr	r2, [pc, #640]	@ (8002ff0 <HAL_ADC_Init+0x2f8>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	099b      	lsrs	r3, r3, #6
 8002d76:	3301      	adds	r3, #1
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d7c:	e002      	b.n	8002d84 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f9      	bne.n	8002d7e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff ff64 	bl	8002c5c <LL_ADC_IsInternalRegulatorEnabled>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10d      	bne.n	8002db6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9e:	f043 0210 	orr.w	r2, r3, #16
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002daa:	f043 0201 	orr.w	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff ff75 	bl	8002caa <LL_ADC_REG_IsConversionOngoing>
 8002dc0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f040 8100 	bne.w	8002fd0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f040 80fc 	bne.w	8002fd0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ddc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002de0:	f043 0202 	orr.w	r2, r3, #2
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff49 	bl	8002c84 <LL_ADC_IsEnabled>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d111      	bne.n	8002e1c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002df8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002dfc:	f7ff ff42 	bl	8002c84 <LL_ADC_IsEnabled>
 8002e00:	4604      	mov	r4, r0
 8002e02:	487c      	ldr	r0, [pc, #496]	@ (8002ff4 <HAL_ADC_Init+0x2fc>)
 8002e04:	f7ff ff3e 	bl	8002c84 <LL_ADC_IsEnabled>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	4323      	orrs	r3, r4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d105      	bne.n	8002e1c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	4619      	mov	r1, r3
 8002e16:	4878      	ldr	r0, [pc, #480]	@ (8002ff8 <HAL_ADC_Init+0x300>)
 8002e18:	f7ff fd98 	bl	800294c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	7f5b      	ldrb	r3, [r3, #29]
 8002e20:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e26:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002e2c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002e32:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e3a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d106      	bne.n	8002e58 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	045b      	lsls	r3, r3, #17
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d009      	beq.n	8002e74 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e64:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	4b60      	ldr	r3, [pc, #384]	@ (8002ffc <HAL_ADC_Init+0x304>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	69b9      	ldr	r1, [r7, #24]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff ff14 	bl	8002cd0 <LL_ADC_INJ_IsConversionOngoing>
 8002ea8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d16d      	bne.n	8002f8c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d16a      	bne.n	8002f8c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002eba:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ec2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ed2:	f023 0302 	bic.w	r3, r3, #2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	69b9      	ldr	r1, [r7, #24]
 8002edc:	430b      	orrs	r3, r1
 8002ede:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d017      	beq.n	8002f18 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002ef6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f00:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6911      	ldr	r1, [r2, #16]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002f16:	e013      	b.n	8002f40 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002f26:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f3c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d118      	bne.n	8002f7c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002f54:	f023 0304 	bic.w	r3, r3, #4
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f60:	4311      	orrs	r1, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f66:	4311      	orrs	r1, r2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0201 	orr.w	r2, r2, #1
 8002f78:	611a      	str	r2, [r3, #16]
 8002f7a:	e007      	b.n	8002f8c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0201 	bic.w	r2, r2, #1
 8002f8a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d10c      	bne.n	8002fae <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	f023 010f 	bic.w	r1, r3, #15
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	1e5a      	subs	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fac:	e007      	b.n	8002fbe <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 020f 	bic.w	r2, r2, #15
 8002fbc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc2:	f023 0303 	bic.w	r3, r3, #3
 8002fc6:	f043 0201 	orr.w	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fce:	e007      	b.n	8002fe0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd4:	f043 0210 	orr.w	r2, r3, #16
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fe0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3724      	adds	r7, #36	@ 0x24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd90      	pop	{r4, r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000004 	.word	0x20000004
 8002ff0:	053e2d63 	.word	0x053e2d63
 8002ff4:	50000100 	.word	0x50000100
 8002ff8:	50000300 	.word	0x50000300
 8002ffc:	fff04007 	.word	0xfff04007

08003000 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b0b6      	sub	sp, #216	@ 0xd8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x22>
 800301e:	2302      	movs	r3, #2
 8003020:	e3c8      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x7b4>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fe3b 	bl	8002caa <LL_ADC_REG_IsConversionOngoing>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	f040 83ad 	bne.w	8003796 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	6859      	ldr	r1, [r3, #4]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	f7ff fd51 	bl	8002af0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fe29 	bl	8002caa <LL_ADC_REG_IsConversionOngoing>
 8003058:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff fe35 	bl	8002cd0 <LL_ADC_INJ_IsConversionOngoing>
 8003066:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800306a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800306e:	2b00      	cmp	r3, #0
 8003070:	f040 81d9 	bne.w	8003426 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003074:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003078:	2b00      	cmp	r3, #0
 800307a:	f040 81d4 	bne.w	8003426 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003086:	d10f      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6818      	ldr	r0, [r3, #0]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2200      	movs	r2, #0
 8003092:	4619      	mov	r1, r3
 8003094:	f7ff fd58 	bl	8002b48 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fd12 	bl	8002aca <LL_ADC_SetSamplingTimeCommonConfig>
 80030a6:	e00e      	b.n	80030c6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	461a      	mov	r2, r3
 80030b6:	f7ff fd47 	bl	8002b48 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fd02 	bl	8002aca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	695a      	ldr	r2, [r3, #20]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	08db      	lsrs	r3, r3, #3
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d022      	beq.n	800312e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6919      	ldr	r1, [r3, #16]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80030f8:	f7ff fc5c 	bl	80029b4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	6919      	ldr	r1, [r3, #16]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	461a      	mov	r2, r3
 800310a:	f7ff fca8 	bl	8002a5e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6818      	ldr	r0, [r3, #0]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800311a:	2b01      	cmp	r3, #1
 800311c:	d102      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x124>
 800311e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003122:	e000      	b.n	8003126 <HAL_ADC_ConfigChannel+0x126>
 8003124:	2300      	movs	r3, #0
 8003126:	461a      	mov	r2, r3
 8003128:	f7ff fcb4 	bl	8002a94 <LL_ADC_SetOffsetSaturation>
 800312c:	e17b      	b.n	8003426 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2100      	movs	r1, #0
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fc61 	bl	80029fc <LL_ADC_GetOffsetChannel>
 800313a:	4603      	mov	r3, r0
 800313c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10a      	bne.n	800315a <HAL_ADC_ConfigChannel+0x15a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2100      	movs	r1, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fc56 	bl	80029fc <LL_ADC_GetOffsetChannel>
 8003150:	4603      	mov	r3, r0
 8003152:	0e9b      	lsrs	r3, r3, #26
 8003154:	f003 021f 	and.w	r2, r3, #31
 8003158:	e01e      	b.n	8003198 <HAL_ADC_ConfigChannel+0x198>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2100      	movs	r1, #0
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fc4b 	bl	80029fc <LL_ADC_GetOffsetChannel>
 8003166:	4603      	mov	r3, r0
 8003168:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003178:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800317c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003180:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003188:	2320      	movs	r3, #32
 800318a:	e004      	b.n	8003196 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800318c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003190:	fab3 f383 	clz	r3, r3
 8003194:	b2db      	uxtb	r3, r3
 8003196:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d105      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x1b0>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	0e9b      	lsrs	r3, r3, #26
 80031aa:	f003 031f 	and.w	r3, r3, #31
 80031ae:	e018      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x1e2>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80031bc:	fa93 f3a3 	rbit	r3, r3
 80031c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80031c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80031cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80031d4:	2320      	movs	r3, #32
 80031d6:	e004      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80031d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031dc:	fab3 f383 	clz	r3, r3
 80031e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d106      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2200      	movs	r2, #0
 80031ec:	2100      	movs	r1, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fc1a 	bl	8002a28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2101      	movs	r1, #1
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fbfe 	bl	80029fc <LL_ADC_GetOffsetChannel>
 8003200:	4603      	mov	r3, r0
 8003202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10a      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x220>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2101      	movs	r1, #1
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff fbf3 	bl	80029fc <LL_ADC_GetOffsetChannel>
 8003216:	4603      	mov	r3, r0
 8003218:	0e9b      	lsrs	r3, r3, #26
 800321a:	f003 021f 	and.w	r2, r3, #31
 800321e:	e01e      	b.n	800325e <HAL_ADC_ConfigChannel+0x25e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2101      	movs	r1, #1
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff fbe8 	bl	80029fc <LL_ADC_GetOffsetChannel>
 800322c:	4603      	mov	r3, r0
 800322e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003236:	fa93 f3a3 	rbit	r3, r3
 800323a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800323e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003242:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003246:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800324e:	2320      	movs	r3, #32
 8003250:	e004      	b.n	800325c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003252:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003256:	fab3 f383 	clz	r3, r3
 800325a:	b2db      	uxtb	r3, r3
 800325c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003266:	2b00      	cmp	r3, #0
 8003268:	d105      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x276>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	0e9b      	lsrs	r3, r3, #26
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	e018      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x2a8>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003282:	fa93 f3a3 	rbit	r3, r3
 8003286:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800328a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800328e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003292:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800329a:	2320      	movs	r3, #32
 800329c:	e004      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800329e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d106      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2200      	movs	r2, #0
 80032b2:	2101      	movs	r1, #1
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fbb7 	bl	8002a28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2102      	movs	r1, #2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fb9b 	bl	80029fc <LL_ADC_GetOffsetChannel>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10a      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x2e6>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2102      	movs	r1, #2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fb90 	bl	80029fc <LL_ADC_GetOffsetChannel>
 80032dc:	4603      	mov	r3, r0
 80032de:	0e9b      	lsrs	r3, r3, #26
 80032e0:	f003 021f 	and.w	r2, r3, #31
 80032e4:	e01e      	b.n	8003324 <HAL_ADC_ConfigChannel+0x324>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2102      	movs	r1, #2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fb85 	bl	80029fc <LL_ADC_GetOffsetChannel>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003304:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003308:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800330c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003314:	2320      	movs	r3, #32
 8003316:	e004      	b.n	8003322 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003318:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800331c:	fab3 f383 	clz	r3, r3
 8003320:	b2db      	uxtb	r3, r3
 8003322:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332c:	2b00      	cmp	r3, #0
 800332e:	d105      	bne.n	800333c <HAL_ADC_ConfigChannel+0x33c>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	0e9b      	lsrs	r3, r3, #26
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	e016      	b.n	800336a <HAL_ADC_ConfigChannel+0x36a>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003344:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800334e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003350:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003354:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800335c:	2320      	movs	r3, #32
 800335e:	e004      	b.n	800336a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003360:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003364:	fab3 f383 	clz	r3, r3
 8003368:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800336a:	429a      	cmp	r2, r3
 800336c:	d106      	bne.n	800337c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2200      	movs	r2, #0
 8003374:	2102      	movs	r1, #2
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fb56 	bl	8002a28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2103      	movs	r1, #3
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fb3a 	bl	80029fc <LL_ADC_GetOffsetChannel>
 8003388:	4603      	mov	r3, r0
 800338a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10a      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x3a8>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2103      	movs	r1, #3
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff fb2f 	bl	80029fc <LL_ADC_GetOffsetChannel>
 800339e:	4603      	mov	r3, r0
 80033a0:	0e9b      	lsrs	r3, r3, #26
 80033a2:	f003 021f 	and.w	r2, r3, #31
 80033a6:	e017      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x3d8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2103      	movs	r1, #3
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fb24 	bl	80029fc <LL_ADC_GetOffsetChannel>
 80033b4:	4603      	mov	r3, r0
 80033b6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033ba:	fa93 f3a3 	rbit	r3, r3
 80033be:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80033c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033c2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80033c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80033ca:	2320      	movs	r3, #32
 80033cc:	e003      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80033ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033d0:	fab3 f383 	clz	r3, r3
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d105      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x3f0>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	0e9b      	lsrs	r3, r3, #26
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	e011      	b.n	8003414 <HAL_ADC_ConfigChannel+0x414>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80033fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003400:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003408:	2320      	movs	r3, #32
 800340a:	e003      	b.n	8003414 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800340c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003414:	429a      	cmp	r2, r3
 8003416:	d106      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2200      	movs	r2, #0
 800341e:	2103      	movs	r1, #3
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fb01 	bl	8002a28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff fc2a 	bl	8002c84 <LL_ADC_IsEnabled>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	f040 8140 	bne.w	80036b8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	6819      	ldr	r1, [r3, #0]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	461a      	mov	r2, r3
 8003446:	f7ff fbab 	bl	8002ba0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	4a8f      	ldr	r2, [pc, #572]	@ (800368c <HAL_ADC_ConfigChannel+0x68c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	f040 8131 	bne.w	80036b8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <HAL_ADC_ConfigChannel+0x47e>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	0e9b      	lsrs	r3, r3, #26
 800346c:	3301      	adds	r3, #1
 800346e:	f003 031f 	and.w	r3, r3, #31
 8003472:	2b09      	cmp	r3, #9
 8003474:	bf94      	ite	ls
 8003476:	2301      	movls	r3, #1
 8003478:	2300      	movhi	r3, #0
 800347a:	b2db      	uxtb	r3, r3
 800347c:	e019      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x4b2>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003486:	fa93 f3a3 	rbit	r3, r3
 800348a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800348c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800348e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003490:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003496:	2320      	movs	r3, #32
 8003498:	e003      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800349a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800349c:	fab3 f383 	clz	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	3301      	adds	r3, #1
 80034a4:	f003 031f 	and.w	r3, r3, #31
 80034a8:	2b09      	cmp	r3, #9
 80034aa:	bf94      	ite	ls
 80034ac:	2301      	movls	r3, #1
 80034ae:	2300      	movhi	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d079      	beq.n	80035aa <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d107      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x4d2>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	0e9b      	lsrs	r3, r3, #26
 80034c8:	3301      	adds	r3, #1
 80034ca:	069b      	lsls	r3, r3, #26
 80034cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034d0:	e015      	b.n	80034fe <HAL_ADC_ConfigChannel+0x4fe>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034da:	fa93 f3a3 	rbit	r3, r3
 80034de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80034e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034e2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80034e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80034ea:	2320      	movs	r3, #32
 80034ec:	e003      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80034ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f0:	fab3 f383 	clz	r3, r3
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	3301      	adds	r3, #1
 80034f8:	069b      	lsls	r3, r3, #26
 80034fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <HAL_ADC_ConfigChannel+0x51e>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	0e9b      	lsrs	r3, r3, #26
 8003510:	3301      	adds	r3, #1
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	2101      	movs	r1, #1
 8003518:	fa01 f303 	lsl.w	r3, r1, r3
 800351c:	e017      	b.n	800354e <HAL_ADC_ConfigChannel+0x54e>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003526:	fa93 f3a3 	rbit	r3, r3
 800352a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800352c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800352e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003530:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003536:	2320      	movs	r3, #32
 8003538:	e003      	b.n	8003542 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800353a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800353c:	fab3 f383 	clz	r3, r3
 8003540:	b2db      	uxtb	r3, r3
 8003542:	3301      	adds	r3, #1
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	2101      	movs	r1, #1
 800354a:	fa01 f303 	lsl.w	r3, r1, r3
 800354e:	ea42 0103 	orr.w	r1, r2, r3
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10a      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x574>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	0e9b      	lsrs	r3, r3, #26
 8003564:	3301      	adds	r3, #1
 8003566:	f003 021f 	and.w	r2, r3, #31
 800356a:	4613      	mov	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	4413      	add	r3, r2
 8003570:	051b      	lsls	r3, r3, #20
 8003572:	e018      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x5a6>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003584:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800358c:	2320      	movs	r3, #32
 800358e:	e003      	b.n	8003598 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003592:	fab3 f383 	clz	r3, r3
 8003596:	b2db      	uxtb	r3, r3
 8003598:	3301      	adds	r3, #1
 800359a:	f003 021f 	and.w	r2, r3, #31
 800359e:	4613      	mov	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4413      	add	r3, r2
 80035a4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035a6:	430b      	orrs	r3, r1
 80035a8:	e081      	b.n	80036ae <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d107      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x5c6>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	0e9b      	lsrs	r3, r3, #26
 80035bc:	3301      	adds	r3, #1
 80035be:	069b      	lsls	r3, r3, #26
 80035c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035c4:	e015      	b.n	80035f2 <HAL_ADC_ConfigChannel+0x5f2>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ce:	fa93 f3a3 	rbit	r3, r3
 80035d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80035d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80035d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80035de:	2320      	movs	r3, #32
 80035e0:	e003      	b.n	80035ea <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80035e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e4:	fab3 f383 	clz	r3, r3
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	3301      	adds	r3, #1
 80035ec:	069b      	lsls	r3, r3, #26
 80035ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x612>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	0e9b      	lsrs	r3, r3, #26
 8003604:	3301      	adds	r3, #1
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	2101      	movs	r1, #1
 800360c:	fa01 f303 	lsl.w	r3, r1, r3
 8003610:	e017      	b.n	8003642 <HAL_ADC_ConfigChannel+0x642>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	fa93 f3a3 	rbit	r3, r3
 800361e:	61fb      	str	r3, [r7, #28]
  return result;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800362a:	2320      	movs	r3, #32
 800362c:	e003      	b.n	8003636 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	fab3 f383 	clz	r3, r3
 8003634:	b2db      	uxtb	r3, r3
 8003636:	3301      	adds	r3, #1
 8003638:	f003 031f 	and.w	r3, r3, #31
 800363c:	2101      	movs	r1, #1
 800363e:	fa01 f303 	lsl.w	r3, r1, r3
 8003642:	ea42 0103 	orr.w	r1, r2, r3
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10d      	bne.n	800366e <HAL_ADC_ConfigChannel+0x66e>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	0e9b      	lsrs	r3, r3, #26
 8003658:	3301      	adds	r3, #1
 800365a:	f003 021f 	and.w	r2, r3, #31
 800365e:	4613      	mov	r3, r2
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	4413      	add	r3, r2
 8003664:	3b1e      	subs	r3, #30
 8003666:	051b      	lsls	r3, r3, #20
 8003668:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800366c:	e01e      	b.n	80036ac <HAL_ADC_ConfigChannel+0x6ac>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	613b      	str	r3, [r7, #16]
  return result;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d104      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003686:	2320      	movs	r3, #32
 8003688:	e006      	b.n	8003698 <HAL_ADC_ConfigChannel+0x698>
 800368a:	bf00      	nop
 800368c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	3301      	adds	r3, #1
 800369a:	f003 021f 	and.w	r2, r3, #31
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	3b1e      	subs	r3, #30
 80036a6:	051b      	lsls	r3, r3, #20
 80036a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036b2:	4619      	mov	r1, r3
 80036b4:	f7ff fa48 	bl	8002b48 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	4b3f      	ldr	r3, [pc, #252]	@ (80037bc <HAL_ADC_ConfigChannel+0x7bc>)
 80036be:	4013      	ands	r3, r2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d071      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036c4:	483e      	ldr	r0, [pc, #248]	@ (80037c0 <HAL_ADC_ConfigChannel+0x7c0>)
 80036c6:	f7ff f967 	bl	8002998 <LL_ADC_GetCommonPathInternalCh>
 80036ca:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a3c      	ldr	r2, [pc, #240]	@ (80037c4 <HAL_ADC_ConfigChannel+0x7c4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d004      	beq.n	80036e2 <HAL_ADC_ConfigChannel+0x6e2>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a3a      	ldr	r2, [pc, #232]	@ (80037c8 <HAL_ADC_ConfigChannel+0x7c8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d127      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d121      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036f6:	d157      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003700:	4619      	mov	r1, r3
 8003702:	482f      	ldr	r0, [pc, #188]	@ (80037c0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003704:	f7ff f935 	bl	8002972 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003708:	4b30      	ldr	r3, [pc, #192]	@ (80037cc <HAL_ADC_ConfigChannel+0x7cc>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	099b      	lsrs	r3, r3, #6
 800370e:	4a30      	ldr	r2, [pc, #192]	@ (80037d0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003710:	fba2 2303 	umull	r2, r3, r2, r3
 8003714:	099b      	lsrs	r3, r3, #6
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003722:	e002      	b.n	800372a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	3b01      	subs	r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f9      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003730:	e03a      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a27      	ldr	r2, [pc, #156]	@ (80037d4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d113      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800373c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003740:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10d      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a22      	ldr	r2, [pc, #136]	@ (80037d8 <HAL_ADC_ConfigChannel+0x7d8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d02a      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003752:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003756:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800375a:	4619      	mov	r1, r3
 800375c:	4818      	ldr	r0, [pc, #96]	@ (80037c0 <HAL_ADC_ConfigChannel+0x7c0>)
 800375e:	f7ff f908 	bl	8002972 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003762:	e021      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a1c      	ldr	r2, [pc, #112]	@ (80037dc <HAL_ADC_ConfigChannel+0x7dc>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d11c      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800376e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d116      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a16      	ldr	r2, [pc, #88]	@ (80037d8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d011      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003784:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003788:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800378c:	4619      	mov	r1, r3
 800378e:	480c      	ldr	r0, [pc, #48]	@ (80037c0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003790:	f7ff f8ef 	bl	8002972 <LL_ADC_SetCommonPathInternalCh>
 8003794:	e008      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379a:	f043 0220 	orr.w	r2, r3, #32
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80037b0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	37d8      	adds	r7, #216	@ 0xd8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	80080000 	.word	0x80080000
 80037c0:	50000300 	.word	0x50000300
 80037c4:	c3210000 	.word	0xc3210000
 80037c8:	90c00010 	.word	0x90c00010
 80037cc:	20000004 	.word	0x20000004
 80037d0:	053e2d63 	.word	0x053e2d63
 80037d4:	c7520000 	.word	0xc7520000
 80037d8:	50000100 	.word	0x50000100
 80037dc:	cb840000 	.word	0xcb840000

080037e0 <LL_ADC_IsEnabled>:
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <LL_ADC_IsEnabled+0x18>
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <LL_ADC_IsEnabled+0x1a>
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <LL_ADC_REG_IsConversionOngoing>:
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b04      	cmp	r3, #4
 8003818:	d101      	bne.n	800381e <LL_ADC_REG_IsConversionOngoing+0x18>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b0a1      	sub	sp, #132	@ 0x84
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003846:	2302      	movs	r3, #2
 8003848:	e08b      	b.n	8003962 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003852:	2300      	movs	r3, #0
 8003854:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003856:	2300      	movs	r3, #0
 8003858:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003862:	d102      	bne.n	800386a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003864:	4b41      	ldr	r3, [pc, #260]	@ (800396c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	e001      	b.n	800386e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800386a:	2300      	movs	r3, #0
 800386c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10b      	bne.n	800388c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003878:	f043 0220 	orr.w	r2, r3, #32
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e06a      	b.n	8003962 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff ffb9 	bl	8003806 <LL_ADC_REG_IsConversionOngoing>
 8003894:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff ffb3 	bl	8003806 <LL_ADC_REG_IsConversionOngoing>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d14c      	bne.n	8003940 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80038a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d149      	bne.n	8003940 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80038ac:	4b30      	ldr	r3, [pc, #192]	@ (8003970 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80038ae:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d028      	beq.n	800390a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80038b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80038ca:	035b      	lsls	r3, r3, #13
 80038cc:	430b      	orrs	r3, r1
 80038ce:	431a      	orrs	r2, r3
 80038d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80038d8:	f7ff ff82 	bl	80037e0 <LL_ADC_IsEnabled>
 80038dc:	4604      	mov	r4, r0
 80038de:	4823      	ldr	r0, [pc, #140]	@ (800396c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80038e0:	f7ff ff7e 	bl	80037e0 <LL_ADC_IsEnabled>
 80038e4:	4603      	mov	r3, r0
 80038e6:	4323      	orrs	r3, r4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d133      	bne.n	8003954 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80038ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80038f4:	f023 030f 	bic.w	r3, r3, #15
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	6811      	ldr	r1, [r2, #0]
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	6892      	ldr	r2, [r2, #8]
 8003900:	430a      	orrs	r2, r1
 8003902:	431a      	orrs	r2, r3
 8003904:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003906:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003908:	e024      	b.n	8003954 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800390a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003912:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003914:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003916:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800391a:	f7ff ff61 	bl	80037e0 <LL_ADC_IsEnabled>
 800391e:	4604      	mov	r4, r0
 8003920:	4812      	ldr	r0, [pc, #72]	@ (800396c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003922:	f7ff ff5d 	bl	80037e0 <LL_ADC_IsEnabled>
 8003926:	4603      	mov	r3, r0
 8003928:	4323      	orrs	r3, r4
 800392a:	2b00      	cmp	r3, #0
 800392c:	d112      	bne.n	8003954 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800392e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003936:	f023 030f 	bic.w	r3, r3, #15
 800393a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800393c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800393e:	e009      	b.n	8003954 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003944:	f043 0220 	orr.w	r2, r3, #32
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003952:	e000      	b.n	8003956 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003954:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800395e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003962:	4618      	mov	r0, r3
 8003964:	3784      	adds	r7, #132	@ 0x84
 8003966:	46bd      	mov	sp, r7
 8003968:	bd90      	pop	{r4, r7, pc}
 800396a:	bf00      	nop
 800396c:	50000100 	.word	0x50000100
 8003970:	50000300 	.word	0x50000300

08003974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003984:	4b0c      	ldr	r3, [pc, #48]	@ (80039b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003990:	4013      	ands	r3, r2
 8003992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800399c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039a6:	4a04      	ldr	r2, [pc, #16]	@ (80039b8 <__NVIC_SetPriorityGrouping+0x44>)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	60d3      	str	r3, [r2, #12]
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039c0:	4b04      	ldr	r3, [pc, #16]	@ (80039d4 <__NVIC_GetPriorityGrouping+0x18>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	0a1b      	lsrs	r3, r3, #8
 80039c6:	f003 0307 	and.w	r3, r3, #7
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	db0b      	blt.n	8003a02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	f003 021f 	and.w	r2, r3, #31
 80039f0:	4907      	ldr	r1, [pc, #28]	@ (8003a10 <__NVIC_EnableIRQ+0x38>)
 80039f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	2001      	movs	r0, #1
 80039fa:	fa00 f202 	lsl.w	r2, r0, r2
 80039fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	e000e100 	.word	0xe000e100

08003a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	6039      	str	r1, [r7, #0]
 8003a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	db0a      	blt.n	8003a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	490c      	ldr	r1, [pc, #48]	@ (8003a60 <__NVIC_SetPriority+0x4c>)
 8003a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a32:	0112      	lsls	r2, r2, #4
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	440b      	add	r3, r1
 8003a38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a3c:	e00a      	b.n	8003a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	4908      	ldr	r1, [pc, #32]	@ (8003a64 <__NVIC_SetPriority+0x50>)
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	3b04      	subs	r3, #4
 8003a4c:	0112      	lsls	r2, r2, #4
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	440b      	add	r3, r1
 8003a52:	761a      	strb	r2, [r3, #24]
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	e000e100 	.word	0xe000e100
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b089      	sub	sp, #36	@ 0x24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f1c3 0307 	rsb	r3, r3, #7
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	bf28      	it	cs
 8003a86:	2304      	movcs	r3, #4
 8003a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	2b06      	cmp	r3, #6
 8003a90:	d902      	bls.n	8003a98 <NVIC_EncodePriority+0x30>
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	3b03      	subs	r3, #3
 8003a96:	e000      	b.n	8003a9a <NVIC_EncodePriority+0x32>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43da      	mvns	r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	401a      	ands	r2, r3
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aba:	43d9      	mvns	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac0:	4313      	orrs	r3, r2
         );
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3724      	adds	r7, #36	@ 0x24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ae0:	d301      	bcc.n	8003ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e00f      	b.n	8003b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b10 <SysTick_Config+0x40>)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aee:	210f      	movs	r1, #15
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295
 8003af4:	f7ff ff8e 	bl	8003a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003af8:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <SysTick_Config+0x40>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003afe:	4b04      	ldr	r3, [pc, #16]	@ (8003b10 <SysTick_Config+0x40>)
 8003b00:	2207      	movs	r2, #7
 8003b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	e000e010 	.word	0xe000e010

08003b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff ff29 	bl	8003974 <__NVIC_SetPriorityGrouping>
}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b086      	sub	sp, #24
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	4603      	mov	r3, r0
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
 8003b36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b38:	f7ff ff40 	bl	80039bc <__NVIC_GetPriorityGrouping>
 8003b3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	6978      	ldr	r0, [r7, #20]
 8003b44:	f7ff ff90 	bl	8003a68 <NVIC_EncodePriority>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4e:	4611      	mov	r1, r2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff ff5f 	bl	8003a14 <__NVIC_SetPriority>
}
 8003b56:	bf00      	nop
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	4603      	mov	r3, r0
 8003b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff ff33 	bl	80039d8 <__NVIC_EnableIRQ>
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff ffa4 	bl	8003ad0 <SysTick_Config>
 8003b88:	4603      	mov	r3, r0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e08d      	b.n	8003cc2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	4b47      	ldr	r3, [pc, #284]	@ (8003ccc <HAL_DMA_Init+0x138>)
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d80f      	bhi.n	8003bd2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4b45      	ldr	r3, [pc, #276]	@ (8003cd0 <HAL_DMA_Init+0x13c>)
 8003bba:	4413      	add	r3, r2
 8003bbc:	4a45      	ldr	r2, [pc, #276]	@ (8003cd4 <HAL_DMA_Init+0x140>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	091b      	lsrs	r3, r3, #4
 8003bc4:	009a      	lsls	r2, r3, #2
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a42      	ldr	r2, [pc, #264]	@ (8003cd8 <HAL_DMA_Init+0x144>)
 8003bce:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bd0:	e00e      	b.n	8003bf0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	4b40      	ldr	r3, [pc, #256]	@ (8003cdc <HAL_DMA_Init+0x148>)
 8003bda:	4413      	add	r3, r2
 8003bdc:	4a3d      	ldr	r2, [pc, #244]	@ (8003cd4 <HAL_DMA_Init+0x140>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	091b      	lsrs	r3, r3, #4
 8003be4:	009a      	lsls	r2, r3, #2
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a3c      	ldr	r2, [pc, #240]	@ (8003ce0 <HAL_DMA_Init+0x14c>)
 8003bee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f9b6 	bl	8003fb4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c50:	d102      	bne.n	8003c58 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c6c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d010      	beq.n	8003c98 <HAL_DMA_Init+0x104>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d80c      	bhi.n	8003c98 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f9d6 	bl	8004030 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c94:	605a      	str	r2, [r3, #4]
 8003c96:	e008      	b.n	8003caa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40020407 	.word	0x40020407
 8003cd0:	bffdfff8 	.word	0xbffdfff8
 8003cd4:	cccccccd 	.word	0xcccccccd
 8003cd8:	40020000 	.word	0x40020000
 8003cdc:	bffdfbf8 	.word	0xbffdfbf8
 8003ce0:	40020400 	.word	0x40020400

08003ce4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_DMA_Start_IT+0x20>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e066      	b.n	8003dd2 <HAL_DMA_Start_IT+0xee>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d155      	bne.n	8003dc4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0201 	bic.w	r2, r2, #1
 8003d34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 f8fb 	bl	8003f38 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d008      	beq.n	8003d5c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 020e 	orr.w	r2, r2, #14
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	e00f      	b.n	8003d7c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0204 	bic.w	r2, r2, #4
 8003d6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 020a 	orr.w	r2, r2, #10
 8003d7a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d98:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d007      	beq.n	8003db2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003db0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0201 	orr.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	e005      	b.n	8003dd0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	2204      	movs	r2, #4
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4013      	ands	r3, r2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d026      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x7a>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d021      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d107      	bne.n	8003e2e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0204 	bic.w	r2, r2, #4
 8003e2c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e32:	f003 021f 	and.w	r2, r3, #31
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3a:	2104      	movs	r1, #4
 8003e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e40:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d071      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003e52:	e06c      	b.n	8003f2e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e58:	f003 031f 	and.w	r3, r3, #31
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d02e      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d029      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10b      	bne.n	8003e98 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 020a 	bic.w	r2, r2, #10
 8003e8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9c:	f003 021f 	and.w	r2, r3, #31
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eaa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d038      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ec4:	e033      	b.n	8003f2e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	2208      	movs	r2, #8
 8003ed0:	409a      	lsls	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d02a      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d025      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 020e 	bic.w	r2, r2, #14
 8003ef2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef8:	f003 021f 	and.w	r2, r3, #31
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	2101      	movs	r1, #1
 8003f02:	fa01 f202 	lsl.w	r2, r1, r2
 8003f06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d004      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f2e:	bf00      	nop
 8003f30:	bf00      	nop
}
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f4e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d004      	beq.n	8003f62 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f60:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f66:	f003 021f 	and.w	r2, r3, #31
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	2101      	movs	r1, #1
 8003f70:	fa01 f202 	lsl.w	r2, r1, r2
 8003f74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b10      	cmp	r3, #16
 8003f84:	d108      	bne.n	8003f98 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f96:	e007      	b.n	8003fa8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	60da      	str	r2, [r3, #12]
}
 8003fa8:	bf00      	nop
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4b16      	ldr	r3, [pc, #88]	@ (800401c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d802      	bhi.n	8003fce <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003fc8:	4b15      	ldr	r3, [pc, #84]	@ (8004020 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	e001      	b.n	8003fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003fce:	4b15      	ldr	r3, [pc, #84]	@ (8004024 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003fd0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	3b08      	subs	r3, #8
 8003fde:	4a12      	ldr	r2, [pc, #72]	@ (8004028 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe4:	091b      	lsrs	r3, r3, #4
 8003fe6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fec:	089b      	lsrs	r3, r3, #2
 8003fee:	009a      	lsls	r2, r3, #2
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800402c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ffe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f003 031f 	and.w	r3, r3, #31
 8004006:	2201      	movs	r2, #1
 8004008:	409a      	lsls	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800400e:	bf00      	nop
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40020407 	.word	0x40020407
 8004020:	40020800 	.word	0x40020800
 8004024:	40020820 	.word	0x40020820
 8004028:	cccccccd 	.word	0xcccccccd
 800402c:	40020880 	.word	0x40020880

08004030 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4b0b      	ldr	r3, [pc, #44]	@ (8004070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004044:	4413      	add	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	461a      	mov	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a08      	ldr	r2, [pc, #32]	@ (8004074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004052:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	3b01      	subs	r3, #1
 8004058:	f003 031f 	and.w	r3, r3, #31
 800405c:	2201      	movs	r2, #1
 800405e:	409a      	lsls	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004064:	bf00      	nop
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	1000823f 	.word	0x1000823f
 8004074:	40020940 	.word	0x40020940

08004078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004086:	e15a      	b.n	800433e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	2101      	movs	r1, #1
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	fa01 f303 	lsl.w	r3, r1, r3
 8004094:	4013      	ands	r3, r2
 8004096:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 814c 	beq.w	8004338 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d005      	beq.n	80040b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d130      	bne.n	800411a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	2203      	movs	r2, #3
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	43db      	mvns	r3, r3
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4013      	ands	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	4313      	orrs	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040ee:	2201      	movs	r2, #1
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	43db      	mvns	r3, r3
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4013      	ands	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	091b      	lsrs	r3, r3, #4
 8004104:	f003 0201 	and.w	r2, r3, #1
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	2b03      	cmp	r3, #3
 8004124:	d017      	beq.n	8004156 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	2203      	movs	r2, #3
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43db      	mvns	r3, r3
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4013      	ands	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d123      	bne.n	80041aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	08da      	lsrs	r2, r3, #3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3208      	adds	r2, #8
 800416a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800416e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	220f      	movs	r2, #15
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43db      	mvns	r3, r3
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4013      	ands	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	08da      	lsrs	r2, r3, #3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3208      	adds	r2, #8
 80041a4:	6939      	ldr	r1, [r7, #16]
 80041a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	2203      	movs	r2, #3
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43db      	mvns	r3, r3
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4013      	ands	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f003 0203 	and.w	r2, r3, #3
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 80a6 	beq.w	8004338 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ec:	4b5b      	ldr	r3, [pc, #364]	@ (800435c <HAL_GPIO_Init+0x2e4>)
 80041ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f0:	4a5a      	ldr	r2, [pc, #360]	@ (800435c <HAL_GPIO_Init+0x2e4>)
 80041f2:	f043 0301 	orr.w	r3, r3, #1
 80041f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80041f8:	4b58      	ldr	r3, [pc, #352]	@ (800435c <HAL_GPIO_Init+0x2e4>)
 80041fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	60bb      	str	r3, [r7, #8]
 8004202:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004204:	4a56      	ldr	r2, [pc, #344]	@ (8004360 <HAL_GPIO_Init+0x2e8>)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	089b      	lsrs	r3, r3, #2
 800420a:	3302      	adds	r3, #2
 800420c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004210:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	220f      	movs	r2, #15
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4013      	ands	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800422e:	d01f      	beq.n	8004270 <HAL_GPIO_Init+0x1f8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a4c      	ldr	r2, [pc, #304]	@ (8004364 <HAL_GPIO_Init+0x2ec>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d019      	beq.n	800426c <HAL_GPIO_Init+0x1f4>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a4b      	ldr	r2, [pc, #300]	@ (8004368 <HAL_GPIO_Init+0x2f0>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d013      	beq.n	8004268 <HAL_GPIO_Init+0x1f0>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a4a      	ldr	r2, [pc, #296]	@ (800436c <HAL_GPIO_Init+0x2f4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00d      	beq.n	8004264 <HAL_GPIO_Init+0x1ec>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a49      	ldr	r2, [pc, #292]	@ (8004370 <HAL_GPIO_Init+0x2f8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d007      	beq.n	8004260 <HAL_GPIO_Init+0x1e8>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a48      	ldr	r2, [pc, #288]	@ (8004374 <HAL_GPIO_Init+0x2fc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d101      	bne.n	800425c <HAL_GPIO_Init+0x1e4>
 8004258:	2305      	movs	r3, #5
 800425a:	e00a      	b.n	8004272 <HAL_GPIO_Init+0x1fa>
 800425c:	2306      	movs	r3, #6
 800425e:	e008      	b.n	8004272 <HAL_GPIO_Init+0x1fa>
 8004260:	2304      	movs	r3, #4
 8004262:	e006      	b.n	8004272 <HAL_GPIO_Init+0x1fa>
 8004264:	2303      	movs	r3, #3
 8004266:	e004      	b.n	8004272 <HAL_GPIO_Init+0x1fa>
 8004268:	2302      	movs	r3, #2
 800426a:	e002      	b.n	8004272 <HAL_GPIO_Init+0x1fa>
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <HAL_GPIO_Init+0x1fa>
 8004270:	2300      	movs	r3, #0
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	f002 0203 	and.w	r2, r2, #3
 8004278:	0092      	lsls	r2, r2, #2
 800427a:	4093      	lsls	r3, r2
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004282:	4937      	ldr	r1, [pc, #220]	@ (8004360 <HAL_GPIO_Init+0x2e8>)
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	089b      	lsrs	r3, r3, #2
 8004288:	3302      	adds	r3, #2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004290:	4b39      	ldr	r3, [pc, #228]	@ (8004378 <HAL_GPIO_Init+0x300>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	43db      	mvns	r3, r3
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4013      	ands	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042b4:	4a30      	ldr	r2, [pc, #192]	@ (8004378 <HAL_GPIO_Init+0x300>)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004378 <HAL_GPIO_Init+0x300>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	43db      	mvns	r3, r3
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4013      	ands	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042de:	4a26      	ldr	r2, [pc, #152]	@ (8004378 <HAL_GPIO_Init+0x300>)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80042e4:	4b24      	ldr	r3, [pc, #144]	@ (8004378 <HAL_GPIO_Init+0x300>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	43db      	mvns	r3, r3
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4013      	ands	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004308:	4a1b      	ldr	r2, [pc, #108]	@ (8004378 <HAL_GPIO_Init+0x300>)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800430e:	4b1a      	ldr	r3, [pc, #104]	@ (8004378 <HAL_GPIO_Init+0x300>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	43db      	mvns	r3, r3
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4013      	ands	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004332:	4a11      	ldr	r2, [pc, #68]	@ (8004378 <HAL_GPIO_Init+0x300>)
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	3301      	adds	r3, #1
 800433c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	f47f ae9d 	bne.w	8004088 <HAL_GPIO_Init+0x10>
  }
}
 800434e:	bf00      	nop
 8004350:	bf00      	nop
 8004352:	371c      	adds	r7, #28
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	40021000 	.word	0x40021000
 8004360:	40010000 	.word	0x40010000
 8004364:	48000400 	.word	0x48000400
 8004368:	48000800 	.word	0x48000800
 800436c:	48000c00 	.word	0x48000c00
 8004370:	48001000 	.word	0x48001000
 8004374:	48001400 	.word	0x48001400
 8004378:	40010400 	.word	0x40010400

0800437c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	807b      	strh	r3, [r7, #2]
 8004388:	4613      	mov	r3, r2
 800438a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800438c:	787b      	ldrb	r3, [r7, #1]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004392:	887a      	ldrh	r2, [r7, #2]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004398:	e002      	b.n	80043a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800439a:	887a      	ldrh	r2, [r7, #2]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d141      	bne.n	800443e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043ba:	4b4b      	ldr	r3, [pc, #300]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c6:	d131      	bne.n	800442c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043c8:	4b47      	ldr	r3, [pc, #284]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ce:	4a46      	ldr	r2, [pc, #280]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043d8:	4b43      	ldr	r3, [pc, #268]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043e0:	4a41      	ldr	r2, [pc, #260]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043e8:	4b40      	ldr	r3, [pc, #256]	@ (80044ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2232      	movs	r2, #50	@ 0x32
 80043ee:	fb02 f303 	mul.w	r3, r2, r3
 80043f2:	4a3f      	ldr	r2, [pc, #252]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	0c9b      	lsrs	r3, r3, #18
 80043fa:	3301      	adds	r3, #1
 80043fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043fe:	e002      	b.n	8004406 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3b01      	subs	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004406:	4b38      	ldr	r3, [pc, #224]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800440e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004412:	d102      	bne.n	800441a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f2      	bne.n	8004400 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800441a:	4b33      	ldr	r3, [pc, #204]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004426:	d158      	bne.n	80044da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e057      	b.n	80044dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800442c:	4b2e      	ldr	r3, [pc, #184]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800442e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004432:	4a2d      	ldr	r2, [pc, #180]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004438:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800443c:	e04d      	b.n	80044da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004444:	d141      	bne.n	80044ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004446:	4b28      	ldr	r3, [pc, #160]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800444e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004452:	d131      	bne.n	80044b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004454:	4b24      	ldr	r3, [pc, #144]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800445a:	4a23      	ldr	r2, [pc, #140]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800445c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004460:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004464:	4b20      	ldr	r3, [pc, #128]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800446c:	4a1e      	ldr	r2, [pc, #120]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800446e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004472:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004474:	4b1d      	ldr	r3, [pc, #116]	@ (80044ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2232      	movs	r2, #50	@ 0x32
 800447a:	fb02 f303 	mul.w	r3, r2, r3
 800447e:	4a1c      	ldr	r2, [pc, #112]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004480:	fba2 2303 	umull	r2, r3, r2, r3
 8004484:	0c9b      	lsrs	r3, r3, #18
 8004486:	3301      	adds	r3, #1
 8004488:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800448a:	e002      	b.n	8004492 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3b01      	subs	r3, #1
 8004490:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004492:	4b15      	ldr	r3, [pc, #84]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800449e:	d102      	bne.n	80044a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f2      	bne.n	800448c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044a6:	4b10      	ldr	r3, [pc, #64]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044b2:	d112      	bne.n	80044da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e011      	b.n	80044dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044b8:	4b0b      	ldr	r3, [pc, #44]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044be:	4a0a      	ldr	r2, [pc, #40]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80044c8:	e007      	b.n	80044da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044ca:	4b07      	ldr	r3, [pc, #28]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044d2:	4a05      	ldr	r2, [pc, #20]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	40007000 	.word	0x40007000
 80044ec:	20000004 	.word	0x20000004
 80044f0:	431bde83 	.word	0x431bde83

080044f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80044f8:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	4a04      	ldr	r2, [pc, #16]	@ (8004510 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004502:	6093      	str	r3, [r2, #8]
}
 8004504:	bf00      	nop
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	40007000 	.word	0x40007000

08004514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e2fe      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d075      	beq.n	800461e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004532:	4b97      	ldr	r3, [pc, #604]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800453c:	4b94      	ldr	r3, [pc, #592]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b0c      	cmp	r3, #12
 800454a:	d102      	bne.n	8004552 <HAL_RCC_OscConfig+0x3e>
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2b03      	cmp	r3, #3
 8004550:	d002      	beq.n	8004558 <HAL_RCC_OscConfig+0x44>
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d10b      	bne.n	8004570 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004558:	4b8d      	ldr	r3, [pc, #564]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d05b      	beq.n	800461c <HAL_RCC_OscConfig+0x108>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d157      	bne.n	800461c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e2d9      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004578:	d106      	bne.n	8004588 <HAL_RCC_OscConfig+0x74>
 800457a:	4b85      	ldr	r3, [pc, #532]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a84      	ldr	r2, [pc, #528]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e01d      	b.n	80045c4 <HAL_RCC_OscConfig+0xb0>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004590:	d10c      	bne.n	80045ac <HAL_RCC_OscConfig+0x98>
 8004592:	4b7f      	ldr	r3, [pc, #508]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a7e      	ldr	r2, [pc, #504]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	4b7c      	ldr	r3, [pc, #496]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a7b      	ldr	r2, [pc, #492]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	e00b      	b.n	80045c4 <HAL_RCC_OscConfig+0xb0>
 80045ac:	4b78      	ldr	r3, [pc, #480]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a77      	ldr	r2, [pc, #476]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80045b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b75      	ldr	r3, [pc, #468]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a74      	ldr	r2, [pc, #464]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80045be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d013      	beq.n	80045f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045cc:	f7fe f990 	bl	80028f0 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d4:	f7fe f98c 	bl	80028f0 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b64      	cmp	r3, #100	@ 0x64
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e29e      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045e6:	4b6a      	ldr	r3, [pc, #424]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0xc0>
 80045f2:	e014      	b.n	800461e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fe f97c 	bl	80028f0 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045fc:	f7fe f978 	bl	80028f0 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b64      	cmp	r3, #100	@ 0x64
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e28a      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800460e:	4b60      	ldr	r3, [pc, #384]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0xe8>
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800461c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d075      	beq.n	8004716 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800462a:	4b59      	ldr	r3, [pc, #356]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004634:	4b56      	ldr	r3, [pc, #344]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b0c      	cmp	r3, #12
 8004642:	d102      	bne.n	800464a <HAL_RCC_OscConfig+0x136>
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d002      	beq.n	8004650 <HAL_RCC_OscConfig+0x13c>
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	2b04      	cmp	r3, #4
 800464e:	d11f      	bne.n	8004690 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004650:	4b4f      	ldr	r3, [pc, #316]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_OscConfig+0x154>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e25d      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004668:	4b49      	ldr	r3, [pc, #292]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	061b      	lsls	r3, r3, #24
 8004676:	4946      	ldr	r1, [pc, #280]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004678:	4313      	orrs	r3, r2
 800467a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800467c:	4b45      	ldr	r3, [pc, #276]	@ (8004794 <HAL_RCC_OscConfig+0x280>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f7fe f8e9 	bl	8002858 <HAL_InitTick>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d043      	beq.n	8004714 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e249      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d023      	beq.n	80046e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004698:	4b3d      	ldr	r3, [pc, #244]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a3c      	ldr	r2, [pc, #240]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 800469e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fe f924 	bl	80028f0 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ac:	f7fe f920 	bl	80028f0 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e232      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046be:	4b34      	ldr	r3, [pc, #208]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ca:	4b31      	ldr	r3, [pc, #196]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	061b      	lsls	r3, r3, #24
 80046d8:	492d      	ldr	r1, [pc, #180]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	604b      	str	r3, [r1, #4]
 80046de:	e01a      	b.n	8004716 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 80046e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fe f900 	bl	80028f0 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f4:	f7fe f8fc 	bl	80028f0 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e20e      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004706:	4b22      	ldr	r3, [pc, #136]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x1e0>
 8004712:	e000      	b.n	8004716 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004714:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d041      	beq.n	80047a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d01c      	beq.n	8004764 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800472a:	4b19      	ldr	r3, [pc, #100]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 800472c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004730:	4a17      	ldr	r2, [pc, #92]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473a:	f7fe f8d9 	bl	80028f0 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004742:	f7fe f8d5 	bl	80028f0 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e1e7      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004754:	4b0e      	ldr	r3, [pc, #56]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004756:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0ef      	beq.n	8004742 <HAL_RCC_OscConfig+0x22e>
 8004762:	e020      	b.n	80047a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004764:	4b0a      	ldr	r3, [pc, #40]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 8004766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800476a:	4a09      	ldr	r2, [pc, #36]	@ (8004790 <HAL_RCC_OscConfig+0x27c>)
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004774:	f7fe f8bc 	bl	80028f0 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800477a:	e00d      	b.n	8004798 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800477c:	f7fe f8b8 	bl	80028f0 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d906      	bls.n	8004798 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e1ca      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
 800478e:	bf00      	nop
 8004790:	40021000 	.word	0x40021000
 8004794:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004798:	4b8c      	ldr	r3, [pc, #560]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 800479a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1ea      	bne.n	800477c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 80a6 	beq.w	8004900 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047b4:	2300      	movs	r3, #0
 80047b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047b8:	4b84      	ldr	r3, [pc, #528]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 80047ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_OscConfig+0x2b4>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <HAL_RCC_OscConfig+0x2b6>
 80047c8:	2300      	movs	r3, #0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00d      	beq.n	80047ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ce:	4b7f      	ldr	r3, [pc, #508]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 80047d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d2:	4a7e      	ldr	r2, [pc, #504]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 80047d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80047da:	4b7c      	ldr	r3, [pc, #496]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 80047dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80047e6:	2301      	movs	r3, #1
 80047e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ea:	4b79      	ldr	r3, [pc, #484]	@ (80049d0 <HAL_RCC_OscConfig+0x4bc>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d118      	bne.n	8004828 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047f6:	4b76      	ldr	r3, [pc, #472]	@ (80049d0 <HAL_RCC_OscConfig+0x4bc>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a75      	ldr	r2, [pc, #468]	@ (80049d0 <HAL_RCC_OscConfig+0x4bc>)
 80047fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004802:	f7fe f875 	bl	80028f0 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480a:	f7fe f871 	bl	80028f0 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e183      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800481c:	4b6c      	ldr	r3, [pc, #432]	@ (80049d0 <HAL_RCC_OscConfig+0x4bc>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d108      	bne.n	8004842 <HAL_RCC_OscConfig+0x32e>
 8004830:	4b66      	ldr	r3, [pc, #408]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004836:	4a65      	ldr	r2, [pc, #404]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004840:	e024      	b.n	800488c <HAL_RCC_OscConfig+0x378>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b05      	cmp	r3, #5
 8004848:	d110      	bne.n	800486c <HAL_RCC_OscConfig+0x358>
 800484a:	4b60      	ldr	r3, [pc, #384]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 800484c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004850:	4a5e      	ldr	r2, [pc, #376]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004852:	f043 0304 	orr.w	r3, r3, #4
 8004856:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800485a:	4b5c      	ldr	r3, [pc, #368]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004860:	4a5a      	ldr	r2, [pc, #360]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800486a:	e00f      	b.n	800488c <HAL_RCC_OscConfig+0x378>
 800486c:	4b57      	ldr	r3, [pc, #348]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004872:	4a56      	ldr	r2, [pc, #344]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004874:	f023 0301 	bic.w	r3, r3, #1
 8004878:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800487c:	4b53      	ldr	r3, [pc, #332]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004882:	4a52      	ldr	r2, [pc, #328]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004884:	f023 0304 	bic.w	r3, r3, #4
 8004888:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d016      	beq.n	80048c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004894:	f7fe f82c 	bl	80028f0 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800489a:	e00a      	b.n	80048b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489c:	f7fe f828 	bl	80028f0 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e138      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b2:	4b46      	ldr	r3, [pc, #280]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 80048b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0ed      	beq.n	800489c <HAL_RCC_OscConfig+0x388>
 80048c0:	e015      	b.n	80048ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c2:	f7fe f815 	bl	80028f0 <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048c8:	e00a      	b.n	80048e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ca:	f7fe f811 	bl	80028f0 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d8:	4293      	cmp	r3, r2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e121      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048e0:	4b3a      	ldr	r3, [pc, #232]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1ed      	bne.n	80048ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048ee:	7ffb      	ldrb	r3, [r7, #31]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d105      	bne.n	8004900 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f4:	4b35      	ldr	r3, [pc, #212]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 80048f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f8:	4a34      	ldr	r2, [pc, #208]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 80048fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048fe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b00      	cmp	r3, #0
 800490a:	d03c      	beq.n	8004986 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d01c      	beq.n	800494e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004914:	4b2d      	ldr	r3, [pc, #180]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004916:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800491a:	4a2c      	ldr	r2, [pc, #176]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004924:	f7fd ffe4 	bl	80028f0 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800492c:	f7fd ffe0 	bl	80028f0 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e0f2      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800493e:	4b23      	ldr	r3, [pc, #140]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004940:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0ef      	beq.n	800492c <HAL_RCC_OscConfig+0x418>
 800494c:	e01b      	b.n	8004986 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800494e:	4b1f      	ldr	r3, [pc, #124]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004950:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004954:	4a1d      	ldr	r2, [pc, #116]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004956:	f023 0301 	bic.w	r3, r3, #1
 800495a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495e:	f7fd ffc7 	bl	80028f0 <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004966:	f7fd ffc3 	bl	80028f0 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e0d5      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004978:	4b14      	ldr	r3, [pc, #80]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 800497a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1ef      	bne.n	8004966 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 80c9 	beq.w	8004b22 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004990:	4b0e      	ldr	r3, [pc, #56]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	2b0c      	cmp	r3, #12
 800499a:	f000 8083 	beq.w	8004aa4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d15e      	bne.n	8004a64 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a6:	4b09      	ldr	r3, [pc, #36]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a08      	ldr	r2, [pc, #32]	@ (80049cc <HAL_RCC_OscConfig+0x4b8>)
 80049ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b2:	f7fd ff9d 	bl	80028f0 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b8:	e00c      	b.n	80049d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ba:	f7fd ff99 	bl	80028f0 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d905      	bls.n	80049d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e0ab      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
 80049cc:	40021000 	.word	0x40021000
 80049d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049d4:	4b55      	ldr	r3, [pc, #340]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1ec      	bne.n	80049ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049e0:	4b52      	ldr	r3, [pc, #328]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	4b52      	ldr	r3, [pc, #328]	@ (8004b30 <HAL_RCC_OscConfig+0x61c>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6a11      	ldr	r1, [r2, #32]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049f0:	3a01      	subs	r2, #1
 80049f2:	0112      	lsls	r2, r2, #4
 80049f4:	4311      	orrs	r1, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80049fa:	0212      	lsls	r2, r2, #8
 80049fc:	4311      	orrs	r1, r2
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a02:	0852      	lsrs	r2, r2, #1
 8004a04:	3a01      	subs	r2, #1
 8004a06:	0552      	lsls	r2, r2, #21
 8004a08:	4311      	orrs	r1, r2
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a0e:	0852      	lsrs	r2, r2, #1
 8004a10:	3a01      	subs	r2, #1
 8004a12:	0652      	lsls	r2, r2, #25
 8004a14:	4311      	orrs	r1, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a1a:	06d2      	lsls	r2, r2, #27
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	4943      	ldr	r1, [pc, #268]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a24:	4b41      	ldr	r3, [pc, #260]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a40      	ldr	r2, [pc, #256]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a2e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a30:	4b3e      	ldr	r3, [pc, #248]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4a3d      	ldr	r2, [pc, #244]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fd ff58 	bl	80028f0 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a44:	f7fd ff54 	bl	80028f0 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e066      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a56:	4b35      	ldr	r3, [pc, #212]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0x530>
 8004a62:	e05e      	b.n	8004b22 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a64:	4b31      	ldr	r3, [pc, #196]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a30      	ldr	r2, [pc, #192]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a70:	f7fd ff3e 	bl	80028f0 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a78:	f7fd ff3a 	bl	80028f0 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e04c      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a8a:	4b28      	ldr	r3, [pc, #160]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004a96:	4b25      	ldr	r3, [pc, #148]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	4924      	ldr	r1, [pc, #144]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004a9c:	4b25      	ldr	r3, [pc, #148]	@ (8004b34 <HAL_RCC_OscConfig+0x620>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	60cb      	str	r3, [r1, #12]
 8004aa2:	e03e      	b.n	8004b22 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e039      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8004b2c <HAL_RCC_OscConfig+0x618>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f003 0203 	and.w	r2, r3, #3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d12c      	bne.n	8004b1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d123      	bne.n	8004b1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d11b      	bne.n	8004b1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d113      	bne.n	8004b1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b00:	085b      	lsrs	r3, r3, #1
 8004b02:	3b01      	subs	r3, #1
 8004b04:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d109      	bne.n	8004b1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b14:	085b      	lsrs	r3, r3, #1
 8004b16:	3b01      	subs	r3, #1
 8004b18:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d001      	beq.n	8004b22 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3720      	adds	r7, #32
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	019f800c 	.word	0x019f800c
 8004b34:	feeefffc 	.word	0xfeeefffc

08004b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e11e      	b.n	8004d8e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b50:	4b91      	ldr	r3, [pc, #580]	@ (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 030f 	and.w	r3, r3, #15
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d910      	bls.n	8004b80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5e:	4b8e      	ldr	r3, [pc, #568]	@ (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f023 020f 	bic.w	r2, r3, #15
 8004b66:	498c      	ldr	r1, [pc, #560]	@ (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6e:	4b8a      	ldr	r3, [pc, #552]	@ (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d001      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e106      	b.n	8004d8e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d073      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d129      	bne.n	8004be8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b94:	4b81      	ldr	r3, [pc, #516]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0f4      	b.n	8004d8e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ba4:	f000 f99c 	bl	8004ee0 <RCC_GetSysClockFreqFromPLLSource>
 8004ba8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4a7c      	ldr	r2, [pc, #496]	@ (8004da0 <HAL_RCC_ClockConfig+0x268>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d93f      	bls.n	8004c32 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004bb2:	4b7a      	ldr	r3, [pc, #488]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d009      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d033      	beq.n	8004c32 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d12f      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bd2:	4b72      	ldr	r3, [pc, #456]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bda:	4a70      	ldr	r2, [pc, #448]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004bdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004be0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004be2:	2380      	movs	r3, #128	@ 0x80
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	e024      	b.n	8004c32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d107      	bne.n	8004c00 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bf0:	4b6a      	ldr	r3, [pc, #424]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d109      	bne.n	8004c10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e0c6      	b.n	8004d8e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c00:	4b66      	ldr	r3, [pc, #408]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e0be      	b.n	8004d8e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004c10:	f000 f8ce 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 8004c14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	4a61      	ldr	r2, [pc, #388]	@ (8004da0 <HAL_RCC_ClockConfig+0x268>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d909      	bls.n	8004c32 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c1e:	4b5f      	ldr	r3, [pc, #380]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c26:	4a5d      	ldr	r2, [pc, #372]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c2c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c2e:	2380      	movs	r3, #128	@ 0x80
 8004c30:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c32:	4b5a      	ldr	r3, [pc, #360]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f023 0203 	bic.w	r2, r3, #3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	4957      	ldr	r1, [pc, #348]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c44:	f7fd fe54 	bl	80028f0 <HAL_GetTick>
 8004c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4a:	e00a      	b.n	8004c62 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c4c:	f7fd fe50 	bl	80028f0 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e095      	b.n	8004d8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c62:	4b4e      	ldr	r3, [pc, #312]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 020c 	and.w	r2, r3, #12
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d1eb      	bne.n	8004c4c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d023      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c8c:	4b43      	ldr	r3, [pc, #268]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	4a42      	ldr	r2, [pc, #264]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004c92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c96:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d007      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004ca4:	4b3d      	ldr	r3, [pc, #244]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004cac:	4a3b      	ldr	r2, [pc, #236]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004cae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004cb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb4:	4b39      	ldr	r3, [pc, #228]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4936      	ldr	r1, [pc, #216]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	608b      	str	r3, [r1, #8]
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2b80      	cmp	r3, #128	@ 0x80
 8004ccc:	d105      	bne.n	8004cda <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004cce:	4b33      	ldr	r3, [pc, #204]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	4a32      	ldr	r2, [pc, #200]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004cd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cd8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cda:	4b2f      	ldr	r3, [pc, #188]	@ (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d21d      	bcs.n	8004d24 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f023 020f 	bic.w	r2, r3, #15
 8004cf0:	4929      	ldr	r1, [pc, #164]	@ (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004cf8:	f7fd fdfa 	bl	80028f0 <HAL_GetTick>
 8004cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfe:	e00a      	b.n	8004d16 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d00:	f7fd fdf6 	bl	80028f0 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e03b      	b.n	8004d8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d16:	4b20      	ldr	r3, [pc, #128]	@ (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d1ed      	bne.n	8004d00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d30:	4b1a      	ldr	r3, [pc, #104]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	4917      	ldr	r1, [pc, #92]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d4e:	4b13      	ldr	r3, [pc, #76]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	490f      	ldr	r1, [pc, #60]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d62:	f000 f825 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 8004d66:	4602      	mov	r2, r0
 8004d68:	4b0c      	ldr	r3, [pc, #48]	@ (8004d9c <HAL_RCC_ClockConfig+0x264>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	490c      	ldr	r1, [pc, #48]	@ (8004da4 <HAL_RCC_ClockConfig+0x26c>)
 8004d74:	5ccb      	ldrb	r3, [r1, r3]
 8004d76:	f003 031f 	and.w	r3, r3, #31
 8004d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004da8 <HAL_RCC_ClockConfig+0x270>)
 8004d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004d82:	4b0a      	ldr	r3, [pc, #40]	@ (8004dac <HAL_RCC_ClockConfig+0x274>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fd fd66 	bl	8002858 <HAL_InitTick>
 8004d8c:	4603      	mov	r3, r0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40022000 	.word	0x40022000
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	04c4b400 	.word	0x04c4b400
 8004da4:	0800ef18 	.word	0x0800ef18
 8004da8:	20000004 	.word	0x20000004
 8004dac:	20000008 	.word	0x20000008

08004db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004db6:	4b2c      	ldr	r3, [pc, #176]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 030c 	and.w	r3, r3, #12
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d102      	bne.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	e047      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004dc8:	4b27      	ldr	r3, [pc, #156]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 030c 	and.w	r3, r3, #12
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d102      	bne.n	8004dda <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dd4:	4b25      	ldr	r3, [pc, #148]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	e03e      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004dda:	4b23      	ldr	r3, [pc, #140]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 030c 	and.w	r3, r3, #12
 8004de2:	2b0c      	cmp	r3, #12
 8004de4:	d136      	bne.n	8004e54 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004de6:	4b20      	ldr	r3, [pc, #128]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004df0:	4b1d      	ldr	r3, [pc, #116]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	091b      	lsrs	r3, r3, #4
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d10c      	bne.n	8004e1e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e04:	4a19      	ldr	r2, [pc, #100]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0c:	4a16      	ldr	r2, [pc, #88]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e0e:	68d2      	ldr	r2, [r2, #12]
 8004e10:	0a12      	lsrs	r2, r2, #8
 8004e12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e16:	fb02 f303 	mul.w	r3, r2, r3
 8004e1a:	617b      	str	r3, [r7, #20]
      break;
 8004e1c:	e00c      	b.n	8004e38 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e1e:	4a13      	ldr	r2, [pc, #76]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e26:	4a10      	ldr	r2, [pc, #64]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e28:	68d2      	ldr	r2, [r2, #12]
 8004e2a:	0a12      	lsrs	r2, r2, #8
 8004e2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e30:	fb02 f303 	mul.w	r3, r2, r3
 8004e34:	617b      	str	r3, [r7, #20]
      break;
 8004e36:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e38:	4b0b      	ldr	r3, [pc, #44]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	0e5b      	lsrs	r3, r3, #25
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	3301      	adds	r3, #1
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	e001      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e58:	693b      	ldr	r3, [r7, #16]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	00f42400 	.word	0x00f42400

08004e70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e74:	4b03      	ldr	r3, [pc, #12]	@ (8004e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e76:	681b      	ldr	r3, [r3, #0]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	20000004 	.word	0x20000004

08004e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e8c:	f7ff fff0 	bl	8004e70 <HAL_RCC_GetHCLKFreq>
 8004e90:	4602      	mov	r2, r0
 8004e92:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	0a1b      	lsrs	r3, r3, #8
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	4904      	ldr	r1, [pc, #16]	@ (8004eb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ea0:	f003 031f 	and.w	r3, r3, #31
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	0800ef28 	.word	0x0800ef28

08004eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004eb8:	f7ff ffda 	bl	8004e70 <HAL_RCC_GetHCLKFreq>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	4b06      	ldr	r3, [pc, #24]	@ (8004ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	0adb      	lsrs	r3, r3, #11
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	4904      	ldr	r1, [pc, #16]	@ (8004edc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004eca:	5ccb      	ldrb	r3, [r1, r3]
 8004ecc:	f003 031f 	and.w	r3, r3, #31
 8004ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	0800ef28 	.word	0x0800ef28

08004ee0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	091b      	lsrs	r3, r3, #4
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	3301      	adds	r3, #1
 8004efc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d10c      	bne.n	8004f1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f04:	4a17      	ldr	r2, [pc, #92]	@ (8004f64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0c:	4a14      	ldr	r2, [pc, #80]	@ (8004f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f0e:	68d2      	ldr	r2, [r2, #12]
 8004f10:	0a12      	lsrs	r2, r2, #8
 8004f12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
 8004f1a:	617b      	str	r3, [r7, #20]
    break;
 8004f1c:	e00c      	b.n	8004f38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f1e:	4a11      	ldr	r2, [pc, #68]	@ (8004f64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f26:	4a0e      	ldr	r2, [pc, #56]	@ (8004f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f28:	68d2      	ldr	r2, [r2, #12]
 8004f2a:	0a12      	lsrs	r2, r2, #8
 8004f2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f30:	fb02 f303 	mul.w	r3, r2, r3
 8004f34:	617b      	str	r3, [r7, #20]
    break;
 8004f36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f38:	4b09      	ldr	r3, [pc, #36]	@ (8004f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	0e5b      	lsrs	r3, r3, #25
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	3301      	adds	r3, #1
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004f52:	687b      	ldr	r3, [r7, #4]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	40021000 	.word	0x40021000
 8004f64:	00f42400 	.word	0x00f42400

08004f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f70:	2300      	movs	r3, #0
 8004f72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f74:	2300      	movs	r3, #0
 8004f76:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 8098 	beq.w	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f86:	2300      	movs	r3, #0
 8004f88:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f8a:	4b43      	ldr	r3, [pc, #268]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10d      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f96:	4b40      	ldr	r3, [pc, #256]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9a:	4a3f      	ldr	r2, [pc, #252]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fa2:	4b3d      	ldr	r3, [pc, #244]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004faa:	60bb      	str	r3, [r7, #8]
 8004fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fb2:	4b3a      	ldr	r3, [pc, #232]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a39      	ldr	r2, [pc, #228]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fbe:	f7fd fc97 	bl	80028f0 <HAL_GetTick>
 8004fc2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fc4:	e009      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc6:	f7fd fc93 	bl	80028f0 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d902      	bls.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	74fb      	strb	r3, [r7, #19]
        break;
 8004fd8:	e005      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fda:	4b30      	ldr	r3, [pc, #192]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0ef      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004fe6:	7cfb      	ldrb	r3, [r7, #19]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d159      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fec:	4b2a      	ldr	r3, [pc, #168]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ff6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d01e      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	429a      	cmp	r2, r3
 8005006:	d019      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005008:	4b23      	ldr	r3, [pc, #140]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800500e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005012:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005014:	4b20      	ldr	r3, [pc, #128]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501a:	4a1f      	ldr	r2, [pc, #124]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800501c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005024:	4b1c      	ldr	r3, [pc, #112]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800502a:	4a1b      	ldr	r2, [pc, #108]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800502c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005034:	4a18      	ldr	r2, [pc, #96]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d016      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005046:	f7fd fc53 	bl	80028f0 <HAL_GetTick>
 800504a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800504c:	e00b      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800504e:	f7fd fc4f 	bl	80028f0 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800505c:	4293      	cmp	r3, r2
 800505e:	d902      	bls.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	74fb      	strb	r3, [r7, #19]
            break;
 8005064:	e006      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005066:	4b0c      	ldr	r3, [pc, #48]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0ec      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005074:	7cfb      	ldrb	r3, [r7, #19]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10b      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800507a:	4b07      	ldr	r3, [pc, #28]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800507c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005080:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005088:	4903      	ldr	r1, [pc, #12]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800508a:	4313      	orrs	r3, r2
 800508c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005090:	e008      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005092:	7cfb      	ldrb	r3, [r7, #19]
 8005094:	74bb      	strb	r3, [r7, #18]
 8005096:	e005      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005098:	40021000 	.word	0x40021000
 800509c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a0:	7cfb      	ldrb	r3, [r7, #19]
 80050a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050a4:	7c7b      	ldrb	r3, [r7, #17]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d105      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050aa:	4ba6      	ldr	r3, [pc, #664]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ae:	4aa5      	ldr	r2, [pc, #660]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050c2:	4ba0      	ldr	r3, [pc, #640]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c8:	f023 0203 	bic.w	r2, r3, #3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	499c      	ldr	r1, [pc, #624]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050e4:	4b97      	ldr	r3, [pc, #604]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ea:	f023 020c 	bic.w	r2, r3, #12
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	4994      	ldr	r1, [pc, #592]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0304 	and.w	r3, r3, #4
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005106:	4b8f      	ldr	r3, [pc, #572]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	498b      	ldr	r1, [pc, #556]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005128:	4b86      	ldr	r3, [pc, #536]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	4983      	ldr	r1, [pc, #524]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0320 	and.w	r3, r3, #32
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800514a:	4b7e      	ldr	r3, [pc, #504]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005150:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	497a      	ldr	r1, [pc, #488]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800516c:	4b75      	ldr	r3, [pc, #468]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005172:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	4972      	ldr	r1, [pc, #456]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800517c:	4313      	orrs	r3, r2
 800517e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800518e:	4b6d      	ldr	r3, [pc, #436]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005194:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	4969      	ldr	r1, [pc, #420]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051b0:	4b64      	ldr	r3, [pc, #400]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	4961      	ldr	r1, [pc, #388]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051d2:	4b5c      	ldr	r3, [pc, #368]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e0:	4958      	ldr	r1, [pc, #352]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d015      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051f4:	4b53      	ldr	r3, [pc, #332]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005202:	4950      	ldr	r1, [pc, #320]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005212:	d105      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005214:	4b4b      	ldr	r3, [pc, #300]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	4a4a      	ldr	r2, [pc, #296]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800521a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800521e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005228:	2b00      	cmp	r3, #0
 800522a:	d015      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800522c:	4b45      	ldr	r3, [pc, #276]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005232:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523a:	4942      	ldr	r1, [pc, #264]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800523c:	4313      	orrs	r3, r2
 800523e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005246:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800524a:	d105      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800524c:	4b3d      	ldr	r3, [pc, #244]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	4a3c      	ldr	r2, [pc, #240]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005256:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d015      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005264:	4b37      	ldr	r3, [pc, #220]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800526a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005272:	4934      	ldr	r1, [pc, #208]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005282:	d105      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005284:	4b2f      	ldr	r3, [pc, #188]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	4a2e      	ldr	r2, [pc, #184]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800528a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800528e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d015      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800529c:	4b29      	ldr	r3, [pc, #164]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800529e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052aa:	4926      	ldr	r1, [pc, #152]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052ba:	d105      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052bc:	4b21      	ldr	r3, [pc, #132]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	4a20      	ldr	r2, [pc, #128]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d015      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e2:	4918      	ldr	r1, [pc, #96]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052f2:	d105      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052f4:	4b13      	ldr	r3, [pc, #76]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4a12      	ldr	r2, [pc, #72]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d015      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800530c:	4b0d      	ldr	r3, [pc, #52]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005312:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800531a:	490a      	ldr	r1, [pc, #40]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005326:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800532a:	d105      	bne.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800532c:	4b05      	ldr	r3, [pc, #20]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	4a04      	ldr	r2, [pc, #16]	@ (8005344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005332:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005336:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005338:	7cbb      	ldrb	r3, [r7, #18]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	40021000 	.word	0x40021000

08005348 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e09d      	b.n	8005496 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535e:	2b00      	cmp	r3, #0
 8005360:	d108      	bne.n	8005374 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800536a:	d009      	beq.n	8005380 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	61da      	str	r2, [r3, #28]
 8005372:	e005      	b.n	8005380 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fc fa66 	bl	800186c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053c0:	d902      	bls.n	80053c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	e002      	b.n	80053ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80053d6:	d007      	beq.n	80053e8 <HAL_SPI_Init+0xa0>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053e0:	d002      	beq.n	80053e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80053f8:	431a      	orrs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	431a      	orrs	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005420:	431a      	orrs	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800542a:	ea42 0103 	orr.w	r1, r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005432:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	0c1b      	lsrs	r3, r3, #16
 8005444:	f003 0204 	and.w	r2, r3, #4
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005464:	ea42 0103 	orr.w	r1, r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69da      	ldr	r2, [r3, #28]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005484:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b088      	sub	sp, #32
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	603b      	str	r3, [r7, #0]
 80054aa:	4613      	mov	r3, r2
 80054ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054ae:	2300      	movs	r3, #0
 80054b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_SPI_Transmit+0x22>
 80054bc:	2302      	movs	r3, #2
 80054be:	e15f      	b.n	8005780 <HAL_SPI_Transmit+0x2e2>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054c8:	f7fd fa12 	bl	80028f0 <HAL_GetTick>
 80054cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054ce:	88fb      	ldrh	r3, [r7, #6]
 80054d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d002      	beq.n	80054e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054de:	2302      	movs	r3, #2
 80054e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054e2:	e148      	b.n	8005776 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <HAL_SPI_Transmit+0x52>
 80054ea:	88fb      	ldrh	r3, [r7, #6]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d102      	bne.n	80054f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054f4:	e13f      	b.n	8005776 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2203      	movs	r2, #3
 80054fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	88fa      	ldrh	r2, [r7, #6]
 800550e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	88fa      	ldrh	r2, [r7, #6]
 8005514:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005540:	d10f      	bne.n	8005562 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005550:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005560:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800556c:	2b40      	cmp	r3, #64	@ 0x40
 800556e:	d007      	beq.n	8005580 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800557e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005588:	d94f      	bls.n	800562a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_SPI_Transmit+0xfa>
 8005592:	8afb      	ldrh	r3, [r7, #22]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d142      	bne.n	800561e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559c:	881a      	ldrh	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a8:	1c9a      	adds	r2, r3, #2
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055bc:	e02f      	b.n	800561e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d112      	bne.n	80055f2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d0:	881a      	ldrh	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055dc:	1c9a      	adds	r2, r3, #2
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055f0:	e015      	b.n	800561e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055f2:	f7fd f97d 	bl	80028f0 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d803      	bhi.n	800560a <HAL_SPI_Transmit+0x16c>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005608:	d102      	bne.n	8005610 <HAL_SPI_Transmit+0x172>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d106      	bne.n	800561e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800561c:	e0ab      	b.n	8005776 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005622:	b29b      	uxth	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1ca      	bne.n	80055be <HAL_SPI_Transmit+0x120>
 8005628:	e080      	b.n	800572c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <HAL_SPI_Transmit+0x19a>
 8005632:	8afb      	ldrh	r3, [r7, #22]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d174      	bne.n	8005722 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b01      	cmp	r3, #1
 8005640:	d912      	bls.n	8005668 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005646:	881a      	ldrh	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005652:	1c9a      	adds	r2, r3, #2
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b02      	subs	r3, #2
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005666:	e05c      	b.n	8005722 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	330c      	adds	r3, #12
 8005672:	7812      	ldrb	r2, [r2, #0]
 8005674:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005684:	b29b      	uxth	r3, r3
 8005686:	3b01      	subs	r3, #1
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800568e:	e048      	b.n	8005722 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b02      	cmp	r3, #2
 800569c:	d12b      	bne.n	80056f6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d912      	bls.n	80056ce <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ac:	881a      	ldrh	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b8:	1c9a      	adds	r2, r3, #2
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	3b02      	subs	r3, #2
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056cc:	e029      	b.n	8005722 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	330c      	adds	r3, #12
 80056d8:	7812      	ldrb	r2, [r2, #0]
 80056da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056f4:	e015      	b.n	8005722 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056f6:	f7fd f8fb 	bl	80028f0 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d803      	bhi.n	800570e <HAL_SPI_Transmit+0x270>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570c:	d102      	bne.n	8005714 <HAL_SPI_Transmit+0x276>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d106      	bne.n	8005722 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005720:	e029      	b.n	8005776 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005726:	b29b      	uxth	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1b1      	bne.n	8005690 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	6839      	ldr	r1, [r7, #0]
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 fcf9 	bl	8006128 <SPI_EndRxTxTransaction>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2220      	movs	r2, #32
 8005740:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10a      	bne.n	8005760 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800574a:	2300      	movs	r3, #0
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	77fb      	strb	r3, [r7, #31]
 800576c:	e003      	b.n	8005776 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800577e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3720      	adds	r7, #32
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af02      	add	r7, sp, #8
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	603b      	str	r3, [r7, #0]
 8005794:	4613      	mov	r3, r2
 8005796:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005798:	2300      	movs	r3, #0
 800579a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d002      	beq.n	80057ae <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80057a8:	2302      	movs	r3, #2
 80057aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057ac:	e11a      	b.n	80059e4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057b6:	d112      	bne.n	80057de <HAL_SPI_Receive+0x56>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10e      	bne.n	80057de <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2204      	movs	r2, #4
 80057c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80057c8:	88fa      	ldrh	r2, [r7, #6]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	4613      	mov	r3, r2
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 f90e 	bl	80059f6 <HAL_SPI_TransmitReceive>
 80057da:	4603      	mov	r3, r0
 80057dc:	e107      	b.n	80059ee <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_SPI_Receive+0x64>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e100      	b.n	80059ee <HAL_SPI_Receive+0x266>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057f4:	f7fd f87c 	bl	80028f0 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <HAL_SPI_Receive+0x7e>
 8005800:	88fb      	ldrh	r3, [r7, #6]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d102      	bne.n	800580c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	75fb      	strb	r3, [r7, #23]
    goto error;
 800580a:	e0eb      	b.n	80059e4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2204      	movs	r2, #4
 8005810:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	88fa      	ldrh	r2, [r7, #6]
 8005824:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	88fa      	ldrh	r2, [r7, #6]
 800582c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005856:	d908      	bls.n	800586a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005866:	605a      	str	r2, [r3, #4]
 8005868:	e007      	b.n	800587a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005878:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005882:	d10f      	bne.n	80058a4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005892:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80058a2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ae:	2b40      	cmp	r3, #64	@ 0x40
 80058b0:	d007      	beq.n	80058c2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058c0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058ca:	d86f      	bhi.n	80059ac <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80058cc:	e034      	b.n	8005938 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d117      	bne.n	800590c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f103 020c 	add.w	r2, r3, #12
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e8:	7812      	ldrb	r2, [r2, #0]
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800590a:	e015      	b.n	8005938 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800590c:	f7fc fff0 	bl	80028f0 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	429a      	cmp	r2, r3
 800591a:	d803      	bhi.n	8005924 <HAL_SPI_Receive+0x19c>
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005922:	d102      	bne.n	800592a <HAL_SPI_Receive+0x1a2>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005936:	e055      	b.n	80059e4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800593e:	b29b      	uxth	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1c4      	bne.n	80058ce <HAL_SPI_Receive+0x146>
 8005944:	e038      	b.n	80059b8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b01      	cmp	r3, #1
 8005952:	d115      	bne.n	8005980 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595e:	b292      	uxth	r2, r2
 8005960:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005966:	1c9a      	adds	r2, r3, #2
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800597e:	e015      	b.n	80059ac <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005980:	f7fc ffb6 	bl	80028f0 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d803      	bhi.n	8005998 <HAL_SPI_Receive+0x210>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005996:	d102      	bne.n	800599e <HAL_SPI_Receive+0x216>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80059aa:	e01b      	b.n	80059e4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1c6      	bne.n	8005946 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 fb5b 	bl	8006078 <SPI_EndRxTransaction>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2220      	movs	r2, #32
 80059cc:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	75fb      	strb	r3, [r7, #23]
 80059da:	e003      	b.n	80059e4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80059ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b08a      	sub	sp, #40	@ 0x28
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	607a      	str	r2, [r7, #4]
 8005a02:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a04:	2301      	movs	r3, #1
 8005a06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d101      	bne.n	8005a1c <HAL_SPI_TransmitReceive+0x26>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	e20a      	b.n	8005e32 <HAL_SPI_TransmitReceive+0x43c>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a24:	f7fc ff64 	bl	80028f0 <HAL_GetTick>
 8005a28:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a30:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005a38:	887b      	ldrh	r3, [r7, #2]
 8005a3a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005a3c:	887b      	ldrh	r3, [r7, #2]
 8005a3e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a40:	7efb      	ldrb	r3, [r7, #27]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d00e      	beq.n	8005a64 <HAL_SPI_TransmitReceive+0x6e>
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a4c:	d106      	bne.n	8005a5c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d102      	bne.n	8005a5c <HAL_SPI_TransmitReceive+0x66>
 8005a56:	7efb      	ldrb	r3, [r7, #27]
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d003      	beq.n	8005a64 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005a62:	e1e0      	b.n	8005e26 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d005      	beq.n	8005a76 <HAL_SPI_TransmitReceive+0x80>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <HAL_SPI_TransmitReceive+0x80>
 8005a70:	887b      	ldrh	r3, [r7, #2]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d103      	bne.n	8005a7e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005a7c:	e1d3      	b.n	8005e26 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d003      	beq.n	8005a92 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2205      	movs	r2, #5
 8005a8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	887a      	ldrh	r2, [r7, #2]
 8005aa2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	887a      	ldrh	r2, [r7, #2]
 8005aaa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	887a      	ldrh	r2, [r7, #2]
 8005ab8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	887a      	ldrh	r2, [r7, #2]
 8005abe:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ad4:	d802      	bhi.n	8005adc <HAL_SPI_TransmitReceive+0xe6>
 8005ad6:	8a3b      	ldrh	r3, [r7, #16]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d908      	bls.n	8005aee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005aea:	605a      	str	r2, [r3, #4]
 8005aec:	e007      	b.n	8005afe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005afc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b08:	2b40      	cmp	r3, #64	@ 0x40
 8005b0a:	d007      	beq.n	8005b1c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b24:	f240 8081 	bls.w	8005c2a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <HAL_SPI_TransmitReceive+0x140>
 8005b30:	8a7b      	ldrh	r3, [r7, #18]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d16d      	bne.n	8005c12 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3a:	881a      	ldrh	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b46:	1c9a      	adds	r2, r3, #2
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b5a:	e05a      	b.n	8005c12 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d11b      	bne.n	8005ba2 <HAL_SPI_TransmitReceive+0x1ac>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d016      	beq.n	8005ba2 <HAL_SPI_TransmitReceive+0x1ac>
 8005b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d113      	bne.n	8005ba2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7e:	881a      	ldrh	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8a:	1c9a      	adds	r2, r3, #2
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	3b01      	subs	r3, #1
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d11c      	bne.n	8005bea <HAL_SPI_TransmitReceive+0x1f4>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d016      	beq.n	8005bea <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc6:	b292      	uxth	r2, r2
 8005bc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bce:	1c9a      	adds	r2, r3, #2
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005be6:	2301      	movs	r3, #1
 8005be8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bea:	f7fc fe81 	bl	80028f0 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d80b      	bhi.n	8005c12 <HAL_SPI_TransmitReceive+0x21c>
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c00:	d007      	beq.n	8005c12 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005c10:	e109      	b.n	8005e26 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d19f      	bne.n	8005b5c <HAL_SPI_TransmitReceive+0x166>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d199      	bne.n	8005b5c <HAL_SPI_TransmitReceive+0x166>
 8005c28:	e0e3      	b.n	8005df2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_SPI_TransmitReceive+0x244>
 8005c32:	8a7b      	ldrh	r3, [r7, #18]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	f040 80cf 	bne.w	8005dd8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d912      	bls.n	8005c6a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c48:	881a      	ldrh	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c54:	1c9a      	adds	r2, r3, #2
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b02      	subs	r3, #2
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c68:	e0b6      	b.n	8005dd8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	330c      	adds	r3, #12
 8005c74:	7812      	ldrb	r2, [r2, #0]
 8005c76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c90:	e0a2      	b.n	8005dd8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d134      	bne.n	8005d0a <HAL_SPI_TransmitReceive+0x314>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d02f      	beq.n	8005d0a <HAL_SPI_TransmitReceive+0x314>
 8005caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d12c      	bne.n	8005d0a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d912      	bls.n	8005ce0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cbe:	881a      	ldrh	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cca:	1c9a      	adds	r2, r3, #2
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3b02      	subs	r3, #2
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cde:	e012      	b.n	8005d06 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	330c      	adds	r3, #12
 8005cea:	7812      	ldrb	r2, [r2, #0]
 8005cec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d148      	bne.n	8005daa <HAL_SPI_TransmitReceive+0x3b4>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d042      	beq.n	8005daa <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d923      	bls.n	8005d78 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3a:	b292      	uxth	r2, r2
 8005d3c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d42:	1c9a      	adds	r2, r3, #2
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	3b02      	subs	r3, #2
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d81f      	bhi.n	8005da6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d74:	605a      	str	r2, [r3, #4]
 8005d76:	e016      	b.n	8005da6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f103 020c 	add.w	r2, r3, #12
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d84:	7812      	ldrb	r2, [r2, #0]
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005da6:	2301      	movs	r3, #1
 8005da8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005daa:	f7fc fda1 	bl	80028f0 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d803      	bhi.n	8005dc2 <HAL_SPI_TransmitReceive+0x3cc>
 8005dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc0:	d102      	bne.n	8005dc8 <HAL_SPI_TransmitReceive+0x3d2>
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d107      	bne.n	8005dd8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005dd6:	e026      	b.n	8005e26 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f47f af57 	bne.w	8005c92 <HAL_SPI_TransmitReceive+0x29c>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f47f af50 	bne.w	8005c92 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005df2:	69fa      	ldr	r2, [r7, #28]
 8005df4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f000 f996 	bl	8006128 <SPI_EndRxTxTransaction>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d005      	beq.n	8005e0e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e1c:	e003      	b.n	8005e26 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005e2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3728      	adds	r7, #40	@ 0x28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
	...

08005e3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	603b      	str	r3, [r7, #0]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e4c:	f7fc fd50 	bl	80028f0 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e54:	1a9b      	subs	r3, r3, r2
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	4413      	add	r3, r2
 8005e5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e5c:	f7fc fd48 	bl	80028f0 <HAL_GetTick>
 8005e60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e62:	4b39      	ldr	r3, [pc, #228]	@ (8005f48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	015b      	lsls	r3, r3, #5
 8005e68:	0d1b      	lsrs	r3, r3, #20
 8005e6a:	69fa      	ldr	r2, [r7, #28]
 8005e6c:	fb02 f303 	mul.w	r3, r2, r3
 8005e70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e72:	e054      	b.n	8005f1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7a:	d050      	beq.n	8005f1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e7c:	f7fc fd38 	bl	80028f0 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	69fa      	ldr	r2, [r7, #28]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d902      	bls.n	8005e92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d13d      	bne.n	8005f0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ea0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005eaa:	d111      	bne.n	8005ed0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005eb4:	d004      	beq.n	8005ec0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ebe:	d107      	bne.n	8005ed0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ece:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ed8:	d10f      	bne.n	8005efa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ef8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e017      	b.n	8005f3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4013      	ands	r3, r2
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	bf0c      	ite	eq
 8005f2e:	2301      	moveq	r3, #1
 8005f30:	2300      	movne	r3, #0
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	461a      	mov	r2, r3
 8005f36:	79fb      	ldrb	r3, [r7, #7]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d19b      	bne.n	8005e74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3720      	adds	r7, #32
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000004 	.word	0x20000004

08005f4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08a      	sub	sp, #40	@ 0x28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f5e:	f7fc fcc7 	bl	80028f0 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f66:	1a9b      	subs	r3, r3, r2
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005f6e:	f7fc fcbf 	bl	80028f0 <HAL_GetTick>
 8005f72:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f7c:	4b3d      	ldr	r3, [pc, #244]	@ (8006074 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	00da      	lsls	r2, r3, #3
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	0d1b      	lsrs	r3, r3, #20
 8005f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f8e:	fb02 f303 	mul.w	r3, r2, r3
 8005f92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f94:	e060      	b.n	8006058 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005f9c:	d107      	bne.n	8005fae <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d104      	bne.n	8005fae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005fac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb4:	d050      	beq.n	8006058 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fb6:	f7fc fc9b 	bl	80028f0 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d902      	bls.n	8005fcc <SPI_WaitFifoStateUntilTimeout+0x80>
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d13d      	bne.n	8006048 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fe4:	d111      	bne.n	800600a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fee:	d004      	beq.n	8005ffa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ff8:	d107      	bne.n	800600a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006008:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800600e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006012:	d10f      	bne.n	8006034 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006032:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e010      	b.n	800606a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	3b01      	subs	r3, #1
 8006056:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4013      	ands	r3, r2
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	429a      	cmp	r2, r3
 8006066:	d196      	bne.n	8005f96 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3728      	adds	r7, #40	@ 0x28
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20000004 	.word	0x20000004

08006078 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af02      	add	r7, sp, #8
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800608c:	d111      	bne.n	80060b2 <SPI_EndRxTransaction+0x3a>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006096:	d004      	beq.n	80060a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060a0:	d107      	bne.n	80060b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060b0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2200      	movs	r2, #0
 80060ba:	2180      	movs	r1, #128	@ 0x80
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f7ff febd 	bl	8005e3c <SPI_WaitFlagStateUntilTimeout>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d007      	beq.n	80060d8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060cc:	f043 0220 	orr.w	r2, r3, #32
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e023      	b.n	8006120 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060e0:	d11d      	bne.n	800611e <SPI_EndRxTransaction+0xa6>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060ea:	d004      	beq.n	80060f6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060f4:	d113      	bne.n	800611e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f7ff ff22 	bl	8005f4c <SPI_WaitFifoStateUntilTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d007      	beq.n	800611e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006112:	f043 0220 	orr.w	r2, r3, #32
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e000      	b.n	8006120 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af02      	add	r7, sp, #8
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2200      	movs	r2, #0
 800613c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff ff03 	bl	8005f4c <SPI_WaitFifoStateUntilTimeout>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d007      	beq.n	800615c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006150:	f043 0220 	orr.w	r2, r3, #32
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e027      	b.n	80061ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2200      	movs	r2, #0
 8006164:	2180      	movs	r1, #128	@ 0x80
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f7ff fe68 	bl	8005e3c <SPI_WaitFlagStateUntilTimeout>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d007      	beq.n	8006182 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006176:	f043 0220 	orr.w	r2, r3, #32
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e014      	b.n	80061ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2200      	movs	r2, #0
 800618a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f7ff fedc 	bl	8005f4c <SPI_WaitFifoStateUntilTimeout>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d007      	beq.n	80061aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800619e:	f043 0220 	orr.w	r2, r3, #32
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e000      	b.n	80061ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e049      	b.n	800625a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7fb ff8e 	bl	80020fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3304      	adds	r3, #4
 80061f0:	4619      	mov	r1, r3
 80061f2:	4610      	mov	r0, r2
 80061f4:	f000 faf0 	bl	80067d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d109      	bne.n	8006288 <HAL_TIM_PWM_Start+0x24>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b01      	cmp	r3, #1
 800627e:	bf14      	ite	ne
 8006280:	2301      	movne	r3, #1
 8006282:	2300      	moveq	r3, #0
 8006284:	b2db      	uxtb	r3, r3
 8006286:	e03c      	b.n	8006302 <HAL_TIM_PWM_Start+0x9e>
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b04      	cmp	r3, #4
 800628c:	d109      	bne.n	80062a2 <HAL_TIM_PWM_Start+0x3e>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b01      	cmp	r3, #1
 8006298:	bf14      	ite	ne
 800629a:	2301      	movne	r3, #1
 800629c:	2300      	moveq	r3, #0
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	e02f      	b.n	8006302 <HAL_TIM_PWM_Start+0x9e>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d109      	bne.n	80062bc <HAL_TIM_PWM_Start+0x58>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	bf14      	ite	ne
 80062b4:	2301      	movne	r3, #1
 80062b6:	2300      	moveq	r3, #0
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	e022      	b.n	8006302 <HAL_TIM_PWM_Start+0x9e>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b0c      	cmp	r3, #12
 80062c0:	d109      	bne.n	80062d6 <HAL_TIM_PWM_Start+0x72>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	bf14      	ite	ne
 80062ce:	2301      	movne	r3, #1
 80062d0:	2300      	moveq	r3, #0
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	e015      	b.n	8006302 <HAL_TIM_PWM_Start+0x9e>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b10      	cmp	r3, #16
 80062da:	d109      	bne.n	80062f0 <HAL_TIM_PWM_Start+0x8c>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	bf14      	ite	ne
 80062e8:	2301      	movne	r3, #1
 80062ea:	2300      	moveq	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	e008      	b.n	8006302 <HAL_TIM_PWM_Start+0x9e>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	bf14      	ite	ne
 80062fc:	2301      	movne	r3, #1
 80062fe:	2300      	moveq	r3, #0
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e097      	b.n	800643a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d104      	bne.n	800631a <HAL_TIM_PWM_Start+0xb6>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006318:	e023      	b.n	8006362 <HAL_TIM_PWM_Start+0xfe>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b04      	cmp	r3, #4
 800631e:	d104      	bne.n	800632a <HAL_TIM_PWM_Start+0xc6>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006328:	e01b      	b.n	8006362 <HAL_TIM_PWM_Start+0xfe>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b08      	cmp	r3, #8
 800632e:	d104      	bne.n	800633a <HAL_TIM_PWM_Start+0xd6>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006338:	e013      	b.n	8006362 <HAL_TIM_PWM_Start+0xfe>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b0c      	cmp	r3, #12
 800633e:	d104      	bne.n	800634a <HAL_TIM_PWM_Start+0xe6>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006348:	e00b      	b.n	8006362 <HAL_TIM_PWM_Start+0xfe>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b10      	cmp	r3, #16
 800634e:	d104      	bne.n	800635a <HAL_TIM_PWM_Start+0xf6>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006358:	e003      	b.n	8006362 <HAL_TIM_PWM_Start+0xfe>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2202      	movs	r2, #2
 800635e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2201      	movs	r2, #1
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	4618      	mov	r0, r3
 800636c:	f000 fdc6 	bl	8006efc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a33      	ldr	r2, [pc, #204]	@ (8006444 <HAL_TIM_PWM_Start+0x1e0>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d013      	beq.n	80063a2 <HAL_TIM_PWM_Start+0x13e>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a32      	ldr	r2, [pc, #200]	@ (8006448 <HAL_TIM_PWM_Start+0x1e4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d00e      	beq.n	80063a2 <HAL_TIM_PWM_Start+0x13e>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a30      	ldr	r2, [pc, #192]	@ (800644c <HAL_TIM_PWM_Start+0x1e8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d009      	beq.n	80063a2 <HAL_TIM_PWM_Start+0x13e>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a2f      	ldr	r2, [pc, #188]	@ (8006450 <HAL_TIM_PWM_Start+0x1ec>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d004      	beq.n	80063a2 <HAL_TIM_PWM_Start+0x13e>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a2d      	ldr	r2, [pc, #180]	@ (8006454 <HAL_TIM_PWM_Start+0x1f0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d101      	bne.n	80063a6 <HAL_TIM_PWM_Start+0x142>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e000      	b.n	80063a8 <HAL_TIM_PWM_Start+0x144>
 80063a6:	2300      	movs	r3, #0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d007      	beq.n	80063bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a20      	ldr	r2, [pc, #128]	@ (8006444 <HAL_TIM_PWM_Start+0x1e0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d018      	beq.n	80063f8 <HAL_TIM_PWM_Start+0x194>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ce:	d013      	beq.n	80063f8 <HAL_TIM_PWM_Start+0x194>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a20      	ldr	r2, [pc, #128]	@ (8006458 <HAL_TIM_PWM_Start+0x1f4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00e      	beq.n	80063f8 <HAL_TIM_PWM_Start+0x194>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a1f      	ldr	r2, [pc, #124]	@ (800645c <HAL_TIM_PWM_Start+0x1f8>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d009      	beq.n	80063f8 <HAL_TIM_PWM_Start+0x194>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a17      	ldr	r2, [pc, #92]	@ (8006448 <HAL_TIM_PWM_Start+0x1e4>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d004      	beq.n	80063f8 <HAL_TIM_PWM_Start+0x194>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a16      	ldr	r2, [pc, #88]	@ (800644c <HAL_TIM_PWM_Start+0x1e8>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d115      	bne.n	8006424 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	4b18      	ldr	r3, [pc, #96]	@ (8006460 <HAL_TIM_PWM_Start+0x1fc>)
 8006400:	4013      	ands	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b06      	cmp	r3, #6
 8006408:	d015      	beq.n	8006436 <HAL_TIM_PWM_Start+0x1d2>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006410:	d011      	beq.n	8006436 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f042 0201 	orr.w	r2, r2, #1
 8006420:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006422:	e008      	b.n	8006436 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0201 	orr.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	e000      	b.n	8006438 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006436:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	40012c00 	.word	0x40012c00
 8006448:	40013400 	.word	0x40013400
 800644c:	40014000 	.word	0x40014000
 8006450:	40014400 	.word	0x40014400
 8006454:	40014800 	.word	0x40014800
 8006458:	40000400 	.word	0x40000400
 800645c:	40000800 	.word	0x40000800
 8006460:	00010007 	.word	0x00010007

08006464 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e097      	b.n	80065a8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d106      	bne.n	8006492 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7fb fe9f 	bl	80021d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2202      	movs	r2, #2
 8006496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6812      	ldr	r2, [r2, #0]
 80064a4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80064a8:	f023 0307 	bic.w	r3, r3, #7
 80064ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	3304      	adds	r3, #4
 80064b6:	4619      	mov	r1, r3
 80064b8:	4610      	mov	r0, r2
 80064ba:	f000 f98d 	bl	80067d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064e6:	f023 0303 	bic.w	r3, r3, #3
 80064ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	021b      	lsls	r3, r3, #8
 80064f6:	4313      	orrs	r3, r2
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006504:	f023 030c 	bic.w	r3, r3, #12
 8006508:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006510:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006514:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	021b      	lsls	r3, r3, #8
 8006520:	4313      	orrs	r3, r2
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	011a      	lsls	r2, r3, #4
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	031b      	lsls	r3, r3, #12
 8006534:	4313      	orrs	r3, r2
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	4313      	orrs	r3, r2
 800653a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006542:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800654a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	4313      	orrs	r3, r2
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	4313      	orrs	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d101      	bne.n	80065ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065ca:	2302      	movs	r3, #2
 80065cc:	e0ff      	b.n	80067ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b14      	cmp	r3, #20
 80065da:	f200 80f0 	bhi.w	80067be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80065de:	a201      	add	r2, pc, #4	@ (adr r2, 80065e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e4:	08006639 	.word	0x08006639
 80065e8:	080067bf 	.word	0x080067bf
 80065ec:	080067bf 	.word	0x080067bf
 80065f0:	080067bf 	.word	0x080067bf
 80065f4:	08006679 	.word	0x08006679
 80065f8:	080067bf 	.word	0x080067bf
 80065fc:	080067bf 	.word	0x080067bf
 8006600:	080067bf 	.word	0x080067bf
 8006604:	080066bb 	.word	0x080066bb
 8006608:	080067bf 	.word	0x080067bf
 800660c:	080067bf 	.word	0x080067bf
 8006610:	080067bf 	.word	0x080067bf
 8006614:	080066fb 	.word	0x080066fb
 8006618:	080067bf 	.word	0x080067bf
 800661c:	080067bf 	.word	0x080067bf
 8006620:	080067bf 	.word	0x080067bf
 8006624:	0800673d 	.word	0x0800673d
 8006628:	080067bf 	.word	0x080067bf
 800662c:	080067bf 	.word	0x080067bf
 8006630:	080067bf 	.word	0x080067bf
 8006634:	0800677d 	.word	0x0800677d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68b9      	ldr	r1, [r7, #8]
 800663e:	4618      	mov	r0, r3
 8006640:	f000 f966 	bl	8006910 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0208 	orr.w	r2, r2, #8
 8006652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699a      	ldr	r2, [r3, #24]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0204 	bic.w	r2, r2, #4
 8006662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6999      	ldr	r1, [r3, #24]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	691a      	ldr	r2, [r3, #16]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	619a      	str	r2, [r3, #24]
      break;
 8006676:	e0a5      	b.n	80067c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68b9      	ldr	r1, [r7, #8]
 800667e:	4618      	mov	r0, r3
 8006680:	f000 f9d6 	bl	8006a30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	699a      	ldr	r2, [r3, #24]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699a      	ldr	r2, [r3, #24]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6999      	ldr	r1, [r3, #24]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	021a      	lsls	r2, r3, #8
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	619a      	str	r2, [r3, #24]
      break;
 80066b8:	e084      	b.n	80067c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68b9      	ldr	r1, [r7, #8]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 fa3f 	bl	8006b44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	69da      	ldr	r2, [r3, #28]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f042 0208 	orr.w	r2, r2, #8
 80066d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69da      	ldr	r2, [r3, #28]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0204 	bic.w	r2, r2, #4
 80066e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69d9      	ldr	r1, [r3, #28]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	691a      	ldr	r2, [r3, #16]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	61da      	str	r2, [r3, #28]
      break;
 80066f8:	e064      	b.n	80067c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68b9      	ldr	r1, [r7, #8]
 8006700:	4618      	mov	r0, r3
 8006702:	f000 faa7 	bl	8006c54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69da      	ldr	r2, [r3, #28]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69da      	ldr	r2, [r3, #28]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69d9      	ldr	r1, [r3, #28]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	021a      	lsls	r2, r3, #8
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	61da      	str	r2, [r3, #28]
      break;
 800673a:	e043      	b.n	80067c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fb10 	bl	8006d68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0208 	orr.w	r2, r2, #8
 8006756:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0204 	bic.w	r2, r2, #4
 8006766:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	691a      	ldr	r2, [r3, #16]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800677a:	e023      	b.n	80067c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fb54 	bl	8006e30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006796:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067a6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	021a      	lsls	r2, r3, #8
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80067bc:	e002      	b.n	80067c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	75fb      	strb	r3, [r7, #23]
      break;
 80067c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop

080067d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a42      	ldr	r2, [pc, #264]	@ (80068f4 <TIM_Base_SetConfig+0x11c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00f      	beq.n	8006810 <TIM_Base_SetConfig+0x38>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067f6:	d00b      	beq.n	8006810 <TIM_Base_SetConfig+0x38>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a3f      	ldr	r2, [pc, #252]	@ (80068f8 <TIM_Base_SetConfig+0x120>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d007      	beq.n	8006810 <TIM_Base_SetConfig+0x38>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a3e      	ldr	r2, [pc, #248]	@ (80068fc <TIM_Base_SetConfig+0x124>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d003      	beq.n	8006810 <TIM_Base_SetConfig+0x38>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a3d      	ldr	r2, [pc, #244]	@ (8006900 <TIM_Base_SetConfig+0x128>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d108      	bne.n	8006822 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a33      	ldr	r2, [pc, #204]	@ (80068f4 <TIM_Base_SetConfig+0x11c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d01b      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006830:	d017      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a30      	ldr	r2, [pc, #192]	@ (80068f8 <TIM_Base_SetConfig+0x120>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d013      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a2f      	ldr	r2, [pc, #188]	@ (80068fc <TIM_Base_SetConfig+0x124>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00f      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a2e      	ldr	r2, [pc, #184]	@ (8006900 <TIM_Base_SetConfig+0x128>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00b      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a2d      	ldr	r2, [pc, #180]	@ (8006904 <TIM_Base_SetConfig+0x12c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d007      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a2c      	ldr	r2, [pc, #176]	@ (8006908 <TIM_Base_SetConfig+0x130>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a2b      	ldr	r2, [pc, #172]	@ (800690c <TIM_Base_SetConfig+0x134>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d108      	bne.n	8006874 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a16      	ldr	r2, [pc, #88]	@ (80068f4 <TIM_Base_SetConfig+0x11c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00f      	beq.n	80068c0 <TIM_Base_SetConfig+0xe8>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a17      	ldr	r2, [pc, #92]	@ (8006900 <TIM_Base_SetConfig+0x128>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d00b      	beq.n	80068c0 <TIM_Base_SetConfig+0xe8>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a16      	ldr	r2, [pc, #88]	@ (8006904 <TIM_Base_SetConfig+0x12c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d007      	beq.n	80068c0 <TIM_Base_SetConfig+0xe8>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a15      	ldr	r2, [pc, #84]	@ (8006908 <TIM_Base_SetConfig+0x130>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d003      	beq.n	80068c0 <TIM_Base_SetConfig+0xe8>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a14      	ldr	r2, [pc, #80]	@ (800690c <TIM_Base_SetConfig+0x134>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d103      	bne.n	80068c8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	691a      	ldr	r2, [r3, #16]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d105      	bne.n	80068e6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f023 0201 	bic.w	r2, r3, #1
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	611a      	str	r2, [r3, #16]
  }
}
 80068e6:	bf00      	nop
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40012c00 	.word	0x40012c00
 80068f8:	40000400 	.word	0x40000400
 80068fc:	40000800 	.word	0x40000800
 8006900:	40013400 	.word	0x40013400
 8006904:	40014000 	.word	0x40014000
 8006908:	40014400 	.word	0x40014400
 800690c:	40014800 	.word	0x40014800

08006910 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	f023 0201 	bic.w	r2, r3, #1
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800693e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0303 	bic.w	r3, r3, #3
 800694a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f023 0302 	bic.w	r3, r3, #2
 800695c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a2c      	ldr	r2, [pc, #176]	@ (8006a1c <TIM_OC1_SetConfig+0x10c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d00f      	beq.n	8006990 <TIM_OC1_SetConfig+0x80>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a2b      	ldr	r2, [pc, #172]	@ (8006a20 <TIM_OC1_SetConfig+0x110>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d00b      	beq.n	8006990 <TIM_OC1_SetConfig+0x80>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a2a      	ldr	r2, [pc, #168]	@ (8006a24 <TIM_OC1_SetConfig+0x114>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d007      	beq.n	8006990 <TIM_OC1_SetConfig+0x80>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a29      	ldr	r2, [pc, #164]	@ (8006a28 <TIM_OC1_SetConfig+0x118>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d003      	beq.n	8006990 <TIM_OC1_SetConfig+0x80>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a28      	ldr	r2, [pc, #160]	@ (8006a2c <TIM_OC1_SetConfig+0x11c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d10c      	bne.n	80069aa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f023 0308 	bic.w	r3, r3, #8
 8006996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f023 0304 	bic.w	r3, r3, #4
 80069a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a1b      	ldr	r2, [pc, #108]	@ (8006a1c <TIM_OC1_SetConfig+0x10c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00f      	beq.n	80069d2 <TIM_OC1_SetConfig+0xc2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a1a      	ldr	r2, [pc, #104]	@ (8006a20 <TIM_OC1_SetConfig+0x110>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d00b      	beq.n	80069d2 <TIM_OC1_SetConfig+0xc2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a19      	ldr	r2, [pc, #100]	@ (8006a24 <TIM_OC1_SetConfig+0x114>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d007      	beq.n	80069d2 <TIM_OC1_SetConfig+0xc2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a18      	ldr	r2, [pc, #96]	@ (8006a28 <TIM_OC1_SetConfig+0x118>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d003      	beq.n	80069d2 <TIM_OC1_SetConfig+0xc2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a17      	ldr	r2, [pc, #92]	@ (8006a2c <TIM_OC1_SetConfig+0x11c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d111      	bne.n	80069f6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	621a      	str	r2, [r3, #32]
}
 8006a10:	bf00      	nop
 8006a12:	371c      	adds	r7, #28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	40012c00 	.word	0x40012c00
 8006a20:	40013400 	.word	0x40013400
 8006a24:	40014000 	.word	0x40014000
 8006a28:	40014400 	.word	0x40014400
 8006a2c:	40014800 	.word	0x40014800

08006a30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	f023 0210 	bic.w	r2, r3, #16
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	021b      	lsls	r3, r3, #8
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f023 0320 	bic.w	r3, r3, #32
 8006a7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	011b      	lsls	r3, r3, #4
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a28      	ldr	r2, [pc, #160]	@ (8006b30 <TIM_OC2_SetConfig+0x100>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d003      	beq.n	8006a9c <TIM_OC2_SetConfig+0x6c>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a27      	ldr	r2, [pc, #156]	@ (8006b34 <TIM_OC2_SetConfig+0x104>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d10d      	bne.n	8006ab8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	011b      	lsls	r3, r3, #4
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ab6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a1d      	ldr	r2, [pc, #116]	@ (8006b30 <TIM_OC2_SetConfig+0x100>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d00f      	beq.n	8006ae0 <TIM_OC2_SetConfig+0xb0>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8006b34 <TIM_OC2_SetConfig+0x104>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d00b      	beq.n	8006ae0 <TIM_OC2_SetConfig+0xb0>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a1b      	ldr	r2, [pc, #108]	@ (8006b38 <TIM_OC2_SetConfig+0x108>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d007      	beq.n	8006ae0 <TIM_OC2_SetConfig+0xb0>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a1a      	ldr	r2, [pc, #104]	@ (8006b3c <TIM_OC2_SetConfig+0x10c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d003      	beq.n	8006ae0 <TIM_OC2_SetConfig+0xb0>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a19      	ldr	r2, [pc, #100]	@ (8006b40 <TIM_OC2_SetConfig+0x110>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d113      	bne.n	8006b08 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ae6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006aee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	621a      	str	r2, [r3, #32]
}
 8006b22:	bf00      	nop
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	40012c00 	.word	0x40012c00
 8006b34:	40013400 	.word	0x40013400
 8006b38:	40014000 	.word	0x40014000
 8006b3c:	40014400 	.word	0x40014400
 8006b40:	40014800 	.word	0x40014800

08006b44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0303 	bic.w	r3, r3, #3
 8006b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	021b      	lsls	r3, r3, #8
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a27      	ldr	r2, [pc, #156]	@ (8006c40 <TIM_OC3_SetConfig+0xfc>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d003      	beq.n	8006bae <TIM_OC3_SetConfig+0x6a>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a26      	ldr	r2, [pc, #152]	@ (8006c44 <TIM_OC3_SetConfig+0x100>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d10d      	bne.n	8006bca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	021b      	lsls	r3, r3, #8
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8006c40 <TIM_OC3_SetConfig+0xfc>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d00f      	beq.n	8006bf2 <TIM_OC3_SetConfig+0xae>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8006c44 <TIM_OC3_SetConfig+0x100>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d00b      	beq.n	8006bf2 <TIM_OC3_SetConfig+0xae>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8006c48 <TIM_OC3_SetConfig+0x104>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d007      	beq.n	8006bf2 <TIM_OC3_SetConfig+0xae>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a19      	ldr	r2, [pc, #100]	@ (8006c4c <TIM_OC3_SetConfig+0x108>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d003      	beq.n	8006bf2 <TIM_OC3_SetConfig+0xae>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a18      	ldr	r2, [pc, #96]	@ (8006c50 <TIM_OC3_SetConfig+0x10c>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d113      	bne.n	8006c1a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	011b      	lsls	r3, r3, #4
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	621a      	str	r2, [r3, #32]
}
 8006c34:	bf00      	nop
 8006c36:	371c      	adds	r7, #28
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	40012c00 	.word	0x40012c00
 8006c44:	40013400 	.word	0x40013400
 8006c48:	40014000 	.word	0x40014000
 8006c4c:	40014400 	.word	0x40014400
 8006c50:	40014800 	.word	0x40014800

08006c54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	021b      	lsls	r3, r3, #8
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ca2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	031b      	lsls	r3, r3, #12
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a28      	ldr	r2, [pc, #160]	@ (8006d54 <TIM_OC4_SetConfig+0x100>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d003      	beq.n	8006cc0 <TIM_OC4_SetConfig+0x6c>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a27      	ldr	r2, [pc, #156]	@ (8006d58 <TIM_OC4_SetConfig+0x104>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d10d      	bne.n	8006cdc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	031b      	lsls	r3, r3, #12
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a1d      	ldr	r2, [pc, #116]	@ (8006d54 <TIM_OC4_SetConfig+0x100>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d00f      	beq.n	8006d04 <TIM_OC4_SetConfig+0xb0>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8006d58 <TIM_OC4_SetConfig+0x104>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00b      	beq.n	8006d04 <TIM_OC4_SetConfig+0xb0>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a1b      	ldr	r2, [pc, #108]	@ (8006d5c <TIM_OC4_SetConfig+0x108>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d007      	beq.n	8006d04 <TIM_OC4_SetConfig+0xb0>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8006d60 <TIM_OC4_SetConfig+0x10c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d003      	beq.n	8006d04 <TIM_OC4_SetConfig+0xb0>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a19      	ldr	r2, [pc, #100]	@ (8006d64 <TIM_OC4_SetConfig+0x110>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d113      	bne.n	8006d2c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d0a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d12:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	019b      	lsls	r3, r3, #6
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	019b      	lsls	r3, r3, #6
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	621a      	str	r2, [r3, #32]
}
 8006d46:	bf00      	nop
 8006d48:	371c      	adds	r7, #28
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	40012c00 	.word	0x40012c00
 8006d58:	40013400 	.word	0x40013400
 8006d5c:	40014000 	.word	0x40014000
 8006d60:	40014400 	.word	0x40014400
 8006d64:	40014800 	.word	0x40014800

08006d68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006dac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	041b      	lsls	r3, r3, #16
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a17      	ldr	r2, [pc, #92]	@ (8006e1c <TIM_OC5_SetConfig+0xb4>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d00f      	beq.n	8006de2 <TIM_OC5_SetConfig+0x7a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a16      	ldr	r2, [pc, #88]	@ (8006e20 <TIM_OC5_SetConfig+0xb8>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00b      	beq.n	8006de2 <TIM_OC5_SetConfig+0x7a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a15      	ldr	r2, [pc, #84]	@ (8006e24 <TIM_OC5_SetConfig+0xbc>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d007      	beq.n	8006de2 <TIM_OC5_SetConfig+0x7a>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a14      	ldr	r2, [pc, #80]	@ (8006e28 <TIM_OC5_SetConfig+0xc0>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d003      	beq.n	8006de2 <TIM_OC5_SetConfig+0x7a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a13      	ldr	r2, [pc, #76]	@ (8006e2c <TIM_OC5_SetConfig+0xc4>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d109      	bne.n	8006df6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006de8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	021b      	lsls	r3, r3, #8
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	621a      	str	r2, [r3, #32]
}
 8006e10:	bf00      	nop
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	40012c00 	.word	0x40012c00
 8006e20:	40013400 	.word	0x40013400
 8006e24:	40014000 	.word	0x40014000
 8006e28:	40014400 	.word	0x40014400
 8006e2c:	40014800 	.word	0x40014800

08006e30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	021b      	lsls	r3, r3, #8
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	051b      	lsls	r3, r3, #20
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a18      	ldr	r2, [pc, #96]	@ (8006ee8 <TIM_OC6_SetConfig+0xb8>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d00f      	beq.n	8006eac <TIM_OC6_SetConfig+0x7c>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a17      	ldr	r2, [pc, #92]	@ (8006eec <TIM_OC6_SetConfig+0xbc>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d00b      	beq.n	8006eac <TIM_OC6_SetConfig+0x7c>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a16      	ldr	r2, [pc, #88]	@ (8006ef0 <TIM_OC6_SetConfig+0xc0>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d007      	beq.n	8006eac <TIM_OC6_SetConfig+0x7c>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a15      	ldr	r2, [pc, #84]	@ (8006ef4 <TIM_OC6_SetConfig+0xc4>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d003      	beq.n	8006eac <TIM_OC6_SetConfig+0x7c>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a14      	ldr	r2, [pc, #80]	@ (8006ef8 <TIM_OC6_SetConfig+0xc8>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d109      	bne.n	8006ec0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	029b      	lsls	r3, r3, #10
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	621a      	str	r2, [r3, #32]
}
 8006eda:	bf00      	nop
 8006edc:	371c      	adds	r7, #28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	40012c00 	.word	0x40012c00
 8006eec:	40013400 	.word	0x40013400
 8006ef0:	40014000 	.word	0x40014000
 8006ef4:	40014400 	.word	0x40014400
 8006ef8:	40014800 	.word	0x40014800

08006efc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f003 031f 	and.w	r3, r3, #31
 8006f0e:	2201      	movs	r2, #1
 8006f10:	fa02 f303 	lsl.w	r3, r2, r3
 8006f14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a1a      	ldr	r2, [r3, #32]
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	401a      	ands	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a1a      	ldr	r2, [r3, #32]
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f003 031f 	and.w	r3, r3, #31
 8006f2e:	6879      	ldr	r1, [r7, #4]
 8006f30:	fa01 f303 	lsl.w	r3, r1, r3
 8006f34:	431a      	orrs	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	621a      	str	r2, [r3, #32]
}
 8006f3a:	bf00      	nop
 8006f3c:	371c      	adds	r7, #28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
	...

08006f48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d101      	bne.n	8006f60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e065      	b.n	800702c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a2c      	ldr	r2, [pc, #176]	@ (8007038 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d004      	beq.n	8006f94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a2b      	ldr	r2, [pc, #172]	@ (800703c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d108      	bne.n	8006fa6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006f9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006fac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8007038 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d018      	beq.n	8007000 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fd6:	d013      	beq.n	8007000 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a18      	ldr	r2, [pc, #96]	@ (8007040 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d00e      	beq.n	8007000 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a17      	ldr	r2, [pc, #92]	@ (8007044 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d009      	beq.n	8007000 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a12      	ldr	r2, [pc, #72]	@ (800703c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d004      	beq.n	8007000 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a13      	ldr	r2, [pc, #76]	@ (8007048 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d10c      	bne.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007006:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	4313      	orrs	r3, r2
 8007010:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	40012c00 	.word	0x40012c00
 800703c:	40013400 	.word	0x40013400
 8007040:	40000400 	.word	0x40000400
 8007044:	40000800 	.word	0x40000800
 8007048:	40014000 	.word	0x40014000

0800704c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007056:	2300      	movs	r3, #0
 8007058:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007060:	2b01      	cmp	r3, #1
 8007062:	d101      	bne.n	8007068 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007064:	2302      	movs	r3, #2
 8007066:	e073      	b.n	8007150 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	4313      	orrs	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	4313      	orrs	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	4313      	orrs	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	695b      	ldr	r3, [r3, #20]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ce:	4313      	orrs	r3, r2
 80070d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	041b      	lsls	r3, r3, #16
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a19      	ldr	r2, [pc, #100]	@ (800715c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d004      	beq.n	8007104 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a18      	ldr	r2, [pc, #96]	@ (8007160 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d11c      	bne.n	800713e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710e:	051b      	lsls	r3, r3, #20
 8007110:	4313      	orrs	r3, r2
 8007112:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	4313      	orrs	r3, r2
 8007120:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712c:	4313      	orrs	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	40012c00 	.word	0x40012c00
 8007160:	40013400 	.word	0x40013400

08007164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e042      	b.n	80071fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800717c:	2b00      	cmp	r3, #0
 800717e:	d106      	bne.n	800718e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7fb fa1b 	bl	80025c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2224      	movs	r2, #36	@ 0x24
 8007192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 0201 	bic.w	r2, r2, #1
 80071a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d002      	beq.n	80071b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fbe4 	bl	800797c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f915 	bl	80073e4 <UART_SetConfig>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d101      	bne.n	80071c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e01b      	b.n	80071fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689a      	ldr	r2, [r3, #8]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f042 0201 	orr.w	r2, r2, #1
 80071f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fc63 	bl	8007ac0 <UART_CheckIdleState>
 80071fa:	4603      	mov	r3, r0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b08a      	sub	sp, #40	@ 0x28
 8007208:	af02      	add	r7, sp, #8
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	603b      	str	r3, [r7, #0]
 8007210:	4613      	mov	r3, r2
 8007212:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800721a:	2b20      	cmp	r3, #32
 800721c:	d17b      	bne.n	8007316 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <HAL_UART_Transmit+0x26>
 8007224:	88fb      	ldrh	r3, [r7, #6]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e074      	b.n	8007318 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2221      	movs	r2, #33	@ 0x21
 800723a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800723e:	f7fb fb57 	bl	80028f0 <HAL_GetTick>
 8007242:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	88fa      	ldrh	r2, [r7, #6]
 8007248:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	88fa      	ldrh	r2, [r7, #6]
 8007250:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800725c:	d108      	bne.n	8007270 <HAL_UART_Transmit+0x6c>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d104      	bne.n	8007270 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007266:	2300      	movs	r3, #0
 8007268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	61bb      	str	r3, [r7, #24]
 800726e:	e003      	b.n	8007278 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007274:	2300      	movs	r3, #0
 8007276:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007278:	e030      	b.n	80072dc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2200      	movs	r2, #0
 8007282:	2180      	movs	r1, #128	@ 0x80
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 fcc5 	bl	8007c14 <UART_WaitOnFlagUntilTimeout>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d005      	beq.n	800729c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2220      	movs	r2, #32
 8007294:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e03d      	b.n	8007318 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10b      	bne.n	80072ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	881b      	ldrh	r3, [r3, #0]
 80072a6:	461a      	mov	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	3302      	adds	r3, #2
 80072b6:	61bb      	str	r3, [r7, #24]
 80072b8:	e007      	b.n	80072ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	781a      	ldrb	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	3301      	adds	r3, #1
 80072c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1c8      	bne.n	800727a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	2200      	movs	r2, #0
 80072f0:	2140      	movs	r1, #64	@ 0x40
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f000 fc8e 	bl	8007c14 <UART_WaitOnFlagUntilTimeout>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d005      	beq.n	800730a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2220      	movs	r2, #32
 8007302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e006      	b.n	8007318 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2220      	movs	r2, #32
 800730e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	e000      	b.n	8007318 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007316:	2302      	movs	r3, #2
  }
}
 8007318:	4618      	mov	r0, r3
 800731a:	3720      	adds	r7, #32
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08a      	sub	sp, #40	@ 0x28
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	4613      	mov	r3, r2
 800732c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007334:	2b20      	cmp	r3, #32
 8007336:	d137      	bne.n	80073a8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <HAL_UART_Receive_DMA+0x24>
 800733e:	88fb      	ldrh	r3, [r7, #6]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e030      	b.n	80073aa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a18      	ldr	r2, [pc, #96]	@ (80073b4 <HAL_UART_Receive_DMA+0x94>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d01f      	beq.n	8007398 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d018      	beq.n	8007398 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	e853 3f00 	ldrex	r3, [r3]
 8007372:	613b      	str	r3, [r7, #16]
   return(result);
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800737a:	627b      	str	r3, [r7, #36]	@ 0x24
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	461a      	mov	r2, r3
 8007382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007384:	623b      	str	r3, [r7, #32]
 8007386:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007388:	69f9      	ldr	r1, [r7, #28]
 800738a:	6a3a      	ldr	r2, [r7, #32]
 800738c:	e841 2300 	strex	r3, r2, [r1]
 8007390:	61bb      	str	r3, [r7, #24]
   return(result);
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1e6      	bne.n	8007366 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007398:	88fb      	ldrh	r3, [r7, #6]
 800739a:	461a      	mov	r2, r3
 800739c:	68b9      	ldr	r1, [r7, #8]
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f000 fca6 	bl	8007cf0 <UART_Start_Receive_DMA>
 80073a4:	4603      	mov	r3, r0
 80073a6:	e000      	b.n	80073aa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80073a8:	2302      	movs	r3, #2
  }
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3728      	adds	r7, #40	@ 0x28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	40008000 	.word	0x40008000

080073b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073e8:	b08c      	sub	sp, #48	@ 0x30
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	431a      	orrs	r2, r3
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	431a      	orrs	r2, r3
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	4313      	orrs	r3, r2
 800740a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	4bab      	ldr	r3, [pc, #684]	@ (80076c0 <UART_SetConfig+0x2dc>)
 8007414:	4013      	ands	r3, r2
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	6812      	ldr	r2, [r2, #0]
 800741a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800741c:	430b      	orrs	r3, r1
 800741e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	68da      	ldr	r2, [r3, #12]
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4aa0      	ldr	r2, [pc, #640]	@ (80076c4 <UART_SetConfig+0x2e0>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d004      	beq.n	8007450 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800744c:	4313      	orrs	r3, r2
 800744e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800745a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	6812      	ldr	r2, [r2, #0]
 8007462:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007464:	430b      	orrs	r3, r1
 8007466:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746e:	f023 010f 	bic.w	r1, r3, #15
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a91      	ldr	r2, [pc, #580]	@ (80076c8 <UART_SetConfig+0x2e4>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d125      	bne.n	80074d4 <UART_SetConfig+0xf0>
 8007488:	4b90      	ldr	r3, [pc, #576]	@ (80076cc <UART_SetConfig+0x2e8>)
 800748a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800748e:	f003 0303 	and.w	r3, r3, #3
 8007492:	2b03      	cmp	r3, #3
 8007494:	d81a      	bhi.n	80074cc <UART_SetConfig+0xe8>
 8007496:	a201      	add	r2, pc, #4	@ (adr r2, 800749c <UART_SetConfig+0xb8>)
 8007498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749c:	080074ad 	.word	0x080074ad
 80074a0:	080074bd 	.word	0x080074bd
 80074a4:	080074b5 	.word	0x080074b5
 80074a8:	080074c5 	.word	0x080074c5
 80074ac:	2301      	movs	r3, #1
 80074ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074b2:	e0d6      	b.n	8007662 <UART_SetConfig+0x27e>
 80074b4:	2302      	movs	r3, #2
 80074b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ba:	e0d2      	b.n	8007662 <UART_SetConfig+0x27e>
 80074bc:	2304      	movs	r3, #4
 80074be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074c2:	e0ce      	b.n	8007662 <UART_SetConfig+0x27e>
 80074c4:	2308      	movs	r3, #8
 80074c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ca:	e0ca      	b.n	8007662 <UART_SetConfig+0x27e>
 80074cc:	2310      	movs	r3, #16
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074d2:	e0c6      	b.n	8007662 <UART_SetConfig+0x27e>
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a7d      	ldr	r2, [pc, #500]	@ (80076d0 <UART_SetConfig+0x2ec>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d138      	bne.n	8007550 <UART_SetConfig+0x16c>
 80074de:	4b7b      	ldr	r3, [pc, #492]	@ (80076cc <UART_SetConfig+0x2e8>)
 80074e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074e4:	f003 030c 	and.w	r3, r3, #12
 80074e8:	2b0c      	cmp	r3, #12
 80074ea:	d82d      	bhi.n	8007548 <UART_SetConfig+0x164>
 80074ec:	a201      	add	r2, pc, #4	@ (adr r2, 80074f4 <UART_SetConfig+0x110>)
 80074ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f2:	bf00      	nop
 80074f4:	08007529 	.word	0x08007529
 80074f8:	08007549 	.word	0x08007549
 80074fc:	08007549 	.word	0x08007549
 8007500:	08007549 	.word	0x08007549
 8007504:	08007539 	.word	0x08007539
 8007508:	08007549 	.word	0x08007549
 800750c:	08007549 	.word	0x08007549
 8007510:	08007549 	.word	0x08007549
 8007514:	08007531 	.word	0x08007531
 8007518:	08007549 	.word	0x08007549
 800751c:	08007549 	.word	0x08007549
 8007520:	08007549 	.word	0x08007549
 8007524:	08007541 	.word	0x08007541
 8007528:	2300      	movs	r3, #0
 800752a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800752e:	e098      	b.n	8007662 <UART_SetConfig+0x27e>
 8007530:	2302      	movs	r3, #2
 8007532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007536:	e094      	b.n	8007662 <UART_SetConfig+0x27e>
 8007538:	2304      	movs	r3, #4
 800753a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800753e:	e090      	b.n	8007662 <UART_SetConfig+0x27e>
 8007540:	2308      	movs	r3, #8
 8007542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007546:	e08c      	b.n	8007662 <UART_SetConfig+0x27e>
 8007548:	2310      	movs	r3, #16
 800754a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800754e:	e088      	b.n	8007662 <UART_SetConfig+0x27e>
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a5f      	ldr	r2, [pc, #380]	@ (80076d4 <UART_SetConfig+0x2f0>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d125      	bne.n	80075a6 <UART_SetConfig+0x1c2>
 800755a:	4b5c      	ldr	r3, [pc, #368]	@ (80076cc <UART_SetConfig+0x2e8>)
 800755c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007560:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007564:	2b30      	cmp	r3, #48	@ 0x30
 8007566:	d016      	beq.n	8007596 <UART_SetConfig+0x1b2>
 8007568:	2b30      	cmp	r3, #48	@ 0x30
 800756a:	d818      	bhi.n	800759e <UART_SetConfig+0x1ba>
 800756c:	2b20      	cmp	r3, #32
 800756e:	d00a      	beq.n	8007586 <UART_SetConfig+0x1a2>
 8007570:	2b20      	cmp	r3, #32
 8007572:	d814      	bhi.n	800759e <UART_SetConfig+0x1ba>
 8007574:	2b00      	cmp	r3, #0
 8007576:	d002      	beq.n	800757e <UART_SetConfig+0x19a>
 8007578:	2b10      	cmp	r3, #16
 800757a:	d008      	beq.n	800758e <UART_SetConfig+0x1aa>
 800757c:	e00f      	b.n	800759e <UART_SetConfig+0x1ba>
 800757e:	2300      	movs	r3, #0
 8007580:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007584:	e06d      	b.n	8007662 <UART_SetConfig+0x27e>
 8007586:	2302      	movs	r3, #2
 8007588:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800758c:	e069      	b.n	8007662 <UART_SetConfig+0x27e>
 800758e:	2304      	movs	r3, #4
 8007590:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007594:	e065      	b.n	8007662 <UART_SetConfig+0x27e>
 8007596:	2308      	movs	r3, #8
 8007598:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800759c:	e061      	b.n	8007662 <UART_SetConfig+0x27e>
 800759e:	2310      	movs	r3, #16
 80075a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075a4:	e05d      	b.n	8007662 <UART_SetConfig+0x27e>
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a4b      	ldr	r2, [pc, #300]	@ (80076d8 <UART_SetConfig+0x2f4>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d125      	bne.n	80075fc <UART_SetConfig+0x218>
 80075b0:	4b46      	ldr	r3, [pc, #280]	@ (80076cc <UART_SetConfig+0x2e8>)
 80075b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80075ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80075bc:	d016      	beq.n	80075ec <UART_SetConfig+0x208>
 80075be:	2bc0      	cmp	r3, #192	@ 0xc0
 80075c0:	d818      	bhi.n	80075f4 <UART_SetConfig+0x210>
 80075c2:	2b80      	cmp	r3, #128	@ 0x80
 80075c4:	d00a      	beq.n	80075dc <UART_SetConfig+0x1f8>
 80075c6:	2b80      	cmp	r3, #128	@ 0x80
 80075c8:	d814      	bhi.n	80075f4 <UART_SetConfig+0x210>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d002      	beq.n	80075d4 <UART_SetConfig+0x1f0>
 80075ce:	2b40      	cmp	r3, #64	@ 0x40
 80075d0:	d008      	beq.n	80075e4 <UART_SetConfig+0x200>
 80075d2:	e00f      	b.n	80075f4 <UART_SetConfig+0x210>
 80075d4:	2300      	movs	r3, #0
 80075d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075da:	e042      	b.n	8007662 <UART_SetConfig+0x27e>
 80075dc:	2302      	movs	r3, #2
 80075de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075e2:	e03e      	b.n	8007662 <UART_SetConfig+0x27e>
 80075e4:	2304      	movs	r3, #4
 80075e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ea:	e03a      	b.n	8007662 <UART_SetConfig+0x27e>
 80075ec:	2308      	movs	r3, #8
 80075ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075f2:	e036      	b.n	8007662 <UART_SetConfig+0x27e>
 80075f4:	2310      	movs	r3, #16
 80075f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075fa:	e032      	b.n	8007662 <UART_SetConfig+0x27e>
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a30      	ldr	r2, [pc, #192]	@ (80076c4 <UART_SetConfig+0x2e0>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d12a      	bne.n	800765c <UART_SetConfig+0x278>
 8007606:	4b31      	ldr	r3, [pc, #196]	@ (80076cc <UART_SetConfig+0x2e8>)
 8007608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800760c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007610:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007614:	d01a      	beq.n	800764c <UART_SetConfig+0x268>
 8007616:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800761a:	d81b      	bhi.n	8007654 <UART_SetConfig+0x270>
 800761c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007620:	d00c      	beq.n	800763c <UART_SetConfig+0x258>
 8007622:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007626:	d815      	bhi.n	8007654 <UART_SetConfig+0x270>
 8007628:	2b00      	cmp	r3, #0
 800762a:	d003      	beq.n	8007634 <UART_SetConfig+0x250>
 800762c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007630:	d008      	beq.n	8007644 <UART_SetConfig+0x260>
 8007632:	e00f      	b.n	8007654 <UART_SetConfig+0x270>
 8007634:	2300      	movs	r3, #0
 8007636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800763a:	e012      	b.n	8007662 <UART_SetConfig+0x27e>
 800763c:	2302      	movs	r3, #2
 800763e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007642:	e00e      	b.n	8007662 <UART_SetConfig+0x27e>
 8007644:	2304      	movs	r3, #4
 8007646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800764a:	e00a      	b.n	8007662 <UART_SetConfig+0x27e>
 800764c:	2308      	movs	r3, #8
 800764e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007652:	e006      	b.n	8007662 <UART_SetConfig+0x27e>
 8007654:	2310      	movs	r3, #16
 8007656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800765a:	e002      	b.n	8007662 <UART_SetConfig+0x27e>
 800765c:	2310      	movs	r3, #16
 800765e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a17      	ldr	r2, [pc, #92]	@ (80076c4 <UART_SetConfig+0x2e0>)
 8007668:	4293      	cmp	r3, r2
 800766a:	f040 80a8 	bne.w	80077be <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800766e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007672:	2b08      	cmp	r3, #8
 8007674:	d834      	bhi.n	80076e0 <UART_SetConfig+0x2fc>
 8007676:	a201      	add	r2, pc, #4	@ (adr r2, 800767c <UART_SetConfig+0x298>)
 8007678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767c:	080076a1 	.word	0x080076a1
 8007680:	080076e1 	.word	0x080076e1
 8007684:	080076a9 	.word	0x080076a9
 8007688:	080076e1 	.word	0x080076e1
 800768c:	080076af 	.word	0x080076af
 8007690:	080076e1 	.word	0x080076e1
 8007694:	080076e1 	.word	0x080076e1
 8007698:	080076e1 	.word	0x080076e1
 800769c:	080076b7 	.word	0x080076b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076a0:	f7fd fbf2 	bl	8004e88 <HAL_RCC_GetPCLK1Freq>
 80076a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076a6:	e021      	b.n	80076ec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076a8:	4b0c      	ldr	r3, [pc, #48]	@ (80076dc <UART_SetConfig+0x2f8>)
 80076aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076ac:	e01e      	b.n	80076ec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ae:	f7fd fb7f 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 80076b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076b4:	e01a      	b.n	80076ec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076bc:	e016      	b.n	80076ec <UART_SetConfig+0x308>
 80076be:	bf00      	nop
 80076c0:	cfff69f3 	.word	0xcfff69f3
 80076c4:	40008000 	.word	0x40008000
 80076c8:	40013800 	.word	0x40013800
 80076cc:	40021000 	.word	0x40021000
 80076d0:	40004400 	.word	0x40004400
 80076d4:	40004800 	.word	0x40004800
 80076d8:	40004c00 	.word	0x40004c00
 80076dc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80076e0:	2300      	movs	r3, #0
 80076e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80076ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 812a 	beq.w	8007948 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f8:	4a9e      	ldr	r2, [pc, #632]	@ (8007974 <UART_SetConfig+0x590>)
 80076fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076fe:	461a      	mov	r2, r3
 8007700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007702:	fbb3 f3f2 	udiv	r3, r3, r2
 8007706:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	4613      	mov	r3, r2
 800770e:	005b      	lsls	r3, r3, #1
 8007710:	4413      	add	r3, r2
 8007712:	69ba      	ldr	r2, [r7, #24]
 8007714:	429a      	cmp	r2, r3
 8007716:	d305      	bcc.n	8007724 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	429a      	cmp	r2, r3
 8007722:	d903      	bls.n	800772c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800772a:	e10d      	b.n	8007948 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800772c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772e:	2200      	movs	r2, #0
 8007730:	60bb      	str	r3, [r7, #8]
 8007732:	60fa      	str	r2, [r7, #12]
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007738:	4a8e      	ldr	r2, [pc, #568]	@ (8007974 <UART_SetConfig+0x590>)
 800773a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800773e:	b29b      	uxth	r3, r3
 8007740:	2200      	movs	r2, #0
 8007742:	603b      	str	r3, [r7, #0]
 8007744:	607a      	str	r2, [r7, #4]
 8007746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800774a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800774e:	f7f9 fac3 	bl	8000cd8 <__aeabi_uldivmod>
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	4610      	mov	r0, r2
 8007758:	4619      	mov	r1, r3
 800775a:	f04f 0200 	mov.w	r2, #0
 800775e:	f04f 0300 	mov.w	r3, #0
 8007762:	020b      	lsls	r3, r1, #8
 8007764:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007768:	0202      	lsls	r2, r0, #8
 800776a:	6979      	ldr	r1, [r7, #20]
 800776c:	6849      	ldr	r1, [r1, #4]
 800776e:	0849      	lsrs	r1, r1, #1
 8007770:	2000      	movs	r0, #0
 8007772:	460c      	mov	r4, r1
 8007774:	4605      	mov	r5, r0
 8007776:	eb12 0804 	adds.w	r8, r2, r4
 800777a:	eb43 0905 	adc.w	r9, r3, r5
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	469a      	mov	sl, r3
 8007786:	4693      	mov	fp, r2
 8007788:	4652      	mov	r2, sl
 800778a:	465b      	mov	r3, fp
 800778c:	4640      	mov	r0, r8
 800778e:	4649      	mov	r1, r9
 8007790:	f7f9 faa2 	bl	8000cd8 <__aeabi_uldivmod>
 8007794:	4602      	mov	r2, r0
 8007796:	460b      	mov	r3, r1
 8007798:	4613      	mov	r3, r2
 800779a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077a2:	d308      	bcc.n	80077b6 <UART_SetConfig+0x3d2>
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077aa:	d204      	bcs.n	80077b6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6a3a      	ldr	r2, [r7, #32]
 80077b2:	60da      	str	r2, [r3, #12]
 80077b4:	e0c8      	b.n	8007948 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80077bc:	e0c4      	b.n	8007948 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077c6:	d167      	bne.n	8007898 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80077c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80077cc:	2b08      	cmp	r3, #8
 80077ce:	d828      	bhi.n	8007822 <UART_SetConfig+0x43e>
 80077d0:	a201      	add	r2, pc, #4	@ (adr r2, 80077d8 <UART_SetConfig+0x3f4>)
 80077d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d6:	bf00      	nop
 80077d8:	080077fd 	.word	0x080077fd
 80077dc:	08007805 	.word	0x08007805
 80077e0:	0800780d 	.word	0x0800780d
 80077e4:	08007823 	.word	0x08007823
 80077e8:	08007813 	.word	0x08007813
 80077ec:	08007823 	.word	0x08007823
 80077f0:	08007823 	.word	0x08007823
 80077f4:	08007823 	.word	0x08007823
 80077f8:	0800781b 	.word	0x0800781b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077fc:	f7fd fb44 	bl	8004e88 <HAL_RCC_GetPCLK1Freq>
 8007800:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007802:	e014      	b.n	800782e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007804:	f7fd fb56 	bl	8004eb4 <HAL_RCC_GetPCLK2Freq>
 8007808:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800780a:	e010      	b.n	800782e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800780c:	4b5a      	ldr	r3, [pc, #360]	@ (8007978 <UART_SetConfig+0x594>)
 800780e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007810:	e00d      	b.n	800782e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007812:	f7fd facd 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 8007816:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007818:	e009      	b.n	800782e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800781a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800781e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007820:	e005      	b.n	800782e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007822:	2300      	movs	r3, #0
 8007824:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800782c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800782e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 8089 	beq.w	8007948 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800783a:	4a4e      	ldr	r2, [pc, #312]	@ (8007974 <UART_SetConfig+0x590>)
 800783c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007840:	461a      	mov	r2, r3
 8007842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007844:	fbb3 f3f2 	udiv	r3, r3, r2
 8007848:	005a      	lsls	r2, r3, #1
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	085b      	lsrs	r3, r3, #1
 8007850:	441a      	add	r2, r3
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	fbb2 f3f3 	udiv	r3, r2, r3
 800785a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	2b0f      	cmp	r3, #15
 8007860:	d916      	bls.n	8007890 <UART_SetConfig+0x4ac>
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007868:	d212      	bcs.n	8007890 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	b29b      	uxth	r3, r3
 800786e:	f023 030f 	bic.w	r3, r3, #15
 8007872:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	085b      	lsrs	r3, r3, #1
 8007878:	b29b      	uxth	r3, r3
 800787a:	f003 0307 	and.w	r3, r3, #7
 800787e:	b29a      	uxth	r2, r3
 8007880:	8bfb      	ldrh	r3, [r7, #30]
 8007882:	4313      	orrs	r3, r2
 8007884:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	8bfa      	ldrh	r2, [r7, #30]
 800788c:	60da      	str	r2, [r3, #12]
 800788e:	e05b      	b.n	8007948 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007896:	e057      	b.n	8007948 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007898:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800789c:	2b08      	cmp	r3, #8
 800789e:	d828      	bhi.n	80078f2 <UART_SetConfig+0x50e>
 80078a0:	a201      	add	r2, pc, #4	@ (adr r2, 80078a8 <UART_SetConfig+0x4c4>)
 80078a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a6:	bf00      	nop
 80078a8:	080078cd 	.word	0x080078cd
 80078ac:	080078d5 	.word	0x080078d5
 80078b0:	080078dd 	.word	0x080078dd
 80078b4:	080078f3 	.word	0x080078f3
 80078b8:	080078e3 	.word	0x080078e3
 80078bc:	080078f3 	.word	0x080078f3
 80078c0:	080078f3 	.word	0x080078f3
 80078c4:	080078f3 	.word	0x080078f3
 80078c8:	080078eb 	.word	0x080078eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078cc:	f7fd fadc 	bl	8004e88 <HAL_RCC_GetPCLK1Freq>
 80078d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078d2:	e014      	b.n	80078fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078d4:	f7fd faee 	bl	8004eb4 <HAL_RCC_GetPCLK2Freq>
 80078d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078da:	e010      	b.n	80078fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078dc:	4b26      	ldr	r3, [pc, #152]	@ (8007978 <UART_SetConfig+0x594>)
 80078de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80078e0:	e00d      	b.n	80078fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078e2:	f7fd fa65 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 80078e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078e8:	e009      	b.n	80078fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80078f0:	e005      	b.n	80078fe <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80078f2:	2300      	movs	r3, #0
 80078f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80078fc:	bf00      	nop
    }

    if (pclk != 0U)
 80078fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007900:	2b00      	cmp	r3, #0
 8007902:	d021      	beq.n	8007948 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007908:	4a1a      	ldr	r2, [pc, #104]	@ (8007974 <UART_SetConfig+0x590>)
 800790a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800790e:	461a      	mov	r2, r3
 8007910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007912:	fbb3 f2f2 	udiv	r2, r3, r2
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	085b      	lsrs	r3, r3, #1
 800791c:	441a      	add	r2, r3
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	fbb2 f3f3 	udiv	r3, r2, r3
 8007926:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	2b0f      	cmp	r3, #15
 800792c:	d909      	bls.n	8007942 <UART_SetConfig+0x55e>
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007934:	d205      	bcs.n	8007942 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	b29a      	uxth	r2, r3
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	60da      	str	r2, [r3, #12]
 8007940:	e002      	b.n	8007948 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2201      	movs	r2, #1
 800794c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	2201      	movs	r2, #1
 8007954:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	2200      	movs	r2, #0
 800795c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2200      	movs	r2, #0
 8007962:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007964:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007968:	4618      	mov	r0, r3
 800796a:	3730      	adds	r7, #48	@ 0x30
 800796c:	46bd      	mov	sp, r7
 800796e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007972:	bf00      	nop
 8007974:	0800ef30 	.word	0x0800ef30
 8007978:	00f42400 	.word	0x00f42400

0800797c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007988:	f003 0308 	and.w	r3, r3, #8
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00a      	beq.n	80079a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	430a      	orrs	r2, r1
 80079a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00a      	beq.n	80079c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00a      	beq.n	80079ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ee:	f003 0304 	and.w	r3, r3, #4
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00a      	beq.n	8007a0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a10:	f003 0310 	and.w	r3, r3, #16
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00a      	beq.n	8007a2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00a      	beq.n	8007a50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d01a      	beq.n	8007a92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a7a:	d10a      	bne.n	8007a92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00a      	beq.n	8007ab4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	605a      	str	r2, [r3, #4]
  }
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b098      	sub	sp, #96	@ 0x60
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ad0:	f7fa ff0e 	bl	80028f0 <HAL_GetTick>
 8007ad4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0308 	and.w	r3, r3, #8
 8007ae0:	2b08      	cmp	r3, #8
 8007ae2:	d12f      	bne.n	8007b44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ae4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aec:	2200      	movs	r2, #0
 8007aee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f88e 	bl	8007c14 <UART_WaitOnFlagUntilTimeout>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d022      	beq.n	8007b44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b06:	e853 3f00 	ldrex	r3, [r3]
 8007b0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b12:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b24:	e841 2300 	strex	r3, r2, [r1]
 8007b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1e6      	bne.n	8007afe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2220      	movs	r2, #32
 8007b34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e063      	b.n	8007c0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0304 	and.w	r3, r3, #4
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d149      	bne.n	8007be6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f857 	bl	8007c14 <UART_WaitOnFlagUntilTimeout>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d03c      	beq.n	8007be6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b74:	e853 3f00 	ldrex	r3, [r3]
 8007b78:	623b      	str	r3, [r7, #32]
   return(result);
 8007b7a:	6a3b      	ldr	r3, [r7, #32]
 8007b7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	461a      	mov	r2, r3
 8007b88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b92:	e841 2300 	strex	r3, r2, [r1]
 8007b96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1e6      	bne.n	8007b6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3308      	adds	r3, #8
 8007ba4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	e853 3f00 	ldrex	r3, [r3]
 8007bac:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f023 0301 	bic.w	r3, r3, #1
 8007bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3308      	adds	r3, #8
 8007bbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bbe:	61fa      	str	r2, [r7, #28]
 8007bc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	69b9      	ldr	r1, [r7, #24]
 8007bc4:	69fa      	ldr	r2, [r7, #28]
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	617b      	str	r3, [r7, #20]
   return(result);
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e5      	bne.n	8007b9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e012      	b.n	8007c0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2220      	movs	r2, #32
 8007bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3758      	adds	r7, #88	@ 0x58
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	603b      	str	r3, [r7, #0]
 8007c20:	4613      	mov	r3, r2
 8007c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c24:	e04f      	b.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2c:	d04b      	beq.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c2e:	f7fa fe5f 	bl	80028f0 <HAL_GetTick>
 8007c32:	4602      	mov	r2, r0
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	69ba      	ldr	r2, [r7, #24]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d302      	bcc.n	8007c44 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e04e      	b.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0304 	and.w	r3, r3, #4
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d037      	beq.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2b80      	cmp	r3, #128	@ 0x80
 8007c5a:	d034      	beq.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b40      	cmp	r3, #64	@ 0x40
 8007c60:	d031      	beq.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	f003 0308 	and.w	r3, r3, #8
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d110      	bne.n	8007c92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2208      	movs	r2, #8
 8007c76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f000 f920 	bl	8007ebe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2208      	movs	r2, #8
 8007c82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e029      	b.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ca0:	d111      	bne.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007caa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 f906 	bl	8007ebe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2220      	movs	r2, #32
 8007cb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e00f      	b.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	69da      	ldr	r2, [r3, #28]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	4013      	ands	r3, r2
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	bf0c      	ite	eq
 8007cd6:	2301      	moveq	r3, #1
 8007cd8:	2300      	movne	r3, #0
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	461a      	mov	r2, r3
 8007cde:	79fb      	ldrb	r3, [r7, #7]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d0a0      	beq.n	8007c26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b096      	sub	sp, #88	@ 0x58
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	88fa      	ldrh	r2, [r7, #6]
 8007d08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2222      	movs	r2, #34	@ 0x22
 8007d18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d02d      	beq.n	8007d82 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d2c:	4a40      	ldr	r2, [pc, #256]	@ (8007e30 <UART_Start_Receive_DMA+0x140>)
 8007d2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d36:	4a3f      	ldr	r2, [pc, #252]	@ (8007e34 <UART_Start_Receive_DMA+0x144>)
 8007d38:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d40:	4a3d      	ldr	r2, [pc, #244]	@ (8007e38 <UART_Start_Receive_DMA+0x148>)
 8007d42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3324      	adds	r3, #36	@ 0x24
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d60:	461a      	mov	r2, r3
 8007d62:	88fb      	ldrh	r3, [r7, #6]
 8007d64:	f7fb ffbe 	bl	8003ce4 <HAL_DMA_Start_IT>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d009      	beq.n	8007d82 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2210      	movs	r2, #16
 8007d72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e051      	b.n	8007e26 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d018      	beq.n	8007dbc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d92:	e853 3f00 	ldrex	r3, [r3]
 8007d96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	461a      	mov	r2, r3
 8007da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007da8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007daa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007dae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007db0:	e841 2300 	strex	r3, r2, [r1]
 8007db4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007db6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1e6      	bne.n	8007d8a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3308      	adds	r3, #8
 8007dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc6:	e853 3f00 	ldrex	r3, [r3]
 8007dca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dce:	f043 0301 	orr.w	r3, r3, #1
 8007dd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3308      	adds	r3, #8
 8007dda:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ddc:	637a      	str	r2, [r7, #52]	@ 0x34
 8007dde:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007de2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007de4:	e841 2300 	strex	r3, r2, [r1]
 8007de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e5      	bne.n	8007dbc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3308      	adds	r3, #8
 8007df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	e853 3f00 	ldrex	r3, [r3]
 8007dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3308      	adds	r3, #8
 8007e0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e10:	623a      	str	r2, [r7, #32]
 8007e12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e14:	69f9      	ldr	r1, [r7, #28]
 8007e16:	6a3a      	ldr	r2, [r7, #32]
 8007e18:	e841 2300 	strex	r3, r2, [r1]
 8007e1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1e5      	bne.n	8007df0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3758      	adds	r7, #88	@ 0x58
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	08007f8b 	.word	0x08007f8b
 8007e34:	080080b7 	.word	0x080080b7
 8007e38:	080080f5 	.word	0x080080f5

08007e3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b08f      	sub	sp, #60	@ 0x3c
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	e853 3f00 	ldrex	r3, [r3]
 8007e50:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e64:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e6a:	e841 2300 	strex	r3, r2, [r1]
 8007e6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1e6      	bne.n	8007e44 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3308      	adds	r3, #8
 8007e7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	e853 3f00 	ldrex	r3, [r3]
 8007e84:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007e8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3308      	adds	r3, #8
 8007e94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e96:	61ba      	str	r2, [r7, #24]
 8007e98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9a:	6979      	ldr	r1, [r7, #20]
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	e841 2300 	strex	r3, r2, [r1]
 8007ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1e5      	bne.n	8007e76 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007eb2:	bf00      	nop
 8007eb4:	373c      	adds	r7, #60	@ 0x3c
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b095      	sub	sp, #84	@ 0x54
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ece:	e853 3f00 	ldrex	r3, [r3]
 8007ed2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ee4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ee6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007eea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007eec:	e841 2300 	strex	r3, r2, [r1]
 8007ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1e6      	bne.n	8007ec6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	3308      	adds	r3, #8
 8007efe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	e853 3f00 	ldrex	r3, [r3]
 8007f06:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f0e:	f023 0301 	bic.w	r3, r3, #1
 8007f12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	3308      	adds	r3, #8
 8007f1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f24:	e841 2300 	strex	r3, r2, [r1]
 8007f28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1e3      	bne.n	8007ef8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d118      	bne.n	8007f6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	e853 3f00 	ldrex	r3, [r3]
 8007f44:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	f023 0310 	bic.w	r3, r3, #16
 8007f4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f56:	61bb      	str	r3, [r7, #24]
 8007f58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5a:	6979      	ldr	r1, [r7, #20]
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	e841 2300 	strex	r3, r2, [r1]
 8007f62:	613b      	str	r3, [r7, #16]
   return(result);
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1e6      	bne.n	8007f38 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f7e:	bf00      	nop
 8007f80:	3754      	adds	r7, #84	@ 0x54
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b09c      	sub	sp, #112	@ 0x70
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f96:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0320 	and.w	r3, r3, #32
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d171      	bne.n	800808a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fb6:	e853 3f00 	ldrex	r3, [r3]
 8007fba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007fbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fbe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fc2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007fcc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fce:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007fd2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007fd4:	e841 2300 	strex	r3, r2, [r1]
 8007fd8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007fda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1e6      	bne.n	8007fae <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fe0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3308      	adds	r3, #8
 8007fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fea:	e853 3f00 	ldrex	r3, [r3]
 8007fee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ff2:	f023 0301 	bic.w	r3, r3, #1
 8007ff6:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3308      	adds	r3, #8
 8007ffe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008000:	647a      	str	r2, [r7, #68]	@ 0x44
 8008002:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008004:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008006:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008008:	e841 2300 	strex	r3, r2, [r1]
 800800c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800800e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1e5      	bne.n	8007fe0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008014:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3308      	adds	r3, #8
 800801a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801e:	e853 3f00 	ldrex	r3, [r3]
 8008022:	623b      	str	r3, [r7, #32]
   return(result);
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800802a:	663b      	str	r3, [r7, #96]	@ 0x60
 800802c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	3308      	adds	r3, #8
 8008032:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008034:	633a      	str	r2, [r7, #48]	@ 0x30
 8008036:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008038:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800803a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800803c:	e841 2300 	strex	r3, r2, [r1]
 8008040:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e5      	bne.n	8008014 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008048:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800804a:	2220      	movs	r2, #32
 800804c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008050:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008054:	2b01      	cmp	r3, #1
 8008056:	d118      	bne.n	800808a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008058:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	e853 3f00 	ldrex	r3, [r3]
 8008064:	60fb      	str	r3, [r7, #12]
   return(result);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f023 0310 	bic.w	r3, r3, #16
 800806c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800806e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008076:	61fb      	str	r3, [r7, #28]
 8008078:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807a:	69b9      	ldr	r1, [r7, #24]
 800807c:	69fa      	ldr	r2, [r7, #28]
 800807e:	e841 2300 	strex	r3, r2, [r1]
 8008082:	617b      	str	r3, [r7, #20]
   return(result);
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1e6      	bne.n	8008058 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800808a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800808c:	2200      	movs	r2, #0
 800808e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008090:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008094:	2b01      	cmp	r3, #1
 8008096:	d107      	bne.n	80080a8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008098:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800809a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800809e:	4619      	mov	r1, r3
 80080a0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80080a2:	f7ff f993 	bl	80073cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080a6:	e002      	b.n	80080ae <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80080a8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80080aa:	f7f9 fb79 	bl	80017a0 <HAL_UART_RxCpltCallback>
}
 80080ae:	bf00      	nop
 80080b0:	3770      	adds	r7, #112	@ 0x70
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2201      	movs	r2, #1
 80080c8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d109      	bne.n	80080e6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80080d8:	085b      	lsrs	r3, r3, #1
 80080da:	b29b      	uxth	r3, r3
 80080dc:	4619      	mov	r1, r3
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f7ff f974 	bl	80073cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080e4:	e002      	b.n	80080ec <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f7f9 fb38 	bl	800175c <HAL_UART_RxHalfCpltCallback>
}
 80080ec:	bf00      	nop
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008100:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008108:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008110:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800811c:	2b80      	cmp	r3, #128	@ 0x80
 800811e:	d109      	bne.n	8008134 <UART_DMAError+0x40>
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	2b21      	cmp	r3, #33	@ 0x21
 8008124:	d106      	bne.n	8008134 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2200      	movs	r2, #0
 800812a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800812e:	6978      	ldr	r0, [r7, #20]
 8008130:	f7ff fe84 	bl	8007e3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800813e:	2b40      	cmp	r3, #64	@ 0x40
 8008140:	d109      	bne.n	8008156 <UART_DMAError+0x62>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2b22      	cmp	r3, #34	@ 0x22
 8008146:	d106      	bne.n	8008156 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	2200      	movs	r2, #0
 800814c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008150:	6978      	ldr	r0, [r7, #20]
 8008152:	f7ff feb4 	bl	8007ebe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800815c:	f043 0210 	orr.w	r2, r3, #16
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008166:	6978      	ldr	r0, [r7, #20]
 8008168:	f7ff f926 	bl	80073b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800816c:	bf00      	nop
 800816e:	3718      	adds	r7, #24
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008182:	2b01      	cmp	r3, #1
 8008184:	d101      	bne.n	800818a <HAL_UARTEx_DisableFifoMode+0x16>
 8008186:	2302      	movs	r3, #2
 8008188:	e027      	b.n	80081da <HAL_UARTEx_DisableFifoMode+0x66>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2224      	movs	r2, #36	@ 0x24
 8008196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f022 0201 	bic.w	r2, r2, #1
 80081b0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80081b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2220      	movs	r2, #32
 80081cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b084      	sub	sp, #16
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d101      	bne.n	80081fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80081fa:	2302      	movs	r3, #2
 80081fc:	e02d      	b.n	800825a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2224      	movs	r2, #36	@ 0x24
 800820a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f022 0201 	bic.w	r2, r2, #1
 8008224:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	430a      	orrs	r2, r1
 8008238:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f850 	bl	80082e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2220      	movs	r2, #32
 800824c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b084      	sub	sp, #16
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008272:	2b01      	cmp	r3, #1
 8008274:	d101      	bne.n	800827a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008276:	2302      	movs	r3, #2
 8008278:	e02d      	b.n	80082d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2224      	movs	r2, #36	@ 0x24
 8008286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 0201 	bic.w	r2, r2, #1
 80082a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	683a      	ldr	r2, [r7, #0]
 80082b2:	430a      	orrs	r2, r1
 80082b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f812 	bl	80082e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2220      	movs	r2, #32
 80082c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
	...

080082e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d108      	bne.n	8008302 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008300:	e031      	b.n	8008366 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008302:	2308      	movs	r3, #8
 8008304:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008306:	2308      	movs	r3, #8
 8008308:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	0e5b      	lsrs	r3, r3, #25
 8008312:	b2db      	uxtb	r3, r3
 8008314:	f003 0307 	and.w	r3, r3, #7
 8008318:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	0f5b      	lsrs	r3, r3, #29
 8008322:	b2db      	uxtb	r3, r3
 8008324:	f003 0307 	and.w	r3, r3, #7
 8008328:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	7b3a      	ldrb	r2, [r7, #12]
 800832e:	4911      	ldr	r1, [pc, #68]	@ (8008374 <UARTEx_SetNbDataToProcess+0x94>)
 8008330:	5c8a      	ldrb	r2, [r1, r2]
 8008332:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008336:	7b3a      	ldrb	r2, [r7, #12]
 8008338:	490f      	ldr	r1, [pc, #60]	@ (8008378 <UARTEx_SetNbDataToProcess+0x98>)
 800833a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800833c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008340:	b29a      	uxth	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008348:	7bfb      	ldrb	r3, [r7, #15]
 800834a:	7b7a      	ldrb	r2, [r7, #13]
 800834c:	4909      	ldr	r1, [pc, #36]	@ (8008374 <UARTEx_SetNbDataToProcess+0x94>)
 800834e:	5c8a      	ldrb	r2, [r1, r2]
 8008350:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008354:	7b7a      	ldrb	r2, [r7, #13]
 8008356:	4908      	ldr	r1, [pc, #32]	@ (8008378 <UARTEx_SetNbDataToProcess+0x98>)
 8008358:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800835a:	fb93 f3f2 	sdiv	r3, r3, r2
 800835e:	b29a      	uxth	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008366:	bf00      	nop
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	0800ef48 	.word	0x0800ef48
 8008378:	0800ef50 	.word	0x0800ef50

0800837c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	4603      	mov	r3, r0
 8008384:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008386:	2300      	movs	r3, #0
 8008388:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800838a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800838e:	2b84      	cmp	r3, #132	@ 0x84
 8008390:	d005      	beq.n	800839e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008392:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	4413      	add	r3, r2
 800839a:	3303      	adds	r3, #3
 800839c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800839e:	68fb      	ldr	r3, [r7, #12]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80083b0:	f000 fec0 	bl	8009134 <vTaskStartScheduler>
  
  return osOK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	bd80      	pop	{r7, pc}

080083ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80083ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083bc:	b087      	sub	sp, #28
 80083be:	af02      	add	r7, sp, #8
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685c      	ldr	r4, [r3, #4]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083d0:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083d8:	4618      	mov	r0, r3
 80083da:	f7ff ffcf 	bl	800837c <makeFreeRtosPriority>
 80083de:	4602      	mov	r2, r0
 80083e0:	f107 030c 	add.w	r3, r7, #12
 80083e4:	9301      	str	r3, [sp, #4]
 80083e6:	9200      	str	r2, [sp, #0]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	4632      	mov	r2, r6
 80083ec:	4629      	mov	r1, r5
 80083ee:	4620      	mov	r0, r4
 80083f0:	f000 fd36 	bl	8008e60 <xTaskCreate>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d001      	beq.n	80083fe <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80083fa:	2300      	movs	r3, #0
 80083fc:	e000      	b.n	8008400 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80083fe:	68fb      	ldr	r3, [r7, #12]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008408 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <osDelay+0x16>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	e000      	b.n	8008420 <osDelay+0x18>
 800841e:	2301      	movs	r3, #1
 8008420:	4618      	mov	r0, r3
 8008422:	f000 fe51 	bl	80090c8 <vTaskDelay>
  
  return osOK;
 8008426:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f103 0208 	add.w	r2, r3, #8
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f04f 32ff 	mov.w	r2, #4294967295
 8008448:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f103 0208 	add.w	r2, r3, #8
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f103 0208 	add.w	r2, r3, #8
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800847e:	bf00      	nop
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800848a:	b480      	push	{r7}
 800848c:	b085      	sub	sp, #20
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	689a      	ldr	r2, [r3, #8]
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	683a      	ldr	r2, [r7, #0]
 80084ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	683a      	ldr	r2, [r7, #0]
 80084b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	1c5a      	adds	r2, r3, #1
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	601a      	str	r2, [r3, #0]
}
 80084c6:	bf00      	nop
 80084c8:	3714      	adds	r7, #20
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr

080084d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084d2:	b480      	push	{r7}
 80084d4:	b085      	sub	sp, #20
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e8:	d103      	bne.n	80084f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	60fb      	str	r3, [r7, #12]
 80084f0:	e00c      	b.n	800850c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3308      	adds	r3, #8
 80084f6:	60fb      	str	r3, [r7, #12]
 80084f8:	e002      	b.n	8008500 <vListInsert+0x2e>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	60fb      	str	r3, [r7, #12]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	429a      	cmp	r2, r3
 800850a:	d2f6      	bcs.n	80084fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	1c5a      	adds	r2, r3, #1
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	601a      	str	r2, [r3, #0]
}
 8008538:	bf00      	nop
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	6892      	ldr	r2, [r2, #8]
 800855a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	6852      	ldr	r2, [r2, #4]
 8008564:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	429a      	cmp	r2, r3
 800856e:	d103      	bne.n	8008578 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	689a      	ldr	r2, [r3, #8]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	1e5a      	subs	r2, r3, #1
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10b      	bne.n	80085c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80085be:	bf00      	nop
 80085c0:	bf00      	nop
 80085c2:	e7fd      	b.n	80085c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80085c4:	f001 fce0 	bl	8009f88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d0:	68f9      	ldr	r1, [r7, #12]
 80085d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80085d4:	fb01 f303 	mul.w	r3, r1, r3
 80085d8:	441a      	add	r2, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085f4:	3b01      	subs	r3, #1
 80085f6:	68f9      	ldr	r1, [r7, #12]
 80085f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80085fa:	fb01 f303 	mul.w	r3, r1, r3
 80085fe:	441a      	add	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	22ff      	movs	r2, #255	@ 0xff
 8008608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	22ff      	movs	r2, #255	@ 0xff
 8008610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d114      	bne.n	8008644 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d01a      	beq.n	8008658 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	3310      	adds	r3, #16
 8008626:	4618      	mov	r0, r3
 8008628:	f000 ffb4 	bl	8009594 <xTaskRemoveFromEventList>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d012      	beq.n	8008658 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008632:	4b0d      	ldr	r3, [pc, #52]	@ (8008668 <xQueueGenericReset+0xd0>)
 8008634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	e009      	b.n	8008658 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	3310      	adds	r3, #16
 8008648:	4618      	mov	r0, r3
 800864a:	f7ff fef1 	bl	8008430 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3324      	adds	r3, #36	@ 0x24
 8008652:	4618      	mov	r0, r3
 8008654:	f7ff feec 	bl	8008430 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008658:	f001 fcc8 	bl	8009fec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800865c:	2301      	movs	r3, #1
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	e000ed04 	.word	0xe000ed04

0800866c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800866c:	b580      	push	{r7, lr}
 800866e:	b08a      	sub	sp, #40	@ 0x28
 8008670:	af02      	add	r7, sp, #8
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	4613      	mov	r3, r2
 8008678:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10b      	bne.n	8008698 <xQueueGenericCreate+0x2c>
	__asm volatile
 8008680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	613b      	str	r3, [r7, #16]
}
 8008692:	bf00      	nop
 8008694:	bf00      	nop
 8008696:	e7fd      	b.n	8008694 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	fb02 f303 	mul.w	r3, r2, r3
 80086a0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	3348      	adds	r3, #72	@ 0x48
 80086a6:	4618      	mov	r0, r3
 80086a8:	f001 fd90 	bl	800a1cc <pvPortMalloc>
 80086ac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00d      	beq.n	80086d0 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	3348      	adds	r3, #72	@ 0x48
 80086bc:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086be:	79fa      	ldrb	r2, [r7, #7]
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	4613      	mov	r3, r2
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	68b9      	ldr	r1, [r7, #8]
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f000 f805 	bl	80086da <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086d0:	69bb      	ldr	r3, [r7, #24]
	}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3720      	adds	r7, #32
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b084      	sub	sp, #16
 80086de:	af00      	add	r7, sp, #0
 80086e0:	60f8      	str	r0, [r7, #12]
 80086e2:	60b9      	str	r1, [r7, #8]
 80086e4:	607a      	str	r2, [r7, #4]
 80086e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d103      	bne.n	80086f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	69ba      	ldr	r2, [r7, #24]
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	e002      	b.n	80086fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008708:	2101      	movs	r1, #1
 800870a:	69b8      	ldr	r0, [r7, #24]
 800870c:	f7ff ff44 	bl	8008598 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008710:	bf00      	nop
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08e      	sub	sp, #56	@ 0x38
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
 8008724:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008726:	2300      	movs	r3, #0
 8008728:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800872e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10b      	bne.n	800874c <xQueueGenericSend+0x34>
	__asm volatile
 8008734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008738:	f383 8811 	msr	BASEPRI, r3
 800873c:	f3bf 8f6f 	isb	sy
 8008740:	f3bf 8f4f 	dsb	sy
 8008744:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008746:	bf00      	nop
 8008748:	bf00      	nop
 800874a:	e7fd      	b.n	8008748 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d103      	bne.n	800875a <xQueueGenericSend+0x42>
 8008752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <xQueueGenericSend+0x46>
 800875a:	2301      	movs	r3, #1
 800875c:	e000      	b.n	8008760 <xQueueGenericSend+0x48>
 800875e:	2300      	movs	r3, #0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10b      	bne.n	800877c <xQueueGenericSend+0x64>
	__asm volatile
 8008764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008776:	bf00      	nop
 8008778:	bf00      	nop
 800877a:	e7fd      	b.n	8008778 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	2b02      	cmp	r3, #2
 8008780:	d103      	bne.n	800878a <xQueueGenericSend+0x72>
 8008782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008786:	2b01      	cmp	r3, #1
 8008788:	d101      	bne.n	800878e <xQueueGenericSend+0x76>
 800878a:	2301      	movs	r3, #1
 800878c:	e000      	b.n	8008790 <xQueueGenericSend+0x78>
 800878e:	2300      	movs	r3, #0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10b      	bne.n	80087ac <xQueueGenericSend+0x94>
	__asm volatile
 8008794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	623b      	str	r3, [r7, #32]
}
 80087a6:	bf00      	nop
 80087a8:	bf00      	nop
 80087aa:	e7fd      	b.n	80087a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087ac:	f001 f892 	bl	80098d4 <xTaskGetSchedulerState>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d102      	bne.n	80087bc <xQueueGenericSend+0xa4>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <xQueueGenericSend+0xa8>
 80087bc:	2301      	movs	r3, #1
 80087be:	e000      	b.n	80087c2 <xQueueGenericSend+0xaa>
 80087c0:	2300      	movs	r3, #0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10b      	bne.n	80087de <xQueueGenericSend+0xc6>
	__asm volatile
 80087c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	61fb      	str	r3, [r7, #28]
}
 80087d8:	bf00      	nop
 80087da:	bf00      	nop
 80087dc:	e7fd      	b.n	80087da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087de:	f001 fbd3 	bl	8009f88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d302      	bcc.n	80087f4 <xQueueGenericSend+0xdc>
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d129      	bne.n	8008848 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	68b9      	ldr	r1, [r7, #8]
 80087f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087fa:	f000 fa47 	bl	8008c8c <prvCopyDataToQueue>
 80087fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008804:	2b00      	cmp	r3, #0
 8008806:	d010      	beq.n	800882a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880a:	3324      	adds	r3, #36	@ 0x24
 800880c:	4618      	mov	r0, r3
 800880e:	f000 fec1 	bl	8009594 <xTaskRemoveFromEventList>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d013      	beq.n	8008840 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008818:	4b3f      	ldr	r3, [pc, #252]	@ (8008918 <xQueueGenericSend+0x200>)
 800881a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	e00a      	b.n	8008840 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800882a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800882c:	2b00      	cmp	r3, #0
 800882e:	d007      	beq.n	8008840 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008830:	4b39      	ldr	r3, [pc, #228]	@ (8008918 <xQueueGenericSend+0x200>)
 8008832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008840:	f001 fbd4 	bl	8009fec <vPortExitCritical>
				return pdPASS;
 8008844:	2301      	movs	r3, #1
 8008846:	e063      	b.n	8008910 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d103      	bne.n	8008856 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800884e:	f001 fbcd 	bl	8009fec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008852:	2300      	movs	r3, #0
 8008854:	e05c      	b.n	8008910 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008858:	2b00      	cmp	r3, #0
 800885a:	d106      	bne.n	800886a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800885c:	f107 0314 	add.w	r3, r7, #20
 8008860:	4618      	mov	r0, r3
 8008862:	f000 fefb 	bl	800965c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008866:	2301      	movs	r3, #1
 8008868:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800886a:	f001 fbbf 	bl	8009fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800886e:	f000 fca9 	bl	80091c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008872:	f001 fb89 	bl	8009f88 <vPortEnterCritical>
 8008876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008878:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800887c:	b25b      	sxtb	r3, r3
 800887e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008882:	d103      	bne.n	800888c <xQueueGenericSend+0x174>
 8008884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800888c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008892:	b25b      	sxtb	r3, r3
 8008894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008898:	d103      	bne.n	80088a2 <xQueueGenericSend+0x18a>
 800889a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889c:	2200      	movs	r2, #0
 800889e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088a2:	f001 fba3 	bl	8009fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088a6:	1d3a      	adds	r2, r7, #4
 80088a8:	f107 0314 	add.w	r3, r7, #20
 80088ac:	4611      	mov	r1, r2
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 feea 	bl	8009688 <xTaskCheckForTimeOut>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d124      	bne.n	8008904 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088bc:	f000 fab8 	bl	8008e30 <prvIsQueueFull>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d018      	beq.n	80088f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c8:	3310      	adds	r3, #16
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	4611      	mov	r1, r2
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 fe3a 	bl	8009548 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80088d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088d6:	f000 fa43 	bl	8008d60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80088da:	f000 fc81 	bl	80091e0 <xTaskResumeAll>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f47f af7c 	bne.w	80087de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80088e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008918 <xQueueGenericSend+0x200>)
 80088e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	e772      	b.n	80087de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80088f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088fa:	f000 fa31 	bl	8008d60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088fe:	f000 fc6f 	bl	80091e0 <xTaskResumeAll>
 8008902:	e76c      	b.n	80087de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008904:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008906:	f000 fa2b 	bl	8008d60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800890a:	f000 fc69 	bl	80091e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800890e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008910:	4618      	mov	r0, r3
 8008912:	3738      	adds	r7, #56	@ 0x38
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	e000ed04 	.word	0xe000ed04

0800891c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08e      	sub	sp, #56	@ 0x38
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800892a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10b      	bne.n	8008948 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	623b      	str	r3, [r7, #32]
}
 8008942:	bf00      	nop
 8008944:	bf00      	nop
 8008946:	e7fd      	b.n	8008944 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00b      	beq.n	8008968 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	61fb      	str	r3, [r7, #28]
}
 8008962:	bf00      	nop
 8008964:	bf00      	nop
 8008966:	e7fd      	b.n	8008964 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d103      	bne.n	8008978 <xQueueGiveFromISR+0x5c>
 8008970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <xQueueGiveFromISR+0x60>
 8008978:	2301      	movs	r3, #1
 800897a:	e000      	b.n	800897e <xQueueGiveFromISR+0x62>
 800897c:	2300      	movs	r3, #0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10b      	bne.n	800899a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	61bb      	str	r3, [r7, #24]
}
 8008994:	bf00      	nop
 8008996:	bf00      	nop
 8008998:	e7fd      	b.n	8008996 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800899a:	f001 fbd5 	bl	800a148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800899e:	f3ef 8211 	mrs	r2, BASEPRI
 80089a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	617a      	str	r2, [r7, #20]
 80089b4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089b6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089be:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80089c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d22b      	bcs.n	8008a22 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d6:	1c5a      	adds	r2, r3, #1
 80089d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089da:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80089e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e4:	d112      	bne.n	8008a0c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d016      	beq.n	8008a1c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f0:	3324      	adds	r3, #36	@ 0x24
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 fdce 	bl	8009594 <xTaskRemoveFromEventList>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00e      	beq.n	8008a1c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00b      	beq.n	8008a1c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	2201      	movs	r2, #1
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	e007      	b.n	8008a1c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a10:	3301      	adds	r3, #1
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	b25a      	sxtb	r2, r3
 8008a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a20:	e001      	b.n	8008a26 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a22:	2300      	movs	r3, #0
 8008a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a28:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3738      	adds	r7, #56	@ 0x38
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b08e      	sub	sp, #56	@ 0x38
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a46:	2300      	movs	r3, #0
 8008a48:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10b      	bne.n	8008a70 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	623b      	str	r3, [r7, #32]
}
 8008a6a:	bf00      	nop
 8008a6c:	bf00      	nop
 8008a6e:	e7fd      	b.n	8008a6c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00b      	beq.n	8008a90 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	61fb      	str	r3, [r7, #28]
}
 8008a8a:	bf00      	nop
 8008a8c:	bf00      	nop
 8008a8e:	e7fd      	b.n	8008a8c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a90:	f000 ff20 	bl	80098d4 <xTaskGetSchedulerState>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d102      	bne.n	8008aa0 <xQueueSemaphoreTake+0x64>
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <xQueueSemaphoreTake+0x68>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e000      	b.n	8008aa6 <xQueueSemaphoreTake+0x6a>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d10b      	bne.n	8008ac2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aae:	f383 8811 	msr	BASEPRI, r3
 8008ab2:	f3bf 8f6f 	isb	sy
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	61bb      	str	r3, [r7, #24]
}
 8008abc:	bf00      	nop
 8008abe:	bf00      	nop
 8008ac0:	e7fd      	b.n	8008abe <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ac2:	f001 fa61 	bl	8009f88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aca:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d024      	beq.n	8008b1c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad4:	1e5a      	subs	r2, r3, #1
 8008ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d104      	bne.n	8008aec <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008ae2:	f001 f8a3 	bl	8009c2c <pvTaskIncrementMutexHeldCount>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00f      	beq.n	8008b14 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af6:	3310      	adds	r3, #16
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 fd4b 	bl	8009594 <xTaskRemoveFromEventList>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d007      	beq.n	8008b14 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b04:	4b54      	ldr	r3, [pc, #336]	@ (8008c58 <xQueueSemaphoreTake+0x21c>)
 8008b06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b0a:	601a      	str	r2, [r3, #0]
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b14:	f001 fa6a 	bl	8009fec <vPortExitCritical>
				return pdPASS;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e098      	b.n	8008c4e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d112      	bne.n	8008b48 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00b      	beq.n	8008b40 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b2c:	f383 8811 	msr	BASEPRI, r3
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	617b      	str	r3, [r7, #20]
}
 8008b3a:	bf00      	nop
 8008b3c:	bf00      	nop
 8008b3e:	e7fd      	b.n	8008b3c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008b40:	f001 fa54 	bl	8009fec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b44:	2300      	movs	r3, #0
 8008b46:	e082      	b.n	8008c4e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d106      	bne.n	8008b5c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b4e:	f107 030c 	add.w	r3, r7, #12
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 fd82 	bl	800965c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b5c:	f001 fa46 	bl	8009fec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b60:	f000 fb30 	bl	80091c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b64:	f001 fa10 	bl	8009f88 <vPortEnterCritical>
 8008b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b6e:	b25b      	sxtb	r3, r3
 8008b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b74:	d103      	bne.n	8008b7e <xQueueSemaphoreTake+0x142>
 8008b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b84:	b25b      	sxtb	r3, r3
 8008b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b8a:	d103      	bne.n	8008b94 <xQueueSemaphoreTake+0x158>
 8008b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b94:	f001 fa2a 	bl	8009fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b98:	463a      	mov	r2, r7
 8008b9a:	f107 030c 	add.w	r3, r7, #12
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f000 fd71 	bl	8009688 <xTaskCheckForTimeOut>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d132      	bne.n	8008c12 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008bae:	f000 f929 	bl	8008e04 <prvIsQueueEmpty>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d026      	beq.n	8008c06 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d109      	bne.n	8008bd4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008bc0:	f001 f9e2 	bl	8009f88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 fea1 	bl	8009910 <xTaskPriorityInherit>
 8008bce:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008bd0:	f001 fa0c 	bl	8009fec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd6:	3324      	adds	r3, #36	@ 0x24
 8008bd8:	683a      	ldr	r2, [r7, #0]
 8008bda:	4611      	mov	r1, r2
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 fcb3 	bl	8009548 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008be2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008be4:	f000 f8bc 	bl	8008d60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008be8:	f000 fafa 	bl	80091e0 <xTaskResumeAll>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f47f af67 	bne.w	8008ac2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008bf4:	4b18      	ldr	r3, [pc, #96]	@ (8008c58 <xQueueSemaphoreTake+0x21c>)
 8008bf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bfa:	601a      	str	r2, [r3, #0]
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	f3bf 8f6f 	isb	sy
 8008c04:	e75d      	b.n	8008ac2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008c06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c08:	f000 f8aa 	bl	8008d60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c0c:	f000 fae8 	bl	80091e0 <xTaskResumeAll>
 8008c10:	e757      	b.n	8008ac2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008c12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c14:	f000 f8a4 	bl	8008d60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c18:	f000 fae2 	bl	80091e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c1e:	f000 f8f1 	bl	8008e04 <prvIsQueueEmpty>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f43f af4c 	beq.w	8008ac2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00d      	beq.n	8008c4c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008c30:	f001 f9aa 	bl	8009f88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008c34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c36:	f000 f811 	bl	8008c5c <prvGetDisinheritPriorityAfterTimeout>
 8008c3a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 ff62 	bl	8009b0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008c48:	f001 f9d0 	bl	8009fec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3738      	adds	r7, #56	@ 0x38
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	e000ed04 	.word	0xe000ed04

08008c5c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d006      	beq.n	8008c7a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f1c3 0307 	rsb	r3, r3, #7
 8008c76:	60fb      	str	r3, [r7, #12]
 8008c78:	e001      	b.n	8008c7e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
	}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10d      	bne.n	8008cc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d14d      	bne.n	8008d4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f000 fea0 	bl	80099fc <xTaskPriorityDisinherit>
 8008cbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	609a      	str	r2, [r3, #8]
 8008cc4:	e043      	b.n	8008d4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d119      	bne.n	8008d00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6858      	ldr	r0, [r3, #4]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	68b9      	ldr	r1, [r7, #8]
 8008cd8:	f002 fd7b 	bl	800b7d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce4:	441a      	add	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d32b      	bcc.n	8008d4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	605a      	str	r2, [r3, #4]
 8008cfe:	e026      	b.n	8008d4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	68d8      	ldr	r0, [r3, #12]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d08:	461a      	mov	r2, r3
 8008d0a:	68b9      	ldr	r1, [r7, #8]
 8008d0c:	f002 fd61 	bl	800b7d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	68da      	ldr	r2, [r3, #12]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d18:	425b      	negs	r3, r3
 8008d1a:	441a      	add	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	68da      	ldr	r2, [r3, #12]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d207      	bcs.n	8008d3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	689a      	ldr	r2, [r3, #8]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d34:	425b      	negs	r3, r3
 8008d36:	441a      	add	r2, r3
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d105      	bne.n	8008d4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	1c5a      	adds	r2, r3, #1
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008d56:	697b      	ldr	r3, [r7, #20]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d68:	f001 f90e 	bl	8009f88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d74:	e011      	b.n	8008d9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d012      	beq.n	8008da4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	3324      	adds	r3, #36	@ 0x24
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 fc06 	bl	8009594 <xTaskRemoveFromEventList>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d001      	beq.n	8008d92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d8e:	f000 fcdf 	bl	8009750 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
 8008d94:	3b01      	subs	r3, #1
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	dce9      	bgt.n	8008d76 <prvUnlockQueue+0x16>
 8008da2:	e000      	b.n	8008da6 <prvUnlockQueue+0x46>
					break;
 8008da4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	22ff      	movs	r2, #255	@ 0xff
 8008daa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008dae:	f001 f91d 	bl	8009fec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008db2:	f001 f8e9 	bl	8009f88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008dbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008dbe:	e011      	b.n	8008de4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d012      	beq.n	8008dee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	3310      	adds	r3, #16
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f000 fbe1 	bl	8009594 <xTaskRemoveFromEventList>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d001      	beq.n	8008ddc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008dd8:	f000 fcba 	bl	8009750 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ddc:	7bbb      	ldrb	r3, [r7, #14]
 8008dde:	3b01      	subs	r3, #1
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008de4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	dce9      	bgt.n	8008dc0 <prvUnlockQueue+0x60>
 8008dec:	e000      	b.n	8008df0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008dee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	22ff      	movs	r2, #255	@ 0xff
 8008df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008df8:	f001 f8f8 	bl	8009fec <vPortExitCritical>
}
 8008dfc:	bf00      	nop
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e0c:	f001 f8bc 	bl	8009f88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d102      	bne.n	8008e1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	60fb      	str	r3, [r7, #12]
 8008e1c:	e001      	b.n	8008e22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e22:	f001 f8e3 	bl	8009fec <vPortExitCritical>

	return xReturn;
 8008e26:	68fb      	ldr	r3, [r7, #12]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e38:	f001 f8a6 	bl	8009f88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d102      	bne.n	8008e4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	e001      	b.n	8008e52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e52:	f001 f8cb 	bl	8009fec <vPortExitCritical>

	return xReturn;
 8008e56:	68fb      	ldr	r3, [r7, #12]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b08c      	sub	sp, #48	@ 0x30
 8008e64:	af04      	add	r7, sp, #16
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	603b      	str	r3, [r7, #0]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e70:	88fb      	ldrh	r3, [r7, #6]
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4618      	mov	r0, r3
 8008e76:	f001 f9a9 	bl	800a1cc <pvPortMalloc>
 8008e7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00e      	beq.n	8008ea0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e82:	2054      	movs	r0, #84	@ 0x54
 8008e84:	f001 f9a2 	bl	800a1cc <pvPortMalloc>
 8008e88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e96:	e005      	b.n	8008ea4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e98:	6978      	ldr	r0, [r7, #20]
 8008e9a:	f001 fa65 	bl	800a368 <vPortFree>
 8008e9e:	e001      	b.n	8008ea4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d013      	beq.n	8008ed2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008eaa:	88fa      	ldrh	r2, [r7, #6]
 8008eac:	2300      	movs	r3, #0
 8008eae:	9303      	str	r3, [sp, #12]
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	9302      	str	r3, [sp, #8]
 8008eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	68b9      	ldr	r1, [r7, #8]
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 f80e 	bl	8008ee2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ec6:	69f8      	ldr	r0, [r7, #28]
 8008ec8:	f000 f894 	bl	8008ff4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	61bb      	str	r3, [r7, #24]
 8008ed0:	e002      	b.n	8008ed8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ed8:	69bb      	ldr	r3, [r7, #24]
	}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3720      	adds	r7, #32
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b088      	sub	sp, #32
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	60f8      	str	r0, [r7, #12]
 8008eea:	60b9      	str	r1, [r7, #8]
 8008eec:	607a      	str	r2, [r7, #4]
 8008eee:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008efa:	3b01      	subs	r3, #1
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4413      	add	r3, r2
 8008f00:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	f023 0307 	bic.w	r3, r3, #7
 8008f08:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	f003 0307 	and.w	r3, r3, #7
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00b      	beq.n	8008f2c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f18:	f383 8811 	msr	BASEPRI, r3
 8008f1c:	f3bf 8f6f 	isb	sy
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	617b      	str	r3, [r7, #20]
}
 8008f26:	bf00      	nop
 8008f28:	bf00      	nop
 8008f2a:	e7fd      	b.n	8008f28 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d01f      	beq.n	8008f72 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f32:	2300      	movs	r3, #0
 8008f34:	61fb      	str	r3, [r7, #28]
 8008f36:	e012      	b.n	8008f5e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	7819      	ldrb	r1, [r3, #0]
 8008f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	4413      	add	r3, r2
 8008f46:	3334      	adds	r3, #52	@ 0x34
 8008f48:	460a      	mov	r2, r1
 8008f4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	4413      	add	r3, r2
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d006      	beq.n	8008f66 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	61fb      	str	r3, [r7, #28]
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	2b0f      	cmp	r3, #15
 8008f62:	d9e9      	bls.n	8008f38 <prvInitialiseNewTask+0x56>
 8008f64:	e000      	b.n	8008f68 <prvInitialiseNewTask+0x86>
			{
				break;
 8008f66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008f70:	e003      	b.n	8008f7a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f7c:	2b06      	cmp	r3, #6
 8008f7e:	d901      	bls.n	8008f84 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f80:	2306      	movs	r3, #6
 8008f82:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f88:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f8e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f92:	2200      	movs	r2, #0
 8008f94:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f98:	3304      	adds	r3, #4
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7ff fa68 	bl	8008470 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa2:	3318      	adds	r3, #24
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7ff fa63 	bl	8008470 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb2:	f1c3 0207 	rsb	r2, r3, #7
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fbe:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	68f9      	ldr	r1, [r7, #12]
 8008fd2:	69b8      	ldr	r0, [r7, #24]
 8008fd4:	f000 fea4 	bl	8009d20 <pxPortInitialiseStack>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fdc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d002      	beq.n	8008fea <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fe8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fea:	bf00      	nop
 8008fec:	3720      	adds	r7, #32
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
	...

08008ff4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ffc:	f000 ffc4 	bl	8009f88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009000:	4b2a      	ldr	r3, [pc, #168]	@ (80090ac <prvAddNewTaskToReadyList+0xb8>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	3301      	adds	r3, #1
 8009006:	4a29      	ldr	r2, [pc, #164]	@ (80090ac <prvAddNewTaskToReadyList+0xb8>)
 8009008:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800900a:	4b29      	ldr	r3, [pc, #164]	@ (80090b0 <prvAddNewTaskToReadyList+0xbc>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d109      	bne.n	8009026 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009012:	4a27      	ldr	r2, [pc, #156]	@ (80090b0 <prvAddNewTaskToReadyList+0xbc>)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009018:	4b24      	ldr	r3, [pc, #144]	@ (80090ac <prvAddNewTaskToReadyList+0xb8>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d110      	bne.n	8009042 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009020:	f000 fbba 	bl	8009798 <prvInitialiseTaskLists>
 8009024:	e00d      	b.n	8009042 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009026:	4b23      	ldr	r3, [pc, #140]	@ (80090b4 <prvAddNewTaskToReadyList+0xc0>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d109      	bne.n	8009042 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800902e:	4b20      	ldr	r3, [pc, #128]	@ (80090b0 <prvAddNewTaskToReadyList+0xbc>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009038:	429a      	cmp	r2, r3
 800903a:	d802      	bhi.n	8009042 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800903c:	4a1c      	ldr	r2, [pc, #112]	@ (80090b0 <prvAddNewTaskToReadyList+0xbc>)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009042:	4b1d      	ldr	r3, [pc, #116]	@ (80090b8 <prvAddNewTaskToReadyList+0xc4>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	3301      	adds	r3, #1
 8009048:	4a1b      	ldr	r2, [pc, #108]	@ (80090b8 <prvAddNewTaskToReadyList+0xc4>)
 800904a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009050:	2201      	movs	r2, #1
 8009052:	409a      	lsls	r2, r3
 8009054:	4b19      	ldr	r3, [pc, #100]	@ (80090bc <prvAddNewTaskToReadyList+0xc8>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4313      	orrs	r3, r2
 800905a:	4a18      	ldr	r2, [pc, #96]	@ (80090bc <prvAddNewTaskToReadyList+0xc8>)
 800905c:	6013      	str	r3, [r2, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009062:	4613      	mov	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4413      	add	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4a15      	ldr	r2, [pc, #84]	@ (80090c0 <prvAddNewTaskToReadyList+0xcc>)
 800906c:	441a      	add	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	3304      	adds	r3, #4
 8009072:	4619      	mov	r1, r3
 8009074:	4610      	mov	r0, r2
 8009076:	f7ff fa08 	bl	800848a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800907a:	f000 ffb7 	bl	8009fec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800907e:	4b0d      	ldr	r3, [pc, #52]	@ (80090b4 <prvAddNewTaskToReadyList+0xc0>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00e      	beq.n	80090a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009086:	4b0a      	ldr	r3, [pc, #40]	@ (80090b0 <prvAddNewTaskToReadyList+0xbc>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009090:	429a      	cmp	r2, r3
 8009092:	d207      	bcs.n	80090a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009094:	4b0b      	ldr	r3, [pc, #44]	@ (80090c4 <prvAddNewTaskToReadyList+0xd0>)
 8009096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800909a:	601a      	str	r2, [r3, #0]
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090a4:	bf00      	nop
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	20001960 	.word	0x20001960
 80090b0:	20001860 	.word	0x20001860
 80090b4:	2000196c 	.word	0x2000196c
 80090b8:	2000197c 	.word	0x2000197c
 80090bc:	20001968 	.word	0x20001968
 80090c0:	20001864 	.word	0x20001864
 80090c4:	e000ed04 	.word	0xe000ed04

080090c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80090d0:	2300      	movs	r3, #0
 80090d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d018      	beq.n	800910c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80090da:	4b14      	ldr	r3, [pc, #80]	@ (800912c <vTaskDelay+0x64>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00b      	beq.n	80090fa <vTaskDelay+0x32>
	__asm volatile
 80090e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	60bb      	str	r3, [r7, #8]
}
 80090f4:	bf00      	nop
 80090f6:	bf00      	nop
 80090f8:	e7fd      	b.n	80090f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80090fa:	f000 f863 	bl	80091c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80090fe:	2100      	movs	r1, #0
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fda7 	bl	8009c54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009106:	f000 f86b 	bl	80091e0 <xTaskResumeAll>
 800910a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d107      	bne.n	8009122 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009112:	4b07      	ldr	r3, [pc, #28]	@ (8009130 <vTaskDelay+0x68>)
 8009114:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009118:	601a      	str	r2, [r3, #0]
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009122:	bf00      	nop
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	20001988 	.word	0x20001988
 8009130:	e000ed04 	.word	0xe000ed04

08009134 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800913a:	4b1c      	ldr	r3, [pc, #112]	@ (80091ac <vTaskStartScheduler+0x78>)
 800913c:	9301      	str	r3, [sp, #4]
 800913e:	2300      	movs	r3, #0
 8009140:	9300      	str	r3, [sp, #0]
 8009142:	2300      	movs	r3, #0
 8009144:	2280      	movs	r2, #128	@ 0x80
 8009146:	491a      	ldr	r1, [pc, #104]	@ (80091b0 <vTaskStartScheduler+0x7c>)
 8009148:	481a      	ldr	r0, [pc, #104]	@ (80091b4 <vTaskStartScheduler+0x80>)
 800914a:	f7ff fe89 	bl	8008e60 <xTaskCreate>
 800914e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d116      	bne.n	8009184 <vTaskStartScheduler+0x50>
	__asm volatile
 8009156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800915a:	f383 8811 	msr	BASEPRI, r3
 800915e:	f3bf 8f6f 	isb	sy
 8009162:	f3bf 8f4f 	dsb	sy
 8009166:	60bb      	str	r3, [r7, #8]
}
 8009168:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800916a:	4b13      	ldr	r3, [pc, #76]	@ (80091b8 <vTaskStartScheduler+0x84>)
 800916c:	f04f 32ff 	mov.w	r2, #4294967295
 8009170:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009172:	4b12      	ldr	r3, [pc, #72]	@ (80091bc <vTaskStartScheduler+0x88>)
 8009174:	2201      	movs	r2, #1
 8009176:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009178:	4b11      	ldr	r3, [pc, #68]	@ (80091c0 <vTaskStartScheduler+0x8c>)
 800917a:	2200      	movs	r2, #0
 800917c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800917e:	f000 fe5f 	bl	8009e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009182:	e00f      	b.n	80091a4 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918a:	d10b      	bne.n	80091a4 <vTaskStartScheduler+0x70>
	__asm volatile
 800918c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	607b      	str	r3, [r7, #4]
}
 800919e:	bf00      	nop
 80091a0:	bf00      	nop
 80091a2:	e7fd      	b.n	80091a0 <vTaskStartScheduler+0x6c>
}
 80091a4:	bf00      	nop
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	20001984 	.word	0x20001984
 80091b0:	0800ef10 	.word	0x0800ef10
 80091b4:	08009769 	.word	0x08009769
 80091b8:	20001980 	.word	0x20001980
 80091bc:	2000196c 	.word	0x2000196c
 80091c0:	20001964 	.word	0x20001964

080091c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80091c4:	b480      	push	{r7}
 80091c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80091c8:	4b04      	ldr	r3, [pc, #16]	@ (80091dc <vTaskSuspendAll+0x18>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3301      	adds	r3, #1
 80091ce:	4a03      	ldr	r2, [pc, #12]	@ (80091dc <vTaskSuspendAll+0x18>)
 80091d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80091d2:	bf00      	nop
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	20001988 	.word	0x20001988

080091e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80091e6:	2300      	movs	r3, #0
 80091e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80091ea:	2300      	movs	r3, #0
 80091ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80091ee:	4b42      	ldr	r3, [pc, #264]	@ (80092f8 <xTaskResumeAll+0x118>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10b      	bne.n	800920e <xTaskResumeAll+0x2e>
	__asm volatile
 80091f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	603b      	str	r3, [r7, #0]
}
 8009208:	bf00      	nop
 800920a:	bf00      	nop
 800920c:	e7fd      	b.n	800920a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800920e:	f000 febb 	bl	8009f88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009212:	4b39      	ldr	r3, [pc, #228]	@ (80092f8 <xTaskResumeAll+0x118>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3b01      	subs	r3, #1
 8009218:	4a37      	ldr	r2, [pc, #220]	@ (80092f8 <xTaskResumeAll+0x118>)
 800921a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800921c:	4b36      	ldr	r3, [pc, #216]	@ (80092f8 <xTaskResumeAll+0x118>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d161      	bne.n	80092e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009224:	4b35      	ldr	r3, [pc, #212]	@ (80092fc <xTaskResumeAll+0x11c>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d05d      	beq.n	80092e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800922c:	e02e      	b.n	800928c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800922e:	4b34      	ldr	r3, [pc, #208]	@ (8009300 <xTaskResumeAll+0x120>)
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	3318      	adds	r3, #24
 800923a:	4618      	mov	r0, r3
 800923c:	f7ff f982 	bl	8008544 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	3304      	adds	r3, #4
 8009244:	4618      	mov	r0, r3
 8009246:	f7ff f97d 	bl	8008544 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800924e:	2201      	movs	r2, #1
 8009250:	409a      	lsls	r2, r3
 8009252:	4b2c      	ldr	r3, [pc, #176]	@ (8009304 <xTaskResumeAll+0x124>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4313      	orrs	r3, r2
 8009258:	4a2a      	ldr	r2, [pc, #168]	@ (8009304 <xTaskResumeAll+0x124>)
 800925a:	6013      	str	r3, [r2, #0]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009260:	4613      	mov	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4413      	add	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	4a27      	ldr	r2, [pc, #156]	@ (8009308 <xTaskResumeAll+0x128>)
 800926a:	441a      	add	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	3304      	adds	r3, #4
 8009270:	4619      	mov	r1, r3
 8009272:	4610      	mov	r0, r2
 8009274:	f7ff f909 	bl	800848a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800927c:	4b23      	ldr	r3, [pc, #140]	@ (800930c <xTaskResumeAll+0x12c>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009282:	429a      	cmp	r2, r3
 8009284:	d302      	bcc.n	800928c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009286:	4b22      	ldr	r3, [pc, #136]	@ (8009310 <xTaskResumeAll+0x130>)
 8009288:	2201      	movs	r2, #1
 800928a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800928c:	4b1c      	ldr	r3, [pc, #112]	@ (8009300 <xTaskResumeAll+0x120>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1cc      	bne.n	800922e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800929a:	f000 fafb 	bl	8009894 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800929e:	4b1d      	ldr	r3, [pc, #116]	@ (8009314 <xTaskResumeAll+0x134>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d010      	beq.n	80092cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092aa:	f000 f837 	bl	800931c <xTaskIncrementTick>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d002      	beq.n	80092ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80092b4:	4b16      	ldr	r3, [pc, #88]	@ (8009310 <xTaskResumeAll+0x130>)
 80092b6:	2201      	movs	r2, #1
 80092b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	3b01      	subs	r3, #1
 80092be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1f1      	bne.n	80092aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80092c6:	4b13      	ldr	r3, [pc, #76]	@ (8009314 <xTaskResumeAll+0x134>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80092cc:	4b10      	ldr	r3, [pc, #64]	@ (8009310 <xTaskResumeAll+0x130>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d009      	beq.n	80092e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80092d4:	2301      	movs	r3, #1
 80092d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80092d8:	4b0f      	ldr	r3, [pc, #60]	@ (8009318 <xTaskResumeAll+0x138>)
 80092da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092de:	601a      	str	r2, [r3, #0]
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092e8:	f000 fe80 	bl	8009fec <vPortExitCritical>

	return xAlreadyYielded;
 80092ec:	68bb      	ldr	r3, [r7, #8]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	20001988 	.word	0x20001988
 80092fc:	20001960 	.word	0x20001960
 8009300:	20001920 	.word	0x20001920
 8009304:	20001968 	.word	0x20001968
 8009308:	20001864 	.word	0x20001864
 800930c:	20001860 	.word	0x20001860
 8009310:	20001974 	.word	0x20001974
 8009314:	20001970 	.word	0x20001970
 8009318:	e000ed04 	.word	0xe000ed04

0800931c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009322:	2300      	movs	r3, #0
 8009324:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009326:	4b4f      	ldr	r3, [pc, #316]	@ (8009464 <xTaskIncrementTick+0x148>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	f040 808f 	bne.w	800944e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009330:	4b4d      	ldr	r3, [pc, #308]	@ (8009468 <xTaskIncrementTick+0x14c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3301      	adds	r3, #1
 8009336:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009338:	4a4b      	ldr	r2, [pc, #300]	@ (8009468 <xTaskIncrementTick+0x14c>)
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d121      	bne.n	8009388 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009344:	4b49      	ldr	r3, [pc, #292]	@ (800946c <xTaskIncrementTick+0x150>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00b      	beq.n	8009366 <xTaskIncrementTick+0x4a>
	__asm volatile
 800934e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	603b      	str	r3, [r7, #0]
}
 8009360:	bf00      	nop
 8009362:	bf00      	nop
 8009364:	e7fd      	b.n	8009362 <xTaskIncrementTick+0x46>
 8009366:	4b41      	ldr	r3, [pc, #260]	@ (800946c <xTaskIncrementTick+0x150>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	4b40      	ldr	r3, [pc, #256]	@ (8009470 <xTaskIncrementTick+0x154>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a3e      	ldr	r2, [pc, #248]	@ (800946c <xTaskIncrementTick+0x150>)
 8009372:	6013      	str	r3, [r2, #0]
 8009374:	4a3e      	ldr	r2, [pc, #248]	@ (8009470 <xTaskIncrementTick+0x154>)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6013      	str	r3, [r2, #0]
 800937a:	4b3e      	ldr	r3, [pc, #248]	@ (8009474 <xTaskIncrementTick+0x158>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	3301      	adds	r3, #1
 8009380:	4a3c      	ldr	r2, [pc, #240]	@ (8009474 <xTaskIncrementTick+0x158>)
 8009382:	6013      	str	r3, [r2, #0]
 8009384:	f000 fa86 	bl	8009894 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009388:	4b3b      	ldr	r3, [pc, #236]	@ (8009478 <xTaskIncrementTick+0x15c>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	429a      	cmp	r2, r3
 8009390:	d348      	bcc.n	8009424 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009392:	4b36      	ldr	r3, [pc, #216]	@ (800946c <xTaskIncrementTick+0x150>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d104      	bne.n	80093a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800939c:	4b36      	ldr	r3, [pc, #216]	@ (8009478 <xTaskIncrementTick+0x15c>)
 800939e:	f04f 32ff 	mov.w	r2, #4294967295
 80093a2:	601a      	str	r2, [r3, #0]
					break;
 80093a4:	e03e      	b.n	8009424 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093a6:	4b31      	ldr	r3, [pc, #196]	@ (800946c <xTaskIncrementTick+0x150>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d203      	bcs.n	80093c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80093be:	4a2e      	ldr	r2, [pc, #184]	@ (8009478 <xTaskIncrementTick+0x15c>)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80093c4:	e02e      	b.n	8009424 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	3304      	adds	r3, #4
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7ff f8ba 	bl	8008544 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d004      	beq.n	80093e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	3318      	adds	r3, #24
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff f8b1 	bl	8008544 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e6:	2201      	movs	r2, #1
 80093e8:	409a      	lsls	r2, r3
 80093ea:	4b24      	ldr	r3, [pc, #144]	@ (800947c <xTaskIncrementTick+0x160>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	4a22      	ldr	r2, [pc, #136]	@ (800947c <xTaskIncrementTick+0x160>)
 80093f2:	6013      	str	r3, [r2, #0]
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093f8:	4613      	mov	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	4413      	add	r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4a1f      	ldr	r2, [pc, #124]	@ (8009480 <xTaskIncrementTick+0x164>)
 8009402:	441a      	add	r2, r3
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	3304      	adds	r3, #4
 8009408:	4619      	mov	r1, r3
 800940a:	4610      	mov	r0, r2
 800940c:	f7ff f83d 	bl	800848a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009414:	4b1b      	ldr	r3, [pc, #108]	@ (8009484 <xTaskIncrementTick+0x168>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800941a:	429a      	cmp	r2, r3
 800941c:	d3b9      	bcc.n	8009392 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800941e:	2301      	movs	r3, #1
 8009420:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009422:	e7b6      	b.n	8009392 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009424:	4b17      	ldr	r3, [pc, #92]	@ (8009484 <xTaskIncrementTick+0x168>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800942a:	4915      	ldr	r1, [pc, #84]	@ (8009480 <xTaskIncrementTick+0x164>)
 800942c:	4613      	mov	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	440b      	add	r3, r1
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b01      	cmp	r3, #1
 800943a:	d901      	bls.n	8009440 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800943c:	2301      	movs	r3, #1
 800943e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009440:	4b11      	ldr	r3, [pc, #68]	@ (8009488 <xTaskIncrementTick+0x16c>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d007      	beq.n	8009458 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009448:	2301      	movs	r3, #1
 800944a:	617b      	str	r3, [r7, #20]
 800944c:	e004      	b.n	8009458 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800944e:	4b0f      	ldr	r3, [pc, #60]	@ (800948c <xTaskIncrementTick+0x170>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3301      	adds	r3, #1
 8009454:	4a0d      	ldr	r2, [pc, #52]	@ (800948c <xTaskIncrementTick+0x170>)
 8009456:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009458:	697b      	ldr	r3, [r7, #20]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3718      	adds	r7, #24
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	20001988 	.word	0x20001988
 8009468:	20001964 	.word	0x20001964
 800946c:	20001918 	.word	0x20001918
 8009470:	2000191c 	.word	0x2000191c
 8009474:	20001978 	.word	0x20001978
 8009478:	20001980 	.word	0x20001980
 800947c:	20001968 	.word	0x20001968
 8009480:	20001864 	.word	0x20001864
 8009484:	20001860 	.word	0x20001860
 8009488:	20001974 	.word	0x20001974
 800948c:	20001970 	.word	0x20001970

08009490 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009490:	b480      	push	{r7}
 8009492:	b087      	sub	sp, #28
 8009494:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009496:	4b27      	ldr	r3, [pc, #156]	@ (8009534 <vTaskSwitchContext+0xa4>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d003      	beq.n	80094a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800949e:	4b26      	ldr	r3, [pc, #152]	@ (8009538 <vTaskSwitchContext+0xa8>)
 80094a0:	2201      	movs	r2, #1
 80094a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80094a4:	e040      	b.n	8009528 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80094a6:	4b24      	ldr	r3, [pc, #144]	@ (8009538 <vTaskSwitchContext+0xa8>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ac:	4b23      	ldr	r3, [pc, #140]	@ (800953c <vTaskSwitchContext+0xac>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	fab3 f383 	clz	r3, r3
 80094b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80094ba:	7afb      	ldrb	r3, [r7, #11]
 80094bc:	f1c3 031f 	rsb	r3, r3, #31
 80094c0:	617b      	str	r3, [r7, #20]
 80094c2:	491f      	ldr	r1, [pc, #124]	@ (8009540 <vTaskSwitchContext+0xb0>)
 80094c4:	697a      	ldr	r2, [r7, #20]
 80094c6:	4613      	mov	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	440b      	add	r3, r1
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10b      	bne.n	80094ee <vTaskSwitchContext+0x5e>
	__asm volatile
 80094d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094da:	f383 8811 	msr	BASEPRI, r3
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f3bf 8f4f 	dsb	sy
 80094e6:	607b      	str	r3, [r7, #4]
}
 80094e8:	bf00      	nop
 80094ea:	bf00      	nop
 80094ec:	e7fd      	b.n	80094ea <vTaskSwitchContext+0x5a>
 80094ee:	697a      	ldr	r2, [r7, #20]
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4a11      	ldr	r2, [pc, #68]	@ (8009540 <vTaskSwitchContext+0xb0>)
 80094fa:	4413      	add	r3, r2
 80094fc:	613b      	str	r3, [r7, #16]
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	685a      	ldr	r2, [r3, #4]
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	605a      	str	r2, [r3, #4]
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	3308      	adds	r3, #8
 8009510:	429a      	cmp	r2, r3
 8009512:	d104      	bne.n	800951e <vTaskSwitchContext+0x8e>
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	605a      	str	r2, [r3, #4]
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	4a07      	ldr	r2, [pc, #28]	@ (8009544 <vTaskSwitchContext+0xb4>)
 8009526:	6013      	str	r3, [r2, #0]
}
 8009528:	bf00      	nop
 800952a:	371c      	adds	r7, #28
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	20001988 	.word	0x20001988
 8009538:	20001974 	.word	0x20001974
 800953c:	20001968 	.word	0x20001968
 8009540:	20001864 	.word	0x20001864
 8009544:	20001860 	.word	0x20001860

08009548 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10b      	bne.n	8009570 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800955c:	f383 8811 	msr	BASEPRI, r3
 8009560:	f3bf 8f6f 	isb	sy
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	60fb      	str	r3, [r7, #12]
}
 800956a:	bf00      	nop
 800956c:	bf00      	nop
 800956e:	e7fd      	b.n	800956c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009570:	4b07      	ldr	r3, [pc, #28]	@ (8009590 <vTaskPlaceOnEventList+0x48>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3318      	adds	r3, #24
 8009576:	4619      	mov	r1, r3
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7fe ffaa 	bl	80084d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800957e:	2101      	movs	r1, #1
 8009580:	6838      	ldr	r0, [r7, #0]
 8009582:	f000 fb67 	bl	8009c54 <prvAddCurrentTaskToDelayedList>
}
 8009586:	bf00      	nop
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20001860 	.word	0x20001860

08009594 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b086      	sub	sp, #24
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10b      	bne.n	80095c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80095aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	60fb      	str	r3, [r7, #12]
}
 80095bc:	bf00      	nop
 80095be:	bf00      	nop
 80095c0:	e7fd      	b.n	80095be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	3318      	adds	r3, #24
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fe ffbc 	bl	8008544 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095cc:	4b1d      	ldr	r3, [pc, #116]	@ (8009644 <xTaskRemoveFromEventList+0xb0>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d11c      	bne.n	800960e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	3304      	adds	r3, #4
 80095d8:	4618      	mov	r0, r3
 80095da:	f7fe ffb3 	bl	8008544 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e2:	2201      	movs	r2, #1
 80095e4:	409a      	lsls	r2, r3
 80095e6:	4b18      	ldr	r3, [pc, #96]	@ (8009648 <xTaskRemoveFromEventList+0xb4>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	4a16      	ldr	r2, [pc, #88]	@ (8009648 <xTaskRemoveFromEventList+0xb4>)
 80095ee:	6013      	str	r3, [r2, #0]
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095f4:	4613      	mov	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	4a13      	ldr	r2, [pc, #76]	@ (800964c <xTaskRemoveFromEventList+0xb8>)
 80095fe:	441a      	add	r2, r3
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	3304      	adds	r3, #4
 8009604:	4619      	mov	r1, r3
 8009606:	4610      	mov	r0, r2
 8009608:	f7fe ff3f 	bl	800848a <vListInsertEnd>
 800960c:	e005      	b.n	800961a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	3318      	adds	r3, #24
 8009612:	4619      	mov	r1, r3
 8009614:	480e      	ldr	r0, [pc, #56]	@ (8009650 <xTaskRemoveFromEventList+0xbc>)
 8009616:	f7fe ff38 	bl	800848a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800961e:	4b0d      	ldr	r3, [pc, #52]	@ (8009654 <xTaskRemoveFromEventList+0xc0>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009624:	429a      	cmp	r2, r3
 8009626:	d905      	bls.n	8009634 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009628:	2301      	movs	r3, #1
 800962a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800962c:	4b0a      	ldr	r3, [pc, #40]	@ (8009658 <xTaskRemoveFromEventList+0xc4>)
 800962e:	2201      	movs	r2, #1
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	e001      	b.n	8009638 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009634:	2300      	movs	r3, #0
 8009636:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009638:	697b      	ldr	r3, [r7, #20]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3718      	adds	r7, #24
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20001988 	.word	0x20001988
 8009648:	20001968 	.word	0x20001968
 800964c:	20001864 	.word	0x20001864
 8009650:	20001920 	.word	0x20001920
 8009654:	20001860 	.word	0x20001860
 8009658:	20001974 	.word	0x20001974

0800965c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009664:	4b06      	ldr	r3, [pc, #24]	@ (8009680 <vTaskInternalSetTimeOutState+0x24>)
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800966c:	4b05      	ldr	r3, [pc, #20]	@ (8009684 <vTaskInternalSetTimeOutState+0x28>)
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	605a      	str	r2, [r3, #4]
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	20001978 	.word	0x20001978
 8009684:	20001964 	.word	0x20001964

08009688 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b088      	sub	sp, #32
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d10b      	bne.n	80096b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	613b      	str	r3, [r7, #16]
}
 80096aa:	bf00      	nop
 80096ac:	bf00      	nop
 80096ae:	e7fd      	b.n	80096ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10b      	bne.n	80096ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80096b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	60fb      	str	r3, [r7, #12]
}
 80096c8:	bf00      	nop
 80096ca:	bf00      	nop
 80096cc:	e7fd      	b.n	80096ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80096ce:	f000 fc5b 	bl	8009f88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80096d2:	4b1d      	ldr	r3, [pc, #116]	@ (8009748 <xTaskCheckForTimeOut+0xc0>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	69ba      	ldr	r2, [r7, #24]
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ea:	d102      	bne.n	80096f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80096ec:	2300      	movs	r3, #0
 80096ee:	61fb      	str	r3, [r7, #28]
 80096f0:	e023      	b.n	800973a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	4b15      	ldr	r3, [pc, #84]	@ (800974c <xTaskCheckForTimeOut+0xc4>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d007      	beq.n	800970e <xTaskCheckForTimeOut+0x86>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	69ba      	ldr	r2, [r7, #24]
 8009704:	429a      	cmp	r2, r3
 8009706:	d302      	bcc.n	800970e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009708:	2301      	movs	r3, #1
 800970a:	61fb      	str	r3, [r7, #28]
 800970c:	e015      	b.n	800973a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	429a      	cmp	r2, r3
 8009716:	d20b      	bcs.n	8009730 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	1ad2      	subs	r2, r2, r3
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f7ff ff99 	bl	800965c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800972a:	2300      	movs	r3, #0
 800972c:	61fb      	str	r3, [r7, #28]
 800972e:	e004      	b.n	800973a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	2200      	movs	r2, #0
 8009734:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009736:	2301      	movs	r3, #1
 8009738:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800973a:	f000 fc57 	bl	8009fec <vPortExitCritical>

	return xReturn;
 800973e:	69fb      	ldr	r3, [r7, #28]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3720      	adds	r7, #32
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	20001964 	.word	0x20001964
 800974c:	20001978 	.word	0x20001978

08009750 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009750:	b480      	push	{r7}
 8009752:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009754:	4b03      	ldr	r3, [pc, #12]	@ (8009764 <vTaskMissedYield+0x14>)
 8009756:	2201      	movs	r2, #1
 8009758:	601a      	str	r2, [r3, #0]
}
 800975a:	bf00      	nop
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr
 8009764:	20001974 	.word	0x20001974

08009768 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009770:	f000 f852 	bl	8009818 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009774:	4b06      	ldr	r3, [pc, #24]	@ (8009790 <prvIdleTask+0x28>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d9f9      	bls.n	8009770 <prvIdleTask+0x8>
			{
				taskYIELD();
 800977c:	4b05      	ldr	r3, [pc, #20]	@ (8009794 <prvIdleTask+0x2c>)
 800977e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	f3bf 8f4f 	dsb	sy
 8009788:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800978c:	e7f0      	b.n	8009770 <prvIdleTask+0x8>
 800978e:	bf00      	nop
 8009790:	20001864 	.word	0x20001864
 8009794:	e000ed04 	.word	0xe000ed04

08009798 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800979e:	2300      	movs	r3, #0
 80097a0:	607b      	str	r3, [r7, #4]
 80097a2:	e00c      	b.n	80097be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	4613      	mov	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4413      	add	r3, r2
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	4a12      	ldr	r2, [pc, #72]	@ (80097f8 <prvInitialiseTaskLists+0x60>)
 80097b0:	4413      	add	r3, r2
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fe fe3c 	bl	8008430 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	3301      	adds	r3, #1
 80097bc:	607b      	str	r3, [r7, #4]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2b06      	cmp	r3, #6
 80097c2:	d9ef      	bls.n	80097a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80097c4:	480d      	ldr	r0, [pc, #52]	@ (80097fc <prvInitialiseTaskLists+0x64>)
 80097c6:	f7fe fe33 	bl	8008430 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80097ca:	480d      	ldr	r0, [pc, #52]	@ (8009800 <prvInitialiseTaskLists+0x68>)
 80097cc:	f7fe fe30 	bl	8008430 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80097d0:	480c      	ldr	r0, [pc, #48]	@ (8009804 <prvInitialiseTaskLists+0x6c>)
 80097d2:	f7fe fe2d 	bl	8008430 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80097d6:	480c      	ldr	r0, [pc, #48]	@ (8009808 <prvInitialiseTaskLists+0x70>)
 80097d8:	f7fe fe2a 	bl	8008430 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80097dc:	480b      	ldr	r0, [pc, #44]	@ (800980c <prvInitialiseTaskLists+0x74>)
 80097de:	f7fe fe27 	bl	8008430 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80097e2:	4b0b      	ldr	r3, [pc, #44]	@ (8009810 <prvInitialiseTaskLists+0x78>)
 80097e4:	4a05      	ldr	r2, [pc, #20]	@ (80097fc <prvInitialiseTaskLists+0x64>)
 80097e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80097e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009814 <prvInitialiseTaskLists+0x7c>)
 80097ea:	4a05      	ldr	r2, [pc, #20]	@ (8009800 <prvInitialiseTaskLists+0x68>)
 80097ec:	601a      	str	r2, [r3, #0]
}
 80097ee:	bf00      	nop
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	20001864 	.word	0x20001864
 80097fc:	200018f0 	.word	0x200018f0
 8009800:	20001904 	.word	0x20001904
 8009804:	20001920 	.word	0x20001920
 8009808:	20001934 	.word	0x20001934
 800980c:	2000194c 	.word	0x2000194c
 8009810:	20001918 	.word	0x20001918
 8009814:	2000191c 	.word	0x2000191c

08009818 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800981e:	e019      	b.n	8009854 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009820:	f000 fbb2 	bl	8009f88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009824:	4b10      	ldr	r3, [pc, #64]	@ (8009868 <prvCheckTasksWaitingTermination+0x50>)
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	3304      	adds	r3, #4
 8009830:	4618      	mov	r0, r3
 8009832:	f7fe fe87 	bl	8008544 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009836:	4b0d      	ldr	r3, [pc, #52]	@ (800986c <prvCheckTasksWaitingTermination+0x54>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3b01      	subs	r3, #1
 800983c:	4a0b      	ldr	r2, [pc, #44]	@ (800986c <prvCheckTasksWaitingTermination+0x54>)
 800983e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009840:	4b0b      	ldr	r3, [pc, #44]	@ (8009870 <prvCheckTasksWaitingTermination+0x58>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	3b01      	subs	r3, #1
 8009846:	4a0a      	ldr	r2, [pc, #40]	@ (8009870 <prvCheckTasksWaitingTermination+0x58>)
 8009848:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800984a:	f000 fbcf 	bl	8009fec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 f810 	bl	8009874 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009854:	4b06      	ldr	r3, [pc, #24]	@ (8009870 <prvCheckTasksWaitingTermination+0x58>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1e1      	bne.n	8009820 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800985c:	bf00      	nop
 800985e:	bf00      	nop
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	20001934 	.word	0x20001934
 800986c:	20001960 	.word	0x20001960
 8009870:	20001948 	.word	0x20001948

08009874 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009880:	4618      	mov	r0, r3
 8009882:	f000 fd71 	bl	800a368 <vPortFree>
			vPortFree( pxTCB );
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fd6e 	bl	800a368 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800988c:	bf00      	nop
 800988e:	3708      	adds	r7, #8
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800989a:	4b0c      	ldr	r3, [pc, #48]	@ (80098cc <prvResetNextTaskUnblockTime+0x38>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d104      	bne.n	80098ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80098a4:	4b0a      	ldr	r3, [pc, #40]	@ (80098d0 <prvResetNextTaskUnblockTime+0x3c>)
 80098a6:	f04f 32ff 	mov.w	r2, #4294967295
 80098aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80098ac:	e008      	b.n	80098c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ae:	4b07      	ldr	r3, [pc, #28]	@ (80098cc <prvResetNextTaskUnblockTime+0x38>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	4a04      	ldr	r2, [pc, #16]	@ (80098d0 <prvResetNextTaskUnblockTime+0x3c>)
 80098be:	6013      	str	r3, [r2, #0]
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr
 80098cc:	20001918 	.word	0x20001918
 80098d0:	20001980 	.word	0x20001980

080098d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80098da:	4b0b      	ldr	r3, [pc, #44]	@ (8009908 <xTaskGetSchedulerState+0x34>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d102      	bne.n	80098e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80098e2:	2301      	movs	r3, #1
 80098e4:	607b      	str	r3, [r7, #4]
 80098e6:	e008      	b.n	80098fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098e8:	4b08      	ldr	r3, [pc, #32]	@ (800990c <xTaskGetSchedulerState+0x38>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d102      	bne.n	80098f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80098f0:	2302      	movs	r3, #2
 80098f2:	607b      	str	r3, [r7, #4]
 80098f4:	e001      	b.n	80098fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80098f6:	2300      	movs	r3, #0
 80098f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80098fa:	687b      	ldr	r3, [r7, #4]
	}
 80098fc:	4618      	mov	r0, r3
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr
 8009908:	2000196c 	.word	0x2000196c
 800990c:	20001988 	.word	0x20001988

08009910 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800991c:	2300      	movs	r3, #0
 800991e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d05e      	beq.n	80099e4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800992a:	4b31      	ldr	r3, [pc, #196]	@ (80099f0 <xTaskPriorityInherit+0xe0>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009930:	429a      	cmp	r2, r3
 8009932:	d24e      	bcs.n	80099d2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	2b00      	cmp	r3, #0
 800993a:	db06      	blt.n	800994a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800993c:	4b2c      	ldr	r3, [pc, #176]	@ (80099f0 <xTaskPriorityInherit+0xe0>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009942:	f1c3 0207 	rsb	r2, r3, #7
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	6959      	ldr	r1, [r3, #20]
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009952:	4613      	mov	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4a26      	ldr	r2, [pc, #152]	@ (80099f4 <xTaskPriorityInherit+0xe4>)
 800995c:	4413      	add	r3, r2
 800995e:	4299      	cmp	r1, r3
 8009960:	d12f      	bne.n	80099c2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	3304      	adds	r3, #4
 8009966:	4618      	mov	r0, r3
 8009968:	f7fe fdec 	bl	8008544 <uxListRemove>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d10a      	bne.n	8009988 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009976:	2201      	movs	r2, #1
 8009978:	fa02 f303 	lsl.w	r3, r2, r3
 800997c:	43da      	mvns	r2, r3
 800997e:	4b1e      	ldr	r3, [pc, #120]	@ (80099f8 <xTaskPriorityInherit+0xe8>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4013      	ands	r3, r2
 8009984:	4a1c      	ldr	r2, [pc, #112]	@ (80099f8 <xTaskPriorityInherit+0xe8>)
 8009986:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009988:	4b19      	ldr	r3, [pc, #100]	@ (80099f0 <xTaskPriorityInherit+0xe0>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009996:	2201      	movs	r2, #1
 8009998:	409a      	lsls	r2, r3
 800999a:	4b17      	ldr	r3, [pc, #92]	@ (80099f8 <xTaskPriorityInherit+0xe8>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4313      	orrs	r3, r2
 80099a0:	4a15      	ldr	r2, [pc, #84]	@ (80099f8 <xTaskPriorityInherit+0xe8>)
 80099a2:	6013      	str	r3, [r2, #0]
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099a8:	4613      	mov	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	4413      	add	r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4a10      	ldr	r2, [pc, #64]	@ (80099f4 <xTaskPriorityInherit+0xe4>)
 80099b2:	441a      	add	r2, r3
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	3304      	adds	r3, #4
 80099b8:	4619      	mov	r1, r3
 80099ba:	4610      	mov	r0, r2
 80099bc:	f7fe fd65 	bl	800848a <vListInsertEnd>
 80099c0:	e004      	b.n	80099cc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80099c2:	4b0b      	ldr	r3, [pc, #44]	@ (80099f0 <xTaskPriorityInherit+0xe0>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80099cc:	2301      	movs	r3, #1
 80099ce:	60fb      	str	r3, [r7, #12]
 80099d0:	e008      	b.n	80099e4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099d6:	4b06      	ldr	r3, [pc, #24]	@ (80099f0 <xTaskPriorityInherit+0xe0>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099dc:	429a      	cmp	r2, r3
 80099de:	d201      	bcs.n	80099e4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80099e0:	2301      	movs	r3, #1
 80099e2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099e4:	68fb      	ldr	r3, [r7, #12]
	}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	20001860 	.word	0x20001860
 80099f4:	20001864 	.word	0x20001864
 80099f8:	20001968 	.word	0x20001968

080099fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d070      	beq.n	8009af4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a12:	4b3b      	ldr	r3, [pc, #236]	@ (8009b00 <xTaskPriorityDisinherit+0x104>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	693a      	ldr	r2, [r7, #16]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d00b      	beq.n	8009a34 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a20:	f383 8811 	msr	BASEPRI, r3
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	60fb      	str	r3, [r7, #12]
}
 8009a2e:	bf00      	nop
 8009a30:	bf00      	nop
 8009a32:	e7fd      	b.n	8009a30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10b      	bne.n	8009a54 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a40:	f383 8811 	msr	BASEPRI, r3
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	60bb      	str	r3, [r7, #8]
}
 8009a4e:	bf00      	nop
 8009a50:	bf00      	nop
 8009a52:	e7fd      	b.n	8009a50 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a58:	1e5a      	subs	r2, r3, #1
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d044      	beq.n	8009af4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d140      	bne.n	8009af4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	3304      	adds	r3, #4
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fe fd64 	bl	8008544 <uxListRemove>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d115      	bne.n	8009aae <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a86:	491f      	ldr	r1, [pc, #124]	@ (8009b04 <xTaskPriorityDisinherit+0x108>)
 8009a88:	4613      	mov	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4413      	add	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	440b      	add	r3, r1
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10a      	bne.n	8009aae <xTaskPriorityDisinherit+0xb2>
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa2:	43da      	mvns	r2, r3
 8009aa4:	4b18      	ldr	r3, [pc, #96]	@ (8009b08 <xTaskPriorityDisinherit+0x10c>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	4a17      	ldr	r2, [pc, #92]	@ (8009b08 <xTaskPriorityDisinherit+0x10c>)
 8009aac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aba:	f1c3 0207 	rsb	r2, r3, #7
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	409a      	lsls	r2, r3
 8009aca:	4b0f      	ldr	r3, [pc, #60]	@ (8009b08 <xTaskPriorityDisinherit+0x10c>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8009b08 <xTaskPriorityDisinherit+0x10c>)
 8009ad2:	6013      	str	r3, [r2, #0]
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ad8:	4613      	mov	r3, r2
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4a08      	ldr	r2, [pc, #32]	@ (8009b04 <xTaskPriorityDisinherit+0x108>)
 8009ae2:	441a      	add	r2, r3
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	3304      	adds	r3, #4
 8009ae8:	4619      	mov	r1, r3
 8009aea:	4610      	mov	r0, r2
 8009aec:	f7fe fccd 	bl	800848a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009af0:	2301      	movs	r3, #1
 8009af2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009af4:	697b      	ldr	r3, [r7, #20]
	}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3718      	adds	r7, #24
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	20001860 	.word	0x20001860
 8009b04:	20001864 	.word	0x20001864
 8009b08:	20001968 	.word	0x20001968

08009b0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b088      	sub	sp, #32
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d079      	beq.n	8009c18 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10b      	bne.n	8009b44 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b30:	f383 8811 	msr	BASEPRI, r3
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	60fb      	str	r3, [r7, #12]
}
 8009b3e:	bf00      	nop
 8009b40:	bf00      	nop
 8009b42:	e7fd      	b.n	8009b40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d902      	bls.n	8009b54 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	61fb      	str	r3, [r7, #28]
 8009b52:	e002      	b.n	8009b5a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b58:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b5e:	69fa      	ldr	r2, [r7, #28]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d059      	beq.n	8009c18 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b68:	697a      	ldr	r2, [r7, #20]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d154      	bne.n	8009c18 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8009c20 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	69ba      	ldr	r2, [r7, #24]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d10b      	bne.n	8009b90 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b7c:	f383 8811 	msr	BASEPRI, r3
 8009b80:	f3bf 8f6f 	isb	sy
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	60bb      	str	r3, [r7, #8]
}
 8009b8a:	bf00      	nop
 8009b8c:	bf00      	nop
 8009b8e:	e7fd      	b.n	8009b8c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b94:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	69fa      	ldr	r2, [r7, #28]
 8009b9a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	db04      	blt.n	8009bae <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	f1c3 0207 	rsb	r2, r3, #7
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	6959      	ldr	r1, [r3, #20]
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4413      	add	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	4a19      	ldr	r2, [pc, #100]	@ (8009c24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009bbe:	4413      	add	r3, r2
 8009bc0:	4299      	cmp	r1, r3
 8009bc2:	d129      	bne.n	8009c18 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7fe fcbb 	bl	8008544 <uxListRemove>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d10a      	bne.n	8009bea <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd8:	2201      	movs	r2, #1
 8009bda:	fa02 f303 	lsl.w	r3, r2, r3
 8009bde:	43da      	mvns	r2, r3
 8009be0:	4b11      	ldr	r3, [pc, #68]	@ (8009c28 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4013      	ands	r3, r2
 8009be6:	4a10      	ldr	r2, [pc, #64]	@ (8009c28 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009be8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bee:	2201      	movs	r2, #1
 8009bf0:	409a      	lsls	r2, r3
 8009bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8009c28 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	4a0b      	ldr	r2, [pc, #44]	@ (8009c28 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009bfa:	6013      	str	r3, [r2, #0]
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c00:	4613      	mov	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4413      	add	r3, r2
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	4a06      	ldr	r2, [pc, #24]	@ (8009c24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009c0a:	441a      	add	r2, r3
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	3304      	adds	r3, #4
 8009c10:	4619      	mov	r1, r3
 8009c12:	4610      	mov	r0, r2
 8009c14:	f7fe fc39 	bl	800848a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c18:	bf00      	nop
 8009c1a:	3720      	adds	r7, #32
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	20001860 	.word	0x20001860
 8009c24:	20001864 	.word	0x20001864
 8009c28:	20001968 	.word	0x20001968

08009c2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009c2c:	b480      	push	{r7}
 8009c2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009c30:	4b07      	ldr	r3, [pc, #28]	@ (8009c50 <pvTaskIncrementMutexHeldCount+0x24>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d004      	beq.n	8009c42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009c38:	4b05      	ldr	r3, [pc, #20]	@ (8009c50 <pvTaskIncrementMutexHeldCount+0x24>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c3e:	3201      	adds	r2, #1
 8009c40:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8009c42:	4b03      	ldr	r3, [pc, #12]	@ (8009c50 <pvTaskIncrementMutexHeldCount+0x24>)
 8009c44:	681b      	ldr	r3, [r3, #0]
	}
 8009c46:	4618      	mov	r0, r3
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	20001860 	.word	0x20001860

08009c54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c5e:	4b29      	ldr	r3, [pc, #164]	@ (8009d04 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c64:	4b28      	ldr	r3, [pc, #160]	@ (8009d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	3304      	adds	r3, #4
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fe fc6a 	bl	8008544 <uxListRemove>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10b      	bne.n	8009c8e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009c76:	4b24      	ldr	r3, [pc, #144]	@ (8009d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c82:	43da      	mvns	r2, r3
 8009c84:	4b21      	ldr	r3, [pc, #132]	@ (8009d0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4013      	ands	r3, r2
 8009c8a:	4a20      	ldr	r2, [pc, #128]	@ (8009d0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009c8c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c94:	d10a      	bne.n	8009cac <prvAddCurrentTaskToDelayedList+0x58>
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d007      	beq.n	8009cac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8009d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	481a      	ldr	r0, [pc, #104]	@ (8009d10 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009ca6:	f7fe fbf0 	bl	800848a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009caa:	e026      	b.n	8009cfa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009cb4:	4b14      	ldr	r3, [pc, #80]	@ (8009d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d209      	bcs.n	8009cd8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cc4:	4b13      	ldr	r3, [pc, #76]	@ (8009d14 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8009d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	3304      	adds	r3, #4
 8009cce:	4619      	mov	r1, r3
 8009cd0:	4610      	mov	r0, r2
 8009cd2:	f7fe fbfe 	bl	80084d2 <vListInsert>
}
 8009cd6:	e010      	b.n	8009cfa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8009d18 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8009d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	3304      	adds	r3, #4
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	4610      	mov	r0, r2
 8009ce6:	f7fe fbf4 	bl	80084d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009cea:	4b0c      	ldr	r3, [pc, #48]	@ (8009d1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d202      	bcs.n	8009cfa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009cf4:	4a09      	ldr	r2, [pc, #36]	@ (8009d1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	6013      	str	r3, [r2, #0]
}
 8009cfa:	bf00      	nop
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	20001964 	.word	0x20001964
 8009d08:	20001860 	.word	0x20001860
 8009d0c:	20001968 	.word	0x20001968
 8009d10:	2000194c 	.word	0x2000194c
 8009d14:	2000191c 	.word	0x2000191c
 8009d18:	20001918 	.word	0x20001918
 8009d1c:	20001980 	.word	0x20001980

08009d20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	3b04      	subs	r3, #4
 8009d30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009d38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	3b04      	subs	r3, #4
 8009d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	f023 0201 	bic.w	r2, r3, #1
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	3b04      	subs	r3, #4
 8009d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d50:	4a0c      	ldr	r2, [pc, #48]	@ (8009d84 <pxPortInitialiseStack+0x64>)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	3b14      	subs	r3, #20
 8009d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	3b04      	subs	r3, #4
 8009d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f06f 0202 	mvn.w	r2, #2
 8009d6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	3b20      	subs	r3, #32
 8009d74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d76:	68fb      	ldr	r3, [r7, #12]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr
 8009d84:	08009d89 	.word	0x08009d89

08009d88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d92:	4b13      	ldr	r3, [pc, #76]	@ (8009de0 <prvTaskExitError+0x58>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d9a:	d00b      	beq.n	8009db4 <prvTaskExitError+0x2c>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	60fb      	str	r3, [r7, #12]
}
 8009dae:	bf00      	nop
 8009db0:	bf00      	nop
 8009db2:	e7fd      	b.n	8009db0 <prvTaskExitError+0x28>
	__asm volatile
 8009db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db8:	f383 8811 	msr	BASEPRI, r3
 8009dbc:	f3bf 8f6f 	isb	sy
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	60bb      	str	r3, [r7, #8]
}
 8009dc6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009dc8:	bf00      	nop
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d0fc      	beq.n	8009dca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009dd0:	bf00      	nop
 8009dd2:	bf00      	nop
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	20000010 	.word	0x20000010
	...

08009df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009df0:	4b07      	ldr	r3, [pc, #28]	@ (8009e10 <pxCurrentTCBConst2>)
 8009df2:	6819      	ldr	r1, [r3, #0]
 8009df4:	6808      	ldr	r0, [r1, #0]
 8009df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dfa:	f380 8809 	msr	PSP, r0
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	f04f 0000 	mov.w	r0, #0
 8009e06:	f380 8811 	msr	BASEPRI, r0
 8009e0a:	4770      	bx	lr
 8009e0c:	f3af 8000 	nop.w

08009e10 <pxCurrentTCBConst2>:
 8009e10:	20001860 	.word	0x20001860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e14:	bf00      	nop
 8009e16:	bf00      	nop

08009e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e18:	4808      	ldr	r0, [pc, #32]	@ (8009e3c <prvPortStartFirstTask+0x24>)
 8009e1a:	6800      	ldr	r0, [r0, #0]
 8009e1c:	6800      	ldr	r0, [r0, #0]
 8009e1e:	f380 8808 	msr	MSP, r0
 8009e22:	f04f 0000 	mov.w	r0, #0
 8009e26:	f380 8814 	msr	CONTROL, r0
 8009e2a:	b662      	cpsie	i
 8009e2c:	b661      	cpsie	f
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	df00      	svc	0
 8009e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e3a:	bf00      	nop
 8009e3c:	e000ed08 	.word	0xe000ed08

08009e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e46:	4b47      	ldr	r3, [pc, #284]	@ (8009f64 <xPortStartScheduler+0x124>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a47      	ldr	r2, [pc, #284]	@ (8009f68 <xPortStartScheduler+0x128>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d10b      	bne.n	8009e68 <xPortStartScheduler+0x28>
	__asm volatile
 8009e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e54:	f383 8811 	msr	BASEPRI, r3
 8009e58:	f3bf 8f6f 	isb	sy
 8009e5c:	f3bf 8f4f 	dsb	sy
 8009e60:	613b      	str	r3, [r7, #16]
}
 8009e62:	bf00      	nop
 8009e64:	bf00      	nop
 8009e66:	e7fd      	b.n	8009e64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e68:	4b3e      	ldr	r3, [pc, #248]	@ (8009f64 <xPortStartScheduler+0x124>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a3f      	ldr	r2, [pc, #252]	@ (8009f6c <xPortStartScheduler+0x12c>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d10b      	bne.n	8009e8a <xPortStartScheduler+0x4a>
	__asm volatile
 8009e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e76:	f383 8811 	msr	BASEPRI, r3
 8009e7a:	f3bf 8f6f 	isb	sy
 8009e7e:	f3bf 8f4f 	dsb	sy
 8009e82:	60fb      	str	r3, [r7, #12]
}
 8009e84:	bf00      	nop
 8009e86:	bf00      	nop
 8009e88:	e7fd      	b.n	8009e86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e8a:	4b39      	ldr	r3, [pc, #228]	@ (8009f70 <xPortStartScheduler+0x130>)
 8009e8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	22ff      	movs	r2, #255	@ 0xff
 8009e9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ea4:	78fb      	ldrb	r3, [r7, #3]
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009eac:	b2da      	uxtb	r2, r3
 8009eae:	4b31      	ldr	r3, [pc, #196]	@ (8009f74 <xPortStartScheduler+0x134>)
 8009eb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009eb2:	4b31      	ldr	r3, [pc, #196]	@ (8009f78 <xPortStartScheduler+0x138>)
 8009eb4:	2207      	movs	r2, #7
 8009eb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009eb8:	e009      	b.n	8009ece <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009eba:	4b2f      	ldr	r3, [pc, #188]	@ (8009f78 <xPortStartScheduler+0x138>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	4a2d      	ldr	r2, [pc, #180]	@ (8009f78 <xPortStartScheduler+0x138>)
 8009ec2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ec4:	78fb      	ldrb	r3, [r7, #3]
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	005b      	lsls	r3, r3, #1
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ece:	78fb      	ldrb	r3, [r7, #3]
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ed6:	2b80      	cmp	r3, #128	@ 0x80
 8009ed8:	d0ef      	beq.n	8009eba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009eda:	4b27      	ldr	r3, [pc, #156]	@ (8009f78 <xPortStartScheduler+0x138>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f1c3 0307 	rsb	r3, r3, #7
 8009ee2:	2b04      	cmp	r3, #4
 8009ee4:	d00b      	beq.n	8009efe <xPortStartScheduler+0xbe>
	__asm volatile
 8009ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	60bb      	str	r3, [r7, #8]
}
 8009ef8:	bf00      	nop
 8009efa:	bf00      	nop
 8009efc:	e7fd      	b.n	8009efa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009efe:	4b1e      	ldr	r3, [pc, #120]	@ (8009f78 <xPortStartScheduler+0x138>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	021b      	lsls	r3, r3, #8
 8009f04:	4a1c      	ldr	r2, [pc, #112]	@ (8009f78 <xPortStartScheduler+0x138>)
 8009f06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f08:	4b1b      	ldr	r3, [pc, #108]	@ (8009f78 <xPortStartScheduler+0x138>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009f10:	4a19      	ldr	r2, [pc, #100]	@ (8009f78 <xPortStartScheduler+0x138>)
 8009f12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f1c:	4b17      	ldr	r3, [pc, #92]	@ (8009f7c <xPortStartScheduler+0x13c>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a16      	ldr	r2, [pc, #88]	@ (8009f7c <xPortStartScheduler+0x13c>)
 8009f22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009f26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f28:	4b14      	ldr	r3, [pc, #80]	@ (8009f7c <xPortStartScheduler+0x13c>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a13      	ldr	r2, [pc, #76]	@ (8009f7c <xPortStartScheduler+0x13c>)
 8009f2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009f32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f34:	f000 f8da 	bl	800a0ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f38:	4b11      	ldr	r3, [pc, #68]	@ (8009f80 <xPortStartScheduler+0x140>)
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f3e:	f000 f8f9 	bl	800a134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f42:	4b10      	ldr	r3, [pc, #64]	@ (8009f84 <xPortStartScheduler+0x144>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a0f      	ldr	r2, [pc, #60]	@ (8009f84 <xPortStartScheduler+0x144>)
 8009f48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009f4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f4e:	f7ff ff63 	bl	8009e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f52:	f7ff fa9d 	bl	8009490 <vTaskSwitchContext>
	prvTaskExitError();
 8009f56:	f7ff ff17 	bl	8009d88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3718      	adds	r7, #24
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	e000ed00 	.word	0xe000ed00
 8009f68:	410fc271 	.word	0x410fc271
 8009f6c:	410fc270 	.word	0x410fc270
 8009f70:	e000e400 	.word	0xe000e400
 8009f74:	2000198c 	.word	0x2000198c
 8009f78:	20001990 	.word	0x20001990
 8009f7c:	e000ed20 	.word	0xe000ed20
 8009f80:	20000010 	.word	0x20000010
 8009f84:	e000ef34 	.word	0xe000ef34

08009f88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	607b      	str	r3, [r7, #4]
}
 8009fa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009fa2:	4b10      	ldr	r3, [pc, #64]	@ (8009fe4 <vPortEnterCritical+0x5c>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8009fe4 <vPortEnterCritical+0x5c>)
 8009faa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009fac:	4b0d      	ldr	r3, [pc, #52]	@ (8009fe4 <vPortEnterCritical+0x5c>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d110      	bne.n	8009fd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8009fe8 <vPortEnterCritical+0x60>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00b      	beq.n	8009fd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc2:	f383 8811 	msr	BASEPRI, r3
 8009fc6:	f3bf 8f6f 	isb	sy
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	603b      	str	r3, [r7, #0]
}
 8009fd0:	bf00      	nop
 8009fd2:	bf00      	nop
 8009fd4:	e7fd      	b.n	8009fd2 <vPortEnterCritical+0x4a>
	}
}
 8009fd6:	bf00      	nop
 8009fd8:	370c      	adds	r7, #12
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	20000010 	.word	0x20000010
 8009fe8:	e000ed04 	.word	0xe000ed04

08009fec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009ff2:	4b12      	ldr	r3, [pc, #72]	@ (800a03c <vPortExitCritical+0x50>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d10b      	bne.n	800a012 <vPortExitCritical+0x26>
	__asm volatile
 8009ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffe:	f383 8811 	msr	BASEPRI, r3
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	607b      	str	r3, [r7, #4]
}
 800a00c:	bf00      	nop
 800a00e:	bf00      	nop
 800a010:	e7fd      	b.n	800a00e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a012:	4b0a      	ldr	r3, [pc, #40]	@ (800a03c <vPortExitCritical+0x50>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3b01      	subs	r3, #1
 800a018:	4a08      	ldr	r2, [pc, #32]	@ (800a03c <vPortExitCritical+0x50>)
 800a01a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a01c:	4b07      	ldr	r3, [pc, #28]	@ (800a03c <vPortExitCritical+0x50>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d105      	bne.n	800a030 <vPortExitCritical+0x44>
 800a024:	2300      	movs	r3, #0
 800a026:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	f383 8811 	msr	BASEPRI, r3
}
 800a02e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr
 800a03c:	20000010 	.word	0x20000010

0800a040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a040:	f3ef 8009 	mrs	r0, PSP
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	4b15      	ldr	r3, [pc, #84]	@ (800a0a0 <pxCurrentTCBConst>)
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	f01e 0f10 	tst.w	lr, #16
 800a050:	bf08      	it	eq
 800a052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05a:	6010      	str	r0, [r2, #0]
 800a05c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a060:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a064:	f380 8811 	msr	BASEPRI, r0
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	f3bf 8f6f 	isb	sy
 800a070:	f7ff fa0e 	bl	8009490 <vTaskSwitchContext>
 800a074:	f04f 0000 	mov.w	r0, #0
 800a078:	f380 8811 	msr	BASEPRI, r0
 800a07c:	bc09      	pop	{r0, r3}
 800a07e:	6819      	ldr	r1, [r3, #0]
 800a080:	6808      	ldr	r0, [r1, #0]
 800a082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a086:	f01e 0f10 	tst.w	lr, #16
 800a08a:	bf08      	it	eq
 800a08c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a090:	f380 8809 	msr	PSP, r0
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	f3af 8000 	nop.w

0800a0a0 <pxCurrentTCBConst>:
 800a0a0:	20001860 	.word	0x20001860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a0a4:	bf00      	nop
 800a0a6:	bf00      	nop

0800a0a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	607b      	str	r3, [r7, #4]
}
 800a0c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a0c2:	f7ff f92b 	bl	800931c <xTaskIncrementTick>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d003      	beq.n	800a0d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a0cc:	4b06      	ldr	r3, [pc, #24]	@ (800a0e8 <xPortSysTickHandler+0x40>)
 800a0ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0d2:	601a      	str	r2, [r3, #0]
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	f383 8811 	msr	BASEPRI, r3
}
 800a0de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a0e0:	bf00      	nop
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	e000ed04 	.word	0xe000ed04

0800a0ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a0f0:	4b0b      	ldr	r3, [pc, #44]	@ (800a120 <vPortSetupTimerInterrupt+0x34>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a0f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a124 <vPortSetupTimerInterrupt+0x38>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a0fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a128 <vPortSetupTimerInterrupt+0x3c>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a0a      	ldr	r2, [pc, #40]	@ (800a12c <vPortSetupTimerInterrupt+0x40>)
 800a102:	fba2 2303 	umull	r2, r3, r2, r3
 800a106:	099b      	lsrs	r3, r3, #6
 800a108:	4a09      	ldr	r2, [pc, #36]	@ (800a130 <vPortSetupTimerInterrupt+0x44>)
 800a10a:	3b01      	subs	r3, #1
 800a10c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a10e:	4b04      	ldr	r3, [pc, #16]	@ (800a120 <vPortSetupTimerInterrupt+0x34>)
 800a110:	2207      	movs	r2, #7
 800a112:	601a      	str	r2, [r3, #0]
}
 800a114:	bf00      	nop
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	e000e010 	.word	0xe000e010
 800a124:	e000e018 	.word	0xe000e018
 800a128:	20000004 	.word	0x20000004
 800a12c:	10624dd3 	.word	0x10624dd3
 800a130:	e000e014 	.word	0xe000e014

0800a134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a134:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a144 <vPortEnableVFP+0x10>
 800a138:	6801      	ldr	r1, [r0, #0]
 800a13a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a13e:	6001      	str	r1, [r0, #0]
 800a140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a142:	bf00      	nop
 800a144:	e000ed88 	.word	0xe000ed88

0800a148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a14e:	f3ef 8305 	mrs	r3, IPSR
 800a152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2b0f      	cmp	r3, #15
 800a158:	d915      	bls.n	800a186 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a15a:	4a18      	ldr	r2, [pc, #96]	@ (800a1bc <vPortValidateInterruptPriority+0x74>)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	4413      	add	r3, r2
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a164:	4b16      	ldr	r3, [pc, #88]	@ (800a1c0 <vPortValidateInterruptPriority+0x78>)
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	7afa      	ldrb	r2, [r7, #11]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d20b      	bcs.n	800a186 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	607b      	str	r3, [r7, #4]
}
 800a180:	bf00      	nop
 800a182:	bf00      	nop
 800a184:	e7fd      	b.n	800a182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a186:	4b0f      	ldr	r3, [pc, #60]	@ (800a1c4 <vPortValidateInterruptPriority+0x7c>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a18e:	4b0e      	ldr	r3, [pc, #56]	@ (800a1c8 <vPortValidateInterruptPriority+0x80>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	429a      	cmp	r2, r3
 800a194:	d90b      	bls.n	800a1ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a19a:	f383 8811 	msr	BASEPRI, r3
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	603b      	str	r3, [r7, #0]
}
 800a1a8:	bf00      	nop
 800a1aa:	bf00      	nop
 800a1ac:	e7fd      	b.n	800a1aa <vPortValidateInterruptPriority+0x62>
	}
 800a1ae:	bf00      	nop
 800a1b0:	3714      	adds	r7, #20
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	e000e3f0 	.word	0xe000e3f0
 800a1c0:	2000198c 	.word	0x2000198c
 800a1c4:	e000ed0c 	.word	0xe000ed0c
 800a1c8:	20001990 	.word	0x20001990

0800a1cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b08a      	sub	sp, #40	@ 0x28
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a1d8:	f7fe fff4 	bl	80091c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a1dc:	4b5c      	ldr	r3, [pc, #368]	@ (800a350 <pvPortMalloc+0x184>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d101      	bne.n	800a1e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a1e4:	f000 f924 	bl	800a430 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a1e8:	4b5a      	ldr	r3, [pc, #360]	@ (800a354 <pvPortMalloc+0x188>)
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f040 8095 	bne.w	800a320 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d01e      	beq.n	800a23a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a1fc:	2208      	movs	r2, #8
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4413      	add	r3, r2
 800a202:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f003 0307 	and.w	r3, r3, #7
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d015      	beq.n	800a23a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f023 0307 	bic.w	r3, r3, #7
 800a214:	3308      	adds	r3, #8
 800a216:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f003 0307 	and.w	r3, r3, #7
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d00b      	beq.n	800a23a <pvPortMalloc+0x6e>
	__asm volatile
 800a222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	617b      	str	r3, [r7, #20]
}
 800a234:	bf00      	nop
 800a236:	bf00      	nop
 800a238:	e7fd      	b.n	800a236 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d06f      	beq.n	800a320 <pvPortMalloc+0x154>
 800a240:	4b45      	ldr	r3, [pc, #276]	@ (800a358 <pvPortMalloc+0x18c>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	429a      	cmp	r2, r3
 800a248:	d86a      	bhi.n	800a320 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a24a:	4b44      	ldr	r3, [pc, #272]	@ (800a35c <pvPortMalloc+0x190>)
 800a24c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a24e:	4b43      	ldr	r3, [pc, #268]	@ (800a35c <pvPortMalloc+0x190>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a254:	e004      	b.n	800a260 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a258:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	429a      	cmp	r2, r3
 800a268:	d903      	bls.n	800a272 <pvPortMalloc+0xa6>
 800a26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1f1      	bne.n	800a256 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a272:	4b37      	ldr	r3, [pc, #220]	@ (800a350 <pvPortMalloc+0x184>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a278:	429a      	cmp	r2, r3
 800a27a:	d051      	beq.n	800a320 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a27c:	6a3b      	ldr	r3, [r7, #32]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2208      	movs	r2, #8
 800a282:	4413      	add	r3, r2
 800a284:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	6a3b      	ldr	r3, [r7, #32]
 800a28c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a290:	685a      	ldr	r2, [r3, #4]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	1ad2      	subs	r2, r2, r3
 800a296:	2308      	movs	r3, #8
 800a298:	005b      	lsls	r3, r3, #1
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d920      	bls.n	800a2e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a29e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	f003 0307 	and.w	r3, r3, #7
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00b      	beq.n	800a2c8 <pvPortMalloc+0xfc>
	__asm volatile
 800a2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b4:	f383 8811 	msr	BASEPRI, r3
 800a2b8:	f3bf 8f6f 	isb	sy
 800a2bc:	f3bf 8f4f 	dsb	sy
 800a2c0:	613b      	str	r3, [r7, #16]
}
 800a2c2:	bf00      	nop
 800a2c4:	bf00      	nop
 800a2c6:	e7fd      	b.n	800a2c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ca:	685a      	ldr	r2, [r3, #4]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	1ad2      	subs	r2, r2, r3
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a2da:	69b8      	ldr	r0, [r7, #24]
 800a2dc:	f000 f90a 	bl	800a4f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a2e0:	4b1d      	ldr	r3, [pc, #116]	@ (800a358 <pvPortMalloc+0x18c>)
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	4a1b      	ldr	r2, [pc, #108]	@ (800a358 <pvPortMalloc+0x18c>)
 800a2ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a2ee:	4b1a      	ldr	r3, [pc, #104]	@ (800a358 <pvPortMalloc+0x18c>)
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	4b1b      	ldr	r3, [pc, #108]	@ (800a360 <pvPortMalloc+0x194>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d203      	bcs.n	800a302 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a2fa:	4b17      	ldr	r3, [pc, #92]	@ (800a358 <pvPortMalloc+0x18c>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a18      	ldr	r2, [pc, #96]	@ (800a360 <pvPortMalloc+0x194>)
 800a300:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a304:	685a      	ldr	r2, [r3, #4]
 800a306:	4b13      	ldr	r3, [pc, #76]	@ (800a354 <pvPortMalloc+0x188>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	431a      	orrs	r2, r3
 800a30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a312:	2200      	movs	r2, #0
 800a314:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a316:	4b13      	ldr	r3, [pc, #76]	@ (800a364 <pvPortMalloc+0x198>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3301      	adds	r3, #1
 800a31c:	4a11      	ldr	r2, [pc, #68]	@ (800a364 <pvPortMalloc+0x198>)
 800a31e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a320:	f7fe ff5e 	bl	80091e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	f003 0307 	and.w	r3, r3, #7
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00b      	beq.n	800a346 <pvPortMalloc+0x17a>
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	60fb      	str	r3, [r7, #12]
}
 800a340:	bf00      	nop
 800a342:	bf00      	nop
 800a344:	e7fd      	b.n	800a342 <pvPortMalloc+0x176>
	return pvReturn;
 800a346:	69fb      	ldr	r3, [r7, #28]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3728      	adds	r7, #40	@ 0x28
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	200040ac 	.word	0x200040ac
 800a354:	200040c0 	.word	0x200040c0
 800a358:	200040b0 	.word	0x200040b0
 800a35c:	200040a4 	.word	0x200040a4
 800a360:	200040b4 	.word	0x200040b4
 800a364:	200040b8 	.word	0x200040b8

0800a368 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b086      	sub	sp, #24
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d04f      	beq.n	800a41a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a37a:	2308      	movs	r3, #8
 800a37c:	425b      	negs	r3, r3
 800a37e:	697a      	ldr	r2, [r7, #20]
 800a380:	4413      	add	r3, r2
 800a382:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	685a      	ldr	r2, [r3, #4]
 800a38c:	4b25      	ldr	r3, [pc, #148]	@ (800a424 <vPortFree+0xbc>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4013      	ands	r3, r2
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10b      	bne.n	800a3ae <vPortFree+0x46>
	__asm volatile
 800a396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a39a:	f383 8811 	msr	BASEPRI, r3
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f3bf 8f4f 	dsb	sy
 800a3a6:	60fb      	str	r3, [r7, #12]
}
 800a3a8:	bf00      	nop
 800a3aa:	bf00      	nop
 800a3ac:	e7fd      	b.n	800a3aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00b      	beq.n	800a3ce <vPortFree+0x66>
	__asm volatile
 800a3b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ba:	f383 8811 	msr	BASEPRI, r3
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	f3bf 8f4f 	dsb	sy
 800a3c6:	60bb      	str	r3, [r7, #8]
}
 800a3c8:	bf00      	nop
 800a3ca:	bf00      	nop
 800a3cc:	e7fd      	b.n	800a3ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	4b14      	ldr	r3, [pc, #80]	@ (800a424 <vPortFree+0xbc>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d01e      	beq.n	800a41a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d11a      	bne.n	800a41a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a424 <vPortFree+0xbc>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	43db      	mvns	r3, r3
 800a3ee:	401a      	ands	r2, r3
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a3f4:	f7fe fee6 	bl	80091c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	685a      	ldr	r2, [r3, #4]
 800a3fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a428 <vPortFree+0xc0>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4413      	add	r3, r2
 800a402:	4a09      	ldr	r2, [pc, #36]	@ (800a428 <vPortFree+0xc0>)
 800a404:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a406:	6938      	ldr	r0, [r7, #16]
 800a408:	f000 f874 	bl	800a4f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a40c:	4b07      	ldr	r3, [pc, #28]	@ (800a42c <vPortFree+0xc4>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	3301      	adds	r3, #1
 800a412:	4a06      	ldr	r2, [pc, #24]	@ (800a42c <vPortFree+0xc4>)
 800a414:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a416:	f7fe fee3 	bl	80091e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a41a:	bf00      	nop
 800a41c:	3718      	adds	r7, #24
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	200040c0 	.word	0x200040c0
 800a428:	200040b0 	.word	0x200040b0
 800a42c:	200040bc 	.word	0x200040bc

0800a430 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a430:	b480      	push	{r7}
 800a432:	b085      	sub	sp, #20
 800a434:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a436:	f242 7310 	movw	r3, #10000	@ 0x2710
 800a43a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a43c:	4b27      	ldr	r3, [pc, #156]	@ (800a4dc <prvHeapInit+0xac>)
 800a43e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f003 0307 	and.w	r3, r3, #7
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00c      	beq.n	800a464 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3307      	adds	r3, #7
 800a44e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f023 0307 	bic.w	r3, r3, #7
 800a456:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a458:	68ba      	ldr	r2, [r7, #8]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	4a1f      	ldr	r2, [pc, #124]	@ (800a4dc <prvHeapInit+0xac>)
 800a460:	4413      	add	r3, r2
 800a462:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a468:	4a1d      	ldr	r2, [pc, #116]	@ (800a4e0 <prvHeapInit+0xb0>)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a46e:	4b1c      	ldr	r3, [pc, #112]	@ (800a4e0 <prvHeapInit+0xb0>)
 800a470:	2200      	movs	r2, #0
 800a472:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	4413      	add	r3, r2
 800a47a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a47c:	2208      	movs	r2, #8
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	1a9b      	subs	r3, r3, r2
 800a482:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f023 0307 	bic.w	r3, r3, #7
 800a48a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	4a15      	ldr	r2, [pc, #84]	@ (800a4e4 <prvHeapInit+0xb4>)
 800a490:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a492:	4b14      	ldr	r3, [pc, #80]	@ (800a4e4 <prvHeapInit+0xb4>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2200      	movs	r2, #0
 800a498:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a49a:	4b12      	ldr	r3, [pc, #72]	@ (800a4e4 <prvHeapInit+0xb4>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	1ad2      	subs	r2, r2, r3
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a4b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e4 <prvHeapInit+0xb4>)
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	4a0a      	ldr	r2, [pc, #40]	@ (800a4e8 <prvHeapInit+0xb8>)
 800a4be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	4a09      	ldr	r2, [pc, #36]	@ (800a4ec <prvHeapInit+0xbc>)
 800a4c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a4c8:	4b09      	ldr	r3, [pc, #36]	@ (800a4f0 <prvHeapInit+0xc0>)
 800a4ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a4ce:	601a      	str	r2, [r3, #0]
}
 800a4d0:	bf00      	nop
 800a4d2:	3714      	adds	r7, #20
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	20001994 	.word	0x20001994
 800a4e0:	200040a4 	.word	0x200040a4
 800a4e4:	200040ac 	.word	0x200040ac
 800a4e8:	200040b4 	.word	0x200040b4
 800a4ec:	200040b0 	.word	0x200040b0
 800a4f0:	200040c0 	.word	0x200040c0

0800a4f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b085      	sub	sp, #20
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a4fc:	4b28      	ldr	r3, [pc, #160]	@ (800a5a0 <prvInsertBlockIntoFreeList+0xac>)
 800a4fe:	60fb      	str	r3, [r7, #12]
 800a500:	e002      	b.n	800a508 <prvInsertBlockIntoFreeList+0x14>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	60fb      	str	r3, [r7, #12]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d8f7      	bhi.n	800a502 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	68ba      	ldr	r2, [r7, #8]
 800a51c:	4413      	add	r3, r2
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	429a      	cmp	r2, r3
 800a522:	d108      	bne.n	800a536 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	685a      	ldr	r2, [r3, #4]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	441a      	add	r2, r3
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	441a      	add	r2, r3
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	429a      	cmp	r2, r3
 800a548:	d118      	bne.n	800a57c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	4b15      	ldr	r3, [pc, #84]	@ (800a5a4 <prvInsertBlockIntoFreeList+0xb0>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	429a      	cmp	r2, r3
 800a554:	d00d      	beq.n	800a572 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	685a      	ldr	r2, [r3, #4]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	441a      	add	r2, r3
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	601a      	str	r2, [r3, #0]
 800a570:	e008      	b.n	800a584 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a572:	4b0c      	ldr	r3, [pc, #48]	@ (800a5a4 <prvInsertBlockIntoFreeList+0xb0>)
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	601a      	str	r2, [r3, #0]
 800a57a:	e003      	b.n	800a584 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d002      	beq.n	800a592 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a592:	bf00      	nop
 800a594:	3714      	adds	r7, #20
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	200040a4 	.word	0x200040a4
 800a5a4:	200040ac 	.word	0x200040ac

0800a5a8 <__cvt>:
 800a5a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5ac:	ec57 6b10 	vmov	r6, r7, d0
 800a5b0:	2f00      	cmp	r7, #0
 800a5b2:	460c      	mov	r4, r1
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	463b      	mov	r3, r7
 800a5b8:	bfbb      	ittet	lt
 800a5ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a5be:	461f      	movlt	r7, r3
 800a5c0:	2300      	movge	r3, #0
 800a5c2:	232d      	movlt	r3, #45	@ 0x2d
 800a5c4:	700b      	strb	r3, [r1, #0]
 800a5c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a5c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a5cc:	4691      	mov	r9, r2
 800a5ce:	f023 0820 	bic.w	r8, r3, #32
 800a5d2:	bfbc      	itt	lt
 800a5d4:	4632      	movlt	r2, r6
 800a5d6:	4616      	movlt	r6, r2
 800a5d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a5dc:	d005      	beq.n	800a5ea <__cvt+0x42>
 800a5de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a5e2:	d100      	bne.n	800a5e6 <__cvt+0x3e>
 800a5e4:	3401      	adds	r4, #1
 800a5e6:	2102      	movs	r1, #2
 800a5e8:	e000      	b.n	800a5ec <__cvt+0x44>
 800a5ea:	2103      	movs	r1, #3
 800a5ec:	ab03      	add	r3, sp, #12
 800a5ee:	9301      	str	r3, [sp, #4]
 800a5f0:	ab02      	add	r3, sp, #8
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	ec47 6b10 	vmov	d0, r6, r7
 800a5f8:	4653      	mov	r3, sl
 800a5fa:	4622      	mov	r2, r4
 800a5fc:	f001 f988 	bl	800b910 <_dtoa_r>
 800a600:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a604:	4605      	mov	r5, r0
 800a606:	d119      	bne.n	800a63c <__cvt+0x94>
 800a608:	f019 0f01 	tst.w	r9, #1
 800a60c:	d00e      	beq.n	800a62c <__cvt+0x84>
 800a60e:	eb00 0904 	add.w	r9, r0, r4
 800a612:	2200      	movs	r2, #0
 800a614:	2300      	movs	r3, #0
 800a616:	4630      	mov	r0, r6
 800a618:	4639      	mov	r1, r7
 800a61a:	f7f6 fa7d 	bl	8000b18 <__aeabi_dcmpeq>
 800a61e:	b108      	cbz	r0, 800a624 <__cvt+0x7c>
 800a620:	f8cd 900c 	str.w	r9, [sp, #12]
 800a624:	2230      	movs	r2, #48	@ 0x30
 800a626:	9b03      	ldr	r3, [sp, #12]
 800a628:	454b      	cmp	r3, r9
 800a62a:	d31e      	bcc.n	800a66a <__cvt+0xc2>
 800a62c:	9b03      	ldr	r3, [sp, #12]
 800a62e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a630:	1b5b      	subs	r3, r3, r5
 800a632:	4628      	mov	r0, r5
 800a634:	6013      	str	r3, [r2, #0]
 800a636:	b004      	add	sp, #16
 800a638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a63c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a640:	eb00 0904 	add.w	r9, r0, r4
 800a644:	d1e5      	bne.n	800a612 <__cvt+0x6a>
 800a646:	7803      	ldrb	r3, [r0, #0]
 800a648:	2b30      	cmp	r3, #48	@ 0x30
 800a64a:	d10a      	bne.n	800a662 <__cvt+0xba>
 800a64c:	2200      	movs	r2, #0
 800a64e:	2300      	movs	r3, #0
 800a650:	4630      	mov	r0, r6
 800a652:	4639      	mov	r1, r7
 800a654:	f7f6 fa60 	bl	8000b18 <__aeabi_dcmpeq>
 800a658:	b918      	cbnz	r0, 800a662 <__cvt+0xba>
 800a65a:	f1c4 0401 	rsb	r4, r4, #1
 800a65e:	f8ca 4000 	str.w	r4, [sl]
 800a662:	f8da 3000 	ldr.w	r3, [sl]
 800a666:	4499      	add	r9, r3
 800a668:	e7d3      	b.n	800a612 <__cvt+0x6a>
 800a66a:	1c59      	adds	r1, r3, #1
 800a66c:	9103      	str	r1, [sp, #12]
 800a66e:	701a      	strb	r2, [r3, #0]
 800a670:	e7d9      	b.n	800a626 <__cvt+0x7e>

0800a672 <__exponent>:
 800a672:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a674:	2900      	cmp	r1, #0
 800a676:	bfba      	itte	lt
 800a678:	4249      	neglt	r1, r1
 800a67a:	232d      	movlt	r3, #45	@ 0x2d
 800a67c:	232b      	movge	r3, #43	@ 0x2b
 800a67e:	2909      	cmp	r1, #9
 800a680:	7002      	strb	r2, [r0, #0]
 800a682:	7043      	strb	r3, [r0, #1]
 800a684:	dd29      	ble.n	800a6da <__exponent+0x68>
 800a686:	f10d 0307 	add.w	r3, sp, #7
 800a68a:	461d      	mov	r5, r3
 800a68c:	270a      	movs	r7, #10
 800a68e:	461a      	mov	r2, r3
 800a690:	fbb1 f6f7 	udiv	r6, r1, r7
 800a694:	fb07 1416 	mls	r4, r7, r6, r1
 800a698:	3430      	adds	r4, #48	@ 0x30
 800a69a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a69e:	460c      	mov	r4, r1
 800a6a0:	2c63      	cmp	r4, #99	@ 0x63
 800a6a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a6a6:	4631      	mov	r1, r6
 800a6a8:	dcf1      	bgt.n	800a68e <__exponent+0x1c>
 800a6aa:	3130      	adds	r1, #48	@ 0x30
 800a6ac:	1e94      	subs	r4, r2, #2
 800a6ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a6b2:	1c41      	adds	r1, r0, #1
 800a6b4:	4623      	mov	r3, r4
 800a6b6:	42ab      	cmp	r3, r5
 800a6b8:	d30a      	bcc.n	800a6d0 <__exponent+0x5e>
 800a6ba:	f10d 0309 	add.w	r3, sp, #9
 800a6be:	1a9b      	subs	r3, r3, r2
 800a6c0:	42ac      	cmp	r4, r5
 800a6c2:	bf88      	it	hi
 800a6c4:	2300      	movhi	r3, #0
 800a6c6:	3302      	adds	r3, #2
 800a6c8:	4403      	add	r3, r0
 800a6ca:	1a18      	subs	r0, r3, r0
 800a6cc:	b003      	add	sp, #12
 800a6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a6d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a6d8:	e7ed      	b.n	800a6b6 <__exponent+0x44>
 800a6da:	2330      	movs	r3, #48	@ 0x30
 800a6dc:	3130      	adds	r1, #48	@ 0x30
 800a6de:	7083      	strb	r3, [r0, #2]
 800a6e0:	70c1      	strb	r1, [r0, #3]
 800a6e2:	1d03      	adds	r3, r0, #4
 800a6e4:	e7f1      	b.n	800a6ca <__exponent+0x58>
	...

0800a6e8 <_printf_float>:
 800a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	b08d      	sub	sp, #52	@ 0x34
 800a6ee:	460c      	mov	r4, r1
 800a6f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a6f4:	4616      	mov	r6, r2
 800a6f6:	461f      	mov	r7, r3
 800a6f8:	4605      	mov	r5, r0
 800a6fa:	f000 fff3 	bl	800b6e4 <_localeconv_r>
 800a6fe:	6803      	ldr	r3, [r0, #0]
 800a700:	9304      	str	r3, [sp, #16]
 800a702:	4618      	mov	r0, r3
 800a704:	f7f5 fddc 	bl	80002c0 <strlen>
 800a708:	2300      	movs	r3, #0
 800a70a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a70c:	f8d8 3000 	ldr.w	r3, [r8]
 800a710:	9005      	str	r0, [sp, #20]
 800a712:	3307      	adds	r3, #7
 800a714:	f023 0307 	bic.w	r3, r3, #7
 800a718:	f103 0208 	add.w	r2, r3, #8
 800a71c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a720:	f8d4 b000 	ldr.w	fp, [r4]
 800a724:	f8c8 2000 	str.w	r2, [r8]
 800a728:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a72c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a730:	9307      	str	r3, [sp, #28]
 800a732:	f8cd 8018 	str.w	r8, [sp, #24]
 800a736:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a73a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a73e:	4b9c      	ldr	r3, [pc, #624]	@ (800a9b0 <_printf_float+0x2c8>)
 800a740:	f04f 32ff 	mov.w	r2, #4294967295
 800a744:	f7f6 fa1a 	bl	8000b7c <__aeabi_dcmpun>
 800a748:	bb70      	cbnz	r0, 800a7a8 <_printf_float+0xc0>
 800a74a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a74e:	4b98      	ldr	r3, [pc, #608]	@ (800a9b0 <_printf_float+0x2c8>)
 800a750:	f04f 32ff 	mov.w	r2, #4294967295
 800a754:	f7f6 f9f4 	bl	8000b40 <__aeabi_dcmple>
 800a758:	bb30      	cbnz	r0, 800a7a8 <_printf_float+0xc0>
 800a75a:	2200      	movs	r2, #0
 800a75c:	2300      	movs	r3, #0
 800a75e:	4640      	mov	r0, r8
 800a760:	4649      	mov	r1, r9
 800a762:	f7f6 f9e3 	bl	8000b2c <__aeabi_dcmplt>
 800a766:	b110      	cbz	r0, 800a76e <_printf_float+0x86>
 800a768:	232d      	movs	r3, #45	@ 0x2d
 800a76a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a76e:	4a91      	ldr	r2, [pc, #580]	@ (800a9b4 <_printf_float+0x2cc>)
 800a770:	4b91      	ldr	r3, [pc, #580]	@ (800a9b8 <_printf_float+0x2d0>)
 800a772:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a776:	bf94      	ite	ls
 800a778:	4690      	movls	r8, r2
 800a77a:	4698      	movhi	r8, r3
 800a77c:	2303      	movs	r3, #3
 800a77e:	6123      	str	r3, [r4, #16]
 800a780:	f02b 0304 	bic.w	r3, fp, #4
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	f04f 0900 	mov.w	r9, #0
 800a78a:	9700      	str	r7, [sp, #0]
 800a78c:	4633      	mov	r3, r6
 800a78e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a790:	4621      	mov	r1, r4
 800a792:	4628      	mov	r0, r5
 800a794:	f000 f9d2 	bl	800ab3c <_printf_common>
 800a798:	3001      	adds	r0, #1
 800a79a:	f040 808d 	bne.w	800a8b8 <_printf_float+0x1d0>
 800a79e:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a2:	b00d      	add	sp, #52	@ 0x34
 800a7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a8:	4642      	mov	r2, r8
 800a7aa:	464b      	mov	r3, r9
 800a7ac:	4640      	mov	r0, r8
 800a7ae:	4649      	mov	r1, r9
 800a7b0:	f7f6 f9e4 	bl	8000b7c <__aeabi_dcmpun>
 800a7b4:	b140      	cbz	r0, 800a7c8 <_printf_float+0xe0>
 800a7b6:	464b      	mov	r3, r9
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	bfbc      	itt	lt
 800a7bc:	232d      	movlt	r3, #45	@ 0x2d
 800a7be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a7c2:	4a7e      	ldr	r2, [pc, #504]	@ (800a9bc <_printf_float+0x2d4>)
 800a7c4:	4b7e      	ldr	r3, [pc, #504]	@ (800a9c0 <_printf_float+0x2d8>)
 800a7c6:	e7d4      	b.n	800a772 <_printf_float+0x8a>
 800a7c8:	6863      	ldr	r3, [r4, #4]
 800a7ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a7ce:	9206      	str	r2, [sp, #24]
 800a7d0:	1c5a      	adds	r2, r3, #1
 800a7d2:	d13b      	bne.n	800a84c <_printf_float+0x164>
 800a7d4:	2306      	movs	r3, #6
 800a7d6:	6063      	str	r3, [r4, #4]
 800a7d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a7dc:	2300      	movs	r3, #0
 800a7de:	6022      	str	r2, [r4, #0]
 800a7e0:	9303      	str	r3, [sp, #12]
 800a7e2:	ab0a      	add	r3, sp, #40	@ 0x28
 800a7e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a7e8:	ab09      	add	r3, sp, #36	@ 0x24
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	6861      	ldr	r1, [r4, #4]
 800a7ee:	ec49 8b10 	vmov	d0, r8, r9
 800a7f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	f7ff fed6 	bl	800a5a8 <__cvt>
 800a7fc:	9b06      	ldr	r3, [sp, #24]
 800a7fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a800:	2b47      	cmp	r3, #71	@ 0x47
 800a802:	4680      	mov	r8, r0
 800a804:	d129      	bne.n	800a85a <_printf_float+0x172>
 800a806:	1cc8      	adds	r0, r1, #3
 800a808:	db02      	blt.n	800a810 <_printf_float+0x128>
 800a80a:	6863      	ldr	r3, [r4, #4]
 800a80c:	4299      	cmp	r1, r3
 800a80e:	dd41      	ble.n	800a894 <_printf_float+0x1ac>
 800a810:	f1aa 0a02 	sub.w	sl, sl, #2
 800a814:	fa5f fa8a 	uxtb.w	sl, sl
 800a818:	3901      	subs	r1, #1
 800a81a:	4652      	mov	r2, sl
 800a81c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a820:	9109      	str	r1, [sp, #36]	@ 0x24
 800a822:	f7ff ff26 	bl	800a672 <__exponent>
 800a826:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a828:	1813      	adds	r3, r2, r0
 800a82a:	2a01      	cmp	r2, #1
 800a82c:	4681      	mov	r9, r0
 800a82e:	6123      	str	r3, [r4, #16]
 800a830:	dc02      	bgt.n	800a838 <_printf_float+0x150>
 800a832:	6822      	ldr	r2, [r4, #0]
 800a834:	07d2      	lsls	r2, r2, #31
 800a836:	d501      	bpl.n	800a83c <_printf_float+0x154>
 800a838:	3301      	adds	r3, #1
 800a83a:	6123      	str	r3, [r4, #16]
 800a83c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a840:	2b00      	cmp	r3, #0
 800a842:	d0a2      	beq.n	800a78a <_printf_float+0xa2>
 800a844:	232d      	movs	r3, #45	@ 0x2d
 800a846:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a84a:	e79e      	b.n	800a78a <_printf_float+0xa2>
 800a84c:	9a06      	ldr	r2, [sp, #24]
 800a84e:	2a47      	cmp	r2, #71	@ 0x47
 800a850:	d1c2      	bne.n	800a7d8 <_printf_float+0xf0>
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1c0      	bne.n	800a7d8 <_printf_float+0xf0>
 800a856:	2301      	movs	r3, #1
 800a858:	e7bd      	b.n	800a7d6 <_printf_float+0xee>
 800a85a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a85e:	d9db      	bls.n	800a818 <_printf_float+0x130>
 800a860:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a864:	d118      	bne.n	800a898 <_printf_float+0x1b0>
 800a866:	2900      	cmp	r1, #0
 800a868:	6863      	ldr	r3, [r4, #4]
 800a86a:	dd0b      	ble.n	800a884 <_printf_float+0x19c>
 800a86c:	6121      	str	r1, [r4, #16]
 800a86e:	b913      	cbnz	r3, 800a876 <_printf_float+0x18e>
 800a870:	6822      	ldr	r2, [r4, #0]
 800a872:	07d0      	lsls	r0, r2, #31
 800a874:	d502      	bpl.n	800a87c <_printf_float+0x194>
 800a876:	3301      	adds	r3, #1
 800a878:	440b      	add	r3, r1
 800a87a:	6123      	str	r3, [r4, #16]
 800a87c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a87e:	f04f 0900 	mov.w	r9, #0
 800a882:	e7db      	b.n	800a83c <_printf_float+0x154>
 800a884:	b913      	cbnz	r3, 800a88c <_printf_float+0x1a4>
 800a886:	6822      	ldr	r2, [r4, #0]
 800a888:	07d2      	lsls	r2, r2, #31
 800a88a:	d501      	bpl.n	800a890 <_printf_float+0x1a8>
 800a88c:	3302      	adds	r3, #2
 800a88e:	e7f4      	b.n	800a87a <_printf_float+0x192>
 800a890:	2301      	movs	r3, #1
 800a892:	e7f2      	b.n	800a87a <_printf_float+0x192>
 800a894:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a898:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a89a:	4299      	cmp	r1, r3
 800a89c:	db05      	blt.n	800a8aa <_printf_float+0x1c2>
 800a89e:	6823      	ldr	r3, [r4, #0]
 800a8a0:	6121      	str	r1, [r4, #16]
 800a8a2:	07d8      	lsls	r0, r3, #31
 800a8a4:	d5ea      	bpl.n	800a87c <_printf_float+0x194>
 800a8a6:	1c4b      	adds	r3, r1, #1
 800a8a8:	e7e7      	b.n	800a87a <_printf_float+0x192>
 800a8aa:	2900      	cmp	r1, #0
 800a8ac:	bfd4      	ite	le
 800a8ae:	f1c1 0202 	rsble	r2, r1, #2
 800a8b2:	2201      	movgt	r2, #1
 800a8b4:	4413      	add	r3, r2
 800a8b6:	e7e0      	b.n	800a87a <_printf_float+0x192>
 800a8b8:	6823      	ldr	r3, [r4, #0]
 800a8ba:	055a      	lsls	r2, r3, #21
 800a8bc:	d407      	bmi.n	800a8ce <_printf_float+0x1e6>
 800a8be:	6923      	ldr	r3, [r4, #16]
 800a8c0:	4642      	mov	r2, r8
 800a8c2:	4631      	mov	r1, r6
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	47b8      	blx	r7
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	d12b      	bne.n	800a924 <_printf_float+0x23c>
 800a8cc:	e767      	b.n	800a79e <_printf_float+0xb6>
 800a8ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a8d2:	f240 80dd 	bls.w	800aa90 <_printf_float+0x3a8>
 800a8d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a8da:	2200      	movs	r2, #0
 800a8dc:	2300      	movs	r3, #0
 800a8de:	f7f6 f91b 	bl	8000b18 <__aeabi_dcmpeq>
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	d033      	beq.n	800a94e <_printf_float+0x266>
 800a8e6:	4a37      	ldr	r2, [pc, #220]	@ (800a9c4 <_printf_float+0x2dc>)
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	4631      	mov	r1, r6
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	47b8      	blx	r7
 800a8f0:	3001      	adds	r0, #1
 800a8f2:	f43f af54 	beq.w	800a79e <_printf_float+0xb6>
 800a8f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a8fa:	4543      	cmp	r3, r8
 800a8fc:	db02      	blt.n	800a904 <_printf_float+0x21c>
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	07d8      	lsls	r0, r3, #31
 800a902:	d50f      	bpl.n	800a924 <_printf_float+0x23c>
 800a904:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a908:	4631      	mov	r1, r6
 800a90a:	4628      	mov	r0, r5
 800a90c:	47b8      	blx	r7
 800a90e:	3001      	adds	r0, #1
 800a910:	f43f af45 	beq.w	800a79e <_printf_float+0xb6>
 800a914:	f04f 0900 	mov.w	r9, #0
 800a918:	f108 38ff 	add.w	r8, r8, #4294967295
 800a91c:	f104 0a1a 	add.w	sl, r4, #26
 800a920:	45c8      	cmp	r8, r9
 800a922:	dc09      	bgt.n	800a938 <_printf_float+0x250>
 800a924:	6823      	ldr	r3, [r4, #0]
 800a926:	079b      	lsls	r3, r3, #30
 800a928:	f100 8103 	bmi.w	800ab32 <_printf_float+0x44a>
 800a92c:	68e0      	ldr	r0, [r4, #12]
 800a92e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a930:	4298      	cmp	r0, r3
 800a932:	bfb8      	it	lt
 800a934:	4618      	movlt	r0, r3
 800a936:	e734      	b.n	800a7a2 <_printf_float+0xba>
 800a938:	2301      	movs	r3, #1
 800a93a:	4652      	mov	r2, sl
 800a93c:	4631      	mov	r1, r6
 800a93e:	4628      	mov	r0, r5
 800a940:	47b8      	blx	r7
 800a942:	3001      	adds	r0, #1
 800a944:	f43f af2b 	beq.w	800a79e <_printf_float+0xb6>
 800a948:	f109 0901 	add.w	r9, r9, #1
 800a94c:	e7e8      	b.n	800a920 <_printf_float+0x238>
 800a94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a950:	2b00      	cmp	r3, #0
 800a952:	dc39      	bgt.n	800a9c8 <_printf_float+0x2e0>
 800a954:	4a1b      	ldr	r2, [pc, #108]	@ (800a9c4 <_printf_float+0x2dc>)
 800a956:	2301      	movs	r3, #1
 800a958:	4631      	mov	r1, r6
 800a95a:	4628      	mov	r0, r5
 800a95c:	47b8      	blx	r7
 800a95e:	3001      	adds	r0, #1
 800a960:	f43f af1d 	beq.w	800a79e <_printf_float+0xb6>
 800a964:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a968:	ea59 0303 	orrs.w	r3, r9, r3
 800a96c:	d102      	bne.n	800a974 <_printf_float+0x28c>
 800a96e:	6823      	ldr	r3, [r4, #0]
 800a970:	07d9      	lsls	r1, r3, #31
 800a972:	d5d7      	bpl.n	800a924 <_printf_float+0x23c>
 800a974:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a978:	4631      	mov	r1, r6
 800a97a:	4628      	mov	r0, r5
 800a97c:	47b8      	blx	r7
 800a97e:	3001      	adds	r0, #1
 800a980:	f43f af0d 	beq.w	800a79e <_printf_float+0xb6>
 800a984:	f04f 0a00 	mov.w	sl, #0
 800a988:	f104 0b1a 	add.w	fp, r4, #26
 800a98c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a98e:	425b      	negs	r3, r3
 800a990:	4553      	cmp	r3, sl
 800a992:	dc01      	bgt.n	800a998 <_printf_float+0x2b0>
 800a994:	464b      	mov	r3, r9
 800a996:	e793      	b.n	800a8c0 <_printf_float+0x1d8>
 800a998:	2301      	movs	r3, #1
 800a99a:	465a      	mov	r2, fp
 800a99c:	4631      	mov	r1, r6
 800a99e:	4628      	mov	r0, r5
 800a9a0:	47b8      	blx	r7
 800a9a2:	3001      	adds	r0, #1
 800a9a4:	f43f aefb 	beq.w	800a79e <_printf_float+0xb6>
 800a9a8:	f10a 0a01 	add.w	sl, sl, #1
 800a9ac:	e7ee      	b.n	800a98c <_printf_float+0x2a4>
 800a9ae:	bf00      	nop
 800a9b0:	7fefffff 	.word	0x7fefffff
 800a9b4:	0800ef58 	.word	0x0800ef58
 800a9b8:	0800ef5c 	.word	0x0800ef5c
 800a9bc:	0800ef60 	.word	0x0800ef60
 800a9c0:	0800ef64 	.word	0x0800ef64
 800a9c4:	0800ef68 	.word	0x0800ef68
 800a9c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a9ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a9ce:	4553      	cmp	r3, sl
 800a9d0:	bfa8      	it	ge
 800a9d2:	4653      	movge	r3, sl
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	4699      	mov	r9, r3
 800a9d8:	dc36      	bgt.n	800aa48 <_printf_float+0x360>
 800a9da:	f04f 0b00 	mov.w	fp, #0
 800a9de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9e2:	f104 021a 	add.w	r2, r4, #26
 800a9e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a9e8:	9306      	str	r3, [sp, #24]
 800a9ea:	eba3 0309 	sub.w	r3, r3, r9
 800a9ee:	455b      	cmp	r3, fp
 800a9f0:	dc31      	bgt.n	800aa56 <_printf_float+0x36e>
 800a9f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9f4:	459a      	cmp	sl, r3
 800a9f6:	dc3a      	bgt.n	800aa6e <_printf_float+0x386>
 800a9f8:	6823      	ldr	r3, [r4, #0]
 800a9fa:	07da      	lsls	r2, r3, #31
 800a9fc:	d437      	bmi.n	800aa6e <_printf_float+0x386>
 800a9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa00:	ebaa 0903 	sub.w	r9, sl, r3
 800aa04:	9b06      	ldr	r3, [sp, #24]
 800aa06:	ebaa 0303 	sub.w	r3, sl, r3
 800aa0a:	4599      	cmp	r9, r3
 800aa0c:	bfa8      	it	ge
 800aa0e:	4699      	movge	r9, r3
 800aa10:	f1b9 0f00 	cmp.w	r9, #0
 800aa14:	dc33      	bgt.n	800aa7e <_printf_float+0x396>
 800aa16:	f04f 0800 	mov.w	r8, #0
 800aa1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa1e:	f104 0b1a 	add.w	fp, r4, #26
 800aa22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa24:	ebaa 0303 	sub.w	r3, sl, r3
 800aa28:	eba3 0309 	sub.w	r3, r3, r9
 800aa2c:	4543      	cmp	r3, r8
 800aa2e:	f77f af79 	ble.w	800a924 <_printf_float+0x23c>
 800aa32:	2301      	movs	r3, #1
 800aa34:	465a      	mov	r2, fp
 800aa36:	4631      	mov	r1, r6
 800aa38:	4628      	mov	r0, r5
 800aa3a:	47b8      	blx	r7
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	f43f aeae 	beq.w	800a79e <_printf_float+0xb6>
 800aa42:	f108 0801 	add.w	r8, r8, #1
 800aa46:	e7ec      	b.n	800aa22 <_printf_float+0x33a>
 800aa48:	4642      	mov	r2, r8
 800aa4a:	4631      	mov	r1, r6
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	47b8      	blx	r7
 800aa50:	3001      	adds	r0, #1
 800aa52:	d1c2      	bne.n	800a9da <_printf_float+0x2f2>
 800aa54:	e6a3      	b.n	800a79e <_printf_float+0xb6>
 800aa56:	2301      	movs	r3, #1
 800aa58:	4631      	mov	r1, r6
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	9206      	str	r2, [sp, #24]
 800aa5e:	47b8      	blx	r7
 800aa60:	3001      	adds	r0, #1
 800aa62:	f43f ae9c 	beq.w	800a79e <_printf_float+0xb6>
 800aa66:	9a06      	ldr	r2, [sp, #24]
 800aa68:	f10b 0b01 	add.w	fp, fp, #1
 800aa6c:	e7bb      	b.n	800a9e6 <_printf_float+0x2fe>
 800aa6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa72:	4631      	mov	r1, r6
 800aa74:	4628      	mov	r0, r5
 800aa76:	47b8      	blx	r7
 800aa78:	3001      	adds	r0, #1
 800aa7a:	d1c0      	bne.n	800a9fe <_printf_float+0x316>
 800aa7c:	e68f      	b.n	800a79e <_printf_float+0xb6>
 800aa7e:	9a06      	ldr	r2, [sp, #24]
 800aa80:	464b      	mov	r3, r9
 800aa82:	4442      	add	r2, r8
 800aa84:	4631      	mov	r1, r6
 800aa86:	4628      	mov	r0, r5
 800aa88:	47b8      	blx	r7
 800aa8a:	3001      	adds	r0, #1
 800aa8c:	d1c3      	bne.n	800aa16 <_printf_float+0x32e>
 800aa8e:	e686      	b.n	800a79e <_printf_float+0xb6>
 800aa90:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aa94:	f1ba 0f01 	cmp.w	sl, #1
 800aa98:	dc01      	bgt.n	800aa9e <_printf_float+0x3b6>
 800aa9a:	07db      	lsls	r3, r3, #31
 800aa9c:	d536      	bpl.n	800ab0c <_printf_float+0x424>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	4642      	mov	r2, r8
 800aaa2:	4631      	mov	r1, r6
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	47b8      	blx	r7
 800aaa8:	3001      	adds	r0, #1
 800aaaa:	f43f ae78 	beq.w	800a79e <_printf_float+0xb6>
 800aaae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aab2:	4631      	mov	r1, r6
 800aab4:	4628      	mov	r0, r5
 800aab6:	47b8      	blx	r7
 800aab8:	3001      	adds	r0, #1
 800aaba:	f43f ae70 	beq.w	800a79e <_printf_float+0xb6>
 800aabe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aac2:	2200      	movs	r2, #0
 800aac4:	2300      	movs	r3, #0
 800aac6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aaca:	f7f6 f825 	bl	8000b18 <__aeabi_dcmpeq>
 800aace:	b9c0      	cbnz	r0, 800ab02 <_printf_float+0x41a>
 800aad0:	4653      	mov	r3, sl
 800aad2:	f108 0201 	add.w	r2, r8, #1
 800aad6:	4631      	mov	r1, r6
 800aad8:	4628      	mov	r0, r5
 800aada:	47b8      	blx	r7
 800aadc:	3001      	adds	r0, #1
 800aade:	d10c      	bne.n	800aafa <_printf_float+0x412>
 800aae0:	e65d      	b.n	800a79e <_printf_float+0xb6>
 800aae2:	2301      	movs	r3, #1
 800aae4:	465a      	mov	r2, fp
 800aae6:	4631      	mov	r1, r6
 800aae8:	4628      	mov	r0, r5
 800aaea:	47b8      	blx	r7
 800aaec:	3001      	adds	r0, #1
 800aaee:	f43f ae56 	beq.w	800a79e <_printf_float+0xb6>
 800aaf2:	f108 0801 	add.w	r8, r8, #1
 800aaf6:	45d0      	cmp	r8, sl
 800aaf8:	dbf3      	blt.n	800aae2 <_printf_float+0x3fa>
 800aafa:	464b      	mov	r3, r9
 800aafc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ab00:	e6df      	b.n	800a8c2 <_printf_float+0x1da>
 800ab02:	f04f 0800 	mov.w	r8, #0
 800ab06:	f104 0b1a 	add.w	fp, r4, #26
 800ab0a:	e7f4      	b.n	800aaf6 <_printf_float+0x40e>
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	4642      	mov	r2, r8
 800ab10:	e7e1      	b.n	800aad6 <_printf_float+0x3ee>
 800ab12:	2301      	movs	r3, #1
 800ab14:	464a      	mov	r2, r9
 800ab16:	4631      	mov	r1, r6
 800ab18:	4628      	mov	r0, r5
 800ab1a:	47b8      	blx	r7
 800ab1c:	3001      	adds	r0, #1
 800ab1e:	f43f ae3e 	beq.w	800a79e <_printf_float+0xb6>
 800ab22:	f108 0801 	add.w	r8, r8, #1
 800ab26:	68e3      	ldr	r3, [r4, #12]
 800ab28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab2a:	1a5b      	subs	r3, r3, r1
 800ab2c:	4543      	cmp	r3, r8
 800ab2e:	dcf0      	bgt.n	800ab12 <_printf_float+0x42a>
 800ab30:	e6fc      	b.n	800a92c <_printf_float+0x244>
 800ab32:	f04f 0800 	mov.w	r8, #0
 800ab36:	f104 0919 	add.w	r9, r4, #25
 800ab3a:	e7f4      	b.n	800ab26 <_printf_float+0x43e>

0800ab3c <_printf_common>:
 800ab3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab40:	4616      	mov	r6, r2
 800ab42:	4698      	mov	r8, r3
 800ab44:	688a      	ldr	r2, [r1, #8]
 800ab46:	690b      	ldr	r3, [r1, #16]
 800ab48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	bfb8      	it	lt
 800ab50:	4613      	movlt	r3, r2
 800ab52:	6033      	str	r3, [r6, #0]
 800ab54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab58:	4607      	mov	r7, r0
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	b10a      	cbz	r2, 800ab62 <_printf_common+0x26>
 800ab5e:	3301      	adds	r3, #1
 800ab60:	6033      	str	r3, [r6, #0]
 800ab62:	6823      	ldr	r3, [r4, #0]
 800ab64:	0699      	lsls	r1, r3, #26
 800ab66:	bf42      	ittt	mi
 800ab68:	6833      	ldrmi	r3, [r6, #0]
 800ab6a:	3302      	addmi	r3, #2
 800ab6c:	6033      	strmi	r3, [r6, #0]
 800ab6e:	6825      	ldr	r5, [r4, #0]
 800ab70:	f015 0506 	ands.w	r5, r5, #6
 800ab74:	d106      	bne.n	800ab84 <_printf_common+0x48>
 800ab76:	f104 0a19 	add.w	sl, r4, #25
 800ab7a:	68e3      	ldr	r3, [r4, #12]
 800ab7c:	6832      	ldr	r2, [r6, #0]
 800ab7e:	1a9b      	subs	r3, r3, r2
 800ab80:	42ab      	cmp	r3, r5
 800ab82:	dc26      	bgt.n	800abd2 <_printf_common+0x96>
 800ab84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab88:	6822      	ldr	r2, [r4, #0]
 800ab8a:	3b00      	subs	r3, #0
 800ab8c:	bf18      	it	ne
 800ab8e:	2301      	movne	r3, #1
 800ab90:	0692      	lsls	r2, r2, #26
 800ab92:	d42b      	bmi.n	800abec <_printf_common+0xb0>
 800ab94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab98:	4641      	mov	r1, r8
 800ab9a:	4638      	mov	r0, r7
 800ab9c:	47c8      	blx	r9
 800ab9e:	3001      	adds	r0, #1
 800aba0:	d01e      	beq.n	800abe0 <_printf_common+0xa4>
 800aba2:	6823      	ldr	r3, [r4, #0]
 800aba4:	6922      	ldr	r2, [r4, #16]
 800aba6:	f003 0306 	and.w	r3, r3, #6
 800abaa:	2b04      	cmp	r3, #4
 800abac:	bf02      	ittt	eq
 800abae:	68e5      	ldreq	r5, [r4, #12]
 800abb0:	6833      	ldreq	r3, [r6, #0]
 800abb2:	1aed      	subeq	r5, r5, r3
 800abb4:	68a3      	ldr	r3, [r4, #8]
 800abb6:	bf0c      	ite	eq
 800abb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abbc:	2500      	movne	r5, #0
 800abbe:	4293      	cmp	r3, r2
 800abc0:	bfc4      	itt	gt
 800abc2:	1a9b      	subgt	r3, r3, r2
 800abc4:	18ed      	addgt	r5, r5, r3
 800abc6:	2600      	movs	r6, #0
 800abc8:	341a      	adds	r4, #26
 800abca:	42b5      	cmp	r5, r6
 800abcc:	d11a      	bne.n	800ac04 <_printf_common+0xc8>
 800abce:	2000      	movs	r0, #0
 800abd0:	e008      	b.n	800abe4 <_printf_common+0xa8>
 800abd2:	2301      	movs	r3, #1
 800abd4:	4652      	mov	r2, sl
 800abd6:	4641      	mov	r1, r8
 800abd8:	4638      	mov	r0, r7
 800abda:	47c8      	blx	r9
 800abdc:	3001      	adds	r0, #1
 800abde:	d103      	bne.n	800abe8 <_printf_common+0xac>
 800abe0:	f04f 30ff 	mov.w	r0, #4294967295
 800abe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abe8:	3501      	adds	r5, #1
 800abea:	e7c6      	b.n	800ab7a <_printf_common+0x3e>
 800abec:	18e1      	adds	r1, r4, r3
 800abee:	1c5a      	adds	r2, r3, #1
 800abf0:	2030      	movs	r0, #48	@ 0x30
 800abf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800abf6:	4422      	add	r2, r4
 800abf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800abfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac00:	3302      	adds	r3, #2
 800ac02:	e7c7      	b.n	800ab94 <_printf_common+0x58>
 800ac04:	2301      	movs	r3, #1
 800ac06:	4622      	mov	r2, r4
 800ac08:	4641      	mov	r1, r8
 800ac0a:	4638      	mov	r0, r7
 800ac0c:	47c8      	blx	r9
 800ac0e:	3001      	adds	r0, #1
 800ac10:	d0e6      	beq.n	800abe0 <_printf_common+0xa4>
 800ac12:	3601      	adds	r6, #1
 800ac14:	e7d9      	b.n	800abca <_printf_common+0x8e>
	...

0800ac18 <_printf_i>:
 800ac18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac1c:	7e0f      	ldrb	r7, [r1, #24]
 800ac1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac20:	2f78      	cmp	r7, #120	@ 0x78
 800ac22:	4691      	mov	r9, r2
 800ac24:	4680      	mov	r8, r0
 800ac26:	460c      	mov	r4, r1
 800ac28:	469a      	mov	sl, r3
 800ac2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac2e:	d807      	bhi.n	800ac40 <_printf_i+0x28>
 800ac30:	2f62      	cmp	r7, #98	@ 0x62
 800ac32:	d80a      	bhi.n	800ac4a <_printf_i+0x32>
 800ac34:	2f00      	cmp	r7, #0
 800ac36:	f000 80d2 	beq.w	800adde <_printf_i+0x1c6>
 800ac3a:	2f58      	cmp	r7, #88	@ 0x58
 800ac3c:	f000 80b9 	beq.w	800adb2 <_printf_i+0x19a>
 800ac40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac48:	e03a      	b.n	800acc0 <_printf_i+0xa8>
 800ac4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac4e:	2b15      	cmp	r3, #21
 800ac50:	d8f6      	bhi.n	800ac40 <_printf_i+0x28>
 800ac52:	a101      	add	r1, pc, #4	@ (adr r1, 800ac58 <_printf_i+0x40>)
 800ac54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac58:	0800acb1 	.word	0x0800acb1
 800ac5c:	0800acc5 	.word	0x0800acc5
 800ac60:	0800ac41 	.word	0x0800ac41
 800ac64:	0800ac41 	.word	0x0800ac41
 800ac68:	0800ac41 	.word	0x0800ac41
 800ac6c:	0800ac41 	.word	0x0800ac41
 800ac70:	0800acc5 	.word	0x0800acc5
 800ac74:	0800ac41 	.word	0x0800ac41
 800ac78:	0800ac41 	.word	0x0800ac41
 800ac7c:	0800ac41 	.word	0x0800ac41
 800ac80:	0800ac41 	.word	0x0800ac41
 800ac84:	0800adc5 	.word	0x0800adc5
 800ac88:	0800acef 	.word	0x0800acef
 800ac8c:	0800ad7f 	.word	0x0800ad7f
 800ac90:	0800ac41 	.word	0x0800ac41
 800ac94:	0800ac41 	.word	0x0800ac41
 800ac98:	0800ade7 	.word	0x0800ade7
 800ac9c:	0800ac41 	.word	0x0800ac41
 800aca0:	0800acef 	.word	0x0800acef
 800aca4:	0800ac41 	.word	0x0800ac41
 800aca8:	0800ac41 	.word	0x0800ac41
 800acac:	0800ad87 	.word	0x0800ad87
 800acb0:	6833      	ldr	r3, [r6, #0]
 800acb2:	1d1a      	adds	r2, r3, #4
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	6032      	str	r2, [r6, #0]
 800acb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800acc0:	2301      	movs	r3, #1
 800acc2:	e09d      	b.n	800ae00 <_printf_i+0x1e8>
 800acc4:	6833      	ldr	r3, [r6, #0]
 800acc6:	6820      	ldr	r0, [r4, #0]
 800acc8:	1d19      	adds	r1, r3, #4
 800acca:	6031      	str	r1, [r6, #0]
 800accc:	0606      	lsls	r6, r0, #24
 800acce:	d501      	bpl.n	800acd4 <_printf_i+0xbc>
 800acd0:	681d      	ldr	r5, [r3, #0]
 800acd2:	e003      	b.n	800acdc <_printf_i+0xc4>
 800acd4:	0645      	lsls	r5, r0, #25
 800acd6:	d5fb      	bpl.n	800acd0 <_printf_i+0xb8>
 800acd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800acdc:	2d00      	cmp	r5, #0
 800acde:	da03      	bge.n	800ace8 <_printf_i+0xd0>
 800ace0:	232d      	movs	r3, #45	@ 0x2d
 800ace2:	426d      	negs	r5, r5
 800ace4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ace8:	4859      	ldr	r0, [pc, #356]	@ (800ae50 <_printf_i+0x238>)
 800acea:	230a      	movs	r3, #10
 800acec:	e011      	b.n	800ad12 <_printf_i+0xfa>
 800acee:	6821      	ldr	r1, [r4, #0]
 800acf0:	6833      	ldr	r3, [r6, #0]
 800acf2:	0608      	lsls	r0, r1, #24
 800acf4:	f853 5b04 	ldr.w	r5, [r3], #4
 800acf8:	d402      	bmi.n	800ad00 <_printf_i+0xe8>
 800acfa:	0649      	lsls	r1, r1, #25
 800acfc:	bf48      	it	mi
 800acfe:	b2ad      	uxthmi	r5, r5
 800ad00:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad02:	4853      	ldr	r0, [pc, #332]	@ (800ae50 <_printf_i+0x238>)
 800ad04:	6033      	str	r3, [r6, #0]
 800ad06:	bf14      	ite	ne
 800ad08:	230a      	movne	r3, #10
 800ad0a:	2308      	moveq	r3, #8
 800ad0c:	2100      	movs	r1, #0
 800ad0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad12:	6866      	ldr	r6, [r4, #4]
 800ad14:	60a6      	str	r6, [r4, #8]
 800ad16:	2e00      	cmp	r6, #0
 800ad18:	bfa2      	ittt	ge
 800ad1a:	6821      	ldrge	r1, [r4, #0]
 800ad1c:	f021 0104 	bicge.w	r1, r1, #4
 800ad20:	6021      	strge	r1, [r4, #0]
 800ad22:	b90d      	cbnz	r5, 800ad28 <_printf_i+0x110>
 800ad24:	2e00      	cmp	r6, #0
 800ad26:	d04b      	beq.n	800adc0 <_printf_i+0x1a8>
 800ad28:	4616      	mov	r6, r2
 800ad2a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad2e:	fb03 5711 	mls	r7, r3, r1, r5
 800ad32:	5dc7      	ldrb	r7, [r0, r7]
 800ad34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad38:	462f      	mov	r7, r5
 800ad3a:	42bb      	cmp	r3, r7
 800ad3c:	460d      	mov	r5, r1
 800ad3e:	d9f4      	bls.n	800ad2a <_printf_i+0x112>
 800ad40:	2b08      	cmp	r3, #8
 800ad42:	d10b      	bne.n	800ad5c <_printf_i+0x144>
 800ad44:	6823      	ldr	r3, [r4, #0]
 800ad46:	07df      	lsls	r7, r3, #31
 800ad48:	d508      	bpl.n	800ad5c <_printf_i+0x144>
 800ad4a:	6923      	ldr	r3, [r4, #16]
 800ad4c:	6861      	ldr	r1, [r4, #4]
 800ad4e:	4299      	cmp	r1, r3
 800ad50:	bfde      	ittt	le
 800ad52:	2330      	movle	r3, #48	@ 0x30
 800ad54:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad58:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad5c:	1b92      	subs	r2, r2, r6
 800ad5e:	6122      	str	r2, [r4, #16]
 800ad60:	f8cd a000 	str.w	sl, [sp]
 800ad64:	464b      	mov	r3, r9
 800ad66:	aa03      	add	r2, sp, #12
 800ad68:	4621      	mov	r1, r4
 800ad6a:	4640      	mov	r0, r8
 800ad6c:	f7ff fee6 	bl	800ab3c <_printf_common>
 800ad70:	3001      	adds	r0, #1
 800ad72:	d14a      	bne.n	800ae0a <_printf_i+0x1f2>
 800ad74:	f04f 30ff 	mov.w	r0, #4294967295
 800ad78:	b004      	add	sp, #16
 800ad7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad7e:	6823      	ldr	r3, [r4, #0]
 800ad80:	f043 0320 	orr.w	r3, r3, #32
 800ad84:	6023      	str	r3, [r4, #0]
 800ad86:	4833      	ldr	r0, [pc, #204]	@ (800ae54 <_printf_i+0x23c>)
 800ad88:	2778      	movs	r7, #120	@ 0x78
 800ad8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad8e:	6823      	ldr	r3, [r4, #0]
 800ad90:	6831      	ldr	r1, [r6, #0]
 800ad92:	061f      	lsls	r7, r3, #24
 800ad94:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad98:	d402      	bmi.n	800ada0 <_printf_i+0x188>
 800ad9a:	065f      	lsls	r7, r3, #25
 800ad9c:	bf48      	it	mi
 800ad9e:	b2ad      	uxthmi	r5, r5
 800ada0:	6031      	str	r1, [r6, #0]
 800ada2:	07d9      	lsls	r1, r3, #31
 800ada4:	bf44      	itt	mi
 800ada6:	f043 0320 	orrmi.w	r3, r3, #32
 800adaa:	6023      	strmi	r3, [r4, #0]
 800adac:	b11d      	cbz	r5, 800adb6 <_printf_i+0x19e>
 800adae:	2310      	movs	r3, #16
 800adb0:	e7ac      	b.n	800ad0c <_printf_i+0xf4>
 800adb2:	4827      	ldr	r0, [pc, #156]	@ (800ae50 <_printf_i+0x238>)
 800adb4:	e7e9      	b.n	800ad8a <_printf_i+0x172>
 800adb6:	6823      	ldr	r3, [r4, #0]
 800adb8:	f023 0320 	bic.w	r3, r3, #32
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	e7f6      	b.n	800adae <_printf_i+0x196>
 800adc0:	4616      	mov	r6, r2
 800adc2:	e7bd      	b.n	800ad40 <_printf_i+0x128>
 800adc4:	6833      	ldr	r3, [r6, #0]
 800adc6:	6825      	ldr	r5, [r4, #0]
 800adc8:	6961      	ldr	r1, [r4, #20]
 800adca:	1d18      	adds	r0, r3, #4
 800adcc:	6030      	str	r0, [r6, #0]
 800adce:	062e      	lsls	r6, r5, #24
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	d501      	bpl.n	800add8 <_printf_i+0x1c0>
 800add4:	6019      	str	r1, [r3, #0]
 800add6:	e002      	b.n	800adde <_printf_i+0x1c6>
 800add8:	0668      	lsls	r0, r5, #25
 800adda:	d5fb      	bpl.n	800add4 <_printf_i+0x1bc>
 800addc:	8019      	strh	r1, [r3, #0]
 800adde:	2300      	movs	r3, #0
 800ade0:	6123      	str	r3, [r4, #16]
 800ade2:	4616      	mov	r6, r2
 800ade4:	e7bc      	b.n	800ad60 <_printf_i+0x148>
 800ade6:	6833      	ldr	r3, [r6, #0]
 800ade8:	1d1a      	adds	r2, r3, #4
 800adea:	6032      	str	r2, [r6, #0]
 800adec:	681e      	ldr	r6, [r3, #0]
 800adee:	6862      	ldr	r2, [r4, #4]
 800adf0:	2100      	movs	r1, #0
 800adf2:	4630      	mov	r0, r6
 800adf4:	f7f5 fa14 	bl	8000220 <memchr>
 800adf8:	b108      	cbz	r0, 800adfe <_printf_i+0x1e6>
 800adfa:	1b80      	subs	r0, r0, r6
 800adfc:	6060      	str	r0, [r4, #4]
 800adfe:	6863      	ldr	r3, [r4, #4]
 800ae00:	6123      	str	r3, [r4, #16]
 800ae02:	2300      	movs	r3, #0
 800ae04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae08:	e7aa      	b.n	800ad60 <_printf_i+0x148>
 800ae0a:	6923      	ldr	r3, [r4, #16]
 800ae0c:	4632      	mov	r2, r6
 800ae0e:	4649      	mov	r1, r9
 800ae10:	4640      	mov	r0, r8
 800ae12:	47d0      	blx	sl
 800ae14:	3001      	adds	r0, #1
 800ae16:	d0ad      	beq.n	800ad74 <_printf_i+0x15c>
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	079b      	lsls	r3, r3, #30
 800ae1c:	d413      	bmi.n	800ae46 <_printf_i+0x22e>
 800ae1e:	68e0      	ldr	r0, [r4, #12]
 800ae20:	9b03      	ldr	r3, [sp, #12]
 800ae22:	4298      	cmp	r0, r3
 800ae24:	bfb8      	it	lt
 800ae26:	4618      	movlt	r0, r3
 800ae28:	e7a6      	b.n	800ad78 <_printf_i+0x160>
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	4632      	mov	r2, r6
 800ae2e:	4649      	mov	r1, r9
 800ae30:	4640      	mov	r0, r8
 800ae32:	47d0      	blx	sl
 800ae34:	3001      	adds	r0, #1
 800ae36:	d09d      	beq.n	800ad74 <_printf_i+0x15c>
 800ae38:	3501      	adds	r5, #1
 800ae3a:	68e3      	ldr	r3, [r4, #12]
 800ae3c:	9903      	ldr	r1, [sp, #12]
 800ae3e:	1a5b      	subs	r3, r3, r1
 800ae40:	42ab      	cmp	r3, r5
 800ae42:	dcf2      	bgt.n	800ae2a <_printf_i+0x212>
 800ae44:	e7eb      	b.n	800ae1e <_printf_i+0x206>
 800ae46:	2500      	movs	r5, #0
 800ae48:	f104 0619 	add.w	r6, r4, #25
 800ae4c:	e7f5      	b.n	800ae3a <_printf_i+0x222>
 800ae4e:	bf00      	nop
 800ae50:	0800ef6a 	.word	0x0800ef6a
 800ae54:	0800ef7b 	.word	0x0800ef7b

0800ae58 <_scanf_float>:
 800ae58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5c:	b087      	sub	sp, #28
 800ae5e:	4617      	mov	r7, r2
 800ae60:	9303      	str	r3, [sp, #12]
 800ae62:	688b      	ldr	r3, [r1, #8]
 800ae64:	1e5a      	subs	r2, r3, #1
 800ae66:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ae6a:	bf81      	itttt	hi
 800ae6c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ae70:	eb03 0b05 	addhi.w	fp, r3, r5
 800ae74:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ae78:	608b      	strhi	r3, [r1, #8]
 800ae7a:	680b      	ldr	r3, [r1, #0]
 800ae7c:	460a      	mov	r2, r1
 800ae7e:	f04f 0500 	mov.w	r5, #0
 800ae82:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ae86:	f842 3b1c 	str.w	r3, [r2], #28
 800ae8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ae8e:	4680      	mov	r8, r0
 800ae90:	460c      	mov	r4, r1
 800ae92:	bf98      	it	ls
 800ae94:	f04f 0b00 	movls.w	fp, #0
 800ae98:	9201      	str	r2, [sp, #4]
 800ae9a:	4616      	mov	r6, r2
 800ae9c:	46aa      	mov	sl, r5
 800ae9e:	46a9      	mov	r9, r5
 800aea0:	9502      	str	r5, [sp, #8]
 800aea2:	68a2      	ldr	r2, [r4, #8]
 800aea4:	b152      	cbz	r2, 800aebc <_scanf_float+0x64>
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	2b4e      	cmp	r3, #78	@ 0x4e
 800aeac:	d864      	bhi.n	800af78 <_scanf_float+0x120>
 800aeae:	2b40      	cmp	r3, #64	@ 0x40
 800aeb0:	d83c      	bhi.n	800af2c <_scanf_float+0xd4>
 800aeb2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800aeb6:	b2c8      	uxtb	r0, r1
 800aeb8:	280e      	cmp	r0, #14
 800aeba:	d93a      	bls.n	800af32 <_scanf_float+0xda>
 800aebc:	f1b9 0f00 	cmp.w	r9, #0
 800aec0:	d003      	beq.n	800aeca <_scanf_float+0x72>
 800aec2:	6823      	ldr	r3, [r4, #0]
 800aec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aece:	f1ba 0f01 	cmp.w	sl, #1
 800aed2:	f200 8117 	bhi.w	800b104 <_scanf_float+0x2ac>
 800aed6:	9b01      	ldr	r3, [sp, #4]
 800aed8:	429e      	cmp	r6, r3
 800aeda:	f200 8108 	bhi.w	800b0ee <_scanf_float+0x296>
 800aede:	2001      	movs	r0, #1
 800aee0:	b007      	add	sp, #28
 800aee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800aeea:	2a0d      	cmp	r2, #13
 800aeec:	d8e6      	bhi.n	800aebc <_scanf_float+0x64>
 800aeee:	a101      	add	r1, pc, #4	@ (adr r1, 800aef4 <_scanf_float+0x9c>)
 800aef0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aef4:	0800b03b 	.word	0x0800b03b
 800aef8:	0800aebd 	.word	0x0800aebd
 800aefc:	0800aebd 	.word	0x0800aebd
 800af00:	0800aebd 	.word	0x0800aebd
 800af04:	0800b09b 	.word	0x0800b09b
 800af08:	0800b073 	.word	0x0800b073
 800af0c:	0800aebd 	.word	0x0800aebd
 800af10:	0800aebd 	.word	0x0800aebd
 800af14:	0800b049 	.word	0x0800b049
 800af18:	0800aebd 	.word	0x0800aebd
 800af1c:	0800aebd 	.word	0x0800aebd
 800af20:	0800aebd 	.word	0x0800aebd
 800af24:	0800aebd 	.word	0x0800aebd
 800af28:	0800b001 	.word	0x0800b001
 800af2c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800af30:	e7db      	b.n	800aeea <_scanf_float+0x92>
 800af32:	290e      	cmp	r1, #14
 800af34:	d8c2      	bhi.n	800aebc <_scanf_float+0x64>
 800af36:	a001      	add	r0, pc, #4	@ (adr r0, 800af3c <_scanf_float+0xe4>)
 800af38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800af3c:	0800aff1 	.word	0x0800aff1
 800af40:	0800aebd 	.word	0x0800aebd
 800af44:	0800aff1 	.word	0x0800aff1
 800af48:	0800b087 	.word	0x0800b087
 800af4c:	0800aebd 	.word	0x0800aebd
 800af50:	0800af99 	.word	0x0800af99
 800af54:	0800afd7 	.word	0x0800afd7
 800af58:	0800afd7 	.word	0x0800afd7
 800af5c:	0800afd7 	.word	0x0800afd7
 800af60:	0800afd7 	.word	0x0800afd7
 800af64:	0800afd7 	.word	0x0800afd7
 800af68:	0800afd7 	.word	0x0800afd7
 800af6c:	0800afd7 	.word	0x0800afd7
 800af70:	0800afd7 	.word	0x0800afd7
 800af74:	0800afd7 	.word	0x0800afd7
 800af78:	2b6e      	cmp	r3, #110	@ 0x6e
 800af7a:	d809      	bhi.n	800af90 <_scanf_float+0x138>
 800af7c:	2b60      	cmp	r3, #96	@ 0x60
 800af7e:	d8b2      	bhi.n	800aee6 <_scanf_float+0x8e>
 800af80:	2b54      	cmp	r3, #84	@ 0x54
 800af82:	d07b      	beq.n	800b07c <_scanf_float+0x224>
 800af84:	2b59      	cmp	r3, #89	@ 0x59
 800af86:	d199      	bne.n	800aebc <_scanf_float+0x64>
 800af88:	2d07      	cmp	r5, #7
 800af8a:	d197      	bne.n	800aebc <_scanf_float+0x64>
 800af8c:	2508      	movs	r5, #8
 800af8e:	e02c      	b.n	800afea <_scanf_float+0x192>
 800af90:	2b74      	cmp	r3, #116	@ 0x74
 800af92:	d073      	beq.n	800b07c <_scanf_float+0x224>
 800af94:	2b79      	cmp	r3, #121	@ 0x79
 800af96:	e7f6      	b.n	800af86 <_scanf_float+0x12e>
 800af98:	6821      	ldr	r1, [r4, #0]
 800af9a:	05c8      	lsls	r0, r1, #23
 800af9c:	d51b      	bpl.n	800afd6 <_scanf_float+0x17e>
 800af9e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800afa2:	6021      	str	r1, [r4, #0]
 800afa4:	f109 0901 	add.w	r9, r9, #1
 800afa8:	f1bb 0f00 	cmp.w	fp, #0
 800afac:	d003      	beq.n	800afb6 <_scanf_float+0x15e>
 800afae:	3201      	adds	r2, #1
 800afb0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800afb4:	60a2      	str	r2, [r4, #8]
 800afb6:	68a3      	ldr	r3, [r4, #8]
 800afb8:	3b01      	subs	r3, #1
 800afba:	60a3      	str	r3, [r4, #8]
 800afbc:	6923      	ldr	r3, [r4, #16]
 800afbe:	3301      	adds	r3, #1
 800afc0:	6123      	str	r3, [r4, #16]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	3b01      	subs	r3, #1
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	607b      	str	r3, [r7, #4]
 800afca:	f340 8087 	ble.w	800b0dc <_scanf_float+0x284>
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	3301      	adds	r3, #1
 800afd2:	603b      	str	r3, [r7, #0]
 800afd4:	e765      	b.n	800aea2 <_scanf_float+0x4a>
 800afd6:	eb1a 0105 	adds.w	r1, sl, r5
 800afda:	f47f af6f 	bne.w	800aebc <_scanf_float+0x64>
 800afde:	6822      	ldr	r2, [r4, #0]
 800afe0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800afe4:	6022      	str	r2, [r4, #0]
 800afe6:	460d      	mov	r5, r1
 800afe8:	468a      	mov	sl, r1
 800afea:	f806 3b01 	strb.w	r3, [r6], #1
 800afee:	e7e2      	b.n	800afb6 <_scanf_float+0x15e>
 800aff0:	6822      	ldr	r2, [r4, #0]
 800aff2:	0610      	lsls	r0, r2, #24
 800aff4:	f57f af62 	bpl.w	800aebc <_scanf_float+0x64>
 800aff8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800affc:	6022      	str	r2, [r4, #0]
 800affe:	e7f4      	b.n	800afea <_scanf_float+0x192>
 800b000:	f1ba 0f00 	cmp.w	sl, #0
 800b004:	d10e      	bne.n	800b024 <_scanf_float+0x1cc>
 800b006:	f1b9 0f00 	cmp.w	r9, #0
 800b00a:	d10e      	bne.n	800b02a <_scanf_float+0x1d2>
 800b00c:	6822      	ldr	r2, [r4, #0]
 800b00e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b012:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b016:	d108      	bne.n	800b02a <_scanf_float+0x1d2>
 800b018:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b01c:	6022      	str	r2, [r4, #0]
 800b01e:	f04f 0a01 	mov.w	sl, #1
 800b022:	e7e2      	b.n	800afea <_scanf_float+0x192>
 800b024:	f1ba 0f02 	cmp.w	sl, #2
 800b028:	d055      	beq.n	800b0d6 <_scanf_float+0x27e>
 800b02a:	2d01      	cmp	r5, #1
 800b02c:	d002      	beq.n	800b034 <_scanf_float+0x1dc>
 800b02e:	2d04      	cmp	r5, #4
 800b030:	f47f af44 	bne.w	800aebc <_scanf_float+0x64>
 800b034:	3501      	adds	r5, #1
 800b036:	b2ed      	uxtb	r5, r5
 800b038:	e7d7      	b.n	800afea <_scanf_float+0x192>
 800b03a:	f1ba 0f01 	cmp.w	sl, #1
 800b03e:	f47f af3d 	bne.w	800aebc <_scanf_float+0x64>
 800b042:	f04f 0a02 	mov.w	sl, #2
 800b046:	e7d0      	b.n	800afea <_scanf_float+0x192>
 800b048:	b97d      	cbnz	r5, 800b06a <_scanf_float+0x212>
 800b04a:	f1b9 0f00 	cmp.w	r9, #0
 800b04e:	f47f af38 	bne.w	800aec2 <_scanf_float+0x6a>
 800b052:	6822      	ldr	r2, [r4, #0]
 800b054:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b058:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b05c:	f040 8108 	bne.w	800b270 <_scanf_float+0x418>
 800b060:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b064:	6022      	str	r2, [r4, #0]
 800b066:	2501      	movs	r5, #1
 800b068:	e7bf      	b.n	800afea <_scanf_float+0x192>
 800b06a:	2d03      	cmp	r5, #3
 800b06c:	d0e2      	beq.n	800b034 <_scanf_float+0x1dc>
 800b06e:	2d05      	cmp	r5, #5
 800b070:	e7de      	b.n	800b030 <_scanf_float+0x1d8>
 800b072:	2d02      	cmp	r5, #2
 800b074:	f47f af22 	bne.w	800aebc <_scanf_float+0x64>
 800b078:	2503      	movs	r5, #3
 800b07a:	e7b6      	b.n	800afea <_scanf_float+0x192>
 800b07c:	2d06      	cmp	r5, #6
 800b07e:	f47f af1d 	bne.w	800aebc <_scanf_float+0x64>
 800b082:	2507      	movs	r5, #7
 800b084:	e7b1      	b.n	800afea <_scanf_float+0x192>
 800b086:	6822      	ldr	r2, [r4, #0]
 800b088:	0591      	lsls	r1, r2, #22
 800b08a:	f57f af17 	bpl.w	800aebc <_scanf_float+0x64>
 800b08e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b092:	6022      	str	r2, [r4, #0]
 800b094:	f8cd 9008 	str.w	r9, [sp, #8]
 800b098:	e7a7      	b.n	800afea <_scanf_float+0x192>
 800b09a:	6822      	ldr	r2, [r4, #0]
 800b09c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b0a0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b0a4:	d006      	beq.n	800b0b4 <_scanf_float+0x25c>
 800b0a6:	0550      	lsls	r0, r2, #21
 800b0a8:	f57f af08 	bpl.w	800aebc <_scanf_float+0x64>
 800b0ac:	f1b9 0f00 	cmp.w	r9, #0
 800b0b0:	f000 80de 	beq.w	800b270 <_scanf_float+0x418>
 800b0b4:	0591      	lsls	r1, r2, #22
 800b0b6:	bf58      	it	pl
 800b0b8:	9902      	ldrpl	r1, [sp, #8]
 800b0ba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b0be:	bf58      	it	pl
 800b0c0:	eba9 0101 	subpl.w	r1, r9, r1
 800b0c4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b0c8:	bf58      	it	pl
 800b0ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b0ce:	6022      	str	r2, [r4, #0]
 800b0d0:	f04f 0900 	mov.w	r9, #0
 800b0d4:	e789      	b.n	800afea <_scanf_float+0x192>
 800b0d6:	f04f 0a03 	mov.w	sl, #3
 800b0da:	e786      	b.n	800afea <_scanf_float+0x192>
 800b0dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b0e0:	4639      	mov	r1, r7
 800b0e2:	4640      	mov	r0, r8
 800b0e4:	4798      	blx	r3
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	f43f aedb 	beq.w	800aea2 <_scanf_float+0x4a>
 800b0ec:	e6e6      	b.n	800aebc <_scanf_float+0x64>
 800b0ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b0f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b0f6:	463a      	mov	r2, r7
 800b0f8:	4640      	mov	r0, r8
 800b0fa:	4798      	blx	r3
 800b0fc:	6923      	ldr	r3, [r4, #16]
 800b0fe:	3b01      	subs	r3, #1
 800b100:	6123      	str	r3, [r4, #16]
 800b102:	e6e8      	b.n	800aed6 <_scanf_float+0x7e>
 800b104:	1e6b      	subs	r3, r5, #1
 800b106:	2b06      	cmp	r3, #6
 800b108:	d824      	bhi.n	800b154 <_scanf_float+0x2fc>
 800b10a:	2d02      	cmp	r5, #2
 800b10c:	d836      	bhi.n	800b17c <_scanf_float+0x324>
 800b10e:	9b01      	ldr	r3, [sp, #4]
 800b110:	429e      	cmp	r6, r3
 800b112:	f67f aee4 	bls.w	800aede <_scanf_float+0x86>
 800b116:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b11a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b11e:	463a      	mov	r2, r7
 800b120:	4640      	mov	r0, r8
 800b122:	4798      	blx	r3
 800b124:	6923      	ldr	r3, [r4, #16]
 800b126:	3b01      	subs	r3, #1
 800b128:	6123      	str	r3, [r4, #16]
 800b12a:	e7f0      	b.n	800b10e <_scanf_float+0x2b6>
 800b12c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b130:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b134:	463a      	mov	r2, r7
 800b136:	4640      	mov	r0, r8
 800b138:	4798      	blx	r3
 800b13a:	6923      	ldr	r3, [r4, #16]
 800b13c:	3b01      	subs	r3, #1
 800b13e:	6123      	str	r3, [r4, #16]
 800b140:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b144:	fa5f fa8a 	uxtb.w	sl, sl
 800b148:	f1ba 0f02 	cmp.w	sl, #2
 800b14c:	d1ee      	bne.n	800b12c <_scanf_float+0x2d4>
 800b14e:	3d03      	subs	r5, #3
 800b150:	b2ed      	uxtb	r5, r5
 800b152:	1b76      	subs	r6, r6, r5
 800b154:	6823      	ldr	r3, [r4, #0]
 800b156:	05da      	lsls	r2, r3, #23
 800b158:	d530      	bpl.n	800b1bc <_scanf_float+0x364>
 800b15a:	055b      	lsls	r3, r3, #21
 800b15c:	d511      	bpl.n	800b182 <_scanf_float+0x32a>
 800b15e:	9b01      	ldr	r3, [sp, #4]
 800b160:	429e      	cmp	r6, r3
 800b162:	f67f aebc 	bls.w	800aede <_scanf_float+0x86>
 800b166:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b16a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b16e:	463a      	mov	r2, r7
 800b170:	4640      	mov	r0, r8
 800b172:	4798      	blx	r3
 800b174:	6923      	ldr	r3, [r4, #16]
 800b176:	3b01      	subs	r3, #1
 800b178:	6123      	str	r3, [r4, #16]
 800b17a:	e7f0      	b.n	800b15e <_scanf_float+0x306>
 800b17c:	46aa      	mov	sl, r5
 800b17e:	46b3      	mov	fp, r6
 800b180:	e7de      	b.n	800b140 <_scanf_float+0x2e8>
 800b182:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b186:	6923      	ldr	r3, [r4, #16]
 800b188:	2965      	cmp	r1, #101	@ 0x65
 800b18a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b18e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b192:	6123      	str	r3, [r4, #16]
 800b194:	d00c      	beq.n	800b1b0 <_scanf_float+0x358>
 800b196:	2945      	cmp	r1, #69	@ 0x45
 800b198:	d00a      	beq.n	800b1b0 <_scanf_float+0x358>
 800b19a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b19e:	463a      	mov	r2, r7
 800b1a0:	4640      	mov	r0, r8
 800b1a2:	4798      	blx	r3
 800b1a4:	6923      	ldr	r3, [r4, #16]
 800b1a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	1eb5      	subs	r5, r6, #2
 800b1ae:	6123      	str	r3, [r4, #16]
 800b1b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1b4:	463a      	mov	r2, r7
 800b1b6:	4640      	mov	r0, r8
 800b1b8:	4798      	blx	r3
 800b1ba:	462e      	mov	r6, r5
 800b1bc:	6822      	ldr	r2, [r4, #0]
 800b1be:	f012 0210 	ands.w	r2, r2, #16
 800b1c2:	d001      	beq.n	800b1c8 <_scanf_float+0x370>
 800b1c4:	2000      	movs	r0, #0
 800b1c6:	e68b      	b.n	800aee0 <_scanf_float+0x88>
 800b1c8:	7032      	strb	r2, [r6, #0]
 800b1ca:	6823      	ldr	r3, [r4, #0]
 800b1cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b1d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b1d4:	d11c      	bne.n	800b210 <_scanf_float+0x3b8>
 800b1d6:	9b02      	ldr	r3, [sp, #8]
 800b1d8:	454b      	cmp	r3, r9
 800b1da:	eba3 0209 	sub.w	r2, r3, r9
 800b1de:	d123      	bne.n	800b228 <_scanf_float+0x3d0>
 800b1e0:	9901      	ldr	r1, [sp, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	4640      	mov	r0, r8
 800b1e6:	f002 fd0b 	bl	800dc00 <_strtod_r>
 800b1ea:	9b03      	ldr	r3, [sp, #12]
 800b1ec:	6821      	ldr	r1, [r4, #0]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f011 0f02 	tst.w	r1, #2
 800b1f4:	ec57 6b10 	vmov	r6, r7, d0
 800b1f8:	f103 0204 	add.w	r2, r3, #4
 800b1fc:	d01f      	beq.n	800b23e <_scanf_float+0x3e6>
 800b1fe:	9903      	ldr	r1, [sp, #12]
 800b200:	600a      	str	r2, [r1, #0]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	e9c3 6700 	strd	r6, r7, [r3]
 800b208:	68e3      	ldr	r3, [r4, #12]
 800b20a:	3301      	adds	r3, #1
 800b20c:	60e3      	str	r3, [r4, #12]
 800b20e:	e7d9      	b.n	800b1c4 <_scanf_float+0x36c>
 800b210:	9b04      	ldr	r3, [sp, #16]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d0e4      	beq.n	800b1e0 <_scanf_float+0x388>
 800b216:	9905      	ldr	r1, [sp, #20]
 800b218:	230a      	movs	r3, #10
 800b21a:	3101      	adds	r1, #1
 800b21c:	4640      	mov	r0, r8
 800b21e:	f002 fd6f 	bl	800dd00 <_strtol_r>
 800b222:	9b04      	ldr	r3, [sp, #16]
 800b224:	9e05      	ldr	r6, [sp, #20]
 800b226:	1ac2      	subs	r2, r0, r3
 800b228:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b22c:	429e      	cmp	r6, r3
 800b22e:	bf28      	it	cs
 800b230:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b234:	4910      	ldr	r1, [pc, #64]	@ (800b278 <_scanf_float+0x420>)
 800b236:	4630      	mov	r0, r6
 800b238:	f000 f954 	bl	800b4e4 <siprintf>
 800b23c:	e7d0      	b.n	800b1e0 <_scanf_float+0x388>
 800b23e:	f011 0f04 	tst.w	r1, #4
 800b242:	9903      	ldr	r1, [sp, #12]
 800b244:	600a      	str	r2, [r1, #0]
 800b246:	d1dc      	bne.n	800b202 <_scanf_float+0x3aa>
 800b248:	681d      	ldr	r5, [r3, #0]
 800b24a:	4632      	mov	r2, r6
 800b24c:	463b      	mov	r3, r7
 800b24e:	4630      	mov	r0, r6
 800b250:	4639      	mov	r1, r7
 800b252:	f7f5 fc93 	bl	8000b7c <__aeabi_dcmpun>
 800b256:	b128      	cbz	r0, 800b264 <_scanf_float+0x40c>
 800b258:	4808      	ldr	r0, [pc, #32]	@ (800b27c <_scanf_float+0x424>)
 800b25a:	f000 fac9 	bl	800b7f0 <nanf>
 800b25e:	ed85 0a00 	vstr	s0, [r5]
 800b262:	e7d1      	b.n	800b208 <_scanf_float+0x3b0>
 800b264:	4630      	mov	r0, r6
 800b266:	4639      	mov	r1, r7
 800b268:	f7f5 fce6 	bl	8000c38 <__aeabi_d2f>
 800b26c:	6028      	str	r0, [r5, #0]
 800b26e:	e7cb      	b.n	800b208 <_scanf_float+0x3b0>
 800b270:	f04f 0900 	mov.w	r9, #0
 800b274:	e629      	b.n	800aeca <_scanf_float+0x72>
 800b276:	bf00      	nop
 800b278:	0800ef8c 	.word	0x0800ef8c
 800b27c:	0800f325 	.word	0x0800f325

0800b280 <std>:
 800b280:	2300      	movs	r3, #0
 800b282:	b510      	push	{r4, lr}
 800b284:	4604      	mov	r4, r0
 800b286:	e9c0 3300 	strd	r3, r3, [r0]
 800b28a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b28e:	6083      	str	r3, [r0, #8]
 800b290:	8181      	strh	r1, [r0, #12]
 800b292:	6643      	str	r3, [r0, #100]	@ 0x64
 800b294:	81c2      	strh	r2, [r0, #14]
 800b296:	6183      	str	r3, [r0, #24]
 800b298:	4619      	mov	r1, r3
 800b29a:	2208      	movs	r2, #8
 800b29c:	305c      	adds	r0, #92	@ 0x5c
 800b29e:	f000 fa19 	bl	800b6d4 <memset>
 800b2a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b2d8 <std+0x58>)
 800b2a4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b2a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b2dc <std+0x5c>)
 800b2a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b2aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b2e0 <std+0x60>)
 800b2ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b2ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b2e4 <std+0x64>)
 800b2b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b2b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b2e8 <std+0x68>)
 800b2b4:	6224      	str	r4, [r4, #32]
 800b2b6:	429c      	cmp	r4, r3
 800b2b8:	d006      	beq.n	800b2c8 <std+0x48>
 800b2ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b2be:	4294      	cmp	r4, r2
 800b2c0:	d002      	beq.n	800b2c8 <std+0x48>
 800b2c2:	33d0      	adds	r3, #208	@ 0xd0
 800b2c4:	429c      	cmp	r4, r3
 800b2c6:	d105      	bne.n	800b2d4 <std+0x54>
 800b2c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2d0:	f000 ba7c 	b.w	800b7cc <__retarget_lock_init_recursive>
 800b2d4:	bd10      	pop	{r4, pc}
 800b2d6:	bf00      	nop
 800b2d8:	0800b525 	.word	0x0800b525
 800b2dc:	0800b547 	.word	0x0800b547
 800b2e0:	0800b57f 	.word	0x0800b57f
 800b2e4:	0800b5a3 	.word	0x0800b5a3
 800b2e8:	200040c4 	.word	0x200040c4

0800b2ec <stdio_exit_handler>:
 800b2ec:	4a02      	ldr	r2, [pc, #8]	@ (800b2f8 <stdio_exit_handler+0xc>)
 800b2ee:	4903      	ldr	r1, [pc, #12]	@ (800b2fc <stdio_exit_handler+0x10>)
 800b2f0:	4803      	ldr	r0, [pc, #12]	@ (800b300 <stdio_exit_handler+0x14>)
 800b2f2:	f000 b869 	b.w	800b3c8 <_fwalk_sglue>
 800b2f6:	bf00      	nop
 800b2f8:	20000014 	.word	0x20000014
 800b2fc:	0800e341 	.word	0x0800e341
 800b300:	20000024 	.word	0x20000024

0800b304 <cleanup_stdio>:
 800b304:	6841      	ldr	r1, [r0, #4]
 800b306:	4b0c      	ldr	r3, [pc, #48]	@ (800b338 <cleanup_stdio+0x34>)
 800b308:	4299      	cmp	r1, r3
 800b30a:	b510      	push	{r4, lr}
 800b30c:	4604      	mov	r4, r0
 800b30e:	d001      	beq.n	800b314 <cleanup_stdio+0x10>
 800b310:	f003 f816 	bl	800e340 <_fflush_r>
 800b314:	68a1      	ldr	r1, [r4, #8]
 800b316:	4b09      	ldr	r3, [pc, #36]	@ (800b33c <cleanup_stdio+0x38>)
 800b318:	4299      	cmp	r1, r3
 800b31a:	d002      	beq.n	800b322 <cleanup_stdio+0x1e>
 800b31c:	4620      	mov	r0, r4
 800b31e:	f003 f80f 	bl	800e340 <_fflush_r>
 800b322:	68e1      	ldr	r1, [r4, #12]
 800b324:	4b06      	ldr	r3, [pc, #24]	@ (800b340 <cleanup_stdio+0x3c>)
 800b326:	4299      	cmp	r1, r3
 800b328:	d004      	beq.n	800b334 <cleanup_stdio+0x30>
 800b32a:	4620      	mov	r0, r4
 800b32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b330:	f003 b806 	b.w	800e340 <_fflush_r>
 800b334:	bd10      	pop	{r4, pc}
 800b336:	bf00      	nop
 800b338:	200040c4 	.word	0x200040c4
 800b33c:	2000412c 	.word	0x2000412c
 800b340:	20004194 	.word	0x20004194

0800b344 <global_stdio_init.part.0>:
 800b344:	b510      	push	{r4, lr}
 800b346:	4b0b      	ldr	r3, [pc, #44]	@ (800b374 <global_stdio_init.part.0+0x30>)
 800b348:	4c0b      	ldr	r4, [pc, #44]	@ (800b378 <global_stdio_init.part.0+0x34>)
 800b34a:	4a0c      	ldr	r2, [pc, #48]	@ (800b37c <global_stdio_init.part.0+0x38>)
 800b34c:	601a      	str	r2, [r3, #0]
 800b34e:	4620      	mov	r0, r4
 800b350:	2200      	movs	r2, #0
 800b352:	2104      	movs	r1, #4
 800b354:	f7ff ff94 	bl	800b280 <std>
 800b358:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b35c:	2201      	movs	r2, #1
 800b35e:	2109      	movs	r1, #9
 800b360:	f7ff ff8e 	bl	800b280 <std>
 800b364:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b368:	2202      	movs	r2, #2
 800b36a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b36e:	2112      	movs	r1, #18
 800b370:	f7ff bf86 	b.w	800b280 <std>
 800b374:	200041fc 	.word	0x200041fc
 800b378:	200040c4 	.word	0x200040c4
 800b37c:	0800b2ed 	.word	0x0800b2ed

0800b380 <__sfp_lock_acquire>:
 800b380:	4801      	ldr	r0, [pc, #4]	@ (800b388 <__sfp_lock_acquire+0x8>)
 800b382:	f000 ba24 	b.w	800b7ce <__retarget_lock_acquire_recursive>
 800b386:	bf00      	nop
 800b388:	20004205 	.word	0x20004205

0800b38c <__sfp_lock_release>:
 800b38c:	4801      	ldr	r0, [pc, #4]	@ (800b394 <__sfp_lock_release+0x8>)
 800b38e:	f000 ba1f 	b.w	800b7d0 <__retarget_lock_release_recursive>
 800b392:	bf00      	nop
 800b394:	20004205 	.word	0x20004205

0800b398 <__sinit>:
 800b398:	b510      	push	{r4, lr}
 800b39a:	4604      	mov	r4, r0
 800b39c:	f7ff fff0 	bl	800b380 <__sfp_lock_acquire>
 800b3a0:	6a23      	ldr	r3, [r4, #32]
 800b3a2:	b11b      	cbz	r3, 800b3ac <__sinit+0x14>
 800b3a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3a8:	f7ff bff0 	b.w	800b38c <__sfp_lock_release>
 800b3ac:	4b04      	ldr	r3, [pc, #16]	@ (800b3c0 <__sinit+0x28>)
 800b3ae:	6223      	str	r3, [r4, #32]
 800b3b0:	4b04      	ldr	r3, [pc, #16]	@ (800b3c4 <__sinit+0x2c>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1f5      	bne.n	800b3a4 <__sinit+0xc>
 800b3b8:	f7ff ffc4 	bl	800b344 <global_stdio_init.part.0>
 800b3bc:	e7f2      	b.n	800b3a4 <__sinit+0xc>
 800b3be:	bf00      	nop
 800b3c0:	0800b305 	.word	0x0800b305
 800b3c4:	200041fc 	.word	0x200041fc

0800b3c8 <_fwalk_sglue>:
 800b3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3cc:	4607      	mov	r7, r0
 800b3ce:	4688      	mov	r8, r1
 800b3d0:	4614      	mov	r4, r2
 800b3d2:	2600      	movs	r6, #0
 800b3d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b3d8:	f1b9 0901 	subs.w	r9, r9, #1
 800b3dc:	d505      	bpl.n	800b3ea <_fwalk_sglue+0x22>
 800b3de:	6824      	ldr	r4, [r4, #0]
 800b3e0:	2c00      	cmp	r4, #0
 800b3e2:	d1f7      	bne.n	800b3d4 <_fwalk_sglue+0xc>
 800b3e4:	4630      	mov	r0, r6
 800b3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ea:	89ab      	ldrh	r3, [r5, #12]
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d907      	bls.n	800b400 <_fwalk_sglue+0x38>
 800b3f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	d003      	beq.n	800b400 <_fwalk_sglue+0x38>
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	4638      	mov	r0, r7
 800b3fc:	47c0      	blx	r8
 800b3fe:	4306      	orrs	r6, r0
 800b400:	3568      	adds	r5, #104	@ 0x68
 800b402:	e7e9      	b.n	800b3d8 <_fwalk_sglue+0x10>

0800b404 <iprintf>:
 800b404:	b40f      	push	{r0, r1, r2, r3}
 800b406:	b507      	push	{r0, r1, r2, lr}
 800b408:	4906      	ldr	r1, [pc, #24]	@ (800b424 <iprintf+0x20>)
 800b40a:	ab04      	add	r3, sp, #16
 800b40c:	6808      	ldr	r0, [r1, #0]
 800b40e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b412:	6881      	ldr	r1, [r0, #8]
 800b414:	9301      	str	r3, [sp, #4]
 800b416:	f002 fdf7 	bl	800e008 <_vfiprintf_r>
 800b41a:	b003      	add	sp, #12
 800b41c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b420:	b004      	add	sp, #16
 800b422:	4770      	bx	lr
 800b424:	20000020 	.word	0x20000020

0800b428 <_puts_r>:
 800b428:	6a03      	ldr	r3, [r0, #32]
 800b42a:	b570      	push	{r4, r5, r6, lr}
 800b42c:	6884      	ldr	r4, [r0, #8]
 800b42e:	4605      	mov	r5, r0
 800b430:	460e      	mov	r6, r1
 800b432:	b90b      	cbnz	r3, 800b438 <_puts_r+0x10>
 800b434:	f7ff ffb0 	bl	800b398 <__sinit>
 800b438:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b43a:	07db      	lsls	r3, r3, #31
 800b43c:	d405      	bmi.n	800b44a <_puts_r+0x22>
 800b43e:	89a3      	ldrh	r3, [r4, #12]
 800b440:	0598      	lsls	r0, r3, #22
 800b442:	d402      	bmi.n	800b44a <_puts_r+0x22>
 800b444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b446:	f000 f9c2 	bl	800b7ce <__retarget_lock_acquire_recursive>
 800b44a:	89a3      	ldrh	r3, [r4, #12]
 800b44c:	0719      	lsls	r1, r3, #28
 800b44e:	d502      	bpl.n	800b456 <_puts_r+0x2e>
 800b450:	6923      	ldr	r3, [r4, #16]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d135      	bne.n	800b4c2 <_puts_r+0x9a>
 800b456:	4621      	mov	r1, r4
 800b458:	4628      	mov	r0, r5
 800b45a:	f000 f8e5 	bl	800b628 <__swsetup_r>
 800b45e:	b380      	cbz	r0, 800b4c2 <_puts_r+0x9a>
 800b460:	f04f 35ff 	mov.w	r5, #4294967295
 800b464:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b466:	07da      	lsls	r2, r3, #31
 800b468:	d405      	bmi.n	800b476 <_puts_r+0x4e>
 800b46a:	89a3      	ldrh	r3, [r4, #12]
 800b46c:	059b      	lsls	r3, r3, #22
 800b46e:	d402      	bmi.n	800b476 <_puts_r+0x4e>
 800b470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b472:	f000 f9ad 	bl	800b7d0 <__retarget_lock_release_recursive>
 800b476:	4628      	mov	r0, r5
 800b478:	bd70      	pop	{r4, r5, r6, pc}
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	da04      	bge.n	800b488 <_puts_r+0x60>
 800b47e:	69a2      	ldr	r2, [r4, #24]
 800b480:	429a      	cmp	r2, r3
 800b482:	dc17      	bgt.n	800b4b4 <_puts_r+0x8c>
 800b484:	290a      	cmp	r1, #10
 800b486:	d015      	beq.n	800b4b4 <_puts_r+0x8c>
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	1c5a      	adds	r2, r3, #1
 800b48c:	6022      	str	r2, [r4, #0]
 800b48e:	7019      	strb	r1, [r3, #0]
 800b490:	68a3      	ldr	r3, [r4, #8]
 800b492:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b496:	3b01      	subs	r3, #1
 800b498:	60a3      	str	r3, [r4, #8]
 800b49a:	2900      	cmp	r1, #0
 800b49c:	d1ed      	bne.n	800b47a <_puts_r+0x52>
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	da11      	bge.n	800b4c6 <_puts_r+0x9e>
 800b4a2:	4622      	mov	r2, r4
 800b4a4:	210a      	movs	r1, #10
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	f000 f87f 	bl	800b5aa <__swbuf_r>
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	d0d7      	beq.n	800b460 <_puts_r+0x38>
 800b4b0:	250a      	movs	r5, #10
 800b4b2:	e7d7      	b.n	800b464 <_puts_r+0x3c>
 800b4b4:	4622      	mov	r2, r4
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	f000 f877 	bl	800b5aa <__swbuf_r>
 800b4bc:	3001      	adds	r0, #1
 800b4be:	d1e7      	bne.n	800b490 <_puts_r+0x68>
 800b4c0:	e7ce      	b.n	800b460 <_puts_r+0x38>
 800b4c2:	3e01      	subs	r6, #1
 800b4c4:	e7e4      	b.n	800b490 <_puts_r+0x68>
 800b4c6:	6823      	ldr	r3, [r4, #0]
 800b4c8:	1c5a      	adds	r2, r3, #1
 800b4ca:	6022      	str	r2, [r4, #0]
 800b4cc:	220a      	movs	r2, #10
 800b4ce:	701a      	strb	r2, [r3, #0]
 800b4d0:	e7ee      	b.n	800b4b0 <_puts_r+0x88>
	...

0800b4d4 <puts>:
 800b4d4:	4b02      	ldr	r3, [pc, #8]	@ (800b4e0 <puts+0xc>)
 800b4d6:	4601      	mov	r1, r0
 800b4d8:	6818      	ldr	r0, [r3, #0]
 800b4da:	f7ff bfa5 	b.w	800b428 <_puts_r>
 800b4de:	bf00      	nop
 800b4e0:	20000020 	.word	0x20000020

0800b4e4 <siprintf>:
 800b4e4:	b40e      	push	{r1, r2, r3}
 800b4e6:	b500      	push	{lr}
 800b4e8:	b09c      	sub	sp, #112	@ 0x70
 800b4ea:	ab1d      	add	r3, sp, #116	@ 0x74
 800b4ec:	9002      	str	r0, [sp, #8]
 800b4ee:	9006      	str	r0, [sp, #24]
 800b4f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b4f4:	4809      	ldr	r0, [pc, #36]	@ (800b51c <siprintf+0x38>)
 800b4f6:	9107      	str	r1, [sp, #28]
 800b4f8:	9104      	str	r1, [sp, #16]
 800b4fa:	4909      	ldr	r1, [pc, #36]	@ (800b520 <siprintf+0x3c>)
 800b4fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b500:	9105      	str	r1, [sp, #20]
 800b502:	6800      	ldr	r0, [r0, #0]
 800b504:	9301      	str	r3, [sp, #4]
 800b506:	a902      	add	r1, sp, #8
 800b508:	f002 fc58 	bl	800ddbc <_svfiprintf_r>
 800b50c:	9b02      	ldr	r3, [sp, #8]
 800b50e:	2200      	movs	r2, #0
 800b510:	701a      	strb	r2, [r3, #0]
 800b512:	b01c      	add	sp, #112	@ 0x70
 800b514:	f85d eb04 	ldr.w	lr, [sp], #4
 800b518:	b003      	add	sp, #12
 800b51a:	4770      	bx	lr
 800b51c:	20000020 	.word	0x20000020
 800b520:	ffff0208 	.word	0xffff0208

0800b524 <__sread>:
 800b524:	b510      	push	{r4, lr}
 800b526:	460c      	mov	r4, r1
 800b528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b52c:	f000 f900 	bl	800b730 <_read_r>
 800b530:	2800      	cmp	r0, #0
 800b532:	bfab      	itete	ge
 800b534:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b536:	89a3      	ldrhlt	r3, [r4, #12]
 800b538:	181b      	addge	r3, r3, r0
 800b53a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b53e:	bfac      	ite	ge
 800b540:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b542:	81a3      	strhlt	r3, [r4, #12]
 800b544:	bd10      	pop	{r4, pc}

0800b546 <__swrite>:
 800b546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b54a:	461f      	mov	r7, r3
 800b54c:	898b      	ldrh	r3, [r1, #12]
 800b54e:	05db      	lsls	r3, r3, #23
 800b550:	4605      	mov	r5, r0
 800b552:	460c      	mov	r4, r1
 800b554:	4616      	mov	r6, r2
 800b556:	d505      	bpl.n	800b564 <__swrite+0x1e>
 800b558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b55c:	2302      	movs	r3, #2
 800b55e:	2200      	movs	r2, #0
 800b560:	f000 f8d4 	bl	800b70c <_lseek_r>
 800b564:	89a3      	ldrh	r3, [r4, #12]
 800b566:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b56a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b56e:	81a3      	strh	r3, [r4, #12]
 800b570:	4632      	mov	r2, r6
 800b572:	463b      	mov	r3, r7
 800b574:	4628      	mov	r0, r5
 800b576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b57a:	f000 b8eb 	b.w	800b754 <_write_r>

0800b57e <__sseek>:
 800b57e:	b510      	push	{r4, lr}
 800b580:	460c      	mov	r4, r1
 800b582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b586:	f000 f8c1 	bl	800b70c <_lseek_r>
 800b58a:	1c43      	adds	r3, r0, #1
 800b58c:	89a3      	ldrh	r3, [r4, #12]
 800b58e:	bf15      	itete	ne
 800b590:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b592:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b596:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b59a:	81a3      	strheq	r3, [r4, #12]
 800b59c:	bf18      	it	ne
 800b59e:	81a3      	strhne	r3, [r4, #12]
 800b5a0:	bd10      	pop	{r4, pc}

0800b5a2 <__sclose>:
 800b5a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5a6:	f000 b8a1 	b.w	800b6ec <_close_r>

0800b5aa <__swbuf_r>:
 800b5aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ac:	460e      	mov	r6, r1
 800b5ae:	4614      	mov	r4, r2
 800b5b0:	4605      	mov	r5, r0
 800b5b2:	b118      	cbz	r0, 800b5bc <__swbuf_r+0x12>
 800b5b4:	6a03      	ldr	r3, [r0, #32]
 800b5b6:	b90b      	cbnz	r3, 800b5bc <__swbuf_r+0x12>
 800b5b8:	f7ff feee 	bl	800b398 <__sinit>
 800b5bc:	69a3      	ldr	r3, [r4, #24]
 800b5be:	60a3      	str	r3, [r4, #8]
 800b5c0:	89a3      	ldrh	r3, [r4, #12]
 800b5c2:	071a      	lsls	r2, r3, #28
 800b5c4:	d501      	bpl.n	800b5ca <__swbuf_r+0x20>
 800b5c6:	6923      	ldr	r3, [r4, #16]
 800b5c8:	b943      	cbnz	r3, 800b5dc <__swbuf_r+0x32>
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	f000 f82b 	bl	800b628 <__swsetup_r>
 800b5d2:	b118      	cbz	r0, 800b5dc <__swbuf_r+0x32>
 800b5d4:	f04f 37ff 	mov.w	r7, #4294967295
 800b5d8:	4638      	mov	r0, r7
 800b5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5dc:	6823      	ldr	r3, [r4, #0]
 800b5de:	6922      	ldr	r2, [r4, #16]
 800b5e0:	1a98      	subs	r0, r3, r2
 800b5e2:	6963      	ldr	r3, [r4, #20]
 800b5e4:	b2f6      	uxtb	r6, r6
 800b5e6:	4283      	cmp	r3, r0
 800b5e8:	4637      	mov	r7, r6
 800b5ea:	dc05      	bgt.n	800b5f8 <__swbuf_r+0x4e>
 800b5ec:	4621      	mov	r1, r4
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	f002 fea6 	bl	800e340 <_fflush_r>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	d1ed      	bne.n	800b5d4 <__swbuf_r+0x2a>
 800b5f8:	68a3      	ldr	r3, [r4, #8]
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	60a3      	str	r3, [r4, #8]
 800b5fe:	6823      	ldr	r3, [r4, #0]
 800b600:	1c5a      	adds	r2, r3, #1
 800b602:	6022      	str	r2, [r4, #0]
 800b604:	701e      	strb	r6, [r3, #0]
 800b606:	6962      	ldr	r2, [r4, #20]
 800b608:	1c43      	adds	r3, r0, #1
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d004      	beq.n	800b618 <__swbuf_r+0x6e>
 800b60e:	89a3      	ldrh	r3, [r4, #12]
 800b610:	07db      	lsls	r3, r3, #31
 800b612:	d5e1      	bpl.n	800b5d8 <__swbuf_r+0x2e>
 800b614:	2e0a      	cmp	r6, #10
 800b616:	d1df      	bne.n	800b5d8 <__swbuf_r+0x2e>
 800b618:	4621      	mov	r1, r4
 800b61a:	4628      	mov	r0, r5
 800b61c:	f002 fe90 	bl	800e340 <_fflush_r>
 800b620:	2800      	cmp	r0, #0
 800b622:	d0d9      	beq.n	800b5d8 <__swbuf_r+0x2e>
 800b624:	e7d6      	b.n	800b5d4 <__swbuf_r+0x2a>
	...

0800b628 <__swsetup_r>:
 800b628:	b538      	push	{r3, r4, r5, lr}
 800b62a:	4b29      	ldr	r3, [pc, #164]	@ (800b6d0 <__swsetup_r+0xa8>)
 800b62c:	4605      	mov	r5, r0
 800b62e:	6818      	ldr	r0, [r3, #0]
 800b630:	460c      	mov	r4, r1
 800b632:	b118      	cbz	r0, 800b63c <__swsetup_r+0x14>
 800b634:	6a03      	ldr	r3, [r0, #32]
 800b636:	b90b      	cbnz	r3, 800b63c <__swsetup_r+0x14>
 800b638:	f7ff feae 	bl	800b398 <__sinit>
 800b63c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b640:	0719      	lsls	r1, r3, #28
 800b642:	d422      	bmi.n	800b68a <__swsetup_r+0x62>
 800b644:	06da      	lsls	r2, r3, #27
 800b646:	d407      	bmi.n	800b658 <__swsetup_r+0x30>
 800b648:	2209      	movs	r2, #9
 800b64a:	602a      	str	r2, [r5, #0]
 800b64c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b650:	81a3      	strh	r3, [r4, #12]
 800b652:	f04f 30ff 	mov.w	r0, #4294967295
 800b656:	e033      	b.n	800b6c0 <__swsetup_r+0x98>
 800b658:	0758      	lsls	r0, r3, #29
 800b65a:	d512      	bpl.n	800b682 <__swsetup_r+0x5a>
 800b65c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b65e:	b141      	cbz	r1, 800b672 <__swsetup_r+0x4a>
 800b660:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b664:	4299      	cmp	r1, r3
 800b666:	d002      	beq.n	800b66e <__swsetup_r+0x46>
 800b668:	4628      	mov	r0, r5
 800b66a:	f000 ff15 	bl	800c498 <_free_r>
 800b66e:	2300      	movs	r3, #0
 800b670:	6363      	str	r3, [r4, #52]	@ 0x34
 800b672:	89a3      	ldrh	r3, [r4, #12]
 800b674:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b678:	81a3      	strh	r3, [r4, #12]
 800b67a:	2300      	movs	r3, #0
 800b67c:	6063      	str	r3, [r4, #4]
 800b67e:	6923      	ldr	r3, [r4, #16]
 800b680:	6023      	str	r3, [r4, #0]
 800b682:	89a3      	ldrh	r3, [r4, #12]
 800b684:	f043 0308 	orr.w	r3, r3, #8
 800b688:	81a3      	strh	r3, [r4, #12]
 800b68a:	6923      	ldr	r3, [r4, #16]
 800b68c:	b94b      	cbnz	r3, 800b6a2 <__swsetup_r+0x7a>
 800b68e:	89a3      	ldrh	r3, [r4, #12]
 800b690:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b694:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b698:	d003      	beq.n	800b6a2 <__swsetup_r+0x7a>
 800b69a:	4621      	mov	r1, r4
 800b69c:	4628      	mov	r0, r5
 800b69e:	f002 fe9d 	bl	800e3dc <__smakebuf_r>
 800b6a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6a6:	f013 0201 	ands.w	r2, r3, #1
 800b6aa:	d00a      	beq.n	800b6c2 <__swsetup_r+0x9a>
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	60a2      	str	r2, [r4, #8]
 800b6b0:	6962      	ldr	r2, [r4, #20]
 800b6b2:	4252      	negs	r2, r2
 800b6b4:	61a2      	str	r2, [r4, #24]
 800b6b6:	6922      	ldr	r2, [r4, #16]
 800b6b8:	b942      	cbnz	r2, 800b6cc <__swsetup_r+0xa4>
 800b6ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b6be:	d1c5      	bne.n	800b64c <__swsetup_r+0x24>
 800b6c0:	bd38      	pop	{r3, r4, r5, pc}
 800b6c2:	0799      	lsls	r1, r3, #30
 800b6c4:	bf58      	it	pl
 800b6c6:	6962      	ldrpl	r2, [r4, #20]
 800b6c8:	60a2      	str	r2, [r4, #8]
 800b6ca:	e7f4      	b.n	800b6b6 <__swsetup_r+0x8e>
 800b6cc:	2000      	movs	r0, #0
 800b6ce:	e7f7      	b.n	800b6c0 <__swsetup_r+0x98>
 800b6d0:	20000020 	.word	0x20000020

0800b6d4 <memset>:
 800b6d4:	4402      	add	r2, r0
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d100      	bne.n	800b6de <memset+0xa>
 800b6dc:	4770      	bx	lr
 800b6de:	f803 1b01 	strb.w	r1, [r3], #1
 800b6e2:	e7f9      	b.n	800b6d8 <memset+0x4>

0800b6e4 <_localeconv_r>:
 800b6e4:	4800      	ldr	r0, [pc, #0]	@ (800b6e8 <_localeconv_r+0x4>)
 800b6e6:	4770      	bx	lr
 800b6e8:	20000160 	.word	0x20000160

0800b6ec <_close_r>:
 800b6ec:	b538      	push	{r3, r4, r5, lr}
 800b6ee:	4d06      	ldr	r5, [pc, #24]	@ (800b708 <_close_r+0x1c>)
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	4604      	mov	r4, r0
 800b6f4:	4608      	mov	r0, r1
 800b6f6:	602b      	str	r3, [r5, #0]
 800b6f8:	f7f6 faac 	bl	8001c54 <_close>
 800b6fc:	1c43      	adds	r3, r0, #1
 800b6fe:	d102      	bne.n	800b706 <_close_r+0x1a>
 800b700:	682b      	ldr	r3, [r5, #0]
 800b702:	b103      	cbz	r3, 800b706 <_close_r+0x1a>
 800b704:	6023      	str	r3, [r4, #0]
 800b706:	bd38      	pop	{r3, r4, r5, pc}
 800b708:	20004200 	.word	0x20004200

0800b70c <_lseek_r>:
 800b70c:	b538      	push	{r3, r4, r5, lr}
 800b70e:	4d07      	ldr	r5, [pc, #28]	@ (800b72c <_lseek_r+0x20>)
 800b710:	4604      	mov	r4, r0
 800b712:	4608      	mov	r0, r1
 800b714:	4611      	mov	r1, r2
 800b716:	2200      	movs	r2, #0
 800b718:	602a      	str	r2, [r5, #0]
 800b71a:	461a      	mov	r2, r3
 800b71c:	f7f6 fac1 	bl	8001ca2 <_lseek>
 800b720:	1c43      	adds	r3, r0, #1
 800b722:	d102      	bne.n	800b72a <_lseek_r+0x1e>
 800b724:	682b      	ldr	r3, [r5, #0]
 800b726:	b103      	cbz	r3, 800b72a <_lseek_r+0x1e>
 800b728:	6023      	str	r3, [r4, #0]
 800b72a:	bd38      	pop	{r3, r4, r5, pc}
 800b72c:	20004200 	.word	0x20004200

0800b730 <_read_r>:
 800b730:	b538      	push	{r3, r4, r5, lr}
 800b732:	4d07      	ldr	r5, [pc, #28]	@ (800b750 <_read_r+0x20>)
 800b734:	4604      	mov	r4, r0
 800b736:	4608      	mov	r0, r1
 800b738:	4611      	mov	r1, r2
 800b73a:	2200      	movs	r2, #0
 800b73c:	602a      	str	r2, [r5, #0]
 800b73e:	461a      	mov	r2, r3
 800b740:	f7f6 fa4f 	bl	8001be2 <_read>
 800b744:	1c43      	adds	r3, r0, #1
 800b746:	d102      	bne.n	800b74e <_read_r+0x1e>
 800b748:	682b      	ldr	r3, [r5, #0]
 800b74a:	b103      	cbz	r3, 800b74e <_read_r+0x1e>
 800b74c:	6023      	str	r3, [r4, #0]
 800b74e:	bd38      	pop	{r3, r4, r5, pc}
 800b750:	20004200 	.word	0x20004200

0800b754 <_write_r>:
 800b754:	b538      	push	{r3, r4, r5, lr}
 800b756:	4d07      	ldr	r5, [pc, #28]	@ (800b774 <_write_r+0x20>)
 800b758:	4604      	mov	r4, r0
 800b75a:	4608      	mov	r0, r1
 800b75c:	4611      	mov	r1, r2
 800b75e:	2200      	movs	r2, #0
 800b760:	602a      	str	r2, [r5, #0]
 800b762:	461a      	mov	r2, r3
 800b764:	f7f6 fa5a 	bl	8001c1c <_write>
 800b768:	1c43      	adds	r3, r0, #1
 800b76a:	d102      	bne.n	800b772 <_write_r+0x1e>
 800b76c:	682b      	ldr	r3, [r5, #0]
 800b76e:	b103      	cbz	r3, 800b772 <_write_r+0x1e>
 800b770:	6023      	str	r3, [r4, #0]
 800b772:	bd38      	pop	{r3, r4, r5, pc}
 800b774:	20004200 	.word	0x20004200

0800b778 <__errno>:
 800b778:	4b01      	ldr	r3, [pc, #4]	@ (800b780 <__errno+0x8>)
 800b77a:	6818      	ldr	r0, [r3, #0]
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	20000020 	.word	0x20000020

0800b784 <__libc_init_array>:
 800b784:	b570      	push	{r4, r5, r6, lr}
 800b786:	4d0d      	ldr	r5, [pc, #52]	@ (800b7bc <__libc_init_array+0x38>)
 800b788:	4c0d      	ldr	r4, [pc, #52]	@ (800b7c0 <__libc_init_array+0x3c>)
 800b78a:	1b64      	subs	r4, r4, r5
 800b78c:	10a4      	asrs	r4, r4, #2
 800b78e:	2600      	movs	r6, #0
 800b790:	42a6      	cmp	r6, r4
 800b792:	d109      	bne.n	800b7a8 <__libc_init_array+0x24>
 800b794:	4d0b      	ldr	r5, [pc, #44]	@ (800b7c4 <__libc_init_array+0x40>)
 800b796:	4c0c      	ldr	r4, [pc, #48]	@ (800b7c8 <__libc_init_array+0x44>)
 800b798:	f003 fb02 	bl	800eda0 <_init>
 800b79c:	1b64      	subs	r4, r4, r5
 800b79e:	10a4      	asrs	r4, r4, #2
 800b7a0:	2600      	movs	r6, #0
 800b7a2:	42a6      	cmp	r6, r4
 800b7a4:	d105      	bne.n	800b7b2 <__libc_init_array+0x2e>
 800b7a6:	bd70      	pop	{r4, r5, r6, pc}
 800b7a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7ac:	4798      	blx	r3
 800b7ae:	3601      	adds	r6, #1
 800b7b0:	e7ee      	b.n	800b790 <__libc_init_array+0xc>
 800b7b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7b6:	4798      	blx	r3
 800b7b8:	3601      	adds	r6, #1
 800b7ba:	e7f2      	b.n	800b7a2 <__libc_init_array+0x1e>
 800b7bc:	0800f390 	.word	0x0800f390
 800b7c0:	0800f390 	.word	0x0800f390
 800b7c4:	0800f390 	.word	0x0800f390
 800b7c8:	0800f394 	.word	0x0800f394

0800b7cc <__retarget_lock_init_recursive>:
 800b7cc:	4770      	bx	lr

0800b7ce <__retarget_lock_acquire_recursive>:
 800b7ce:	4770      	bx	lr

0800b7d0 <__retarget_lock_release_recursive>:
 800b7d0:	4770      	bx	lr

0800b7d2 <memcpy>:
 800b7d2:	440a      	add	r2, r1
 800b7d4:	4291      	cmp	r1, r2
 800b7d6:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7da:	d100      	bne.n	800b7de <memcpy+0xc>
 800b7dc:	4770      	bx	lr
 800b7de:	b510      	push	{r4, lr}
 800b7e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7e8:	4291      	cmp	r1, r2
 800b7ea:	d1f9      	bne.n	800b7e0 <memcpy+0xe>
 800b7ec:	bd10      	pop	{r4, pc}
	...

0800b7f0 <nanf>:
 800b7f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b7f8 <nanf+0x8>
 800b7f4:	4770      	bx	lr
 800b7f6:	bf00      	nop
 800b7f8:	7fc00000 	.word	0x7fc00000

0800b7fc <quorem>:
 800b7fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b800:	6903      	ldr	r3, [r0, #16]
 800b802:	690c      	ldr	r4, [r1, #16]
 800b804:	42a3      	cmp	r3, r4
 800b806:	4607      	mov	r7, r0
 800b808:	db7e      	blt.n	800b908 <quorem+0x10c>
 800b80a:	3c01      	subs	r4, #1
 800b80c:	f101 0814 	add.w	r8, r1, #20
 800b810:	00a3      	lsls	r3, r4, #2
 800b812:	f100 0514 	add.w	r5, r0, #20
 800b816:	9300      	str	r3, [sp, #0]
 800b818:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b81c:	9301      	str	r3, [sp, #4]
 800b81e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b822:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b826:	3301      	adds	r3, #1
 800b828:	429a      	cmp	r2, r3
 800b82a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b82e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b832:	d32e      	bcc.n	800b892 <quorem+0x96>
 800b834:	f04f 0a00 	mov.w	sl, #0
 800b838:	46c4      	mov	ip, r8
 800b83a:	46ae      	mov	lr, r5
 800b83c:	46d3      	mov	fp, sl
 800b83e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b842:	b298      	uxth	r0, r3
 800b844:	fb06 a000 	mla	r0, r6, r0, sl
 800b848:	0c02      	lsrs	r2, r0, #16
 800b84a:	0c1b      	lsrs	r3, r3, #16
 800b84c:	fb06 2303 	mla	r3, r6, r3, r2
 800b850:	f8de 2000 	ldr.w	r2, [lr]
 800b854:	b280      	uxth	r0, r0
 800b856:	b292      	uxth	r2, r2
 800b858:	1a12      	subs	r2, r2, r0
 800b85a:	445a      	add	r2, fp
 800b85c:	f8de 0000 	ldr.w	r0, [lr]
 800b860:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b864:	b29b      	uxth	r3, r3
 800b866:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b86a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b86e:	b292      	uxth	r2, r2
 800b870:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b874:	45e1      	cmp	r9, ip
 800b876:	f84e 2b04 	str.w	r2, [lr], #4
 800b87a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b87e:	d2de      	bcs.n	800b83e <quorem+0x42>
 800b880:	9b00      	ldr	r3, [sp, #0]
 800b882:	58eb      	ldr	r3, [r5, r3]
 800b884:	b92b      	cbnz	r3, 800b892 <quorem+0x96>
 800b886:	9b01      	ldr	r3, [sp, #4]
 800b888:	3b04      	subs	r3, #4
 800b88a:	429d      	cmp	r5, r3
 800b88c:	461a      	mov	r2, r3
 800b88e:	d32f      	bcc.n	800b8f0 <quorem+0xf4>
 800b890:	613c      	str	r4, [r7, #16]
 800b892:	4638      	mov	r0, r7
 800b894:	f001 f9c4 	bl	800cc20 <__mcmp>
 800b898:	2800      	cmp	r0, #0
 800b89a:	db25      	blt.n	800b8e8 <quorem+0xec>
 800b89c:	4629      	mov	r1, r5
 800b89e:	2000      	movs	r0, #0
 800b8a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b8a4:	f8d1 c000 	ldr.w	ip, [r1]
 800b8a8:	fa1f fe82 	uxth.w	lr, r2
 800b8ac:	fa1f f38c 	uxth.w	r3, ip
 800b8b0:	eba3 030e 	sub.w	r3, r3, lr
 800b8b4:	4403      	add	r3, r0
 800b8b6:	0c12      	lsrs	r2, r2, #16
 800b8b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b8bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8c6:	45c1      	cmp	r9, r8
 800b8c8:	f841 3b04 	str.w	r3, [r1], #4
 800b8cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b8d0:	d2e6      	bcs.n	800b8a0 <quorem+0xa4>
 800b8d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8da:	b922      	cbnz	r2, 800b8e6 <quorem+0xea>
 800b8dc:	3b04      	subs	r3, #4
 800b8de:	429d      	cmp	r5, r3
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	d30b      	bcc.n	800b8fc <quorem+0x100>
 800b8e4:	613c      	str	r4, [r7, #16]
 800b8e6:	3601      	adds	r6, #1
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	b003      	add	sp, #12
 800b8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f0:	6812      	ldr	r2, [r2, #0]
 800b8f2:	3b04      	subs	r3, #4
 800b8f4:	2a00      	cmp	r2, #0
 800b8f6:	d1cb      	bne.n	800b890 <quorem+0x94>
 800b8f8:	3c01      	subs	r4, #1
 800b8fa:	e7c6      	b.n	800b88a <quorem+0x8e>
 800b8fc:	6812      	ldr	r2, [r2, #0]
 800b8fe:	3b04      	subs	r3, #4
 800b900:	2a00      	cmp	r2, #0
 800b902:	d1ef      	bne.n	800b8e4 <quorem+0xe8>
 800b904:	3c01      	subs	r4, #1
 800b906:	e7ea      	b.n	800b8de <quorem+0xe2>
 800b908:	2000      	movs	r0, #0
 800b90a:	e7ee      	b.n	800b8ea <quorem+0xee>
 800b90c:	0000      	movs	r0, r0
	...

0800b910 <_dtoa_r>:
 800b910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	69c7      	ldr	r7, [r0, #28]
 800b916:	b099      	sub	sp, #100	@ 0x64
 800b918:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b91c:	ec55 4b10 	vmov	r4, r5, d0
 800b920:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b922:	9109      	str	r1, [sp, #36]	@ 0x24
 800b924:	4683      	mov	fp, r0
 800b926:	920e      	str	r2, [sp, #56]	@ 0x38
 800b928:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b92a:	b97f      	cbnz	r7, 800b94c <_dtoa_r+0x3c>
 800b92c:	2010      	movs	r0, #16
 800b92e:	f000 fdfd 	bl	800c52c <malloc>
 800b932:	4602      	mov	r2, r0
 800b934:	f8cb 001c 	str.w	r0, [fp, #28]
 800b938:	b920      	cbnz	r0, 800b944 <_dtoa_r+0x34>
 800b93a:	4ba7      	ldr	r3, [pc, #668]	@ (800bbd8 <_dtoa_r+0x2c8>)
 800b93c:	21ef      	movs	r1, #239	@ 0xef
 800b93e:	48a7      	ldr	r0, [pc, #668]	@ (800bbdc <_dtoa_r+0x2cc>)
 800b940:	f002 fdee 	bl	800e520 <__assert_func>
 800b944:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b948:	6007      	str	r7, [r0, #0]
 800b94a:	60c7      	str	r7, [r0, #12]
 800b94c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b950:	6819      	ldr	r1, [r3, #0]
 800b952:	b159      	cbz	r1, 800b96c <_dtoa_r+0x5c>
 800b954:	685a      	ldr	r2, [r3, #4]
 800b956:	604a      	str	r2, [r1, #4]
 800b958:	2301      	movs	r3, #1
 800b95a:	4093      	lsls	r3, r2
 800b95c:	608b      	str	r3, [r1, #8]
 800b95e:	4658      	mov	r0, fp
 800b960:	f000 feda 	bl	800c718 <_Bfree>
 800b964:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b968:	2200      	movs	r2, #0
 800b96a:	601a      	str	r2, [r3, #0]
 800b96c:	1e2b      	subs	r3, r5, #0
 800b96e:	bfb9      	ittee	lt
 800b970:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b974:	9303      	strlt	r3, [sp, #12]
 800b976:	2300      	movge	r3, #0
 800b978:	6033      	strge	r3, [r6, #0]
 800b97a:	9f03      	ldr	r7, [sp, #12]
 800b97c:	4b98      	ldr	r3, [pc, #608]	@ (800bbe0 <_dtoa_r+0x2d0>)
 800b97e:	bfbc      	itt	lt
 800b980:	2201      	movlt	r2, #1
 800b982:	6032      	strlt	r2, [r6, #0]
 800b984:	43bb      	bics	r3, r7
 800b986:	d112      	bne.n	800b9ae <_dtoa_r+0x9e>
 800b988:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b98a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b98e:	6013      	str	r3, [r2, #0]
 800b990:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b994:	4323      	orrs	r3, r4
 800b996:	f000 854d 	beq.w	800c434 <_dtoa_r+0xb24>
 800b99a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b99c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bbf4 <_dtoa_r+0x2e4>
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f000 854f 	beq.w	800c444 <_dtoa_r+0xb34>
 800b9a6:	f10a 0303 	add.w	r3, sl, #3
 800b9aa:	f000 bd49 	b.w	800c440 <_dtoa_r+0xb30>
 800b9ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	ec51 0b17 	vmov	r0, r1, d7
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b9be:	f7f5 f8ab 	bl	8000b18 <__aeabi_dcmpeq>
 800b9c2:	4680      	mov	r8, r0
 800b9c4:	b158      	cbz	r0, 800b9de <_dtoa_r+0xce>
 800b9c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	6013      	str	r3, [r2, #0]
 800b9cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b9ce:	b113      	cbz	r3, 800b9d6 <_dtoa_r+0xc6>
 800b9d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b9d2:	4b84      	ldr	r3, [pc, #528]	@ (800bbe4 <_dtoa_r+0x2d4>)
 800b9d4:	6013      	str	r3, [r2, #0]
 800b9d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bbf8 <_dtoa_r+0x2e8>
 800b9da:	f000 bd33 	b.w	800c444 <_dtoa_r+0xb34>
 800b9de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b9e2:	aa16      	add	r2, sp, #88	@ 0x58
 800b9e4:	a917      	add	r1, sp, #92	@ 0x5c
 800b9e6:	4658      	mov	r0, fp
 800b9e8:	f001 fa3a 	bl	800ce60 <__d2b>
 800b9ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b9f0:	4681      	mov	r9, r0
 800b9f2:	2e00      	cmp	r6, #0
 800b9f4:	d077      	beq.n	800bae6 <_dtoa_r+0x1d6>
 800b9f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b9fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ba08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ba0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ba10:	4619      	mov	r1, r3
 800ba12:	2200      	movs	r2, #0
 800ba14:	4b74      	ldr	r3, [pc, #464]	@ (800bbe8 <_dtoa_r+0x2d8>)
 800ba16:	f7f4 fc5f 	bl	80002d8 <__aeabi_dsub>
 800ba1a:	a369      	add	r3, pc, #420	@ (adr r3, 800bbc0 <_dtoa_r+0x2b0>)
 800ba1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba20:	f7f4 fe12 	bl	8000648 <__aeabi_dmul>
 800ba24:	a368      	add	r3, pc, #416	@ (adr r3, 800bbc8 <_dtoa_r+0x2b8>)
 800ba26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2a:	f7f4 fc57 	bl	80002dc <__adddf3>
 800ba2e:	4604      	mov	r4, r0
 800ba30:	4630      	mov	r0, r6
 800ba32:	460d      	mov	r5, r1
 800ba34:	f7f4 fd9e 	bl	8000574 <__aeabi_i2d>
 800ba38:	a365      	add	r3, pc, #404	@ (adr r3, 800bbd0 <_dtoa_r+0x2c0>)
 800ba3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3e:	f7f4 fe03 	bl	8000648 <__aeabi_dmul>
 800ba42:	4602      	mov	r2, r0
 800ba44:	460b      	mov	r3, r1
 800ba46:	4620      	mov	r0, r4
 800ba48:	4629      	mov	r1, r5
 800ba4a:	f7f4 fc47 	bl	80002dc <__adddf3>
 800ba4e:	4604      	mov	r4, r0
 800ba50:	460d      	mov	r5, r1
 800ba52:	f7f5 f8a9 	bl	8000ba8 <__aeabi_d2iz>
 800ba56:	2200      	movs	r2, #0
 800ba58:	4607      	mov	r7, r0
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	4629      	mov	r1, r5
 800ba60:	f7f5 f864 	bl	8000b2c <__aeabi_dcmplt>
 800ba64:	b140      	cbz	r0, 800ba78 <_dtoa_r+0x168>
 800ba66:	4638      	mov	r0, r7
 800ba68:	f7f4 fd84 	bl	8000574 <__aeabi_i2d>
 800ba6c:	4622      	mov	r2, r4
 800ba6e:	462b      	mov	r3, r5
 800ba70:	f7f5 f852 	bl	8000b18 <__aeabi_dcmpeq>
 800ba74:	b900      	cbnz	r0, 800ba78 <_dtoa_r+0x168>
 800ba76:	3f01      	subs	r7, #1
 800ba78:	2f16      	cmp	r7, #22
 800ba7a:	d851      	bhi.n	800bb20 <_dtoa_r+0x210>
 800ba7c:	4b5b      	ldr	r3, [pc, #364]	@ (800bbec <_dtoa_r+0x2dc>)
 800ba7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ba82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba8a:	f7f5 f84f 	bl	8000b2c <__aeabi_dcmplt>
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	d048      	beq.n	800bb24 <_dtoa_r+0x214>
 800ba92:	3f01      	subs	r7, #1
 800ba94:	2300      	movs	r3, #0
 800ba96:	9312      	str	r3, [sp, #72]	@ 0x48
 800ba98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba9a:	1b9b      	subs	r3, r3, r6
 800ba9c:	1e5a      	subs	r2, r3, #1
 800ba9e:	bf44      	itt	mi
 800baa0:	f1c3 0801 	rsbmi	r8, r3, #1
 800baa4:	2300      	movmi	r3, #0
 800baa6:	9208      	str	r2, [sp, #32]
 800baa8:	bf54      	ite	pl
 800baaa:	f04f 0800 	movpl.w	r8, #0
 800baae:	9308      	strmi	r3, [sp, #32]
 800bab0:	2f00      	cmp	r7, #0
 800bab2:	db39      	blt.n	800bb28 <_dtoa_r+0x218>
 800bab4:	9b08      	ldr	r3, [sp, #32]
 800bab6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bab8:	443b      	add	r3, r7
 800baba:	9308      	str	r3, [sp, #32]
 800babc:	2300      	movs	r3, #0
 800babe:	930a      	str	r3, [sp, #40]	@ 0x28
 800bac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bac2:	2b09      	cmp	r3, #9
 800bac4:	d864      	bhi.n	800bb90 <_dtoa_r+0x280>
 800bac6:	2b05      	cmp	r3, #5
 800bac8:	bfc4      	itt	gt
 800baca:	3b04      	subgt	r3, #4
 800bacc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bad0:	f1a3 0302 	sub.w	r3, r3, #2
 800bad4:	bfcc      	ite	gt
 800bad6:	2400      	movgt	r4, #0
 800bad8:	2401      	movle	r4, #1
 800bada:	2b03      	cmp	r3, #3
 800badc:	d863      	bhi.n	800bba6 <_dtoa_r+0x296>
 800bade:	e8df f003 	tbb	[pc, r3]
 800bae2:	372a      	.short	0x372a
 800bae4:	5535      	.short	0x5535
 800bae6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800baea:	441e      	add	r6, r3
 800baec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800baf0:	2b20      	cmp	r3, #32
 800baf2:	bfc1      	itttt	gt
 800baf4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800baf8:	409f      	lslgt	r7, r3
 800bafa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bafe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bb02:	bfd6      	itet	le
 800bb04:	f1c3 0320 	rsble	r3, r3, #32
 800bb08:	ea47 0003 	orrgt.w	r0, r7, r3
 800bb0c:	fa04 f003 	lslle.w	r0, r4, r3
 800bb10:	f7f4 fd20 	bl	8000554 <__aeabi_ui2d>
 800bb14:	2201      	movs	r2, #1
 800bb16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bb1a:	3e01      	subs	r6, #1
 800bb1c:	9214      	str	r2, [sp, #80]	@ 0x50
 800bb1e:	e777      	b.n	800ba10 <_dtoa_r+0x100>
 800bb20:	2301      	movs	r3, #1
 800bb22:	e7b8      	b.n	800ba96 <_dtoa_r+0x186>
 800bb24:	9012      	str	r0, [sp, #72]	@ 0x48
 800bb26:	e7b7      	b.n	800ba98 <_dtoa_r+0x188>
 800bb28:	427b      	negs	r3, r7
 800bb2a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	eba8 0807 	sub.w	r8, r8, r7
 800bb32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bb34:	e7c4      	b.n	800bac0 <_dtoa_r+0x1b0>
 800bb36:	2300      	movs	r3, #0
 800bb38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	dc35      	bgt.n	800bbac <_dtoa_r+0x29c>
 800bb40:	2301      	movs	r3, #1
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	9307      	str	r3, [sp, #28]
 800bb46:	461a      	mov	r2, r3
 800bb48:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb4a:	e00b      	b.n	800bb64 <_dtoa_r+0x254>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e7f3      	b.n	800bb38 <_dtoa_r+0x228>
 800bb50:	2300      	movs	r3, #0
 800bb52:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb56:	18fb      	adds	r3, r7, r3
 800bb58:	9300      	str	r3, [sp, #0]
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	9307      	str	r3, [sp, #28]
 800bb60:	bfb8      	it	lt
 800bb62:	2301      	movlt	r3, #1
 800bb64:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bb68:	2100      	movs	r1, #0
 800bb6a:	2204      	movs	r2, #4
 800bb6c:	f102 0514 	add.w	r5, r2, #20
 800bb70:	429d      	cmp	r5, r3
 800bb72:	d91f      	bls.n	800bbb4 <_dtoa_r+0x2a4>
 800bb74:	6041      	str	r1, [r0, #4]
 800bb76:	4658      	mov	r0, fp
 800bb78:	f000 fd8e 	bl	800c698 <_Balloc>
 800bb7c:	4682      	mov	sl, r0
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	d13c      	bne.n	800bbfc <_dtoa_r+0x2ec>
 800bb82:	4b1b      	ldr	r3, [pc, #108]	@ (800bbf0 <_dtoa_r+0x2e0>)
 800bb84:	4602      	mov	r2, r0
 800bb86:	f240 11af 	movw	r1, #431	@ 0x1af
 800bb8a:	e6d8      	b.n	800b93e <_dtoa_r+0x2e>
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e7e0      	b.n	800bb52 <_dtoa_r+0x242>
 800bb90:	2401      	movs	r4, #1
 800bb92:	2300      	movs	r3, #0
 800bb94:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb96:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bb98:	f04f 33ff 	mov.w	r3, #4294967295
 800bb9c:	9300      	str	r3, [sp, #0]
 800bb9e:	9307      	str	r3, [sp, #28]
 800bba0:	2200      	movs	r2, #0
 800bba2:	2312      	movs	r3, #18
 800bba4:	e7d0      	b.n	800bb48 <_dtoa_r+0x238>
 800bba6:	2301      	movs	r3, #1
 800bba8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bbaa:	e7f5      	b.n	800bb98 <_dtoa_r+0x288>
 800bbac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	9307      	str	r3, [sp, #28]
 800bbb2:	e7d7      	b.n	800bb64 <_dtoa_r+0x254>
 800bbb4:	3101      	adds	r1, #1
 800bbb6:	0052      	lsls	r2, r2, #1
 800bbb8:	e7d8      	b.n	800bb6c <_dtoa_r+0x25c>
 800bbba:	bf00      	nop
 800bbbc:	f3af 8000 	nop.w
 800bbc0:	636f4361 	.word	0x636f4361
 800bbc4:	3fd287a7 	.word	0x3fd287a7
 800bbc8:	8b60c8b3 	.word	0x8b60c8b3
 800bbcc:	3fc68a28 	.word	0x3fc68a28
 800bbd0:	509f79fb 	.word	0x509f79fb
 800bbd4:	3fd34413 	.word	0x3fd34413
 800bbd8:	0800ef9e 	.word	0x0800ef9e
 800bbdc:	0800efb5 	.word	0x0800efb5
 800bbe0:	7ff00000 	.word	0x7ff00000
 800bbe4:	0800ef69 	.word	0x0800ef69
 800bbe8:	3ff80000 	.word	0x3ff80000
 800bbec:	0800f0b0 	.word	0x0800f0b0
 800bbf0:	0800f00d 	.word	0x0800f00d
 800bbf4:	0800ef9a 	.word	0x0800ef9a
 800bbf8:	0800ef68 	.word	0x0800ef68
 800bbfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc00:	6018      	str	r0, [r3, #0]
 800bc02:	9b07      	ldr	r3, [sp, #28]
 800bc04:	2b0e      	cmp	r3, #14
 800bc06:	f200 80a4 	bhi.w	800bd52 <_dtoa_r+0x442>
 800bc0a:	2c00      	cmp	r4, #0
 800bc0c:	f000 80a1 	beq.w	800bd52 <_dtoa_r+0x442>
 800bc10:	2f00      	cmp	r7, #0
 800bc12:	dd33      	ble.n	800bc7c <_dtoa_r+0x36c>
 800bc14:	4bad      	ldr	r3, [pc, #692]	@ (800becc <_dtoa_r+0x5bc>)
 800bc16:	f007 020f 	and.w	r2, r7, #15
 800bc1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc1e:	ed93 7b00 	vldr	d7, [r3]
 800bc22:	05f8      	lsls	r0, r7, #23
 800bc24:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bc28:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bc2c:	d516      	bpl.n	800bc5c <_dtoa_r+0x34c>
 800bc2e:	4ba8      	ldr	r3, [pc, #672]	@ (800bed0 <_dtoa_r+0x5c0>)
 800bc30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc38:	f7f4 fe30 	bl	800089c <__aeabi_ddiv>
 800bc3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc40:	f004 040f 	and.w	r4, r4, #15
 800bc44:	2603      	movs	r6, #3
 800bc46:	4da2      	ldr	r5, [pc, #648]	@ (800bed0 <_dtoa_r+0x5c0>)
 800bc48:	b954      	cbnz	r4, 800bc60 <_dtoa_r+0x350>
 800bc4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc52:	f7f4 fe23 	bl	800089c <__aeabi_ddiv>
 800bc56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc5a:	e028      	b.n	800bcae <_dtoa_r+0x39e>
 800bc5c:	2602      	movs	r6, #2
 800bc5e:	e7f2      	b.n	800bc46 <_dtoa_r+0x336>
 800bc60:	07e1      	lsls	r1, r4, #31
 800bc62:	d508      	bpl.n	800bc76 <_dtoa_r+0x366>
 800bc64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc68:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc6c:	f7f4 fcec 	bl	8000648 <__aeabi_dmul>
 800bc70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc74:	3601      	adds	r6, #1
 800bc76:	1064      	asrs	r4, r4, #1
 800bc78:	3508      	adds	r5, #8
 800bc7a:	e7e5      	b.n	800bc48 <_dtoa_r+0x338>
 800bc7c:	f000 80d2 	beq.w	800be24 <_dtoa_r+0x514>
 800bc80:	427c      	negs	r4, r7
 800bc82:	4b92      	ldr	r3, [pc, #584]	@ (800becc <_dtoa_r+0x5bc>)
 800bc84:	4d92      	ldr	r5, [pc, #584]	@ (800bed0 <_dtoa_r+0x5c0>)
 800bc86:	f004 020f 	and.w	r2, r4, #15
 800bc8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc96:	f7f4 fcd7 	bl	8000648 <__aeabi_dmul>
 800bc9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc9e:	1124      	asrs	r4, r4, #4
 800bca0:	2300      	movs	r3, #0
 800bca2:	2602      	movs	r6, #2
 800bca4:	2c00      	cmp	r4, #0
 800bca6:	f040 80b2 	bne.w	800be0e <_dtoa_r+0x4fe>
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d1d3      	bne.n	800bc56 <_dtoa_r+0x346>
 800bcae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bcb0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f000 80b7 	beq.w	800be28 <_dtoa_r+0x518>
 800bcba:	4b86      	ldr	r3, [pc, #536]	@ (800bed4 <_dtoa_r+0x5c4>)
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	4629      	mov	r1, r5
 800bcc2:	f7f4 ff33 	bl	8000b2c <__aeabi_dcmplt>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	f000 80ae 	beq.w	800be28 <_dtoa_r+0x518>
 800bccc:	9b07      	ldr	r3, [sp, #28]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	f000 80aa 	beq.w	800be28 <_dtoa_r+0x518>
 800bcd4:	9b00      	ldr	r3, [sp, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	dd37      	ble.n	800bd4a <_dtoa_r+0x43a>
 800bcda:	1e7b      	subs	r3, r7, #1
 800bcdc:	9304      	str	r3, [sp, #16]
 800bcde:	4620      	mov	r0, r4
 800bce0:	4b7d      	ldr	r3, [pc, #500]	@ (800bed8 <_dtoa_r+0x5c8>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	4629      	mov	r1, r5
 800bce6:	f7f4 fcaf 	bl	8000648 <__aeabi_dmul>
 800bcea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcee:	9c00      	ldr	r4, [sp, #0]
 800bcf0:	3601      	adds	r6, #1
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	f7f4 fc3e 	bl	8000574 <__aeabi_i2d>
 800bcf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcfc:	f7f4 fca4 	bl	8000648 <__aeabi_dmul>
 800bd00:	4b76      	ldr	r3, [pc, #472]	@ (800bedc <_dtoa_r+0x5cc>)
 800bd02:	2200      	movs	r2, #0
 800bd04:	f7f4 faea 	bl	80002dc <__adddf3>
 800bd08:	4605      	mov	r5, r0
 800bd0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bd0e:	2c00      	cmp	r4, #0
 800bd10:	f040 808d 	bne.w	800be2e <_dtoa_r+0x51e>
 800bd14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd18:	4b71      	ldr	r3, [pc, #452]	@ (800bee0 <_dtoa_r+0x5d0>)
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f7f4 fadc 	bl	80002d8 <__aeabi_dsub>
 800bd20:	4602      	mov	r2, r0
 800bd22:	460b      	mov	r3, r1
 800bd24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd28:	462a      	mov	r2, r5
 800bd2a:	4633      	mov	r3, r6
 800bd2c:	f7f4 ff1c 	bl	8000b68 <__aeabi_dcmpgt>
 800bd30:	2800      	cmp	r0, #0
 800bd32:	f040 828b 	bne.w	800c24c <_dtoa_r+0x93c>
 800bd36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd3a:	462a      	mov	r2, r5
 800bd3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bd40:	f7f4 fef4 	bl	8000b2c <__aeabi_dcmplt>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	f040 8128 	bne.w	800bf9a <_dtoa_r+0x68a>
 800bd4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bd4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bd52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f2c0 815a 	blt.w	800c00e <_dtoa_r+0x6fe>
 800bd5a:	2f0e      	cmp	r7, #14
 800bd5c:	f300 8157 	bgt.w	800c00e <_dtoa_r+0x6fe>
 800bd60:	4b5a      	ldr	r3, [pc, #360]	@ (800becc <_dtoa_r+0x5bc>)
 800bd62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd66:	ed93 7b00 	vldr	d7, [r3]
 800bd6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	ed8d 7b00 	vstr	d7, [sp]
 800bd72:	da03      	bge.n	800bd7c <_dtoa_r+0x46c>
 800bd74:	9b07      	ldr	r3, [sp, #28]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f340 8101 	ble.w	800bf7e <_dtoa_r+0x66e>
 800bd7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bd80:	4656      	mov	r6, sl
 800bd82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd86:	4620      	mov	r0, r4
 800bd88:	4629      	mov	r1, r5
 800bd8a:	f7f4 fd87 	bl	800089c <__aeabi_ddiv>
 800bd8e:	f7f4 ff0b 	bl	8000ba8 <__aeabi_d2iz>
 800bd92:	4680      	mov	r8, r0
 800bd94:	f7f4 fbee 	bl	8000574 <__aeabi_i2d>
 800bd98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd9c:	f7f4 fc54 	bl	8000648 <__aeabi_dmul>
 800bda0:	4602      	mov	r2, r0
 800bda2:	460b      	mov	r3, r1
 800bda4:	4620      	mov	r0, r4
 800bda6:	4629      	mov	r1, r5
 800bda8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bdac:	f7f4 fa94 	bl	80002d8 <__aeabi_dsub>
 800bdb0:	f806 4b01 	strb.w	r4, [r6], #1
 800bdb4:	9d07      	ldr	r5, [sp, #28]
 800bdb6:	eba6 040a 	sub.w	r4, r6, sl
 800bdba:	42a5      	cmp	r5, r4
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	f040 8117 	bne.w	800bff2 <_dtoa_r+0x6e2>
 800bdc4:	f7f4 fa8a 	bl	80002dc <__adddf3>
 800bdc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdcc:	4604      	mov	r4, r0
 800bdce:	460d      	mov	r5, r1
 800bdd0:	f7f4 feca 	bl	8000b68 <__aeabi_dcmpgt>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	f040 80f9 	bne.w	800bfcc <_dtoa_r+0x6bc>
 800bdda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdde:	4620      	mov	r0, r4
 800bde0:	4629      	mov	r1, r5
 800bde2:	f7f4 fe99 	bl	8000b18 <__aeabi_dcmpeq>
 800bde6:	b118      	cbz	r0, 800bdf0 <_dtoa_r+0x4e0>
 800bde8:	f018 0f01 	tst.w	r8, #1
 800bdec:	f040 80ee 	bne.w	800bfcc <_dtoa_r+0x6bc>
 800bdf0:	4649      	mov	r1, r9
 800bdf2:	4658      	mov	r0, fp
 800bdf4:	f000 fc90 	bl	800c718 <_Bfree>
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	7033      	strb	r3, [r6, #0]
 800bdfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bdfe:	3701      	adds	r7, #1
 800be00:	601f      	str	r7, [r3, #0]
 800be02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be04:	2b00      	cmp	r3, #0
 800be06:	f000 831d 	beq.w	800c444 <_dtoa_r+0xb34>
 800be0a:	601e      	str	r6, [r3, #0]
 800be0c:	e31a      	b.n	800c444 <_dtoa_r+0xb34>
 800be0e:	07e2      	lsls	r2, r4, #31
 800be10:	d505      	bpl.n	800be1e <_dtoa_r+0x50e>
 800be12:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be16:	f7f4 fc17 	bl	8000648 <__aeabi_dmul>
 800be1a:	3601      	adds	r6, #1
 800be1c:	2301      	movs	r3, #1
 800be1e:	1064      	asrs	r4, r4, #1
 800be20:	3508      	adds	r5, #8
 800be22:	e73f      	b.n	800bca4 <_dtoa_r+0x394>
 800be24:	2602      	movs	r6, #2
 800be26:	e742      	b.n	800bcae <_dtoa_r+0x39e>
 800be28:	9c07      	ldr	r4, [sp, #28]
 800be2a:	9704      	str	r7, [sp, #16]
 800be2c:	e761      	b.n	800bcf2 <_dtoa_r+0x3e2>
 800be2e:	4b27      	ldr	r3, [pc, #156]	@ (800becc <_dtoa_r+0x5bc>)
 800be30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800be36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be3a:	4454      	add	r4, sl
 800be3c:	2900      	cmp	r1, #0
 800be3e:	d053      	beq.n	800bee8 <_dtoa_r+0x5d8>
 800be40:	4928      	ldr	r1, [pc, #160]	@ (800bee4 <_dtoa_r+0x5d4>)
 800be42:	2000      	movs	r0, #0
 800be44:	f7f4 fd2a 	bl	800089c <__aeabi_ddiv>
 800be48:	4633      	mov	r3, r6
 800be4a:	462a      	mov	r2, r5
 800be4c:	f7f4 fa44 	bl	80002d8 <__aeabi_dsub>
 800be50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be54:	4656      	mov	r6, sl
 800be56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be5a:	f7f4 fea5 	bl	8000ba8 <__aeabi_d2iz>
 800be5e:	4605      	mov	r5, r0
 800be60:	f7f4 fb88 	bl	8000574 <__aeabi_i2d>
 800be64:	4602      	mov	r2, r0
 800be66:	460b      	mov	r3, r1
 800be68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be6c:	f7f4 fa34 	bl	80002d8 <__aeabi_dsub>
 800be70:	3530      	adds	r5, #48	@ 0x30
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be7a:	f806 5b01 	strb.w	r5, [r6], #1
 800be7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be82:	f7f4 fe53 	bl	8000b2c <__aeabi_dcmplt>
 800be86:	2800      	cmp	r0, #0
 800be88:	d171      	bne.n	800bf6e <_dtoa_r+0x65e>
 800be8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be8e:	4911      	ldr	r1, [pc, #68]	@ (800bed4 <_dtoa_r+0x5c4>)
 800be90:	2000      	movs	r0, #0
 800be92:	f7f4 fa21 	bl	80002d8 <__aeabi_dsub>
 800be96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be9a:	f7f4 fe47 	bl	8000b2c <__aeabi_dcmplt>
 800be9e:	2800      	cmp	r0, #0
 800bea0:	f040 8095 	bne.w	800bfce <_dtoa_r+0x6be>
 800bea4:	42a6      	cmp	r6, r4
 800bea6:	f43f af50 	beq.w	800bd4a <_dtoa_r+0x43a>
 800beaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800beae:	4b0a      	ldr	r3, [pc, #40]	@ (800bed8 <_dtoa_r+0x5c8>)
 800beb0:	2200      	movs	r2, #0
 800beb2:	f7f4 fbc9 	bl	8000648 <__aeabi_dmul>
 800beb6:	4b08      	ldr	r3, [pc, #32]	@ (800bed8 <_dtoa_r+0x5c8>)
 800beb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bebc:	2200      	movs	r2, #0
 800bebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bec2:	f7f4 fbc1 	bl	8000648 <__aeabi_dmul>
 800bec6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800beca:	e7c4      	b.n	800be56 <_dtoa_r+0x546>
 800becc:	0800f0b0 	.word	0x0800f0b0
 800bed0:	0800f088 	.word	0x0800f088
 800bed4:	3ff00000 	.word	0x3ff00000
 800bed8:	40240000 	.word	0x40240000
 800bedc:	401c0000 	.word	0x401c0000
 800bee0:	40140000 	.word	0x40140000
 800bee4:	3fe00000 	.word	0x3fe00000
 800bee8:	4631      	mov	r1, r6
 800beea:	4628      	mov	r0, r5
 800beec:	f7f4 fbac 	bl	8000648 <__aeabi_dmul>
 800bef0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bef4:	9415      	str	r4, [sp, #84]	@ 0x54
 800bef6:	4656      	mov	r6, sl
 800bef8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800befc:	f7f4 fe54 	bl	8000ba8 <__aeabi_d2iz>
 800bf00:	4605      	mov	r5, r0
 800bf02:	f7f4 fb37 	bl	8000574 <__aeabi_i2d>
 800bf06:	4602      	mov	r2, r0
 800bf08:	460b      	mov	r3, r1
 800bf0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf0e:	f7f4 f9e3 	bl	80002d8 <__aeabi_dsub>
 800bf12:	3530      	adds	r5, #48	@ 0x30
 800bf14:	f806 5b01 	strb.w	r5, [r6], #1
 800bf18:	4602      	mov	r2, r0
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	42a6      	cmp	r6, r4
 800bf1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf22:	f04f 0200 	mov.w	r2, #0
 800bf26:	d124      	bne.n	800bf72 <_dtoa_r+0x662>
 800bf28:	4bac      	ldr	r3, [pc, #688]	@ (800c1dc <_dtoa_r+0x8cc>)
 800bf2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bf2e:	f7f4 f9d5 	bl	80002dc <__adddf3>
 800bf32:	4602      	mov	r2, r0
 800bf34:	460b      	mov	r3, r1
 800bf36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf3a:	f7f4 fe15 	bl	8000b68 <__aeabi_dcmpgt>
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	d145      	bne.n	800bfce <_dtoa_r+0x6be>
 800bf42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bf46:	49a5      	ldr	r1, [pc, #660]	@ (800c1dc <_dtoa_r+0x8cc>)
 800bf48:	2000      	movs	r0, #0
 800bf4a:	f7f4 f9c5 	bl	80002d8 <__aeabi_dsub>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	460b      	mov	r3, r1
 800bf52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf56:	f7f4 fde9 	bl	8000b2c <__aeabi_dcmplt>
 800bf5a:	2800      	cmp	r0, #0
 800bf5c:	f43f aef5 	beq.w	800bd4a <_dtoa_r+0x43a>
 800bf60:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bf62:	1e73      	subs	r3, r6, #1
 800bf64:	9315      	str	r3, [sp, #84]	@ 0x54
 800bf66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf6a:	2b30      	cmp	r3, #48	@ 0x30
 800bf6c:	d0f8      	beq.n	800bf60 <_dtoa_r+0x650>
 800bf6e:	9f04      	ldr	r7, [sp, #16]
 800bf70:	e73e      	b.n	800bdf0 <_dtoa_r+0x4e0>
 800bf72:	4b9b      	ldr	r3, [pc, #620]	@ (800c1e0 <_dtoa_r+0x8d0>)
 800bf74:	f7f4 fb68 	bl	8000648 <__aeabi_dmul>
 800bf78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf7c:	e7bc      	b.n	800bef8 <_dtoa_r+0x5e8>
 800bf7e:	d10c      	bne.n	800bf9a <_dtoa_r+0x68a>
 800bf80:	4b98      	ldr	r3, [pc, #608]	@ (800c1e4 <_dtoa_r+0x8d4>)
 800bf82:	2200      	movs	r2, #0
 800bf84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf88:	f7f4 fb5e 	bl	8000648 <__aeabi_dmul>
 800bf8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf90:	f7f4 fde0 	bl	8000b54 <__aeabi_dcmpge>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	f000 8157 	beq.w	800c248 <_dtoa_r+0x938>
 800bf9a:	2400      	movs	r4, #0
 800bf9c:	4625      	mov	r5, r4
 800bf9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfa0:	43db      	mvns	r3, r3
 800bfa2:	9304      	str	r3, [sp, #16]
 800bfa4:	4656      	mov	r6, sl
 800bfa6:	2700      	movs	r7, #0
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	4658      	mov	r0, fp
 800bfac:	f000 fbb4 	bl	800c718 <_Bfree>
 800bfb0:	2d00      	cmp	r5, #0
 800bfb2:	d0dc      	beq.n	800bf6e <_dtoa_r+0x65e>
 800bfb4:	b12f      	cbz	r7, 800bfc2 <_dtoa_r+0x6b2>
 800bfb6:	42af      	cmp	r7, r5
 800bfb8:	d003      	beq.n	800bfc2 <_dtoa_r+0x6b2>
 800bfba:	4639      	mov	r1, r7
 800bfbc:	4658      	mov	r0, fp
 800bfbe:	f000 fbab 	bl	800c718 <_Bfree>
 800bfc2:	4629      	mov	r1, r5
 800bfc4:	4658      	mov	r0, fp
 800bfc6:	f000 fba7 	bl	800c718 <_Bfree>
 800bfca:	e7d0      	b.n	800bf6e <_dtoa_r+0x65e>
 800bfcc:	9704      	str	r7, [sp, #16]
 800bfce:	4633      	mov	r3, r6
 800bfd0:	461e      	mov	r6, r3
 800bfd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfd6:	2a39      	cmp	r2, #57	@ 0x39
 800bfd8:	d107      	bne.n	800bfea <_dtoa_r+0x6da>
 800bfda:	459a      	cmp	sl, r3
 800bfdc:	d1f8      	bne.n	800bfd0 <_dtoa_r+0x6c0>
 800bfde:	9a04      	ldr	r2, [sp, #16]
 800bfe0:	3201      	adds	r2, #1
 800bfe2:	9204      	str	r2, [sp, #16]
 800bfe4:	2230      	movs	r2, #48	@ 0x30
 800bfe6:	f88a 2000 	strb.w	r2, [sl]
 800bfea:	781a      	ldrb	r2, [r3, #0]
 800bfec:	3201      	adds	r2, #1
 800bfee:	701a      	strb	r2, [r3, #0]
 800bff0:	e7bd      	b.n	800bf6e <_dtoa_r+0x65e>
 800bff2:	4b7b      	ldr	r3, [pc, #492]	@ (800c1e0 <_dtoa_r+0x8d0>)
 800bff4:	2200      	movs	r2, #0
 800bff6:	f7f4 fb27 	bl	8000648 <__aeabi_dmul>
 800bffa:	2200      	movs	r2, #0
 800bffc:	2300      	movs	r3, #0
 800bffe:	4604      	mov	r4, r0
 800c000:	460d      	mov	r5, r1
 800c002:	f7f4 fd89 	bl	8000b18 <__aeabi_dcmpeq>
 800c006:	2800      	cmp	r0, #0
 800c008:	f43f aebb 	beq.w	800bd82 <_dtoa_r+0x472>
 800c00c:	e6f0      	b.n	800bdf0 <_dtoa_r+0x4e0>
 800c00e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c010:	2a00      	cmp	r2, #0
 800c012:	f000 80db 	beq.w	800c1cc <_dtoa_r+0x8bc>
 800c016:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c018:	2a01      	cmp	r2, #1
 800c01a:	f300 80bf 	bgt.w	800c19c <_dtoa_r+0x88c>
 800c01e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c020:	2a00      	cmp	r2, #0
 800c022:	f000 80b7 	beq.w	800c194 <_dtoa_r+0x884>
 800c026:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c02a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c02c:	4646      	mov	r6, r8
 800c02e:	9a08      	ldr	r2, [sp, #32]
 800c030:	2101      	movs	r1, #1
 800c032:	441a      	add	r2, r3
 800c034:	4658      	mov	r0, fp
 800c036:	4498      	add	r8, r3
 800c038:	9208      	str	r2, [sp, #32]
 800c03a:	f000 fc6b 	bl	800c914 <__i2b>
 800c03e:	4605      	mov	r5, r0
 800c040:	b15e      	cbz	r6, 800c05a <_dtoa_r+0x74a>
 800c042:	9b08      	ldr	r3, [sp, #32]
 800c044:	2b00      	cmp	r3, #0
 800c046:	dd08      	ble.n	800c05a <_dtoa_r+0x74a>
 800c048:	42b3      	cmp	r3, r6
 800c04a:	9a08      	ldr	r2, [sp, #32]
 800c04c:	bfa8      	it	ge
 800c04e:	4633      	movge	r3, r6
 800c050:	eba8 0803 	sub.w	r8, r8, r3
 800c054:	1af6      	subs	r6, r6, r3
 800c056:	1ad3      	subs	r3, r2, r3
 800c058:	9308      	str	r3, [sp, #32]
 800c05a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c05c:	b1f3      	cbz	r3, 800c09c <_dtoa_r+0x78c>
 800c05e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 80b7 	beq.w	800c1d4 <_dtoa_r+0x8c4>
 800c066:	b18c      	cbz	r4, 800c08c <_dtoa_r+0x77c>
 800c068:	4629      	mov	r1, r5
 800c06a:	4622      	mov	r2, r4
 800c06c:	4658      	mov	r0, fp
 800c06e:	f000 fd11 	bl	800ca94 <__pow5mult>
 800c072:	464a      	mov	r2, r9
 800c074:	4601      	mov	r1, r0
 800c076:	4605      	mov	r5, r0
 800c078:	4658      	mov	r0, fp
 800c07a:	f000 fc61 	bl	800c940 <__multiply>
 800c07e:	4649      	mov	r1, r9
 800c080:	9004      	str	r0, [sp, #16]
 800c082:	4658      	mov	r0, fp
 800c084:	f000 fb48 	bl	800c718 <_Bfree>
 800c088:	9b04      	ldr	r3, [sp, #16]
 800c08a:	4699      	mov	r9, r3
 800c08c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c08e:	1b1a      	subs	r2, r3, r4
 800c090:	d004      	beq.n	800c09c <_dtoa_r+0x78c>
 800c092:	4649      	mov	r1, r9
 800c094:	4658      	mov	r0, fp
 800c096:	f000 fcfd 	bl	800ca94 <__pow5mult>
 800c09a:	4681      	mov	r9, r0
 800c09c:	2101      	movs	r1, #1
 800c09e:	4658      	mov	r0, fp
 800c0a0:	f000 fc38 	bl	800c914 <__i2b>
 800c0a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	f000 81cf 	beq.w	800c44c <_dtoa_r+0xb3c>
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	4601      	mov	r1, r0
 800c0b2:	4658      	mov	r0, fp
 800c0b4:	f000 fcee 	bl	800ca94 <__pow5mult>
 800c0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	4604      	mov	r4, r0
 800c0be:	f300 8095 	bgt.w	800c1ec <_dtoa_r+0x8dc>
 800c0c2:	9b02      	ldr	r3, [sp, #8]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f040 8087 	bne.w	800c1d8 <_dtoa_r+0x8c8>
 800c0ca:	9b03      	ldr	r3, [sp, #12]
 800c0cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	f040 8089 	bne.w	800c1e8 <_dtoa_r+0x8d8>
 800c0d6:	9b03      	ldr	r3, [sp, #12]
 800c0d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c0dc:	0d1b      	lsrs	r3, r3, #20
 800c0de:	051b      	lsls	r3, r3, #20
 800c0e0:	b12b      	cbz	r3, 800c0ee <_dtoa_r+0x7de>
 800c0e2:	9b08      	ldr	r3, [sp, #32]
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	9308      	str	r3, [sp, #32]
 800c0e8:	f108 0801 	add.w	r8, r8, #1
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	f000 81b0 	beq.w	800c458 <_dtoa_r+0xb48>
 800c0f8:	6923      	ldr	r3, [r4, #16]
 800c0fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c0fe:	6918      	ldr	r0, [r3, #16]
 800c100:	f000 fbbc 	bl	800c87c <__hi0bits>
 800c104:	f1c0 0020 	rsb	r0, r0, #32
 800c108:	9b08      	ldr	r3, [sp, #32]
 800c10a:	4418      	add	r0, r3
 800c10c:	f010 001f 	ands.w	r0, r0, #31
 800c110:	d077      	beq.n	800c202 <_dtoa_r+0x8f2>
 800c112:	f1c0 0320 	rsb	r3, r0, #32
 800c116:	2b04      	cmp	r3, #4
 800c118:	dd6b      	ble.n	800c1f2 <_dtoa_r+0x8e2>
 800c11a:	9b08      	ldr	r3, [sp, #32]
 800c11c:	f1c0 001c 	rsb	r0, r0, #28
 800c120:	4403      	add	r3, r0
 800c122:	4480      	add	r8, r0
 800c124:	4406      	add	r6, r0
 800c126:	9308      	str	r3, [sp, #32]
 800c128:	f1b8 0f00 	cmp.w	r8, #0
 800c12c:	dd05      	ble.n	800c13a <_dtoa_r+0x82a>
 800c12e:	4649      	mov	r1, r9
 800c130:	4642      	mov	r2, r8
 800c132:	4658      	mov	r0, fp
 800c134:	f000 fd08 	bl	800cb48 <__lshift>
 800c138:	4681      	mov	r9, r0
 800c13a:	9b08      	ldr	r3, [sp, #32]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	dd05      	ble.n	800c14c <_dtoa_r+0x83c>
 800c140:	4621      	mov	r1, r4
 800c142:	461a      	mov	r2, r3
 800c144:	4658      	mov	r0, fp
 800c146:	f000 fcff 	bl	800cb48 <__lshift>
 800c14a:	4604      	mov	r4, r0
 800c14c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d059      	beq.n	800c206 <_dtoa_r+0x8f6>
 800c152:	4621      	mov	r1, r4
 800c154:	4648      	mov	r0, r9
 800c156:	f000 fd63 	bl	800cc20 <__mcmp>
 800c15a:	2800      	cmp	r0, #0
 800c15c:	da53      	bge.n	800c206 <_dtoa_r+0x8f6>
 800c15e:	1e7b      	subs	r3, r7, #1
 800c160:	9304      	str	r3, [sp, #16]
 800c162:	4649      	mov	r1, r9
 800c164:	2300      	movs	r3, #0
 800c166:	220a      	movs	r2, #10
 800c168:	4658      	mov	r0, fp
 800c16a:	f000 faf7 	bl	800c75c <__multadd>
 800c16e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c170:	4681      	mov	r9, r0
 800c172:	2b00      	cmp	r3, #0
 800c174:	f000 8172 	beq.w	800c45c <_dtoa_r+0xb4c>
 800c178:	2300      	movs	r3, #0
 800c17a:	4629      	mov	r1, r5
 800c17c:	220a      	movs	r2, #10
 800c17e:	4658      	mov	r0, fp
 800c180:	f000 faec 	bl	800c75c <__multadd>
 800c184:	9b00      	ldr	r3, [sp, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	4605      	mov	r5, r0
 800c18a:	dc67      	bgt.n	800c25c <_dtoa_r+0x94c>
 800c18c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c18e:	2b02      	cmp	r3, #2
 800c190:	dc41      	bgt.n	800c216 <_dtoa_r+0x906>
 800c192:	e063      	b.n	800c25c <_dtoa_r+0x94c>
 800c194:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c196:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c19a:	e746      	b.n	800c02a <_dtoa_r+0x71a>
 800c19c:	9b07      	ldr	r3, [sp, #28]
 800c19e:	1e5c      	subs	r4, r3, #1
 800c1a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1a2:	42a3      	cmp	r3, r4
 800c1a4:	bfbf      	itttt	lt
 800c1a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c1a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c1aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c1ac:	1ae3      	sublt	r3, r4, r3
 800c1ae:	bfb4      	ite	lt
 800c1b0:	18d2      	addlt	r2, r2, r3
 800c1b2:	1b1c      	subge	r4, r3, r4
 800c1b4:	9b07      	ldr	r3, [sp, #28]
 800c1b6:	bfbc      	itt	lt
 800c1b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c1ba:	2400      	movlt	r4, #0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	bfb5      	itete	lt
 800c1c0:	eba8 0603 	sublt.w	r6, r8, r3
 800c1c4:	9b07      	ldrge	r3, [sp, #28]
 800c1c6:	2300      	movlt	r3, #0
 800c1c8:	4646      	movge	r6, r8
 800c1ca:	e730      	b.n	800c02e <_dtoa_r+0x71e>
 800c1cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c1ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c1d0:	4646      	mov	r6, r8
 800c1d2:	e735      	b.n	800c040 <_dtoa_r+0x730>
 800c1d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c1d6:	e75c      	b.n	800c092 <_dtoa_r+0x782>
 800c1d8:	2300      	movs	r3, #0
 800c1da:	e788      	b.n	800c0ee <_dtoa_r+0x7de>
 800c1dc:	3fe00000 	.word	0x3fe00000
 800c1e0:	40240000 	.word	0x40240000
 800c1e4:	40140000 	.word	0x40140000
 800c1e8:	9b02      	ldr	r3, [sp, #8]
 800c1ea:	e780      	b.n	800c0ee <_dtoa_r+0x7de>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1f0:	e782      	b.n	800c0f8 <_dtoa_r+0x7e8>
 800c1f2:	d099      	beq.n	800c128 <_dtoa_r+0x818>
 800c1f4:	9a08      	ldr	r2, [sp, #32]
 800c1f6:	331c      	adds	r3, #28
 800c1f8:	441a      	add	r2, r3
 800c1fa:	4498      	add	r8, r3
 800c1fc:	441e      	add	r6, r3
 800c1fe:	9208      	str	r2, [sp, #32]
 800c200:	e792      	b.n	800c128 <_dtoa_r+0x818>
 800c202:	4603      	mov	r3, r0
 800c204:	e7f6      	b.n	800c1f4 <_dtoa_r+0x8e4>
 800c206:	9b07      	ldr	r3, [sp, #28]
 800c208:	9704      	str	r7, [sp, #16]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	dc20      	bgt.n	800c250 <_dtoa_r+0x940>
 800c20e:	9300      	str	r3, [sp, #0]
 800c210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c212:	2b02      	cmp	r3, #2
 800c214:	dd1e      	ble.n	800c254 <_dtoa_r+0x944>
 800c216:	9b00      	ldr	r3, [sp, #0]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f47f aec0 	bne.w	800bf9e <_dtoa_r+0x68e>
 800c21e:	4621      	mov	r1, r4
 800c220:	2205      	movs	r2, #5
 800c222:	4658      	mov	r0, fp
 800c224:	f000 fa9a 	bl	800c75c <__multadd>
 800c228:	4601      	mov	r1, r0
 800c22a:	4604      	mov	r4, r0
 800c22c:	4648      	mov	r0, r9
 800c22e:	f000 fcf7 	bl	800cc20 <__mcmp>
 800c232:	2800      	cmp	r0, #0
 800c234:	f77f aeb3 	ble.w	800bf9e <_dtoa_r+0x68e>
 800c238:	4656      	mov	r6, sl
 800c23a:	2331      	movs	r3, #49	@ 0x31
 800c23c:	f806 3b01 	strb.w	r3, [r6], #1
 800c240:	9b04      	ldr	r3, [sp, #16]
 800c242:	3301      	adds	r3, #1
 800c244:	9304      	str	r3, [sp, #16]
 800c246:	e6ae      	b.n	800bfa6 <_dtoa_r+0x696>
 800c248:	9c07      	ldr	r4, [sp, #28]
 800c24a:	9704      	str	r7, [sp, #16]
 800c24c:	4625      	mov	r5, r4
 800c24e:	e7f3      	b.n	800c238 <_dtoa_r+0x928>
 800c250:	9b07      	ldr	r3, [sp, #28]
 800c252:	9300      	str	r3, [sp, #0]
 800c254:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c256:	2b00      	cmp	r3, #0
 800c258:	f000 8104 	beq.w	800c464 <_dtoa_r+0xb54>
 800c25c:	2e00      	cmp	r6, #0
 800c25e:	dd05      	ble.n	800c26c <_dtoa_r+0x95c>
 800c260:	4629      	mov	r1, r5
 800c262:	4632      	mov	r2, r6
 800c264:	4658      	mov	r0, fp
 800c266:	f000 fc6f 	bl	800cb48 <__lshift>
 800c26a:	4605      	mov	r5, r0
 800c26c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d05a      	beq.n	800c328 <_dtoa_r+0xa18>
 800c272:	6869      	ldr	r1, [r5, #4]
 800c274:	4658      	mov	r0, fp
 800c276:	f000 fa0f 	bl	800c698 <_Balloc>
 800c27a:	4606      	mov	r6, r0
 800c27c:	b928      	cbnz	r0, 800c28a <_dtoa_r+0x97a>
 800c27e:	4b84      	ldr	r3, [pc, #528]	@ (800c490 <_dtoa_r+0xb80>)
 800c280:	4602      	mov	r2, r0
 800c282:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c286:	f7ff bb5a 	b.w	800b93e <_dtoa_r+0x2e>
 800c28a:	692a      	ldr	r2, [r5, #16]
 800c28c:	3202      	adds	r2, #2
 800c28e:	0092      	lsls	r2, r2, #2
 800c290:	f105 010c 	add.w	r1, r5, #12
 800c294:	300c      	adds	r0, #12
 800c296:	f7ff fa9c 	bl	800b7d2 <memcpy>
 800c29a:	2201      	movs	r2, #1
 800c29c:	4631      	mov	r1, r6
 800c29e:	4658      	mov	r0, fp
 800c2a0:	f000 fc52 	bl	800cb48 <__lshift>
 800c2a4:	f10a 0301 	add.w	r3, sl, #1
 800c2a8:	9307      	str	r3, [sp, #28]
 800c2aa:	9b00      	ldr	r3, [sp, #0]
 800c2ac:	4453      	add	r3, sl
 800c2ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2b0:	9b02      	ldr	r3, [sp, #8]
 800c2b2:	f003 0301 	and.w	r3, r3, #1
 800c2b6:	462f      	mov	r7, r5
 800c2b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2ba:	4605      	mov	r5, r0
 800c2bc:	9b07      	ldr	r3, [sp, #28]
 800c2be:	4621      	mov	r1, r4
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	4648      	mov	r0, r9
 800c2c4:	9300      	str	r3, [sp, #0]
 800c2c6:	f7ff fa99 	bl	800b7fc <quorem>
 800c2ca:	4639      	mov	r1, r7
 800c2cc:	9002      	str	r0, [sp, #8]
 800c2ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c2d2:	4648      	mov	r0, r9
 800c2d4:	f000 fca4 	bl	800cc20 <__mcmp>
 800c2d8:	462a      	mov	r2, r5
 800c2da:	9008      	str	r0, [sp, #32]
 800c2dc:	4621      	mov	r1, r4
 800c2de:	4658      	mov	r0, fp
 800c2e0:	f000 fcba 	bl	800cc58 <__mdiff>
 800c2e4:	68c2      	ldr	r2, [r0, #12]
 800c2e6:	4606      	mov	r6, r0
 800c2e8:	bb02      	cbnz	r2, 800c32c <_dtoa_r+0xa1c>
 800c2ea:	4601      	mov	r1, r0
 800c2ec:	4648      	mov	r0, r9
 800c2ee:	f000 fc97 	bl	800cc20 <__mcmp>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	4631      	mov	r1, r6
 800c2f6:	4658      	mov	r0, fp
 800c2f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c2fa:	f000 fa0d 	bl	800c718 <_Bfree>
 800c2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c300:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c302:	9e07      	ldr	r6, [sp, #28]
 800c304:	ea43 0102 	orr.w	r1, r3, r2
 800c308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c30a:	4319      	orrs	r1, r3
 800c30c:	d110      	bne.n	800c330 <_dtoa_r+0xa20>
 800c30e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c312:	d029      	beq.n	800c368 <_dtoa_r+0xa58>
 800c314:	9b08      	ldr	r3, [sp, #32]
 800c316:	2b00      	cmp	r3, #0
 800c318:	dd02      	ble.n	800c320 <_dtoa_r+0xa10>
 800c31a:	9b02      	ldr	r3, [sp, #8]
 800c31c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c320:	9b00      	ldr	r3, [sp, #0]
 800c322:	f883 8000 	strb.w	r8, [r3]
 800c326:	e63f      	b.n	800bfa8 <_dtoa_r+0x698>
 800c328:	4628      	mov	r0, r5
 800c32a:	e7bb      	b.n	800c2a4 <_dtoa_r+0x994>
 800c32c:	2201      	movs	r2, #1
 800c32e:	e7e1      	b.n	800c2f4 <_dtoa_r+0x9e4>
 800c330:	9b08      	ldr	r3, [sp, #32]
 800c332:	2b00      	cmp	r3, #0
 800c334:	db04      	blt.n	800c340 <_dtoa_r+0xa30>
 800c336:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c338:	430b      	orrs	r3, r1
 800c33a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c33c:	430b      	orrs	r3, r1
 800c33e:	d120      	bne.n	800c382 <_dtoa_r+0xa72>
 800c340:	2a00      	cmp	r2, #0
 800c342:	dded      	ble.n	800c320 <_dtoa_r+0xa10>
 800c344:	4649      	mov	r1, r9
 800c346:	2201      	movs	r2, #1
 800c348:	4658      	mov	r0, fp
 800c34a:	f000 fbfd 	bl	800cb48 <__lshift>
 800c34e:	4621      	mov	r1, r4
 800c350:	4681      	mov	r9, r0
 800c352:	f000 fc65 	bl	800cc20 <__mcmp>
 800c356:	2800      	cmp	r0, #0
 800c358:	dc03      	bgt.n	800c362 <_dtoa_r+0xa52>
 800c35a:	d1e1      	bne.n	800c320 <_dtoa_r+0xa10>
 800c35c:	f018 0f01 	tst.w	r8, #1
 800c360:	d0de      	beq.n	800c320 <_dtoa_r+0xa10>
 800c362:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c366:	d1d8      	bne.n	800c31a <_dtoa_r+0xa0a>
 800c368:	9a00      	ldr	r2, [sp, #0]
 800c36a:	2339      	movs	r3, #57	@ 0x39
 800c36c:	7013      	strb	r3, [r2, #0]
 800c36e:	4633      	mov	r3, r6
 800c370:	461e      	mov	r6, r3
 800c372:	3b01      	subs	r3, #1
 800c374:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c378:	2a39      	cmp	r2, #57	@ 0x39
 800c37a:	d052      	beq.n	800c422 <_dtoa_r+0xb12>
 800c37c:	3201      	adds	r2, #1
 800c37e:	701a      	strb	r2, [r3, #0]
 800c380:	e612      	b.n	800bfa8 <_dtoa_r+0x698>
 800c382:	2a00      	cmp	r2, #0
 800c384:	dd07      	ble.n	800c396 <_dtoa_r+0xa86>
 800c386:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c38a:	d0ed      	beq.n	800c368 <_dtoa_r+0xa58>
 800c38c:	9a00      	ldr	r2, [sp, #0]
 800c38e:	f108 0301 	add.w	r3, r8, #1
 800c392:	7013      	strb	r3, [r2, #0]
 800c394:	e608      	b.n	800bfa8 <_dtoa_r+0x698>
 800c396:	9b07      	ldr	r3, [sp, #28]
 800c398:	9a07      	ldr	r2, [sp, #28]
 800c39a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c39e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d028      	beq.n	800c3f6 <_dtoa_r+0xae6>
 800c3a4:	4649      	mov	r1, r9
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	220a      	movs	r2, #10
 800c3aa:	4658      	mov	r0, fp
 800c3ac:	f000 f9d6 	bl	800c75c <__multadd>
 800c3b0:	42af      	cmp	r7, r5
 800c3b2:	4681      	mov	r9, r0
 800c3b4:	f04f 0300 	mov.w	r3, #0
 800c3b8:	f04f 020a 	mov.w	r2, #10
 800c3bc:	4639      	mov	r1, r7
 800c3be:	4658      	mov	r0, fp
 800c3c0:	d107      	bne.n	800c3d2 <_dtoa_r+0xac2>
 800c3c2:	f000 f9cb 	bl	800c75c <__multadd>
 800c3c6:	4607      	mov	r7, r0
 800c3c8:	4605      	mov	r5, r0
 800c3ca:	9b07      	ldr	r3, [sp, #28]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	9307      	str	r3, [sp, #28]
 800c3d0:	e774      	b.n	800c2bc <_dtoa_r+0x9ac>
 800c3d2:	f000 f9c3 	bl	800c75c <__multadd>
 800c3d6:	4629      	mov	r1, r5
 800c3d8:	4607      	mov	r7, r0
 800c3da:	2300      	movs	r3, #0
 800c3dc:	220a      	movs	r2, #10
 800c3de:	4658      	mov	r0, fp
 800c3e0:	f000 f9bc 	bl	800c75c <__multadd>
 800c3e4:	4605      	mov	r5, r0
 800c3e6:	e7f0      	b.n	800c3ca <_dtoa_r+0xaba>
 800c3e8:	9b00      	ldr	r3, [sp, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	bfcc      	ite	gt
 800c3ee:	461e      	movgt	r6, r3
 800c3f0:	2601      	movle	r6, #1
 800c3f2:	4456      	add	r6, sl
 800c3f4:	2700      	movs	r7, #0
 800c3f6:	4649      	mov	r1, r9
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	4658      	mov	r0, fp
 800c3fc:	f000 fba4 	bl	800cb48 <__lshift>
 800c400:	4621      	mov	r1, r4
 800c402:	4681      	mov	r9, r0
 800c404:	f000 fc0c 	bl	800cc20 <__mcmp>
 800c408:	2800      	cmp	r0, #0
 800c40a:	dcb0      	bgt.n	800c36e <_dtoa_r+0xa5e>
 800c40c:	d102      	bne.n	800c414 <_dtoa_r+0xb04>
 800c40e:	f018 0f01 	tst.w	r8, #1
 800c412:	d1ac      	bne.n	800c36e <_dtoa_r+0xa5e>
 800c414:	4633      	mov	r3, r6
 800c416:	461e      	mov	r6, r3
 800c418:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c41c:	2a30      	cmp	r2, #48	@ 0x30
 800c41e:	d0fa      	beq.n	800c416 <_dtoa_r+0xb06>
 800c420:	e5c2      	b.n	800bfa8 <_dtoa_r+0x698>
 800c422:	459a      	cmp	sl, r3
 800c424:	d1a4      	bne.n	800c370 <_dtoa_r+0xa60>
 800c426:	9b04      	ldr	r3, [sp, #16]
 800c428:	3301      	adds	r3, #1
 800c42a:	9304      	str	r3, [sp, #16]
 800c42c:	2331      	movs	r3, #49	@ 0x31
 800c42e:	f88a 3000 	strb.w	r3, [sl]
 800c432:	e5b9      	b.n	800bfa8 <_dtoa_r+0x698>
 800c434:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c436:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c494 <_dtoa_r+0xb84>
 800c43a:	b11b      	cbz	r3, 800c444 <_dtoa_r+0xb34>
 800c43c:	f10a 0308 	add.w	r3, sl, #8
 800c440:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c442:	6013      	str	r3, [r2, #0]
 800c444:	4650      	mov	r0, sl
 800c446:	b019      	add	sp, #100	@ 0x64
 800c448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c44c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c44e:	2b01      	cmp	r3, #1
 800c450:	f77f ae37 	ble.w	800c0c2 <_dtoa_r+0x7b2>
 800c454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c456:	930a      	str	r3, [sp, #40]	@ 0x28
 800c458:	2001      	movs	r0, #1
 800c45a:	e655      	b.n	800c108 <_dtoa_r+0x7f8>
 800c45c:	9b00      	ldr	r3, [sp, #0]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f77f aed6 	ble.w	800c210 <_dtoa_r+0x900>
 800c464:	4656      	mov	r6, sl
 800c466:	4621      	mov	r1, r4
 800c468:	4648      	mov	r0, r9
 800c46a:	f7ff f9c7 	bl	800b7fc <quorem>
 800c46e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c472:	f806 8b01 	strb.w	r8, [r6], #1
 800c476:	9b00      	ldr	r3, [sp, #0]
 800c478:	eba6 020a 	sub.w	r2, r6, sl
 800c47c:	4293      	cmp	r3, r2
 800c47e:	ddb3      	ble.n	800c3e8 <_dtoa_r+0xad8>
 800c480:	4649      	mov	r1, r9
 800c482:	2300      	movs	r3, #0
 800c484:	220a      	movs	r2, #10
 800c486:	4658      	mov	r0, fp
 800c488:	f000 f968 	bl	800c75c <__multadd>
 800c48c:	4681      	mov	r9, r0
 800c48e:	e7ea      	b.n	800c466 <_dtoa_r+0xb56>
 800c490:	0800f00d 	.word	0x0800f00d
 800c494:	0800ef91 	.word	0x0800ef91

0800c498 <_free_r>:
 800c498:	b538      	push	{r3, r4, r5, lr}
 800c49a:	4605      	mov	r5, r0
 800c49c:	2900      	cmp	r1, #0
 800c49e:	d041      	beq.n	800c524 <_free_r+0x8c>
 800c4a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4a4:	1f0c      	subs	r4, r1, #4
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	bfb8      	it	lt
 800c4aa:	18e4      	addlt	r4, r4, r3
 800c4ac:	f000 f8e8 	bl	800c680 <__malloc_lock>
 800c4b0:	4a1d      	ldr	r2, [pc, #116]	@ (800c528 <_free_r+0x90>)
 800c4b2:	6813      	ldr	r3, [r2, #0]
 800c4b4:	b933      	cbnz	r3, 800c4c4 <_free_r+0x2c>
 800c4b6:	6063      	str	r3, [r4, #4]
 800c4b8:	6014      	str	r4, [r2, #0]
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4c0:	f000 b8e4 	b.w	800c68c <__malloc_unlock>
 800c4c4:	42a3      	cmp	r3, r4
 800c4c6:	d908      	bls.n	800c4da <_free_r+0x42>
 800c4c8:	6820      	ldr	r0, [r4, #0]
 800c4ca:	1821      	adds	r1, r4, r0
 800c4cc:	428b      	cmp	r3, r1
 800c4ce:	bf01      	itttt	eq
 800c4d0:	6819      	ldreq	r1, [r3, #0]
 800c4d2:	685b      	ldreq	r3, [r3, #4]
 800c4d4:	1809      	addeq	r1, r1, r0
 800c4d6:	6021      	streq	r1, [r4, #0]
 800c4d8:	e7ed      	b.n	800c4b6 <_free_r+0x1e>
 800c4da:	461a      	mov	r2, r3
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	b10b      	cbz	r3, 800c4e4 <_free_r+0x4c>
 800c4e0:	42a3      	cmp	r3, r4
 800c4e2:	d9fa      	bls.n	800c4da <_free_r+0x42>
 800c4e4:	6811      	ldr	r1, [r2, #0]
 800c4e6:	1850      	adds	r0, r2, r1
 800c4e8:	42a0      	cmp	r0, r4
 800c4ea:	d10b      	bne.n	800c504 <_free_r+0x6c>
 800c4ec:	6820      	ldr	r0, [r4, #0]
 800c4ee:	4401      	add	r1, r0
 800c4f0:	1850      	adds	r0, r2, r1
 800c4f2:	4283      	cmp	r3, r0
 800c4f4:	6011      	str	r1, [r2, #0]
 800c4f6:	d1e0      	bne.n	800c4ba <_free_r+0x22>
 800c4f8:	6818      	ldr	r0, [r3, #0]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	6053      	str	r3, [r2, #4]
 800c4fe:	4408      	add	r0, r1
 800c500:	6010      	str	r0, [r2, #0]
 800c502:	e7da      	b.n	800c4ba <_free_r+0x22>
 800c504:	d902      	bls.n	800c50c <_free_r+0x74>
 800c506:	230c      	movs	r3, #12
 800c508:	602b      	str	r3, [r5, #0]
 800c50a:	e7d6      	b.n	800c4ba <_free_r+0x22>
 800c50c:	6820      	ldr	r0, [r4, #0]
 800c50e:	1821      	adds	r1, r4, r0
 800c510:	428b      	cmp	r3, r1
 800c512:	bf04      	itt	eq
 800c514:	6819      	ldreq	r1, [r3, #0]
 800c516:	685b      	ldreq	r3, [r3, #4]
 800c518:	6063      	str	r3, [r4, #4]
 800c51a:	bf04      	itt	eq
 800c51c:	1809      	addeq	r1, r1, r0
 800c51e:	6021      	streq	r1, [r4, #0]
 800c520:	6054      	str	r4, [r2, #4]
 800c522:	e7ca      	b.n	800c4ba <_free_r+0x22>
 800c524:	bd38      	pop	{r3, r4, r5, pc}
 800c526:	bf00      	nop
 800c528:	2000420c 	.word	0x2000420c

0800c52c <malloc>:
 800c52c:	4b02      	ldr	r3, [pc, #8]	@ (800c538 <malloc+0xc>)
 800c52e:	4601      	mov	r1, r0
 800c530:	6818      	ldr	r0, [r3, #0]
 800c532:	f000 b825 	b.w	800c580 <_malloc_r>
 800c536:	bf00      	nop
 800c538:	20000020 	.word	0x20000020

0800c53c <sbrk_aligned>:
 800c53c:	b570      	push	{r4, r5, r6, lr}
 800c53e:	4e0f      	ldr	r6, [pc, #60]	@ (800c57c <sbrk_aligned+0x40>)
 800c540:	460c      	mov	r4, r1
 800c542:	6831      	ldr	r1, [r6, #0]
 800c544:	4605      	mov	r5, r0
 800c546:	b911      	cbnz	r1, 800c54e <sbrk_aligned+0x12>
 800c548:	f001 ffd2 	bl	800e4f0 <_sbrk_r>
 800c54c:	6030      	str	r0, [r6, #0]
 800c54e:	4621      	mov	r1, r4
 800c550:	4628      	mov	r0, r5
 800c552:	f001 ffcd 	bl	800e4f0 <_sbrk_r>
 800c556:	1c43      	adds	r3, r0, #1
 800c558:	d103      	bne.n	800c562 <sbrk_aligned+0x26>
 800c55a:	f04f 34ff 	mov.w	r4, #4294967295
 800c55e:	4620      	mov	r0, r4
 800c560:	bd70      	pop	{r4, r5, r6, pc}
 800c562:	1cc4      	adds	r4, r0, #3
 800c564:	f024 0403 	bic.w	r4, r4, #3
 800c568:	42a0      	cmp	r0, r4
 800c56a:	d0f8      	beq.n	800c55e <sbrk_aligned+0x22>
 800c56c:	1a21      	subs	r1, r4, r0
 800c56e:	4628      	mov	r0, r5
 800c570:	f001 ffbe 	bl	800e4f0 <_sbrk_r>
 800c574:	3001      	adds	r0, #1
 800c576:	d1f2      	bne.n	800c55e <sbrk_aligned+0x22>
 800c578:	e7ef      	b.n	800c55a <sbrk_aligned+0x1e>
 800c57a:	bf00      	nop
 800c57c:	20004208 	.word	0x20004208

0800c580 <_malloc_r>:
 800c580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c584:	1ccd      	adds	r5, r1, #3
 800c586:	f025 0503 	bic.w	r5, r5, #3
 800c58a:	3508      	adds	r5, #8
 800c58c:	2d0c      	cmp	r5, #12
 800c58e:	bf38      	it	cc
 800c590:	250c      	movcc	r5, #12
 800c592:	2d00      	cmp	r5, #0
 800c594:	4606      	mov	r6, r0
 800c596:	db01      	blt.n	800c59c <_malloc_r+0x1c>
 800c598:	42a9      	cmp	r1, r5
 800c59a:	d904      	bls.n	800c5a6 <_malloc_r+0x26>
 800c59c:	230c      	movs	r3, #12
 800c59e:	6033      	str	r3, [r6, #0]
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c67c <_malloc_r+0xfc>
 800c5aa:	f000 f869 	bl	800c680 <__malloc_lock>
 800c5ae:	f8d8 3000 	ldr.w	r3, [r8]
 800c5b2:	461c      	mov	r4, r3
 800c5b4:	bb44      	cbnz	r4, 800c608 <_malloc_r+0x88>
 800c5b6:	4629      	mov	r1, r5
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	f7ff ffbf 	bl	800c53c <sbrk_aligned>
 800c5be:	1c43      	adds	r3, r0, #1
 800c5c0:	4604      	mov	r4, r0
 800c5c2:	d158      	bne.n	800c676 <_malloc_r+0xf6>
 800c5c4:	f8d8 4000 	ldr.w	r4, [r8]
 800c5c8:	4627      	mov	r7, r4
 800c5ca:	2f00      	cmp	r7, #0
 800c5cc:	d143      	bne.n	800c656 <_malloc_r+0xd6>
 800c5ce:	2c00      	cmp	r4, #0
 800c5d0:	d04b      	beq.n	800c66a <_malloc_r+0xea>
 800c5d2:	6823      	ldr	r3, [r4, #0]
 800c5d4:	4639      	mov	r1, r7
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	eb04 0903 	add.w	r9, r4, r3
 800c5dc:	f001 ff88 	bl	800e4f0 <_sbrk_r>
 800c5e0:	4581      	cmp	r9, r0
 800c5e2:	d142      	bne.n	800c66a <_malloc_r+0xea>
 800c5e4:	6821      	ldr	r1, [r4, #0]
 800c5e6:	1a6d      	subs	r5, r5, r1
 800c5e8:	4629      	mov	r1, r5
 800c5ea:	4630      	mov	r0, r6
 800c5ec:	f7ff ffa6 	bl	800c53c <sbrk_aligned>
 800c5f0:	3001      	adds	r0, #1
 800c5f2:	d03a      	beq.n	800c66a <_malloc_r+0xea>
 800c5f4:	6823      	ldr	r3, [r4, #0]
 800c5f6:	442b      	add	r3, r5
 800c5f8:	6023      	str	r3, [r4, #0]
 800c5fa:	f8d8 3000 	ldr.w	r3, [r8]
 800c5fe:	685a      	ldr	r2, [r3, #4]
 800c600:	bb62      	cbnz	r2, 800c65c <_malloc_r+0xdc>
 800c602:	f8c8 7000 	str.w	r7, [r8]
 800c606:	e00f      	b.n	800c628 <_malloc_r+0xa8>
 800c608:	6822      	ldr	r2, [r4, #0]
 800c60a:	1b52      	subs	r2, r2, r5
 800c60c:	d420      	bmi.n	800c650 <_malloc_r+0xd0>
 800c60e:	2a0b      	cmp	r2, #11
 800c610:	d917      	bls.n	800c642 <_malloc_r+0xc2>
 800c612:	1961      	adds	r1, r4, r5
 800c614:	42a3      	cmp	r3, r4
 800c616:	6025      	str	r5, [r4, #0]
 800c618:	bf18      	it	ne
 800c61a:	6059      	strne	r1, [r3, #4]
 800c61c:	6863      	ldr	r3, [r4, #4]
 800c61e:	bf08      	it	eq
 800c620:	f8c8 1000 	streq.w	r1, [r8]
 800c624:	5162      	str	r2, [r4, r5]
 800c626:	604b      	str	r3, [r1, #4]
 800c628:	4630      	mov	r0, r6
 800c62a:	f000 f82f 	bl	800c68c <__malloc_unlock>
 800c62e:	f104 000b 	add.w	r0, r4, #11
 800c632:	1d23      	adds	r3, r4, #4
 800c634:	f020 0007 	bic.w	r0, r0, #7
 800c638:	1ac2      	subs	r2, r0, r3
 800c63a:	bf1c      	itt	ne
 800c63c:	1a1b      	subne	r3, r3, r0
 800c63e:	50a3      	strne	r3, [r4, r2]
 800c640:	e7af      	b.n	800c5a2 <_malloc_r+0x22>
 800c642:	6862      	ldr	r2, [r4, #4]
 800c644:	42a3      	cmp	r3, r4
 800c646:	bf0c      	ite	eq
 800c648:	f8c8 2000 	streq.w	r2, [r8]
 800c64c:	605a      	strne	r2, [r3, #4]
 800c64e:	e7eb      	b.n	800c628 <_malloc_r+0xa8>
 800c650:	4623      	mov	r3, r4
 800c652:	6864      	ldr	r4, [r4, #4]
 800c654:	e7ae      	b.n	800c5b4 <_malloc_r+0x34>
 800c656:	463c      	mov	r4, r7
 800c658:	687f      	ldr	r7, [r7, #4]
 800c65a:	e7b6      	b.n	800c5ca <_malloc_r+0x4a>
 800c65c:	461a      	mov	r2, r3
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	42a3      	cmp	r3, r4
 800c662:	d1fb      	bne.n	800c65c <_malloc_r+0xdc>
 800c664:	2300      	movs	r3, #0
 800c666:	6053      	str	r3, [r2, #4]
 800c668:	e7de      	b.n	800c628 <_malloc_r+0xa8>
 800c66a:	230c      	movs	r3, #12
 800c66c:	6033      	str	r3, [r6, #0]
 800c66e:	4630      	mov	r0, r6
 800c670:	f000 f80c 	bl	800c68c <__malloc_unlock>
 800c674:	e794      	b.n	800c5a0 <_malloc_r+0x20>
 800c676:	6005      	str	r5, [r0, #0]
 800c678:	e7d6      	b.n	800c628 <_malloc_r+0xa8>
 800c67a:	bf00      	nop
 800c67c:	2000420c 	.word	0x2000420c

0800c680 <__malloc_lock>:
 800c680:	4801      	ldr	r0, [pc, #4]	@ (800c688 <__malloc_lock+0x8>)
 800c682:	f7ff b8a4 	b.w	800b7ce <__retarget_lock_acquire_recursive>
 800c686:	bf00      	nop
 800c688:	20004204 	.word	0x20004204

0800c68c <__malloc_unlock>:
 800c68c:	4801      	ldr	r0, [pc, #4]	@ (800c694 <__malloc_unlock+0x8>)
 800c68e:	f7ff b89f 	b.w	800b7d0 <__retarget_lock_release_recursive>
 800c692:	bf00      	nop
 800c694:	20004204 	.word	0x20004204

0800c698 <_Balloc>:
 800c698:	b570      	push	{r4, r5, r6, lr}
 800c69a:	69c6      	ldr	r6, [r0, #28]
 800c69c:	4604      	mov	r4, r0
 800c69e:	460d      	mov	r5, r1
 800c6a0:	b976      	cbnz	r6, 800c6c0 <_Balloc+0x28>
 800c6a2:	2010      	movs	r0, #16
 800c6a4:	f7ff ff42 	bl	800c52c <malloc>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	61e0      	str	r0, [r4, #28]
 800c6ac:	b920      	cbnz	r0, 800c6b8 <_Balloc+0x20>
 800c6ae:	4b18      	ldr	r3, [pc, #96]	@ (800c710 <_Balloc+0x78>)
 800c6b0:	4818      	ldr	r0, [pc, #96]	@ (800c714 <_Balloc+0x7c>)
 800c6b2:	216b      	movs	r1, #107	@ 0x6b
 800c6b4:	f001 ff34 	bl	800e520 <__assert_func>
 800c6b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6bc:	6006      	str	r6, [r0, #0]
 800c6be:	60c6      	str	r6, [r0, #12]
 800c6c0:	69e6      	ldr	r6, [r4, #28]
 800c6c2:	68f3      	ldr	r3, [r6, #12]
 800c6c4:	b183      	cbz	r3, 800c6e8 <_Balloc+0x50>
 800c6c6:	69e3      	ldr	r3, [r4, #28]
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c6ce:	b9b8      	cbnz	r0, 800c700 <_Balloc+0x68>
 800c6d0:	2101      	movs	r1, #1
 800c6d2:	fa01 f605 	lsl.w	r6, r1, r5
 800c6d6:	1d72      	adds	r2, r6, #5
 800c6d8:	0092      	lsls	r2, r2, #2
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f001 ff3e 	bl	800e55c <_calloc_r>
 800c6e0:	b160      	cbz	r0, 800c6fc <_Balloc+0x64>
 800c6e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c6e6:	e00e      	b.n	800c706 <_Balloc+0x6e>
 800c6e8:	2221      	movs	r2, #33	@ 0x21
 800c6ea:	2104      	movs	r1, #4
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f001 ff35 	bl	800e55c <_calloc_r>
 800c6f2:	69e3      	ldr	r3, [r4, #28]
 800c6f4:	60f0      	str	r0, [r6, #12]
 800c6f6:	68db      	ldr	r3, [r3, #12]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d1e4      	bne.n	800c6c6 <_Balloc+0x2e>
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	bd70      	pop	{r4, r5, r6, pc}
 800c700:	6802      	ldr	r2, [r0, #0]
 800c702:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c706:	2300      	movs	r3, #0
 800c708:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c70c:	e7f7      	b.n	800c6fe <_Balloc+0x66>
 800c70e:	bf00      	nop
 800c710:	0800ef9e 	.word	0x0800ef9e
 800c714:	0800f01e 	.word	0x0800f01e

0800c718 <_Bfree>:
 800c718:	b570      	push	{r4, r5, r6, lr}
 800c71a:	69c6      	ldr	r6, [r0, #28]
 800c71c:	4605      	mov	r5, r0
 800c71e:	460c      	mov	r4, r1
 800c720:	b976      	cbnz	r6, 800c740 <_Bfree+0x28>
 800c722:	2010      	movs	r0, #16
 800c724:	f7ff ff02 	bl	800c52c <malloc>
 800c728:	4602      	mov	r2, r0
 800c72a:	61e8      	str	r0, [r5, #28]
 800c72c:	b920      	cbnz	r0, 800c738 <_Bfree+0x20>
 800c72e:	4b09      	ldr	r3, [pc, #36]	@ (800c754 <_Bfree+0x3c>)
 800c730:	4809      	ldr	r0, [pc, #36]	@ (800c758 <_Bfree+0x40>)
 800c732:	218f      	movs	r1, #143	@ 0x8f
 800c734:	f001 fef4 	bl	800e520 <__assert_func>
 800c738:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c73c:	6006      	str	r6, [r0, #0]
 800c73e:	60c6      	str	r6, [r0, #12]
 800c740:	b13c      	cbz	r4, 800c752 <_Bfree+0x3a>
 800c742:	69eb      	ldr	r3, [r5, #28]
 800c744:	6862      	ldr	r2, [r4, #4]
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c74c:	6021      	str	r1, [r4, #0]
 800c74e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c752:	bd70      	pop	{r4, r5, r6, pc}
 800c754:	0800ef9e 	.word	0x0800ef9e
 800c758:	0800f01e 	.word	0x0800f01e

0800c75c <__multadd>:
 800c75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c760:	690d      	ldr	r5, [r1, #16]
 800c762:	4607      	mov	r7, r0
 800c764:	460c      	mov	r4, r1
 800c766:	461e      	mov	r6, r3
 800c768:	f101 0c14 	add.w	ip, r1, #20
 800c76c:	2000      	movs	r0, #0
 800c76e:	f8dc 3000 	ldr.w	r3, [ip]
 800c772:	b299      	uxth	r1, r3
 800c774:	fb02 6101 	mla	r1, r2, r1, r6
 800c778:	0c1e      	lsrs	r6, r3, #16
 800c77a:	0c0b      	lsrs	r3, r1, #16
 800c77c:	fb02 3306 	mla	r3, r2, r6, r3
 800c780:	b289      	uxth	r1, r1
 800c782:	3001      	adds	r0, #1
 800c784:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c788:	4285      	cmp	r5, r0
 800c78a:	f84c 1b04 	str.w	r1, [ip], #4
 800c78e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c792:	dcec      	bgt.n	800c76e <__multadd+0x12>
 800c794:	b30e      	cbz	r6, 800c7da <__multadd+0x7e>
 800c796:	68a3      	ldr	r3, [r4, #8]
 800c798:	42ab      	cmp	r3, r5
 800c79a:	dc19      	bgt.n	800c7d0 <__multadd+0x74>
 800c79c:	6861      	ldr	r1, [r4, #4]
 800c79e:	4638      	mov	r0, r7
 800c7a0:	3101      	adds	r1, #1
 800c7a2:	f7ff ff79 	bl	800c698 <_Balloc>
 800c7a6:	4680      	mov	r8, r0
 800c7a8:	b928      	cbnz	r0, 800c7b6 <__multadd+0x5a>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	4b0c      	ldr	r3, [pc, #48]	@ (800c7e0 <__multadd+0x84>)
 800c7ae:	480d      	ldr	r0, [pc, #52]	@ (800c7e4 <__multadd+0x88>)
 800c7b0:	21ba      	movs	r1, #186	@ 0xba
 800c7b2:	f001 feb5 	bl	800e520 <__assert_func>
 800c7b6:	6922      	ldr	r2, [r4, #16]
 800c7b8:	3202      	adds	r2, #2
 800c7ba:	f104 010c 	add.w	r1, r4, #12
 800c7be:	0092      	lsls	r2, r2, #2
 800c7c0:	300c      	adds	r0, #12
 800c7c2:	f7ff f806 	bl	800b7d2 <memcpy>
 800c7c6:	4621      	mov	r1, r4
 800c7c8:	4638      	mov	r0, r7
 800c7ca:	f7ff ffa5 	bl	800c718 <_Bfree>
 800c7ce:	4644      	mov	r4, r8
 800c7d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c7d4:	3501      	adds	r5, #1
 800c7d6:	615e      	str	r6, [r3, #20]
 800c7d8:	6125      	str	r5, [r4, #16]
 800c7da:	4620      	mov	r0, r4
 800c7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7e0:	0800f00d 	.word	0x0800f00d
 800c7e4:	0800f01e 	.word	0x0800f01e

0800c7e8 <__s2b>:
 800c7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7ec:	460c      	mov	r4, r1
 800c7ee:	4615      	mov	r5, r2
 800c7f0:	461f      	mov	r7, r3
 800c7f2:	2209      	movs	r2, #9
 800c7f4:	3308      	adds	r3, #8
 800c7f6:	4606      	mov	r6, r0
 800c7f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	2201      	movs	r2, #1
 800c800:	429a      	cmp	r2, r3
 800c802:	db09      	blt.n	800c818 <__s2b+0x30>
 800c804:	4630      	mov	r0, r6
 800c806:	f7ff ff47 	bl	800c698 <_Balloc>
 800c80a:	b940      	cbnz	r0, 800c81e <__s2b+0x36>
 800c80c:	4602      	mov	r2, r0
 800c80e:	4b19      	ldr	r3, [pc, #100]	@ (800c874 <__s2b+0x8c>)
 800c810:	4819      	ldr	r0, [pc, #100]	@ (800c878 <__s2b+0x90>)
 800c812:	21d3      	movs	r1, #211	@ 0xd3
 800c814:	f001 fe84 	bl	800e520 <__assert_func>
 800c818:	0052      	lsls	r2, r2, #1
 800c81a:	3101      	adds	r1, #1
 800c81c:	e7f0      	b.n	800c800 <__s2b+0x18>
 800c81e:	9b08      	ldr	r3, [sp, #32]
 800c820:	6143      	str	r3, [r0, #20]
 800c822:	2d09      	cmp	r5, #9
 800c824:	f04f 0301 	mov.w	r3, #1
 800c828:	6103      	str	r3, [r0, #16]
 800c82a:	dd16      	ble.n	800c85a <__s2b+0x72>
 800c82c:	f104 0909 	add.w	r9, r4, #9
 800c830:	46c8      	mov	r8, r9
 800c832:	442c      	add	r4, r5
 800c834:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c838:	4601      	mov	r1, r0
 800c83a:	3b30      	subs	r3, #48	@ 0x30
 800c83c:	220a      	movs	r2, #10
 800c83e:	4630      	mov	r0, r6
 800c840:	f7ff ff8c 	bl	800c75c <__multadd>
 800c844:	45a0      	cmp	r8, r4
 800c846:	d1f5      	bne.n	800c834 <__s2b+0x4c>
 800c848:	f1a5 0408 	sub.w	r4, r5, #8
 800c84c:	444c      	add	r4, r9
 800c84e:	1b2d      	subs	r5, r5, r4
 800c850:	1963      	adds	r3, r4, r5
 800c852:	42bb      	cmp	r3, r7
 800c854:	db04      	blt.n	800c860 <__s2b+0x78>
 800c856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c85a:	340a      	adds	r4, #10
 800c85c:	2509      	movs	r5, #9
 800c85e:	e7f6      	b.n	800c84e <__s2b+0x66>
 800c860:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c864:	4601      	mov	r1, r0
 800c866:	3b30      	subs	r3, #48	@ 0x30
 800c868:	220a      	movs	r2, #10
 800c86a:	4630      	mov	r0, r6
 800c86c:	f7ff ff76 	bl	800c75c <__multadd>
 800c870:	e7ee      	b.n	800c850 <__s2b+0x68>
 800c872:	bf00      	nop
 800c874:	0800f00d 	.word	0x0800f00d
 800c878:	0800f01e 	.word	0x0800f01e

0800c87c <__hi0bits>:
 800c87c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c880:	4603      	mov	r3, r0
 800c882:	bf36      	itet	cc
 800c884:	0403      	lslcc	r3, r0, #16
 800c886:	2000      	movcs	r0, #0
 800c888:	2010      	movcc	r0, #16
 800c88a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c88e:	bf3c      	itt	cc
 800c890:	021b      	lslcc	r3, r3, #8
 800c892:	3008      	addcc	r0, #8
 800c894:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c898:	bf3c      	itt	cc
 800c89a:	011b      	lslcc	r3, r3, #4
 800c89c:	3004      	addcc	r0, #4
 800c89e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8a2:	bf3c      	itt	cc
 800c8a4:	009b      	lslcc	r3, r3, #2
 800c8a6:	3002      	addcc	r0, #2
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	db05      	blt.n	800c8b8 <__hi0bits+0x3c>
 800c8ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c8b0:	f100 0001 	add.w	r0, r0, #1
 800c8b4:	bf08      	it	eq
 800c8b6:	2020      	moveq	r0, #32
 800c8b8:	4770      	bx	lr

0800c8ba <__lo0bits>:
 800c8ba:	6803      	ldr	r3, [r0, #0]
 800c8bc:	4602      	mov	r2, r0
 800c8be:	f013 0007 	ands.w	r0, r3, #7
 800c8c2:	d00b      	beq.n	800c8dc <__lo0bits+0x22>
 800c8c4:	07d9      	lsls	r1, r3, #31
 800c8c6:	d421      	bmi.n	800c90c <__lo0bits+0x52>
 800c8c8:	0798      	lsls	r0, r3, #30
 800c8ca:	bf49      	itett	mi
 800c8cc:	085b      	lsrmi	r3, r3, #1
 800c8ce:	089b      	lsrpl	r3, r3, #2
 800c8d0:	2001      	movmi	r0, #1
 800c8d2:	6013      	strmi	r3, [r2, #0]
 800c8d4:	bf5c      	itt	pl
 800c8d6:	6013      	strpl	r3, [r2, #0]
 800c8d8:	2002      	movpl	r0, #2
 800c8da:	4770      	bx	lr
 800c8dc:	b299      	uxth	r1, r3
 800c8de:	b909      	cbnz	r1, 800c8e4 <__lo0bits+0x2a>
 800c8e0:	0c1b      	lsrs	r3, r3, #16
 800c8e2:	2010      	movs	r0, #16
 800c8e4:	b2d9      	uxtb	r1, r3
 800c8e6:	b909      	cbnz	r1, 800c8ec <__lo0bits+0x32>
 800c8e8:	3008      	adds	r0, #8
 800c8ea:	0a1b      	lsrs	r3, r3, #8
 800c8ec:	0719      	lsls	r1, r3, #28
 800c8ee:	bf04      	itt	eq
 800c8f0:	091b      	lsreq	r3, r3, #4
 800c8f2:	3004      	addeq	r0, #4
 800c8f4:	0799      	lsls	r1, r3, #30
 800c8f6:	bf04      	itt	eq
 800c8f8:	089b      	lsreq	r3, r3, #2
 800c8fa:	3002      	addeq	r0, #2
 800c8fc:	07d9      	lsls	r1, r3, #31
 800c8fe:	d403      	bmi.n	800c908 <__lo0bits+0x4e>
 800c900:	085b      	lsrs	r3, r3, #1
 800c902:	f100 0001 	add.w	r0, r0, #1
 800c906:	d003      	beq.n	800c910 <__lo0bits+0x56>
 800c908:	6013      	str	r3, [r2, #0]
 800c90a:	4770      	bx	lr
 800c90c:	2000      	movs	r0, #0
 800c90e:	4770      	bx	lr
 800c910:	2020      	movs	r0, #32
 800c912:	4770      	bx	lr

0800c914 <__i2b>:
 800c914:	b510      	push	{r4, lr}
 800c916:	460c      	mov	r4, r1
 800c918:	2101      	movs	r1, #1
 800c91a:	f7ff febd 	bl	800c698 <_Balloc>
 800c91e:	4602      	mov	r2, r0
 800c920:	b928      	cbnz	r0, 800c92e <__i2b+0x1a>
 800c922:	4b05      	ldr	r3, [pc, #20]	@ (800c938 <__i2b+0x24>)
 800c924:	4805      	ldr	r0, [pc, #20]	@ (800c93c <__i2b+0x28>)
 800c926:	f240 1145 	movw	r1, #325	@ 0x145
 800c92a:	f001 fdf9 	bl	800e520 <__assert_func>
 800c92e:	2301      	movs	r3, #1
 800c930:	6144      	str	r4, [r0, #20]
 800c932:	6103      	str	r3, [r0, #16]
 800c934:	bd10      	pop	{r4, pc}
 800c936:	bf00      	nop
 800c938:	0800f00d 	.word	0x0800f00d
 800c93c:	0800f01e 	.word	0x0800f01e

0800c940 <__multiply>:
 800c940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c944:	4614      	mov	r4, r2
 800c946:	690a      	ldr	r2, [r1, #16]
 800c948:	6923      	ldr	r3, [r4, #16]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	bfa8      	it	ge
 800c94e:	4623      	movge	r3, r4
 800c950:	460f      	mov	r7, r1
 800c952:	bfa4      	itt	ge
 800c954:	460c      	movge	r4, r1
 800c956:	461f      	movge	r7, r3
 800c958:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c95c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c960:	68a3      	ldr	r3, [r4, #8]
 800c962:	6861      	ldr	r1, [r4, #4]
 800c964:	eb0a 0609 	add.w	r6, sl, r9
 800c968:	42b3      	cmp	r3, r6
 800c96a:	b085      	sub	sp, #20
 800c96c:	bfb8      	it	lt
 800c96e:	3101      	addlt	r1, #1
 800c970:	f7ff fe92 	bl	800c698 <_Balloc>
 800c974:	b930      	cbnz	r0, 800c984 <__multiply+0x44>
 800c976:	4602      	mov	r2, r0
 800c978:	4b44      	ldr	r3, [pc, #272]	@ (800ca8c <__multiply+0x14c>)
 800c97a:	4845      	ldr	r0, [pc, #276]	@ (800ca90 <__multiply+0x150>)
 800c97c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c980:	f001 fdce 	bl	800e520 <__assert_func>
 800c984:	f100 0514 	add.w	r5, r0, #20
 800c988:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c98c:	462b      	mov	r3, r5
 800c98e:	2200      	movs	r2, #0
 800c990:	4543      	cmp	r3, r8
 800c992:	d321      	bcc.n	800c9d8 <__multiply+0x98>
 800c994:	f107 0114 	add.w	r1, r7, #20
 800c998:	f104 0214 	add.w	r2, r4, #20
 800c99c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c9a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c9a4:	9302      	str	r3, [sp, #8]
 800c9a6:	1b13      	subs	r3, r2, r4
 800c9a8:	3b15      	subs	r3, #21
 800c9aa:	f023 0303 	bic.w	r3, r3, #3
 800c9ae:	3304      	adds	r3, #4
 800c9b0:	f104 0715 	add.w	r7, r4, #21
 800c9b4:	42ba      	cmp	r2, r7
 800c9b6:	bf38      	it	cc
 800c9b8:	2304      	movcc	r3, #4
 800c9ba:	9301      	str	r3, [sp, #4]
 800c9bc:	9b02      	ldr	r3, [sp, #8]
 800c9be:	9103      	str	r1, [sp, #12]
 800c9c0:	428b      	cmp	r3, r1
 800c9c2:	d80c      	bhi.n	800c9de <__multiply+0x9e>
 800c9c4:	2e00      	cmp	r6, #0
 800c9c6:	dd03      	ble.n	800c9d0 <__multiply+0x90>
 800c9c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d05b      	beq.n	800ca88 <__multiply+0x148>
 800c9d0:	6106      	str	r6, [r0, #16]
 800c9d2:	b005      	add	sp, #20
 800c9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d8:	f843 2b04 	str.w	r2, [r3], #4
 800c9dc:	e7d8      	b.n	800c990 <__multiply+0x50>
 800c9de:	f8b1 a000 	ldrh.w	sl, [r1]
 800c9e2:	f1ba 0f00 	cmp.w	sl, #0
 800c9e6:	d024      	beq.n	800ca32 <__multiply+0xf2>
 800c9e8:	f104 0e14 	add.w	lr, r4, #20
 800c9ec:	46a9      	mov	r9, r5
 800c9ee:	f04f 0c00 	mov.w	ip, #0
 800c9f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c9f6:	f8d9 3000 	ldr.w	r3, [r9]
 800c9fa:	fa1f fb87 	uxth.w	fp, r7
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	fb0a 330b 	mla	r3, sl, fp, r3
 800ca04:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ca08:	f8d9 7000 	ldr.w	r7, [r9]
 800ca0c:	4463      	add	r3, ip
 800ca0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ca12:	fb0a c70b 	mla	r7, sl, fp, ip
 800ca16:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ca20:	4572      	cmp	r2, lr
 800ca22:	f849 3b04 	str.w	r3, [r9], #4
 800ca26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ca2a:	d8e2      	bhi.n	800c9f2 <__multiply+0xb2>
 800ca2c:	9b01      	ldr	r3, [sp, #4]
 800ca2e:	f845 c003 	str.w	ip, [r5, r3]
 800ca32:	9b03      	ldr	r3, [sp, #12]
 800ca34:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ca38:	3104      	adds	r1, #4
 800ca3a:	f1b9 0f00 	cmp.w	r9, #0
 800ca3e:	d021      	beq.n	800ca84 <__multiply+0x144>
 800ca40:	682b      	ldr	r3, [r5, #0]
 800ca42:	f104 0c14 	add.w	ip, r4, #20
 800ca46:	46ae      	mov	lr, r5
 800ca48:	f04f 0a00 	mov.w	sl, #0
 800ca4c:	f8bc b000 	ldrh.w	fp, [ip]
 800ca50:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ca54:	fb09 770b 	mla	r7, r9, fp, r7
 800ca58:	4457      	add	r7, sl
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ca60:	f84e 3b04 	str.w	r3, [lr], #4
 800ca64:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ca68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca6c:	f8be 3000 	ldrh.w	r3, [lr]
 800ca70:	fb09 330a 	mla	r3, r9, sl, r3
 800ca74:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ca78:	4562      	cmp	r2, ip
 800ca7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca7e:	d8e5      	bhi.n	800ca4c <__multiply+0x10c>
 800ca80:	9f01      	ldr	r7, [sp, #4]
 800ca82:	51eb      	str	r3, [r5, r7]
 800ca84:	3504      	adds	r5, #4
 800ca86:	e799      	b.n	800c9bc <__multiply+0x7c>
 800ca88:	3e01      	subs	r6, #1
 800ca8a:	e79b      	b.n	800c9c4 <__multiply+0x84>
 800ca8c:	0800f00d 	.word	0x0800f00d
 800ca90:	0800f01e 	.word	0x0800f01e

0800ca94 <__pow5mult>:
 800ca94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca98:	4615      	mov	r5, r2
 800ca9a:	f012 0203 	ands.w	r2, r2, #3
 800ca9e:	4607      	mov	r7, r0
 800caa0:	460e      	mov	r6, r1
 800caa2:	d007      	beq.n	800cab4 <__pow5mult+0x20>
 800caa4:	4c25      	ldr	r4, [pc, #148]	@ (800cb3c <__pow5mult+0xa8>)
 800caa6:	3a01      	subs	r2, #1
 800caa8:	2300      	movs	r3, #0
 800caaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800caae:	f7ff fe55 	bl	800c75c <__multadd>
 800cab2:	4606      	mov	r6, r0
 800cab4:	10ad      	asrs	r5, r5, #2
 800cab6:	d03d      	beq.n	800cb34 <__pow5mult+0xa0>
 800cab8:	69fc      	ldr	r4, [r7, #28]
 800caba:	b97c      	cbnz	r4, 800cadc <__pow5mult+0x48>
 800cabc:	2010      	movs	r0, #16
 800cabe:	f7ff fd35 	bl	800c52c <malloc>
 800cac2:	4602      	mov	r2, r0
 800cac4:	61f8      	str	r0, [r7, #28]
 800cac6:	b928      	cbnz	r0, 800cad4 <__pow5mult+0x40>
 800cac8:	4b1d      	ldr	r3, [pc, #116]	@ (800cb40 <__pow5mult+0xac>)
 800caca:	481e      	ldr	r0, [pc, #120]	@ (800cb44 <__pow5mult+0xb0>)
 800cacc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cad0:	f001 fd26 	bl	800e520 <__assert_func>
 800cad4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cad8:	6004      	str	r4, [r0, #0]
 800cada:	60c4      	str	r4, [r0, #12]
 800cadc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cae0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cae4:	b94c      	cbnz	r4, 800cafa <__pow5mult+0x66>
 800cae6:	f240 2171 	movw	r1, #625	@ 0x271
 800caea:	4638      	mov	r0, r7
 800caec:	f7ff ff12 	bl	800c914 <__i2b>
 800caf0:	2300      	movs	r3, #0
 800caf2:	f8c8 0008 	str.w	r0, [r8, #8]
 800caf6:	4604      	mov	r4, r0
 800caf8:	6003      	str	r3, [r0, #0]
 800cafa:	f04f 0900 	mov.w	r9, #0
 800cafe:	07eb      	lsls	r3, r5, #31
 800cb00:	d50a      	bpl.n	800cb18 <__pow5mult+0x84>
 800cb02:	4631      	mov	r1, r6
 800cb04:	4622      	mov	r2, r4
 800cb06:	4638      	mov	r0, r7
 800cb08:	f7ff ff1a 	bl	800c940 <__multiply>
 800cb0c:	4631      	mov	r1, r6
 800cb0e:	4680      	mov	r8, r0
 800cb10:	4638      	mov	r0, r7
 800cb12:	f7ff fe01 	bl	800c718 <_Bfree>
 800cb16:	4646      	mov	r6, r8
 800cb18:	106d      	asrs	r5, r5, #1
 800cb1a:	d00b      	beq.n	800cb34 <__pow5mult+0xa0>
 800cb1c:	6820      	ldr	r0, [r4, #0]
 800cb1e:	b938      	cbnz	r0, 800cb30 <__pow5mult+0x9c>
 800cb20:	4622      	mov	r2, r4
 800cb22:	4621      	mov	r1, r4
 800cb24:	4638      	mov	r0, r7
 800cb26:	f7ff ff0b 	bl	800c940 <__multiply>
 800cb2a:	6020      	str	r0, [r4, #0]
 800cb2c:	f8c0 9000 	str.w	r9, [r0]
 800cb30:	4604      	mov	r4, r0
 800cb32:	e7e4      	b.n	800cafe <__pow5mult+0x6a>
 800cb34:	4630      	mov	r0, r6
 800cb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb3a:	bf00      	nop
 800cb3c:	0800f078 	.word	0x0800f078
 800cb40:	0800ef9e 	.word	0x0800ef9e
 800cb44:	0800f01e 	.word	0x0800f01e

0800cb48 <__lshift>:
 800cb48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb4c:	460c      	mov	r4, r1
 800cb4e:	6849      	ldr	r1, [r1, #4]
 800cb50:	6923      	ldr	r3, [r4, #16]
 800cb52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb56:	68a3      	ldr	r3, [r4, #8]
 800cb58:	4607      	mov	r7, r0
 800cb5a:	4691      	mov	r9, r2
 800cb5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb60:	f108 0601 	add.w	r6, r8, #1
 800cb64:	42b3      	cmp	r3, r6
 800cb66:	db0b      	blt.n	800cb80 <__lshift+0x38>
 800cb68:	4638      	mov	r0, r7
 800cb6a:	f7ff fd95 	bl	800c698 <_Balloc>
 800cb6e:	4605      	mov	r5, r0
 800cb70:	b948      	cbnz	r0, 800cb86 <__lshift+0x3e>
 800cb72:	4602      	mov	r2, r0
 800cb74:	4b28      	ldr	r3, [pc, #160]	@ (800cc18 <__lshift+0xd0>)
 800cb76:	4829      	ldr	r0, [pc, #164]	@ (800cc1c <__lshift+0xd4>)
 800cb78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cb7c:	f001 fcd0 	bl	800e520 <__assert_func>
 800cb80:	3101      	adds	r1, #1
 800cb82:	005b      	lsls	r3, r3, #1
 800cb84:	e7ee      	b.n	800cb64 <__lshift+0x1c>
 800cb86:	2300      	movs	r3, #0
 800cb88:	f100 0114 	add.w	r1, r0, #20
 800cb8c:	f100 0210 	add.w	r2, r0, #16
 800cb90:	4618      	mov	r0, r3
 800cb92:	4553      	cmp	r3, sl
 800cb94:	db33      	blt.n	800cbfe <__lshift+0xb6>
 800cb96:	6920      	ldr	r0, [r4, #16]
 800cb98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb9c:	f104 0314 	add.w	r3, r4, #20
 800cba0:	f019 091f 	ands.w	r9, r9, #31
 800cba4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cba8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cbac:	d02b      	beq.n	800cc06 <__lshift+0xbe>
 800cbae:	f1c9 0e20 	rsb	lr, r9, #32
 800cbb2:	468a      	mov	sl, r1
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	6818      	ldr	r0, [r3, #0]
 800cbb8:	fa00 f009 	lsl.w	r0, r0, r9
 800cbbc:	4310      	orrs	r0, r2
 800cbbe:	f84a 0b04 	str.w	r0, [sl], #4
 800cbc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbc6:	459c      	cmp	ip, r3
 800cbc8:	fa22 f20e 	lsr.w	r2, r2, lr
 800cbcc:	d8f3      	bhi.n	800cbb6 <__lshift+0x6e>
 800cbce:	ebac 0304 	sub.w	r3, ip, r4
 800cbd2:	3b15      	subs	r3, #21
 800cbd4:	f023 0303 	bic.w	r3, r3, #3
 800cbd8:	3304      	adds	r3, #4
 800cbda:	f104 0015 	add.w	r0, r4, #21
 800cbde:	4584      	cmp	ip, r0
 800cbe0:	bf38      	it	cc
 800cbe2:	2304      	movcc	r3, #4
 800cbe4:	50ca      	str	r2, [r1, r3]
 800cbe6:	b10a      	cbz	r2, 800cbec <__lshift+0xa4>
 800cbe8:	f108 0602 	add.w	r6, r8, #2
 800cbec:	3e01      	subs	r6, #1
 800cbee:	4638      	mov	r0, r7
 800cbf0:	612e      	str	r6, [r5, #16]
 800cbf2:	4621      	mov	r1, r4
 800cbf4:	f7ff fd90 	bl	800c718 <_Bfree>
 800cbf8:	4628      	mov	r0, r5
 800cbfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbfe:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc02:	3301      	adds	r3, #1
 800cc04:	e7c5      	b.n	800cb92 <__lshift+0x4a>
 800cc06:	3904      	subs	r1, #4
 800cc08:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc0c:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc10:	459c      	cmp	ip, r3
 800cc12:	d8f9      	bhi.n	800cc08 <__lshift+0xc0>
 800cc14:	e7ea      	b.n	800cbec <__lshift+0xa4>
 800cc16:	bf00      	nop
 800cc18:	0800f00d 	.word	0x0800f00d
 800cc1c:	0800f01e 	.word	0x0800f01e

0800cc20 <__mcmp>:
 800cc20:	690a      	ldr	r2, [r1, #16]
 800cc22:	4603      	mov	r3, r0
 800cc24:	6900      	ldr	r0, [r0, #16]
 800cc26:	1a80      	subs	r0, r0, r2
 800cc28:	b530      	push	{r4, r5, lr}
 800cc2a:	d10e      	bne.n	800cc4a <__mcmp+0x2a>
 800cc2c:	3314      	adds	r3, #20
 800cc2e:	3114      	adds	r1, #20
 800cc30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cc34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cc38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cc3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cc40:	4295      	cmp	r5, r2
 800cc42:	d003      	beq.n	800cc4c <__mcmp+0x2c>
 800cc44:	d205      	bcs.n	800cc52 <__mcmp+0x32>
 800cc46:	f04f 30ff 	mov.w	r0, #4294967295
 800cc4a:	bd30      	pop	{r4, r5, pc}
 800cc4c:	42a3      	cmp	r3, r4
 800cc4e:	d3f3      	bcc.n	800cc38 <__mcmp+0x18>
 800cc50:	e7fb      	b.n	800cc4a <__mcmp+0x2a>
 800cc52:	2001      	movs	r0, #1
 800cc54:	e7f9      	b.n	800cc4a <__mcmp+0x2a>
	...

0800cc58 <__mdiff>:
 800cc58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5c:	4689      	mov	r9, r1
 800cc5e:	4606      	mov	r6, r0
 800cc60:	4611      	mov	r1, r2
 800cc62:	4648      	mov	r0, r9
 800cc64:	4614      	mov	r4, r2
 800cc66:	f7ff ffdb 	bl	800cc20 <__mcmp>
 800cc6a:	1e05      	subs	r5, r0, #0
 800cc6c:	d112      	bne.n	800cc94 <__mdiff+0x3c>
 800cc6e:	4629      	mov	r1, r5
 800cc70:	4630      	mov	r0, r6
 800cc72:	f7ff fd11 	bl	800c698 <_Balloc>
 800cc76:	4602      	mov	r2, r0
 800cc78:	b928      	cbnz	r0, 800cc86 <__mdiff+0x2e>
 800cc7a:	4b3f      	ldr	r3, [pc, #252]	@ (800cd78 <__mdiff+0x120>)
 800cc7c:	f240 2137 	movw	r1, #567	@ 0x237
 800cc80:	483e      	ldr	r0, [pc, #248]	@ (800cd7c <__mdiff+0x124>)
 800cc82:	f001 fc4d 	bl	800e520 <__assert_func>
 800cc86:	2301      	movs	r3, #1
 800cc88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc8c:	4610      	mov	r0, r2
 800cc8e:	b003      	add	sp, #12
 800cc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc94:	bfbc      	itt	lt
 800cc96:	464b      	movlt	r3, r9
 800cc98:	46a1      	movlt	r9, r4
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cca0:	bfba      	itte	lt
 800cca2:	461c      	movlt	r4, r3
 800cca4:	2501      	movlt	r5, #1
 800cca6:	2500      	movge	r5, #0
 800cca8:	f7ff fcf6 	bl	800c698 <_Balloc>
 800ccac:	4602      	mov	r2, r0
 800ccae:	b918      	cbnz	r0, 800ccb8 <__mdiff+0x60>
 800ccb0:	4b31      	ldr	r3, [pc, #196]	@ (800cd78 <__mdiff+0x120>)
 800ccb2:	f240 2145 	movw	r1, #581	@ 0x245
 800ccb6:	e7e3      	b.n	800cc80 <__mdiff+0x28>
 800ccb8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ccbc:	6926      	ldr	r6, [r4, #16]
 800ccbe:	60c5      	str	r5, [r0, #12]
 800ccc0:	f109 0310 	add.w	r3, r9, #16
 800ccc4:	f109 0514 	add.w	r5, r9, #20
 800ccc8:	f104 0e14 	add.w	lr, r4, #20
 800cccc:	f100 0b14 	add.w	fp, r0, #20
 800ccd0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ccd4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ccd8:	9301      	str	r3, [sp, #4]
 800ccda:	46d9      	mov	r9, fp
 800ccdc:	f04f 0c00 	mov.w	ip, #0
 800cce0:	9b01      	ldr	r3, [sp, #4]
 800cce2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cce6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ccea:	9301      	str	r3, [sp, #4]
 800ccec:	fa1f f38a 	uxth.w	r3, sl
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	b283      	uxth	r3, r0
 800ccf4:	1acb      	subs	r3, r1, r3
 800ccf6:	0c00      	lsrs	r0, r0, #16
 800ccf8:	4463      	add	r3, ip
 800ccfa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ccfe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cd08:	4576      	cmp	r6, lr
 800cd0a:	f849 3b04 	str.w	r3, [r9], #4
 800cd0e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd12:	d8e5      	bhi.n	800cce0 <__mdiff+0x88>
 800cd14:	1b33      	subs	r3, r6, r4
 800cd16:	3b15      	subs	r3, #21
 800cd18:	f023 0303 	bic.w	r3, r3, #3
 800cd1c:	3415      	adds	r4, #21
 800cd1e:	3304      	adds	r3, #4
 800cd20:	42a6      	cmp	r6, r4
 800cd22:	bf38      	it	cc
 800cd24:	2304      	movcc	r3, #4
 800cd26:	441d      	add	r5, r3
 800cd28:	445b      	add	r3, fp
 800cd2a:	461e      	mov	r6, r3
 800cd2c:	462c      	mov	r4, r5
 800cd2e:	4544      	cmp	r4, r8
 800cd30:	d30e      	bcc.n	800cd50 <__mdiff+0xf8>
 800cd32:	f108 0103 	add.w	r1, r8, #3
 800cd36:	1b49      	subs	r1, r1, r5
 800cd38:	f021 0103 	bic.w	r1, r1, #3
 800cd3c:	3d03      	subs	r5, #3
 800cd3e:	45a8      	cmp	r8, r5
 800cd40:	bf38      	it	cc
 800cd42:	2100      	movcc	r1, #0
 800cd44:	440b      	add	r3, r1
 800cd46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd4a:	b191      	cbz	r1, 800cd72 <__mdiff+0x11a>
 800cd4c:	6117      	str	r7, [r2, #16]
 800cd4e:	e79d      	b.n	800cc8c <__mdiff+0x34>
 800cd50:	f854 1b04 	ldr.w	r1, [r4], #4
 800cd54:	46e6      	mov	lr, ip
 800cd56:	0c08      	lsrs	r0, r1, #16
 800cd58:	fa1c fc81 	uxtah	ip, ip, r1
 800cd5c:	4471      	add	r1, lr
 800cd5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cd62:	b289      	uxth	r1, r1
 800cd64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cd68:	f846 1b04 	str.w	r1, [r6], #4
 800cd6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd70:	e7dd      	b.n	800cd2e <__mdiff+0xd6>
 800cd72:	3f01      	subs	r7, #1
 800cd74:	e7e7      	b.n	800cd46 <__mdiff+0xee>
 800cd76:	bf00      	nop
 800cd78:	0800f00d 	.word	0x0800f00d
 800cd7c:	0800f01e 	.word	0x0800f01e

0800cd80 <__ulp>:
 800cd80:	b082      	sub	sp, #8
 800cd82:	ed8d 0b00 	vstr	d0, [sp]
 800cd86:	9a01      	ldr	r2, [sp, #4]
 800cd88:	4b0f      	ldr	r3, [pc, #60]	@ (800cdc8 <__ulp+0x48>)
 800cd8a:	4013      	ands	r3, r2
 800cd8c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	dc08      	bgt.n	800cda6 <__ulp+0x26>
 800cd94:	425b      	negs	r3, r3
 800cd96:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cd9a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cd9e:	da04      	bge.n	800cdaa <__ulp+0x2a>
 800cda0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cda4:	4113      	asrs	r3, r2
 800cda6:	2200      	movs	r2, #0
 800cda8:	e008      	b.n	800cdbc <__ulp+0x3c>
 800cdaa:	f1a2 0314 	sub.w	r3, r2, #20
 800cdae:	2b1e      	cmp	r3, #30
 800cdb0:	bfda      	itte	le
 800cdb2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cdb6:	40da      	lsrle	r2, r3
 800cdb8:	2201      	movgt	r2, #1
 800cdba:	2300      	movs	r3, #0
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	4610      	mov	r0, r2
 800cdc0:	ec41 0b10 	vmov	d0, r0, r1
 800cdc4:	b002      	add	sp, #8
 800cdc6:	4770      	bx	lr
 800cdc8:	7ff00000 	.word	0x7ff00000

0800cdcc <__b2d>:
 800cdcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd0:	6906      	ldr	r6, [r0, #16]
 800cdd2:	f100 0814 	add.w	r8, r0, #20
 800cdd6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cdda:	1f37      	subs	r7, r6, #4
 800cddc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cde0:	4610      	mov	r0, r2
 800cde2:	f7ff fd4b 	bl	800c87c <__hi0bits>
 800cde6:	f1c0 0320 	rsb	r3, r0, #32
 800cdea:	280a      	cmp	r0, #10
 800cdec:	600b      	str	r3, [r1, #0]
 800cdee:	491b      	ldr	r1, [pc, #108]	@ (800ce5c <__b2d+0x90>)
 800cdf0:	dc15      	bgt.n	800ce1e <__b2d+0x52>
 800cdf2:	f1c0 0c0b 	rsb	ip, r0, #11
 800cdf6:	fa22 f30c 	lsr.w	r3, r2, ip
 800cdfa:	45b8      	cmp	r8, r7
 800cdfc:	ea43 0501 	orr.w	r5, r3, r1
 800ce00:	bf34      	ite	cc
 800ce02:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ce06:	2300      	movcs	r3, #0
 800ce08:	3015      	adds	r0, #21
 800ce0a:	fa02 f000 	lsl.w	r0, r2, r0
 800ce0e:	fa23 f30c 	lsr.w	r3, r3, ip
 800ce12:	4303      	orrs	r3, r0
 800ce14:	461c      	mov	r4, r3
 800ce16:	ec45 4b10 	vmov	d0, r4, r5
 800ce1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce1e:	45b8      	cmp	r8, r7
 800ce20:	bf3a      	itte	cc
 800ce22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ce26:	f1a6 0708 	subcc.w	r7, r6, #8
 800ce2a:	2300      	movcs	r3, #0
 800ce2c:	380b      	subs	r0, #11
 800ce2e:	d012      	beq.n	800ce56 <__b2d+0x8a>
 800ce30:	f1c0 0120 	rsb	r1, r0, #32
 800ce34:	fa23 f401 	lsr.w	r4, r3, r1
 800ce38:	4082      	lsls	r2, r0
 800ce3a:	4322      	orrs	r2, r4
 800ce3c:	4547      	cmp	r7, r8
 800ce3e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ce42:	bf8c      	ite	hi
 800ce44:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ce48:	2200      	movls	r2, #0
 800ce4a:	4083      	lsls	r3, r0
 800ce4c:	40ca      	lsrs	r2, r1
 800ce4e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ce52:	4313      	orrs	r3, r2
 800ce54:	e7de      	b.n	800ce14 <__b2d+0x48>
 800ce56:	ea42 0501 	orr.w	r5, r2, r1
 800ce5a:	e7db      	b.n	800ce14 <__b2d+0x48>
 800ce5c:	3ff00000 	.word	0x3ff00000

0800ce60 <__d2b>:
 800ce60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce64:	460f      	mov	r7, r1
 800ce66:	2101      	movs	r1, #1
 800ce68:	ec59 8b10 	vmov	r8, r9, d0
 800ce6c:	4616      	mov	r6, r2
 800ce6e:	f7ff fc13 	bl	800c698 <_Balloc>
 800ce72:	4604      	mov	r4, r0
 800ce74:	b930      	cbnz	r0, 800ce84 <__d2b+0x24>
 800ce76:	4602      	mov	r2, r0
 800ce78:	4b23      	ldr	r3, [pc, #140]	@ (800cf08 <__d2b+0xa8>)
 800ce7a:	4824      	ldr	r0, [pc, #144]	@ (800cf0c <__d2b+0xac>)
 800ce7c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ce80:	f001 fb4e 	bl	800e520 <__assert_func>
 800ce84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ce88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce8c:	b10d      	cbz	r5, 800ce92 <__d2b+0x32>
 800ce8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ce92:	9301      	str	r3, [sp, #4]
 800ce94:	f1b8 0300 	subs.w	r3, r8, #0
 800ce98:	d023      	beq.n	800cee2 <__d2b+0x82>
 800ce9a:	4668      	mov	r0, sp
 800ce9c:	9300      	str	r3, [sp, #0]
 800ce9e:	f7ff fd0c 	bl	800c8ba <__lo0bits>
 800cea2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cea6:	b1d0      	cbz	r0, 800cede <__d2b+0x7e>
 800cea8:	f1c0 0320 	rsb	r3, r0, #32
 800ceac:	fa02 f303 	lsl.w	r3, r2, r3
 800ceb0:	430b      	orrs	r3, r1
 800ceb2:	40c2      	lsrs	r2, r0
 800ceb4:	6163      	str	r3, [r4, #20]
 800ceb6:	9201      	str	r2, [sp, #4]
 800ceb8:	9b01      	ldr	r3, [sp, #4]
 800ceba:	61a3      	str	r3, [r4, #24]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	bf0c      	ite	eq
 800cec0:	2201      	moveq	r2, #1
 800cec2:	2202      	movne	r2, #2
 800cec4:	6122      	str	r2, [r4, #16]
 800cec6:	b1a5      	cbz	r5, 800cef2 <__d2b+0x92>
 800cec8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cecc:	4405      	add	r5, r0
 800cece:	603d      	str	r5, [r7, #0]
 800ced0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ced4:	6030      	str	r0, [r6, #0]
 800ced6:	4620      	mov	r0, r4
 800ced8:	b003      	add	sp, #12
 800ceda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cede:	6161      	str	r1, [r4, #20]
 800cee0:	e7ea      	b.n	800ceb8 <__d2b+0x58>
 800cee2:	a801      	add	r0, sp, #4
 800cee4:	f7ff fce9 	bl	800c8ba <__lo0bits>
 800cee8:	9b01      	ldr	r3, [sp, #4]
 800ceea:	6163      	str	r3, [r4, #20]
 800ceec:	3020      	adds	r0, #32
 800ceee:	2201      	movs	r2, #1
 800cef0:	e7e8      	b.n	800cec4 <__d2b+0x64>
 800cef2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cef6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cefa:	6038      	str	r0, [r7, #0]
 800cefc:	6918      	ldr	r0, [r3, #16]
 800cefe:	f7ff fcbd 	bl	800c87c <__hi0bits>
 800cf02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf06:	e7e5      	b.n	800ced4 <__d2b+0x74>
 800cf08:	0800f00d 	.word	0x0800f00d
 800cf0c:	0800f01e 	.word	0x0800f01e

0800cf10 <__ratio>:
 800cf10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf14:	b085      	sub	sp, #20
 800cf16:	e9cd 1000 	strd	r1, r0, [sp]
 800cf1a:	a902      	add	r1, sp, #8
 800cf1c:	f7ff ff56 	bl	800cdcc <__b2d>
 800cf20:	9800      	ldr	r0, [sp, #0]
 800cf22:	a903      	add	r1, sp, #12
 800cf24:	ec55 4b10 	vmov	r4, r5, d0
 800cf28:	f7ff ff50 	bl	800cdcc <__b2d>
 800cf2c:	9b01      	ldr	r3, [sp, #4]
 800cf2e:	6919      	ldr	r1, [r3, #16]
 800cf30:	9b00      	ldr	r3, [sp, #0]
 800cf32:	691b      	ldr	r3, [r3, #16]
 800cf34:	1ac9      	subs	r1, r1, r3
 800cf36:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cf3a:	1a9b      	subs	r3, r3, r2
 800cf3c:	ec5b ab10 	vmov	sl, fp, d0
 800cf40:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	bfce      	itee	gt
 800cf48:	462a      	movgt	r2, r5
 800cf4a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cf4e:	465a      	movle	r2, fp
 800cf50:	462f      	mov	r7, r5
 800cf52:	46d9      	mov	r9, fp
 800cf54:	bfcc      	ite	gt
 800cf56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cf5a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cf5e:	464b      	mov	r3, r9
 800cf60:	4652      	mov	r2, sl
 800cf62:	4620      	mov	r0, r4
 800cf64:	4639      	mov	r1, r7
 800cf66:	f7f3 fc99 	bl	800089c <__aeabi_ddiv>
 800cf6a:	ec41 0b10 	vmov	d0, r0, r1
 800cf6e:	b005      	add	sp, #20
 800cf70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf74 <__copybits>:
 800cf74:	3901      	subs	r1, #1
 800cf76:	b570      	push	{r4, r5, r6, lr}
 800cf78:	1149      	asrs	r1, r1, #5
 800cf7a:	6914      	ldr	r4, [r2, #16]
 800cf7c:	3101      	adds	r1, #1
 800cf7e:	f102 0314 	add.w	r3, r2, #20
 800cf82:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cf86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cf8a:	1f05      	subs	r5, r0, #4
 800cf8c:	42a3      	cmp	r3, r4
 800cf8e:	d30c      	bcc.n	800cfaa <__copybits+0x36>
 800cf90:	1aa3      	subs	r3, r4, r2
 800cf92:	3b11      	subs	r3, #17
 800cf94:	f023 0303 	bic.w	r3, r3, #3
 800cf98:	3211      	adds	r2, #17
 800cf9a:	42a2      	cmp	r2, r4
 800cf9c:	bf88      	it	hi
 800cf9e:	2300      	movhi	r3, #0
 800cfa0:	4418      	add	r0, r3
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	4288      	cmp	r0, r1
 800cfa6:	d305      	bcc.n	800cfb4 <__copybits+0x40>
 800cfa8:	bd70      	pop	{r4, r5, r6, pc}
 800cfaa:	f853 6b04 	ldr.w	r6, [r3], #4
 800cfae:	f845 6f04 	str.w	r6, [r5, #4]!
 800cfb2:	e7eb      	b.n	800cf8c <__copybits+0x18>
 800cfb4:	f840 3b04 	str.w	r3, [r0], #4
 800cfb8:	e7f4      	b.n	800cfa4 <__copybits+0x30>

0800cfba <__any_on>:
 800cfba:	f100 0214 	add.w	r2, r0, #20
 800cfbe:	6900      	ldr	r0, [r0, #16]
 800cfc0:	114b      	asrs	r3, r1, #5
 800cfc2:	4298      	cmp	r0, r3
 800cfc4:	b510      	push	{r4, lr}
 800cfc6:	db11      	blt.n	800cfec <__any_on+0x32>
 800cfc8:	dd0a      	ble.n	800cfe0 <__any_on+0x26>
 800cfca:	f011 011f 	ands.w	r1, r1, #31
 800cfce:	d007      	beq.n	800cfe0 <__any_on+0x26>
 800cfd0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cfd4:	fa24 f001 	lsr.w	r0, r4, r1
 800cfd8:	fa00 f101 	lsl.w	r1, r0, r1
 800cfdc:	428c      	cmp	r4, r1
 800cfde:	d10b      	bne.n	800cff8 <__any_on+0x3e>
 800cfe0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d803      	bhi.n	800cff0 <__any_on+0x36>
 800cfe8:	2000      	movs	r0, #0
 800cfea:	bd10      	pop	{r4, pc}
 800cfec:	4603      	mov	r3, r0
 800cfee:	e7f7      	b.n	800cfe0 <__any_on+0x26>
 800cff0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cff4:	2900      	cmp	r1, #0
 800cff6:	d0f5      	beq.n	800cfe4 <__any_on+0x2a>
 800cff8:	2001      	movs	r0, #1
 800cffa:	e7f6      	b.n	800cfea <__any_on+0x30>

0800cffc <sulp>:
 800cffc:	b570      	push	{r4, r5, r6, lr}
 800cffe:	4604      	mov	r4, r0
 800d000:	460d      	mov	r5, r1
 800d002:	ec45 4b10 	vmov	d0, r4, r5
 800d006:	4616      	mov	r6, r2
 800d008:	f7ff feba 	bl	800cd80 <__ulp>
 800d00c:	ec51 0b10 	vmov	r0, r1, d0
 800d010:	b17e      	cbz	r6, 800d032 <sulp+0x36>
 800d012:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d016:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	dd09      	ble.n	800d032 <sulp+0x36>
 800d01e:	051b      	lsls	r3, r3, #20
 800d020:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d024:	2400      	movs	r4, #0
 800d026:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d02a:	4622      	mov	r2, r4
 800d02c:	462b      	mov	r3, r5
 800d02e:	f7f3 fb0b 	bl	8000648 <__aeabi_dmul>
 800d032:	ec41 0b10 	vmov	d0, r0, r1
 800d036:	bd70      	pop	{r4, r5, r6, pc}

0800d038 <_strtod_l>:
 800d038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d03c:	b09f      	sub	sp, #124	@ 0x7c
 800d03e:	460c      	mov	r4, r1
 800d040:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d042:	2200      	movs	r2, #0
 800d044:	921a      	str	r2, [sp, #104]	@ 0x68
 800d046:	9005      	str	r0, [sp, #20]
 800d048:	f04f 0a00 	mov.w	sl, #0
 800d04c:	f04f 0b00 	mov.w	fp, #0
 800d050:	460a      	mov	r2, r1
 800d052:	9219      	str	r2, [sp, #100]	@ 0x64
 800d054:	7811      	ldrb	r1, [r2, #0]
 800d056:	292b      	cmp	r1, #43	@ 0x2b
 800d058:	d04a      	beq.n	800d0f0 <_strtod_l+0xb8>
 800d05a:	d838      	bhi.n	800d0ce <_strtod_l+0x96>
 800d05c:	290d      	cmp	r1, #13
 800d05e:	d832      	bhi.n	800d0c6 <_strtod_l+0x8e>
 800d060:	2908      	cmp	r1, #8
 800d062:	d832      	bhi.n	800d0ca <_strtod_l+0x92>
 800d064:	2900      	cmp	r1, #0
 800d066:	d03b      	beq.n	800d0e0 <_strtod_l+0xa8>
 800d068:	2200      	movs	r2, #0
 800d06a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d06c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d06e:	782a      	ldrb	r2, [r5, #0]
 800d070:	2a30      	cmp	r2, #48	@ 0x30
 800d072:	f040 80b3 	bne.w	800d1dc <_strtod_l+0x1a4>
 800d076:	786a      	ldrb	r2, [r5, #1]
 800d078:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d07c:	2a58      	cmp	r2, #88	@ 0x58
 800d07e:	d16e      	bne.n	800d15e <_strtod_l+0x126>
 800d080:	9302      	str	r3, [sp, #8]
 800d082:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d084:	9301      	str	r3, [sp, #4]
 800d086:	ab1a      	add	r3, sp, #104	@ 0x68
 800d088:	9300      	str	r3, [sp, #0]
 800d08a:	4a8e      	ldr	r2, [pc, #568]	@ (800d2c4 <_strtod_l+0x28c>)
 800d08c:	9805      	ldr	r0, [sp, #20]
 800d08e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d090:	a919      	add	r1, sp, #100	@ 0x64
 800d092:	f001 fadf 	bl	800e654 <__gethex>
 800d096:	f010 060f 	ands.w	r6, r0, #15
 800d09a:	4604      	mov	r4, r0
 800d09c:	d005      	beq.n	800d0aa <_strtod_l+0x72>
 800d09e:	2e06      	cmp	r6, #6
 800d0a0:	d128      	bne.n	800d0f4 <_strtod_l+0xbc>
 800d0a2:	3501      	adds	r5, #1
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	9519      	str	r5, [sp, #100]	@ 0x64
 800d0a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	f040 858e 	bne.w	800dbce <_strtod_l+0xb96>
 800d0b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0b4:	b1cb      	cbz	r3, 800d0ea <_strtod_l+0xb2>
 800d0b6:	4652      	mov	r2, sl
 800d0b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d0bc:	ec43 2b10 	vmov	d0, r2, r3
 800d0c0:	b01f      	add	sp, #124	@ 0x7c
 800d0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0c6:	2920      	cmp	r1, #32
 800d0c8:	d1ce      	bne.n	800d068 <_strtod_l+0x30>
 800d0ca:	3201      	adds	r2, #1
 800d0cc:	e7c1      	b.n	800d052 <_strtod_l+0x1a>
 800d0ce:	292d      	cmp	r1, #45	@ 0x2d
 800d0d0:	d1ca      	bne.n	800d068 <_strtod_l+0x30>
 800d0d2:	2101      	movs	r1, #1
 800d0d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d0d6:	1c51      	adds	r1, r2, #1
 800d0d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800d0da:	7852      	ldrb	r2, [r2, #1]
 800d0dc:	2a00      	cmp	r2, #0
 800d0de:	d1c5      	bne.n	800d06c <_strtod_l+0x34>
 800d0e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d0e2:	9419      	str	r4, [sp, #100]	@ 0x64
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	f040 8570 	bne.w	800dbca <_strtod_l+0xb92>
 800d0ea:	4652      	mov	r2, sl
 800d0ec:	465b      	mov	r3, fp
 800d0ee:	e7e5      	b.n	800d0bc <_strtod_l+0x84>
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	e7ef      	b.n	800d0d4 <_strtod_l+0x9c>
 800d0f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d0f6:	b13a      	cbz	r2, 800d108 <_strtod_l+0xd0>
 800d0f8:	2135      	movs	r1, #53	@ 0x35
 800d0fa:	a81c      	add	r0, sp, #112	@ 0x70
 800d0fc:	f7ff ff3a 	bl	800cf74 <__copybits>
 800d100:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d102:	9805      	ldr	r0, [sp, #20]
 800d104:	f7ff fb08 	bl	800c718 <_Bfree>
 800d108:	3e01      	subs	r6, #1
 800d10a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d10c:	2e04      	cmp	r6, #4
 800d10e:	d806      	bhi.n	800d11e <_strtod_l+0xe6>
 800d110:	e8df f006 	tbb	[pc, r6]
 800d114:	201d0314 	.word	0x201d0314
 800d118:	14          	.byte	0x14
 800d119:	00          	.byte	0x00
 800d11a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d11e:	05e1      	lsls	r1, r4, #23
 800d120:	bf48      	it	mi
 800d122:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d126:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d12a:	0d1b      	lsrs	r3, r3, #20
 800d12c:	051b      	lsls	r3, r3, #20
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1bb      	bne.n	800d0aa <_strtod_l+0x72>
 800d132:	f7fe fb21 	bl	800b778 <__errno>
 800d136:	2322      	movs	r3, #34	@ 0x22
 800d138:	6003      	str	r3, [r0, #0]
 800d13a:	e7b6      	b.n	800d0aa <_strtod_l+0x72>
 800d13c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d140:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d144:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d148:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d14c:	e7e7      	b.n	800d11e <_strtod_l+0xe6>
 800d14e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d2cc <_strtod_l+0x294>
 800d152:	e7e4      	b.n	800d11e <_strtod_l+0xe6>
 800d154:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d158:	f04f 3aff 	mov.w	sl, #4294967295
 800d15c:	e7df      	b.n	800d11e <_strtod_l+0xe6>
 800d15e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d160:	1c5a      	adds	r2, r3, #1
 800d162:	9219      	str	r2, [sp, #100]	@ 0x64
 800d164:	785b      	ldrb	r3, [r3, #1]
 800d166:	2b30      	cmp	r3, #48	@ 0x30
 800d168:	d0f9      	beq.n	800d15e <_strtod_l+0x126>
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d09d      	beq.n	800d0aa <_strtod_l+0x72>
 800d16e:	2301      	movs	r3, #1
 800d170:	9309      	str	r3, [sp, #36]	@ 0x24
 800d172:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d174:	930c      	str	r3, [sp, #48]	@ 0x30
 800d176:	2300      	movs	r3, #0
 800d178:	9308      	str	r3, [sp, #32]
 800d17a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d17c:	461f      	mov	r7, r3
 800d17e:	220a      	movs	r2, #10
 800d180:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d182:	7805      	ldrb	r5, [r0, #0]
 800d184:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d188:	b2d9      	uxtb	r1, r3
 800d18a:	2909      	cmp	r1, #9
 800d18c:	d928      	bls.n	800d1e0 <_strtod_l+0x1a8>
 800d18e:	494e      	ldr	r1, [pc, #312]	@ (800d2c8 <_strtod_l+0x290>)
 800d190:	2201      	movs	r2, #1
 800d192:	f001 f979 	bl	800e488 <strncmp>
 800d196:	2800      	cmp	r0, #0
 800d198:	d032      	beq.n	800d200 <_strtod_l+0x1c8>
 800d19a:	2000      	movs	r0, #0
 800d19c:	462a      	mov	r2, r5
 800d19e:	4681      	mov	r9, r0
 800d1a0:	463d      	mov	r5, r7
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	2a65      	cmp	r2, #101	@ 0x65
 800d1a6:	d001      	beq.n	800d1ac <_strtod_l+0x174>
 800d1a8:	2a45      	cmp	r2, #69	@ 0x45
 800d1aa:	d114      	bne.n	800d1d6 <_strtod_l+0x19e>
 800d1ac:	b91d      	cbnz	r5, 800d1b6 <_strtod_l+0x17e>
 800d1ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1b0:	4302      	orrs	r2, r0
 800d1b2:	d095      	beq.n	800d0e0 <_strtod_l+0xa8>
 800d1b4:	2500      	movs	r5, #0
 800d1b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d1b8:	1c62      	adds	r2, r4, #1
 800d1ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800d1bc:	7862      	ldrb	r2, [r4, #1]
 800d1be:	2a2b      	cmp	r2, #43	@ 0x2b
 800d1c0:	d077      	beq.n	800d2b2 <_strtod_l+0x27a>
 800d1c2:	2a2d      	cmp	r2, #45	@ 0x2d
 800d1c4:	d07b      	beq.n	800d2be <_strtod_l+0x286>
 800d1c6:	f04f 0c00 	mov.w	ip, #0
 800d1ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d1ce:	2909      	cmp	r1, #9
 800d1d0:	f240 8082 	bls.w	800d2d8 <_strtod_l+0x2a0>
 800d1d4:	9419      	str	r4, [sp, #100]	@ 0x64
 800d1d6:	f04f 0800 	mov.w	r8, #0
 800d1da:	e0a2      	b.n	800d322 <_strtod_l+0x2ea>
 800d1dc:	2300      	movs	r3, #0
 800d1de:	e7c7      	b.n	800d170 <_strtod_l+0x138>
 800d1e0:	2f08      	cmp	r7, #8
 800d1e2:	bfd5      	itete	le
 800d1e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d1e6:	9908      	ldrgt	r1, [sp, #32]
 800d1e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800d1ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d1f0:	f100 0001 	add.w	r0, r0, #1
 800d1f4:	bfd4      	ite	le
 800d1f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d1f8:	9308      	strgt	r3, [sp, #32]
 800d1fa:	3701      	adds	r7, #1
 800d1fc:	9019      	str	r0, [sp, #100]	@ 0x64
 800d1fe:	e7bf      	b.n	800d180 <_strtod_l+0x148>
 800d200:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d202:	1c5a      	adds	r2, r3, #1
 800d204:	9219      	str	r2, [sp, #100]	@ 0x64
 800d206:	785a      	ldrb	r2, [r3, #1]
 800d208:	b37f      	cbz	r7, 800d26a <_strtod_l+0x232>
 800d20a:	4681      	mov	r9, r0
 800d20c:	463d      	mov	r5, r7
 800d20e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d212:	2b09      	cmp	r3, #9
 800d214:	d912      	bls.n	800d23c <_strtod_l+0x204>
 800d216:	2301      	movs	r3, #1
 800d218:	e7c4      	b.n	800d1a4 <_strtod_l+0x16c>
 800d21a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d21c:	1c5a      	adds	r2, r3, #1
 800d21e:	9219      	str	r2, [sp, #100]	@ 0x64
 800d220:	785a      	ldrb	r2, [r3, #1]
 800d222:	3001      	adds	r0, #1
 800d224:	2a30      	cmp	r2, #48	@ 0x30
 800d226:	d0f8      	beq.n	800d21a <_strtod_l+0x1e2>
 800d228:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d22c:	2b08      	cmp	r3, #8
 800d22e:	f200 84d3 	bhi.w	800dbd8 <_strtod_l+0xba0>
 800d232:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d234:	930c      	str	r3, [sp, #48]	@ 0x30
 800d236:	4681      	mov	r9, r0
 800d238:	2000      	movs	r0, #0
 800d23a:	4605      	mov	r5, r0
 800d23c:	3a30      	subs	r2, #48	@ 0x30
 800d23e:	f100 0301 	add.w	r3, r0, #1
 800d242:	d02a      	beq.n	800d29a <_strtod_l+0x262>
 800d244:	4499      	add	r9, r3
 800d246:	eb00 0c05 	add.w	ip, r0, r5
 800d24a:	462b      	mov	r3, r5
 800d24c:	210a      	movs	r1, #10
 800d24e:	4563      	cmp	r3, ip
 800d250:	d10d      	bne.n	800d26e <_strtod_l+0x236>
 800d252:	1c69      	adds	r1, r5, #1
 800d254:	4401      	add	r1, r0
 800d256:	4428      	add	r0, r5
 800d258:	2808      	cmp	r0, #8
 800d25a:	dc16      	bgt.n	800d28a <_strtod_l+0x252>
 800d25c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d25e:	230a      	movs	r3, #10
 800d260:	fb03 2300 	mla	r3, r3, r0, r2
 800d264:	930a      	str	r3, [sp, #40]	@ 0x28
 800d266:	2300      	movs	r3, #0
 800d268:	e018      	b.n	800d29c <_strtod_l+0x264>
 800d26a:	4638      	mov	r0, r7
 800d26c:	e7da      	b.n	800d224 <_strtod_l+0x1ec>
 800d26e:	2b08      	cmp	r3, #8
 800d270:	f103 0301 	add.w	r3, r3, #1
 800d274:	dc03      	bgt.n	800d27e <_strtod_l+0x246>
 800d276:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d278:	434e      	muls	r6, r1
 800d27a:	960a      	str	r6, [sp, #40]	@ 0x28
 800d27c:	e7e7      	b.n	800d24e <_strtod_l+0x216>
 800d27e:	2b10      	cmp	r3, #16
 800d280:	bfde      	ittt	le
 800d282:	9e08      	ldrle	r6, [sp, #32]
 800d284:	434e      	mulle	r6, r1
 800d286:	9608      	strle	r6, [sp, #32]
 800d288:	e7e1      	b.n	800d24e <_strtod_l+0x216>
 800d28a:	280f      	cmp	r0, #15
 800d28c:	dceb      	bgt.n	800d266 <_strtod_l+0x22e>
 800d28e:	9808      	ldr	r0, [sp, #32]
 800d290:	230a      	movs	r3, #10
 800d292:	fb03 2300 	mla	r3, r3, r0, r2
 800d296:	9308      	str	r3, [sp, #32]
 800d298:	e7e5      	b.n	800d266 <_strtod_l+0x22e>
 800d29a:	4629      	mov	r1, r5
 800d29c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d29e:	1c50      	adds	r0, r2, #1
 800d2a0:	9019      	str	r0, [sp, #100]	@ 0x64
 800d2a2:	7852      	ldrb	r2, [r2, #1]
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	460d      	mov	r5, r1
 800d2a8:	e7b1      	b.n	800d20e <_strtod_l+0x1d6>
 800d2aa:	f04f 0900 	mov.w	r9, #0
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e77d      	b.n	800d1ae <_strtod_l+0x176>
 800d2b2:	f04f 0c00 	mov.w	ip, #0
 800d2b6:	1ca2      	adds	r2, r4, #2
 800d2b8:	9219      	str	r2, [sp, #100]	@ 0x64
 800d2ba:	78a2      	ldrb	r2, [r4, #2]
 800d2bc:	e785      	b.n	800d1ca <_strtod_l+0x192>
 800d2be:	f04f 0c01 	mov.w	ip, #1
 800d2c2:	e7f8      	b.n	800d2b6 <_strtod_l+0x27e>
 800d2c4:	0800f190 	.word	0x0800f190
 800d2c8:	0800f178 	.word	0x0800f178
 800d2cc:	7ff00000 	.word	0x7ff00000
 800d2d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d2d2:	1c51      	adds	r1, r2, #1
 800d2d4:	9119      	str	r1, [sp, #100]	@ 0x64
 800d2d6:	7852      	ldrb	r2, [r2, #1]
 800d2d8:	2a30      	cmp	r2, #48	@ 0x30
 800d2da:	d0f9      	beq.n	800d2d0 <_strtod_l+0x298>
 800d2dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d2e0:	2908      	cmp	r1, #8
 800d2e2:	f63f af78 	bhi.w	800d1d6 <_strtod_l+0x19e>
 800d2e6:	3a30      	subs	r2, #48	@ 0x30
 800d2e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d2ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d2ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d2ee:	f04f 080a 	mov.w	r8, #10
 800d2f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d2f4:	1c56      	adds	r6, r2, #1
 800d2f6:	9619      	str	r6, [sp, #100]	@ 0x64
 800d2f8:	7852      	ldrb	r2, [r2, #1]
 800d2fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d2fe:	f1be 0f09 	cmp.w	lr, #9
 800d302:	d939      	bls.n	800d378 <_strtod_l+0x340>
 800d304:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d306:	1a76      	subs	r6, r6, r1
 800d308:	2e08      	cmp	r6, #8
 800d30a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d30e:	dc03      	bgt.n	800d318 <_strtod_l+0x2e0>
 800d310:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d312:	4588      	cmp	r8, r1
 800d314:	bfa8      	it	ge
 800d316:	4688      	movge	r8, r1
 800d318:	f1bc 0f00 	cmp.w	ip, #0
 800d31c:	d001      	beq.n	800d322 <_strtod_l+0x2ea>
 800d31e:	f1c8 0800 	rsb	r8, r8, #0
 800d322:	2d00      	cmp	r5, #0
 800d324:	d14e      	bne.n	800d3c4 <_strtod_l+0x38c>
 800d326:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d328:	4308      	orrs	r0, r1
 800d32a:	f47f aebe 	bne.w	800d0aa <_strtod_l+0x72>
 800d32e:	2b00      	cmp	r3, #0
 800d330:	f47f aed6 	bne.w	800d0e0 <_strtod_l+0xa8>
 800d334:	2a69      	cmp	r2, #105	@ 0x69
 800d336:	d028      	beq.n	800d38a <_strtod_l+0x352>
 800d338:	dc25      	bgt.n	800d386 <_strtod_l+0x34e>
 800d33a:	2a49      	cmp	r2, #73	@ 0x49
 800d33c:	d025      	beq.n	800d38a <_strtod_l+0x352>
 800d33e:	2a4e      	cmp	r2, #78	@ 0x4e
 800d340:	f47f aece 	bne.w	800d0e0 <_strtod_l+0xa8>
 800d344:	499b      	ldr	r1, [pc, #620]	@ (800d5b4 <_strtod_l+0x57c>)
 800d346:	a819      	add	r0, sp, #100	@ 0x64
 800d348:	f001 fba6 	bl	800ea98 <__match>
 800d34c:	2800      	cmp	r0, #0
 800d34e:	f43f aec7 	beq.w	800d0e0 <_strtod_l+0xa8>
 800d352:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	2b28      	cmp	r3, #40	@ 0x28
 800d358:	d12e      	bne.n	800d3b8 <_strtod_l+0x380>
 800d35a:	4997      	ldr	r1, [pc, #604]	@ (800d5b8 <_strtod_l+0x580>)
 800d35c:	aa1c      	add	r2, sp, #112	@ 0x70
 800d35e:	a819      	add	r0, sp, #100	@ 0x64
 800d360:	f001 fbae 	bl	800eac0 <__hexnan>
 800d364:	2805      	cmp	r0, #5
 800d366:	d127      	bne.n	800d3b8 <_strtod_l+0x380>
 800d368:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d36a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d36e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d372:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d376:	e698      	b.n	800d0aa <_strtod_l+0x72>
 800d378:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d37a:	fb08 2101 	mla	r1, r8, r1, r2
 800d37e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d382:	920e      	str	r2, [sp, #56]	@ 0x38
 800d384:	e7b5      	b.n	800d2f2 <_strtod_l+0x2ba>
 800d386:	2a6e      	cmp	r2, #110	@ 0x6e
 800d388:	e7da      	b.n	800d340 <_strtod_l+0x308>
 800d38a:	498c      	ldr	r1, [pc, #560]	@ (800d5bc <_strtod_l+0x584>)
 800d38c:	a819      	add	r0, sp, #100	@ 0x64
 800d38e:	f001 fb83 	bl	800ea98 <__match>
 800d392:	2800      	cmp	r0, #0
 800d394:	f43f aea4 	beq.w	800d0e0 <_strtod_l+0xa8>
 800d398:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d39a:	4989      	ldr	r1, [pc, #548]	@ (800d5c0 <_strtod_l+0x588>)
 800d39c:	3b01      	subs	r3, #1
 800d39e:	a819      	add	r0, sp, #100	@ 0x64
 800d3a0:	9319      	str	r3, [sp, #100]	@ 0x64
 800d3a2:	f001 fb79 	bl	800ea98 <__match>
 800d3a6:	b910      	cbnz	r0, 800d3ae <_strtod_l+0x376>
 800d3a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	9319      	str	r3, [sp, #100]	@ 0x64
 800d3ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d5d0 <_strtod_l+0x598>
 800d3b2:	f04f 0a00 	mov.w	sl, #0
 800d3b6:	e678      	b.n	800d0aa <_strtod_l+0x72>
 800d3b8:	4882      	ldr	r0, [pc, #520]	@ (800d5c4 <_strtod_l+0x58c>)
 800d3ba:	f001 f8a9 	bl	800e510 <nan>
 800d3be:	ec5b ab10 	vmov	sl, fp, d0
 800d3c2:	e672      	b.n	800d0aa <_strtod_l+0x72>
 800d3c4:	eba8 0309 	sub.w	r3, r8, r9
 800d3c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d3ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3cc:	2f00      	cmp	r7, #0
 800d3ce:	bf08      	it	eq
 800d3d0:	462f      	moveq	r7, r5
 800d3d2:	2d10      	cmp	r5, #16
 800d3d4:	462c      	mov	r4, r5
 800d3d6:	bfa8      	it	ge
 800d3d8:	2410      	movge	r4, #16
 800d3da:	f7f3 f8bb 	bl	8000554 <__aeabi_ui2d>
 800d3de:	2d09      	cmp	r5, #9
 800d3e0:	4682      	mov	sl, r0
 800d3e2:	468b      	mov	fp, r1
 800d3e4:	dc13      	bgt.n	800d40e <_strtod_l+0x3d6>
 800d3e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	f43f ae5e 	beq.w	800d0aa <_strtod_l+0x72>
 800d3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3f0:	dd78      	ble.n	800d4e4 <_strtod_l+0x4ac>
 800d3f2:	2b16      	cmp	r3, #22
 800d3f4:	dc5f      	bgt.n	800d4b6 <_strtod_l+0x47e>
 800d3f6:	4974      	ldr	r1, [pc, #464]	@ (800d5c8 <_strtod_l+0x590>)
 800d3f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d3fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d400:	4652      	mov	r2, sl
 800d402:	465b      	mov	r3, fp
 800d404:	f7f3 f920 	bl	8000648 <__aeabi_dmul>
 800d408:	4682      	mov	sl, r0
 800d40a:	468b      	mov	fp, r1
 800d40c:	e64d      	b.n	800d0aa <_strtod_l+0x72>
 800d40e:	4b6e      	ldr	r3, [pc, #440]	@ (800d5c8 <_strtod_l+0x590>)
 800d410:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d414:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d418:	f7f3 f916 	bl	8000648 <__aeabi_dmul>
 800d41c:	4682      	mov	sl, r0
 800d41e:	9808      	ldr	r0, [sp, #32]
 800d420:	468b      	mov	fp, r1
 800d422:	f7f3 f897 	bl	8000554 <__aeabi_ui2d>
 800d426:	4602      	mov	r2, r0
 800d428:	460b      	mov	r3, r1
 800d42a:	4650      	mov	r0, sl
 800d42c:	4659      	mov	r1, fp
 800d42e:	f7f2 ff55 	bl	80002dc <__adddf3>
 800d432:	2d0f      	cmp	r5, #15
 800d434:	4682      	mov	sl, r0
 800d436:	468b      	mov	fp, r1
 800d438:	ddd5      	ble.n	800d3e6 <_strtod_l+0x3ae>
 800d43a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d43c:	1b2c      	subs	r4, r5, r4
 800d43e:	441c      	add	r4, r3
 800d440:	2c00      	cmp	r4, #0
 800d442:	f340 8096 	ble.w	800d572 <_strtod_l+0x53a>
 800d446:	f014 030f 	ands.w	r3, r4, #15
 800d44a:	d00a      	beq.n	800d462 <_strtod_l+0x42a>
 800d44c:	495e      	ldr	r1, [pc, #376]	@ (800d5c8 <_strtod_l+0x590>)
 800d44e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d452:	4652      	mov	r2, sl
 800d454:	465b      	mov	r3, fp
 800d456:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d45a:	f7f3 f8f5 	bl	8000648 <__aeabi_dmul>
 800d45e:	4682      	mov	sl, r0
 800d460:	468b      	mov	fp, r1
 800d462:	f034 040f 	bics.w	r4, r4, #15
 800d466:	d073      	beq.n	800d550 <_strtod_l+0x518>
 800d468:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d46c:	dd48      	ble.n	800d500 <_strtod_l+0x4c8>
 800d46e:	2400      	movs	r4, #0
 800d470:	46a0      	mov	r8, r4
 800d472:	940a      	str	r4, [sp, #40]	@ 0x28
 800d474:	46a1      	mov	r9, r4
 800d476:	9a05      	ldr	r2, [sp, #20]
 800d478:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d5d0 <_strtod_l+0x598>
 800d47c:	2322      	movs	r3, #34	@ 0x22
 800d47e:	6013      	str	r3, [r2, #0]
 800d480:	f04f 0a00 	mov.w	sl, #0
 800d484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d486:	2b00      	cmp	r3, #0
 800d488:	f43f ae0f 	beq.w	800d0aa <_strtod_l+0x72>
 800d48c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d48e:	9805      	ldr	r0, [sp, #20]
 800d490:	f7ff f942 	bl	800c718 <_Bfree>
 800d494:	9805      	ldr	r0, [sp, #20]
 800d496:	4649      	mov	r1, r9
 800d498:	f7ff f93e 	bl	800c718 <_Bfree>
 800d49c:	9805      	ldr	r0, [sp, #20]
 800d49e:	4641      	mov	r1, r8
 800d4a0:	f7ff f93a 	bl	800c718 <_Bfree>
 800d4a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4a6:	9805      	ldr	r0, [sp, #20]
 800d4a8:	f7ff f936 	bl	800c718 <_Bfree>
 800d4ac:	9805      	ldr	r0, [sp, #20]
 800d4ae:	4621      	mov	r1, r4
 800d4b0:	f7ff f932 	bl	800c718 <_Bfree>
 800d4b4:	e5f9      	b.n	800d0aa <_strtod_l+0x72>
 800d4b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	dbbc      	blt.n	800d43a <_strtod_l+0x402>
 800d4c0:	4c41      	ldr	r4, [pc, #260]	@ (800d5c8 <_strtod_l+0x590>)
 800d4c2:	f1c5 050f 	rsb	r5, r5, #15
 800d4c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d4ca:	4652      	mov	r2, sl
 800d4cc:	465b      	mov	r3, fp
 800d4ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4d2:	f7f3 f8b9 	bl	8000648 <__aeabi_dmul>
 800d4d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4d8:	1b5d      	subs	r5, r3, r5
 800d4da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d4de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d4e2:	e78f      	b.n	800d404 <_strtod_l+0x3cc>
 800d4e4:	3316      	adds	r3, #22
 800d4e6:	dba8      	blt.n	800d43a <_strtod_l+0x402>
 800d4e8:	4b37      	ldr	r3, [pc, #220]	@ (800d5c8 <_strtod_l+0x590>)
 800d4ea:	eba9 0808 	sub.w	r8, r9, r8
 800d4ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d4f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d4f6:	4650      	mov	r0, sl
 800d4f8:	4659      	mov	r1, fp
 800d4fa:	f7f3 f9cf 	bl	800089c <__aeabi_ddiv>
 800d4fe:	e783      	b.n	800d408 <_strtod_l+0x3d0>
 800d500:	4b32      	ldr	r3, [pc, #200]	@ (800d5cc <_strtod_l+0x594>)
 800d502:	9308      	str	r3, [sp, #32]
 800d504:	2300      	movs	r3, #0
 800d506:	1124      	asrs	r4, r4, #4
 800d508:	4650      	mov	r0, sl
 800d50a:	4659      	mov	r1, fp
 800d50c:	461e      	mov	r6, r3
 800d50e:	2c01      	cmp	r4, #1
 800d510:	dc21      	bgt.n	800d556 <_strtod_l+0x51e>
 800d512:	b10b      	cbz	r3, 800d518 <_strtod_l+0x4e0>
 800d514:	4682      	mov	sl, r0
 800d516:	468b      	mov	fp, r1
 800d518:	492c      	ldr	r1, [pc, #176]	@ (800d5cc <_strtod_l+0x594>)
 800d51a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d51e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d522:	4652      	mov	r2, sl
 800d524:	465b      	mov	r3, fp
 800d526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d52a:	f7f3 f88d 	bl	8000648 <__aeabi_dmul>
 800d52e:	4b28      	ldr	r3, [pc, #160]	@ (800d5d0 <_strtod_l+0x598>)
 800d530:	460a      	mov	r2, r1
 800d532:	400b      	ands	r3, r1
 800d534:	4927      	ldr	r1, [pc, #156]	@ (800d5d4 <_strtod_l+0x59c>)
 800d536:	428b      	cmp	r3, r1
 800d538:	4682      	mov	sl, r0
 800d53a:	d898      	bhi.n	800d46e <_strtod_l+0x436>
 800d53c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d540:	428b      	cmp	r3, r1
 800d542:	bf86      	itte	hi
 800d544:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d5d8 <_strtod_l+0x5a0>
 800d548:	f04f 3aff 	movhi.w	sl, #4294967295
 800d54c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d550:	2300      	movs	r3, #0
 800d552:	9308      	str	r3, [sp, #32]
 800d554:	e07a      	b.n	800d64c <_strtod_l+0x614>
 800d556:	07e2      	lsls	r2, r4, #31
 800d558:	d505      	bpl.n	800d566 <_strtod_l+0x52e>
 800d55a:	9b08      	ldr	r3, [sp, #32]
 800d55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d560:	f7f3 f872 	bl	8000648 <__aeabi_dmul>
 800d564:	2301      	movs	r3, #1
 800d566:	9a08      	ldr	r2, [sp, #32]
 800d568:	3208      	adds	r2, #8
 800d56a:	3601      	adds	r6, #1
 800d56c:	1064      	asrs	r4, r4, #1
 800d56e:	9208      	str	r2, [sp, #32]
 800d570:	e7cd      	b.n	800d50e <_strtod_l+0x4d6>
 800d572:	d0ed      	beq.n	800d550 <_strtod_l+0x518>
 800d574:	4264      	negs	r4, r4
 800d576:	f014 020f 	ands.w	r2, r4, #15
 800d57a:	d00a      	beq.n	800d592 <_strtod_l+0x55a>
 800d57c:	4b12      	ldr	r3, [pc, #72]	@ (800d5c8 <_strtod_l+0x590>)
 800d57e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d582:	4650      	mov	r0, sl
 800d584:	4659      	mov	r1, fp
 800d586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58a:	f7f3 f987 	bl	800089c <__aeabi_ddiv>
 800d58e:	4682      	mov	sl, r0
 800d590:	468b      	mov	fp, r1
 800d592:	1124      	asrs	r4, r4, #4
 800d594:	d0dc      	beq.n	800d550 <_strtod_l+0x518>
 800d596:	2c1f      	cmp	r4, #31
 800d598:	dd20      	ble.n	800d5dc <_strtod_l+0x5a4>
 800d59a:	2400      	movs	r4, #0
 800d59c:	46a0      	mov	r8, r4
 800d59e:	940a      	str	r4, [sp, #40]	@ 0x28
 800d5a0:	46a1      	mov	r9, r4
 800d5a2:	9a05      	ldr	r2, [sp, #20]
 800d5a4:	2322      	movs	r3, #34	@ 0x22
 800d5a6:	f04f 0a00 	mov.w	sl, #0
 800d5aa:	f04f 0b00 	mov.w	fp, #0
 800d5ae:	6013      	str	r3, [r2, #0]
 800d5b0:	e768      	b.n	800d484 <_strtod_l+0x44c>
 800d5b2:	bf00      	nop
 800d5b4:	0800ef65 	.word	0x0800ef65
 800d5b8:	0800f17c 	.word	0x0800f17c
 800d5bc:	0800ef5d 	.word	0x0800ef5d
 800d5c0:	0800ef94 	.word	0x0800ef94
 800d5c4:	0800f325 	.word	0x0800f325
 800d5c8:	0800f0b0 	.word	0x0800f0b0
 800d5cc:	0800f088 	.word	0x0800f088
 800d5d0:	7ff00000 	.word	0x7ff00000
 800d5d4:	7ca00000 	.word	0x7ca00000
 800d5d8:	7fefffff 	.word	0x7fefffff
 800d5dc:	f014 0310 	ands.w	r3, r4, #16
 800d5e0:	bf18      	it	ne
 800d5e2:	236a      	movne	r3, #106	@ 0x6a
 800d5e4:	4ea9      	ldr	r6, [pc, #676]	@ (800d88c <_strtod_l+0x854>)
 800d5e6:	9308      	str	r3, [sp, #32]
 800d5e8:	4650      	mov	r0, sl
 800d5ea:	4659      	mov	r1, fp
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	07e2      	lsls	r2, r4, #31
 800d5f0:	d504      	bpl.n	800d5fc <_strtod_l+0x5c4>
 800d5f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d5f6:	f7f3 f827 	bl	8000648 <__aeabi_dmul>
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	1064      	asrs	r4, r4, #1
 800d5fe:	f106 0608 	add.w	r6, r6, #8
 800d602:	d1f4      	bne.n	800d5ee <_strtod_l+0x5b6>
 800d604:	b10b      	cbz	r3, 800d60a <_strtod_l+0x5d2>
 800d606:	4682      	mov	sl, r0
 800d608:	468b      	mov	fp, r1
 800d60a:	9b08      	ldr	r3, [sp, #32]
 800d60c:	b1b3      	cbz	r3, 800d63c <_strtod_l+0x604>
 800d60e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d612:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d616:	2b00      	cmp	r3, #0
 800d618:	4659      	mov	r1, fp
 800d61a:	dd0f      	ble.n	800d63c <_strtod_l+0x604>
 800d61c:	2b1f      	cmp	r3, #31
 800d61e:	dd55      	ble.n	800d6cc <_strtod_l+0x694>
 800d620:	2b34      	cmp	r3, #52	@ 0x34
 800d622:	bfde      	ittt	le
 800d624:	f04f 33ff 	movle.w	r3, #4294967295
 800d628:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d62c:	4093      	lslle	r3, r2
 800d62e:	f04f 0a00 	mov.w	sl, #0
 800d632:	bfcc      	ite	gt
 800d634:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d638:	ea03 0b01 	andle.w	fp, r3, r1
 800d63c:	2200      	movs	r2, #0
 800d63e:	2300      	movs	r3, #0
 800d640:	4650      	mov	r0, sl
 800d642:	4659      	mov	r1, fp
 800d644:	f7f3 fa68 	bl	8000b18 <__aeabi_dcmpeq>
 800d648:	2800      	cmp	r0, #0
 800d64a:	d1a6      	bne.n	800d59a <_strtod_l+0x562>
 800d64c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d64e:	9300      	str	r3, [sp, #0]
 800d650:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d652:	9805      	ldr	r0, [sp, #20]
 800d654:	462b      	mov	r3, r5
 800d656:	463a      	mov	r2, r7
 800d658:	f7ff f8c6 	bl	800c7e8 <__s2b>
 800d65c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d65e:	2800      	cmp	r0, #0
 800d660:	f43f af05 	beq.w	800d46e <_strtod_l+0x436>
 800d664:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d666:	2a00      	cmp	r2, #0
 800d668:	eba9 0308 	sub.w	r3, r9, r8
 800d66c:	bfa8      	it	ge
 800d66e:	2300      	movge	r3, #0
 800d670:	9312      	str	r3, [sp, #72]	@ 0x48
 800d672:	2400      	movs	r4, #0
 800d674:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d678:	9316      	str	r3, [sp, #88]	@ 0x58
 800d67a:	46a0      	mov	r8, r4
 800d67c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d67e:	9805      	ldr	r0, [sp, #20]
 800d680:	6859      	ldr	r1, [r3, #4]
 800d682:	f7ff f809 	bl	800c698 <_Balloc>
 800d686:	4681      	mov	r9, r0
 800d688:	2800      	cmp	r0, #0
 800d68a:	f43f aef4 	beq.w	800d476 <_strtod_l+0x43e>
 800d68e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d690:	691a      	ldr	r2, [r3, #16]
 800d692:	3202      	adds	r2, #2
 800d694:	f103 010c 	add.w	r1, r3, #12
 800d698:	0092      	lsls	r2, r2, #2
 800d69a:	300c      	adds	r0, #12
 800d69c:	f7fe f899 	bl	800b7d2 <memcpy>
 800d6a0:	ec4b ab10 	vmov	d0, sl, fp
 800d6a4:	9805      	ldr	r0, [sp, #20]
 800d6a6:	aa1c      	add	r2, sp, #112	@ 0x70
 800d6a8:	a91b      	add	r1, sp, #108	@ 0x6c
 800d6aa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d6ae:	f7ff fbd7 	bl	800ce60 <__d2b>
 800d6b2:	901a      	str	r0, [sp, #104]	@ 0x68
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	f43f aede 	beq.w	800d476 <_strtod_l+0x43e>
 800d6ba:	9805      	ldr	r0, [sp, #20]
 800d6bc:	2101      	movs	r1, #1
 800d6be:	f7ff f929 	bl	800c914 <__i2b>
 800d6c2:	4680      	mov	r8, r0
 800d6c4:	b948      	cbnz	r0, 800d6da <_strtod_l+0x6a2>
 800d6c6:	f04f 0800 	mov.w	r8, #0
 800d6ca:	e6d4      	b.n	800d476 <_strtod_l+0x43e>
 800d6cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d6d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d6d4:	ea03 0a0a 	and.w	sl, r3, sl
 800d6d8:	e7b0      	b.n	800d63c <_strtod_l+0x604>
 800d6da:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d6dc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d6de:	2d00      	cmp	r5, #0
 800d6e0:	bfab      	itete	ge
 800d6e2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d6e4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d6e6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d6e8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d6ea:	bfac      	ite	ge
 800d6ec:	18ef      	addge	r7, r5, r3
 800d6ee:	1b5e      	sublt	r6, r3, r5
 800d6f0:	9b08      	ldr	r3, [sp, #32]
 800d6f2:	1aed      	subs	r5, r5, r3
 800d6f4:	4415      	add	r5, r2
 800d6f6:	4b66      	ldr	r3, [pc, #408]	@ (800d890 <_strtod_l+0x858>)
 800d6f8:	3d01      	subs	r5, #1
 800d6fa:	429d      	cmp	r5, r3
 800d6fc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d700:	da50      	bge.n	800d7a4 <_strtod_l+0x76c>
 800d702:	1b5b      	subs	r3, r3, r5
 800d704:	2b1f      	cmp	r3, #31
 800d706:	eba2 0203 	sub.w	r2, r2, r3
 800d70a:	f04f 0101 	mov.w	r1, #1
 800d70e:	dc3d      	bgt.n	800d78c <_strtod_l+0x754>
 800d710:	fa01 f303 	lsl.w	r3, r1, r3
 800d714:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d716:	2300      	movs	r3, #0
 800d718:	9310      	str	r3, [sp, #64]	@ 0x40
 800d71a:	18bd      	adds	r5, r7, r2
 800d71c:	9b08      	ldr	r3, [sp, #32]
 800d71e:	42af      	cmp	r7, r5
 800d720:	4416      	add	r6, r2
 800d722:	441e      	add	r6, r3
 800d724:	463b      	mov	r3, r7
 800d726:	bfa8      	it	ge
 800d728:	462b      	movge	r3, r5
 800d72a:	42b3      	cmp	r3, r6
 800d72c:	bfa8      	it	ge
 800d72e:	4633      	movge	r3, r6
 800d730:	2b00      	cmp	r3, #0
 800d732:	bfc2      	ittt	gt
 800d734:	1aed      	subgt	r5, r5, r3
 800d736:	1af6      	subgt	r6, r6, r3
 800d738:	1aff      	subgt	r7, r7, r3
 800d73a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	dd16      	ble.n	800d76e <_strtod_l+0x736>
 800d740:	4641      	mov	r1, r8
 800d742:	9805      	ldr	r0, [sp, #20]
 800d744:	461a      	mov	r2, r3
 800d746:	f7ff f9a5 	bl	800ca94 <__pow5mult>
 800d74a:	4680      	mov	r8, r0
 800d74c:	2800      	cmp	r0, #0
 800d74e:	d0ba      	beq.n	800d6c6 <_strtod_l+0x68e>
 800d750:	4601      	mov	r1, r0
 800d752:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d754:	9805      	ldr	r0, [sp, #20]
 800d756:	f7ff f8f3 	bl	800c940 <__multiply>
 800d75a:	900e      	str	r0, [sp, #56]	@ 0x38
 800d75c:	2800      	cmp	r0, #0
 800d75e:	f43f ae8a 	beq.w	800d476 <_strtod_l+0x43e>
 800d762:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d764:	9805      	ldr	r0, [sp, #20]
 800d766:	f7fe ffd7 	bl	800c718 <_Bfree>
 800d76a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d76c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d76e:	2d00      	cmp	r5, #0
 800d770:	dc1d      	bgt.n	800d7ae <_strtod_l+0x776>
 800d772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d774:	2b00      	cmp	r3, #0
 800d776:	dd23      	ble.n	800d7c0 <_strtod_l+0x788>
 800d778:	4649      	mov	r1, r9
 800d77a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d77c:	9805      	ldr	r0, [sp, #20]
 800d77e:	f7ff f989 	bl	800ca94 <__pow5mult>
 800d782:	4681      	mov	r9, r0
 800d784:	b9e0      	cbnz	r0, 800d7c0 <_strtod_l+0x788>
 800d786:	f04f 0900 	mov.w	r9, #0
 800d78a:	e674      	b.n	800d476 <_strtod_l+0x43e>
 800d78c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d790:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d794:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d798:	35e2      	adds	r5, #226	@ 0xe2
 800d79a:	fa01 f305 	lsl.w	r3, r1, r5
 800d79e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d7a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d7a2:	e7ba      	b.n	800d71a <_strtod_l+0x6e2>
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d7ac:	e7b5      	b.n	800d71a <_strtod_l+0x6e2>
 800d7ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d7b0:	9805      	ldr	r0, [sp, #20]
 800d7b2:	462a      	mov	r2, r5
 800d7b4:	f7ff f9c8 	bl	800cb48 <__lshift>
 800d7b8:	901a      	str	r0, [sp, #104]	@ 0x68
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	d1d9      	bne.n	800d772 <_strtod_l+0x73a>
 800d7be:	e65a      	b.n	800d476 <_strtod_l+0x43e>
 800d7c0:	2e00      	cmp	r6, #0
 800d7c2:	dd07      	ble.n	800d7d4 <_strtod_l+0x79c>
 800d7c4:	4649      	mov	r1, r9
 800d7c6:	9805      	ldr	r0, [sp, #20]
 800d7c8:	4632      	mov	r2, r6
 800d7ca:	f7ff f9bd 	bl	800cb48 <__lshift>
 800d7ce:	4681      	mov	r9, r0
 800d7d0:	2800      	cmp	r0, #0
 800d7d2:	d0d8      	beq.n	800d786 <_strtod_l+0x74e>
 800d7d4:	2f00      	cmp	r7, #0
 800d7d6:	dd08      	ble.n	800d7ea <_strtod_l+0x7b2>
 800d7d8:	4641      	mov	r1, r8
 800d7da:	9805      	ldr	r0, [sp, #20]
 800d7dc:	463a      	mov	r2, r7
 800d7de:	f7ff f9b3 	bl	800cb48 <__lshift>
 800d7e2:	4680      	mov	r8, r0
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	f43f ae46 	beq.w	800d476 <_strtod_l+0x43e>
 800d7ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d7ec:	9805      	ldr	r0, [sp, #20]
 800d7ee:	464a      	mov	r2, r9
 800d7f0:	f7ff fa32 	bl	800cc58 <__mdiff>
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	f43f ae3d 	beq.w	800d476 <_strtod_l+0x43e>
 800d7fc:	68c3      	ldr	r3, [r0, #12]
 800d7fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d800:	2300      	movs	r3, #0
 800d802:	60c3      	str	r3, [r0, #12]
 800d804:	4641      	mov	r1, r8
 800d806:	f7ff fa0b 	bl	800cc20 <__mcmp>
 800d80a:	2800      	cmp	r0, #0
 800d80c:	da46      	bge.n	800d89c <_strtod_l+0x864>
 800d80e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d810:	ea53 030a 	orrs.w	r3, r3, sl
 800d814:	d16c      	bne.n	800d8f0 <_strtod_l+0x8b8>
 800d816:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d168      	bne.n	800d8f0 <_strtod_l+0x8b8>
 800d81e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d822:	0d1b      	lsrs	r3, r3, #20
 800d824:	051b      	lsls	r3, r3, #20
 800d826:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d82a:	d961      	bls.n	800d8f0 <_strtod_l+0x8b8>
 800d82c:	6963      	ldr	r3, [r4, #20]
 800d82e:	b913      	cbnz	r3, 800d836 <_strtod_l+0x7fe>
 800d830:	6923      	ldr	r3, [r4, #16]
 800d832:	2b01      	cmp	r3, #1
 800d834:	dd5c      	ble.n	800d8f0 <_strtod_l+0x8b8>
 800d836:	4621      	mov	r1, r4
 800d838:	2201      	movs	r2, #1
 800d83a:	9805      	ldr	r0, [sp, #20]
 800d83c:	f7ff f984 	bl	800cb48 <__lshift>
 800d840:	4641      	mov	r1, r8
 800d842:	4604      	mov	r4, r0
 800d844:	f7ff f9ec 	bl	800cc20 <__mcmp>
 800d848:	2800      	cmp	r0, #0
 800d84a:	dd51      	ble.n	800d8f0 <_strtod_l+0x8b8>
 800d84c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d850:	9a08      	ldr	r2, [sp, #32]
 800d852:	0d1b      	lsrs	r3, r3, #20
 800d854:	051b      	lsls	r3, r3, #20
 800d856:	2a00      	cmp	r2, #0
 800d858:	d06b      	beq.n	800d932 <_strtod_l+0x8fa>
 800d85a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d85e:	d868      	bhi.n	800d932 <_strtod_l+0x8fa>
 800d860:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d864:	f67f ae9d 	bls.w	800d5a2 <_strtod_l+0x56a>
 800d868:	4b0a      	ldr	r3, [pc, #40]	@ (800d894 <_strtod_l+0x85c>)
 800d86a:	4650      	mov	r0, sl
 800d86c:	4659      	mov	r1, fp
 800d86e:	2200      	movs	r2, #0
 800d870:	f7f2 feea 	bl	8000648 <__aeabi_dmul>
 800d874:	4b08      	ldr	r3, [pc, #32]	@ (800d898 <_strtod_l+0x860>)
 800d876:	400b      	ands	r3, r1
 800d878:	4682      	mov	sl, r0
 800d87a:	468b      	mov	fp, r1
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	f47f ae05 	bne.w	800d48c <_strtod_l+0x454>
 800d882:	9a05      	ldr	r2, [sp, #20]
 800d884:	2322      	movs	r3, #34	@ 0x22
 800d886:	6013      	str	r3, [r2, #0]
 800d888:	e600      	b.n	800d48c <_strtod_l+0x454>
 800d88a:	bf00      	nop
 800d88c:	0800f1a8 	.word	0x0800f1a8
 800d890:	fffffc02 	.word	0xfffffc02
 800d894:	39500000 	.word	0x39500000
 800d898:	7ff00000 	.word	0x7ff00000
 800d89c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d8a0:	d165      	bne.n	800d96e <_strtod_l+0x936>
 800d8a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d8a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8a8:	b35a      	cbz	r2, 800d902 <_strtod_l+0x8ca>
 800d8aa:	4a9f      	ldr	r2, [pc, #636]	@ (800db28 <_strtod_l+0xaf0>)
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	d12b      	bne.n	800d908 <_strtod_l+0x8d0>
 800d8b0:	9b08      	ldr	r3, [sp, #32]
 800d8b2:	4651      	mov	r1, sl
 800d8b4:	b303      	cbz	r3, 800d8f8 <_strtod_l+0x8c0>
 800d8b6:	4b9d      	ldr	r3, [pc, #628]	@ (800db2c <_strtod_l+0xaf4>)
 800d8b8:	465a      	mov	r2, fp
 800d8ba:	4013      	ands	r3, r2
 800d8bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d8c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d8c4:	d81b      	bhi.n	800d8fe <_strtod_l+0x8c6>
 800d8c6:	0d1b      	lsrs	r3, r3, #20
 800d8c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d8cc:	fa02 f303 	lsl.w	r3, r2, r3
 800d8d0:	4299      	cmp	r1, r3
 800d8d2:	d119      	bne.n	800d908 <_strtod_l+0x8d0>
 800d8d4:	4b96      	ldr	r3, [pc, #600]	@ (800db30 <_strtod_l+0xaf8>)
 800d8d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d102      	bne.n	800d8e2 <_strtod_l+0x8aa>
 800d8dc:	3101      	adds	r1, #1
 800d8de:	f43f adca 	beq.w	800d476 <_strtod_l+0x43e>
 800d8e2:	4b92      	ldr	r3, [pc, #584]	@ (800db2c <_strtod_l+0xaf4>)
 800d8e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8e6:	401a      	ands	r2, r3
 800d8e8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d8ec:	f04f 0a00 	mov.w	sl, #0
 800d8f0:	9b08      	ldr	r3, [sp, #32]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d1b8      	bne.n	800d868 <_strtod_l+0x830>
 800d8f6:	e5c9      	b.n	800d48c <_strtod_l+0x454>
 800d8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d8fc:	e7e8      	b.n	800d8d0 <_strtod_l+0x898>
 800d8fe:	4613      	mov	r3, r2
 800d900:	e7e6      	b.n	800d8d0 <_strtod_l+0x898>
 800d902:	ea53 030a 	orrs.w	r3, r3, sl
 800d906:	d0a1      	beq.n	800d84c <_strtod_l+0x814>
 800d908:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d90a:	b1db      	cbz	r3, 800d944 <_strtod_l+0x90c>
 800d90c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d90e:	4213      	tst	r3, r2
 800d910:	d0ee      	beq.n	800d8f0 <_strtod_l+0x8b8>
 800d912:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d914:	9a08      	ldr	r2, [sp, #32]
 800d916:	4650      	mov	r0, sl
 800d918:	4659      	mov	r1, fp
 800d91a:	b1bb      	cbz	r3, 800d94c <_strtod_l+0x914>
 800d91c:	f7ff fb6e 	bl	800cffc <sulp>
 800d920:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d924:	ec53 2b10 	vmov	r2, r3, d0
 800d928:	f7f2 fcd8 	bl	80002dc <__adddf3>
 800d92c:	4682      	mov	sl, r0
 800d92e:	468b      	mov	fp, r1
 800d930:	e7de      	b.n	800d8f0 <_strtod_l+0x8b8>
 800d932:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d936:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d93a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d93e:	f04f 3aff 	mov.w	sl, #4294967295
 800d942:	e7d5      	b.n	800d8f0 <_strtod_l+0x8b8>
 800d944:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d946:	ea13 0f0a 	tst.w	r3, sl
 800d94a:	e7e1      	b.n	800d910 <_strtod_l+0x8d8>
 800d94c:	f7ff fb56 	bl	800cffc <sulp>
 800d950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d954:	ec53 2b10 	vmov	r2, r3, d0
 800d958:	f7f2 fcbe 	bl	80002d8 <__aeabi_dsub>
 800d95c:	2200      	movs	r2, #0
 800d95e:	2300      	movs	r3, #0
 800d960:	4682      	mov	sl, r0
 800d962:	468b      	mov	fp, r1
 800d964:	f7f3 f8d8 	bl	8000b18 <__aeabi_dcmpeq>
 800d968:	2800      	cmp	r0, #0
 800d96a:	d0c1      	beq.n	800d8f0 <_strtod_l+0x8b8>
 800d96c:	e619      	b.n	800d5a2 <_strtod_l+0x56a>
 800d96e:	4641      	mov	r1, r8
 800d970:	4620      	mov	r0, r4
 800d972:	f7ff facd 	bl	800cf10 <__ratio>
 800d976:	ec57 6b10 	vmov	r6, r7, d0
 800d97a:	2200      	movs	r2, #0
 800d97c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d980:	4630      	mov	r0, r6
 800d982:	4639      	mov	r1, r7
 800d984:	f7f3 f8dc 	bl	8000b40 <__aeabi_dcmple>
 800d988:	2800      	cmp	r0, #0
 800d98a:	d06f      	beq.n	800da6c <_strtod_l+0xa34>
 800d98c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d17a      	bne.n	800da88 <_strtod_l+0xa50>
 800d992:	f1ba 0f00 	cmp.w	sl, #0
 800d996:	d158      	bne.n	800da4a <_strtod_l+0xa12>
 800d998:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d99a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d15a      	bne.n	800da58 <_strtod_l+0xa20>
 800d9a2:	4b64      	ldr	r3, [pc, #400]	@ (800db34 <_strtod_l+0xafc>)
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	4630      	mov	r0, r6
 800d9a8:	4639      	mov	r1, r7
 800d9aa:	f7f3 f8bf 	bl	8000b2c <__aeabi_dcmplt>
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	d159      	bne.n	800da66 <_strtod_l+0xa2e>
 800d9b2:	4630      	mov	r0, r6
 800d9b4:	4639      	mov	r1, r7
 800d9b6:	4b60      	ldr	r3, [pc, #384]	@ (800db38 <_strtod_l+0xb00>)
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	f7f2 fe45 	bl	8000648 <__aeabi_dmul>
 800d9be:	4606      	mov	r6, r0
 800d9c0:	460f      	mov	r7, r1
 800d9c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d9c6:	9606      	str	r6, [sp, #24]
 800d9c8:	9307      	str	r3, [sp, #28]
 800d9ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9ce:	4d57      	ldr	r5, [pc, #348]	@ (800db2c <_strtod_l+0xaf4>)
 800d9d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d9d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9d6:	401d      	ands	r5, r3
 800d9d8:	4b58      	ldr	r3, [pc, #352]	@ (800db3c <_strtod_l+0xb04>)
 800d9da:	429d      	cmp	r5, r3
 800d9dc:	f040 80b2 	bne.w	800db44 <_strtod_l+0xb0c>
 800d9e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d9e6:	ec4b ab10 	vmov	d0, sl, fp
 800d9ea:	f7ff f9c9 	bl	800cd80 <__ulp>
 800d9ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9f2:	ec51 0b10 	vmov	r0, r1, d0
 800d9f6:	f7f2 fe27 	bl	8000648 <__aeabi_dmul>
 800d9fa:	4652      	mov	r2, sl
 800d9fc:	465b      	mov	r3, fp
 800d9fe:	f7f2 fc6d 	bl	80002dc <__adddf3>
 800da02:	460b      	mov	r3, r1
 800da04:	4949      	ldr	r1, [pc, #292]	@ (800db2c <_strtod_l+0xaf4>)
 800da06:	4a4e      	ldr	r2, [pc, #312]	@ (800db40 <_strtod_l+0xb08>)
 800da08:	4019      	ands	r1, r3
 800da0a:	4291      	cmp	r1, r2
 800da0c:	4682      	mov	sl, r0
 800da0e:	d942      	bls.n	800da96 <_strtod_l+0xa5e>
 800da10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800da12:	4b47      	ldr	r3, [pc, #284]	@ (800db30 <_strtod_l+0xaf8>)
 800da14:	429a      	cmp	r2, r3
 800da16:	d103      	bne.n	800da20 <_strtod_l+0x9e8>
 800da18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800da1a:	3301      	adds	r3, #1
 800da1c:	f43f ad2b 	beq.w	800d476 <_strtod_l+0x43e>
 800da20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800db30 <_strtod_l+0xaf8>
 800da24:	f04f 3aff 	mov.w	sl, #4294967295
 800da28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800da2a:	9805      	ldr	r0, [sp, #20]
 800da2c:	f7fe fe74 	bl	800c718 <_Bfree>
 800da30:	9805      	ldr	r0, [sp, #20]
 800da32:	4649      	mov	r1, r9
 800da34:	f7fe fe70 	bl	800c718 <_Bfree>
 800da38:	9805      	ldr	r0, [sp, #20]
 800da3a:	4641      	mov	r1, r8
 800da3c:	f7fe fe6c 	bl	800c718 <_Bfree>
 800da40:	9805      	ldr	r0, [sp, #20]
 800da42:	4621      	mov	r1, r4
 800da44:	f7fe fe68 	bl	800c718 <_Bfree>
 800da48:	e618      	b.n	800d67c <_strtod_l+0x644>
 800da4a:	f1ba 0f01 	cmp.w	sl, #1
 800da4e:	d103      	bne.n	800da58 <_strtod_l+0xa20>
 800da50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da52:	2b00      	cmp	r3, #0
 800da54:	f43f ada5 	beq.w	800d5a2 <_strtod_l+0x56a>
 800da58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800db08 <_strtod_l+0xad0>
 800da5c:	4f35      	ldr	r7, [pc, #212]	@ (800db34 <_strtod_l+0xafc>)
 800da5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800da62:	2600      	movs	r6, #0
 800da64:	e7b1      	b.n	800d9ca <_strtod_l+0x992>
 800da66:	4f34      	ldr	r7, [pc, #208]	@ (800db38 <_strtod_l+0xb00>)
 800da68:	2600      	movs	r6, #0
 800da6a:	e7aa      	b.n	800d9c2 <_strtod_l+0x98a>
 800da6c:	4b32      	ldr	r3, [pc, #200]	@ (800db38 <_strtod_l+0xb00>)
 800da6e:	4630      	mov	r0, r6
 800da70:	4639      	mov	r1, r7
 800da72:	2200      	movs	r2, #0
 800da74:	f7f2 fde8 	bl	8000648 <__aeabi_dmul>
 800da78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da7a:	4606      	mov	r6, r0
 800da7c:	460f      	mov	r7, r1
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d09f      	beq.n	800d9c2 <_strtod_l+0x98a>
 800da82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800da86:	e7a0      	b.n	800d9ca <_strtod_l+0x992>
 800da88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800db10 <_strtod_l+0xad8>
 800da8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800da90:	ec57 6b17 	vmov	r6, r7, d7
 800da94:	e799      	b.n	800d9ca <_strtod_l+0x992>
 800da96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800da9a:	9b08      	ldr	r3, [sp, #32]
 800da9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d1c1      	bne.n	800da28 <_strtod_l+0x9f0>
 800daa4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800daa8:	0d1b      	lsrs	r3, r3, #20
 800daaa:	051b      	lsls	r3, r3, #20
 800daac:	429d      	cmp	r5, r3
 800daae:	d1bb      	bne.n	800da28 <_strtod_l+0x9f0>
 800dab0:	4630      	mov	r0, r6
 800dab2:	4639      	mov	r1, r7
 800dab4:	f7f3 f928 	bl	8000d08 <__aeabi_d2lz>
 800dab8:	f7f2 fd98 	bl	80005ec <__aeabi_l2d>
 800dabc:	4602      	mov	r2, r0
 800dabe:	460b      	mov	r3, r1
 800dac0:	4630      	mov	r0, r6
 800dac2:	4639      	mov	r1, r7
 800dac4:	f7f2 fc08 	bl	80002d8 <__aeabi_dsub>
 800dac8:	460b      	mov	r3, r1
 800daca:	4602      	mov	r2, r0
 800dacc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800dad0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800dad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dad6:	ea46 060a 	orr.w	r6, r6, sl
 800dada:	431e      	orrs	r6, r3
 800dadc:	d06f      	beq.n	800dbbe <_strtod_l+0xb86>
 800dade:	a30e      	add	r3, pc, #56	@ (adr r3, 800db18 <_strtod_l+0xae0>)
 800dae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae4:	f7f3 f822 	bl	8000b2c <__aeabi_dcmplt>
 800dae8:	2800      	cmp	r0, #0
 800daea:	f47f accf 	bne.w	800d48c <_strtod_l+0x454>
 800daee:	a30c      	add	r3, pc, #48	@ (adr r3, 800db20 <_strtod_l+0xae8>)
 800daf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800daf8:	f7f3 f836 	bl	8000b68 <__aeabi_dcmpgt>
 800dafc:	2800      	cmp	r0, #0
 800dafe:	d093      	beq.n	800da28 <_strtod_l+0x9f0>
 800db00:	e4c4      	b.n	800d48c <_strtod_l+0x454>
 800db02:	bf00      	nop
 800db04:	f3af 8000 	nop.w
 800db08:	00000000 	.word	0x00000000
 800db0c:	bff00000 	.word	0xbff00000
 800db10:	00000000 	.word	0x00000000
 800db14:	3ff00000 	.word	0x3ff00000
 800db18:	94a03595 	.word	0x94a03595
 800db1c:	3fdfffff 	.word	0x3fdfffff
 800db20:	35afe535 	.word	0x35afe535
 800db24:	3fe00000 	.word	0x3fe00000
 800db28:	000fffff 	.word	0x000fffff
 800db2c:	7ff00000 	.word	0x7ff00000
 800db30:	7fefffff 	.word	0x7fefffff
 800db34:	3ff00000 	.word	0x3ff00000
 800db38:	3fe00000 	.word	0x3fe00000
 800db3c:	7fe00000 	.word	0x7fe00000
 800db40:	7c9fffff 	.word	0x7c9fffff
 800db44:	9b08      	ldr	r3, [sp, #32]
 800db46:	b323      	cbz	r3, 800db92 <_strtod_l+0xb5a>
 800db48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800db4c:	d821      	bhi.n	800db92 <_strtod_l+0xb5a>
 800db4e:	a328      	add	r3, pc, #160	@ (adr r3, 800dbf0 <_strtod_l+0xbb8>)
 800db50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db54:	4630      	mov	r0, r6
 800db56:	4639      	mov	r1, r7
 800db58:	f7f2 fff2 	bl	8000b40 <__aeabi_dcmple>
 800db5c:	b1a0      	cbz	r0, 800db88 <_strtod_l+0xb50>
 800db5e:	4639      	mov	r1, r7
 800db60:	4630      	mov	r0, r6
 800db62:	f7f3 f849 	bl	8000bf8 <__aeabi_d2uiz>
 800db66:	2801      	cmp	r0, #1
 800db68:	bf38      	it	cc
 800db6a:	2001      	movcc	r0, #1
 800db6c:	f7f2 fcf2 	bl	8000554 <__aeabi_ui2d>
 800db70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db72:	4606      	mov	r6, r0
 800db74:	460f      	mov	r7, r1
 800db76:	b9fb      	cbnz	r3, 800dbb8 <_strtod_l+0xb80>
 800db78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800db7c:	9014      	str	r0, [sp, #80]	@ 0x50
 800db7e:	9315      	str	r3, [sp, #84]	@ 0x54
 800db80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800db84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800db88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800db8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800db8e:	1b5b      	subs	r3, r3, r5
 800db90:	9311      	str	r3, [sp, #68]	@ 0x44
 800db92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800db96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800db9a:	f7ff f8f1 	bl	800cd80 <__ulp>
 800db9e:	4650      	mov	r0, sl
 800dba0:	ec53 2b10 	vmov	r2, r3, d0
 800dba4:	4659      	mov	r1, fp
 800dba6:	f7f2 fd4f 	bl	8000648 <__aeabi_dmul>
 800dbaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800dbae:	f7f2 fb95 	bl	80002dc <__adddf3>
 800dbb2:	4682      	mov	sl, r0
 800dbb4:	468b      	mov	fp, r1
 800dbb6:	e770      	b.n	800da9a <_strtod_l+0xa62>
 800dbb8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800dbbc:	e7e0      	b.n	800db80 <_strtod_l+0xb48>
 800dbbe:	a30e      	add	r3, pc, #56	@ (adr r3, 800dbf8 <_strtod_l+0xbc0>)
 800dbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc4:	f7f2 ffb2 	bl	8000b2c <__aeabi_dcmplt>
 800dbc8:	e798      	b.n	800dafc <_strtod_l+0xac4>
 800dbca:	2300      	movs	r3, #0
 800dbcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800dbd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbd2:	6013      	str	r3, [r2, #0]
 800dbd4:	f7ff ba6d 	b.w	800d0b2 <_strtod_l+0x7a>
 800dbd8:	2a65      	cmp	r2, #101	@ 0x65
 800dbda:	f43f ab66 	beq.w	800d2aa <_strtod_l+0x272>
 800dbde:	2a45      	cmp	r2, #69	@ 0x45
 800dbe0:	f43f ab63 	beq.w	800d2aa <_strtod_l+0x272>
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	f7ff bb9e 	b.w	800d326 <_strtod_l+0x2ee>
 800dbea:	bf00      	nop
 800dbec:	f3af 8000 	nop.w
 800dbf0:	ffc00000 	.word	0xffc00000
 800dbf4:	41dfffff 	.word	0x41dfffff
 800dbf8:	94a03595 	.word	0x94a03595
 800dbfc:	3fcfffff 	.word	0x3fcfffff

0800dc00 <_strtod_r>:
 800dc00:	4b01      	ldr	r3, [pc, #4]	@ (800dc08 <_strtod_r+0x8>)
 800dc02:	f7ff ba19 	b.w	800d038 <_strtod_l>
 800dc06:	bf00      	nop
 800dc08:	20000070 	.word	0x20000070

0800dc0c <_strtol_l.constprop.0>:
 800dc0c:	2b24      	cmp	r3, #36	@ 0x24
 800dc0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc12:	4686      	mov	lr, r0
 800dc14:	4690      	mov	r8, r2
 800dc16:	d801      	bhi.n	800dc1c <_strtol_l.constprop.0+0x10>
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	d106      	bne.n	800dc2a <_strtol_l.constprop.0+0x1e>
 800dc1c:	f7fd fdac 	bl	800b778 <__errno>
 800dc20:	2316      	movs	r3, #22
 800dc22:	6003      	str	r3, [r0, #0]
 800dc24:	2000      	movs	r0, #0
 800dc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc2a:	4834      	ldr	r0, [pc, #208]	@ (800dcfc <_strtol_l.constprop.0+0xf0>)
 800dc2c:	460d      	mov	r5, r1
 800dc2e:	462a      	mov	r2, r5
 800dc30:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc34:	5d06      	ldrb	r6, [r0, r4]
 800dc36:	f016 0608 	ands.w	r6, r6, #8
 800dc3a:	d1f8      	bne.n	800dc2e <_strtol_l.constprop.0+0x22>
 800dc3c:	2c2d      	cmp	r4, #45	@ 0x2d
 800dc3e:	d12d      	bne.n	800dc9c <_strtol_l.constprop.0+0x90>
 800dc40:	782c      	ldrb	r4, [r5, #0]
 800dc42:	2601      	movs	r6, #1
 800dc44:	1c95      	adds	r5, r2, #2
 800dc46:	f033 0210 	bics.w	r2, r3, #16
 800dc4a:	d109      	bne.n	800dc60 <_strtol_l.constprop.0+0x54>
 800dc4c:	2c30      	cmp	r4, #48	@ 0x30
 800dc4e:	d12a      	bne.n	800dca6 <_strtol_l.constprop.0+0x9a>
 800dc50:	782a      	ldrb	r2, [r5, #0]
 800dc52:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dc56:	2a58      	cmp	r2, #88	@ 0x58
 800dc58:	d125      	bne.n	800dca6 <_strtol_l.constprop.0+0x9a>
 800dc5a:	786c      	ldrb	r4, [r5, #1]
 800dc5c:	2310      	movs	r3, #16
 800dc5e:	3502      	adds	r5, #2
 800dc60:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800dc64:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dc68:	2200      	movs	r2, #0
 800dc6a:	fbbc f9f3 	udiv	r9, ip, r3
 800dc6e:	4610      	mov	r0, r2
 800dc70:	fb03 ca19 	mls	sl, r3, r9, ip
 800dc74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800dc78:	2f09      	cmp	r7, #9
 800dc7a:	d81b      	bhi.n	800dcb4 <_strtol_l.constprop.0+0xa8>
 800dc7c:	463c      	mov	r4, r7
 800dc7e:	42a3      	cmp	r3, r4
 800dc80:	dd27      	ble.n	800dcd2 <_strtol_l.constprop.0+0xc6>
 800dc82:	1c57      	adds	r7, r2, #1
 800dc84:	d007      	beq.n	800dc96 <_strtol_l.constprop.0+0x8a>
 800dc86:	4581      	cmp	r9, r0
 800dc88:	d320      	bcc.n	800dccc <_strtol_l.constprop.0+0xc0>
 800dc8a:	d101      	bne.n	800dc90 <_strtol_l.constprop.0+0x84>
 800dc8c:	45a2      	cmp	sl, r4
 800dc8e:	db1d      	blt.n	800dccc <_strtol_l.constprop.0+0xc0>
 800dc90:	fb00 4003 	mla	r0, r0, r3, r4
 800dc94:	2201      	movs	r2, #1
 800dc96:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc9a:	e7eb      	b.n	800dc74 <_strtol_l.constprop.0+0x68>
 800dc9c:	2c2b      	cmp	r4, #43	@ 0x2b
 800dc9e:	bf04      	itt	eq
 800dca0:	782c      	ldrbeq	r4, [r5, #0]
 800dca2:	1c95      	addeq	r5, r2, #2
 800dca4:	e7cf      	b.n	800dc46 <_strtol_l.constprop.0+0x3a>
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d1da      	bne.n	800dc60 <_strtol_l.constprop.0+0x54>
 800dcaa:	2c30      	cmp	r4, #48	@ 0x30
 800dcac:	bf0c      	ite	eq
 800dcae:	2308      	moveq	r3, #8
 800dcb0:	230a      	movne	r3, #10
 800dcb2:	e7d5      	b.n	800dc60 <_strtol_l.constprop.0+0x54>
 800dcb4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dcb8:	2f19      	cmp	r7, #25
 800dcba:	d801      	bhi.n	800dcc0 <_strtol_l.constprop.0+0xb4>
 800dcbc:	3c37      	subs	r4, #55	@ 0x37
 800dcbe:	e7de      	b.n	800dc7e <_strtol_l.constprop.0+0x72>
 800dcc0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800dcc4:	2f19      	cmp	r7, #25
 800dcc6:	d804      	bhi.n	800dcd2 <_strtol_l.constprop.0+0xc6>
 800dcc8:	3c57      	subs	r4, #87	@ 0x57
 800dcca:	e7d8      	b.n	800dc7e <_strtol_l.constprop.0+0x72>
 800dccc:	f04f 32ff 	mov.w	r2, #4294967295
 800dcd0:	e7e1      	b.n	800dc96 <_strtol_l.constprop.0+0x8a>
 800dcd2:	1c53      	adds	r3, r2, #1
 800dcd4:	d108      	bne.n	800dce8 <_strtol_l.constprop.0+0xdc>
 800dcd6:	2322      	movs	r3, #34	@ 0x22
 800dcd8:	f8ce 3000 	str.w	r3, [lr]
 800dcdc:	4660      	mov	r0, ip
 800dcde:	f1b8 0f00 	cmp.w	r8, #0
 800dce2:	d0a0      	beq.n	800dc26 <_strtol_l.constprop.0+0x1a>
 800dce4:	1e69      	subs	r1, r5, #1
 800dce6:	e006      	b.n	800dcf6 <_strtol_l.constprop.0+0xea>
 800dce8:	b106      	cbz	r6, 800dcec <_strtol_l.constprop.0+0xe0>
 800dcea:	4240      	negs	r0, r0
 800dcec:	f1b8 0f00 	cmp.w	r8, #0
 800dcf0:	d099      	beq.n	800dc26 <_strtol_l.constprop.0+0x1a>
 800dcf2:	2a00      	cmp	r2, #0
 800dcf4:	d1f6      	bne.n	800dce4 <_strtol_l.constprop.0+0xd8>
 800dcf6:	f8c8 1000 	str.w	r1, [r8]
 800dcfa:	e794      	b.n	800dc26 <_strtol_l.constprop.0+0x1a>
 800dcfc:	0800f1d1 	.word	0x0800f1d1

0800dd00 <_strtol_r>:
 800dd00:	f7ff bf84 	b.w	800dc0c <_strtol_l.constprop.0>

0800dd04 <__ssputs_r>:
 800dd04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd08:	688e      	ldr	r6, [r1, #8]
 800dd0a:	461f      	mov	r7, r3
 800dd0c:	42be      	cmp	r6, r7
 800dd0e:	680b      	ldr	r3, [r1, #0]
 800dd10:	4682      	mov	sl, r0
 800dd12:	460c      	mov	r4, r1
 800dd14:	4690      	mov	r8, r2
 800dd16:	d82d      	bhi.n	800dd74 <__ssputs_r+0x70>
 800dd18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dd20:	d026      	beq.n	800dd70 <__ssputs_r+0x6c>
 800dd22:	6965      	ldr	r5, [r4, #20]
 800dd24:	6909      	ldr	r1, [r1, #16]
 800dd26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd2a:	eba3 0901 	sub.w	r9, r3, r1
 800dd2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd32:	1c7b      	adds	r3, r7, #1
 800dd34:	444b      	add	r3, r9
 800dd36:	106d      	asrs	r5, r5, #1
 800dd38:	429d      	cmp	r5, r3
 800dd3a:	bf38      	it	cc
 800dd3c:	461d      	movcc	r5, r3
 800dd3e:	0553      	lsls	r3, r2, #21
 800dd40:	d527      	bpl.n	800dd92 <__ssputs_r+0x8e>
 800dd42:	4629      	mov	r1, r5
 800dd44:	f7fe fc1c 	bl	800c580 <_malloc_r>
 800dd48:	4606      	mov	r6, r0
 800dd4a:	b360      	cbz	r0, 800dda6 <__ssputs_r+0xa2>
 800dd4c:	6921      	ldr	r1, [r4, #16]
 800dd4e:	464a      	mov	r2, r9
 800dd50:	f7fd fd3f 	bl	800b7d2 <memcpy>
 800dd54:	89a3      	ldrh	r3, [r4, #12]
 800dd56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dd5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd5e:	81a3      	strh	r3, [r4, #12]
 800dd60:	6126      	str	r6, [r4, #16]
 800dd62:	6165      	str	r5, [r4, #20]
 800dd64:	444e      	add	r6, r9
 800dd66:	eba5 0509 	sub.w	r5, r5, r9
 800dd6a:	6026      	str	r6, [r4, #0]
 800dd6c:	60a5      	str	r5, [r4, #8]
 800dd6e:	463e      	mov	r6, r7
 800dd70:	42be      	cmp	r6, r7
 800dd72:	d900      	bls.n	800dd76 <__ssputs_r+0x72>
 800dd74:	463e      	mov	r6, r7
 800dd76:	6820      	ldr	r0, [r4, #0]
 800dd78:	4632      	mov	r2, r6
 800dd7a:	4641      	mov	r1, r8
 800dd7c:	f000 fb6a 	bl	800e454 <memmove>
 800dd80:	68a3      	ldr	r3, [r4, #8]
 800dd82:	1b9b      	subs	r3, r3, r6
 800dd84:	60a3      	str	r3, [r4, #8]
 800dd86:	6823      	ldr	r3, [r4, #0]
 800dd88:	4433      	add	r3, r6
 800dd8a:	6023      	str	r3, [r4, #0]
 800dd8c:	2000      	movs	r0, #0
 800dd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd92:	462a      	mov	r2, r5
 800dd94:	f000 ff41 	bl	800ec1a <_realloc_r>
 800dd98:	4606      	mov	r6, r0
 800dd9a:	2800      	cmp	r0, #0
 800dd9c:	d1e0      	bne.n	800dd60 <__ssputs_r+0x5c>
 800dd9e:	6921      	ldr	r1, [r4, #16]
 800dda0:	4650      	mov	r0, sl
 800dda2:	f7fe fb79 	bl	800c498 <_free_r>
 800dda6:	230c      	movs	r3, #12
 800dda8:	f8ca 3000 	str.w	r3, [sl]
 800ddac:	89a3      	ldrh	r3, [r4, #12]
 800ddae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ddb2:	81a3      	strh	r3, [r4, #12]
 800ddb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ddb8:	e7e9      	b.n	800dd8e <__ssputs_r+0x8a>
	...

0800ddbc <_svfiprintf_r>:
 800ddbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc0:	4698      	mov	r8, r3
 800ddc2:	898b      	ldrh	r3, [r1, #12]
 800ddc4:	061b      	lsls	r3, r3, #24
 800ddc6:	b09d      	sub	sp, #116	@ 0x74
 800ddc8:	4607      	mov	r7, r0
 800ddca:	460d      	mov	r5, r1
 800ddcc:	4614      	mov	r4, r2
 800ddce:	d510      	bpl.n	800ddf2 <_svfiprintf_r+0x36>
 800ddd0:	690b      	ldr	r3, [r1, #16]
 800ddd2:	b973      	cbnz	r3, 800ddf2 <_svfiprintf_r+0x36>
 800ddd4:	2140      	movs	r1, #64	@ 0x40
 800ddd6:	f7fe fbd3 	bl	800c580 <_malloc_r>
 800ddda:	6028      	str	r0, [r5, #0]
 800dddc:	6128      	str	r0, [r5, #16]
 800ddde:	b930      	cbnz	r0, 800ddee <_svfiprintf_r+0x32>
 800dde0:	230c      	movs	r3, #12
 800dde2:	603b      	str	r3, [r7, #0]
 800dde4:	f04f 30ff 	mov.w	r0, #4294967295
 800dde8:	b01d      	add	sp, #116	@ 0x74
 800ddea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddee:	2340      	movs	r3, #64	@ 0x40
 800ddf0:	616b      	str	r3, [r5, #20]
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddf6:	2320      	movs	r3, #32
 800ddf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ddfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800de00:	2330      	movs	r3, #48	@ 0x30
 800de02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dfa0 <_svfiprintf_r+0x1e4>
 800de06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de0a:	f04f 0901 	mov.w	r9, #1
 800de0e:	4623      	mov	r3, r4
 800de10:	469a      	mov	sl, r3
 800de12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de16:	b10a      	cbz	r2, 800de1c <_svfiprintf_r+0x60>
 800de18:	2a25      	cmp	r2, #37	@ 0x25
 800de1a:	d1f9      	bne.n	800de10 <_svfiprintf_r+0x54>
 800de1c:	ebba 0b04 	subs.w	fp, sl, r4
 800de20:	d00b      	beq.n	800de3a <_svfiprintf_r+0x7e>
 800de22:	465b      	mov	r3, fp
 800de24:	4622      	mov	r2, r4
 800de26:	4629      	mov	r1, r5
 800de28:	4638      	mov	r0, r7
 800de2a:	f7ff ff6b 	bl	800dd04 <__ssputs_r>
 800de2e:	3001      	adds	r0, #1
 800de30:	f000 80a7 	beq.w	800df82 <_svfiprintf_r+0x1c6>
 800de34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de36:	445a      	add	r2, fp
 800de38:	9209      	str	r2, [sp, #36]	@ 0x24
 800de3a:	f89a 3000 	ldrb.w	r3, [sl]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	f000 809f 	beq.w	800df82 <_svfiprintf_r+0x1c6>
 800de44:	2300      	movs	r3, #0
 800de46:	f04f 32ff 	mov.w	r2, #4294967295
 800de4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de4e:	f10a 0a01 	add.w	sl, sl, #1
 800de52:	9304      	str	r3, [sp, #16]
 800de54:	9307      	str	r3, [sp, #28]
 800de56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800de5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800de5c:	4654      	mov	r4, sl
 800de5e:	2205      	movs	r2, #5
 800de60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de64:	484e      	ldr	r0, [pc, #312]	@ (800dfa0 <_svfiprintf_r+0x1e4>)
 800de66:	f7f2 f9db 	bl	8000220 <memchr>
 800de6a:	9a04      	ldr	r2, [sp, #16]
 800de6c:	b9d8      	cbnz	r0, 800dea6 <_svfiprintf_r+0xea>
 800de6e:	06d0      	lsls	r0, r2, #27
 800de70:	bf44      	itt	mi
 800de72:	2320      	movmi	r3, #32
 800de74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de78:	0711      	lsls	r1, r2, #28
 800de7a:	bf44      	itt	mi
 800de7c:	232b      	movmi	r3, #43	@ 0x2b
 800de7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de82:	f89a 3000 	ldrb.w	r3, [sl]
 800de86:	2b2a      	cmp	r3, #42	@ 0x2a
 800de88:	d015      	beq.n	800deb6 <_svfiprintf_r+0xfa>
 800de8a:	9a07      	ldr	r2, [sp, #28]
 800de8c:	4654      	mov	r4, sl
 800de8e:	2000      	movs	r0, #0
 800de90:	f04f 0c0a 	mov.w	ip, #10
 800de94:	4621      	mov	r1, r4
 800de96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de9a:	3b30      	subs	r3, #48	@ 0x30
 800de9c:	2b09      	cmp	r3, #9
 800de9e:	d94b      	bls.n	800df38 <_svfiprintf_r+0x17c>
 800dea0:	b1b0      	cbz	r0, 800ded0 <_svfiprintf_r+0x114>
 800dea2:	9207      	str	r2, [sp, #28]
 800dea4:	e014      	b.n	800ded0 <_svfiprintf_r+0x114>
 800dea6:	eba0 0308 	sub.w	r3, r0, r8
 800deaa:	fa09 f303 	lsl.w	r3, r9, r3
 800deae:	4313      	orrs	r3, r2
 800deb0:	9304      	str	r3, [sp, #16]
 800deb2:	46a2      	mov	sl, r4
 800deb4:	e7d2      	b.n	800de5c <_svfiprintf_r+0xa0>
 800deb6:	9b03      	ldr	r3, [sp, #12]
 800deb8:	1d19      	adds	r1, r3, #4
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	9103      	str	r1, [sp, #12]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	bfbb      	ittet	lt
 800dec2:	425b      	neglt	r3, r3
 800dec4:	f042 0202 	orrlt.w	r2, r2, #2
 800dec8:	9307      	strge	r3, [sp, #28]
 800deca:	9307      	strlt	r3, [sp, #28]
 800decc:	bfb8      	it	lt
 800dece:	9204      	strlt	r2, [sp, #16]
 800ded0:	7823      	ldrb	r3, [r4, #0]
 800ded2:	2b2e      	cmp	r3, #46	@ 0x2e
 800ded4:	d10a      	bne.n	800deec <_svfiprintf_r+0x130>
 800ded6:	7863      	ldrb	r3, [r4, #1]
 800ded8:	2b2a      	cmp	r3, #42	@ 0x2a
 800deda:	d132      	bne.n	800df42 <_svfiprintf_r+0x186>
 800dedc:	9b03      	ldr	r3, [sp, #12]
 800dede:	1d1a      	adds	r2, r3, #4
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	9203      	str	r2, [sp, #12]
 800dee4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dee8:	3402      	adds	r4, #2
 800deea:	9305      	str	r3, [sp, #20]
 800deec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dfb0 <_svfiprintf_r+0x1f4>
 800def0:	7821      	ldrb	r1, [r4, #0]
 800def2:	2203      	movs	r2, #3
 800def4:	4650      	mov	r0, sl
 800def6:	f7f2 f993 	bl	8000220 <memchr>
 800defa:	b138      	cbz	r0, 800df0c <_svfiprintf_r+0x150>
 800defc:	9b04      	ldr	r3, [sp, #16]
 800defe:	eba0 000a 	sub.w	r0, r0, sl
 800df02:	2240      	movs	r2, #64	@ 0x40
 800df04:	4082      	lsls	r2, r0
 800df06:	4313      	orrs	r3, r2
 800df08:	3401      	adds	r4, #1
 800df0a:	9304      	str	r3, [sp, #16]
 800df0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df10:	4824      	ldr	r0, [pc, #144]	@ (800dfa4 <_svfiprintf_r+0x1e8>)
 800df12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800df16:	2206      	movs	r2, #6
 800df18:	f7f2 f982 	bl	8000220 <memchr>
 800df1c:	2800      	cmp	r0, #0
 800df1e:	d036      	beq.n	800df8e <_svfiprintf_r+0x1d2>
 800df20:	4b21      	ldr	r3, [pc, #132]	@ (800dfa8 <_svfiprintf_r+0x1ec>)
 800df22:	bb1b      	cbnz	r3, 800df6c <_svfiprintf_r+0x1b0>
 800df24:	9b03      	ldr	r3, [sp, #12]
 800df26:	3307      	adds	r3, #7
 800df28:	f023 0307 	bic.w	r3, r3, #7
 800df2c:	3308      	adds	r3, #8
 800df2e:	9303      	str	r3, [sp, #12]
 800df30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df32:	4433      	add	r3, r6
 800df34:	9309      	str	r3, [sp, #36]	@ 0x24
 800df36:	e76a      	b.n	800de0e <_svfiprintf_r+0x52>
 800df38:	fb0c 3202 	mla	r2, ip, r2, r3
 800df3c:	460c      	mov	r4, r1
 800df3e:	2001      	movs	r0, #1
 800df40:	e7a8      	b.n	800de94 <_svfiprintf_r+0xd8>
 800df42:	2300      	movs	r3, #0
 800df44:	3401      	adds	r4, #1
 800df46:	9305      	str	r3, [sp, #20]
 800df48:	4619      	mov	r1, r3
 800df4a:	f04f 0c0a 	mov.w	ip, #10
 800df4e:	4620      	mov	r0, r4
 800df50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df54:	3a30      	subs	r2, #48	@ 0x30
 800df56:	2a09      	cmp	r2, #9
 800df58:	d903      	bls.n	800df62 <_svfiprintf_r+0x1a6>
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d0c6      	beq.n	800deec <_svfiprintf_r+0x130>
 800df5e:	9105      	str	r1, [sp, #20]
 800df60:	e7c4      	b.n	800deec <_svfiprintf_r+0x130>
 800df62:	fb0c 2101 	mla	r1, ip, r1, r2
 800df66:	4604      	mov	r4, r0
 800df68:	2301      	movs	r3, #1
 800df6a:	e7f0      	b.n	800df4e <_svfiprintf_r+0x192>
 800df6c:	ab03      	add	r3, sp, #12
 800df6e:	9300      	str	r3, [sp, #0]
 800df70:	462a      	mov	r2, r5
 800df72:	4b0e      	ldr	r3, [pc, #56]	@ (800dfac <_svfiprintf_r+0x1f0>)
 800df74:	a904      	add	r1, sp, #16
 800df76:	4638      	mov	r0, r7
 800df78:	f7fc fbb6 	bl	800a6e8 <_printf_float>
 800df7c:	1c42      	adds	r2, r0, #1
 800df7e:	4606      	mov	r6, r0
 800df80:	d1d6      	bne.n	800df30 <_svfiprintf_r+0x174>
 800df82:	89ab      	ldrh	r3, [r5, #12]
 800df84:	065b      	lsls	r3, r3, #25
 800df86:	f53f af2d 	bmi.w	800dde4 <_svfiprintf_r+0x28>
 800df8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df8c:	e72c      	b.n	800dde8 <_svfiprintf_r+0x2c>
 800df8e:	ab03      	add	r3, sp, #12
 800df90:	9300      	str	r3, [sp, #0]
 800df92:	462a      	mov	r2, r5
 800df94:	4b05      	ldr	r3, [pc, #20]	@ (800dfac <_svfiprintf_r+0x1f0>)
 800df96:	a904      	add	r1, sp, #16
 800df98:	4638      	mov	r0, r7
 800df9a:	f7fc fe3d 	bl	800ac18 <_printf_i>
 800df9e:	e7ed      	b.n	800df7c <_svfiprintf_r+0x1c0>
 800dfa0:	0800f2d1 	.word	0x0800f2d1
 800dfa4:	0800f2db 	.word	0x0800f2db
 800dfa8:	0800a6e9 	.word	0x0800a6e9
 800dfac:	0800dd05 	.word	0x0800dd05
 800dfb0:	0800f2d7 	.word	0x0800f2d7

0800dfb4 <__sfputc_r>:
 800dfb4:	6893      	ldr	r3, [r2, #8]
 800dfb6:	3b01      	subs	r3, #1
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	b410      	push	{r4}
 800dfbc:	6093      	str	r3, [r2, #8]
 800dfbe:	da08      	bge.n	800dfd2 <__sfputc_r+0x1e>
 800dfc0:	6994      	ldr	r4, [r2, #24]
 800dfc2:	42a3      	cmp	r3, r4
 800dfc4:	db01      	blt.n	800dfca <__sfputc_r+0x16>
 800dfc6:	290a      	cmp	r1, #10
 800dfc8:	d103      	bne.n	800dfd2 <__sfputc_r+0x1e>
 800dfca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfce:	f7fd baec 	b.w	800b5aa <__swbuf_r>
 800dfd2:	6813      	ldr	r3, [r2, #0]
 800dfd4:	1c58      	adds	r0, r3, #1
 800dfd6:	6010      	str	r0, [r2, #0]
 800dfd8:	7019      	strb	r1, [r3, #0]
 800dfda:	4608      	mov	r0, r1
 800dfdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfe0:	4770      	bx	lr

0800dfe2 <__sfputs_r>:
 800dfe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfe4:	4606      	mov	r6, r0
 800dfe6:	460f      	mov	r7, r1
 800dfe8:	4614      	mov	r4, r2
 800dfea:	18d5      	adds	r5, r2, r3
 800dfec:	42ac      	cmp	r4, r5
 800dfee:	d101      	bne.n	800dff4 <__sfputs_r+0x12>
 800dff0:	2000      	movs	r0, #0
 800dff2:	e007      	b.n	800e004 <__sfputs_r+0x22>
 800dff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dff8:	463a      	mov	r2, r7
 800dffa:	4630      	mov	r0, r6
 800dffc:	f7ff ffda 	bl	800dfb4 <__sfputc_r>
 800e000:	1c43      	adds	r3, r0, #1
 800e002:	d1f3      	bne.n	800dfec <__sfputs_r+0xa>
 800e004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e008 <_vfiprintf_r>:
 800e008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e00c:	460d      	mov	r5, r1
 800e00e:	b09d      	sub	sp, #116	@ 0x74
 800e010:	4614      	mov	r4, r2
 800e012:	4698      	mov	r8, r3
 800e014:	4606      	mov	r6, r0
 800e016:	b118      	cbz	r0, 800e020 <_vfiprintf_r+0x18>
 800e018:	6a03      	ldr	r3, [r0, #32]
 800e01a:	b90b      	cbnz	r3, 800e020 <_vfiprintf_r+0x18>
 800e01c:	f7fd f9bc 	bl	800b398 <__sinit>
 800e020:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e022:	07d9      	lsls	r1, r3, #31
 800e024:	d405      	bmi.n	800e032 <_vfiprintf_r+0x2a>
 800e026:	89ab      	ldrh	r3, [r5, #12]
 800e028:	059a      	lsls	r2, r3, #22
 800e02a:	d402      	bmi.n	800e032 <_vfiprintf_r+0x2a>
 800e02c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e02e:	f7fd fbce 	bl	800b7ce <__retarget_lock_acquire_recursive>
 800e032:	89ab      	ldrh	r3, [r5, #12]
 800e034:	071b      	lsls	r3, r3, #28
 800e036:	d501      	bpl.n	800e03c <_vfiprintf_r+0x34>
 800e038:	692b      	ldr	r3, [r5, #16]
 800e03a:	b99b      	cbnz	r3, 800e064 <_vfiprintf_r+0x5c>
 800e03c:	4629      	mov	r1, r5
 800e03e:	4630      	mov	r0, r6
 800e040:	f7fd faf2 	bl	800b628 <__swsetup_r>
 800e044:	b170      	cbz	r0, 800e064 <_vfiprintf_r+0x5c>
 800e046:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e048:	07dc      	lsls	r4, r3, #31
 800e04a:	d504      	bpl.n	800e056 <_vfiprintf_r+0x4e>
 800e04c:	f04f 30ff 	mov.w	r0, #4294967295
 800e050:	b01d      	add	sp, #116	@ 0x74
 800e052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e056:	89ab      	ldrh	r3, [r5, #12]
 800e058:	0598      	lsls	r0, r3, #22
 800e05a:	d4f7      	bmi.n	800e04c <_vfiprintf_r+0x44>
 800e05c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e05e:	f7fd fbb7 	bl	800b7d0 <__retarget_lock_release_recursive>
 800e062:	e7f3      	b.n	800e04c <_vfiprintf_r+0x44>
 800e064:	2300      	movs	r3, #0
 800e066:	9309      	str	r3, [sp, #36]	@ 0x24
 800e068:	2320      	movs	r3, #32
 800e06a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e06e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e072:	2330      	movs	r3, #48	@ 0x30
 800e074:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e224 <_vfiprintf_r+0x21c>
 800e078:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e07c:	f04f 0901 	mov.w	r9, #1
 800e080:	4623      	mov	r3, r4
 800e082:	469a      	mov	sl, r3
 800e084:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e088:	b10a      	cbz	r2, 800e08e <_vfiprintf_r+0x86>
 800e08a:	2a25      	cmp	r2, #37	@ 0x25
 800e08c:	d1f9      	bne.n	800e082 <_vfiprintf_r+0x7a>
 800e08e:	ebba 0b04 	subs.w	fp, sl, r4
 800e092:	d00b      	beq.n	800e0ac <_vfiprintf_r+0xa4>
 800e094:	465b      	mov	r3, fp
 800e096:	4622      	mov	r2, r4
 800e098:	4629      	mov	r1, r5
 800e09a:	4630      	mov	r0, r6
 800e09c:	f7ff ffa1 	bl	800dfe2 <__sfputs_r>
 800e0a0:	3001      	adds	r0, #1
 800e0a2:	f000 80a7 	beq.w	800e1f4 <_vfiprintf_r+0x1ec>
 800e0a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0a8:	445a      	add	r2, fp
 800e0aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800e0ac:	f89a 3000 	ldrb.w	r3, [sl]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	f000 809f 	beq.w	800e1f4 <_vfiprintf_r+0x1ec>
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e0bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0c0:	f10a 0a01 	add.w	sl, sl, #1
 800e0c4:	9304      	str	r3, [sp, #16]
 800e0c6:	9307      	str	r3, [sp, #28]
 800e0c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e0cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800e0ce:	4654      	mov	r4, sl
 800e0d0:	2205      	movs	r2, #5
 800e0d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0d6:	4853      	ldr	r0, [pc, #332]	@ (800e224 <_vfiprintf_r+0x21c>)
 800e0d8:	f7f2 f8a2 	bl	8000220 <memchr>
 800e0dc:	9a04      	ldr	r2, [sp, #16]
 800e0de:	b9d8      	cbnz	r0, 800e118 <_vfiprintf_r+0x110>
 800e0e0:	06d1      	lsls	r1, r2, #27
 800e0e2:	bf44      	itt	mi
 800e0e4:	2320      	movmi	r3, #32
 800e0e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0ea:	0713      	lsls	r3, r2, #28
 800e0ec:	bf44      	itt	mi
 800e0ee:	232b      	movmi	r3, #43	@ 0x2b
 800e0f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0f4:	f89a 3000 	ldrb.w	r3, [sl]
 800e0f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0fa:	d015      	beq.n	800e128 <_vfiprintf_r+0x120>
 800e0fc:	9a07      	ldr	r2, [sp, #28]
 800e0fe:	4654      	mov	r4, sl
 800e100:	2000      	movs	r0, #0
 800e102:	f04f 0c0a 	mov.w	ip, #10
 800e106:	4621      	mov	r1, r4
 800e108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e10c:	3b30      	subs	r3, #48	@ 0x30
 800e10e:	2b09      	cmp	r3, #9
 800e110:	d94b      	bls.n	800e1aa <_vfiprintf_r+0x1a2>
 800e112:	b1b0      	cbz	r0, 800e142 <_vfiprintf_r+0x13a>
 800e114:	9207      	str	r2, [sp, #28]
 800e116:	e014      	b.n	800e142 <_vfiprintf_r+0x13a>
 800e118:	eba0 0308 	sub.w	r3, r0, r8
 800e11c:	fa09 f303 	lsl.w	r3, r9, r3
 800e120:	4313      	orrs	r3, r2
 800e122:	9304      	str	r3, [sp, #16]
 800e124:	46a2      	mov	sl, r4
 800e126:	e7d2      	b.n	800e0ce <_vfiprintf_r+0xc6>
 800e128:	9b03      	ldr	r3, [sp, #12]
 800e12a:	1d19      	adds	r1, r3, #4
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	9103      	str	r1, [sp, #12]
 800e130:	2b00      	cmp	r3, #0
 800e132:	bfbb      	ittet	lt
 800e134:	425b      	neglt	r3, r3
 800e136:	f042 0202 	orrlt.w	r2, r2, #2
 800e13a:	9307      	strge	r3, [sp, #28]
 800e13c:	9307      	strlt	r3, [sp, #28]
 800e13e:	bfb8      	it	lt
 800e140:	9204      	strlt	r2, [sp, #16]
 800e142:	7823      	ldrb	r3, [r4, #0]
 800e144:	2b2e      	cmp	r3, #46	@ 0x2e
 800e146:	d10a      	bne.n	800e15e <_vfiprintf_r+0x156>
 800e148:	7863      	ldrb	r3, [r4, #1]
 800e14a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e14c:	d132      	bne.n	800e1b4 <_vfiprintf_r+0x1ac>
 800e14e:	9b03      	ldr	r3, [sp, #12]
 800e150:	1d1a      	adds	r2, r3, #4
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	9203      	str	r2, [sp, #12]
 800e156:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e15a:	3402      	adds	r4, #2
 800e15c:	9305      	str	r3, [sp, #20]
 800e15e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e234 <_vfiprintf_r+0x22c>
 800e162:	7821      	ldrb	r1, [r4, #0]
 800e164:	2203      	movs	r2, #3
 800e166:	4650      	mov	r0, sl
 800e168:	f7f2 f85a 	bl	8000220 <memchr>
 800e16c:	b138      	cbz	r0, 800e17e <_vfiprintf_r+0x176>
 800e16e:	9b04      	ldr	r3, [sp, #16]
 800e170:	eba0 000a 	sub.w	r0, r0, sl
 800e174:	2240      	movs	r2, #64	@ 0x40
 800e176:	4082      	lsls	r2, r0
 800e178:	4313      	orrs	r3, r2
 800e17a:	3401      	adds	r4, #1
 800e17c:	9304      	str	r3, [sp, #16]
 800e17e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e182:	4829      	ldr	r0, [pc, #164]	@ (800e228 <_vfiprintf_r+0x220>)
 800e184:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e188:	2206      	movs	r2, #6
 800e18a:	f7f2 f849 	bl	8000220 <memchr>
 800e18e:	2800      	cmp	r0, #0
 800e190:	d03f      	beq.n	800e212 <_vfiprintf_r+0x20a>
 800e192:	4b26      	ldr	r3, [pc, #152]	@ (800e22c <_vfiprintf_r+0x224>)
 800e194:	bb1b      	cbnz	r3, 800e1de <_vfiprintf_r+0x1d6>
 800e196:	9b03      	ldr	r3, [sp, #12]
 800e198:	3307      	adds	r3, #7
 800e19a:	f023 0307 	bic.w	r3, r3, #7
 800e19e:	3308      	adds	r3, #8
 800e1a0:	9303      	str	r3, [sp, #12]
 800e1a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1a4:	443b      	add	r3, r7
 800e1a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1a8:	e76a      	b.n	800e080 <_vfiprintf_r+0x78>
 800e1aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1ae:	460c      	mov	r4, r1
 800e1b0:	2001      	movs	r0, #1
 800e1b2:	e7a8      	b.n	800e106 <_vfiprintf_r+0xfe>
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	3401      	adds	r4, #1
 800e1b8:	9305      	str	r3, [sp, #20]
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	f04f 0c0a 	mov.w	ip, #10
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1c6:	3a30      	subs	r2, #48	@ 0x30
 800e1c8:	2a09      	cmp	r2, #9
 800e1ca:	d903      	bls.n	800e1d4 <_vfiprintf_r+0x1cc>
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d0c6      	beq.n	800e15e <_vfiprintf_r+0x156>
 800e1d0:	9105      	str	r1, [sp, #20]
 800e1d2:	e7c4      	b.n	800e15e <_vfiprintf_r+0x156>
 800e1d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1d8:	4604      	mov	r4, r0
 800e1da:	2301      	movs	r3, #1
 800e1dc:	e7f0      	b.n	800e1c0 <_vfiprintf_r+0x1b8>
 800e1de:	ab03      	add	r3, sp, #12
 800e1e0:	9300      	str	r3, [sp, #0]
 800e1e2:	462a      	mov	r2, r5
 800e1e4:	4b12      	ldr	r3, [pc, #72]	@ (800e230 <_vfiprintf_r+0x228>)
 800e1e6:	a904      	add	r1, sp, #16
 800e1e8:	4630      	mov	r0, r6
 800e1ea:	f7fc fa7d 	bl	800a6e8 <_printf_float>
 800e1ee:	4607      	mov	r7, r0
 800e1f0:	1c78      	adds	r0, r7, #1
 800e1f2:	d1d6      	bne.n	800e1a2 <_vfiprintf_r+0x19a>
 800e1f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e1f6:	07d9      	lsls	r1, r3, #31
 800e1f8:	d405      	bmi.n	800e206 <_vfiprintf_r+0x1fe>
 800e1fa:	89ab      	ldrh	r3, [r5, #12]
 800e1fc:	059a      	lsls	r2, r3, #22
 800e1fe:	d402      	bmi.n	800e206 <_vfiprintf_r+0x1fe>
 800e200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e202:	f7fd fae5 	bl	800b7d0 <__retarget_lock_release_recursive>
 800e206:	89ab      	ldrh	r3, [r5, #12]
 800e208:	065b      	lsls	r3, r3, #25
 800e20a:	f53f af1f 	bmi.w	800e04c <_vfiprintf_r+0x44>
 800e20e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e210:	e71e      	b.n	800e050 <_vfiprintf_r+0x48>
 800e212:	ab03      	add	r3, sp, #12
 800e214:	9300      	str	r3, [sp, #0]
 800e216:	462a      	mov	r2, r5
 800e218:	4b05      	ldr	r3, [pc, #20]	@ (800e230 <_vfiprintf_r+0x228>)
 800e21a:	a904      	add	r1, sp, #16
 800e21c:	4630      	mov	r0, r6
 800e21e:	f7fc fcfb 	bl	800ac18 <_printf_i>
 800e222:	e7e4      	b.n	800e1ee <_vfiprintf_r+0x1e6>
 800e224:	0800f2d1 	.word	0x0800f2d1
 800e228:	0800f2db 	.word	0x0800f2db
 800e22c:	0800a6e9 	.word	0x0800a6e9
 800e230:	0800dfe3 	.word	0x0800dfe3
 800e234:	0800f2d7 	.word	0x0800f2d7

0800e238 <__sflush_r>:
 800e238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e240:	0716      	lsls	r6, r2, #28
 800e242:	4605      	mov	r5, r0
 800e244:	460c      	mov	r4, r1
 800e246:	d454      	bmi.n	800e2f2 <__sflush_r+0xba>
 800e248:	684b      	ldr	r3, [r1, #4]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	dc02      	bgt.n	800e254 <__sflush_r+0x1c>
 800e24e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e250:	2b00      	cmp	r3, #0
 800e252:	dd48      	ble.n	800e2e6 <__sflush_r+0xae>
 800e254:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e256:	2e00      	cmp	r6, #0
 800e258:	d045      	beq.n	800e2e6 <__sflush_r+0xae>
 800e25a:	2300      	movs	r3, #0
 800e25c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e260:	682f      	ldr	r7, [r5, #0]
 800e262:	6a21      	ldr	r1, [r4, #32]
 800e264:	602b      	str	r3, [r5, #0]
 800e266:	d030      	beq.n	800e2ca <__sflush_r+0x92>
 800e268:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e26a:	89a3      	ldrh	r3, [r4, #12]
 800e26c:	0759      	lsls	r1, r3, #29
 800e26e:	d505      	bpl.n	800e27c <__sflush_r+0x44>
 800e270:	6863      	ldr	r3, [r4, #4]
 800e272:	1ad2      	subs	r2, r2, r3
 800e274:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e276:	b10b      	cbz	r3, 800e27c <__sflush_r+0x44>
 800e278:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e27a:	1ad2      	subs	r2, r2, r3
 800e27c:	2300      	movs	r3, #0
 800e27e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e280:	6a21      	ldr	r1, [r4, #32]
 800e282:	4628      	mov	r0, r5
 800e284:	47b0      	blx	r6
 800e286:	1c43      	adds	r3, r0, #1
 800e288:	89a3      	ldrh	r3, [r4, #12]
 800e28a:	d106      	bne.n	800e29a <__sflush_r+0x62>
 800e28c:	6829      	ldr	r1, [r5, #0]
 800e28e:	291d      	cmp	r1, #29
 800e290:	d82b      	bhi.n	800e2ea <__sflush_r+0xb2>
 800e292:	4a2a      	ldr	r2, [pc, #168]	@ (800e33c <__sflush_r+0x104>)
 800e294:	410a      	asrs	r2, r1
 800e296:	07d6      	lsls	r6, r2, #31
 800e298:	d427      	bmi.n	800e2ea <__sflush_r+0xb2>
 800e29a:	2200      	movs	r2, #0
 800e29c:	6062      	str	r2, [r4, #4]
 800e29e:	04d9      	lsls	r1, r3, #19
 800e2a0:	6922      	ldr	r2, [r4, #16]
 800e2a2:	6022      	str	r2, [r4, #0]
 800e2a4:	d504      	bpl.n	800e2b0 <__sflush_r+0x78>
 800e2a6:	1c42      	adds	r2, r0, #1
 800e2a8:	d101      	bne.n	800e2ae <__sflush_r+0x76>
 800e2aa:	682b      	ldr	r3, [r5, #0]
 800e2ac:	b903      	cbnz	r3, 800e2b0 <__sflush_r+0x78>
 800e2ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800e2b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e2b2:	602f      	str	r7, [r5, #0]
 800e2b4:	b1b9      	cbz	r1, 800e2e6 <__sflush_r+0xae>
 800e2b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e2ba:	4299      	cmp	r1, r3
 800e2bc:	d002      	beq.n	800e2c4 <__sflush_r+0x8c>
 800e2be:	4628      	mov	r0, r5
 800e2c0:	f7fe f8ea 	bl	800c498 <_free_r>
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800e2c8:	e00d      	b.n	800e2e6 <__sflush_r+0xae>
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	4628      	mov	r0, r5
 800e2ce:	47b0      	blx	r6
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	1c50      	adds	r0, r2, #1
 800e2d4:	d1c9      	bne.n	800e26a <__sflush_r+0x32>
 800e2d6:	682b      	ldr	r3, [r5, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d0c6      	beq.n	800e26a <__sflush_r+0x32>
 800e2dc:	2b1d      	cmp	r3, #29
 800e2de:	d001      	beq.n	800e2e4 <__sflush_r+0xac>
 800e2e0:	2b16      	cmp	r3, #22
 800e2e2:	d11e      	bne.n	800e322 <__sflush_r+0xea>
 800e2e4:	602f      	str	r7, [r5, #0]
 800e2e6:	2000      	movs	r0, #0
 800e2e8:	e022      	b.n	800e330 <__sflush_r+0xf8>
 800e2ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2ee:	b21b      	sxth	r3, r3
 800e2f0:	e01b      	b.n	800e32a <__sflush_r+0xf2>
 800e2f2:	690f      	ldr	r7, [r1, #16]
 800e2f4:	2f00      	cmp	r7, #0
 800e2f6:	d0f6      	beq.n	800e2e6 <__sflush_r+0xae>
 800e2f8:	0793      	lsls	r3, r2, #30
 800e2fa:	680e      	ldr	r6, [r1, #0]
 800e2fc:	bf08      	it	eq
 800e2fe:	694b      	ldreq	r3, [r1, #20]
 800e300:	600f      	str	r7, [r1, #0]
 800e302:	bf18      	it	ne
 800e304:	2300      	movne	r3, #0
 800e306:	eba6 0807 	sub.w	r8, r6, r7
 800e30a:	608b      	str	r3, [r1, #8]
 800e30c:	f1b8 0f00 	cmp.w	r8, #0
 800e310:	dde9      	ble.n	800e2e6 <__sflush_r+0xae>
 800e312:	6a21      	ldr	r1, [r4, #32]
 800e314:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e316:	4643      	mov	r3, r8
 800e318:	463a      	mov	r2, r7
 800e31a:	4628      	mov	r0, r5
 800e31c:	47b0      	blx	r6
 800e31e:	2800      	cmp	r0, #0
 800e320:	dc08      	bgt.n	800e334 <__sflush_r+0xfc>
 800e322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e32a:	81a3      	strh	r3, [r4, #12]
 800e32c:	f04f 30ff 	mov.w	r0, #4294967295
 800e330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e334:	4407      	add	r7, r0
 800e336:	eba8 0800 	sub.w	r8, r8, r0
 800e33a:	e7e7      	b.n	800e30c <__sflush_r+0xd4>
 800e33c:	dfbffffe 	.word	0xdfbffffe

0800e340 <_fflush_r>:
 800e340:	b538      	push	{r3, r4, r5, lr}
 800e342:	690b      	ldr	r3, [r1, #16]
 800e344:	4605      	mov	r5, r0
 800e346:	460c      	mov	r4, r1
 800e348:	b913      	cbnz	r3, 800e350 <_fflush_r+0x10>
 800e34a:	2500      	movs	r5, #0
 800e34c:	4628      	mov	r0, r5
 800e34e:	bd38      	pop	{r3, r4, r5, pc}
 800e350:	b118      	cbz	r0, 800e35a <_fflush_r+0x1a>
 800e352:	6a03      	ldr	r3, [r0, #32]
 800e354:	b90b      	cbnz	r3, 800e35a <_fflush_r+0x1a>
 800e356:	f7fd f81f 	bl	800b398 <__sinit>
 800e35a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d0f3      	beq.n	800e34a <_fflush_r+0xa>
 800e362:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e364:	07d0      	lsls	r0, r2, #31
 800e366:	d404      	bmi.n	800e372 <_fflush_r+0x32>
 800e368:	0599      	lsls	r1, r3, #22
 800e36a:	d402      	bmi.n	800e372 <_fflush_r+0x32>
 800e36c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e36e:	f7fd fa2e 	bl	800b7ce <__retarget_lock_acquire_recursive>
 800e372:	4628      	mov	r0, r5
 800e374:	4621      	mov	r1, r4
 800e376:	f7ff ff5f 	bl	800e238 <__sflush_r>
 800e37a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e37c:	07da      	lsls	r2, r3, #31
 800e37e:	4605      	mov	r5, r0
 800e380:	d4e4      	bmi.n	800e34c <_fflush_r+0xc>
 800e382:	89a3      	ldrh	r3, [r4, #12]
 800e384:	059b      	lsls	r3, r3, #22
 800e386:	d4e1      	bmi.n	800e34c <_fflush_r+0xc>
 800e388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e38a:	f7fd fa21 	bl	800b7d0 <__retarget_lock_release_recursive>
 800e38e:	e7dd      	b.n	800e34c <_fflush_r+0xc>

0800e390 <__swhatbuf_r>:
 800e390:	b570      	push	{r4, r5, r6, lr}
 800e392:	460c      	mov	r4, r1
 800e394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e398:	2900      	cmp	r1, #0
 800e39a:	b096      	sub	sp, #88	@ 0x58
 800e39c:	4615      	mov	r5, r2
 800e39e:	461e      	mov	r6, r3
 800e3a0:	da0d      	bge.n	800e3be <__swhatbuf_r+0x2e>
 800e3a2:	89a3      	ldrh	r3, [r4, #12]
 800e3a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e3a8:	f04f 0100 	mov.w	r1, #0
 800e3ac:	bf14      	ite	ne
 800e3ae:	2340      	movne	r3, #64	@ 0x40
 800e3b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e3b4:	2000      	movs	r0, #0
 800e3b6:	6031      	str	r1, [r6, #0]
 800e3b8:	602b      	str	r3, [r5, #0]
 800e3ba:	b016      	add	sp, #88	@ 0x58
 800e3bc:	bd70      	pop	{r4, r5, r6, pc}
 800e3be:	466a      	mov	r2, sp
 800e3c0:	f000 f874 	bl	800e4ac <_fstat_r>
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	dbec      	blt.n	800e3a2 <__swhatbuf_r+0x12>
 800e3c8:	9901      	ldr	r1, [sp, #4]
 800e3ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e3ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e3d2:	4259      	negs	r1, r3
 800e3d4:	4159      	adcs	r1, r3
 800e3d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e3da:	e7eb      	b.n	800e3b4 <__swhatbuf_r+0x24>

0800e3dc <__smakebuf_r>:
 800e3dc:	898b      	ldrh	r3, [r1, #12]
 800e3de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3e0:	079d      	lsls	r5, r3, #30
 800e3e2:	4606      	mov	r6, r0
 800e3e4:	460c      	mov	r4, r1
 800e3e6:	d507      	bpl.n	800e3f8 <__smakebuf_r+0x1c>
 800e3e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e3ec:	6023      	str	r3, [r4, #0]
 800e3ee:	6123      	str	r3, [r4, #16]
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	6163      	str	r3, [r4, #20]
 800e3f4:	b003      	add	sp, #12
 800e3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3f8:	ab01      	add	r3, sp, #4
 800e3fa:	466a      	mov	r2, sp
 800e3fc:	f7ff ffc8 	bl	800e390 <__swhatbuf_r>
 800e400:	9f00      	ldr	r7, [sp, #0]
 800e402:	4605      	mov	r5, r0
 800e404:	4639      	mov	r1, r7
 800e406:	4630      	mov	r0, r6
 800e408:	f7fe f8ba 	bl	800c580 <_malloc_r>
 800e40c:	b948      	cbnz	r0, 800e422 <__smakebuf_r+0x46>
 800e40e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e412:	059a      	lsls	r2, r3, #22
 800e414:	d4ee      	bmi.n	800e3f4 <__smakebuf_r+0x18>
 800e416:	f023 0303 	bic.w	r3, r3, #3
 800e41a:	f043 0302 	orr.w	r3, r3, #2
 800e41e:	81a3      	strh	r3, [r4, #12]
 800e420:	e7e2      	b.n	800e3e8 <__smakebuf_r+0xc>
 800e422:	89a3      	ldrh	r3, [r4, #12]
 800e424:	6020      	str	r0, [r4, #0]
 800e426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e42a:	81a3      	strh	r3, [r4, #12]
 800e42c:	9b01      	ldr	r3, [sp, #4]
 800e42e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e432:	b15b      	cbz	r3, 800e44c <__smakebuf_r+0x70>
 800e434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e438:	4630      	mov	r0, r6
 800e43a:	f000 f849 	bl	800e4d0 <_isatty_r>
 800e43e:	b128      	cbz	r0, 800e44c <__smakebuf_r+0x70>
 800e440:	89a3      	ldrh	r3, [r4, #12]
 800e442:	f023 0303 	bic.w	r3, r3, #3
 800e446:	f043 0301 	orr.w	r3, r3, #1
 800e44a:	81a3      	strh	r3, [r4, #12]
 800e44c:	89a3      	ldrh	r3, [r4, #12]
 800e44e:	431d      	orrs	r5, r3
 800e450:	81a5      	strh	r5, [r4, #12]
 800e452:	e7cf      	b.n	800e3f4 <__smakebuf_r+0x18>

0800e454 <memmove>:
 800e454:	4288      	cmp	r0, r1
 800e456:	b510      	push	{r4, lr}
 800e458:	eb01 0402 	add.w	r4, r1, r2
 800e45c:	d902      	bls.n	800e464 <memmove+0x10>
 800e45e:	4284      	cmp	r4, r0
 800e460:	4623      	mov	r3, r4
 800e462:	d807      	bhi.n	800e474 <memmove+0x20>
 800e464:	1e43      	subs	r3, r0, #1
 800e466:	42a1      	cmp	r1, r4
 800e468:	d008      	beq.n	800e47c <memmove+0x28>
 800e46a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e46e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e472:	e7f8      	b.n	800e466 <memmove+0x12>
 800e474:	4402      	add	r2, r0
 800e476:	4601      	mov	r1, r0
 800e478:	428a      	cmp	r2, r1
 800e47a:	d100      	bne.n	800e47e <memmove+0x2a>
 800e47c:	bd10      	pop	{r4, pc}
 800e47e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e482:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e486:	e7f7      	b.n	800e478 <memmove+0x24>

0800e488 <strncmp>:
 800e488:	b510      	push	{r4, lr}
 800e48a:	b16a      	cbz	r2, 800e4a8 <strncmp+0x20>
 800e48c:	3901      	subs	r1, #1
 800e48e:	1884      	adds	r4, r0, r2
 800e490:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e494:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e498:	429a      	cmp	r2, r3
 800e49a:	d103      	bne.n	800e4a4 <strncmp+0x1c>
 800e49c:	42a0      	cmp	r0, r4
 800e49e:	d001      	beq.n	800e4a4 <strncmp+0x1c>
 800e4a0:	2a00      	cmp	r2, #0
 800e4a2:	d1f5      	bne.n	800e490 <strncmp+0x8>
 800e4a4:	1ad0      	subs	r0, r2, r3
 800e4a6:	bd10      	pop	{r4, pc}
 800e4a8:	4610      	mov	r0, r2
 800e4aa:	e7fc      	b.n	800e4a6 <strncmp+0x1e>

0800e4ac <_fstat_r>:
 800e4ac:	b538      	push	{r3, r4, r5, lr}
 800e4ae:	4d07      	ldr	r5, [pc, #28]	@ (800e4cc <_fstat_r+0x20>)
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	4604      	mov	r4, r0
 800e4b4:	4608      	mov	r0, r1
 800e4b6:	4611      	mov	r1, r2
 800e4b8:	602b      	str	r3, [r5, #0]
 800e4ba:	f7f3 fbd7 	bl	8001c6c <_fstat>
 800e4be:	1c43      	adds	r3, r0, #1
 800e4c0:	d102      	bne.n	800e4c8 <_fstat_r+0x1c>
 800e4c2:	682b      	ldr	r3, [r5, #0]
 800e4c4:	b103      	cbz	r3, 800e4c8 <_fstat_r+0x1c>
 800e4c6:	6023      	str	r3, [r4, #0]
 800e4c8:	bd38      	pop	{r3, r4, r5, pc}
 800e4ca:	bf00      	nop
 800e4cc:	20004200 	.word	0x20004200

0800e4d0 <_isatty_r>:
 800e4d0:	b538      	push	{r3, r4, r5, lr}
 800e4d2:	4d06      	ldr	r5, [pc, #24]	@ (800e4ec <_isatty_r+0x1c>)
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	4604      	mov	r4, r0
 800e4d8:	4608      	mov	r0, r1
 800e4da:	602b      	str	r3, [r5, #0]
 800e4dc:	f7f3 fbd6 	bl	8001c8c <_isatty>
 800e4e0:	1c43      	adds	r3, r0, #1
 800e4e2:	d102      	bne.n	800e4ea <_isatty_r+0x1a>
 800e4e4:	682b      	ldr	r3, [r5, #0]
 800e4e6:	b103      	cbz	r3, 800e4ea <_isatty_r+0x1a>
 800e4e8:	6023      	str	r3, [r4, #0]
 800e4ea:	bd38      	pop	{r3, r4, r5, pc}
 800e4ec:	20004200 	.word	0x20004200

0800e4f0 <_sbrk_r>:
 800e4f0:	b538      	push	{r3, r4, r5, lr}
 800e4f2:	4d06      	ldr	r5, [pc, #24]	@ (800e50c <_sbrk_r+0x1c>)
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	4604      	mov	r4, r0
 800e4f8:	4608      	mov	r0, r1
 800e4fa:	602b      	str	r3, [r5, #0]
 800e4fc:	f7f3 fbde 	bl	8001cbc <_sbrk>
 800e500:	1c43      	adds	r3, r0, #1
 800e502:	d102      	bne.n	800e50a <_sbrk_r+0x1a>
 800e504:	682b      	ldr	r3, [r5, #0]
 800e506:	b103      	cbz	r3, 800e50a <_sbrk_r+0x1a>
 800e508:	6023      	str	r3, [r4, #0]
 800e50a:	bd38      	pop	{r3, r4, r5, pc}
 800e50c:	20004200 	.word	0x20004200

0800e510 <nan>:
 800e510:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e518 <nan+0x8>
 800e514:	4770      	bx	lr
 800e516:	bf00      	nop
 800e518:	00000000 	.word	0x00000000
 800e51c:	7ff80000 	.word	0x7ff80000

0800e520 <__assert_func>:
 800e520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e522:	4614      	mov	r4, r2
 800e524:	461a      	mov	r2, r3
 800e526:	4b09      	ldr	r3, [pc, #36]	@ (800e54c <__assert_func+0x2c>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4605      	mov	r5, r0
 800e52c:	68d8      	ldr	r0, [r3, #12]
 800e52e:	b954      	cbnz	r4, 800e546 <__assert_func+0x26>
 800e530:	4b07      	ldr	r3, [pc, #28]	@ (800e550 <__assert_func+0x30>)
 800e532:	461c      	mov	r4, r3
 800e534:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e538:	9100      	str	r1, [sp, #0]
 800e53a:	462b      	mov	r3, r5
 800e53c:	4905      	ldr	r1, [pc, #20]	@ (800e554 <__assert_func+0x34>)
 800e53e:	f000 fba7 	bl	800ec90 <fiprintf>
 800e542:	f000 fbb7 	bl	800ecb4 <abort>
 800e546:	4b04      	ldr	r3, [pc, #16]	@ (800e558 <__assert_func+0x38>)
 800e548:	e7f4      	b.n	800e534 <__assert_func+0x14>
 800e54a:	bf00      	nop
 800e54c:	20000020 	.word	0x20000020
 800e550:	0800f325 	.word	0x0800f325
 800e554:	0800f2f7 	.word	0x0800f2f7
 800e558:	0800f2ea 	.word	0x0800f2ea

0800e55c <_calloc_r>:
 800e55c:	b570      	push	{r4, r5, r6, lr}
 800e55e:	fba1 5402 	umull	r5, r4, r1, r2
 800e562:	b93c      	cbnz	r4, 800e574 <_calloc_r+0x18>
 800e564:	4629      	mov	r1, r5
 800e566:	f7fe f80b 	bl	800c580 <_malloc_r>
 800e56a:	4606      	mov	r6, r0
 800e56c:	b928      	cbnz	r0, 800e57a <_calloc_r+0x1e>
 800e56e:	2600      	movs	r6, #0
 800e570:	4630      	mov	r0, r6
 800e572:	bd70      	pop	{r4, r5, r6, pc}
 800e574:	220c      	movs	r2, #12
 800e576:	6002      	str	r2, [r0, #0]
 800e578:	e7f9      	b.n	800e56e <_calloc_r+0x12>
 800e57a:	462a      	mov	r2, r5
 800e57c:	4621      	mov	r1, r4
 800e57e:	f7fd f8a9 	bl	800b6d4 <memset>
 800e582:	e7f5      	b.n	800e570 <_calloc_r+0x14>

0800e584 <rshift>:
 800e584:	6903      	ldr	r3, [r0, #16]
 800e586:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e58a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e58e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e592:	f100 0414 	add.w	r4, r0, #20
 800e596:	dd45      	ble.n	800e624 <rshift+0xa0>
 800e598:	f011 011f 	ands.w	r1, r1, #31
 800e59c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e5a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e5a4:	d10c      	bne.n	800e5c0 <rshift+0x3c>
 800e5a6:	f100 0710 	add.w	r7, r0, #16
 800e5aa:	4629      	mov	r1, r5
 800e5ac:	42b1      	cmp	r1, r6
 800e5ae:	d334      	bcc.n	800e61a <rshift+0x96>
 800e5b0:	1a9b      	subs	r3, r3, r2
 800e5b2:	009b      	lsls	r3, r3, #2
 800e5b4:	1eea      	subs	r2, r5, #3
 800e5b6:	4296      	cmp	r6, r2
 800e5b8:	bf38      	it	cc
 800e5ba:	2300      	movcc	r3, #0
 800e5bc:	4423      	add	r3, r4
 800e5be:	e015      	b.n	800e5ec <rshift+0x68>
 800e5c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e5c4:	f1c1 0820 	rsb	r8, r1, #32
 800e5c8:	40cf      	lsrs	r7, r1
 800e5ca:	f105 0e04 	add.w	lr, r5, #4
 800e5ce:	46a1      	mov	r9, r4
 800e5d0:	4576      	cmp	r6, lr
 800e5d2:	46f4      	mov	ip, lr
 800e5d4:	d815      	bhi.n	800e602 <rshift+0x7e>
 800e5d6:	1a9a      	subs	r2, r3, r2
 800e5d8:	0092      	lsls	r2, r2, #2
 800e5da:	3a04      	subs	r2, #4
 800e5dc:	3501      	adds	r5, #1
 800e5de:	42ae      	cmp	r6, r5
 800e5e0:	bf38      	it	cc
 800e5e2:	2200      	movcc	r2, #0
 800e5e4:	18a3      	adds	r3, r4, r2
 800e5e6:	50a7      	str	r7, [r4, r2]
 800e5e8:	b107      	cbz	r7, 800e5ec <rshift+0x68>
 800e5ea:	3304      	adds	r3, #4
 800e5ec:	1b1a      	subs	r2, r3, r4
 800e5ee:	42a3      	cmp	r3, r4
 800e5f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e5f4:	bf08      	it	eq
 800e5f6:	2300      	moveq	r3, #0
 800e5f8:	6102      	str	r2, [r0, #16]
 800e5fa:	bf08      	it	eq
 800e5fc:	6143      	streq	r3, [r0, #20]
 800e5fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e602:	f8dc c000 	ldr.w	ip, [ip]
 800e606:	fa0c fc08 	lsl.w	ip, ip, r8
 800e60a:	ea4c 0707 	orr.w	r7, ip, r7
 800e60e:	f849 7b04 	str.w	r7, [r9], #4
 800e612:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e616:	40cf      	lsrs	r7, r1
 800e618:	e7da      	b.n	800e5d0 <rshift+0x4c>
 800e61a:	f851 cb04 	ldr.w	ip, [r1], #4
 800e61e:	f847 cf04 	str.w	ip, [r7, #4]!
 800e622:	e7c3      	b.n	800e5ac <rshift+0x28>
 800e624:	4623      	mov	r3, r4
 800e626:	e7e1      	b.n	800e5ec <rshift+0x68>

0800e628 <__hexdig_fun>:
 800e628:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e62c:	2b09      	cmp	r3, #9
 800e62e:	d802      	bhi.n	800e636 <__hexdig_fun+0xe>
 800e630:	3820      	subs	r0, #32
 800e632:	b2c0      	uxtb	r0, r0
 800e634:	4770      	bx	lr
 800e636:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e63a:	2b05      	cmp	r3, #5
 800e63c:	d801      	bhi.n	800e642 <__hexdig_fun+0x1a>
 800e63e:	3847      	subs	r0, #71	@ 0x47
 800e640:	e7f7      	b.n	800e632 <__hexdig_fun+0xa>
 800e642:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e646:	2b05      	cmp	r3, #5
 800e648:	d801      	bhi.n	800e64e <__hexdig_fun+0x26>
 800e64a:	3827      	subs	r0, #39	@ 0x27
 800e64c:	e7f1      	b.n	800e632 <__hexdig_fun+0xa>
 800e64e:	2000      	movs	r0, #0
 800e650:	4770      	bx	lr
	...

0800e654 <__gethex>:
 800e654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e658:	b085      	sub	sp, #20
 800e65a:	468a      	mov	sl, r1
 800e65c:	9302      	str	r3, [sp, #8]
 800e65e:	680b      	ldr	r3, [r1, #0]
 800e660:	9001      	str	r0, [sp, #4]
 800e662:	4690      	mov	r8, r2
 800e664:	1c9c      	adds	r4, r3, #2
 800e666:	46a1      	mov	r9, r4
 800e668:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e66c:	2830      	cmp	r0, #48	@ 0x30
 800e66e:	d0fa      	beq.n	800e666 <__gethex+0x12>
 800e670:	eba9 0303 	sub.w	r3, r9, r3
 800e674:	f1a3 0b02 	sub.w	fp, r3, #2
 800e678:	f7ff ffd6 	bl	800e628 <__hexdig_fun>
 800e67c:	4605      	mov	r5, r0
 800e67e:	2800      	cmp	r0, #0
 800e680:	d168      	bne.n	800e754 <__gethex+0x100>
 800e682:	49a0      	ldr	r1, [pc, #640]	@ (800e904 <__gethex+0x2b0>)
 800e684:	2201      	movs	r2, #1
 800e686:	4648      	mov	r0, r9
 800e688:	f7ff fefe 	bl	800e488 <strncmp>
 800e68c:	4607      	mov	r7, r0
 800e68e:	2800      	cmp	r0, #0
 800e690:	d167      	bne.n	800e762 <__gethex+0x10e>
 800e692:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e696:	4626      	mov	r6, r4
 800e698:	f7ff ffc6 	bl	800e628 <__hexdig_fun>
 800e69c:	2800      	cmp	r0, #0
 800e69e:	d062      	beq.n	800e766 <__gethex+0x112>
 800e6a0:	4623      	mov	r3, r4
 800e6a2:	7818      	ldrb	r0, [r3, #0]
 800e6a4:	2830      	cmp	r0, #48	@ 0x30
 800e6a6:	4699      	mov	r9, r3
 800e6a8:	f103 0301 	add.w	r3, r3, #1
 800e6ac:	d0f9      	beq.n	800e6a2 <__gethex+0x4e>
 800e6ae:	f7ff ffbb 	bl	800e628 <__hexdig_fun>
 800e6b2:	fab0 f580 	clz	r5, r0
 800e6b6:	096d      	lsrs	r5, r5, #5
 800e6b8:	f04f 0b01 	mov.w	fp, #1
 800e6bc:	464a      	mov	r2, r9
 800e6be:	4616      	mov	r6, r2
 800e6c0:	3201      	adds	r2, #1
 800e6c2:	7830      	ldrb	r0, [r6, #0]
 800e6c4:	f7ff ffb0 	bl	800e628 <__hexdig_fun>
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	d1f8      	bne.n	800e6be <__gethex+0x6a>
 800e6cc:	498d      	ldr	r1, [pc, #564]	@ (800e904 <__gethex+0x2b0>)
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	4630      	mov	r0, r6
 800e6d2:	f7ff fed9 	bl	800e488 <strncmp>
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	d13f      	bne.n	800e75a <__gethex+0x106>
 800e6da:	b944      	cbnz	r4, 800e6ee <__gethex+0x9a>
 800e6dc:	1c74      	adds	r4, r6, #1
 800e6de:	4622      	mov	r2, r4
 800e6e0:	4616      	mov	r6, r2
 800e6e2:	3201      	adds	r2, #1
 800e6e4:	7830      	ldrb	r0, [r6, #0]
 800e6e6:	f7ff ff9f 	bl	800e628 <__hexdig_fun>
 800e6ea:	2800      	cmp	r0, #0
 800e6ec:	d1f8      	bne.n	800e6e0 <__gethex+0x8c>
 800e6ee:	1ba4      	subs	r4, r4, r6
 800e6f0:	00a7      	lsls	r7, r4, #2
 800e6f2:	7833      	ldrb	r3, [r6, #0]
 800e6f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e6f8:	2b50      	cmp	r3, #80	@ 0x50
 800e6fa:	d13e      	bne.n	800e77a <__gethex+0x126>
 800e6fc:	7873      	ldrb	r3, [r6, #1]
 800e6fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800e700:	d033      	beq.n	800e76a <__gethex+0x116>
 800e702:	2b2d      	cmp	r3, #45	@ 0x2d
 800e704:	d034      	beq.n	800e770 <__gethex+0x11c>
 800e706:	1c71      	adds	r1, r6, #1
 800e708:	2400      	movs	r4, #0
 800e70a:	7808      	ldrb	r0, [r1, #0]
 800e70c:	f7ff ff8c 	bl	800e628 <__hexdig_fun>
 800e710:	1e43      	subs	r3, r0, #1
 800e712:	b2db      	uxtb	r3, r3
 800e714:	2b18      	cmp	r3, #24
 800e716:	d830      	bhi.n	800e77a <__gethex+0x126>
 800e718:	f1a0 0210 	sub.w	r2, r0, #16
 800e71c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e720:	f7ff ff82 	bl	800e628 <__hexdig_fun>
 800e724:	f100 3cff 	add.w	ip, r0, #4294967295
 800e728:	fa5f fc8c 	uxtb.w	ip, ip
 800e72c:	f1bc 0f18 	cmp.w	ip, #24
 800e730:	f04f 030a 	mov.w	r3, #10
 800e734:	d91e      	bls.n	800e774 <__gethex+0x120>
 800e736:	b104      	cbz	r4, 800e73a <__gethex+0xe6>
 800e738:	4252      	negs	r2, r2
 800e73a:	4417      	add	r7, r2
 800e73c:	f8ca 1000 	str.w	r1, [sl]
 800e740:	b1ed      	cbz	r5, 800e77e <__gethex+0x12a>
 800e742:	f1bb 0f00 	cmp.w	fp, #0
 800e746:	bf0c      	ite	eq
 800e748:	2506      	moveq	r5, #6
 800e74a:	2500      	movne	r5, #0
 800e74c:	4628      	mov	r0, r5
 800e74e:	b005      	add	sp, #20
 800e750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e754:	2500      	movs	r5, #0
 800e756:	462c      	mov	r4, r5
 800e758:	e7b0      	b.n	800e6bc <__gethex+0x68>
 800e75a:	2c00      	cmp	r4, #0
 800e75c:	d1c7      	bne.n	800e6ee <__gethex+0x9a>
 800e75e:	4627      	mov	r7, r4
 800e760:	e7c7      	b.n	800e6f2 <__gethex+0x9e>
 800e762:	464e      	mov	r6, r9
 800e764:	462f      	mov	r7, r5
 800e766:	2501      	movs	r5, #1
 800e768:	e7c3      	b.n	800e6f2 <__gethex+0x9e>
 800e76a:	2400      	movs	r4, #0
 800e76c:	1cb1      	adds	r1, r6, #2
 800e76e:	e7cc      	b.n	800e70a <__gethex+0xb6>
 800e770:	2401      	movs	r4, #1
 800e772:	e7fb      	b.n	800e76c <__gethex+0x118>
 800e774:	fb03 0002 	mla	r0, r3, r2, r0
 800e778:	e7ce      	b.n	800e718 <__gethex+0xc4>
 800e77a:	4631      	mov	r1, r6
 800e77c:	e7de      	b.n	800e73c <__gethex+0xe8>
 800e77e:	eba6 0309 	sub.w	r3, r6, r9
 800e782:	3b01      	subs	r3, #1
 800e784:	4629      	mov	r1, r5
 800e786:	2b07      	cmp	r3, #7
 800e788:	dc0a      	bgt.n	800e7a0 <__gethex+0x14c>
 800e78a:	9801      	ldr	r0, [sp, #4]
 800e78c:	f7fd ff84 	bl	800c698 <_Balloc>
 800e790:	4604      	mov	r4, r0
 800e792:	b940      	cbnz	r0, 800e7a6 <__gethex+0x152>
 800e794:	4b5c      	ldr	r3, [pc, #368]	@ (800e908 <__gethex+0x2b4>)
 800e796:	4602      	mov	r2, r0
 800e798:	21e4      	movs	r1, #228	@ 0xe4
 800e79a:	485c      	ldr	r0, [pc, #368]	@ (800e90c <__gethex+0x2b8>)
 800e79c:	f7ff fec0 	bl	800e520 <__assert_func>
 800e7a0:	3101      	adds	r1, #1
 800e7a2:	105b      	asrs	r3, r3, #1
 800e7a4:	e7ef      	b.n	800e786 <__gethex+0x132>
 800e7a6:	f100 0a14 	add.w	sl, r0, #20
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	4655      	mov	r5, sl
 800e7ae:	469b      	mov	fp, r3
 800e7b0:	45b1      	cmp	r9, r6
 800e7b2:	d337      	bcc.n	800e824 <__gethex+0x1d0>
 800e7b4:	f845 bb04 	str.w	fp, [r5], #4
 800e7b8:	eba5 050a 	sub.w	r5, r5, sl
 800e7bc:	10ad      	asrs	r5, r5, #2
 800e7be:	6125      	str	r5, [r4, #16]
 800e7c0:	4658      	mov	r0, fp
 800e7c2:	f7fe f85b 	bl	800c87c <__hi0bits>
 800e7c6:	016d      	lsls	r5, r5, #5
 800e7c8:	f8d8 6000 	ldr.w	r6, [r8]
 800e7cc:	1a2d      	subs	r5, r5, r0
 800e7ce:	42b5      	cmp	r5, r6
 800e7d0:	dd54      	ble.n	800e87c <__gethex+0x228>
 800e7d2:	1bad      	subs	r5, r5, r6
 800e7d4:	4629      	mov	r1, r5
 800e7d6:	4620      	mov	r0, r4
 800e7d8:	f7fe fbef 	bl	800cfba <__any_on>
 800e7dc:	4681      	mov	r9, r0
 800e7de:	b178      	cbz	r0, 800e800 <__gethex+0x1ac>
 800e7e0:	1e6b      	subs	r3, r5, #1
 800e7e2:	1159      	asrs	r1, r3, #5
 800e7e4:	f003 021f 	and.w	r2, r3, #31
 800e7e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e7ec:	f04f 0901 	mov.w	r9, #1
 800e7f0:	fa09 f202 	lsl.w	r2, r9, r2
 800e7f4:	420a      	tst	r2, r1
 800e7f6:	d003      	beq.n	800e800 <__gethex+0x1ac>
 800e7f8:	454b      	cmp	r3, r9
 800e7fa:	dc36      	bgt.n	800e86a <__gethex+0x216>
 800e7fc:	f04f 0902 	mov.w	r9, #2
 800e800:	4629      	mov	r1, r5
 800e802:	4620      	mov	r0, r4
 800e804:	f7ff febe 	bl	800e584 <rshift>
 800e808:	442f      	add	r7, r5
 800e80a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e80e:	42bb      	cmp	r3, r7
 800e810:	da42      	bge.n	800e898 <__gethex+0x244>
 800e812:	9801      	ldr	r0, [sp, #4]
 800e814:	4621      	mov	r1, r4
 800e816:	f7fd ff7f 	bl	800c718 <_Bfree>
 800e81a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e81c:	2300      	movs	r3, #0
 800e81e:	6013      	str	r3, [r2, #0]
 800e820:	25a3      	movs	r5, #163	@ 0xa3
 800e822:	e793      	b.n	800e74c <__gethex+0xf8>
 800e824:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e828:	2a2e      	cmp	r2, #46	@ 0x2e
 800e82a:	d012      	beq.n	800e852 <__gethex+0x1fe>
 800e82c:	2b20      	cmp	r3, #32
 800e82e:	d104      	bne.n	800e83a <__gethex+0x1e6>
 800e830:	f845 bb04 	str.w	fp, [r5], #4
 800e834:	f04f 0b00 	mov.w	fp, #0
 800e838:	465b      	mov	r3, fp
 800e83a:	7830      	ldrb	r0, [r6, #0]
 800e83c:	9303      	str	r3, [sp, #12]
 800e83e:	f7ff fef3 	bl	800e628 <__hexdig_fun>
 800e842:	9b03      	ldr	r3, [sp, #12]
 800e844:	f000 000f 	and.w	r0, r0, #15
 800e848:	4098      	lsls	r0, r3
 800e84a:	ea4b 0b00 	orr.w	fp, fp, r0
 800e84e:	3304      	adds	r3, #4
 800e850:	e7ae      	b.n	800e7b0 <__gethex+0x15c>
 800e852:	45b1      	cmp	r9, r6
 800e854:	d8ea      	bhi.n	800e82c <__gethex+0x1d8>
 800e856:	492b      	ldr	r1, [pc, #172]	@ (800e904 <__gethex+0x2b0>)
 800e858:	9303      	str	r3, [sp, #12]
 800e85a:	2201      	movs	r2, #1
 800e85c:	4630      	mov	r0, r6
 800e85e:	f7ff fe13 	bl	800e488 <strncmp>
 800e862:	9b03      	ldr	r3, [sp, #12]
 800e864:	2800      	cmp	r0, #0
 800e866:	d1e1      	bne.n	800e82c <__gethex+0x1d8>
 800e868:	e7a2      	b.n	800e7b0 <__gethex+0x15c>
 800e86a:	1ea9      	subs	r1, r5, #2
 800e86c:	4620      	mov	r0, r4
 800e86e:	f7fe fba4 	bl	800cfba <__any_on>
 800e872:	2800      	cmp	r0, #0
 800e874:	d0c2      	beq.n	800e7fc <__gethex+0x1a8>
 800e876:	f04f 0903 	mov.w	r9, #3
 800e87a:	e7c1      	b.n	800e800 <__gethex+0x1ac>
 800e87c:	da09      	bge.n	800e892 <__gethex+0x23e>
 800e87e:	1b75      	subs	r5, r6, r5
 800e880:	4621      	mov	r1, r4
 800e882:	9801      	ldr	r0, [sp, #4]
 800e884:	462a      	mov	r2, r5
 800e886:	f7fe f95f 	bl	800cb48 <__lshift>
 800e88a:	1b7f      	subs	r7, r7, r5
 800e88c:	4604      	mov	r4, r0
 800e88e:	f100 0a14 	add.w	sl, r0, #20
 800e892:	f04f 0900 	mov.w	r9, #0
 800e896:	e7b8      	b.n	800e80a <__gethex+0x1b6>
 800e898:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e89c:	42bd      	cmp	r5, r7
 800e89e:	dd6f      	ble.n	800e980 <__gethex+0x32c>
 800e8a0:	1bed      	subs	r5, r5, r7
 800e8a2:	42ae      	cmp	r6, r5
 800e8a4:	dc34      	bgt.n	800e910 <__gethex+0x2bc>
 800e8a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e8aa:	2b02      	cmp	r3, #2
 800e8ac:	d022      	beq.n	800e8f4 <__gethex+0x2a0>
 800e8ae:	2b03      	cmp	r3, #3
 800e8b0:	d024      	beq.n	800e8fc <__gethex+0x2a8>
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d115      	bne.n	800e8e2 <__gethex+0x28e>
 800e8b6:	42ae      	cmp	r6, r5
 800e8b8:	d113      	bne.n	800e8e2 <__gethex+0x28e>
 800e8ba:	2e01      	cmp	r6, #1
 800e8bc:	d10b      	bne.n	800e8d6 <__gethex+0x282>
 800e8be:	9a02      	ldr	r2, [sp, #8]
 800e8c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e8c4:	6013      	str	r3, [r2, #0]
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	6123      	str	r3, [r4, #16]
 800e8ca:	f8ca 3000 	str.w	r3, [sl]
 800e8ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8d0:	2562      	movs	r5, #98	@ 0x62
 800e8d2:	601c      	str	r4, [r3, #0]
 800e8d4:	e73a      	b.n	800e74c <__gethex+0xf8>
 800e8d6:	1e71      	subs	r1, r6, #1
 800e8d8:	4620      	mov	r0, r4
 800e8da:	f7fe fb6e 	bl	800cfba <__any_on>
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	d1ed      	bne.n	800e8be <__gethex+0x26a>
 800e8e2:	9801      	ldr	r0, [sp, #4]
 800e8e4:	4621      	mov	r1, r4
 800e8e6:	f7fd ff17 	bl	800c718 <_Bfree>
 800e8ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	6013      	str	r3, [r2, #0]
 800e8f0:	2550      	movs	r5, #80	@ 0x50
 800e8f2:	e72b      	b.n	800e74c <__gethex+0xf8>
 800e8f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d1f3      	bne.n	800e8e2 <__gethex+0x28e>
 800e8fa:	e7e0      	b.n	800e8be <__gethex+0x26a>
 800e8fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d1dd      	bne.n	800e8be <__gethex+0x26a>
 800e902:	e7ee      	b.n	800e8e2 <__gethex+0x28e>
 800e904:	0800f178 	.word	0x0800f178
 800e908:	0800f00d 	.word	0x0800f00d
 800e90c:	0800f326 	.word	0x0800f326
 800e910:	1e6f      	subs	r7, r5, #1
 800e912:	f1b9 0f00 	cmp.w	r9, #0
 800e916:	d130      	bne.n	800e97a <__gethex+0x326>
 800e918:	b127      	cbz	r7, 800e924 <__gethex+0x2d0>
 800e91a:	4639      	mov	r1, r7
 800e91c:	4620      	mov	r0, r4
 800e91e:	f7fe fb4c 	bl	800cfba <__any_on>
 800e922:	4681      	mov	r9, r0
 800e924:	117a      	asrs	r2, r7, #5
 800e926:	2301      	movs	r3, #1
 800e928:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e92c:	f007 071f 	and.w	r7, r7, #31
 800e930:	40bb      	lsls	r3, r7
 800e932:	4213      	tst	r3, r2
 800e934:	4629      	mov	r1, r5
 800e936:	4620      	mov	r0, r4
 800e938:	bf18      	it	ne
 800e93a:	f049 0902 	orrne.w	r9, r9, #2
 800e93e:	f7ff fe21 	bl	800e584 <rshift>
 800e942:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e946:	1b76      	subs	r6, r6, r5
 800e948:	2502      	movs	r5, #2
 800e94a:	f1b9 0f00 	cmp.w	r9, #0
 800e94e:	d047      	beq.n	800e9e0 <__gethex+0x38c>
 800e950:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e954:	2b02      	cmp	r3, #2
 800e956:	d015      	beq.n	800e984 <__gethex+0x330>
 800e958:	2b03      	cmp	r3, #3
 800e95a:	d017      	beq.n	800e98c <__gethex+0x338>
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d109      	bne.n	800e974 <__gethex+0x320>
 800e960:	f019 0f02 	tst.w	r9, #2
 800e964:	d006      	beq.n	800e974 <__gethex+0x320>
 800e966:	f8da 3000 	ldr.w	r3, [sl]
 800e96a:	ea49 0903 	orr.w	r9, r9, r3
 800e96e:	f019 0f01 	tst.w	r9, #1
 800e972:	d10e      	bne.n	800e992 <__gethex+0x33e>
 800e974:	f045 0510 	orr.w	r5, r5, #16
 800e978:	e032      	b.n	800e9e0 <__gethex+0x38c>
 800e97a:	f04f 0901 	mov.w	r9, #1
 800e97e:	e7d1      	b.n	800e924 <__gethex+0x2d0>
 800e980:	2501      	movs	r5, #1
 800e982:	e7e2      	b.n	800e94a <__gethex+0x2f6>
 800e984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e986:	f1c3 0301 	rsb	r3, r3, #1
 800e98a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e98c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d0f0      	beq.n	800e974 <__gethex+0x320>
 800e992:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e996:	f104 0314 	add.w	r3, r4, #20
 800e99a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e99e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e9a2:	f04f 0c00 	mov.w	ip, #0
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e9b0:	d01b      	beq.n	800e9ea <__gethex+0x396>
 800e9b2:	3201      	adds	r2, #1
 800e9b4:	6002      	str	r2, [r0, #0]
 800e9b6:	2d02      	cmp	r5, #2
 800e9b8:	f104 0314 	add.w	r3, r4, #20
 800e9bc:	d13c      	bne.n	800ea38 <__gethex+0x3e4>
 800e9be:	f8d8 2000 	ldr.w	r2, [r8]
 800e9c2:	3a01      	subs	r2, #1
 800e9c4:	42b2      	cmp	r2, r6
 800e9c6:	d109      	bne.n	800e9dc <__gethex+0x388>
 800e9c8:	1171      	asrs	r1, r6, #5
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e9d0:	f006 061f 	and.w	r6, r6, #31
 800e9d4:	fa02 f606 	lsl.w	r6, r2, r6
 800e9d8:	421e      	tst	r6, r3
 800e9da:	d13a      	bne.n	800ea52 <__gethex+0x3fe>
 800e9dc:	f045 0520 	orr.w	r5, r5, #32
 800e9e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9e2:	601c      	str	r4, [r3, #0]
 800e9e4:	9b02      	ldr	r3, [sp, #8]
 800e9e6:	601f      	str	r7, [r3, #0]
 800e9e8:	e6b0      	b.n	800e74c <__gethex+0xf8>
 800e9ea:	4299      	cmp	r1, r3
 800e9ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800e9f0:	d8d9      	bhi.n	800e9a6 <__gethex+0x352>
 800e9f2:	68a3      	ldr	r3, [r4, #8]
 800e9f4:	459b      	cmp	fp, r3
 800e9f6:	db17      	blt.n	800ea28 <__gethex+0x3d4>
 800e9f8:	6861      	ldr	r1, [r4, #4]
 800e9fa:	9801      	ldr	r0, [sp, #4]
 800e9fc:	3101      	adds	r1, #1
 800e9fe:	f7fd fe4b 	bl	800c698 <_Balloc>
 800ea02:	4681      	mov	r9, r0
 800ea04:	b918      	cbnz	r0, 800ea0e <__gethex+0x3ba>
 800ea06:	4b1a      	ldr	r3, [pc, #104]	@ (800ea70 <__gethex+0x41c>)
 800ea08:	4602      	mov	r2, r0
 800ea0a:	2184      	movs	r1, #132	@ 0x84
 800ea0c:	e6c5      	b.n	800e79a <__gethex+0x146>
 800ea0e:	6922      	ldr	r2, [r4, #16]
 800ea10:	3202      	adds	r2, #2
 800ea12:	f104 010c 	add.w	r1, r4, #12
 800ea16:	0092      	lsls	r2, r2, #2
 800ea18:	300c      	adds	r0, #12
 800ea1a:	f7fc feda 	bl	800b7d2 <memcpy>
 800ea1e:	4621      	mov	r1, r4
 800ea20:	9801      	ldr	r0, [sp, #4]
 800ea22:	f7fd fe79 	bl	800c718 <_Bfree>
 800ea26:	464c      	mov	r4, r9
 800ea28:	6923      	ldr	r3, [r4, #16]
 800ea2a:	1c5a      	adds	r2, r3, #1
 800ea2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ea30:	6122      	str	r2, [r4, #16]
 800ea32:	2201      	movs	r2, #1
 800ea34:	615a      	str	r2, [r3, #20]
 800ea36:	e7be      	b.n	800e9b6 <__gethex+0x362>
 800ea38:	6922      	ldr	r2, [r4, #16]
 800ea3a:	455a      	cmp	r2, fp
 800ea3c:	dd0b      	ble.n	800ea56 <__gethex+0x402>
 800ea3e:	2101      	movs	r1, #1
 800ea40:	4620      	mov	r0, r4
 800ea42:	f7ff fd9f 	bl	800e584 <rshift>
 800ea46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea4a:	3701      	adds	r7, #1
 800ea4c:	42bb      	cmp	r3, r7
 800ea4e:	f6ff aee0 	blt.w	800e812 <__gethex+0x1be>
 800ea52:	2501      	movs	r5, #1
 800ea54:	e7c2      	b.n	800e9dc <__gethex+0x388>
 800ea56:	f016 061f 	ands.w	r6, r6, #31
 800ea5a:	d0fa      	beq.n	800ea52 <__gethex+0x3fe>
 800ea5c:	4453      	add	r3, sl
 800ea5e:	f1c6 0620 	rsb	r6, r6, #32
 800ea62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ea66:	f7fd ff09 	bl	800c87c <__hi0bits>
 800ea6a:	42b0      	cmp	r0, r6
 800ea6c:	dbe7      	blt.n	800ea3e <__gethex+0x3ea>
 800ea6e:	e7f0      	b.n	800ea52 <__gethex+0x3fe>
 800ea70:	0800f00d 	.word	0x0800f00d

0800ea74 <L_shift>:
 800ea74:	f1c2 0208 	rsb	r2, r2, #8
 800ea78:	0092      	lsls	r2, r2, #2
 800ea7a:	b570      	push	{r4, r5, r6, lr}
 800ea7c:	f1c2 0620 	rsb	r6, r2, #32
 800ea80:	6843      	ldr	r3, [r0, #4]
 800ea82:	6804      	ldr	r4, [r0, #0]
 800ea84:	fa03 f506 	lsl.w	r5, r3, r6
 800ea88:	432c      	orrs	r4, r5
 800ea8a:	40d3      	lsrs	r3, r2
 800ea8c:	6004      	str	r4, [r0, #0]
 800ea8e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ea92:	4288      	cmp	r0, r1
 800ea94:	d3f4      	bcc.n	800ea80 <L_shift+0xc>
 800ea96:	bd70      	pop	{r4, r5, r6, pc}

0800ea98 <__match>:
 800ea98:	b530      	push	{r4, r5, lr}
 800ea9a:	6803      	ldr	r3, [r0, #0]
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eaa2:	b914      	cbnz	r4, 800eaaa <__match+0x12>
 800eaa4:	6003      	str	r3, [r0, #0]
 800eaa6:	2001      	movs	r0, #1
 800eaa8:	bd30      	pop	{r4, r5, pc}
 800eaaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eaae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800eab2:	2d19      	cmp	r5, #25
 800eab4:	bf98      	it	ls
 800eab6:	3220      	addls	r2, #32
 800eab8:	42a2      	cmp	r2, r4
 800eaba:	d0f0      	beq.n	800ea9e <__match+0x6>
 800eabc:	2000      	movs	r0, #0
 800eabe:	e7f3      	b.n	800eaa8 <__match+0x10>

0800eac0 <__hexnan>:
 800eac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac4:	680b      	ldr	r3, [r1, #0]
 800eac6:	6801      	ldr	r1, [r0, #0]
 800eac8:	115e      	asrs	r6, r3, #5
 800eaca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eace:	f013 031f 	ands.w	r3, r3, #31
 800ead2:	b087      	sub	sp, #28
 800ead4:	bf18      	it	ne
 800ead6:	3604      	addne	r6, #4
 800ead8:	2500      	movs	r5, #0
 800eada:	1f37      	subs	r7, r6, #4
 800eadc:	4682      	mov	sl, r0
 800eade:	4690      	mov	r8, r2
 800eae0:	9301      	str	r3, [sp, #4]
 800eae2:	f846 5c04 	str.w	r5, [r6, #-4]
 800eae6:	46b9      	mov	r9, r7
 800eae8:	463c      	mov	r4, r7
 800eaea:	9502      	str	r5, [sp, #8]
 800eaec:	46ab      	mov	fp, r5
 800eaee:	784a      	ldrb	r2, [r1, #1]
 800eaf0:	1c4b      	adds	r3, r1, #1
 800eaf2:	9303      	str	r3, [sp, #12]
 800eaf4:	b342      	cbz	r2, 800eb48 <__hexnan+0x88>
 800eaf6:	4610      	mov	r0, r2
 800eaf8:	9105      	str	r1, [sp, #20]
 800eafa:	9204      	str	r2, [sp, #16]
 800eafc:	f7ff fd94 	bl	800e628 <__hexdig_fun>
 800eb00:	2800      	cmp	r0, #0
 800eb02:	d151      	bne.n	800eba8 <__hexnan+0xe8>
 800eb04:	9a04      	ldr	r2, [sp, #16]
 800eb06:	9905      	ldr	r1, [sp, #20]
 800eb08:	2a20      	cmp	r2, #32
 800eb0a:	d818      	bhi.n	800eb3e <__hexnan+0x7e>
 800eb0c:	9b02      	ldr	r3, [sp, #8]
 800eb0e:	459b      	cmp	fp, r3
 800eb10:	dd13      	ble.n	800eb3a <__hexnan+0x7a>
 800eb12:	454c      	cmp	r4, r9
 800eb14:	d206      	bcs.n	800eb24 <__hexnan+0x64>
 800eb16:	2d07      	cmp	r5, #7
 800eb18:	dc04      	bgt.n	800eb24 <__hexnan+0x64>
 800eb1a:	462a      	mov	r2, r5
 800eb1c:	4649      	mov	r1, r9
 800eb1e:	4620      	mov	r0, r4
 800eb20:	f7ff ffa8 	bl	800ea74 <L_shift>
 800eb24:	4544      	cmp	r4, r8
 800eb26:	d952      	bls.n	800ebce <__hexnan+0x10e>
 800eb28:	2300      	movs	r3, #0
 800eb2a:	f1a4 0904 	sub.w	r9, r4, #4
 800eb2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800eb32:	f8cd b008 	str.w	fp, [sp, #8]
 800eb36:	464c      	mov	r4, r9
 800eb38:	461d      	mov	r5, r3
 800eb3a:	9903      	ldr	r1, [sp, #12]
 800eb3c:	e7d7      	b.n	800eaee <__hexnan+0x2e>
 800eb3e:	2a29      	cmp	r2, #41	@ 0x29
 800eb40:	d157      	bne.n	800ebf2 <__hexnan+0x132>
 800eb42:	3102      	adds	r1, #2
 800eb44:	f8ca 1000 	str.w	r1, [sl]
 800eb48:	f1bb 0f00 	cmp.w	fp, #0
 800eb4c:	d051      	beq.n	800ebf2 <__hexnan+0x132>
 800eb4e:	454c      	cmp	r4, r9
 800eb50:	d206      	bcs.n	800eb60 <__hexnan+0xa0>
 800eb52:	2d07      	cmp	r5, #7
 800eb54:	dc04      	bgt.n	800eb60 <__hexnan+0xa0>
 800eb56:	462a      	mov	r2, r5
 800eb58:	4649      	mov	r1, r9
 800eb5a:	4620      	mov	r0, r4
 800eb5c:	f7ff ff8a 	bl	800ea74 <L_shift>
 800eb60:	4544      	cmp	r4, r8
 800eb62:	d936      	bls.n	800ebd2 <__hexnan+0x112>
 800eb64:	f1a8 0204 	sub.w	r2, r8, #4
 800eb68:	4623      	mov	r3, r4
 800eb6a:	f853 1b04 	ldr.w	r1, [r3], #4
 800eb6e:	f842 1f04 	str.w	r1, [r2, #4]!
 800eb72:	429f      	cmp	r7, r3
 800eb74:	d2f9      	bcs.n	800eb6a <__hexnan+0xaa>
 800eb76:	1b3b      	subs	r3, r7, r4
 800eb78:	f023 0303 	bic.w	r3, r3, #3
 800eb7c:	3304      	adds	r3, #4
 800eb7e:	3401      	adds	r4, #1
 800eb80:	3e03      	subs	r6, #3
 800eb82:	42b4      	cmp	r4, r6
 800eb84:	bf88      	it	hi
 800eb86:	2304      	movhi	r3, #4
 800eb88:	4443      	add	r3, r8
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f843 2b04 	str.w	r2, [r3], #4
 800eb90:	429f      	cmp	r7, r3
 800eb92:	d2fb      	bcs.n	800eb8c <__hexnan+0xcc>
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	b91b      	cbnz	r3, 800eba0 <__hexnan+0xe0>
 800eb98:	4547      	cmp	r7, r8
 800eb9a:	d128      	bne.n	800ebee <__hexnan+0x12e>
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	603b      	str	r3, [r7, #0]
 800eba0:	2005      	movs	r0, #5
 800eba2:	b007      	add	sp, #28
 800eba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eba8:	3501      	adds	r5, #1
 800ebaa:	2d08      	cmp	r5, #8
 800ebac:	f10b 0b01 	add.w	fp, fp, #1
 800ebb0:	dd06      	ble.n	800ebc0 <__hexnan+0x100>
 800ebb2:	4544      	cmp	r4, r8
 800ebb4:	d9c1      	bls.n	800eb3a <__hexnan+0x7a>
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	f844 3c04 	str.w	r3, [r4, #-4]
 800ebbc:	2501      	movs	r5, #1
 800ebbe:	3c04      	subs	r4, #4
 800ebc0:	6822      	ldr	r2, [r4, #0]
 800ebc2:	f000 000f 	and.w	r0, r0, #15
 800ebc6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ebca:	6020      	str	r0, [r4, #0]
 800ebcc:	e7b5      	b.n	800eb3a <__hexnan+0x7a>
 800ebce:	2508      	movs	r5, #8
 800ebd0:	e7b3      	b.n	800eb3a <__hexnan+0x7a>
 800ebd2:	9b01      	ldr	r3, [sp, #4]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d0dd      	beq.n	800eb94 <__hexnan+0xd4>
 800ebd8:	f1c3 0320 	rsb	r3, r3, #32
 800ebdc:	f04f 32ff 	mov.w	r2, #4294967295
 800ebe0:	40da      	lsrs	r2, r3
 800ebe2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ebe6:	4013      	ands	r3, r2
 800ebe8:	f846 3c04 	str.w	r3, [r6, #-4]
 800ebec:	e7d2      	b.n	800eb94 <__hexnan+0xd4>
 800ebee:	3f04      	subs	r7, #4
 800ebf0:	e7d0      	b.n	800eb94 <__hexnan+0xd4>
 800ebf2:	2004      	movs	r0, #4
 800ebf4:	e7d5      	b.n	800eba2 <__hexnan+0xe2>

0800ebf6 <__ascii_mbtowc>:
 800ebf6:	b082      	sub	sp, #8
 800ebf8:	b901      	cbnz	r1, 800ebfc <__ascii_mbtowc+0x6>
 800ebfa:	a901      	add	r1, sp, #4
 800ebfc:	b142      	cbz	r2, 800ec10 <__ascii_mbtowc+0x1a>
 800ebfe:	b14b      	cbz	r3, 800ec14 <__ascii_mbtowc+0x1e>
 800ec00:	7813      	ldrb	r3, [r2, #0]
 800ec02:	600b      	str	r3, [r1, #0]
 800ec04:	7812      	ldrb	r2, [r2, #0]
 800ec06:	1e10      	subs	r0, r2, #0
 800ec08:	bf18      	it	ne
 800ec0a:	2001      	movne	r0, #1
 800ec0c:	b002      	add	sp, #8
 800ec0e:	4770      	bx	lr
 800ec10:	4610      	mov	r0, r2
 800ec12:	e7fb      	b.n	800ec0c <__ascii_mbtowc+0x16>
 800ec14:	f06f 0001 	mvn.w	r0, #1
 800ec18:	e7f8      	b.n	800ec0c <__ascii_mbtowc+0x16>

0800ec1a <_realloc_r>:
 800ec1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec1e:	4680      	mov	r8, r0
 800ec20:	4615      	mov	r5, r2
 800ec22:	460c      	mov	r4, r1
 800ec24:	b921      	cbnz	r1, 800ec30 <_realloc_r+0x16>
 800ec26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec2a:	4611      	mov	r1, r2
 800ec2c:	f7fd bca8 	b.w	800c580 <_malloc_r>
 800ec30:	b92a      	cbnz	r2, 800ec3e <_realloc_r+0x24>
 800ec32:	f7fd fc31 	bl	800c498 <_free_r>
 800ec36:	2400      	movs	r4, #0
 800ec38:	4620      	mov	r0, r4
 800ec3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec3e:	f000 f840 	bl	800ecc2 <_malloc_usable_size_r>
 800ec42:	4285      	cmp	r5, r0
 800ec44:	4606      	mov	r6, r0
 800ec46:	d802      	bhi.n	800ec4e <_realloc_r+0x34>
 800ec48:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ec4c:	d8f4      	bhi.n	800ec38 <_realloc_r+0x1e>
 800ec4e:	4629      	mov	r1, r5
 800ec50:	4640      	mov	r0, r8
 800ec52:	f7fd fc95 	bl	800c580 <_malloc_r>
 800ec56:	4607      	mov	r7, r0
 800ec58:	2800      	cmp	r0, #0
 800ec5a:	d0ec      	beq.n	800ec36 <_realloc_r+0x1c>
 800ec5c:	42b5      	cmp	r5, r6
 800ec5e:	462a      	mov	r2, r5
 800ec60:	4621      	mov	r1, r4
 800ec62:	bf28      	it	cs
 800ec64:	4632      	movcs	r2, r6
 800ec66:	f7fc fdb4 	bl	800b7d2 <memcpy>
 800ec6a:	4621      	mov	r1, r4
 800ec6c:	4640      	mov	r0, r8
 800ec6e:	f7fd fc13 	bl	800c498 <_free_r>
 800ec72:	463c      	mov	r4, r7
 800ec74:	e7e0      	b.n	800ec38 <_realloc_r+0x1e>

0800ec76 <__ascii_wctomb>:
 800ec76:	4603      	mov	r3, r0
 800ec78:	4608      	mov	r0, r1
 800ec7a:	b141      	cbz	r1, 800ec8e <__ascii_wctomb+0x18>
 800ec7c:	2aff      	cmp	r2, #255	@ 0xff
 800ec7e:	d904      	bls.n	800ec8a <__ascii_wctomb+0x14>
 800ec80:	228a      	movs	r2, #138	@ 0x8a
 800ec82:	601a      	str	r2, [r3, #0]
 800ec84:	f04f 30ff 	mov.w	r0, #4294967295
 800ec88:	4770      	bx	lr
 800ec8a:	700a      	strb	r2, [r1, #0]
 800ec8c:	2001      	movs	r0, #1
 800ec8e:	4770      	bx	lr

0800ec90 <fiprintf>:
 800ec90:	b40e      	push	{r1, r2, r3}
 800ec92:	b503      	push	{r0, r1, lr}
 800ec94:	4601      	mov	r1, r0
 800ec96:	ab03      	add	r3, sp, #12
 800ec98:	4805      	ldr	r0, [pc, #20]	@ (800ecb0 <fiprintf+0x20>)
 800ec9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec9e:	6800      	ldr	r0, [r0, #0]
 800eca0:	9301      	str	r3, [sp, #4]
 800eca2:	f7ff f9b1 	bl	800e008 <_vfiprintf_r>
 800eca6:	b002      	add	sp, #8
 800eca8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecac:	b003      	add	sp, #12
 800ecae:	4770      	bx	lr
 800ecb0:	20000020 	.word	0x20000020

0800ecb4 <abort>:
 800ecb4:	b508      	push	{r3, lr}
 800ecb6:	2006      	movs	r0, #6
 800ecb8:	f000 f834 	bl	800ed24 <raise>
 800ecbc:	2001      	movs	r0, #1
 800ecbe:	f7f2 ff85 	bl	8001bcc <_exit>

0800ecc2 <_malloc_usable_size_r>:
 800ecc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecc6:	1f18      	subs	r0, r3, #4
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	bfbc      	itt	lt
 800eccc:	580b      	ldrlt	r3, [r1, r0]
 800ecce:	18c0      	addlt	r0, r0, r3
 800ecd0:	4770      	bx	lr

0800ecd2 <_raise_r>:
 800ecd2:	291f      	cmp	r1, #31
 800ecd4:	b538      	push	{r3, r4, r5, lr}
 800ecd6:	4605      	mov	r5, r0
 800ecd8:	460c      	mov	r4, r1
 800ecda:	d904      	bls.n	800ece6 <_raise_r+0x14>
 800ecdc:	2316      	movs	r3, #22
 800ecde:	6003      	str	r3, [r0, #0]
 800ece0:	f04f 30ff 	mov.w	r0, #4294967295
 800ece4:	bd38      	pop	{r3, r4, r5, pc}
 800ece6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ece8:	b112      	cbz	r2, 800ecf0 <_raise_r+0x1e>
 800ecea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ecee:	b94b      	cbnz	r3, 800ed04 <_raise_r+0x32>
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	f000 f831 	bl	800ed58 <_getpid_r>
 800ecf6:	4622      	mov	r2, r4
 800ecf8:	4601      	mov	r1, r0
 800ecfa:	4628      	mov	r0, r5
 800ecfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed00:	f000 b818 	b.w	800ed34 <_kill_r>
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d00a      	beq.n	800ed1e <_raise_r+0x4c>
 800ed08:	1c59      	adds	r1, r3, #1
 800ed0a:	d103      	bne.n	800ed14 <_raise_r+0x42>
 800ed0c:	2316      	movs	r3, #22
 800ed0e:	6003      	str	r3, [r0, #0]
 800ed10:	2001      	movs	r0, #1
 800ed12:	e7e7      	b.n	800ece4 <_raise_r+0x12>
 800ed14:	2100      	movs	r1, #0
 800ed16:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ed1a:	4620      	mov	r0, r4
 800ed1c:	4798      	blx	r3
 800ed1e:	2000      	movs	r0, #0
 800ed20:	e7e0      	b.n	800ece4 <_raise_r+0x12>
	...

0800ed24 <raise>:
 800ed24:	4b02      	ldr	r3, [pc, #8]	@ (800ed30 <raise+0xc>)
 800ed26:	4601      	mov	r1, r0
 800ed28:	6818      	ldr	r0, [r3, #0]
 800ed2a:	f7ff bfd2 	b.w	800ecd2 <_raise_r>
 800ed2e:	bf00      	nop
 800ed30:	20000020 	.word	0x20000020

0800ed34 <_kill_r>:
 800ed34:	b538      	push	{r3, r4, r5, lr}
 800ed36:	4d07      	ldr	r5, [pc, #28]	@ (800ed54 <_kill_r+0x20>)
 800ed38:	2300      	movs	r3, #0
 800ed3a:	4604      	mov	r4, r0
 800ed3c:	4608      	mov	r0, r1
 800ed3e:	4611      	mov	r1, r2
 800ed40:	602b      	str	r3, [r5, #0]
 800ed42:	f7f2 ff33 	bl	8001bac <_kill>
 800ed46:	1c43      	adds	r3, r0, #1
 800ed48:	d102      	bne.n	800ed50 <_kill_r+0x1c>
 800ed4a:	682b      	ldr	r3, [r5, #0]
 800ed4c:	b103      	cbz	r3, 800ed50 <_kill_r+0x1c>
 800ed4e:	6023      	str	r3, [r4, #0]
 800ed50:	bd38      	pop	{r3, r4, r5, pc}
 800ed52:	bf00      	nop
 800ed54:	20004200 	.word	0x20004200

0800ed58 <_getpid_r>:
 800ed58:	f7f2 bf20 	b.w	8001b9c <_getpid>

0800ed5c <sqrtf>:
 800ed5c:	b508      	push	{r3, lr}
 800ed5e:	ed2d 8b02 	vpush	{d8}
 800ed62:	eeb0 8a40 	vmov.f32	s16, s0
 800ed66:	f000 f817 	bl	800ed98 <__ieee754_sqrtf>
 800ed6a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ed6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed72:	d60c      	bvs.n	800ed8e <sqrtf+0x32>
 800ed74:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ed94 <sqrtf+0x38>
 800ed78:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ed7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed80:	d505      	bpl.n	800ed8e <sqrtf+0x32>
 800ed82:	f7fc fcf9 	bl	800b778 <__errno>
 800ed86:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ed8a:	2321      	movs	r3, #33	@ 0x21
 800ed8c:	6003      	str	r3, [r0, #0]
 800ed8e:	ecbd 8b02 	vpop	{d8}
 800ed92:	bd08      	pop	{r3, pc}
 800ed94:	00000000 	.word	0x00000000

0800ed98 <__ieee754_sqrtf>:
 800ed98:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ed9c:	4770      	bx	lr
	...

0800eda0 <_init>:
 800eda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eda2:	bf00      	nop
 800eda4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eda6:	bc08      	pop	{r3}
 800eda8:	469e      	mov	lr, r3
 800edaa:	4770      	bx	lr

0800edac <_fini>:
 800edac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edae:	bf00      	nop
 800edb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edb2:	bc08      	pop	{r3}
 800edb4:	469e      	mov	lr, r3
 800edb6:	4770      	bx	lr
