
Projet_Torero_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d154  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  0800d338  0800d338  0000e338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8e0  0800d8e0  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8e0  0800d8e0  0000e8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8e8  0800d8e8  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8e8  0800d8e8  0000e8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d8ec  0800d8ec  0000e8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d8f0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000457c  200001d8  0800dac8  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004754  0800dac8  0000f754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e0c8  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000495d  00000000  00000000  0002d2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab0  00000000  00000000  00031c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149e  00000000  00000000  000336e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d48  00000000  00000000  00034b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000217ee  00000000  00000000  000578c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3edb  00000000  00000000  000790b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014cf8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000841c  00000000  00000000  0014cfd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  001553f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d31c 	.word	0x0800d31c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800d31c 	.word	0x0800d31c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <MX_FREERTOS_Init+0x2c>)
 800103c:	1d3c      	adds	r4, r7, #4
 800103e:	461d      	mov	r5, r3
 8001040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001044:	682b      	ldr	r3, [r5, #0]
 8001046:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f005 ffc6 	bl	8006fde <osThreadCreate>
 8001052:	4603      	mov	r3, r0
 8001054:	4a03      	ldr	r2, [pc, #12]	@ (8001064 <MX_FREERTOS_Init+0x30>)
 8001056:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001058:	bf00      	nop
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bdb0      	pop	{r4, r5, r7, pc}
 8001060:	0800d344 	.word	0x0800d344
 8001064:	200001f4 	.word	0x200001f4

08001068 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001070:	2001      	movs	r0, #1
 8001072:	f005 ffdb 	bl	800702c <osDelay>
 8001076:	e7fb      	b.n	8001070 <StartDefaultTask+0x8>

08001078 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800107e:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <MX_DMA_Init+0x50>)
 8001080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001082:	4a11      	ldr	r2, [pc, #68]	@ (80010c8 <MX_DMA_Init+0x50>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	6493      	str	r3, [r2, #72]	@ 0x48
 800108a:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <MX_DMA_Init+0x50>)
 800108c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001096:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <MX_DMA_Init+0x50>)
 8001098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800109a:	4a0b      	ldr	r2, [pc, #44]	@ (80010c8 <MX_DMA_Init+0x50>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80010a2:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <MX_DMA_Init+0x50>)
 80010a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2105      	movs	r1, #5
 80010b2:	200b      	movs	r0, #11
 80010b4:	f001 fb05 	bl	80026c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010b8:	200b      	movs	r0, #11
 80010ba:	f001 fb1c 	bl	80026f6 <HAL_NVIC_EnableIRQ>

}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000

080010cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b72      	ldr	r3, [pc, #456]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a71      	ldr	r2, [pc, #452]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b6f      	ldr	r3, [pc, #444]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fa:	4b6c      	ldr	r3, [pc, #432]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a6b      	ldr	r2, [pc, #428]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 8001100:	f043 0320 	orr.w	r3, r3, #32
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b69      	ldr	r3, [pc, #420]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001112:	4b66      	ldr	r3, [pc, #408]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a65      	ldr	r2, [pc, #404]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 8001118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b63      	ldr	r3, [pc, #396]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b60      	ldr	r3, [pc, #384]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a5f      	ldr	r2, [pc, #380]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b5d      	ldr	r3, [pc, #372]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	4b5a      	ldr	r3, [pc, #360]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	4a59      	ldr	r2, [pc, #356]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114e:	4b57      	ldr	r3, [pc, #348]	@ (80012ac <MX_GPIO_Init+0x1e0>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	2120      	movs	r1, #32
 800115e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001162:	f001 fed7 	bl	8002f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_NE_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f248 0180 	movw	r1, #32896	@ 0x8080
 800116c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001170:	f001 fed0 	bl	8002f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SE_Pin|LED_SW_Pin|Status_LED_Pin|Status_LED_debbug_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
 800117a:	484d      	ldr	r0, [pc, #308]	@ (80012b0 <MX_GPIO_Init+0x1e4>)
 800117c:	f001 feca 	bl	8002f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 8001180:	2201      	movs	r2, #1
 8001182:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 8001186:	484b      	ldr	r0, [pc, #300]	@ (80012b4 <MX_GPIO_Init+0x1e8>)
 8001188:	f001 fec4 	bl	8002f14 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_S_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT2_ACC_Pin;
 800118c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001192:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT2_ACC_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	4843      	ldr	r0, [pc, #268]	@ (80012b0 <MX_GPIO_Init+0x1e4>)
 80011a4:	f001 fd34 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80011a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	483e      	ldr	r0, [pc, #248]	@ (80012b8 <MX_GPIO_Init+0x1ec>)
 80011be:	f001 fd27 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_ACC_Pin|LED_NE_Pin|DEV_EN_LIDAR_Pin;
 80011c2:	f248 03a0 	movw	r3, #32928	@ 0x80a0
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011de:	f001 fd17 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_SE_Pin|LED_SW_Pin|Status_LED_Pin|Status_LED_debbug_Pin;
 80011e2:	f44f 6345 	mov.w	r3, #3152	@ 0xc50
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	482d      	ldr	r0, [pc, #180]	@ (80012b0 <MX_GPIO_Init+0x1e4>)
 80011fc:	f001 fd08 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CAPTEUR_G_Pin|CAPTEUR_D_Pin;
 8001200:	2303      	movs	r3, #3
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001204:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	4827      	ldr	r0, [pc, #156]	@ (80012b4 <MX_GPIO_Init+0x1e8>)
 8001216:	f001 fcfb 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 800121a:	f241 03f4 	movw	r3, #4340	@ 0x10f4
 800121e:	617b      	str	r3, [r7, #20]
                          |LED_E_Pin|LED_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	4820      	ldr	r0, [pc, #128]	@ (80012b4 <MX_GPIO_Init+0x1e8>)
 8001234:	f001 fcec 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT1_ACC_Pin;
 8001238:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800123c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800123e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT1_ACC_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001252:	f001 fcdd 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001256:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800125a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800125c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4811      	ldr	r0, [pc, #68]	@ (80012b4 <MX_GPIO_Init+0x1e8>)
 800126e:	f001 fccf 	bl	8002c10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2105      	movs	r1, #5
 8001276:	2006      	movs	r0, #6
 8001278:	f001 fa23 	bl	80026c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800127c:	2006      	movs	r0, #6
 800127e:	f001 fa3a 	bl	80026f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2105      	movs	r1, #5
 8001286:	2007      	movs	r0, #7
 8001288:	f001 fa1b 	bl	80026c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800128c:	2007      	movs	r0, #7
 800128e:	f001 fa32 	bl	80026f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2105      	movs	r1, #5
 8001296:	2028      	movs	r0, #40	@ 0x28
 8001298:	f001 fa13 	bl	80026c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800129c:	2028      	movs	r0, #40	@ 0x28
 800129e:	f001 fa2a 	bl	80026f6 <HAL_NVIC_EnableIRQ>

}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	@ 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000
 80012b0:	48000800 	.word	0x48000800
 80012b4:	48000400 	.word	0x48000400
 80012b8:	48001800 	.word	0x48001800

080012bc <__io_putchar>:
uint16_t frame_start = 0;
uint16_t frame_end = 0;



int __io_putchar(int chr){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 80012c4:	1d39      	adds	r1, r7, #4
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	2201      	movs	r2, #1
 80012cc:	4803      	ldr	r0, [pc, #12]	@ (80012dc <__io_putchar+0x20>)
 80012ce:	f004 fd97 	bl	8005e00 <HAL_UART_Transmit>
	return chr;
 80012d2:	687b      	ldr	r3, [r7, #4]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20001c18 	.word	0x20001c18

080012e0 <TaskETAT>:
			printf("%d : %d\r\n", i, pData[i]);
		}
	}
}

void TaskETAT(void * pvParameters){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	for (;;) {
		// Attendre que la notification arrive
		//printf("hi\r\n");
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	2001      	movs	r0, #1
 80012ee:	f006 fcd1 	bl	8007c94 <ulTaskNotifyTake>
		//lire INT_SOURCEmet à 0 bit interruption single tap pour générer une nouvelle interruption au prochain tap
		uint8_t rst_int = SPI_Read(ADXL343_REG_INT_SOURCE);
 80012f2:	2030      	movs	r0, #48	@ 0x30
 80012f4:	f007 fa7a 	bl	80087ec <SPI_Read>
 80012f8:	4603      	mov	r3, r0
 80012fa:	73fb      	strb	r3, [r7, #15]
		if(etat == 1){
 80012fc:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <TaskETAT+0x34>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d103      	bne.n	800130c <TaskETAT+0x2c>
			etat = 0;
 8001304:	4b03      	ldr	r3, [pc, #12]	@ (8001314 <TaskETAT+0x34>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	e7ed      	b.n	80012e8 <TaskETAT+0x8>
			//printf("Squik\r\n");
		}
		else{
			// Le choc a été détecté
			etat = 1;
 800130c:	4b01      	ldr	r3, [pc, #4]	@ (8001314 <TaskETAT+0x34>)
 800130e:	2201      	movs	r2, #1
 8001310:	601a      	str	r2, [r3, #0]
	for (;;) {
 8001312:	e7e9      	b.n	80012e8 <TaskETAT+0x8>
 8001314:	20001a70 	.word	0x20001a70

08001318 <TaskMOTOR>:
void TaskLIDAR(void * pvParameters){
	for(;;){
	}
}

void TaskMOTOR (void * pvParameters){
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	for(;;){
		if(EdgeProcess==0){
 8001320:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <TaskMOTOR+0x48>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1fb      	bne.n	8001320 <TaskMOTOR+0x8>
			int cpt=0;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
			while(cpt==0){
 800132c:	e00e      	b.n	800134c <TaskMOTOR+0x34>
				Motor_Forward_R(30);
 800132e:	201e      	movs	r0, #30
 8001330:	f007 fb26 	bl	8008980 <Motor_Forward_R>
				Motor_Forward_L(30);
 8001334:	201e      	movs	r0, #30
 8001336:	f007 fb8b 	bl	8008a50 <Motor_Forward_L>
				Motor_Forward_R(50);
 800133a:	2032      	movs	r0, #50	@ 0x32
 800133c:	f007 fb20 	bl	8008980 <Motor_Forward_R>
				Motor_Forward_L(50);
 8001340:	2032      	movs	r0, #50	@ 0x32
 8001342:	f007 fb85 	bl	8008a50 <Motor_Forward_L>
				cpt++;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3301      	adds	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
			while(cpt==0){
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0ed      	beq.n	800132e <TaskMOTOR+0x16>
			}
			Motor_Forward_R(75);
 8001352:	204b      	movs	r0, #75	@ 0x4b
 8001354:	f007 fb14 	bl	8008980 <Motor_Forward_R>
			Motor_Forward_L(75);
 8001358:	204b      	movs	r0, #75	@ 0x4b
 800135a:	f007 fb79 	bl	8008a50 <Motor_Forward_L>
		if(EdgeProcess==0){
 800135e:	e7df      	b.n	8001320 <TaskMOTOR+0x8>
 8001360:	20001a74 	.word	0x20001a74

08001364 <TaskEDGE>:
		int erreurLidar = 10/180;
		int alphaD = coeff_Lidar*erreurLidar-coeff_Capteur*erreur_capteur;
		int alphaG = -coeff_Lidar*erreurLidar+coeff_Capteur*erreur_capteur;
 */

void TaskEDGE(void * pvParameters){
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	for (;;) {

		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	2001      	movs	r0, #1
 8001372:	f006 fc8f 	bl	8007c94 <ulTaskNotifyTake>
		EdgeProcess++;
 8001376:	4b43      	ldr	r3, [pc, #268]	@ (8001484 <TaskEDGE+0x120>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	4a41      	ldr	r2, [pc, #260]	@ (8001484 <TaskEDGE+0x120>)
 800137e:	6013      	str	r3, [r2, #0]
		Motor_Forward_R(0);
 8001380:	2000      	movs	r0, #0
 8001382:	f007 fafd 	bl	8008980 <Motor_Forward_R>
		Motor_Forward_L(0);
 8001386:	2000      	movs	r0, #0
 8001388:	f007 fb62 	bl	8008a50 <Motor_Forward_L>
		vTaskDelay(pdMS_TO_TICKS(10));
 800138c:	200a      	movs	r0, #10
 800138e:	f006 f909 	bl	80075a4 <vTaskDelay>

		/* Cas Robot bord frontal */
		while((capteur_D&&capteur_G)==1){
 8001392:	e009      	b.n	80013a8 <TaskEDGE+0x44>
			Motor_Reverse_R(50);
 8001394:	2032      	movs	r0, #50	@ 0x32
 8001396:	f007 fb27 	bl	80089e8 <Motor_Reverse_R>
			Motor_Reverse_L(40);
 800139a:	2028      	movs	r0, #40	@ 0x28
 800139c:	f007 fb8a 	bl	8008ab4 <Motor_Reverse_L>
			vTaskDelay(pdMS_TO_TICKS(800));
 80013a0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80013a4:	f006 f8fe 	bl	80075a4 <vTaskDelay>
		while((capteur_D&&capteur_G)==1){
 80013a8:	4b37      	ldr	r3, [pc, #220]	@ (8001488 <TaskEDGE+0x124>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <TaskEDGE+0x58>
 80013b0:	4b36      	ldr	r3, [pc, #216]	@ (800148c <TaskEDGE+0x128>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <TaskEDGE+0x58>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <TaskEDGE+0x5a>
 80013bc:	2300      	movs	r3, #0
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d0e8      	beq.n	8001394 <TaskEDGE+0x30>
		}

		/* Cas Robot bord droit tourne a gauche */
		while((capteur_D)==1){
 80013c2:	e027      	b.n	8001414 <TaskEDGE+0xb0>
			// reculer, tourner et repartir
			Motor_Reverse_R(30);
 80013c4:	201e      	movs	r0, #30
 80013c6:	f007 fb0f 	bl	80089e8 <Motor_Reverse_R>
			Motor_Reverse_L(30);
 80013ca:	201e      	movs	r0, #30
 80013cc:	f007 fb72 	bl	8008ab4 <Motor_Reverse_L>
			vTaskDelay(pdMS_TO_TICKS(800));
 80013d0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80013d4:	f006 f8e6 	bl	80075a4 <vTaskDelay>

			for(int i=0;i<4;i++){
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	e017      	b.n	800140e <TaskEDGE+0xaa>
				Motor_Forward_R(50+10*i);
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	3332      	adds	r3, #50	@ 0x32
 80013ea:	4618      	mov	r0, r3
 80013ec:	f007 fac8 	bl	8008980 <Motor_Forward_R>
				Motor_Reverse_L(50-10*i);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f06f 0209 	mvn.w	r2, #9
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	3332      	adds	r3, #50	@ 0x32
 80013fc:	4618      	mov	r0, r3
 80013fe:	f007 fb59 	bl	8008ab4 <Motor_Reverse_L>
				vTaskDelay(pdMS_TO_TICKS(100));
 8001402:	2064      	movs	r0, #100	@ 0x64
 8001404:	f006 f8ce 	bl	80075a4 <vTaskDelay>
			for(int i=0;i<4;i++){
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3301      	adds	r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2b03      	cmp	r3, #3
 8001412:	dde4      	ble.n	80013de <TaskEDGE+0x7a>
		while((capteur_D)==1){
 8001414:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <TaskEDGE+0x124>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d0d3      	beq.n	80013c4 <TaskEDGE+0x60>
			}
		}

		/* Cas Robot bord gauche tourne a droite */
		while((capteur_G)==1){
 800141c:	e027      	b.n	800146e <TaskEDGE+0x10a>
			// reculer, tourner et repartir
			Motor_Reverse_R(30);
 800141e:	201e      	movs	r0, #30
 8001420:	f007 fae2 	bl	80089e8 <Motor_Reverse_R>
			Motor_Reverse_L(30);
 8001424:	201e      	movs	r0, #30
 8001426:	f007 fb45 	bl	8008ab4 <Motor_Reverse_L>
			vTaskDelay(pdMS_TO_TICKS(800));
 800142a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800142e:	f006 f8b9 	bl	80075a4 <vTaskDelay>

			for(int i=0;i<4;i++){
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	e017      	b.n	8001468 <TaskEDGE+0x104>
				Motor_Forward_L(50+10*i);
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	3332      	adds	r3, #50	@ 0x32
 8001444:	4618      	mov	r0, r3
 8001446:	f007 fb03 	bl	8008a50 <Motor_Forward_L>
				Motor_Reverse_R(50-10*i);
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	f06f 0209 	mvn.w	r2, #9
 8001450:	fb02 f303 	mul.w	r3, r2, r3
 8001454:	3332      	adds	r3, #50	@ 0x32
 8001456:	4618      	mov	r0, r3
 8001458:	f007 fac6 	bl	80089e8 <Motor_Reverse_R>
				vTaskDelay(pdMS_TO_TICKS(100));
 800145c:	2064      	movs	r0, #100	@ 0x64
 800145e:	f006 f8a1 	bl	80075a4 <vTaskDelay>
			for(int i=0;i<4;i++){
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	3301      	adds	r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	2b03      	cmp	r3, #3
 800146c:	dde4      	ble.n	8001438 <TaskEDGE+0xd4>
		while((capteur_G)==1){
 800146e:	4b07      	ldr	r3, [pc, #28]	@ (800148c <TaskEDGE+0x128>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d0d3      	beq.n	800141e <TaskEDGE+0xba>
			}
		}
		EdgeProcess--;
 8001476:	4b03      	ldr	r3, [pc, #12]	@ (8001484 <TaskEDGE+0x120>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	3b01      	subs	r3, #1
 800147c:	4a01      	ldr	r2, [pc, #4]	@ (8001484 <TaskEDGE+0x120>)
 800147e:	6013      	str	r3, [r2, #0]
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001480:	e774      	b.n	800136c <TaskEDGE+0x8>
 8001482:	bf00      	nop
 8001484:	20001a74 	.word	0x20001a74
 8001488:	20001a6c 	.word	0x20001a6c
 800148c:	20001a68 	.word	0x20001a68

08001490 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001496:	f000 ffc8 	bl	800242a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800149a:	f000 f8ad 	bl	80015f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800149e:	f7ff fe15 	bl	80010cc <MX_GPIO_Init>
	MX_DMA_Init();
 80014a2:	f7ff fde9 	bl	8001078 <MX_DMA_Init>
	MX_SPI2_Init();
 80014a6:	f000 f965 	bl	8001774 <MX_SPI2_Init>
	MX_TIM1_Init();
 80014aa:	f000 fb33 	bl	8001b14 <MX_TIM1_Init>
	MX_TIM2_Init();
 80014ae:	f000 fbcf 	bl	8001c50 <MX_TIM2_Init>
	MX_TIM3_Init();
 80014b2:	f000 fc31 	bl	8001d18 <MX_TIM3_Init>
	MX_TIM4_Init();
 80014b6:	f000 fc85 	bl	8001dc4 <MX_TIM4_Init>
	MX_USART2_UART_Init();
 80014ba:	f000 fe2f 	bl	800211c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80014be:	f000 fe79 	bl	80021b4 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	Start_Motors();
 80014c2:	f007 fb29 	bl	8008b18 <Start_Motors>
	Motor_Forward_R(50);
 80014c6:	2032      	movs	r0, #50	@ 0x32
 80014c8:	f007 fa5a 	bl	8008980 <Motor_Forward_R>
	Motor_Forward_L(50);
 80014cc:	2032      	movs	r0, #50	@ 0x32
 80014ce:	f007 fabf 	bl	8008a50 <Motor_Forward_L>
	ADXL343_Init();
 80014d2:	f007 f9bb 	bl	800884c <ADXL343_Init>
	LIDAR_Init(&hlidar);
 80014d6:	4835      	ldr	r0, [pc, #212]	@ (80015ac <main+0x11c>)
 80014d8:	f007 fa1c 	bl	8008914 <LIDAR_Init>
	LIDAR_Start(&hlidar);
 80014dc:	4833      	ldr	r0, [pc, #204]	@ (80015ac <main+0x11c>)
 80014de:	f007 fa29 	bl	8008934 <LIDAR_Start>

	ret = xTaskCreate(TaskETAT,"TaskETAT",STACK_SIZE,(void *) NULL,2,&xHandleETAT);
 80014e2:	4b33      	ldr	r3, [pc, #204]	@ (80015b0 <main+0x120>)
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	2302      	movs	r3, #2
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2300      	movs	r3, #0
 80014ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014f0:	4930      	ldr	r1, [pc, #192]	@ (80015b4 <main+0x124>)
 80014f2:	4831      	ldr	r0, [pc, #196]	@ (80015b8 <main+0x128>)
 80014f4:	f005 ff22 	bl	800733c <xTaskCreate>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4a30      	ldr	r2, [pc, #192]	@ (80015bc <main+0x12c>)
 80014fc:	6013      	str	r3, [r2, #0]
	if (ret != pdPASS)
 80014fe:	4b2f      	ldr	r3, [pc, #188]	@ (80015bc <main+0x12c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d004      	beq.n	8001510 <main+0x80>
	{
		printf("Error creating TaskETAT\r\n");
 8001506:	482e      	ldr	r0, [pc, #184]	@ (80015c0 <main+0x130>)
 8001508:	f008 fac4 	bl	8009a94 <puts>
		Error_Handler();
 800150c:	f000 f92c 	bl	8001768 <Error_Handler>
	}
	printf("Task ETAT created\r\n");
 8001510:	482c      	ldr	r0, [pc, #176]	@ (80015c4 <main+0x134>)
 8001512:	f008 fabf 	bl	8009a94 <puts>
		Error_Handler();
	}
	printf("Task LIDAR created\r\n");
	 */

	ret = xTaskCreate(TaskMOTOR,"TaskMOTOR",STACK_SIZE,(void *) NULL,1,&xHandleMOTOR);
 8001516:	4b2c      	ldr	r3, [pc, #176]	@ (80015c8 <main+0x138>)
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	2301      	movs	r3, #1
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2300      	movs	r3, #0
 8001520:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001524:	4929      	ldr	r1, [pc, #164]	@ (80015cc <main+0x13c>)
 8001526:	482a      	ldr	r0, [pc, #168]	@ (80015d0 <main+0x140>)
 8001528:	f005 ff08 	bl	800733c <xTaskCreate>
 800152c:	4603      	mov	r3, r0
 800152e:	4a23      	ldr	r2, [pc, #140]	@ (80015bc <main+0x12c>)
 8001530:	6013      	str	r3, [r2, #0]
	if (ret != pdPASS)
 8001532:	4b22      	ldr	r3, [pc, #136]	@ (80015bc <main+0x12c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d004      	beq.n	8001544 <main+0xb4>
	{
		printf("Error creating TaskMOTOR\r\n");
 800153a:	4826      	ldr	r0, [pc, #152]	@ (80015d4 <main+0x144>)
 800153c:	f008 faaa 	bl	8009a94 <puts>
		Error_Handler();
 8001540:	f000 f912 	bl	8001768 <Error_Handler>
	}
	printf("Task MOTOR created\r\n");
 8001544:	4824      	ldr	r0, [pc, #144]	@ (80015d8 <main+0x148>)
 8001546:	f008 faa5 	bl	8009a94 <puts>


	ret = xTaskCreate(TaskEDGE,"TaskEDGE",STACK_SIZE,(void *) NULL,3,&xHandleEDGE);
 800154a:	4b24      	ldr	r3, [pc, #144]	@ (80015dc <main+0x14c>)
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	2303      	movs	r3, #3
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2300      	movs	r3, #0
 8001554:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001558:	4921      	ldr	r1, [pc, #132]	@ (80015e0 <main+0x150>)
 800155a:	4822      	ldr	r0, [pc, #136]	@ (80015e4 <main+0x154>)
 800155c:	f005 feee 	bl	800733c <xTaskCreate>
 8001560:	4603      	mov	r3, r0
 8001562:	4a16      	ldr	r2, [pc, #88]	@ (80015bc <main+0x12c>)
 8001564:	6013      	str	r3, [r2, #0]
	if (ret != pdPASS)
 8001566:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <main+0x12c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d004      	beq.n	8001578 <main+0xe8>
	{
		printf("Error creating TaskEDGE\r\n");
 800156e:	481e      	ldr	r0, [pc, #120]	@ (80015e8 <main+0x158>)
 8001570:	f008 fa90 	bl	8009a94 <puts>
		Error_Handler();
 8001574:	f000 f8f8 	bl	8001768 <Error_Handler>
	}
	printf("Task EDGE created\r\n");
 8001578:	481c      	ldr	r0, [pc, #112]	@ (80015ec <main+0x15c>)
 800157a:	f008 fa8b 	bl	8009a94 <puts>

	SemDMAHalfCallBack = xSemaphoreCreateBinary();
 800157e:	2203      	movs	r2, #3
 8001580:	2100      	movs	r1, #0
 8001582:	2001      	movs	r0, #1
 8001584:	f005 fe84 	bl	8007290 <xQueueGenericCreate>
 8001588:	4603      	mov	r3, r0
 800158a:	4a19      	ldr	r2, [pc, #100]	@ (80015f0 <main+0x160>)
 800158c:	6013      	str	r3, [r2, #0]
	SemDMAClpCallBack = xSemaphoreCreateBinary();
 800158e:	2203      	movs	r2, #3
 8001590:	2100      	movs	r1, #0
 8001592:	2001      	movs	r0, #1
 8001594:	f005 fe7c 	bl	8007290 <xQueueGenericCreate>
 8001598:	4603      	mov	r3, r0
 800159a:	4a16      	ldr	r2, [pc, #88]	@ (80015f4 <main+0x164>)
 800159c:	6013      	str	r3, [r2, #0]


	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 800159e:	f7ff fd49 	bl	8001034 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80015a2:	f005 fd15 	bl	8006fd0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80015a6:	bf00      	nop
 80015a8:	e7fd      	b.n	80015a6 <main+0x116>
 80015aa:	bf00      	nop
 80015ac:	200001f8 	.word	0x200001f8
 80015b0:	20001a58 	.word	0x20001a58
 80015b4:	0800d368 	.word	0x0800d368
 80015b8:	080012e1 	.word	0x080012e1
 80015bc:	20001a64 	.word	0x20001a64
 80015c0:	0800d374 	.word	0x0800d374
 80015c4:	0800d390 	.word	0x0800d390
 80015c8:	20001a5c 	.word	0x20001a5c
 80015cc:	0800d3a4 	.word	0x0800d3a4
 80015d0:	08001319 	.word	0x08001319
 80015d4:	0800d3b0 	.word	0x0800d3b0
 80015d8:	0800d3cc 	.word	0x0800d3cc
 80015dc:	20001a60 	.word	0x20001a60
 80015e0:	0800d3e0 	.word	0x0800d3e0
 80015e4:	08001365 	.word	0x08001365
 80015e8:	0800d3ec 	.word	0x0800d3ec
 80015ec:	0800d408 	.word	0x0800d408
 80015f0:	20001a78 	.word	0x20001a78
 80015f4:	20001a7c 	.word	0x20001a7c

080015f8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b094      	sub	sp, #80	@ 0x50
 80015fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fe:	f107 0318 	add.w	r3, r7, #24
 8001602:	2238      	movs	r2, #56	@ 0x38
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f008 fb44 	bl	8009c94 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800161a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800161e:	f001 fcc3 	bl	8002fa8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001622:	2301      	movs	r3, #1
 8001624:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001626:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800162a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800162c:	2300      	movs	r3, #0
 800162e:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001630:	f107 0318 	add.w	r3, r7, #24
 8001634:	4618      	mov	r0, r3
 8001636:	f001 fd6b 	bl	8003110 <HAL_RCC_OscConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <SystemClock_Config+0x4c>
	{
		Error_Handler();
 8001640:	f000 f892 	bl	8001768 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001644:	230f      	movs	r3, #15
 8001646:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001648:	2302      	movs	r3, #2
 800164a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f002 f869 	bl	8003734 <HAL_RCC_ClockConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <SystemClock_Config+0x74>
	{
		Error_Handler();
 8001668:	f000 f87e 	bl	8001768 <Error_Handler>
	}
}
 800166c:	bf00      	nop
 800166e:	3750      	adds	r7, #80	@ 0x50
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == INT1_ACC_Pin) {
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001684:	d119      	bne.n	80016ba <HAL_GPIO_EXTI_Callback+0x46>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
		vTaskNotifyGiveFromISR(xHandleETAT, &xHigherPriorityTaskWoken);
 800168a:	4b31      	ldr	r3, [pc, #196]	@ (8001750 <HAL_GPIO_EXTI_Callback+0xdc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f107 0214 	add.w	r2, r7, #20
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f006 fb45 	bl	8007d24 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d007      	beq.n	80016b0 <HAL_GPIO_EXTI_Callback+0x3c>
 80016a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001754 <HAL_GPIO_EXTI_Callback+0xe0>)
 80016a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	f3bf 8f4f 	dsb	sy
 80016ac:	f3bf 8f6f 	isb	sy
		HAL_GPIO_TogglePin(GPIOC, Status_LED_Pin);
 80016b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016b4:	4828      	ldr	r0, [pc, #160]	@ (8001758 <HAL_GPIO_EXTI_Callback+0xe4>)
 80016b6:	f001 fc45 	bl	8002f44 <HAL_GPIO_TogglePin>
	}
	if (GPIO_Pin == CAPTEUR_D_Pin) {
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d11f      	bne.n	8001700 <HAL_GPIO_EXTI_Callback+0x8c>
		if(capteur_D==1){
 80016c0:	4b26      	ldr	r3, [pc, #152]	@ (800175c <HAL_GPIO_EXTI_Callback+0xe8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d103      	bne.n	80016d0 <HAL_GPIO_EXTI_Callback+0x5c>
			capteur_D=0;
 80016c8:	4b24      	ldr	r3, [pc, #144]	@ (800175c <HAL_GPIO_EXTI_Callback+0xe8>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e002      	b.n	80016d6 <HAL_GPIO_EXTI_Callback+0x62>
		}
		else{
			capteur_D=1;
 80016d0:	4b22      	ldr	r3, [pc, #136]	@ (800175c <HAL_GPIO_EXTI_Callback+0xe8>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
		}
		//printf("capteurD\r\n");
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
		vTaskNotifyGiveFromISR(xHandleEDGE, &xHigherPriorityTaskWoken);
 80016da:	4b21      	ldr	r3, [pc, #132]	@ (8001760 <HAL_GPIO_EXTI_Callback+0xec>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f107 0210 	add.w	r2, r7, #16
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f006 fb1d 	bl	8007d24 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d007      	beq.n	8001700 <HAL_GPIO_EXTI_Callback+0x8c>
 80016f0:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <HAL_GPIO_EXTI_Callback+0xe0>)
 80016f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	f3bf 8f4f 	dsb	sy
 80016fc:	f3bf 8f6f 	isb	sy
	}
	if (GPIO_Pin == CAPTEUR_G_Pin) {
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d11f      	bne.n	8001746 <HAL_GPIO_EXTI_Callback+0xd2>
		if(capteur_G==1){
 8001706:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d103      	bne.n	8001716 <HAL_GPIO_EXTI_Callback+0xa2>
			capteur_G=0;
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	e002      	b.n	800171c <HAL_GPIO_EXTI_Callback+0xa8>
		}
		else{
			capteur_G=1;
 8001716:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]
		}
		//printf("capteurG\r\n");
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
		vTaskNotifyGiveFromISR(xHandleEDGE, &xHigherPriorityTaskWoken);
 8001720:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <HAL_GPIO_EXTI_Callback+0xec>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f107 020c 	add.w	r2, r7, #12
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f006 fafa 	bl	8007d24 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <HAL_GPIO_EXTI_Callback+0xd2>
 8001736:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001738:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	f3bf 8f4f 	dsb	sy
 8001742:	f3bf 8f6f 	isb	sy
	}
}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20001a58 	.word	0x20001a58
 8001754:	e000ed04 	.word	0xe000ed04
 8001758:	48000800 	.word	0x48000800
 800175c:	20001a6c 	.word	0x20001a6c
 8001760:	20001a60 	.word	0x20001a60
 8001764:	20001a68 	.word	0x20001a68

08001768 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800176c:	b672      	cpsid	i
}
 800176e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <Error_Handler+0x8>

08001774 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001778:	4b1b      	ldr	r3, [pc, #108]	@ (80017e8 <MX_SPI2_Init+0x74>)
 800177a:	4a1c      	ldr	r2, [pc, #112]	@ (80017ec <MX_SPI2_Init+0x78>)
 800177c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800177e:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <MX_SPI2_Init+0x74>)
 8001780:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001784:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001786:	4b18      	ldr	r3, [pc, #96]	@ (80017e8 <MX_SPI2_Init+0x74>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800178c:	4b16      	ldr	r3, [pc, #88]	@ (80017e8 <MX_SPI2_Init+0x74>)
 800178e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001792:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001794:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <MX_SPI2_Init+0x74>)
 8001796:	2202      	movs	r2, #2
 8001798:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800179a:	4b13      	ldr	r3, [pc, #76]	@ (80017e8 <MX_SPI2_Init+0x74>)
 800179c:	2201      	movs	r2, #1
 800179e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <MX_SPI2_Init+0x74>)
 80017a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	@ (80017e8 <MX_SPI2_Init+0x74>)
 80017aa:	2218      	movs	r2, #24
 80017ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <MX_SPI2_Init+0x74>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <MX_SPI2_Init+0x74>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <MX_SPI2_Init+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80017c0:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <MX_SPI2_Init+0x74>)
 80017c2:	2207      	movs	r2, #7
 80017c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017c6:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <MX_SPI2_Init+0x74>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <MX_SPI2_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017d2:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <MX_SPI2_Init+0x74>)
 80017d4:	f002 fbb6 	bl	8003f44 <HAL_SPI_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80017de:	f7ff ffc3 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20001a80 	.word	0x20001a80
 80017ec:	40003800 	.word	0x40003800

080017f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	@ 0x28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a17      	ldr	r2, [pc, #92]	@ (800186c <HAL_SPI_MspInit+0x7c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d128      	bne.n	8001864 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001812:	4b17      	ldr	r3, [pc, #92]	@ (8001870 <HAL_SPI_MspInit+0x80>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001816:	4a16      	ldr	r2, [pc, #88]	@ (8001870 <HAL_SPI_MspInit+0x80>)
 8001818:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800181c:	6593      	str	r3, [r2, #88]	@ 0x58
 800181e:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <HAL_SPI_MspInit+0x80>)
 8001820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <HAL_SPI_MspInit+0x80>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	4a10      	ldr	r2, [pc, #64]	@ (8001870 <HAL_SPI_MspInit+0x80>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <HAL_SPI_MspInit+0x80>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_TO_SCLK_ACC_Pin|SPI2_MISO_TO_SDO_ACC_Pin|SPI2_MOSI_TO_SDI_ACC_Pin;
 8001842:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001854:	2305      	movs	r3, #5
 8001856:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	4805      	ldr	r0, [pc, #20]	@ (8001874 <HAL_SPI_MspInit+0x84>)
 8001860:	f001 f9d6 	bl	8002c10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001864:	bf00      	nop
 8001866:	3728      	adds	r7, #40	@ 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40003800 	.word	0x40003800
 8001870:	40021000 	.word	0x40021000
 8001874:	48000400 	.word	0x48000400

08001878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187e:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <HAL_MspInit+0x50>)
 8001880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001882:	4a11      	ldr	r2, [pc, #68]	@ (80018c8 <HAL_MspInit+0x50>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6613      	str	r3, [r2, #96]	@ 0x60
 800188a:	4b0f      	ldr	r3, [pc, #60]	@ (80018c8 <HAL_MspInit+0x50>)
 800188c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <HAL_MspInit+0x50>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189a:	4a0b      	ldr	r2, [pc, #44]	@ (80018c8 <HAL_MspInit+0x50>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018a2:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <HAL_MspInit+0x50>)
 80018a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	210f      	movs	r1, #15
 80018b2:	f06f 0001 	mvn.w	r0, #1
 80018b6:	f000 ff04 	bl	80026c2 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80018ba:	f001 fc19 	bl	80030f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000

080018cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <NMI_Handler+0x4>

080018d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <HardFault_Handler+0x4>

080018dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <MemManage_Handler+0x4>

080018e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <BusFault_Handler+0x4>

080018ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <UsageFault_Handler+0x4>

080018f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001906:	f000 fde3 	bl	80024d0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800190a:	f006 f9a5 	bl	8007c58 <xTaskGetSchedulerState>
 800190e:	4603      	mov	r3, r0
 8001910:	2b01      	cmp	r3, #1
 8001912:	d001      	beq.n	8001918 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001914:	f006 fcc0 	bl	8008298 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAPTEUR_G_Pin);
 8001920:	2001      	movs	r0, #1
 8001922:	f001 fb29 	bl	8002f78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}

0800192a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAPTEUR_D_Pin);
 800192e:	2002      	movs	r0, #2
 8001930:	f001 fb22 	bl	8002f78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}

08001938 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800193c:	4802      	ldr	r0, [pc, #8]	@ (8001948 <DMA1_Channel1_IRQHandler+0x10>)
 800193e:	f001 f818 	bl	8002972 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20001d40 	.word	0x20001d40

0800194c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	//printf("yeah\r\n");
	//BaseType_t xHigherPriorityTaskWoken = pdFALSE;
	//vTaskNotifyGiveFromISR(xHandleETAT, &xHigherPriorityTaskWoken);
	//portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACC_Pin);
 8001950:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001954:	f001 fb10 	bl	8002f78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT2_ACC_Pin);
 8001958:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800195c:	f001 fb0c 	bl	8002f78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}

08001964 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return 1;
 8001968:	2301      	movs	r3, #1
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_kill>:

int _kill(int pid, int sig)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800197e:	f008 f9db 	bl	8009d38 <__errno>
 8001982:	4603      	mov	r3, r0
 8001984:	2216      	movs	r2, #22
 8001986:	601a      	str	r2, [r3, #0]
  return -1;
 8001988:	f04f 33ff 	mov.w	r3, #4294967295
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <_exit>:

void _exit (int status)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800199c:	f04f 31ff 	mov.w	r1, #4294967295
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ffe7 	bl	8001974 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019a6:	bf00      	nop
 80019a8:	e7fd      	b.n	80019a6 <_exit+0x12>

080019aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	e00a      	b.n	80019d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019bc:	f3af 8000 	nop.w
 80019c0:	4601      	mov	r1, r0
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	60ba      	str	r2, [r7, #8]
 80019c8:	b2ca      	uxtb	r2, r1
 80019ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3301      	adds	r3, #1
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	dbf0      	blt.n	80019bc <_read+0x12>
  }

  return len;
 80019da:	687b      	ldr	r3, [r7, #4]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	e009      	b.n	8001a0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	60ba      	str	r2, [r7, #8]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fc5c 	bl	80012bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	3301      	adds	r3, #1
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	dbf1      	blt.n	80019f6 <_write+0x12>
  }
  return len;
 8001a12:	687b      	ldr	r3, [r7, #4]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <_close>:

int _close(int file)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a44:	605a      	str	r2, [r3, #4]
  return 0;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_isatty>:

int _isatty(int file)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a5c:	2301      	movs	r3, #1
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ae0 <_sbrk+0x5c>)
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <_sbrk+0x60>)
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a98:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <_sbrk+0x64>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	@ (8001aec <_sbrk+0x68>)
 8001aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d207      	bcs.n	8001ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab4:	f008 f940 	bl	8009d38 <__errno>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	220c      	movs	r2, #12
 8001abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	e009      	b.n	8001ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac4:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aca:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a05      	ldr	r2, [pc, #20]	@ (8001ae8 <_sbrk+0x64>)
 8001ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20008000 	.word	0x20008000
 8001ae4:	00000400 	.word	0x00000400
 8001ae8:	20001ae4 	.word	0x20001ae4
 8001aec:	20004758 	.word	0x20004758

08001af0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <SystemInit+0x20>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001afa:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <SystemInit+0x20>)
 8001afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b098      	sub	sp, #96	@ 0x60
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]
 8001b36:	615a      	str	r2, [r3, #20]
 8001b38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2234      	movs	r2, #52	@ 0x34
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f008 f8a7 	bl	8009c94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b46:	4b40      	ldr	r3, [pc, #256]	@ (8001c48 <MX_TIM1_Init+0x134>)
 8001b48:	4a40      	ldr	r2, [pc, #256]	@ (8001c4c <MX_TIM1_Init+0x138>)
 8001b4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8001b4c:	4b3e      	ldr	r3, [pc, #248]	@ (8001c48 <MX_TIM1_Init+0x134>)
 8001b4e:	220f      	movs	r2, #15
 8001b50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b52:	4b3d      	ldr	r3, [pc, #244]	@ (8001c48 <MX_TIM1_Init+0x134>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39;
 8001b58:	4b3b      	ldr	r3, [pc, #236]	@ (8001c48 <MX_TIM1_Init+0x134>)
 8001b5a:	2227      	movs	r2, #39	@ 0x27
 8001b5c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c48 <MX_TIM1_Init+0x134>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b64:	4b38      	ldr	r3, [pc, #224]	@ (8001c48 <MX_TIM1_Init+0x134>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6a:	4b37      	ldr	r3, [pc, #220]	@ (8001c48 <MX_TIM1_Init+0x134>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b70:	4835      	ldr	r0, [pc, #212]	@ (8001c48 <MX_TIM1_Init+0x134>)
 8001b72:	f003 f91d 	bl	8004db0 <HAL_TIM_PWM_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001b7c:	f7ff fdf4 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b80:	2300      	movs	r3, #0
 8001b82:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b84:	2300      	movs	r3, #0
 8001b86:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b90:	4619      	mov	r1, r3
 8001b92:	482d      	ldr	r0, [pc, #180]	@ (8001c48 <MX_TIM1_Init+0x134>)
 8001b94:	f003 ffd6 	bl	8005b44 <HAL_TIMEx_MasterConfigSynchronization>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001b9e:	f7ff fde3 	bl	8001768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba2:	2360      	movs	r3, #96	@ 0x60
 8001ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001baa:	2300      	movs	r3, #0
 8001bac:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bbe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4820      	ldr	r0, [pc, #128]	@ (8001c48 <MX_TIM1_Init+0x134>)
 8001bc8:	f003 faf0 	bl	80051ac <HAL_TIM_PWM_ConfigChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001bd2:	f7ff fdc9 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bd6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bda:	2204      	movs	r2, #4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	481a      	ldr	r0, [pc, #104]	@ (8001c48 <MX_TIM1_Init+0x134>)
 8001be0:	f003 fae4 	bl	80051ac <HAL_TIM_PWM_ConfigChannel>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8001bea:	f7ff fdbd 	bl	8001768 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c18:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4807      	ldr	r0, [pc, #28]	@ (8001c48 <MX_TIM1_Init+0x134>)
 8001c2c:	f004 f80c 	bl	8005c48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001c36:	f7ff fd97 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c3a:	4803      	ldr	r0, [pc, #12]	@ (8001c48 <MX_TIM1_Init+0x134>)
 8001c3c:	f000 f9ec 	bl	8002018 <HAL_TIM_MspPostInit>

}
 8001c40:	bf00      	nop
 8001c42:	3760      	adds	r7, #96	@ 0x60
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20001ae8 	.word	0x20001ae8
 8001c4c:	40012c00 	.word	0x40012c00

08001c50 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	@ 0x28
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c56:	f107 031c 	add.w	r3, r7, #28
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c62:	463b      	mov	r3, r7
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
 8001c70:	615a      	str	r2, [r3, #20]
 8001c72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c74:	4b27      	ldr	r3, [pc, #156]	@ (8001d14 <MX_TIM2_Init+0xc4>)
 8001c76:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8001c7c:	4b25      	ldr	r3, [pc, #148]	@ (8001d14 <MX_TIM2_Init+0xc4>)
 8001c7e:	220f      	movs	r2, #15
 8001c80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c82:	4b24      	ldr	r3, [pc, #144]	@ (8001d14 <MX_TIM2_Init+0xc4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 8001c88:	4b22      	ldr	r3, [pc, #136]	@ (8001d14 <MX_TIM2_Init+0xc4>)
 8001c8a:	2227      	movs	r2, #39	@ 0x27
 8001c8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8e:	4b21      	ldr	r3, [pc, #132]	@ (8001d14 <MX_TIM2_Init+0xc4>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c94:	4b1f      	ldr	r3, [pc, #124]	@ (8001d14 <MX_TIM2_Init+0xc4>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c9a:	481e      	ldr	r0, [pc, #120]	@ (8001d14 <MX_TIM2_Init+0xc4>)
 8001c9c:	f003 f888 	bl	8004db0 <HAL_TIM_PWM_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001ca6:	f7ff fd5f 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4816      	ldr	r0, [pc, #88]	@ (8001d14 <MX_TIM2_Init+0xc4>)
 8001cba:	f003 ff43 	bl	8005b44 <HAL_TIMEx_MasterConfigSynchronization>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001cc4:	f7ff fd50 	bl	8001768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cc8:	2360      	movs	r3, #96	@ 0x60
 8001cca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cd8:	463b      	mov	r3, r7
 8001cda:	2200      	movs	r2, #0
 8001cdc:	4619      	mov	r1, r3
 8001cde:	480d      	ldr	r0, [pc, #52]	@ (8001d14 <MX_TIM2_Init+0xc4>)
 8001ce0:	f003 fa64 	bl	80051ac <HAL_TIM_PWM_ConfigChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001cea:	f7ff fd3d 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cee:	463b      	mov	r3, r7
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4807      	ldr	r0, [pc, #28]	@ (8001d14 <MX_TIM2_Init+0xc4>)
 8001cf6:	f003 fa59 	bl	80051ac <HAL_TIM_PWM_ConfigChannel>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001d00:	f7ff fd32 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d04:	4803      	ldr	r0, [pc, #12]	@ (8001d14 <MX_TIM2_Init+0xc4>)
 8001d06:	f000 f987 	bl	8002018 <HAL_TIM_MspPostInit>

}
 8001d0a:	bf00      	nop
 8001d0c:	3728      	adds	r7, #40	@ 0x28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20001b34 	.word	0x20001b34

08001d18 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08c      	sub	sp, #48	@ 0x30
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d1e:	f107 030c 	add.w	r3, r7, #12
 8001d22:	2224      	movs	r2, #36	@ 0x24
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f007 ffb4 	bl	8009c94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2c:	463b      	mov	r3, r7
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d36:	4b21      	ldr	r3, [pc, #132]	@ (8001dbc <MX_TIM3_Init+0xa4>)
 8001d38:	4a21      	ldr	r2, [pc, #132]	@ (8001dc0 <MX_TIM3_Init+0xa8>)
 8001d3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dbc <MX_TIM3_Init+0xa4>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d42:	4b1e      	ldr	r3, [pc, #120]	@ (8001dbc <MX_TIM3_Init+0xa4>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d48:	4b1c      	ldr	r3, [pc, #112]	@ (8001dbc <MX_TIM3_Init+0xa4>)
 8001d4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d50:	4b1a      	ldr	r3, [pc, #104]	@ (8001dbc <MX_TIM3_Init+0xa4>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d56:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <MX_TIM3_Init+0xa4>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d64:	2301      	movs	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d74:	2301      	movs	r3, #1
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	4619      	mov	r1, r3
 8001d86:	480d      	ldr	r0, [pc, #52]	@ (8001dbc <MX_TIM3_Init+0xa4>)
 8001d88:	f003 f96a 	bl	8005060 <HAL_TIM_Encoder_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001d92:	f7ff fce9 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d9e:	463b      	mov	r3, r7
 8001da0:	4619      	mov	r1, r3
 8001da2:	4806      	ldr	r0, [pc, #24]	@ (8001dbc <MX_TIM3_Init+0xa4>)
 8001da4:	f003 fece 	bl	8005b44 <HAL_TIMEx_MasterConfigSynchronization>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001dae:	f7ff fcdb 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	3730      	adds	r7, #48	@ 0x30
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20001b80 	.word	0x20001b80
 8001dc0:	40000400 	.word	0x40000400

08001dc4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b094      	sub	sp, #80	@ 0x50
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dce:	2224      	movs	r2, #36	@ 0x24
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f007 ff5e 	bl	8009c94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd8:	f107 0320 	add.w	r3, r7, #32
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
 8001df0:	611a      	str	r2, [r3, #16]
 8001df2:	615a      	str	r2, [r3, #20]
 8001df4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001df6:	4b30      	ldr	r3, [pc, #192]	@ (8001eb8 <MX_TIM4_Init+0xf4>)
 8001df8:	4a30      	ldr	r2, [pc, #192]	@ (8001ebc <MX_TIM4_Init+0xf8>)
 8001dfa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8001eb8 <MX_TIM4_Init+0xf4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e02:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb8 <MX_TIM4_Init+0xf4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e08:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb8 <MX_TIM4_Init+0xf4>)
 8001e0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e10:	4b29      	ldr	r3, [pc, #164]	@ (8001eb8 <MX_TIM4_Init+0xf4>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e16:	4b28      	ldr	r3, [pc, #160]	@ (8001eb8 <MX_TIM4_Init+0xf4>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e1c:	4826      	ldr	r0, [pc, #152]	@ (8001eb8 <MX_TIM4_Init+0xf4>)
 8001e1e:	f002 ffc7 	bl	8004db0 <HAL_TIM_PWM_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001e28:	f7ff fc9e 	bl	8001768 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e30:	2300      	movs	r3, #0
 8001e32:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e34:	2301      	movs	r3, #1
 8001e36:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC1Filter = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e40:	2300      	movs	r3, #0
 8001e42:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e44:	2301      	movs	r3, #1
 8001e46:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.IC2Filter = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001e50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e54:	4619      	mov	r1, r3
 8001e56:	4818      	ldr	r0, [pc, #96]	@ (8001eb8 <MX_TIM4_Init+0xf4>)
 8001e58:	f003 f902 	bl	8005060 <HAL_TIM_Encoder_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8001e62:	f7ff fc81 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e6e:	f107 0320 	add.w	r3, r7, #32
 8001e72:	4619      	mov	r1, r3
 8001e74:	4810      	ldr	r0, [pc, #64]	@ (8001eb8 <MX_TIM4_Init+0xf4>)
 8001e76:	f003 fe65 	bl	8005b44 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8001e80:	f7ff fc72 	bl	8001768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e84:	2360      	movs	r3, #96	@ 0x60
 8001e86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	220c      	movs	r2, #12
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4807      	ldr	r0, [pc, #28]	@ (8001eb8 <MX_TIM4_Init+0xf4>)
 8001e9c:	f003 f986 	bl	80051ac <HAL_TIM_PWM_ConfigChannel>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8001ea6:	f7ff fc5f 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001eaa:	4803      	ldr	r0, [pc, #12]	@ (8001eb8 <MX_TIM4_Init+0xf4>)
 8001eac:	f000 f8b4 	bl	8002018 <HAL_TIM_MspPostInit>

}
 8001eb0:	bf00      	nop
 8001eb2:	3750      	adds	r7, #80	@ 0x50
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20001bcc 	.word	0x20001bcc
 8001ebc:	40000800 	.word	0x40000800

08001ec0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08c      	sub	sp, #48	@ 0x30
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 031c 	add.w	r3, r7, #28
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a2a      	ldr	r2, [pc, #168]	@ (8001f88 <HAL_TIM_PWM_MspInit+0xc8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d10c      	bne.n	8001efc <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f8c <HAL_TIM_PWM_MspInit+0xcc>)
 8001ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee6:	4a29      	ldr	r2, [pc, #164]	@ (8001f8c <HAL_TIM_PWM_MspInit+0xcc>)
 8001ee8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001eec:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eee:	4b27      	ldr	r3, [pc, #156]	@ (8001f8c <HAL_TIM_PWM_MspInit+0xcc>)
 8001ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ef6:	61bb      	str	r3, [r7, #24]
 8001ef8:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001efa:	e040      	b.n	8001f7e <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f04:	d10c      	bne.n	8001f20 <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f06:	4b21      	ldr	r3, [pc, #132]	@ (8001f8c <HAL_TIM_PWM_MspInit+0xcc>)
 8001f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0a:	4a20      	ldr	r2, [pc, #128]	@ (8001f8c <HAL_TIM_PWM_MspInit+0xcc>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f12:	4b1e      	ldr	r3, [pc, #120]	@ (8001f8c <HAL_TIM_PWM_MspInit+0xcc>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697b      	ldr	r3, [r7, #20]
}
 8001f1e:	e02e      	b.n	8001f7e <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM4)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1a      	ldr	r2, [pc, #104]	@ (8001f90 <HAL_TIM_PWM_MspInit+0xd0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d129      	bne.n	8001f7e <HAL_TIM_PWM_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f2a:	4b18      	ldr	r3, [pc, #96]	@ (8001f8c <HAL_TIM_PWM_MspInit+0xcc>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2e:	4a17      	ldr	r2, [pc, #92]	@ (8001f8c <HAL_TIM_PWM_MspInit+0xcc>)
 8001f30:	f043 0304 	orr.w	r3, r3, #4
 8001f34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f36:	4b15      	ldr	r3, [pc, #84]	@ (8001f8c <HAL_TIM_PWM_MspInit+0xcc>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <HAL_TIM_PWM_MspInit+0xcc>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f46:	4a11      	ldr	r2, [pc, #68]	@ (8001f8c <HAL_TIM_PWM_MspInit+0xcc>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <HAL_TIM_PWM_MspInit+0xcc>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f5a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001f6c:	230a      	movs	r3, #10
 8001f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	4619      	mov	r1, r3
 8001f76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f7a:	f000 fe49 	bl	8002c10 <HAL_GPIO_Init>
}
 8001f7e:	bf00      	nop
 8001f80:	3730      	adds	r7, #48	@ 0x30
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40012c00 	.word	0x40012c00
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40000800 	.word	0x40000800

08001f94 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	@ 0x28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a17      	ldr	r2, [pc, #92]	@ (8002010 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d128      	bne.n	8002008 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fb6:	4b17      	ldr	r3, [pc, #92]	@ (8002014 <HAL_TIM_Encoder_MspInit+0x80>)
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fba:	4a16      	ldr	r2, [pc, #88]	@ (8002014 <HAL_TIM_Encoder_MspInit+0x80>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fc2:	4b14      	ldr	r3, [pc, #80]	@ (8002014 <HAL_TIM_Encoder_MspInit+0x80>)
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fce:	4b11      	ldr	r3, [pc, #68]	@ (8002014 <HAL_TIM_Encoder_MspInit+0x80>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd2:	4a10      	ldr	r2, [pc, #64]	@ (8002014 <HAL_TIM_Encoder_MspInit+0x80>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fda:	4b0e      	ldr	r3, [pc, #56]	@ (8002014 <HAL_TIM_Encoder_MspInit+0x80>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001fe6:	2350      	movs	r3, #80	@ 0x50
 8001fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002004:	f000 fe04 	bl	8002c10 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002008:	bf00      	nop
 800200a:	3728      	adds	r7, #40	@ 0x28
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40000400 	.word	0x40000400
 8002014:	40021000 	.word	0x40021000

08002018 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	@ 0x28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a35      	ldr	r2, [pc, #212]	@ (800210c <HAL_TIM_MspPostInit+0xf4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d11e      	bne.n	8002078 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	4b35      	ldr	r3, [pc, #212]	@ (8002110 <HAL_TIM_MspPostInit+0xf8>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203e:	4a34      	ldr	r2, [pc, #208]	@ (8002110 <HAL_TIM_MspPostInit+0xf8>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002046:	4b32      	ldr	r3, [pc, #200]	@ (8002110 <HAL_TIM_MspPostInit+0xf8>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002052:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002064:	2306      	movs	r3, #6
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	4619      	mov	r1, r3
 800206e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002072:	f000 fdcd 	bl	8002c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002076:	e044      	b.n	8002102 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002080:	d11d      	bne.n	80020be <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002082:	4b23      	ldr	r3, [pc, #140]	@ (8002110 <HAL_TIM_MspPostInit+0xf8>)
 8002084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002086:	4a22      	ldr	r2, [pc, #136]	@ (8002110 <HAL_TIM_MspPostInit+0xf8>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800208e:	4b20      	ldr	r3, [pc, #128]	@ (8002110 <HAL_TIM_MspPostInit+0xf8>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800209a:	2303      	movs	r3, #3
 800209c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020aa:	2301      	movs	r3, #1
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	4619      	mov	r1, r3
 80020b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020b8:	f000 fdaa 	bl	8002c10 <HAL_GPIO_Init>
}
 80020bc:	e021      	b.n	8002102 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM4)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a14      	ldr	r2, [pc, #80]	@ (8002114 <HAL_TIM_MspPostInit+0xfc>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d11c      	bne.n	8002102 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c8:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <HAL_TIM_MspPostInit+0xf8>)
 80020ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020cc:	4a10      	ldr	r2, [pc, #64]	@ (8002110 <HAL_TIM_MspPostInit+0xf8>)
 80020ce:	f043 0302 	orr.w	r3, r3, #2
 80020d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <HAL_TIM_MspPostInit+0xf8>)
 80020d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_CH4_M_SCTR_LIDAR_Pin;
 80020e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020f2:	2302      	movs	r3, #2
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM4_CH4_M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	4619      	mov	r1, r3
 80020fc:	4806      	ldr	r0, [pc, #24]	@ (8002118 <HAL_TIM_MspPostInit+0x100>)
 80020fe:	f000 fd87 	bl	8002c10 <HAL_GPIO_Init>
}
 8002102:	bf00      	nop
 8002104:	3728      	adds	r7, #40	@ 0x28
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40012c00 	.word	0x40012c00
 8002110:	40021000 	.word	0x40021000
 8002114:	40000800 	.word	0x40000800
 8002118:	48000400 	.word	0x48000400

0800211c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002120:	4b22      	ldr	r3, [pc, #136]	@ (80021ac <MX_USART2_UART_Init+0x90>)
 8002122:	4a23      	ldr	r2, [pc, #140]	@ (80021b0 <MX_USART2_UART_Init+0x94>)
 8002124:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002126:	4b21      	ldr	r3, [pc, #132]	@ (80021ac <MX_USART2_UART_Init+0x90>)
 8002128:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800212c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800212e:	4b1f      	ldr	r3, [pc, #124]	@ (80021ac <MX_USART2_UART_Init+0x90>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002134:	4b1d      	ldr	r3, [pc, #116]	@ (80021ac <MX_USART2_UART_Init+0x90>)
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800213a:	4b1c      	ldr	r3, [pc, #112]	@ (80021ac <MX_USART2_UART_Init+0x90>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002140:	4b1a      	ldr	r3, [pc, #104]	@ (80021ac <MX_USART2_UART_Init+0x90>)
 8002142:	220c      	movs	r2, #12
 8002144:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002146:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <MX_USART2_UART_Init+0x90>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800214c:	4b17      	ldr	r3, [pc, #92]	@ (80021ac <MX_USART2_UART_Init+0x90>)
 800214e:	2200      	movs	r2, #0
 8002150:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002152:	4b16      	ldr	r3, [pc, #88]	@ (80021ac <MX_USART2_UART_Init+0x90>)
 8002154:	2200      	movs	r2, #0
 8002156:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002158:	4b14      	ldr	r3, [pc, #80]	@ (80021ac <MX_USART2_UART_Init+0x90>)
 800215a:	2200      	movs	r2, #0
 800215c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800215e:	4b13      	ldr	r3, [pc, #76]	@ (80021ac <MX_USART2_UART_Init+0x90>)
 8002160:	2200      	movs	r2, #0
 8002162:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002164:	4811      	ldr	r0, [pc, #68]	@ (80021ac <MX_USART2_UART_Init+0x90>)
 8002166:	f003 fdfb 	bl	8005d60 <HAL_UART_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002170:	f7ff fafa 	bl	8001768 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002174:	2100      	movs	r1, #0
 8002176:	480d      	ldr	r0, [pc, #52]	@ (80021ac <MX_USART2_UART_Init+0x90>)
 8002178:	f004 fe47 	bl	8006e0a <HAL_UARTEx_SetTxFifoThreshold>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002182:	f7ff faf1 	bl	8001768 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002186:	2100      	movs	r1, #0
 8002188:	4808      	ldr	r0, [pc, #32]	@ (80021ac <MX_USART2_UART_Init+0x90>)
 800218a:	f004 fe7c 	bl	8006e86 <HAL_UARTEx_SetRxFifoThreshold>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002194:	f7ff fae8 	bl	8001768 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002198:	4804      	ldr	r0, [pc, #16]	@ (80021ac <MX_USART2_UART_Init+0x90>)
 800219a:	f004 fdfd 	bl	8006d98 <HAL_UARTEx_DisableFifoMode>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80021a4:	f7ff fae0 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20001c18 	.word	0x20001c18
 80021b0:	40004400 	.word	0x40004400

080021b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021b8:	4b22      	ldr	r3, [pc, #136]	@ (8002244 <MX_USART3_UART_Init+0x90>)
 80021ba:	4a23      	ldr	r2, [pc, #140]	@ (8002248 <MX_USART3_UART_Init+0x94>)
 80021bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 128000;
 80021be:	4b21      	ldr	r3, [pc, #132]	@ (8002244 <MX_USART3_UART_Init+0x90>)
 80021c0:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 80021c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002244 <MX_USART3_UART_Init+0x90>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002244 <MX_USART3_UART_Init+0x90>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002244 <MX_USART3_UART_Init+0x90>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002244 <MX_USART3_UART_Init+0x90>)
 80021da:	220c      	movs	r2, #12
 80021dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021de:	4b19      	ldr	r3, [pc, #100]	@ (8002244 <MX_USART3_UART_Init+0x90>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e4:	4b17      	ldr	r3, [pc, #92]	@ (8002244 <MX_USART3_UART_Init+0x90>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ea:	4b16      	ldr	r3, [pc, #88]	@ (8002244 <MX_USART3_UART_Init+0x90>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021f0:	4b14      	ldr	r3, [pc, #80]	@ (8002244 <MX_USART3_UART_Init+0x90>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021f6:	4b13      	ldr	r3, [pc, #76]	@ (8002244 <MX_USART3_UART_Init+0x90>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021fc:	4811      	ldr	r0, [pc, #68]	@ (8002244 <MX_USART3_UART_Init+0x90>)
 80021fe:	f003 fdaf 	bl	8005d60 <HAL_UART_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002208:	f7ff faae 	bl	8001768 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800220c:	2100      	movs	r1, #0
 800220e:	480d      	ldr	r0, [pc, #52]	@ (8002244 <MX_USART3_UART_Init+0x90>)
 8002210:	f004 fdfb 	bl	8006e0a <HAL_UARTEx_SetTxFifoThreshold>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800221a:	f7ff faa5 	bl	8001768 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800221e:	2100      	movs	r1, #0
 8002220:	4808      	ldr	r0, [pc, #32]	@ (8002244 <MX_USART3_UART_Init+0x90>)
 8002222:	f004 fe30 	bl	8006e86 <HAL_UARTEx_SetRxFifoThreshold>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800222c:	f7ff fa9c 	bl	8001768 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002230:	4804      	ldr	r0, [pc, #16]	@ (8002244 <MX_USART3_UART_Init+0x90>)
 8002232:	f004 fdb1 	bl	8006d98 <HAL_UARTEx_DisableFifoMode>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800223c:	f7ff fa94 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20001cac 	.word	0x20001cac
 8002248:	40004800 	.word	0x40004800

0800224c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b09c      	sub	sp, #112	@ 0x70
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002264:	f107 0318 	add.w	r3, r7, #24
 8002268:	2244      	movs	r2, #68	@ 0x44
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f007 fd11 	bl	8009c94 <memset>
  if(uartHandle->Instance==USART2)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a52      	ldr	r2, [pc, #328]	@ (80023c0 <HAL_UART_MspInit+0x174>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d137      	bne.n	80022ec <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800227c:	2302      	movs	r3, #2
 800227e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002280:	2300      	movs	r3, #0
 8002282:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002284:	f107 0318 	add.w	r3, r7, #24
 8002288:	4618      	mov	r0, r3
 800228a:	f001 fc6b 	bl	8003b64 <HAL_RCCEx_PeriphCLKConfig>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002294:	f7ff fa68 	bl	8001768 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002298:	4b4a      	ldr	r3, [pc, #296]	@ (80023c4 <HAL_UART_MspInit+0x178>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229c:	4a49      	ldr	r2, [pc, #292]	@ (80023c4 <HAL_UART_MspInit+0x178>)
 800229e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80022a4:	4b47      	ldr	r3, [pc, #284]	@ (80023c4 <HAL_UART_MspInit+0x178>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b0:	4b44      	ldr	r3, [pc, #272]	@ (80023c4 <HAL_UART_MspInit+0x178>)
 80022b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b4:	4a43      	ldr	r2, [pc, #268]	@ (80023c4 <HAL_UART_MspInit+0x178>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022bc:	4b41      	ldr	r3, [pc, #260]	@ (80023c4 <HAL_UART_MspInit+0x178>)
 80022be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022c8:	230c      	movs	r3, #12
 80022ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d4:	2300      	movs	r3, #0
 80022d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022d8:	2307      	movs	r3, #7
 80022da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80022e0:	4619      	mov	r1, r3
 80022e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022e6:	f000 fc93 	bl	8002c10 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022ea:	e065      	b.n	80023b8 <HAL_UART_MspInit+0x16c>
  else if(uartHandle->Instance==USART3)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a35      	ldr	r2, [pc, #212]	@ (80023c8 <HAL_UART_MspInit+0x17c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d160      	bne.n	80023b8 <HAL_UART_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022f6:	2304      	movs	r3, #4
 80022f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022fe:	f107 0318 	add.w	r3, r7, #24
 8002302:	4618      	mov	r0, r3
 8002304:	f001 fc2e 	bl	8003b64 <HAL_RCCEx_PeriphCLKConfig>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800230e:	f7ff fa2b 	bl	8001768 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002312:	4b2c      	ldr	r3, [pc, #176]	@ (80023c4 <HAL_UART_MspInit+0x178>)
 8002314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002316:	4a2b      	ldr	r2, [pc, #172]	@ (80023c4 <HAL_UART_MspInit+0x178>)
 8002318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800231c:	6593      	str	r3, [r2, #88]	@ 0x58
 800231e:	4b29      	ldr	r3, [pc, #164]	@ (80023c4 <HAL_UART_MspInit+0x178>)
 8002320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002322:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232a:	4b26      	ldr	r3, [pc, #152]	@ (80023c4 <HAL_UART_MspInit+0x178>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232e:	4a25      	ldr	r2, [pc, #148]	@ (80023c4 <HAL_UART_MspInit+0x178>)
 8002330:	f043 0302 	orr.w	r3, r3, #2
 8002334:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002336:	4b23      	ldr	r3, [pc, #140]	@ (80023c4 <HAL_UART_MspInit+0x178>)
 8002338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_LIDAR_Pin|USART3_RX_LIDAR_Pin;
 8002342:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002346:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002350:	2300      	movs	r3, #0
 8002352:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002354:	2307      	movs	r3, #7
 8002356:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002358:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800235c:	4619      	mov	r1, r3
 800235e:	481b      	ldr	r0, [pc, #108]	@ (80023cc <HAL_UART_MspInit+0x180>)
 8002360:	f000 fc56 	bl	8002c10 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8002364:	4b1a      	ldr	r3, [pc, #104]	@ (80023d0 <HAL_UART_MspInit+0x184>)
 8002366:	4a1b      	ldr	r2, [pc, #108]	@ (80023d4 <HAL_UART_MspInit+0x188>)
 8002368:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800236a:	4b19      	ldr	r3, [pc, #100]	@ (80023d0 <HAL_UART_MspInit+0x184>)
 800236c:	221c      	movs	r2, #28
 800236e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002370:	4b17      	ldr	r3, [pc, #92]	@ (80023d0 <HAL_UART_MspInit+0x184>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002376:	4b16      	ldr	r3, [pc, #88]	@ (80023d0 <HAL_UART_MspInit+0x184>)
 8002378:	2200      	movs	r2, #0
 800237a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800237c:	4b14      	ldr	r3, [pc, #80]	@ (80023d0 <HAL_UART_MspInit+0x184>)
 800237e:	2280      	movs	r2, #128	@ 0x80
 8002380:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002382:	4b13      	ldr	r3, [pc, #76]	@ (80023d0 <HAL_UART_MspInit+0x184>)
 8002384:	2200      	movs	r2, #0
 8002386:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002388:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <HAL_UART_MspInit+0x184>)
 800238a:	2200      	movs	r2, #0
 800238c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800238e:	4b10      	ldr	r3, [pc, #64]	@ (80023d0 <HAL_UART_MspInit+0x184>)
 8002390:	2220      	movs	r2, #32
 8002392:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002394:	4b0e      	ldr	r3, [pc, #56]	@ (80023d0 <HAL_UART_MspInit+0x184>)
 8002396:	2200      	movs	r2, #0
 8002398:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800239a:	480d      	ldr	r0, [pc, #52]	@ (80023d0 <HAL_UART_MspInit+0x184>)
 800239c:	f000 f9c6 	bl	800272c <HAL_DMA_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_UART_MspInit+0x15e>
      Error_Handler();
 80023a6:	f7ff f9df 	bl	8001768 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a08      	ldr	r2, [pc, #32]	@ (80023d0 <HAL_UART_MspInit+0x184>)
 80023ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80023b2:	4a07      	ldr	r2, [pc, #28]	@ (80023d0 <HAL_UART_MspInit+0x184>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80023b8:	bf00      	nop
 80023ba:	3770      	adds	r7, #112	@ 0x70
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40004400 	.word	0x40004400
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40004800 	.word	0x40004800
 80023cc:	48000400 	.word	0x48000400
 80023d0:	20001d40 	.word	0x20001d40
 80023d4:	40020008 	.word	0x40020008

080023d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023d8:	480d      	ldr	r0, [pc, #52]	@ (8002410 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023da:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80023dc:	f7ff fb88 	bl	8001af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023e0:	480c      	ldr	r0, [pc, #48]	@ (8002414 <LoopForever+0x6>)
  ldr r1, =_edata
 80023e2:	490d      	ldr	r1, [pc, #52]	@ (8002418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023e4:	4a0d      	ldr	r2, [pc, #52]	@ (800241c <LoopForever+0xe>)
  movs r3, #0
 80023e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023e8:	e002      	b.n	80023f0 <LoopCopyDataInit>

080023ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ee:	3304      	adds	r3, #4

080023f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f4:	d3f9      	bcc.n	80023ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002424 <LoopForever+0x16>)
  movs r3, #0
 80023fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023fc:	e001      	b.n	8002402 <LoopFillZerobss>

080023fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002400:	3204      	adds	r2, #4

08002402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002404:	d3fb      	bcc.n	80023fe <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002406:	f007 fc9d 	bl	8009d44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800240a:	f7ff f841 	bl	8001490 <main>

0800240e <LoopForever>:

LoopForever:
    b LoopForever
 800240e:	e7fe      	b.n	800240e <LoopForever>
  ldr   r0, =_estack
 8002410:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002418:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800241c:	0800d8f0 	.word	0x0800d8f0
  ldr r2, =_sbss
 8002420:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002424:	20004754 	.word	0x20004754

08002428 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002428:	e7fe      	b.n	8002428 <ADC1_2_IRQHandler>

0800242a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002434:	2003      	movs	r0, #3
 8002436:	f000 f939 	bl	80026ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800243a:	200f      	movs	r0, #15
 800243c:	f000 f80e 	bl	800245c <HAL_InitTick>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	71fb      	strb	r3, [r7, #7]
 800244a:	e001      	b.n	8002450 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800244c:	f7ff fa14 	bl	8001878 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002450:	79fb      	ldrb	r3, [r7, #7]

}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002468:	4b16      	ldr	r3, [pc, #88]	@ (80024c4 <HAL_InitTick+0x68>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d022      	beq.n	80024b6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002470:	4b15      	ldr	r3, [pc, #84]	@ (80024c8 <HAL_InitTick+0x6c>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b13      	ldr	r3, [pc, #76]	@ (80024c4 <HAL_InitTick+0x68>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800247c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002480:	fbb2 f3f3 	udiv	r3, r2, r3
 8002484:	4618      	mov	r0, r3
 8002486:	f000 f944 	bl	8002712 <HAL_SYSTICK_Config>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10f      	bne.n	80024b0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b0f      	cmp	r3, #15
 8002494:	d809      	bhi.n	80024aa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002496:	2200      	movs	r2, #0
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	f04f 30ff 	mov.w	r0, #4294967295
 800249e:	f000 f910 	bl	80026c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024a2:	4a0a      	ldr	r2, [pc, #40]	@ (80024cc <HAL_InitTick+0x70>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	e007      	b.n	80024ba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
 80024ae:	e004      	b.n	80024ba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
 80024b4:	e001      	b.n	80024ba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000008 	.word	0x20000008
 80024c8:	20000000 	.word	0x20000000
 80024cc:	20000004 	.word	0x20000004

080024d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d4:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <HAL_IncTick+0x1c>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <HAL_IncTick+0x20>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	4a03      	ldr	r2, [pc, #12]	@ (80024ec <HAL_IncTick+0x1c>)
 80024e0:	6013      	str	r3, [r2, #0]
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	20001da0 	.word	0x20001da0
 80024f0:	20000008 	.word	0x20000008

080024f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return uwTick;
 80024f8:	4b03      	ldr	r3, [pc, #12]	@ (8002508 <HAL_GetTick+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20001da0 	.word	0x20001da0

0800250c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800251c:	4b0c      	ldr	r3, [pc, #48]	@ (8002550 <__NVIC_SetPriorityGrouping+0x44>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002528:	4013      	ands	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002534:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800253c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253e:	4a04      	ldr	r2, [pc, #16]	@ (8002550 <__NVIC_SetPriorityGrouping+0x44>)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	60d3      	str	r3, [r2, #12]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002558:	4b04      	ldr	r3, [pc, #16]	@ (800256c <__NVIC_GetPriorityGrouping+0x18>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	f003 0307 	and.w	r3, r3, #7
}
 8002562:	4618      	mov	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	2b00      	cmp	r3, #0
 8002580:	db0b      	blt.n	800259a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	f003 021f 	and.w	r2, r3, #31
 8002588:	4907      	ldr	r1, [pc, #28]	@ (80025a8 <__NVIC_EnableIRQ+0x38>)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	2001      	movs	r0, #1
 8002592:	fa00 f202 	lsl.w	r2, r0, r2
 8002596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000e100 	.word	0xe000e100

080025ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	6039      	str	r1, [r7, #0]
 80025b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	db0a      	blt.n	80025d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	490c      	ldr	r1, [pc, #48]	@ (80025f8 <__NVIC_SetPriority+0x4c>)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	0112      	lsls	r2, r2, #4
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	440b      	add	r3, r1
 80025d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d4:	e00a      	b.n	80025ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	4908      	ldr	r1, [pc, #32]	@ (80025fc <__NVIC_SetPriority+0x50>)
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	3b04      	subs	r3, #4
 80025e4:	0112      	lsls	r2, r2, #4
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	440b      	add	r3, r1
 80025ea:	761a      	strb	r2, [r3, #24]
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000e100 	.word	0xe000e100
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	@ 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f1c3 0307 	rsb	r3, r3, #7
 800261a:	2b04      	cmp	r3, #4
 800261c:	bf28      	it	cs
 800261e:	2304      	movcs	r3, #4
 8002620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3304      	adds	r3, #4
 8002626:	2b06      	cmp	r3, #6
 8002628:	d902      	bls.n	8002630 <NVIC_EncodePriority+0x30>
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3b03      	subs	r3, #3
 800262e:	e000      	b.n	8002632 <NVIC_EncodePriority+0x32>
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002634:	f04f 32ff 	mov.w	r2, #4294967295
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43da      	mvns	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	401a      	ands	r2, r3
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002648:	f04f 31ff 	mov.w	r1, #4294967295
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	fa01 f303 	lsl.w	r3, r1, r3
 8002652:	43d9      	mvns	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002658:	4313      	orrs	r3, r2
         );
}
 800265a:	4618      	mov	r0, r3
 800265c:	3724      	adds	r7, #36	@ 0x24
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3b01      	subs	r3, #1
 8002674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002678:	d301      	bcc.n	800267e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800267a:	2301      	movs	r3, #1
 800267c:	e00f      	b.n	800269e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267e:	4a0a      	ldr	r2, [pc, #40]	@ (80026a8 <SysTick_Config+0x40>)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3b01      	subs	r3, #1
 8002684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002686:	210f      	movs	r1, #15
 8002688:	f04f 30ff 	mov.w	r0, #4294967295
 800268c:	f7ff ff8e 	bl	80025ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002690:	4b05      	ldr	r3, [pc, #20]	@ (80026a8 <SysTick_Config+0x40>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002696:	4b04      	ldr	r3, [pc, #16]	@ (80026a8 <SysTick_Config+0x40>)
 8002698:	2207      	movs	r2, #7
 800269a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	e000e010 	.word	0xe000e010

080026ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ff29 	bl	800250c <__NVIC_SetPriorityGrouping>
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026d0:	f7ff ff40 	bl	8002554 <__NVIC_GetPriorityGrouping>
 80026d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	6978      	ldr	r0, [r7, #20]
 80026dc:	f7ff ff90 	bl	8002600 <NVIC_EncodePriority>
 80026e0:	4602      	mov	r2, r0
 80026e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff5f 	bl	80025ac <__NVIC_SetPriority>
}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4603      	mov	r3, r0
 80026fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff33 	bl	8002570 <__NVIC_EnableIRQ>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ffa4 	bl	8002668 <SysTick_Config>
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e08d      	b.n	800285a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	4b47      	ldr	r3, [pc, #284]	@ (8002864 <HAL_DMA_Init+0x138>)
 8002746:	429a      	cmp	r2, r3
 8002748:	d80f      	bhi.n	800276a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	4b45      	ldr	r3, [pc, #276]	@ (8002868 <HAL_DMA_Init+0x13c>)
 8002752:	4413      	add	r3, r2
 8002754:	4a45      	ldr	r2, [pc, #276]	@ (800286c <HAL_DMA_Init+0x140>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	091b      	lsrs	r3, r3, #4
 800275c:	009a      	lsls	r2, r3, #2
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a42      	ldr	r2, [pc, #264]	@ (8002870 <HAL_DMA_Init+0x144>)
 8002766:	641a      	str	r2, [r3, #64]	@ 0x40
 8002768:	e00e      	b.n	8002788 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	4b40      	ldr	r3, [pc, #256]	@ (8002874 <HAL_DMA_Init+0x148>)
 8002772:	4413      	add	r3, r2
 8002774:	4a3d      	ldr	r2, [pc, #244]	@ (800286c <HAL_DMA_Init+0x140>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	091b      	lsrs	r3, r3, #4
 800277c:	009a      	lsls	r2, r3, #2
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a3c      	ldr	r2, [pc, #240]	@ (8002878 <HAL_DMA_Init+0x14c>)
 8002786:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800279e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f9b6 	bl	8002b4c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027e8:	d102      	bne.n	80027f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002804:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d010      	beq.n	8002830 <HAL_DMA_Init+0x104>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b04      	cmp	r3, #4
 8002814:	d80c      	bhi.n	8002830 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f9d6 	bl	8002bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	e008      	b.n	8002842 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40020407 	.word	0x40020407
 8002868:	bffdfff8 	.word	0xbffdfff8
 800286c:	cccccccd 	.word	0xcccccccd
 8002870:	40020000 	.word	0x40020000
 8002874:	bffdfbf8 	.word	0xbffdfbf8
 8002878:	40020400 	.word	0x40020400

0800287c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_DMA_Start_IT+0x20>
 8002898:	2302      	movs	r3, #2
 800289a:	e066      	b.n	800296a <HAL_DMA_Start_IT+0xee>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d155      	bne.n	800295c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0201 	bic.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f8fb 	bl	8002ad0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d008      	beq.n	80028f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f042 020e 	orr.w	r2, r2, #14
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	e00f      	b.n	8002914 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0204 	bic.w	r2, r2, #4
 8002902:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 020a 	orr.w	r2, r2, #10
 8002912:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800292c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002930:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002944:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002948:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 0201 	orr.w	r2, r2, #1
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e005      	b.n	8002968 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002964:	2302      	movs	r3, #2
 8002966:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002968:	7dfb      	ldrb	r3, [r7, #23]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	2204      	movs	r2, #4
 8002994:	409a      	lsls	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d026      	beq.n	80029ec <HAL_DMA_IRQHandler+0x7a>
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d021      	beq.n	80029ec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d107      	bne.n	80029c6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0204 	bic.w	r2, r2, #4
 80029c4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ca:	f003 021f 	and.w	r2, r3, #31
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	2104      	movs	r1, #4
 80029d4:	fa01 f202 	lsl.w	r2, r1, r2
 80029d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d071      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80029ea:	e06c      	b.n	8002ac6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	2202      	movs	r2, #2
 80029f6:	409a      	lsls	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d02e      	beq.n	8002a5e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d029      	beq.n	8002a5e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0320 	and.w	r3, r3, #32
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10b      	bne.n	8002a30 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 020a 	bic.w	r2, r2, #10
 8002a26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a42:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d038      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a5c:	e033      	b.n	8002ac6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a62:	f003 031f 	and.w	r3, r3, #31
 8002a66:	2208      	movs	r2, #8
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d02a      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d025      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 020e 	bic.w	r2, r2, #14
 8002a8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a90:	f003 021f 	and.w	r2, r3, #31
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	2101      	movs	r1, #1
 8002a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d004      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ac6:	bf00      	nop
 8002ac8:	bf00      	nop
}
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ae6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d004      	beq.n	8002afa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002af8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afe:	f003 021f 	and.w	r2, r3, #31
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	2101      	movs	r1, #1
 8002b08:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b10      	cmp	r3, #16
 8002b1c:	d108      	bne.n	8002b30 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b2e:	e007      	b.n	8002b40 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	60da      	str	r2, [r3, #12]
}
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b16      	ldr	r3, [pc, #88]	@ (8002bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d802      	bhi.n	8002b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002b60:	4b15      	ldr	r3, [pc, #84]	@ (8002bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	e001      	b.n	8002b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002b66:	4b15      	ldr	r3, [pc, #84]	@ (8002bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002b68:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	3b08      	subs	r3, #8
 8002b76:	4a12      	ldr	r2, [pc, #72]	@ (8002bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002b78:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b84:	089b      	lsrs	r3, r3, #2
 8002b86:	009a      	lsls	r2, r3, #2
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002b96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 031f 	and.w	r3, r3, #31
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40020407 	.word	0x40020407
 8002bb8:	40020800 	.word	0x40020800
 8002bbc:	40020820 	.word	0x40020820
 8002bc0:	cccccccd 	.word	0xcccccccd
 8002bc4:	40020880 	.word	0x40020880

08002bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	461a      	mov	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a08      	ldr	r2, [pc, #32]	@ (8002c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002bea:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	1000823f 	.word	0x1000823f
 8002c0c:	40020940 	.word	0x40020940

08002c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c1e:	e15a      	b.n	8002ed6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	2101      	movs	r1, #1
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 814c 	beq.w	8002ed0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d005      	beq.n	8002c50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d130      	bne.n	8002cb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4013      	ands	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c86:	2201      	movs	r2, #1
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4013      	ands	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	091b      	lsrs	r3, r3, #4
 8002c9c:	f003 0201 	and.w	r2, r3, #1
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	d017      	beq.n	8002cee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	2203      	movs	r2, #3
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d123      	bne.n	8002d42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	08da      	lsrs	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3208      	adds	r2, #8
 8002d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	220f      	movs	r2, #15
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	691a      	ldr	r2, [r3, #16]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	08da      	lsrs	r2, r3, #3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3208      	adds	r2, #8
 8002d3c:	6939      	ldr	r1, [r7, #16]
 8002d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43db      	mvns	r3, r3
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4013      	ands	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 0203 	and.w	r2, r3, #3
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80a6 	beq.w	8002ed0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d84:	4b5b      	ldr	r3, [pc, #364]	@ (8002ef4 <HAL_GPIO_Init+0x2e4>)
 8002d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d88:	4a5a      	ldr	r2, [pc, #360]	@ (8002ef4 <HAL_GPIO_Init+0x2e4>)
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d90:	4b58      	ldr	r3, [pc, #352]	@ (8002ef4 <HAL_GPIO_Init+0x2e4>)
 8002d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d9c:	4a56      	ldr	r2, [pc, #344]	@ (8002ef8 <HAL_GPIO_Init+0x2e8>)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	089b      	lsrs	r3, r3, #2
 8002da2:	3302      	adds	r3, #2
 8002da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	220f      	movs	r2, #15
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002dc6:	d01f      	beq.n	8002e08 <HAL_GPIO_Init+0x1f8>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a4c      	ldr	r2, [pc, #304]	@ (8002efc <HAL_GPIO_Init+0x2ec>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d019      	beq.n	8002e04 <HAL_GPIO_Init+0x1f4>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a4b      	ldr	r2, [pc, #300]	@ (8002f00 <HAL_GPIO_Init+0x2f0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d013      	beq.n	8002e00 <HAL_GPIO_Init+0x1f0>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a4a      	ldr	r2, [pc, #296]	@ (8002f04 <HAL_GPIO_Init+0x2f4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00d      	beq.n	8002dfc <HAL_GPIO_Init+0x1ec>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a49      	ldr	r2, [pc, #292]	@ (8002f08 <HAL_GPIO_Init+0x2f8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d007      	beq.n	8002df8 <HAL_GPIO_Init+0x1e8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a48      	ldr	r2, [pc, #288]	@ (8002f0c <HAL_GPIO_Init+0x2fc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d101      	bne.n	8002df4 <HAL_GPIO_Init+0x1e4>
 8002df0:	2305      	movs	r3, #5
 8002df2:	e00a      	b.n	8002e0a <HAL_GPIO_Init+0x1fa>
 8002df4:	2306      	movs	r3, #6
 8002df6:	e008      	b.n	8002e0a <HAL_GPIO_Init+0x1fa>
 8002df8:	2304      	movs	r3, #4
 8002dfa:	e006      	b.n	8002e0a <HAL_GPIO_Init+0x1fa>
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e004      	b.n	8002e0a <HAL_GPIO_Init+0x1fa>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e002      	b.n	8002e0a <HAL_GPIO_Init+0x1fa>
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <HAL_GPIO_Init+0x1fa>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	f002 0203 	and.w	r2, r2, #3
 8002e10:	0092      	lsls	r2, r2, #2
 8002e12:	4093      	lsls	r3, r2
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e1a:	4937      	ldr	r1, [pc, #220]	@ (8002ef8 <HAL_GPIO_Init+0x2e8>)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	089b      	lsrs	r3, r3, #2
 8002e20:	3302      	adds	r3, #2
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e28:	4b39      	ldr	r3, [pc, #228]	@ (8002f10 <HAL_GPIO_Init+0x300>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4013      	ands	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e4c:	4a30      	ldr	r2, [pc, #192]	@ (8002f10 <HAL_GPIO_Init+0x300>)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e52:	4b2f      	ldr	r3, [pc, #188]	@ (8002f10 <HAL_GPIO_Init+0x300>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e76:	4a26      	ldr	r2, [pc, #152]	@ (8002f10 <HAL_GPIO_Init+0x300>)
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002e7c:	4b24      	ldr	r3, [pc, #144]	@ (8002f10 <HAL_GPIO_Init+0x300>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f10 <HAL_GPIO_Init+0x300>)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f10 <HAL_GPIO_Init+0x300>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002eca:	4a11      	ldr	r2, [pc, #68]	@ (8002f10 <HAL_GPIO_Init+0x300>)
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f47f ae9d 	bne.w	8002c20 <HAL_GPIO_Init+0x10>
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	bf00      	nop
 8002eea:	371c      	adds	r7, #28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40010000 	.word	0x40010000
 8002efc:	48000400 	.word	0x48000400
 8002f00:	48000800 	.word	0x48000800
 8002f04:	48000c00 	.word	0x48000c00
 8002f08:	48001000 	.word	0x48001000
 8002f0c:	48001400 	.word	0x48001400
 8002f10:	40010400 	.word	0x40010400

08002f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	807b      	strh	r3, [r7, #2]
 8002f20:	4613      	mov	r3, r2
 8002f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f24:	787b      	ldrb	r3, [r7, #1]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f2a:	887a      	ldrh	r2, [r7, #2]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f30:	e002      	b.n	8002f38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f32:	887a      	ldrh	r2, [r7, #2]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f56:	887a      	ldrh	r2, [r7, #2]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	041a      	lsls	r2, r3, #16
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	43d9      	mvns	r1, r3
 8002f62:	887b      	ldrh	r3, [r7, #2]
 8002f64:	400b      	ands	r3, r1
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	619a      	str	r2, [r3, #24]
}
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f82:	4b08      	ldr	r3, [pc, #32]	@ (8002fa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d006      	beq.n	8002f9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f8e:	4a05      	ldr	r2, [pc, #20]	@ (8002fa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe fb6c 	bl	8001674 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40010400 	.word	0x40010400

08002fa8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d141      	bne.n	800303a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fb6:	4b4b      	ldr	r3, [pc, #300]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc2:	d131      	bne.n	8003028 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fc4:	4b47      	ldr	r3, [pc, #284]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fca:	4a46      	ldr	r2, [pc, #280]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fd4:	4b43      	ldr	r3, [pc, #268]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fdc:	4a41      	ldr	r2, [pc, #260]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fe2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fe4:	4b40      	ldr	r3, [pc, #256]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2232      	movs	r2, #50	@ 0x32
 8002fea:	fb02 f303 	mul.w	r3, r2, r3
 8002fee:	4a3f      	ldr	r2, [pc, #252]	@ (80030ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	0c9b      	lsrs	r3, r3, #18
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ffa:	e002      	b.n	8003002 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003002:	4b38      	ldr	r3, [pc, #224]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800300e:	d102      	bne.n	8003016 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f2      	bne.n	8002ffc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003016:	4b33      	ldr	r3, [pc, #204]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003022:	d158      	bne.n	80030d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e057      	b.n	80030d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003028:	4b2e      	ldr	r3, [pc, #184]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800302e:	4a2d      	ldr	r2, [pc, #180]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003034:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003038:	e04d      	b.n	80030d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003040:	d141      	bne.n	80030c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003042:	4b28      	ldr	r3, [pc, #160]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800304a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800304e:	d131      	bne.n	80030b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003050:	4b24      	ldr	r3, [pc, #144]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003056:	4a23      	ldr	r2, [pc, #140]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800305c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003060:	4b20      	ldr	r3, [pc, #128]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003068:	4a1e      	ldr	r2, [pc, #120]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800306e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003070:	4b1d      	ldr	r3, [pc, #116]	@ (80030e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2232      	movs	r2, #50	@ 0x32
 8003076:	fb02 f303 	mul.w	r3, r2, r3
 800307a:	4a1c      	ldr	r2, [pc, #112]	@ (80030ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800307c:	fba2 2303 	umull	r2, r3, r2, r3
 8003080:	0c9b      	lsrs	r3, r3, #18
 8003082:	3301      	adds	r3, #1
 8003084:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003086:	e002      	b.n	800308e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3b01      	subs	r3, #1
 800308c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800308e:	4b15      	ldr	r3, [pc, #84]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800309a:	d102      	bne.n	80030a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f2      	bne.n	8003088 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030a2:	4b10      	ldr	r3, [pc, #64]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ae:	d112      	bne.n	80030d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e011      	b.n	80030d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030b4:	4b0b      	ldr	r3, [pc, #44]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030ba:	4a0a      	ldr	r2, [pc, #40]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80030c4:	e007      	b.n	80030d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030c6:	4b07      	ldr	r3, [pc, #28]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030ce:	4a05      	ldr	r2, [pc, #20]	@ (80030e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	40007000 	.word	0x40007000
 80030e8:	20000000 	.word	0x20000000
 80030ec:	431bde83 	.word	0x431bde83

080030f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80030f4:	4b05      	ldr	r3, [pc, #20]	@ (800310c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4a04      	ldr	r2, [pc, #16]	@ (800310c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030fe:	6093      	str	r3, [r2, #8]
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40007000 	.word	0x40007000

08003110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e2fe      	b.n	8003720 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d075      	beq.n	800321a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800312e:	4b97      	ldr	r3, [pc, #604]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003138:	4b94      	ldr	r3, [pc, #592]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	2b0c      	cmp	r3, #12
 8003146:	d102      	bne.n	800314e <HAL_RCC_OscConfig+0x3e>
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2b03      	cmp	r3, #3
 800314c:	d002      	beq.n	8003154 <HAL_RCC_OscConfig+0x44>
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b08      	cmp	r3, #8
 8003152:	d10b      	bne.n	800316c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003154:	4b8d      	ldr	r3, [pc, #564]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d05b      	beq.n	8003218 <HAL_RCC_OscConfig+0x108>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d157      	bne.n	8003218 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e2d9      	b.n	8003720 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003174:	d106      	bne.n	8003184 <HAL_RCC_OscConfig+0x74>
 8003176:	4b85      	ldr	r3, [pc, #532]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a84      	ldr	r2, [pc, #528]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 800317c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	e01d      	b.n	80031c0 <HAL_RCC_OscConfig+0xb0>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800318c:	d10c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x98>
 800318e:	4b7f      	ldr	r3, [pc, #508]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a7e      	ldr	r2, [pc, #504]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 8003194:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4b7c      	ldr	r3, [pc, #496]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a7b      	ldr	r2, [pc, #492]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e00b      	b.n	80031c0 <HAL_RCC_OscConfig+0xb0>
 80031a8:	4b78      	ldr	r3, [pc, #480]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a77      	ldr	r2, [pc, #476]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 80031ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	4b75      	ldr	r3, [pc, #468]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a74      	ldr	r2, [pc, #464]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 80031ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d013      	beq.n	80031f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7ff f994 	bl	80024f4 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d0:	f7ff f990 	bl	80024f4 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	@ 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e29e      	b.n	8003720 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031e2:	4b6a      	ldr	r3, [pc, #424]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0xc0>
 80031ee:	e014      	b.n	800321a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7ff f980 	bl	80024f4 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f8:	f7ff f97c 	bl	80024f4 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	@ 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e28a      	b.n	8003720 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800320a:	4b60      	ldr	r3, [pc, #384]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0xe8>
 8003216:	e000      	b.n	800321a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d075      	beq.n	8003312 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003226:	4b59      	ldr	r3, [pc, #356]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003230:	4b56      	ldr	r3, [pc, #344]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	2b0c      	cmp	r3, #12
 800323e:	d102      	bne.n	8003246 <HAL_RCC_OscConfig+0x136>
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d002      	beq.n	800324c <HAL_RCC_OscConfig+0x13c>
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	2b04      	cmp	r3, #4
 800324a:	d11f      	bne.n	800328c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800324c:	4b4f      	ldr	r3, [pc, #316]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_RCC_OscConfig+0x154>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e25d      	b.n	8003720 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003264:	4b49      	ldr	r3, [pc, #292]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	061b      	lsls	r3, r3, #24
 8003272:	4946      	ldr	r1, [pc, #280]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003278:	4b45      	ldr	r3, [pc, #276]	@ (8003390 <HAL_RCC_OscConfig+0x280>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff f8ed 	bl	800245c <HAL_InitTick>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d043      	beq.n	8003310 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e249      	b.n	8003720 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d023      	beq.n	80032dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003294:	4b3d      	ldr	r3, [pc, #244]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a3c      	ldr	r2, [pc, #240]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 800329a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800329e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7ff f928 	bl	80024f4 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032a8:	f7ff f924 	bl	80024f4 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e232      	b.n	8003720 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ba:	4b34      	ldr	r3, [pc, #208]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c6:	4b31      	ldr	r3, [pc, #196]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	061b      	lsls	r3, r3, #24
 80032d4:	492d      	ldr	r1, [pc, #180]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	604b      	str	r3, [r1, #4]
 80032da:	e01a      	b.n	8003312 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032dc:	4b2b      	ldr	r3, [pc, #172]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a2a      	ldr	r2, [pc, #168]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 80032e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7ff f904 	bl	80024f4 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f0:	f7ff f900 	bl	80024f4 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e20e      	b.n	8003720 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003302:	4b22      	ldr	r3, [pc, #136]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x1e0>
 800330e:	e000      	b.n	8003312 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003310:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d041      	beq.n	80033a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d01c      	beq.n	8003360 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003326:	4b19      	ldr	r3, [pc, #100]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 8003328:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800332c:	4a17      	ldr	r2, [pc, #92]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003336:	f7ff f8dd 	bl	80024f4 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800333e:	f7ff f8d9 	bl	80024f4 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e1e7      	b.n	8003720 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003350:	4b0e      	ldr	r3, [pc, #56]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 8003352:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0ef      	beq.n	800333e <HAL_RCC_OscConfig+0x22e>
 800335e:	e020      	b.n	80033a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003360:	4b0a      	ldr	r3, [pc, #40]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 8003362:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003366:	4a09      	ldr	r2, [pc, #36]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 8003368:	f023 0301 	bic.w	r3, r3, #1
 800336c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003370:	f7ff f8c0 	bl	80024f4 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003376:	e00d      	b.n	8003394 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003378:	f7ff f8bc 	bl	80024f4 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d906      	bls.n	8003394 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e1ca      	b.n	8003720 <HAL_RCC_OscConfig+0x610>
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000
 8003390:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003394:	4b8c      	ldr	r3, [pc, #560]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 8003396:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1ea      	bne.n	8003378 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 80a6 	beq.w	80034fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b0:	2300      	movs	r3, #0
 80033b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033b4:	4b84      	ldr	r3, [pc, #528]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 80033b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_OscConfig+0x2b4>
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <HAL_RCC_OscConfig+0x2b6>
 80033c4:	2300      	movs	r3, #0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00d      	beq.n	80033e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ca:	4b7f      	ldr	r3, [pc, #508]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ce:	4a7e      	ldr	r2, [pc, #504]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 80033d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80033d6:	4b7c      	ldr	r3, [pc, #496]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 80033d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80033e2:	2301      	movs	r3, #1
 80033e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e6:	4b79      	ldr	r3, [pc, #484]	@ (80035cc <HAL_RCC_OscConfig+0x4bc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d118      	bne.n	8003424 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033f2:	4b76      	ldr	r3, [pc, #472]	@ (80035cc <HAL_RCC_OscConfig+0x4bc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a75      	ldr	r2, [pc, #468]	@ (80035cc <HAL_RCC_OscConfig+0x4bc>)
 80033f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033fe:	f7ff f879 	bl	80024f4 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003406:	f7ff f875 	bl	80024f4 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e183      	b.n	8003720 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003418:	4b6c      	ldr	r3, [pc, #432]	@ (80035cc <HAL_RCC_OscConfig+0x4bc>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d108      	bne.n	800343e <HAL_RCC_OscConfig+0x32e>
 800342c:	4b66      	ldr	r3, [pc, #408]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003432:	4a65      	ldr	r2, [pc, #404]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800343c:	e024      	b.n	8003488 <HAL_RCC_OscConfig+0x378>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b05      	cmp	r3, #5
 8003444:	d110      	bne.n	8003468 <HAL_RCC_OscConfig+0x358>
 8003446:	4b60      	ldr	r3, [pc, #384]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 8003448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344c:	4a5e      	ldr	r2, [pc, #376]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 800344e:	f043 0304 	orr.w	r3, r3, #4
 8003452:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003456:	4b5c      	ldr	r3, [pc, #368]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 8003458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345c:	4a5a      	ldr	r2, [pc, #360]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003466:	e00f      	b.n	8003488 <HAL_RCC_OscConfig+0x378>
 8003468:	4b57      	ldr	r3, [pc, #348]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346e:	4a56      	ldr	r2, [pc, #344]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 8003470:	f023 0301 	bic.w	r3, r3, #1
 8003474:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003478:	4b53      	ldr	r3, [pc, #332]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347e:	4a52      	ldr	r2, [pc, #328]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 8003480:	f023 0304 	bic.w	r3, r3, #4
 8003484:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d016      	beq.n	80034be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003490:	f7ff f830 	bl	80024f4 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003496:	e00a      	b.n	80034ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003498:	f7ff f82c 	bl	80024f4 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e138      	b.n	8003720 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ae:	4b46      	ldr	r3, [pc, #280]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0ed      	beq.n	8003498 <HAL_RCC_OscConfig+0x388>
 80034bc:	e015      	b.n	80034ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034be:	f7ff f819 	bl	80024f4 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034c4:	e00a      	b.n	80034dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c6:	f7ff f815 	bl	80024f4 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e121      	b.n	8003720 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034dc:	4b3a      	ldr	r3, [pc, #232]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1ed      	bne.n	80034c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034ea:	7ffb      	ldrb	r3, [r7, #31]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d105      	bne.n	80034fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f0:	4b35      	ldr	r3, [pc, #212]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 80034f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f4:	4a34      	ldr	r2, [pc, #208]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 80034f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b00      	cmp	r3, #0
 8003506:	d03c      	beq.n	8003582 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01c      	beq.n	800354a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003510:	4b2d      	ldr	r3, [pc, #180]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 8003512:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003516:	4a2c      	ldr	r2, [pc, #176]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003520:	f7fe ffe8 	bl	80024f4 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003528:	f7fe ffe4 	bl	80024f4 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e0f2      	b.n	8003720 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800353a:	4b23      	ldr	r3, [pc, #140]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 800353c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0ef      	beq.n	8003528 <HAL_RCC_OscConfig+0x418>
 8003548:	e01b      	b.n	8003582 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800354a:	4b1f      	ldr	r3, [pc, #124]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 800354c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003550:	4a1d      	ldr	r2, [pc, #116]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 8003552:	f023 0301 	bic.w	r3, r3, #1
 8003556:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355a:	f7fe ffcb 	bl	80024f4 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003562:	f7fe ffc7 	bl	80024f4 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e0d5      	b.n	8003720 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003574:	4b14      	ldr	r3, [pc, #80]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 8003576:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1ef      	bne.n	8003562 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 80c9 	beq.w	800371e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800358c:	4b0e      	ldr	r3, [pc, #56]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b0c      	cmp	r3, #12
 8003596:	f000 8083 	beq.w	80036a0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d15e      	bne.n	8003660 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a2:	4b09      	ldr	r3, [pc, #36]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a08      	ldr	r2, [pc, #32]	@ (80035c8 <HAL_RCC_OscConfig+0x4b8>)
 80035a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ae:	f7fe ffa1 	bl	80024f4 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b4:	e00c      	b.n	80035d0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b6:	f7fe ff9d 	bl	80024f4 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d905      	bls.n	80035d0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e0ab      	b.n	8003720 <HAL_RCC_OscConfig+0x610>
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d0:	4b55      	ldr	r3, [pc, #340]	@ (8003728 <HAL_RCC_OscConfig+0x618>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ec      	bne.n	80035b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035dc:	4b52      	ldr	r3, [pc, #328]	@ (8003728 <HAL_RCC_OscConfig+0x618>)
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	4b52      	ldr	r3, [pc, #328]	@ (800372c <HAL_RCC_OscConfig+0x61c>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6a11      	ldr	r1, [r2, #32]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035ec:	3a01      	subs	r2, #1
 80035ee:	0112      	lsls	r2, r2, #4
 80035f0:	4311      	orrs	r1, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80035f6:	0212      	lsls	r2, r2, #8
 80035f8:	4311      	orrs	r1, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035fe:	0852      	lsrs	r2, r2, #1
 8003600:	3a01      	subs	r2, #1
 8003602:	0552      	lsls	r2, r2, #21
 8003604:	4311      	orrs	r1, r2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800360a:	0852      	lsrs	r2, r2, #1
 800360c:	3a01      	subs	r2, #1
 800360e:	0652      	lsls	r2, r2, #25
 8003610:	4311      	orrs	r1, r2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003616:	06d2      	lsls	r2, r2, #27
 8003618:	430a      	orrs	r2, r1
 800361a:	4943      	ldr	r1, [pc, #268]	@ (8003728 <HAL_RCC_OscConfig+0x618>)
 800361c:	4313      	orrs	r3, r2
 800361e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003620:	4b41      	ldr	r3, [pc, #260]	@ (8003728 <HAL_RCC_OscConfig+0x618>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a40      	ldr	r2, [pc, #256]	@ (8003728 <HAL_RCC_OscConfig+0x618>)
 8003626:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800362a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800362c:	4b3e      	ldr	r3, [pc, #248]	@ (8003728 <HAL_RCC_OscConfig+0x618>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a3d      	ldr	r2, [pc, #244]	@ (8003728 <HAL_RCC_OscConfig+0x618>)
 8003632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003636:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe ff5c 	bl	80024f4 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003640:	f7fe ff58 	bl	80024f4 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e066      	b.n	8003720 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003652:	4b35      	ldr	r3, [pc, #212]	@ (8003728 <HAL_RCC_OscConfig+0x618>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x530>
 800365e:	e05e      	b.n	800371e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003660:	4b31      	ldr	r3, [pc, #196]	@ (8003728 <HAL_RCC_OscConfig+0x618>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a30      	ldr	r2, [pc, #192]	@ (8003728 <HAL_RCC_OscConfig+0x618>)
 8003666:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800366a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fe ff42 	bl	80024f4 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003674:	f7fe ff3e 	bl	80024f4 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e04c      	b.n	8003720 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003686:	4b28      	ldr	r3, [pc, #160]	@ (8003728 <HAL_RCC_OscConfig+0x618>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003692:	4b25      	ldr	r3, [pc, #148]	@ (8003728 <HAL_RCC_OscConfig+0x618>)
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	4924      	ldr	r1, [pc, #144]	@ (8003728 <HAL_RCC_OscConfig+0x618>)
 8003698:	4b25      	ldr	r3, [pc, #148]	@ (8003730 <HAL_RCC_OscConfig+0x620>)
 800369a:	4013      	ands	r3, r2
 800369c:	60cb      	str	r3, [r1, #12]
 800369e:	e03e      	b.n	800371e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e039      	b.n	8003720 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80036ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003728 <HAL_RCC_OscConfig+0x618>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f003 0203 	and.w	r2, r3, #3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d12c      	bne.n	800371a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ca:	3b01      	subs	r3, #1
 80036cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d123      	bne.n	800371a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036de:	429a      	cmp	r2, r3
 80036e0:	d11b      	bne.n	800371a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d113      	bne.n	800371a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fc:	085b      	lsrs	r3, r3, #1
 80036fe:	3b01      	subs	r3, #1
 8003700:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003702:	429a      	cmp	r2, r3
 8003704:	d109      	bne.n	800371a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003710:	085b      	lsrs	r3, r3, #1
 8003712:	3b01      	subs	r3, #1
 8003714:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003716:	429a      	cmp	r2, r3
 8003718:	d001      	beq.n	800371e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3720      	adds	r7, #32
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40021000 	.word	0x40021000
 800372c:	019f800c 	.word	0x019f800c
 8003730:	feeefffc 	.word	0xfeeefffc

08003734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e11e      	b.n	800398a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800374c:	4b91      	ldr	r3, [pc, #580]	@ (8003994 <HAL_RCC_ClockConfig+0x260>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d910      	bls.n	800377c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b8e      	ldr	r3, [pc, #568]	@ (8003994 <HAL_RCC_ClockConfig+0x260>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 020f 	bic.w	r2, r3, #15
 8003762:	498c      	ldr	r1, [pc, #560]	@ (8003994 <HAL_RCC_ClockConfig+0x260>)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b8a      	ldr	r3, [pc, #552]	@ (8003994 <HAL_RCC_ClockConfig+0x260>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e106      	b.n	800398a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d073      	beq.n	8003870 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b03      	cmp	r3, #3
 800378e:	d129      	bne.n	80037e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003790:	4b81      	ldr	r3, [pc, #516]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0f4      	b.n	800398a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80037a0:	f000 f99c 	bl	8003adc <RCC_GetSysClockFreqFromPLLSource>
 80037a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4a7c      	ldr	r2, [pc, #496]	@ (800399c <HAL_RCC_ClockConfig+0x268>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d93f      	bls.n	800382e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037ae:	4b7a      	ldr	r3, [pc, #488]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d033      	beq.n	800382e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d12f      	bne.n	800382e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037ce:	4b72      	ldr	r3, [pc, #456]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037d6:	4a70      	ldr	r2, [pc, #448]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 80037d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037de:	2380      	movs	r3, #128	@ 0x80
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	e024      	b.n	800382e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d107      	bne.n	80037fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d109      	bne.n	800380c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0c6      	b.n	800398a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037fc:	4b66      	ldr	r3, [pc, #408]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0be      	b.n	800398a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800380c:	f000 f8ce 	bl	80039ac <HAL_RCC_GetSysClockFreq>
 8003810:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4a61      	ldr	r2, [pc, #388]	@ (800399c <HAL_RCC_ClockConfig+0x268>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d909      	bls.n	800382e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800381a:	4b5f      	ldr	r3, [pc, #380]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003822:	4a5d      	ldr	r2, [pc, #372]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 8003824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003828:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800382a:	2380      	movs	r3, #128	@ 0x80
 800382c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800382e:	4b5a      	ldr	r3, [pc, #360]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f023 0203 	bic.w	r2, r3, #3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	4957      	ldr	r1, [pc, #348]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 800383c:	4313      	orrs	r3, r2
 800383e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003840:	f7fe fe58 	bl	80024f4 <HAL_GetTick>
 8003844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	e00a      	b.n	800385e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003848:	f7fe fe54 	bl	80024f4 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003856:	4293      	cmp	r3, r2
 8003858:	d901      	bls.n	800385e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e095      	b.n	800398a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385e:	4b4e      	ldr	r3, [pc, #312]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 020c 	and.w	r2, r3, #12
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	429a      	cmp	r2, r3
 800386e:	d1eb      	bne.n	8003848 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d023      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003888:	4b43      	ldr	r3, [pc, #268]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4a42      	ldr	r2, [pc, #264]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 800388e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003892:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d007      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80038a0:	4b3d      	ldr	r3, [pc, #244]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80038a8:	4a3b      	ldr	r2, [pc, #236]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 80038aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b0:	4b39      	ldr	r3, [pc, #228]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	4936      	ldr	r1, [pc, #216]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	608b      	str	r3, [r1, #8]
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2b80      	cmp	r3, #128	@ 0x80
 80038c8:	d105      	bne.n	80038d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80038ca:	4b33      	ldr	r3, [pc, #204]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	4a32      	ldr	r2, [pc, #200]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 80038d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003994 <HAL_RCC_ClockConfig+0x260>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d21d      	bcs.n	8003920 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003994 <HAL_RCC_ClockConfig+0x260>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f023 020f 	bic.w	r2, r3, #15
 80038ec:	4929      	ldr	r1, [pc, #164]	@ (8003994 <HAL_RCC_ClockConfig+0x260>)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038f4:	f7fe fdfe 	bl	80024f4 <HAL_GetTick>
 80038f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fa:	e00a      	b.n	8003912 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038fc:	f7fe fdfa 	bl	80024f4 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800390a:	4293      	cmp	r3, r2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e03b      	b.n	800398a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b20      	ldr	r3, [pc, #128]	@ (8003994 <HAL_RCC_ClockConfig+0x260>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d1ed      	bne.n	80038fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800392c:	4b1a      	ldr	r3, [pc, #104]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	4917      	ldr	r1, [pc, #92]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 800393a:	4313      	orrs	r3, r2
 800393c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d009      	beq.n	800395e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800394a:	4b13      	ldr	r3, [pc, #76]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	490f      	ldr	r1, [pc, #60]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800395e:	f000 f825 	bl	80039ac <HAL_RCC_GetSysClockFreq>
 8003962:	4602      	mov	r2, r0
 8003964:	4b0c      	ldr	r3, [pc, #48]	@ (8003998 <HAL_RCC_ClockConfig+0x264>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	490c      	ldr	r1, [pc, #48]	@ (80039a0 <HAL_RCC_ClockConfig+0x26c>)
 8003970:	5ccb      	ldrb	r3, [r1, r3]
 8003972:	f003 031f 	and.w	r3, r3, #31
 8003976:	fa22 f303 	lsr.w	r3, r2, r3
 800397a:	4a0a      	ldr	r2, [pc, #40]	@ (80039a4 <HAL_RCC_ClockConfig+0x270>)
 800397c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800397e:	4b0a      	ldr	r3, [pc, #40]	@ (80039a8 <HAL_RCC_ClockConfig+0x274>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe fd6a 	bl	800245c <HAL_InitTick>
 8003988:	4603      	mov	r3, r0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40022000 	.word	0x40022000
 8003998:	40021000 	.word	0x40021000
 800399c:	04c4b400 	.word	0x04c4b400
 80039a0:	0800d474 	.word	0x0800d474
 80039a4:	20000000 	.word	0x20000000
 80039a8:	20000004 	.word	0x20000004

080039ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d102      	bne.n	80039c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039be:	4b2a      	ldr	r3, [pc, #168]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	e047      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80039c4:	4b27      	ldr	r3, [pc, #156]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 030c 	and.w	r3, r3, #12
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d102      	bne.n	80039d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039d0:	4b25      	ldr	r3, [pc, #148]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	e03e      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80039d6:	4b23      	ldr	r3, [pc, #140]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b0c      	cmp	r3, #12
 80039e0:	d136      	bne.n	8003a50 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039e2:	4b20      	ldr	r3, [pc, #128]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	3301      	adds	r3, #1
 80039f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d10c      	bne.n	8003a1a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a00:	4a19      	ldr	r2, [pc, #100]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a08:	4a16      	ldr	r2, [pc, #88]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a0a:	68d2      	ldr	r2, [r2, #12]
 8003a0c:	0a12      	lsrs	r2, r2, #8
 8003a0e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a12:	fb02 f303 	mul.w	r3, r2, r3
 8003a16:	617b      	str	r3, [r7, #20]
      break;
 8003a18:	e00c      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a1a:	4a13      	ldr	r2, [pc, #76]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a22:	4a10      	ldr	r2, [pc, #64]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a24:	68d2      	ldr	r2, [r2, #12]
 8003a26:	0a12      	lsrs	r2, r2, #8
 8003a28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a2c:	fb02 f303 	mul.w	r3, r2, r3
 8003a30:	617b      	str	r3, [r7, #20]
      break;
 8003a32:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a34:	4b0b      	ldr	r3, [pc, #44]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	0e5b      	lsrs	r3, r3, #25
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	e001      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a54:	693b      	ldr	r3, [r7, #16]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	371c      	adds	r7, #28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40021000 	.word	0x40021000
 8003a68:	00f42400 	.word	0x00f42400

08003a6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a70:	4b03      	ldr	r3, [pc, #12]	@ (8003a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a72:	681b      	ldr	r3, [r3, #0]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	20000000 	.word	0x20000000

08003a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a88:	f7ff fff0 	bl	8003a6c <HAL_RCC_GetHCLKFreq>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	4b06      	ldr	r3, [pc, #24]	@ (8003aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	0a1b      	lsrs	r3, r3, #8
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	4904      	ldr	r1, [pc, #16]	@ (8003aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a9a:	5ccb      	ldrb	r3, [r1, r3]
 8003a9c:	f003 031f 	and.w	r3, r3, #31
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	0800d484 	.word	0x0800d484

08003ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ab4:	f7ff ffda 	bl	8003a6c <HAL_RCC_GetHCLKFreq>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	0adb      	lsrs	r3, r3, #11
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	4904      	ldr	r1, [pc, #16]	@ (8003ad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ac6:	5ccb      	ldrb	r3, [r1, r3]
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	0800d484 	.word	0x0800d484

08003adc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aec:	4b1b      	ldr	r3, [pc, #108]	@ (8003b5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	3301      	adds	r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d10c      	bne.n	8003b1a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b00:	4a17      	ldr	r2, [pc, #92]	@ (8003b60 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b08:	4a14      	ldr	r2, [pc, #80]	@ (8003b5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b0a:	68d2      	ldr	r2, [r2, #12]
 8003b0c:	0a12      	lsrs	r2, r2, #8
 8003b0e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b12:	fb02 f303 	mul.w	r3, r2, r3
 8003b16:	617b      	str	r3, [r7, #20]
    break;
 8003b18:	e00c      	b.n	8003b34 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b1a:	4a11      	ldr	r2, [pc, #68]	@ (8003b60 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b22:	4a0e      	ldr	r2, [pc, #56]	@ (8003b5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b24:	68d2      	ldr	r2, [r2, #12]
 8003b26:	0a12      	lsrs	r2, r2, #8
 8003b28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b2c:	fb02 f303 	mul.w	r3, r2, r3
 8003b30:	617b      	str	r3, [r7, #20]
    break;
 8003b32:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b34:	4b09      	ldr	r3, [pc, #36]	@ (8003b5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	0e5b      	lsrs	r3, r3, #25
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b4e:	687b      	ldr	r3, [r7, #4]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	00f42400 	.word	0x00f42400

08003b64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b70:	2300      	movs	r3, #0
 8003b72:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 8098 	beq.w	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b82:	2300      	movs	r3, #0
 8003b84:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b86:	4b43      	ldr	r3, [pc, #268]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10d      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b92:	4b40      	ldr	r3, [pc, #256]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b96:	4a3f      	ldr	r2, [pc, #252]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba6:	60bb      	str	r3, [r7, #8]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003baa:	2301      	movs	r3, #1
 8003bac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bae:	4b3a      	ldr	r3, [pc, #232]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a39      	ldr	r2, [pc, #228]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bba:	f7fe fc9b 	bl	80024f4 <HAL_GetTick>
 8003bbe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bc0:	e009      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc2:	f7fe fc97 	bl	80024f4 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d902      	bls.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	74fb      	strb	r3, [r7, #19]
        break;
 8003bd4:	e005      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bd6:	4b30      	ldr	r3, [pc, #192]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0ef      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003be2:	7cfb      	ldrb	r3, [r7, #19]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d159      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003be8:	4b2a      	ldr	r3, [pc, #168]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bf2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d01e      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d019      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c04:	4b23      	ldr	r3, [pc, #140]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c10:	4b20      	ldr	r3, [pc, #128]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c16:	4a1f      	ldr	r2, [pc, #124]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c20:	4b1c      	ldr	r3, [pc, #112]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c26:	4a1b      	ldr	r2, [pc, #108]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c30:	4a18      	ldr	r2, [pc, #96]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d016      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c42:	f7fe fc57 	bl	80024f4 <HAL_GetTick>
 8003c46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c48:	e00b      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4a:	f7fe fc53 	bl	80024f4 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d902      	bls.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	74fb      	strb	r3, [r7, #19]
            break;
 8003c60:	e006      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c62:	4b0c      	ldr	r3, [pc, #48]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0ec      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c70:	7cfb      	ldrb	r3, [r7, #19]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10b      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c76:	4b07      	ldr	r3, [pc, #28]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	4903      	ldr	r1, [pc, #12]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c8e:	7cfb      	ldrb	r3, [r7, #19]
 8003c90:	74bb      	strb	r3, [r7, #18]
 8003c92:	e005      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c94:	40021000 	.word	0x40021000
 8003c98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9c:	7cfb      	ldrb	r3, [r7, #19]
 8003c9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ca0:	7c7b      	ldrb	r3, [r7, #17]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d105      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca6:	4ba6      	ldr	r3, [pc, #664]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003caa:	4aa5      	ldr	r2, [pc, #660]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cb0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cbe:	4ba0      	ldr	r3, [pc, #640]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc4:	f023 0203 	bic.w	r2, r3, #3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	499c      	ldr	r1, [pc, #624]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ce0:	4b97      	ldr	r3, [pc, #604]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce6:	f023 020c 	bic.w	r2, r3, #12
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	4994      	ldr	r1, [pc, #592]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d02:	4b8f      	ldr	r3, [pc, #572]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	498b      	ldr	r1, [pc, #556]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d24:	4b86      	ldr	r3, [pc, #536]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	4983      	ldr	r1, [pc, #524]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d46:	4b7e      	ldr	r3, [pc, #504]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	497a      	ldr	r1, [pc, #488]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d68:	4b75      	ldr	r3, [pc, #468]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	4972      	ldr	r1, [pc, #456]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d90:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	4969      	ldr	r1, [pc, #420]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dac:	4b64      	ldr	r3, [pc, #400]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	4961      	ldr	r1, [pc, #388]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dce:	4b5c      	ldr	r3, [pc, #368]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ddc:	4958      	ldr	r1, [pc, #352]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d015      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003df0:	4b53      	ldr	r3, [pc, #332]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfe:	4950      	ldr	r1, [pc, #320]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e10:	4b4b      	ldr	r3, [pc, #300]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	4a4a      	ldr	r2, [pc, #296]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e1a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d015      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e28:	4b45      	ldr	r3, [pc, #276]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e36:	4942      	ldr	r1, [pc, #264]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e46:	d105      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e48:	4b3d      	ldr	r3, [pc, #244]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e52:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d015      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e60:	4b37      	ldr	r3, [pc, #220]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e66:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6e:	4934      	ldr	r1, [pc, #208]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e7e:	d105      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e80:	4b2f      	ldr	r3, [pc, #188]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4a2e      	ldr	r2, [pc, #184]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d015      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e98:	4b29      	ldr	r3, [pc, #164]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea6:	4926      	ldr	r1, [pc, #152]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eb6:	d105      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eb8:	4b21      	ldr	r3, [pc, #132]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4a20      	ldr	r2, [pc, #128]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ebe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ec2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d015      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ede:	4918      	ldr	r1, [pc, #96]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eee:	d105      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef0:	4b13      	ldr	r3, [pc, #76]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a12      	ldr	r2, [pc, #72]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003efa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d015      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f08:	4b0d      	ldr	r3, [pc, #52]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f16:	490a      	ldr	r1, [pc, #40]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f26:	d105      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f28:	4b05      	ldr	r3, [pc, #20]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4a04      	ldr	r2, [pc, #16]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f34:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40021000 	.word	0x40021000

08003f44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e09d      	b.n	8004092 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d108      	bne.n	8003f70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f66:	d009      	beq.n	8003f7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	61da      	str	r2, [r3, #28]
 8003f6e:	e005      	b.n	8003f7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fd fc2a 	bl	80017f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fbc:	d902      	bls.n	8003fc4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	e002      	b.n	8003fca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fc8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003fd2:	d007      	beq.n	8003fe4 <HAL_SPI_Init+0xa0>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fdc:	d002      	beq.n	8003fe4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004026:	ea42 0103 	orr.w	r1, r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	0c1b      	lsrs	r3, r3, #16
 8004040:	f003 0204 	and.w	r2, r3, #4
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	f003 0310 	and.w	r3, r3, #16
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004060:	ea42 0103 	orr.w	r1, r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004080:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b088      	sub	sp, #32
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	603b      	str	r3, [r7, #0]
 80040a6:	4613      	mov	r3, r2
 80040a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_SPI_Transmit+0x22>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e15f      	b.n	800437c <HAL_SPI_Transmit+0x2e2>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040c4:	f7fe fa16 	bl	80024f4 <HAL_GetTick>
 80040c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80040ca:	88fb      	ldrh	r3, [r7, #6]
 80040cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d002      	beq.n	80040e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80040da:	2302      	movs	r3, #2
 80040dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040de:	e148      	b.n	8004372 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_SPI_Transmit+0x52>
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d102      	bne.n	80040f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040f0:	e13f      	b.n	8004372 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2203      	movs	r2, #3
 80040f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	88fa      	ldrh	r2, [r7, #6]
 800410a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	88fa      	ldrh	r2, [r7, #6]
 8004110:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800413c:	d10f      	bne.n	800415e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800414c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800415c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004168:	2b40      	cmp	r3, #64	@ 0x40
 800416a:	d007      	beq.n	800417c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800417a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004184:	d94f      	bls.n	8004226 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <HAL_SPI_Transmit+0xfa>
 800418e:	8afb      	ldrh	r3, [r7, #22]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d142      	bne.n	800421a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004198:	881a      	ldrh	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a4:	1c9a      	adds	r2, r3, #2
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041b8:	e02f      	b.n	800421a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d112      	bne.n	80041ee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041cc:	881a      	ldrh	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d8:	1c9a      	adds	r2, r3, #2
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041ec:	e015      	b.n	800421a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041ee:	f7fe f981 	bl	80024f4 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d803      	bhi.n	8004206 <HAL_SPI_Transmit+0x16c>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004204:	d102      	bne.n	800420c <HAL_SPI_Transmit+0x172>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d106      	bne.n	800421a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004218:	e0ab      	b.n	8004372 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1ca      	bne.n	80041ba <HAL_SPI_Transmit+0x120>
 8004224:	e080      	b.n	8004328 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <HAL_SPI_Transmit+0x19a>
 800422e:	8afb      	ldrh	r3, [r7, #22]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d174      	bne.n	800431e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b01      	cmp	r3, #1
 800423c:	d912      	bls.n	8004264 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004242:	881a      	ldrh	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424e:	1c9a      	adds	r2, r3, #2
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004258:	b29b      	uxth	r3, r3
 800425a:	3b02      	subs	r3, #2
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004262:	e05c      	b.n	800431e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	7812      	ldrb	r2, [r2, #0]
 8004270:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800428a:	e048      	b.n	800431e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b02      	cmp	r3, #2
 8004298:	d12b      	bne.n	80042f2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d912      	bls.n	80042ca <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a8:	881a      	ldrh	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b4:	1c9a      	adds	r2, r3, #2
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b02      	subs	r3, #2
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042c8:	e029      	b.n	800431e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	330c      	adds	r3, #12
 80042d4:	7812      	ldrb	r2, [r2, #0]
 80042d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042f0:	e015      	b.n	800431e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042f2:	f7fe f8ff 	bl	80024f4 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d803      	bhi.n	800430a <HAL_SPI_Transmit+0x270>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d102      	bne.n	8004310 <HAL_SPI_Transmit+0x276>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d106      	bne.n	800431e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800431c:	e029      	b.n	8004372 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1b1      	bne.n	800428c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	6839      	ldr	r1, [r7, #0]
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 fcf9 	bl	8004d24 <SPI_EndRxTxTransaction>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10a      	bne.n	800435c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004346:	2300      	movs	r3, #0
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	77fb      	strb	r3, [r7, #31]
 8004368:	e003      	b.n	8004372 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800437a:	7ffb      	ldrb	r3, [r7, #31]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3720      	adds	r7, #32
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af02      	add	r7, sp, #8
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	603b      	str	r3, [r7, #0]
 8004390:	4613      	mov	r3, r2
 8004392:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d002      	beq.n	80043aa <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
 80043a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043a8:	e11a      	b.n	80045e0 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043b2:	d112      	bne.n	80043da <HAL_SPI_Receive+0x56>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10e      	bne.n	80043da <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2204      	movs	r2, #4
 80043c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80043c4:	88fa      	ldrh	r2, [r7, #6]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	4613      	mov	r3, r2
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f90e 	bl	80045f2 <HAL_SPI_TransmitReceive>
 80043d6:	4603      	mov	r3, r0
 80043d8:	e107      	b.n	80045ea <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_SPI_Receive+0x64>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e100      	b.n	80045ea <HAL_SPI_Receive+0x266>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043f0:	f7fe f880 	bl	80024f4 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <HAL_SPI_Receive+0x7e>
 80043fc:	88fb      	ldrh	r3, [r7, #6]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d102      	bne.n	8004408 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004406:	e0eb      	b.n	80045e0 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2204      	movs	r2, #4
 800440c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	88fa      	ldrh	r2, [r7, #6]
 8004420:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	88fa      	ldrh	r2, [r7, #6]
 8004428:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004452:	d908      	bls.n	8004466 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004462:	605a      	str	r2, [r3, #4]
 8004464:	e007      	b.n	8004476 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004474:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800447e:	d10f      	bne.n	80044a0 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800448e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800449e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044aa:	2b40      	cmp	r3, #64	@ 0x40
 80044ac:	d007      	beq.n	80044be <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044bc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044c6:	d86f      	bhi.n	80045a8 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80044c8:	e034      	b.n	8004534 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d117      	bne.n	8004508 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f103 020c 	add.w	r2, r3, #12
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e4:	7812      	ldrb	r2, [r2, #0]
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004506:	e015      	b.n	8004534 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004508:	f7fd fff4 	bl	80024f4 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d803      	bhi.n	8004520 <HAL_SPI_Receive+0x19c>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451e:	d102      	bne.n	8004526 <HAL_SPI_Receive+0x1a2>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004532:	e055      	b.n	80045e0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1c4      	bne.n	80044ca <HAL_SPI_Receive+0x146>
 8004540:	e038      	b.n	80045b4 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b01      	cmp	r3, #1
 800454e:	d115      	bne.n	800457c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455a:	b292      	uxth	r2, r2
 800455c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004562:	1c9a      	adds	r2, r3, #2
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800457a:	e015      	b.n	80045a8 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800457c:	f7fd ffba 	bl	80024f4 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	d803      	bhi.n	8004594 <HAL_SPI_Receive+0x210>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004592:	d102      	bne.n	800459a <HAL_SPI_Receive+0x216>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80045a6:	e01b      	b.n	80045e0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1c6      	bne.n	8004542 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	6839      	ldr	r1, [r7, #0]
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fb5b 	bl	8004c74 <SPI_EndRxTransaction>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2220      	movs	r2, #32
 80045c8:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	75fb      	strb	r3, [r7, #23]
 80045d6:	e003      	b.n	80045e0 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80045e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b08a      	sub	sp, #40	@ 0x28
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004600:	2301      	movs	r3, #1
 8004602:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_SPI_TransmitReceive+0x26>
 8004614:	2302      	movs	r3, #2
 8004616:	e20a      	b.n	8004a2e <HAL_SPI_TransmitReceive+0x43c>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004620:	f7fd ff68 	bl	80024f4 <HAL_GetTick>
 8004624:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800462c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004634:	887b      	ldrh	r3, [r7, #2]
 8004636:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004638:	887b      	ldrh	r3, [r7, #2]
 800463a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800463c:	7efb      	ldrb	r3, [r7, #27]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d00e      	beq.n	8004660 <HAL_SPI_TransmitReceive+0x6e>
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004648:	d106      	bne.n	8004658 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d102      	bne.n	8004658 <HAL_SPI_TransmitReceive+0x66>
 8004652:	7efb      	ldrb	r3, [r7, #27]
 8004654:	2b04      	cmp	r3, #4
 8004656:	d003      	beq.n	8004660 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004658:	2302      	movs	r3, #2
 800465a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800465e:	e1e0      	b.n	8004a22 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <HAL_SPI_TransmitReceive+0x80>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <HAL_SPI_TransmitReceive+0x80>
 800466c:	887b      	ldrh	r3, [r7, #2]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d103      	bne.n	800467a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004678:	e1d3      	b.n	8004a22 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b04      	cmp	r3, #4
 8004684:	d003      	beq.n	800468e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2205      	movs	r2, #5
 800468a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	887a      	ldrh	r2, [r7, #2]
 800469e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	887a      	ldrh	r2, [r7, #2]
 80046a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	887a      	ldrh	r2, [r7, #2]
 80046b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	887a      	ldrh	r2, [r7, #2]
 80046ba:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046d0:	d802      	bhi.n	80046d8 <HAL_SPI_TransmitReceive+0xe6>
 80046d2:	8a3b      	ldrh	r3, [r7, #16]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d908      	bls.n	80046ea <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80046e6:	605a      	str	r2, [r3, #4]
 80046e8:	e007      	b.n	80046fa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80046f8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004704:	2b40      	cmp	r3, #64	@ 0x40
 8004706:	d007      	beq.n	8004718 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004716:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004720:	f240 8081 	bls.w	8004826 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <HAL_SPI_TransmitReceive+0x140>
 800472c:	8a7b      	ldrh	r3, [r7, #18]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d16d      	bne.n	800480e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004736:	881a      	ldrh	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004742:	1c9a      	adds	r2, r3, #2
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800474c:	b29b      	uxth	r3, r3
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004756:	e05a      	b.n	800480e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b02      	cmp	r3, #2
 8004764:	d11b      	bne.n	800479e <HAL_SPI_TransmitReceive+0x1ac>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d016      	beq.n	800479e <HAL_SPI_TransmitReceive+0x1ac>
 8004770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004772:	2b01      	cmp	r3, #1
 8004774:	d113      	bne.n	800479e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477a:	881a      	ldrh	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004786:	1c9a      	adds	r2, r3, #2
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d11c      	bne.n	80047e6 <HAL_SPI_TransmitReceive+0x1f4>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d016      	beq.n	80047e6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c2:	b292      	uxth	r2, r2
 80047c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ca:	1c9a      	adds	r2, r3, #2
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047e2:	2301      	movs	r3, #1
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047e6:	f7fd fe85 	bl	80024f4 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d80b      	bhi.n	800480e <HAL_SPI_TransmitReceive+0x21c>
 80047f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fc:	d007      	beq.n	800480e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800480c:	e109      	b.n	8004a22 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004812:	b29b      	uxth	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d19f      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x166>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d199      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x166>
 8004824:	e0e3      	b.n	80049ee <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_SPI_TransmitReceive+0x244>
 800482e:	8a7b      	ldrh	r3, [r7, #18]
 8004830:	2b01      	cmp	r3, #1
 8004832:	f040 80cf 	bne.w	80049d4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	d912      	bls.n	8004866 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004844:	881a      	ldrh	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004850:	1c9a      	adds	r2, r3, #2
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b02      	subs	r3, #2
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004864:	e0b6      	b.n	80049d4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	330c      	adds	r3, #12
 8004870:	7812      	ldrb	r2, [r2, #0]
 8004872:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800488c:	e0a2      	b.n	80049d4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b02      	cmp	r3, #2
 800489a:	d134      	bne.n	8004906 <HAL_SPI_TransmitReceive+0x314>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d02f      	beq.n	8004906 <HAL_SPI_TransmitReceive+0x314>
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d12c      	bne.n	8004906 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d912      	bls.n	80048dc <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ba:	881a      	ldrh	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c6:	1c9a      	adds	r2, r3, #2
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b02      	subs	r3, #2
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048da:	e012      	b.n	8004902 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	330c      	adds	r3, #12
 80048e6:	7812      	ldrb	r2, [r2, #0]
 80048e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b01      	cmp	r3, #1
 8004912:	d148      	bne.n	80049a6 <HAL_SPI_TransmitReceive+0x3b4>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d042      	beq.n	80049a6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	d923      	bls.n	8004974 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004936:	b292      	uxth	r2, r2
 8004938:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	1c9a      	adds	r2, r3, #2
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b02      	subs	r3, #2
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b01      	cmp	r3, #1
 8004960:	d81f      	bhi.n	80049a2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004970:	605a      	str	r2, [r3, #4]
 8004972:	e016      	b.n	80049a2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f103 020c 	add.w	r2, r3, #12
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004980:	7812      	ldrb	r2, [r2, #0]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049a2:	2301      	movs	r3, #1
 80049a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049a6:	f7fd fda5 	bl	80024f4 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d803      	bhi.n	80049be <HAL_SPI_TransmitReceive+0x3cc>
 80049b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049bc:	d102      	bne.n	80049c4 <HAL_SPI_TransmitReceive+0x3d2>
 80049be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d107      	bne.n	80049d4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80049d2:	e026      	b.n	8004a22 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f47f af57 	bne.w	800488e <HAL_SPI_TransmitReceive+0x29c>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f47f af50 	bne.w	800488e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f996 	bl	8004d24 <SPI_EndRxTxTransaction>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d005      	beq.n	8004a0a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a18:	e003      	b.n	8004a22 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3728      	adds	r7, #40	@ 0x28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	603b      	str	r3, [r7, #0]
 8004a44:	4613      	mov	r3, r2
 8004a46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a48:	f7fd fd54 	bl	80024f4 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a50:	1a9b      	subs	r3, r3, r2
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	4413      	add	r3, r2
 8004a56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a58:	f7fd fd4c 	bl	80024f4 <HAL_GetTick>
 8004a5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a5e:	4b39      	ldr	r3, [pc, #228]	@ (8004b44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	015b      	lsls	r3, r3, #5
 8004a64:	0d1b      	lsrs	r3, r3, #20
 8004a66:	69fa      	ldr	r2, [r7, #28]
 8004a68:	fb02 f303 	mul.w	r3, r2, r3
 8004a6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a6e:	e054      	b.n	8004b1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a76:	d050      	beq.n	8004b1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a78:	f7fd fd3c 	bl	80024f4 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d902      	bls.n	8004a8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d13d      	bne.n	8004b0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004aa6:	d111      	bne.n	8004acc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ab0:	d004      	beq.n	8004abc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aba:	d107      	bne.n	8004acc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ad4:	d10f      	bne.n	8004af6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004af4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e017      	b.n	8004b3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4013      	ands	r3, r2
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	bf0c      	ite	eq
 8004b2a:	2301      	moveq	r3, #1
 8004b2c:	2300      	movne	r3, #0
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	461a      	mov	r2, r3
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d19b      	bne.n	8004a70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3720      	adds	r7, #32
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	20000000 	.word	0x20000000

08004b48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08a      	sub	sp, #40	@ 0x28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b56:	2300      	movs	r3, #0
 8004b58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b5a:	f7fd fccb 	bl	80024f4 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b62:	1a9b      	subs	r3, r3, r2
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	4413      	add	r3, r2
 8004b68:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004b6a:	f7fd fcc3 	bl	80024f4 <HAL_GetTick>
 8004b6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	330c      	adds	r3, #12
 8004b76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b78:	4b3d      	ldr	r3, [pc, #244]	@ (8004c70 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	00da      	lsls	r2, r3, #3
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	0d1b      	lsrs	r3, r3, #20
 8004b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b8a:	fb02 f303 	mul.w	r3, r2, r3
 8004b8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b90:	e060      	b.n	8004c54 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b98:	d107      	bne.n	8004baa <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d104      	bne.n	8004baa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ba8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb0:	d050      	beq.n	8004c54 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bb2:	f7fd fc9f 	bl	80024f4 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d902      	bls.n	8004bc8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d13d      	bne.n	8004c44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004bd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004be0:	d111      	bne.n	8004c06 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bea:	d004      	beq.n	8004bf6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bf4:	d107      	bne.n	8004c06 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c0e:	d10f      	bne.n	8004c30 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e010      	b.n	8004c66 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d196      	bne.n	8004b92 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3728      	adds	r7, #40	@ 0x28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000000 	.word	0x20000000

08004c74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c88:	d111      	bne.n	8004cae <SPI_EndRxTransaction+0x3a>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c92:	d004      	beq.n	8004c9e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c9c:	d107      	bne.n	8004cae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cac:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2180      	movs	r1, #128	@ 0x80
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f7ff febd 	bl	8004a38 <SPI_WaitFlagStateUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d007      	beq.n	8004cd4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cc8:	f043 0220 	orr.w	r2, r3, #32
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e023      	b.n	8004d1c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cdc:	d11d      	bne.n	8004d1a <SPI_EndRxTransaction+0xa6>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ce6:	d004      	beq.n	8004cf2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cf0:	d113      	bne.n	8004d1a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f7ff ff22 	bl	8004b48 <SPI_WaitFifoStateUntilTimeout>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d007      	beq.n	8004d1a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d0e:	f043 0220 	orr.w	r2, r3, #32
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e000      	b.n	8004d1c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f7ff ff03 	bl	8004b48 <SPI_WaitFifoStateUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d4c:	f043 0220 	orr.w	r2, r3, #32
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e027      	b.n	8004da8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	2180      	movs	r1, #128	@ 0x80
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f7ff fe68 	bl	8004a38 <SPI_WaitFlagStateUntilTimeout>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d72:	f043 0220 	orr.w	r2, r3, #32
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e014      	b.n	8004da8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f7ff fedc 	bl	8004b48 <SPI_WaitFifoStateUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d9a:	f043 0220 	orr.w	r2, r3, #32
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e000      	b.n	8004da8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e049      	b.n	8004e56 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fd f872 	bl	8001ec0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3304      	adds	r3, #4
 8004dec:	4619      	mov	r1, r3
 8004dee:	4610      	mov	r0, r2
 8004df0:	f000 faf0 	bl	80053d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d109      	bne.n	8004e84 <HAL_TIM_PWM_Start+0x24>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	bf14      	ite	ne
 8004e7c:	2301      	movne	r3, #1
 8004e7e:	2300      	moveq	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	e03c      	b.n	8004efe <HAL_TIM_PWM_Start+0x9e>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d109      	bne.n	8004e9e <HAL_TIM_PWM_Start+0x3e>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	bf14      	ite	ne
 8004e96:	2301      	movne	r3, #1
 8004e98:	2300      	moveq	r3, #0
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	e02f      	b.n	8004efe <HAL_TIM_PWM_Start+0x9e>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d109      	bne.n	8004eb8 <HAL_TIM_PWM_Start+0x58>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	bf14      	ite	ne
 8004eb0:	2301      	movne	r3, #1
 8004eb2:	2300      	moveq	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	e022      	b.n	8004efe <HAL_TIM_PWM_Start+0x9e>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2b0c      	cmp	r3, #12
 8004ebc:	d109      	bne.n	8004ed2 <HAL_TIM_PWM_Start+0x72>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	bf14      	ite	ne
 8004eca:	2301      	movne	r3, #1
 8004ecc:	2300      	moveq	r3, #0
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	e015      	b.n	8004efe <HAL_TIM_PWM_Start+0x9e>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b10      	cmp	r3, #16
 8004ed6:	d109      	bne.n	8004eec <HAL_TIM_PWM_Start+0x8c>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	bf14      	ite	ne
 8004ee4:	2301      	movne	r3, #1
 8004ee6:	2300      	moveq	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	e008      	b.n	8004efe <HAL_TIM_PWM_Start+0x9e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	bf14      	ite	ne
 8004ef8:	2301      	movne	r3, #1
 8004efa:	2300      	moveq	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e097      	b.n	8005036 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d104      	bne.n	8004f16 <HAL_TIM_PWM_Start+0xb6>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f14:	e023      	b.n	8004f5e <HAL_TIM_PWM_Start+0xfe>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d104      	bne.n	8004f26 <HAL_TIM_PWM_Start+0xc6>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f24:	e01b      	b.n	8004f5e <HAL_TIM_PWM_Start+0xfe>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d104      	bne.n	8004f36 <HAL_TIM_PWM_Start+0xd6>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f34:	e013      	b.n	8004f5e <HAL_TIM_PWM_Start+0xfe>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b0c      	cmp	r3, #12
 8004f3a:	d104      	bne.n	8004f46 <HAL_TIM_PWM_Start+0xe6>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f44:	e00b      	b.n	8004f5e <HAL_TIM_PWM_Start+0xfe>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d104      	bne.n	8004f56 <HAL_TIM_PWM_Start+0xf6>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f54:	e003      	b.n	8004f5e <HAL_TIM_PWM_Start+0xfe>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2202      	movs	r2, #2
 8004f5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2201      	movs	r2, #1
 8004f64:	6839      	ldr	r1, [r7, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fdc6 	bl	8005af8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a33      	ldr	r2, [pc, #204]	@ (8005040 <HAL_TIM_PWM_Start+0x1e0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d013      	beq.n	8004f9e <HAL_TIM_PWM_Start+0x13e>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a32      	ldr	r2, [pc, #200]	@ (8005044 <HAL_TIM_PWM_Start+0x1e4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00e      	beq.n	8004f9e <HAL_TIM_PWM_Start+0x13e>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a30      	ldr	r2, [pc, #192]	@ (8005048 <HAL_TIM_PWM_Start+0x1e8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d009      	beq.n	8004f9e <HAL_TIM_PWM_Start+0x13e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a2f      	ldr	r2, [pc, #188]	@ (800504c <HAL_TIM_PWM_Start+0x1ec>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d004      	beq.n	8004f9e <HAL_TIM_PWM_Start+0x13e>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a2d      	ldr	r2, [pc, #180]	@ (8005050 <HAL_TIM_PWM_Start+0x1f0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d101      	bne.n	8004fa2 <HAL_TIM_PWM_Start+0x142>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <HAL_TIM_PWM_Start+0x144>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d007      	beq.n	8004fb8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fb6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a20      	ldr	r2, [pc, #128]	@ (8005040 <HAL_TIM_PWM_Start+0x1e0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d018      	beq.n	8004ff4 <HAL_TIM_PWM_Start+0x194>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fca:	d013      	beq.n	8004ff4 <HAL_TIM_PWM_Start+0x194>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a20      	ldr	r2, [pc, #128]	@ (8005054 <HAL_TIM_PWM_Start+0x1f4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00e      	beq.n	8004ff4 <HAL_TIM_PWM_Start+0x194>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1f      	ldr	r2, [pc, #124]	@ (8005058 <HAL_TIM_PWM_Start+0x1f8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d009      	beq.n	8004ff4 <HAL_TIM_PWM_Start+0x194>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a17      	ldr	r2, [pc, #92]	@ (8005044 <HAL_TIM_PWM_Start+0x1e4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d004      	beq.n	8004ff4 <HAL_TIM_PWM_Start+0x194>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a16      	ldr	r2, [pc, #88]	@ (8005048 <HAL_TIM_PWM_Start+0x1e8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d115      	bne.n	8005020 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	4b18      	ldr	r3, [pc, #96]	@ (800505c <HAL_TIM_PWM_Start+0x1fc>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b06      	cmp	r3, #6
 8005004:	d015      	beq.n	8005032 <HAL_TIM_PWM_Start+0x1d2>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800500c:	d011      	beq.n	8005032 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0201 	orr.w	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501e:	e008      	b.n	8005032 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0201 	orr.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	e000      	b.n	8005034 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005032:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40012c00 	.word	0x40012c00
 8005044:	40013400 	.word	0x40013400
 8005048:	40014000 	.word	0x40014000
 800504c:	40014400 	.word	0x40014400
 8005050:	40014800 	.word	0x40014800
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800
 800505c:	00010007 	.word	0x00010007

08005060 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e097      	b.n	80051a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d106      	bne.n	800508e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7fc ff83 	bl	8001f94 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2202      	movs	r2, #2
 8005092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80050a4:	f023 0307 	bic.w	r3, r3, #7
 80050a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3304      	adds	r3, #4
 80050b2:	4619      	mov	r1, r3
 80050b4:	4610      	mov	r0, r2
 80050b6:	f000 f98d 	bl	80053d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050e2:	f023 0303 	bic.w	r3, r3, #3
 80050e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	4313      	orrs	r3, r2
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005100:	f023 030c 	bic.w	r3, r3, #12
 8005104:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800510c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005110:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	4313      	orrs	r3, r2
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	011a      	lsls	r2, r3, #4
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	031b      	lsls	r3, r3, #12
 8005130:	4313      	orrs	r3, r2
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800513e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005146:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	4313      	orrs	r3, r2
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e0ff      	b.n	80053ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b14      	cmp	r3, #20
 80051d6:	f200 80f0 	bhi.w	80053ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051da:	a201      	add	r2, pc, #4	@ (adr r2, 80051e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	08005235 	.word	0x08005235
 80051e4:	080053bb 	.word	0x080053bb
 80051e8:	080053bb 	.word	0x080053bb
 80051ec:	080053bb 	.word	0x080053bb
 80051f0:	08005275 	.word	0x08005275
 80051f4:	080053bb 	.word	0x080053bb
 80051f8:	080053bb 	.word	0x080053bb
 80051fc:	080053bb 	.word	0x080053bb
 8005200:	080052b7 	.word	0x080052b7
 8005204:	080053bb 	.word	0x080053bb
 8005208:	080053bb 	.word	0x080053bb
 800520c:	080053bb 	.word	0x080053bb
 8005210:	080052f7 	.word	0x080052f7
 8005214:	080053bb 	.word	0x080053bb
 8005218:	080053bb 	.word	0x080053bb
 800521c:	080053bb 	.word	0x080053bb
 8005220:	08005339 	.word	0x08005339
 8005224:	080053bb 	.word	0x080053bb
 8005228:	080053bb 	.word	0x080053bb
 800522c:	080053bb 	.word	0x080053bb
 8005230:	08005379 	.word	0x08005379
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	4618      	mov	r0, r3
 800523c:	f000 f966 	bl	800550c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0208 	orr.w	r2, r2, #8
 800524e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699a      	ldr	r2, [r3, #24]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0204 	bic.w	r2, r2, #4
 800525e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6999      	ldr	r1, [r3, #24]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	619a      	str	r2, [r3, #24]
      break;
 8005272:	e0a5      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 f9d6 	bl	800562c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800528e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800529e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6999      	ldr	r1, [r3, #24]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	021a      	lsls	r2, r3, #8
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	619a      	str	r2, [r3, #24]
      break;
 80052b4:	e084      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68b9      	ldr	r1, [r7, #8]
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 fa3f 	bl	8005740 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0208 	orr.w	r2, r2, #8
 80052d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0204 	bic.w	r2, r2, #4
 80052e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69d9      	ldr	r1, [r3, #28]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	61da      	str	r2, [r3, #28]
      break;
 80052f4:	e064      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68b9      	ldr	r1, [r7, #8]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 faa7 	bl	8005850 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69da      	ldr	r2, [r3, #28]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69da      	ldr	r2, [r3, #28]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69d9      	ldr	r1, [r3, #28]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	021a      	lsls	r2, r3, #8
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	61da      	str	r2, [r3, #28]
      break;
 8005336:	e043      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68b9      	ldr	r1, [r7, #8]
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fb10 	bl	8005964 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0208 	orr.w	r2, r2, #8
 8005352:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0204 	bic.w	r2, r2, #4
 8005362:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005376:	e023      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fb54 	bl	8005a2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005392:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053a2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	021a      	lsls	r2, r3, #8
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80053b8:	e002      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	75fb      	strb	r3, [r7, #23]
      break;
 80053be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop

080053d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a42      	ldr	r2, [pc, #264]	@ (80054f0 <TIM_Base_SetConfig+0x11c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00f      	beq.n	800540c <TIM_Base_SetConfig+0x38>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053f2:	d00b      	beq.n	800540c <TIM_Base_SetConfig+0x38>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a3f      	ldr	r2, [pc, #252]	@ (80054f4 <TIM_Base_SetConfig+0x120>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d007      	beq.n	800540c <TIM_Base_SetConfig+0x38>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a3e      	ldr	r2, [pc, #248]	@ (80054f8 <TIM_Base_SetConfig+0x124>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d003      	beq.n	800540c <TIM_Base_SetConfig+0x38>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a3d      	ldr	r2, [pc, #244]	@ (80054fc <TIM_Base_SetConfig+0x128>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d108      	bne.n	800541e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a33      	ldr	r2, [pc, #204]	@ (80054f0 <TIM_Base_SetConfig+0x11c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d01b      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800542c:	d017      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a30      	ldr	r2, [pc, #192]	@ (80054f4 <TIM_Base_SetConfig+0x120>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d013      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a2f      	ldr	r2, [pc, #188]	@ (80054f8 <TIM_Base_SetConfig+0x124>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00f      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a2e      	ldr	r2, [pc, #184]	@ (80054fc <TIM_Base_SetConfig+0x128>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00b      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a2d      	ldr	r2, [pc, #180]	@ (8005500 <TIM_Base_SetConfig+0x12c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d007      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a2c      	ldr	r2, [pc, #176]	@ (8005504 <TIM_Base_SetConfig+0x130>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d003      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a2b      	ldr	r2, [pc, #172]	@ (8005508 <TIM_Base_SetConfig+0x134>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d108      	bne.n	8005470 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a16      	ldr	r2, [pc, #88]	@ (80054f0 <TIM_Base_SetConfig+0x11c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00f      	beq.n	80054bc <TIM_Base_SetConfig+0xe8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a17      	ldr	r2, [pc, #92]	@ (80054fc <TIM_Base_SetConfig+0x128>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00b      	beq.n	80054bc <TIM_Base_SetConfig+0xe8>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a16      	ldr	r2, [pc, #88]	@ (8005500 <TIM_Base_SetConfig+0x12c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d007      	beq.n	80054bc <TIM_Base_SetConfig+0xe8>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a15      	ldr	r2, [pc, #84]	@ (8005504 <TIM_Base_SetConfig+0x130>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d003      	beq.n	80054bc <TIM_Base_SetConfig+0xe8>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a14      	ldr	r2, [pc, #80]	@ (8005508 <TIM_Base_SetConfig+0x134>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d103      	bne.n	80054c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	691a      	ldr	r2, [r3, #16]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d105      	bne.n	80054e2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f023 0201 	bic.w	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	611a      	str	r2, [r3, #16]
  }
}
 80054e2:	bf00      	nop
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40000800 	.word	0x40000800
 80054fc:	40013400 	.word	0x40013400
 8005500:	40014000 	.word	0x40014000
 8005504:	40014400 	.word	0x40014400
 8005508:	40014800 	.word	0x40014800

0800550c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	f023 0201 	bic.w	r2, r3, #1
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800553a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0303 	bic.w	r3, r3, #3
 8005546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f023 0302 	bic.w	r3, r3, #2
 8005558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a2c      	ldr	r2, [pc, #176]	@ (8005618 <TIM_OC1_SetConfig+0x10c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d00f      	beq.n	800558c <TIM_OC1_SetConfig+0x80>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a2b      	ldr	r2, [pc, #172]	@ (800561c <TIM_OC1_SetConfig+0x110>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00b      	beq.n	800558c <TIM_OC1_SetConfig+0x80>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a2a      	ldr	r2, [pc, #168]	@ (8005620 <TIM_OC1_SetConfig+0x114>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d007      	beq.n	800558c <TIM_OC1_SetConfig+0x80>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a29      	ldr	r2, [pc, #164]	@ (8005624 <TIM_OC1_SetConfig+0x118>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d003      	beq.n	800558c <TIM_OC1_SetConfig+0x80>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a28      	ldr	r2, [pc, #160]	@ (8005628 <TIM_OC1_SetConfig+0x11c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d10c      	bne.n	80055a6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f023 0308 	bic.w	r3, r3, #8
 8005592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f023 0304 	bic.w	r3, r3, #4
 80055a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005618 <TIM_OC1_SetConfig+0x10c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00f      	beq.n	80055ce <TIM_OC1_SetConfig+0xc2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a1a      	ldr	r2, [pc, #104]	@ (800561c <TIM_OC1_SetConfig+0x110>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00b      	beq.n	80055ce <TIM_OC1_SetConfig+0xc2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a19      	ldr	r2, [pc, #100]	@ (8005620 <TIM_OC1_SetConfig+0x114>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d007      	beq.n	80055ce <TIM_OC1_SetConfig+0xc2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a18      	ldr	r2, [pc, #96]	@ (8005624 <TIM_OC1_SetConfig+0x118>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d003      	beq.n	80055ce <TIM_OC1_SetConfig+0xc2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a17      	ldr	r2, [pc, #92]	@ (8005628 <TIM_OC1_SetConfig+0x11c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d111      	bne.n	80055f2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	621a      	str	r2, [r3, #32]
}
 800560c:	bf00      	nop
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	40012c00 	.word	0x40012c00
 800561c:	40013400 	.word	0x40013400
 8005620:	40014000 	.word	0x40014000
 8005624:	40014400 	.word	0x40014400
 8005628:	40014800 	.word	0x40014800

0800562c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	f023 0210 	bic.w	r2, r3, #16
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800565a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800565e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	021b      	lsls	r3, r3, #8
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4313      	orrs	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f023 0320 	bic.w	r3, r3, #32
 800567a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a28      	ldr	r2, [pc, #160]	@ (800572c <TIM_OC2_SetConfig+0x100>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d003      	beq.n	8005698 <TIM_OC2_SetConfig+0x6c>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a27      	ldr	r2, [pc, #156]	@ (8005730 <TIM_OC2_SetConfig+0x104>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d10d      	bne.n	80056b4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800569e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a1d      	ldr	r2, [pc, #116]	@ (800572c <TIM_OC2_SetConfig+0x100>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00f      	beq.n	80056dc <TIM_OC2_SetConfig+0xb0>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a1c      	ldr	r2, [pc, #112]	@ (8005730 <TIM_OC2_SetConfig+0x104>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00b      	beq.n	80056dc <TIM_OC2_SetConfig+0xb0>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005734 <TIM_OC2_SetConfig+0x108>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d007      	beq.n	80056dc <TIM_OC2_SetConfig+0xb0>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005738 <TIM_OC2_SetConfig+0x10c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d003      	beq.n	80056dc <TIM_OC2_SetConfig+0xb0>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a19      	ldr	r2, [pc, #100]	@ (800573c <TIM_OC2_SetConfig+0x110>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d113      	bne.n	8005704 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	4313      	orrs	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	621a      	str	r2, [r3, #32]
}
 800571e:	bf00      	nop
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40012c00 	.word	0x40012c00
 8005730:	40013400 	.word	0x40013400
 8005734:	40014000 	.word	0x40014000
 8005738:	40014400 	.word	0x40014400
 800573c:	40014800 	.word	0x40014800

08005740 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800576e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0303 	bic.w	r3, r3, #3
 800577a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800578c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	021b      	lsls	r3, r3, #8
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a27      	ldr	r2, [pc, #156]	@ (800583c <TIM_OC3_SetConfig+0xfc>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d003      	beq.n	80057aa <TIM_OC3_SetConfig+0x6a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a26      	ldr	r2, [pc, #152]	@ (8005840 <TIM_OC3_SetConfig+0x100>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d10d      	bne.n	80057c6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a1c      	ldr	r2, [pc, #112]	@ (800583c <TIM_OC3_SetConfig+0xfc>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00f      	beq.n	80057ee <TIM_OC3_SetConfig+0xae>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005840 <TIM_OC3_SetConfig+0x100>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00b      	beq.n	80057ee <TIM_OC3_SetConfig+0xae>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005844 <TIM_OC3_SetConfig+0x104>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d007      	beq.n	80057ee <TIM_OC3_SetConfig+0xae>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a19      	ldr	r2, [pc, #100]	@ (8005848 <TIM_OC3_SetConfig+0x108>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d003      	beq.n	80057ee <TIM_OC3_SetConfig+0xae>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a18      	ldr	r2, [pc, #96]	@ (800584c <TIM_OC3_SetConfig+0x10c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d113      	bne.n	8005816 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	4313      	orrs	r3, r2
 8005814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	621a      	str	r2, [r3, #32]
}
 8005830:	bf00      	nop
 8005832:	371c      	adds	r7, #28
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	40012c00 	.word	0x40012c00
 8005840:	40013400 	.word	0x40013400
 8005844:	40014000 	.word	0x40014000
 8005848:	40014400 	.word	0x40014400
 800584c:	40014800 	.word	0x40014800

08005850 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800587e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800588a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	021b      	lsls	r3, r3, #8
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800589e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	031b      	lsls	r3, r3, #12
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a28      	ldr	r2, [pc, #160]	@ (8005950 <TIM_OC4_SetConfig+0x100>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d003      	beq.n	80058bc <TIM_OC4_SetConfig+0x6c>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a27      	ldr	r2, [pc, #156]	@ (8005954 <TIM_OC4_SetConfig+0x104>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d10d      	bne.n	80058d8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	031b      	lsls	r3, r3, #12
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a1d      	ldr	r2, [pc, #116]	@ (8005950 <TIM_OC4_SetConfig+0x100>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00f      	beq.n	8005900 <TIM_OC4_SetConfig+0xb0>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005954 <TIM_OC4_SetConfig+0x104>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00b      	beq.n	8005900 <TIM_OC4_SetConfig+0xb0>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005958 <TIM_OC4_SetConfig+0x108>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d007      	beq.n	8005900 <TIM_OC4_SetConfig+0xb0>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a1a      	ldr	r2, [pc, #104]	@ (800595c <TIM_OC4_SetConfig+0x10c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d003      	beq.n	8005900 <TIM_OC4_SetConfig+0xb0>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a19      	ldr	r2, [pc, #100]	@ (8005960 <TIM_OC4_SetConfig+0x110>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d113      	bne.n	8005928 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005906:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800590e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	019b      	lsls	r3, r3, #6
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	4313      	orrs	r3, r2
 800591a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	019b      	lsls	r3, r3, #6
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4313      	orrs	r3, r2
 8005926:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	621a      	str	r2, [r3, #32]
}
 8005942:	bf00      	nop
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40012c00 	.word	0x40012c00
 8005954:	40013400 	.word	0x40013400
 8005958:	40014000 	.word	0x40014000
 800595c:	40014400 	.word	0x40014400
 8005960:	40014800 	.word	0x40014800

08005964 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800598a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80059a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	041b      	lsls	r3, r3, #16
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a17      	ldr	r2, [pc, #92]	@ (8005a18 <TIM_OC5_SetConfig+0xb4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00f      	beq.n	80059de <TIM_OC5_SetConfig+0x7a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a16      	ldr	r2, [pc, #88]	@ (8005a1c <TIM_OC5_SetConfig+0xb8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00b      	beq.n	80059de <TIM_OC5_SetConfig+0x7a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a15      	ldr	r2, [pc, #84]	@ (8005a20 <TIM_OC5_SetConfig+0xbc>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d007      	beq.n	80059de <TIM_OC5_SetConfig+0x7a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a14      	ldr	r2, [pc, #80]	@ (8005a24 <TIM_OC5_SetConfig+0xc0>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d003      	beq.n	80059de <TIM_OC5_SetConfig+0x7a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a13      	ldr	r2, [pc, #76]	@ (8005a28 <TIM_OC5_SetConfig+0xc4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d109      	bne.n	80059f2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	021b      	lsls	r3, r3, #8
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	621a      	str	r2, [r3, #32]
}
 8005a0c:	bf00      	nop
 8005a0e:	371c      	adds	r7, #28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	40012c00 	.word	0x40012c00
 8005a1c:	40013400 	.word	0x40013400
 8005a20:	40014000 	.word	0x40014000
 8005a24:	40014400 	.word	0x40014400
 8005a28:	40014800 	.word	0x40014800

08005a2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	051b      	lsls	r3, r3, #20
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a18      	ldr	r2, [pc, #96]	@ (8005ae4 <TIM_OC6_SetConfig+0xb8>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00f      	beq.n	8005aa8 <TIM_OC6_SetConfig+0x7c>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a17      	ldr	r2, [pc, #92]	@ (8005ae8 <TIM_OC6_SetConfig+0xbc>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00b      	beq.n	8005aa8 <TIM_OC6_SetConfig+0x7c>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a16      	ldr	r2, [pc, #88]	@ (8005aec <TIM_OC6_SetConfig+0xc0>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d007      	beq.n	8005aa8 <TIM_OC6_SetConfig+0x7c>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a15      	ldr	r2, [pc, #84]	@ (8005af0 <TIM_OC6_SetConfig+0xc4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d003      	beq.n	8005aa8 <TIM_OC6_SetConfig+0x7c>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a14      	ldr	r2, [pc, #80]	@ (8005af4 <TIM_OC6_SetConfig+0xc8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d109      	bne.n	8005abc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005aae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	029b      	lsls	r3, r3, #10
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	621a      	str	r2, [r3, #32]
}
 8005ad6:	bf00      	nop
 8005ad8:	371c      	adds	r7, #28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	40013400 	.word	0x40013400
 8005aec:	40014000 	.word	0x40014000
 8005af0:	40014400 	.word	0x40014400
 8005af4:	40014800 	.word	0x40014800

08005af8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f003 031f 	and.w	r3, r3, #31
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6a1a      	ldr	r2, [r3, #32]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	43db      	mvns	r3, r3
 8005b1a:	401a      	ands	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a1a      	ldr	r2, [r3, #32]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f003 031f 	and.w	r3, r3, #31
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b30:	431a      	orrs	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
	...

08005b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e065      	b.n	8005c28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a2c      	ldr	r2, [pc, #176]	@ (8005c34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d004      	beq.n	8005b90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a2b      	ldr	r2, [pc, #172]	@ (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d108      	bne.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005b96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005ba8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8005c34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d018      	beq.n	8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bd2:	d013      	beq.n	8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a18      	ldr	r2, [pc, #96]	@ (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00e      	beq.n	8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a17      	ldr	r2, [pc, #92]	@ (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d009      	beq.n	8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a12      	ldr	r2, [pc, #72]	@ (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d004      	beq.n	8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a13      	ldr	r2, [pc, #76]	@ (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d10c      	bne.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	40012c00 	.word	0x40012c00
 8005c38:	40013400 	.word	0x40013400
 8005c3c:	40000400 	.word	0x40000400
 8005c40:	40000800 	.word	0x40000800
 8005c44:	40014000 	.word	0x40014000

08005c48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e073      	b.n	8005d4c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	041b      	lsls	r3, r3, #16
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a19      	ldr	r2, [pc, #100]	@ (8005d58 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d004      	beq.n	8005d00 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a18      	ldr	r2, [pc, #96]	@ (8005d5c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d11c      	bne.n	8005d3a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d0a:	051b      	lsls	r3, r3, #20
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	40012c00 	.word	0x40012c00
 8005d5c:	40013400 	.word	0x40013400

08005d60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e042      	b.n	8005df8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d106      	bne.n	8005d8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7fc fa61 	bl	800224c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2224      	movs	r2, #36	@ 0x24
 8005d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0201 	bic.w	r2, r2, #1
 8005da0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fbf8 	bl	80065a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f929 	bl	8006008 <UART_SetConfig>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d101      	bne.n	8005dc0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e01b      	b.n	8005df8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005dce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005dde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0201 	orr.w	r2, r2, #1
 8005dee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fc77 	bl	80066e4 <UART_CheckIdleState>
 8005df6:	4603      	mov	r3, r0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08a      	sub	sp, #40	@ 0x28
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	d17b      	bne.n	8005f12 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <HAL_UART_Transmit+0x26>
 8005e20:	88fb      	ldrh	r3, [r7, #6]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e074      	b.n	8005f14 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2221      	movs	r2, #33	@ 0x21
 8005e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e3a:	f7fc fb5b 	bl	80024f4 <HAL_GetTick>
 8005e3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	88fa      	ldrh	r2, [r7, #6]
 8005e44:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	88fa      	ldrh	r2, [r7, #6]
 8005e4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e58:	d108      	bne.n	8005e6c <HAL_UART_Transmit+0x6c>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d104      	bne.n	8005e6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	61bb      	str	r3, [r7, #24]
 8005e6a:	e003      	b.n	8005e74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e70:	2300      	movs	r3, #0
 8005e72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e74:	e030      	b.n	8005ed8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2180      	movs	r1, #128	@ 0x80
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 fcd9 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d005      	beq.n	8005e98 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e03d      	b.n	8005f14 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10b      	bne.n	8005eb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005eac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	3302      	adds	r3, #2
 8005eb2:	61bb      	str	r3, [r7, #24]
 8005eb4:	e007      	b.n	8005ec6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	781a      	ldrb	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1c8      	bne.n	8005e76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2200      	movs	r2, #0
 8005eec:	2140      	movs	r1, #64	@ 0x40
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 fca2 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2220      	movs	r2, #32
 8005efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e006      	b.n	8005f14 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e000      	b.n	8005f14 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005f12:	2302      	movs	r3, #2
  }
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3720      	adds	r7, #32
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08a      	sub	sp, #40	@ 0x28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	4613      	mov	r3, r2
 8005f28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	d137      	bne.n	8005fa4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <HAL_UART_Receive_DMA+0x24>
 8005f3a:	88fb      	ldrh	r3, [r7, #6]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e030      	b.n	8005fa6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a18      	ldr	r2, [pc, #96]	@ (8005fb0 <HAL_UART_Receive_DMA+0x94>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d01f      	beq.n	8005f94 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d018      	beq.n	8005f94 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f80:	623b      	str	r3, [r7, #32]
 8005f82:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	69f9      	ldr	r1, [r7, #28]
 8005f86:	6a3a      	ldr	r2, [r7, #32]
 8005f88:	e841 2300 	strex	r3, r2, [r1]
 8005f8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e6      	bne.n	8005f62 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005f94:	88fb      	ldrh	r3, [r7, #6]
 8005f96:	461a      	mov	r2, r3
 8005f98:	68b9      	ldr	r1, [r7, #8]
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 fcba 	bl	8006914 <UART_Start_Receive_DMA>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	e000      	b.n	8005fa6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005fa4:	2302      	movs	r3, #2
  }
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3728      	adds	r7, #40	@ 0x28
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	40008000 	.word	0x40008000

08005fb4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800600c:	b08c      	sub	sp, #48	@ 0x30
 800600e:	af00      	add	r7, sp, #0
 8006010:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	431a      	orrs	r2, r3
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	431a      	orrs	r2, r3
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	4313      	orrs	r3, r2
 800602e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	4bab      	ldr	r3, [pc, #684]	@ (80062e4 <UART_SetConfig+0x2dc>)
 8006038:	4013      	ands	r3, r2
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	6812      	ldr	r2, [r2, #0]
 800603e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006040:	430b      	orrs	r3, r1
 8006042:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4aa0      	ldr	r2, [pc, #640]	@ (80062e8 <UART_SetConfig+0x2e0>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d004      	beq.n	8006074 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006070:	4313      	orrs	r3, r2
 8006072:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800607e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	6812      	ldr	r2, [r2, #0]
 8006086:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006088:	430b      	orrs	r3, r1
 800608a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006092:	f023 010f 	bic.w	r1, r3, #15
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a91      	ldr	r2, [pc, #580]	@ (80062ec <UART_SetConfig+0x2e4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d125      	bne.n	80060f8 <UART_SetConfig+0xf0>
 80060ac:	4b90      	ldr	r3, [pc, #576]	@ (80062f0 <UART_SetConfig+0x2e8>)
 80060ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060b2:	f003 0303 	and.w	r3, r3, #3
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d81a      	bhi.n	80060f0 <UART_SetConfig+0xe8>
 80060ba:	a201      	add	r2, pc, #4	@ (adr r2, 80060c0 <UART_SetConfig+0xb8>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	080060d1 	.word	0x080060d1
 80060c4:	080060e1 	.word	0x080060e1
 80060c8:	080060d9 	.word	0x080060d9
 80060cc:	080060e9 	.word	0x080060e9
 80060d0:	2301      	movs	r3, #1
 80060d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060d6:	e0d6      	b.n	8006286 <UART_SetConfig+0x27e>
 80060d8:	2302      	movs	r3, #2
 80060da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060de:	e0d2      	b.n	8006286 <UART_SetConfig+0x27e>
 80060e0:	2304      	movs	r3, #4
 80060e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060e6:	e0ce      	b.n	8006286 <UART_SetConfig+0x27e>
 80060e8:	2308      	movs	r3, #8
 80060ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ee:	e0ca      	b.n	8006286 <UART_SetConfig+0x27e>
 80060f0:	2310      	movs	r3, #16
 80060f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060f6:	e0c6      	b.n	8006286 <UART_SetConfig+0x27e>
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a7d      	ldr	r2, [pc, #500]	@ (80062f4 <UART_SetConfig+0x2ec>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d138      	bne.n	8006174 <UART_SetConfig+0x16c>
 8006102:	4b7b      	ldr	r3, [pc, #492]	@ (80062f0 <UART_SetConfig+0x2e8>)
 8006104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006108:	f003 030c 	and.w	r3, r3, #12
 800610c:	2b0c      	cmp	r3, #12
 800610e:	d82d      	bhi.n	800616c <UART_SetConfig+0x164>
 8006110:	a201      	add	r2, pc, #4	@ (adr r2, 8006118 <UART_SetConfig+0x110>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	0800614d 	.word	0x0800614d
 800611c:	0800616d 	.word	0x0800616d
 8006120:	0800616d 	.word	0x0800616d
 8006124:	0800616d 	.word	0x0800616d
 8006128:	0800615d 	.word	0x0800615d
 800612c:	0800616d 	.word	0x0800616d
 8006130:	0800616d 	.word	0x0800616d
 8006134:	0800616d 	.word	0x0800616d
 8006138:	08006155 	.word	0x08006155
 800613c:	0800616d 	.word	0x0800616d
 8006140:	0800616d 	.word	0x0800616d
 8006144:	0800616d 	.word	0x0800616d
 8006148:	08006165 	.word	0x08006165
 800614c:	2300      	movs	r3, #0
 800614e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006152:	e098      	b.n	8006286 <UART_SetConfig+0x27e>
 8006154:	2302      	movs	r3, #2
 8006156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800615a:	e094      	b.n	8006286 <UART_SetConfig+0x27e>
 800615c:	2304      	movs	r3, #4
 800615e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006162:	e090      	b.n	8006286 <UART_SetConfig+0x27e>
 8006164:	2308      	movs	r3, #8
 8006166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800616a:	e08c      	b.n	8006286 <UART_SetConfig+0x27e>
 800616c:	2310      	movs	r3, #16
 800616e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006172:	e088      	b.n	8006286 <UART_SetConfig+0x27e>
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a5f      	ldr	r2, [pc, #380]	@ (80062f8 <UART_SetConfig+0x2f0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d125      	bne.n	80061ca <UART_SetConfig+0x1c2>
 800617e:	4b5c      	ldr	r3, [pc, #368]	@ (80062f0 <UART_SetConfig+0x2e8>)
 8006180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006184:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006188:	2b30      	cmp	r3, #48	@ 0x30
 800618a:	d016      	beq.n	80061ba <UART_SetConfig+0x1b2>
 800618c:	2b30      	cmp	r3, #48	@ 0x30
 800618e:	d818      	bhi.n	80061c2 <UART_SetConfig+0x1ba>
 8006190:	2b20      	cmp	r3, #32
 8006192:	d00a      	beq.n	80061aa <UART_SetConfig+0x1a2>
 8006194:	2b20      	cmp	r3, #32
 8006196:	d814      	bhi.n	80061c2 <UART_SetConfig+0x1ba>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <UART_SetConfig+0x19a>
 800619c:	2b10      	cmp	r3, #16
 800619e:	d008      	beq.n	80061b2 <UART_SetConfig+0x1aa>
 80061a0:	e00f      	b.n	80061c2 <UART_SetConfig+0x1ba>
 80061a2:	2300      	movs	r3, #0
 80061a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061a8:	e06d      	b.n	8006286 <UART_SetConfig+0x27e>
 80061aa:	2302      	movs	r3, #2
 80061ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061b0:	e069      	b.n	8006286 <UART_SetConfig+0x27e>
 80061b2:	2304      	movs	r3, #4
 80061b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061b8:	e065      	b.n	8006286 <UART_SetConfig+0x27e>
 80061ba:	2308      	movs	r3, #8
 80061bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061c0:	e061      	b.n	8006286 <UART_SetConfig+0x27e>
 80061c2:	2310      	movs	r3, #16
 80061c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061c8:	e05d      	b.n	8006286 <UART_SetConfig+0x27e>
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a4b      	ldr	r2, [pc, #300]	@ (80062fc <UART_SetConfig+0x2f4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d125      	bne.n	8006220 <UART_SetConfig+0x218>
 80061d4:	4b46      	ldr	r3, [pc, #280]	@ (80062f0 <UART_SetConfig+0x2e8>)
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80061de:	2bc0      	cmp	r3, #192	@ 0xc0
 80061e0:	d016      	beq.n	8006210 <UART_SetConfig+0x208>
 80061e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80061e4:	d818      	bhi.n	8006218 <UART_SetConfig+0x210>
 80061e6:	2b80      	cmp	r3, #128	@ 0x80
 80061e8:	d00a      	beq.n	8006200 <UART_SetConfig+0x1f8>
 80061ea:	2b80      	cmp	r3, #128	@ 0x80
 80061ec:	d814      	bhi.n	8006218 <UART_SetConfig+0x210>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <UART_SetConfig+0x1f0>
 80061f2:	2b40      	cmp	r3, #64	@ 0x40
 80061f4:	d008      	beq.n	8006208 <UART_SetConfig+0x200>
 80061f6:	e00f      	b.n	8006218 <UART_SetConfig+0x210>
 80061f8:	2300      	movs	r3, #0
 80061fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061fe:	e042      	b.n	8006286 <UART_SetConfig+0x27e>
 8006200:	2302      	movs	r3, #2
 8006202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006206:	e03e      	b.n	8006286 <UART_SetConfig+0x27e>
 8006208:	2304      	movs	r3, #4
 800620a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800620e:	e03a      	b.n	8006286 <UART_SetConfig+0x27e>
 8006210:	2308      	movs	r3, #8
 8006212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006216:	e036      	b.n	8006286 <UART_SetConfig+0x27e>
 8006218:	2310      	movs	r3, #16
 800621a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800621e:	e032      	b.n	8006286 <UART_SetConfig+0x27e>
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a30      	ldr	r2, [pc, #192]	@ (80062e8 <UART_SetConfig+0x2e0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d12a      	bne.n	8006280 <UART_SetConfig+0x278>
 800622a:	4b31      	ldr	r3, [pc, #196]	@ (80062f0 <UART_SetConfig+0x2e8>)
 800622c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006230:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006234:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006238:	d01a      	beq.n	8006270 <UART_SetConfig+0x268>
 800623a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800623e:	d81b      	bhi.n	8006278 <UART_SetConfig+0x270>
 8006240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006244:	d00c      	beq.n	8006260 <UART_SetConfig+0x258>
 8006246:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800624a:	d815      	bhi.n	8006278 <UART_SetConfig+0x270>
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <UART_SetConfig+0x250>
 8006250:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006254:	d008      	beq.n	8006268 <UART_SetConfig+0x260>
 8006256:	e00f      	b.n	8006278 <UART_SetConfig+0x270>
 8006258:	2300      	movs	r3, #0
 800625a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800625e:	e012      	b.n	8006286 <UART_SetConfig+0x27e>
 8006260:	2302      	movs	r3, #2
 8006262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006266:	e00e      	b.n	8006286 <UART_SetConfig+0x27e>
 8006268:	2304      	movs	r3, #4
 800626a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800626e:	e00a      	b.n	8006286 <UART_SetConfig+0x27e>
 8006270:	2308      	movs	r3, #8
 8006272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006276:	e006      	b.n	8006286 <UART_SetConfig+0x27e>
 8006278:	2310      	movs	r3, #16
 800627a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800627e:	e002      	b.n	8006286 <UART_SetConfig+0x27e>
 8006280:	2310      	movs	r3, #16
 8006282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a17      	ldr	r2, [pc, #92]	@ (80062e8 <UART_SetConfig+0x2e0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	f040 80a8 	bne.w	80063e2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006292:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006296:	2b08      	cmp	r3, #8
 8006298:	d834      	bhi.n	8006304 <UART_SetConfig+0x2fc>
 800629a:	a201      	add	r2, pc, #4	@ (adr r2, 80062a0 <UART_SetConfig+0x298>)
 800629c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a0:	080062c5 	.word	0x080062c5
 80062a4:	08006305 	.word	0x08006305
 80062a8:	080062cd 	.word	0x080062cd
 80062ac:	08006305 	.word	0x08006305
 80062b0:	080062d3 	.word	0x080062d3
 80062b4:	08006305 	.word	0x08006305
 80062b8:	08006305 	.word	0x08006305
 80062bc:	08006305 	.word	0x08006305
 80062c0:	080062db 	.word	0x080062db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062c4:	f7fd fbde 	bl	8003a84 <HAL_RCC_GetPCLK1Freq>
 80062c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062ca:	e021      	b.n	8006310 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006300 <UART_SetConfig+0x2f8>)
 80062ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062d0:	e01e      	b.n	8006310 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062d2:	f7fd fb6b 	bl	80039ac <HAL_RCC_GetSysClockFreq>
 80062d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062d8:	e01a      	b.n	8006310 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062e0:	e016      	b.n	8006310 <UART_SetConfig+0x308>
 80062e2:	bf00      	nop
 80062e4:	cfff69f3 	.word	0xcfff69f3
 80062e8:	40008000 	.word	0x40008000
 80062ec:	40013800 	.word	0x40013800
 80062f0:	40021000 	.word	0x40021000
 80062f4:	40004400 	.word	0x40004400
 80062f8:	40004800 	.word	0x40004800
 80062fc:	40004c00 	.word	0x40004c00
 8006300:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800630e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 812a 	beq.w	800656c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631c:	4a9e      	ldr	r2, [pc, #632]	@ (8006598 <UART_SetConfig+0x590>)
 800631e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006322:	461a      	mov	r2, r3
 8006324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006326:	fbb3 f3f2 	udiv	r3, r3, r2
 800632a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	4613      	mov	r3, r2
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	4413      	add	r3, r2
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	429a      	cmp	r2, r3
 800633a:	d305      	bcc.n	8006348 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	429a      	cmp	r2, r3
 8006346:	d903      	bls.n	8006350 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800634e:	e10d      	b.n	800656c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006352:	2200      	movs	r2, #0
 8006354:	60bb      	str	r3, [r7, #8]
 8006356:	60fa      	str	r2, [r7, #12]
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635c:	4a8e      	ldr	r2, [pc, #568]	@ (8006598 <UART_SetConfig+0x590>)
 800635e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006362:	b29b      	uxth	r3, r3
 8006364:	2200      	movs	r2, #0
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	607a      	str	r2, [r7, #4]
 800636a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800636e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006372:	f7fa fcb1 	bl	8000cd8 <__aeabi_uldivmod>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	4610      	mov	r0, r2
 800637c:	4619      	mov	r1, r3
 800637e:	f04f 0200 	mov.w	r2, #0
 8006382:	f04f 0300 	mov.w	r3, #0
 8006386:	020b      	lsls	r3, r1, #8
 8006388:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800638c:	0202      	lsls	r2, r0, #8
 800638e:	6979      	ldr	r1, [r7, #20]
 8006390:	6849      	ldr	r1, [r1, #4]
 8006392:	0849      	lsrs	r1, r1, #1
 8006394:	2000      	movs	r0, #0
 8006396:	460c      	mov	r4, r1
 8006398:	4605      	mov	r5, r0
 800639a:	eb12 0804 	adds.w	r8, r2, r4
 800639e:	eb43 0905 	adc.w	r9, r3, r5
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	469a      	mov	sl, r3
 80063aa:	4693      	mov	fp, r2
 80063ac:	4652      	mov	r2, sl
 80063ae:	465b      	mov	r3, fp
 80063b0:	4640      	mov	r0, r8
 80063b2:	4649      	mov	r1, r9
 80063b4:	f7fa fc90 	bl	8000cd8 <__aeabi_uldivmod>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4613      	mov	r3, r2
 80063be:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063c6:	d308      	bcc.n	80063da <UART_SetConfig+0x3d2>
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063ce:	d204      	bcs.n	80063da <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6a3a      	ldr	r2, [r7, #32]
 80063d6:	60da      	str	r2, [r3, #12]
 80063d8:	e0c8      	b.n	800656c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80063e0:	e0c4      	b.n	800656c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ea:	d167      	bne.n	80064bc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80063ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d828      	bhi.n	8006446 <UART_SetConfig+0x43e>
 80063f4:	a201      	add	r2, pc, #4	@ (adr r2, 80063fc <UART_SetConfig+0x3f4>)
 80063f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fa:	bf00      	nop
 80063fc:	08006421 	.word	0x08006421
 8006400:	08006429 	.word	0x08006429
 8006404:	08006431 	.word	0x08006431
 8006408:	08006447 	.word	0x08006447
 800640c:	08006437 	.word	0x08006437
 8006410:	08006447 	.word	0x08006447
 8006414:	08006447 	.word	0x08006447
 8006418:	08006447 	.word	0x08006447
 800641c:	0800643f 	.word	0x0800643f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006420:	f7fd fb30 	bl	8003a84 <HAL_RCC_GetPCLK1Freq>
 8006424:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006426:	e014      	b.n	8006452 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006428:	f7fd fb42 	bl	8003ab0 <HAL_RCC_GetPCLK2Freq>
 800642c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800642e:	e010      	b.n	8006452 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006430:	4b5a      	ldr	r3, [pc, #360]	@ (800659c <UART_SetConfig+0x594>)
 8006432:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006434:	e00d      	b.n	8006452 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006436:	f7fd fab9 	bl	80039ac <HAL_RCC_GetSysClockFreq>
 800643a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800643c:	e009      	b.n	8006452 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800643e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006442:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006444:	e005      	b.n	8006452 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006450:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 8089 	beq.w	800656c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645e:	4a4e      	ldr	r2, [pc, #312]	@ (8006598 <UART_SetConfig+0x590>)
 8006460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006464:	461a      	mov	r2, r3
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	fbb3 f3f2 	udiv	r3, r3, r2
 800646c:	005a      	lsls	r2, r3, #1
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	085b      	lsrs	r3, r3, #1
 8006474:	441a      	add	r2, r3
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	fbb2 f3f3 	udiv	r3, r2, r3
 800647e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	2b0f      	cmp	r3, #15
 8006484:	d916      	bls.n	80064b4 <UART_SetConfig+0x4ac>
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800648c:	d212      	bcs.n	80064b4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	b29b      	uxth	r3, r3
 8006492:	f023 030f 	bic.w	r3, r3, #15
 8006496:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	085b      	lsrs	r3, r3, #1
 800649c:	b29b      	uxth	r3, r3
 800649e:	f003 0307 	and.w	r3, r3, #7
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	8bfb      	ldrh	r3, [r7, #30]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	8bfa      	ldrh	r2, [r7, #30]
 80064b0:	60da      	str	r2, [r3, #12]
 80064b2:	e05b      	b.n	800656c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80064ba:	e057      	b.n	800656c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d828      	bhi.n	8006516 <UART_SetConfig+0x50e>
 80064c4:	a201      	add	r2, pc, #4	@ (adr r2, 80064cc <UART_SetConfig+0x4c4>)
 80064c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ca:	bf00      	nop
 80064cc:	080064f1 	.word	0x080064f1
 80064d0:	080064f9 	.word	0x080064f9
 80064d4:	08006501 	.word	0x08006501
 80064d8:	08006517 	.word	0x08006517
 80064dc:	08006507 	.word	0x08006507
 80064e0:	08006517 	.word	0x08006517
 80064e4:	08006517 	.word	0x08006517
 80064e8:	08006517 	.word	0x08006517
 80064ec:	0800650f 	.word	0x0800650f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064f0:	f7fd fac8 	bl	8003a84 <HAL_RCC_GetPCLK1Freq>
 80064f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064f6:	e014      	b.n	8006522 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064f8:	f7fd fada 	bl	8003ab0 <HAL_RCC_GetPCLK2Freq>
 80064fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064fe:	e010      	b.n	8006522 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006500:	4b26      	ldr	r3, [pc, #152]	@ (800659c <UART_SetConfig+0x594>)
 8006502:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006504:	e00d      	b.n	8006522 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006506:	f7fd fa51 	bl	80039ac <HAL_RCC_GetSysClockFreq>
 800650a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800650c:	e009      	b.n	8006522 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800650e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006512:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006514:	e005      	b.n	8006522 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006520:	bf00      	nop
    }

    if (pclk != 0U)
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	2b00      	cmp	r3, #0
 8006526:	d021      	beq.n	800656c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652c:	4a1a      	ldr	r2, [pc, #104]	@ (8006598 <UART_SetConfig+0x590>)
 800652e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006532:	461a      	mov	r2, r3
 8006534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006536:	fbb3 f2f2 	udiv	r2, r3, r2
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	085b      	lsrs	r3, r3, #1
 8006540:	441a      	add	r2, r3
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	fbb2 f3f3 	udiv	r3, r2, r3
 800654a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	2b0f      	cmp	r3, #15
 8006550:	d909      	bls.n	8006566 <UART_SetConfig+0x55e>
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006558:	d205      	bcs.n	8006566 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	b29a      	uxth	r2, r3
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60da      	str	r2, [r3, #12]
 8006564:	e002      	b.n	800656c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	2201      	movs	r2, #1
 8006570:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2201      	movs	r2, #1
 8006578:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	2200      	movs	r2, #0
 8006580:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2200      	movs	r2, #0
 8006586:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006588:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800658c:	4618      	mov	r0, r3
 800658e:	3730      	adds	r7, #48	@ 0x30
 8006590:	46bd      	mov	sp, r7
 8006592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006596:	bf00      	nop
 8006598:	0800d48c 	.word	0x0800d48c
 800659c:	00f42400 	.word	0x00f42400

080065a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ac:	f003 0308 	and.w	r3, r3, #8
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00a      	beq.n	80065ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00a      	beq.n	800660e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006612:	f003 0304 	and.w	r3, r3, #4
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006634:	f003 0310 	and.w	r3, r3, #16
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00a      	beq.n	8006652 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800667c:	2b00      	cmp	r3, #0
 800667e:	d01a      	beq.n	80066b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800669a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800669e:	d10a      	bne.n	80066b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	605a      	str	r2, [r3, #4]
  }
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b098      	sub	sp, #96	@ 0x60
 80066e8:	af02      	add	r7, sp, #8
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066f4:	f7fb fefe 	bl	80024f4 <HAL_GetTick>
 80066f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0308 	and.w	r3, r3, #8
 8006704:	2b08      	cmp	r3, #8
 8006706:	d12f      	bne.n	8006768 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006708:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006710:	2200      	movs	r2, #0
 8006712:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f88e 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d022      	beq.n	8006768 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672a:	e853 3f00 	ldrex	r3, [r3]
 800672e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006732:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006736:	653b      	str	r3, [r7, #80]	@ 0x50
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	461a      	mov	r2, r3
 800673e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006740:	647b      	str	r3, [r7, #68]	@ 0x44
 8006742:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006744:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006746:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006748:	e841 2300 	strex	r3, r2, [r1]
 800674c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800674e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e6      	bne.n	8006722 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2220      	movs	r2, #32
 8006758:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e063      	b.n	8006830 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0304 	and.w	r3, r3, #4
 8006772:	2b04      	cmp	r3, #4
 8006774:	d149      	bne.n	800680a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006776:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800677e:	2200      	movs	r2, #0
 8006780:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f857 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d03c      	beq.n	800680a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	623b      	str	r3, [r7, #32]
   return(result);
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80067b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e6      	bne.n	8006790 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3308      	adds	r3, #8
 80067c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f023 0301 	bic.w	r3, r3, #1
 80067d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067e2:	61fa      	str	r2, [r7, #28]
 80067e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	69b9      	ldr	r1, [r7, #24]
 80067e8:	69fa      	ldr	r2, [r7, #28]
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	617b      	str	r3, [r7, #20]
   return(result);
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e5      	bne.n	80067c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e012      	b.n	8006830 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2220      	movs	r2, #32
 800680e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2220      	movs	r2, #32
 8006816:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3758      	adds	r7, #88	@ 0x58
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	4613      	mov	r3, r2
 8006846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006848:	e04f      	b.n	80068ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006850:	d04b      	beq.n	80068ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006852:	f7fb fe4f 	bl	80024f4 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	429a      	cmp	r2, r3
 8006860:	d302      	bcc.n	8006868 <UART_WaitOnFlagUntilTimeout+0x30>
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e04e      	b.n	800690a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0304 	and.w	r3, r3, #4
 8006876:	2b00      	cmp	r3, #0
 8006878:	d037      	beq.n	80068ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2b80      	cmp	r3, #128	@ 0x80
 800687e:	d034      	beq.n	80068ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2b40      	cmp	r3, #64	@ 0x40
 8006884:	d031      	beq.n	80068ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	f003 0308 	and.w	r3, r3, #8
 8006890:	2b08      	cmp	r3, #8
 8006892:	d110      	bne.n	80068b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2208      	movs	r2, #8
 800689a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 f920 	bl	8006ae2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2208      	movs	r2, #8
 80068a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e029      	b.n	800690a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068c4:	d111      	bne.n	80068ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f000 f906 	bl	8006ae2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2220      	movs	r2, #32
 80068da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e00f      	b.n	800690a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69da      	ldr	r2, [r3, #28]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	4013      	ands	r3, r2
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	bf0c      	ite	eq
 80068fa:	2301      	moveq	r3, #1
 80068fc:	2300      	movne	r3, #0
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	461a      	mov	r2, r3
 8006902:	79fb      	ldrb	r3, [r7, #7]
 8006904:	429a      	cmp	r2, r3
 8006906:	d0a0      	beq.n	800684a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b096      	sub	sp, #88	@ 0x58
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	4613      	mov	r3, r2
 8006920:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	88fa      	ldrh	r2, [r7, #6]
 800692c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2222      	movs	r2, #34	@ 0x22
 800693c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006946:	2b00      	cmp	r3, #0
 8006948:	d02d      	beq.n	80069a6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006950:	4a40      	ldr	r2, [pc, #256]	@ (8006a54 <UART_Start_Receive_DMA+0x140>)
 8006952:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800695a:	4a3f      	ldr	r2, [pc, #252]	@ (8006a58 <UART_Start_Receive_DMA+0x144>)
 800695c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006964:	4a3d      	ldr	r2, [pc, #244]	@ (8006a5c <UART_Start_Receive_DMA+0x148>)
 8006966:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800696e:	2200      	movs	r2, #0
 8006970:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3324      	adds	r3, #36	@ 0x24
 800697e:	4619      	mov	r1, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006984:	461a      	mov	r2, r3
 8006986:	88fb      	ldrh	r3, [r7, #6]
 8006988:	f7fb ff78 	bl	800287c <HAL_DMA_Start_IT>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d009      	beq.n	80069a6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2210      	movs	r2, #16
 8006996:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2220      	movs	r2, #32
 800699e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e051      	b.n	8006a4a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d018      	beq.n	80069e0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b6:	e853 3f00 	ldrex	r3, [r3]
 80069ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	461a      	mov	r2, r3
 80069ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069ce:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80069d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80069da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e6      	bne.n	80069ae <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3308      	adds	r3, #8
 80069e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ea:	e853 3f00 	ldrex	r3, [r3]
 80069ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	f043 0301 	orr.w	r3, r3, #1
 80069f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	3308      	adds	r3, #8
 80069fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006a00:	637a      	str	r2, [r7, #52]	@ 0x34
 8006a02:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a08:	e841 2300 	strex	r3, r2, [r1]
 8006a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e5      	bne.n	80069e0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3308      	adds	r3, #8
 8006a1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	e853 3f00 	ldrex	r3, [r3]
 8006a22:	613b      	str	r3, [r7, #16]
   return(result);
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3308      	adds	r3, #8
 8006a32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a34:	623a      	str	r2, [r7, #32]
 8006a36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	69f9      	ldr	r1, [r7, #28]
 8006a3a:	6a3a      	ldr	r2, [r7, #32]
 8006a3c:	e841 2300 	strex	r3, r2, [r1]
 8006a40:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e5      	bne.n	8006a14 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3758      	adds	r7, #88	@ 0x58
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	08006baf 	.word	0x08006baf
 8006a58:	08006cdb 	.word	0x08006cdb
 8006a5c:	08006d19 	.word	0x08006d19

08006a60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b08f      	sub	sp, #60	@ 0x3c
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006a7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a88:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e6      	bne.n	8006a68 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	e853 3f00 	ldrex	r3, [r3]
 8006aa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006ab0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006aba:	61ba      	str	r2, [r7, #24]
 8006abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	6979      	ldr	r1, [r7, #20]
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	e841 2300 	strex	r3, r2, [r1]
 8006ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1e5      	bne.n	8006a9a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006ad6:	bf00      	nop
 8006ad8:	373c      	adds	r7, #60	@ 0x3c
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b095      	sub	sp, #84	@ 0x54
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af2:	e853 3f00 	ldrex	r3, [r3]
 8006af6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	461a      	mov	r2, r3
 8006b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b08:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b10:	e841 2300 	strex	r3, r2, [r1]
 8006b14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1e6      	bne.n	8006aea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3308      	adds	r3, #8
 8006b22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	e853 3f00 	ldrex	r3, [r3]
 8006b2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b32:	f023 0301 	bic.w	r3, r3, #1
 8006b36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b48:	e841 2300 	strex	r3, r2, [r1]
 8006b4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1e3      	bne.n	8006b1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d118      	bne.n	8006b8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f023 0310 	bic.w	r3, r3, #16
 8006b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b7a:	61bb      	str	r3, [r7, #24]
 8006b7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7e:	6979      	ldr	r1, [r7, #20]
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	e841 2300 	strex	r3, r2, [r1]
 8006b86:	613b      	str	r3, [r7, #16]
   return(result);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1e6      	bne.n	8006b5c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2220      	movs	r2, #32
 8006b92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006ba2:	bf00      	nop
 8006ba4:	3754      	adds	r7, #84	@ 0x54
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b09c      	sub	sp, #112	@ 0x70
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bba:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d171      	bne.n	8006cae <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006bca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bda:	e853 3f00 	ldrex	r3, [r3]
 8006bde:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006be0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006be2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006be6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	461a      	mov	r2, r3
 8006bee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bf0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bf2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bf6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bf8:	e841 2300 	strex	r3, r2, [r1]
 8006bfc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1e6      	bne.n	8006bd2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3308      	adds	r3, #8
 8006c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c16:	f023 0301 	bic.w	r3, r3, #1
 8006c1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3308      	adds	r3, #8
 8006c22:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006c24:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c26:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c2c:	e841 2300 	strex	r3, r2, [r1]
 8006c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e5      	bne.n	8006c04 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3308      	adds	r3, #8
 8006c3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c42:	e853 3f00 	ldrex	r3, [r3]
 8006c46:	623b      	str	r3, [r7, #32]
   return(result);
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3308      	adds	r3, #8
 8006c56:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006c58:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c60:	e841 2300 	strex	r3, r2, [r1]
 8006c64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e5      	bne.n	8006c38 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d118      	bne.n	8006cae <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	e853 3f00 	ldrex	r3, [r3]
 8006c88:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f023 0310 	bic.w	r3, r3, #16
 8006c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c9a:	61fb      	str	r3, [r7, #28]
 8006c9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9e:	69b9      	ldr	r1, [r7, #24]
 8006ca0:	69fa      	ldr	r2, [r7, #28]
 8006ca2:	e841 2300 	strex	r3, r2, [r1]
 8006ca6:	617b      	str	r3, [r7, #20]
   return(result);
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1e6      	bne.n	8006c7c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d107      	bne.n	8006ccc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006cc6:	f7ff f993 	bl	8005ff0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cca:	e002      	b.n	8006cd2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006ccc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006cce:	f7ff f971 	bl	8005fb4 <HAL_UART_RxCpltCallback>
}
 8006cd2:	bf00      	nop
 8006cd4:	3770      	adds	r7, #112	@ 0x70
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b084      	sub	sp, #16
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2201      	movs	r2, #1
 8006cec:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d109      	bne.n	8006d0a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006cfc:	085b      	lsrs	r3, r3, #1
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	4619      	mov	r1, r3
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f7ff f974 	bl	8005ff0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d08:	e002      	b.n	8006d10 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f7ff f95c 	bl	8005fc8 <HAL_UART_RxHalfCpltCallback>
}
 8006d10:	bf00      	nop
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d24:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d2c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d40:	2b80      	cmp	r3, #128	@ 0x80
 8006d42:	d109      	bne.n	8006d58 <UART_DMAError+0x40>
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	2b21      	cmp	r3, #33	@ 0x21
 8006d48:	d106      	bne.n	8006d58 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006d52:	6978      	ldr	r0, [r7, #20]
 8006d54:	f7ff fe84 	bl	8006a60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d62:	2b40      	cmp	r3, #64	@ 0x40
 8006d64:	d109      	bne.n	8006d7a <UART_DMAError+0x62>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b22      	cmp	r3, #34	@ 0x22
 8006d6a:	d106      	bne.n	8006d7a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006d74:	6978      	ldr	r0, [r7, #20]
 8006d76:	f7ff feb4 	bl	8006ae2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d80:	f043 0210 	orr.w	r2, r3, #16
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d8a:	6978      	ldr	r0, [r7, #20]
 8006d8c:	f7ff f926 	bl	8005fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d90:	bf00      	nop
 8006d92:	3718      	adds	r7, #24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d101      	bne.n	8006dae <HAL_UARTEx_DisableFifoMode+0x16>
 8006daa:	2302      	movs	r3, #2
 8006dac:	e027      	b.n	8006dfe <HAL_UARTEx_DisableFifoMode+0x66>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2224      	movs	r2, #36	@ 0x24
 8006dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 0201 	bic.w	r2, r2, #1
 8006dd4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006ddc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d101      	bne.n	8006e22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e1e:	2302      	movs	r3, #2
 8006e20:	e02d      	b.n	8006e7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2224      	movs	r2, #36	@ 0x24
 8006e2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 0201 	bic.w	r2, r2, #1
 8006e48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f850 	bl	8006f04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b084      	sub	sp, #16
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d101      	bne.n	8006e9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	e02d      	b.n	8006efa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2224      	movs	r2, #36	@ 0x24
 8006eaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 0201 	bic.w	r2, r2, #1
 8006ec4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f812 	bl	8006f04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2220      	movs	r2, #32
 8006eec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d108      	bne.n	8006f26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f24:	e031      	b.n	8006f8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f26:	2308      	movs	r3, #8
 8006f28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f2a:	2308      	movs	r3, #8
 8006f2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	0e5b      	lsrs	r3, r3, #25
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	f003 0307 	and.w	r3, r3, #7
 8006f3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	0f5b      	lsrs	r3, r3, #29
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	f003 0307 	and.w	r3, r3, #7
 8006f4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	7b3a      	ldrb	r2, [r7, #12]
 8006f52:	4911      	ldr	r1, [pc, #68]	@ (8006f98 <UARTEx_SetNbDataToProcess+0x94>)
 8006f54:	5c8a      	ldrb	r2, [r1, r2]
 8006f56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f5a:	7b3a      	ldrb	r2, [r7, #12]
 8006f5c:	490f      	ldr	r1, [pc, #60]	@ (8006f9c <UARTEx_SetNbDataToProcess+0x98>)
 8006f5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f60:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
 8006f6e:	7b7a      	ldrb	r2, [r7, #13]
 8006f70:	4909      	ldr	r1, [pc, #36]	@ (8006f98 <UARTEx_SetNbDataToProcess+0x94>)
 8006f72:	5c8a      	ldrb	r2, [r1, r2]
 8006f74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f78:	7b7a      	ldrb	r2, [r7, #13]
 8006f7a:	4908      	ldr	r1, [pc, #32]	@ (8006f9c <UARTEx_SetNbDataToProcess+0x98>)
 8006f7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006f8a:	bf00      	nop
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	0800d4a4 	.word	0x0800d4a4
 8006f9c:	0800d4ac 	.word	0x0800d4ac

08006fa0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fb2:	2b84      	cmp	r3, #132	@ 0x84
 8006fb4:	d005      	beq.n	8006fc2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006fb6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	3303      	adds	r3, #3
 8006fc0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006fd4:	f000 fb1c 	bl	8007610 <vTaskStartScheduler>
  
  return osOK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006fde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fe0:	b087      	sub	sp, #28
 8006fe2:	af02      	add	r7, sp, #8
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685c      	ldr	r4, [r3, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ff4:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff ffcf 	bl	8006fa0 <makeFreeRtosPriority>
 8007002:	4602      	mov	r2, r0
 8007004:	f107 030c 	add.w	r3, r7, #12
 8007008:	9301      	str	r3, [sp, #4]
 800700a:	9200      	str	r2, [sp, #0]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	4632      	mov	r2, r6
 8007010:	4629      	mov	r1, r5
 8007012:	4620      	mov	r0, r4
 8007014:	f000 f992 	bl	800733c <xTaskCreate>
 8007018:	4603      	mov	r3, r0
 800701a:	2b01      	cmp	r3, #1
 800701c:	d001      	beq.n	8007022 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800701e:	2300      	movs	r3, #0
 8007020:	e000      	b.n	8007024 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8007022:	68fb      	ldr	r3, [r7, #12]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800702c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <osDelay+0x16>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	e000      	b.n	8007044 <osDelay+0x18>
 8007042:	2301      	movs	r3, #1
 8007044:	4618      	mov	r0, r3
 8007046:	f000 faad 	bl	80075a4 <vTaskDelay>
  
  return osOK;
 800704a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f103 0208 	add.w	r2, r3, #8
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f04f 32ff 	mov.w	r2, #4294967295
 800706c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f103 0208 	add.w	r2, r3, #8
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f103 0208 	add.w	r2, r3, #8
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070ae:	b480      	push	{r7}
 80070b0:	b085      	sub	sp, #20
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	689a      	ldr	r2, [r3, #8]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	601a      	str	r2, [r3, #0]
}
 80070ea:	bf00      	nop
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070f6:	b480      	push	{r7}
 80070f8:	b085      	sub	sp, #20
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710c:	d103      	bne.n	8007116 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	e00c      	b.n	8007130 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	3308      	adds	r3, #8
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	e002      	b.n	8007124 <vListInsert+0x2e>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	429a      	cmp	r2, r3
 800712e:	d2f6      	bcs.n	800711e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	1c5a      	adds	r2, r3, #1
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	601a      	str	r2, [r3, #0]
}
 800715c:	bf00      	nop
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	6892      	ldr	r2, [r2, #8]
 800717e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6852      	ldr	r2, [r2, #4]
 8007188:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	429a      	cmp	r2, r3
 8007192:	d103      	bne.n	800719c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	1e5a      	subs	r2, r3, #1
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10b      	bne.n	80071e8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80071e2:	bf00      	nop
 80071e4:	bf00      	nop
 80071e6:	e7fd      	b.n	80071e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80071e8:	f000 ffc6 	bl	8008178 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071f4:	68f9      	ldr	r1, [r7, #12]
 80071f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80071f8:	fb01 f303 	mul.w	r3, r1, r3
 80071fc:	441a      	add	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007218:	3b01      	subs	r3, #1
 800721a:	68f9      	ldr	r1, [r7, #12]
 800721c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800721e:	fb01 f303 	mul.w	r3, r1, r3
 8007222:	441a      	add	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	22ff      	movs	r2, #255	@ 0xff
 800722c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	22ff      	movs	r2, #255	@ 0xff
 8007234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d114      	bne.n	8007268 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d01a      	beq.n	800727c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	3310      	adds	r3, #16
 800724a:	4618      	mov	r0, r3
 800724c:	f000 fbea 	bl	8007a24 <xTaskRemoveFromEventList>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d012      	beq.n	800727c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007256:	4b0d      	ldr	r3, [pc, #52]	@ (800728c <xQueueGenericReset+0xd0>)
 8007258:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	e009      	b.n	800727c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	3310      	adds	r3, #16
 800726c:	4618      	mov	r0, r3
 800726e:	f7ff fef1 	bl	8007054 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3324      	adds	r3, #36	@ 0x24
 8007276:	4618      	mov	r0, r3
 8007278:	f7ff feec 	bl	8007054 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800727c:	f000 ffae 	bl	80081dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007280:	2301      	movs	r3, #1
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	e000ed04 	.word	0xe000ed04

08007290 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007290:	b580      	push	{r7, lr}
 8007292:	b08a      	sub	sp, #40	@ 0x28
 8007294:	af02      	add	r7, sp, #8
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	4613      	mov	r3, r2
 800729c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10b      	bne.n	80072bc <xQueueGenericCreate+0x2c>
	__asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	613b      	str	r3, [r7, #16]
}
 80072b6:	bf00      	nop
 80072b8:	bf00      	nop
 80072ba:	e7fd      	b.n	80072b8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	fb02 f303 	mul.w	r3, r2, r3
 80072c4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	3348      	adds	r3, #72	@ 0x48
 80072ca:	4618      	mov	r0, r3
 80072cc:	f001 f876 	bl	80083bc <pvPortMalloc>
 80072d0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00d      	beq.n	80072f4 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	3348      	adds	r3, #72	@ 0x48
 80072e0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072e2:	79fa      	ldrb	r2, [r7, #7]
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	4613      	mov	r3, r2
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	68b9      	ldr	r1, [r7, #8]
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 f805 	bl	80072fe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072f4:	69bb      	ldr	r3, [r7, #24]
	}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3720      	adds	r7, #32
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	607a      	str	r2, [r7, #4]
 800730a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d103      	bne.n	800731a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	e002      	b.n	8007320 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800732c:	2101      	movs	r1, #1
 800732e:	69b8      	ldr	r0, [r7, #24]
 8007330:	f7ff ff44 	bl	80071bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007334:	bf00      	nop
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08c      	sub	sp, #48	@ 0x30
 8007340:	af04      	add	r7, sp, #16
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	4613      	mov	r3, r2
 800734a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800734c:	88fb      	ldrh	r3, [r7, #6]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4618      	mov	r0, r3
 8007352:	f001 f833 	bl	80083bc <pvPortMalloc>
 8007356:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00e      	beq.n	800737c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800735e:	2054      	movs	r0, #84	@ 0x54
 8007360:	f001 f82c 	bl	80083bc <pvPortMalloc>
 8007364:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	631a      	str	r2, [r3, #48]	@ 0x30
 8007372:	e005      	b.n	8007380 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007374:	6978      	ldr	r0, [r7, #20]
 8007376:	f001 f8ef 	bl	8008558 <vPortFree>
 800737a:	e001      	b.n	8007380 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800737c:	2300      	movs	r3, #0
 800737e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d013      	beq.n	80073ae <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007386:	88fa      	ldrh	r2, [r7, #6]
 8007388:	2300      	movs	r3, #0
 800738a:	9303      	str	r3, [sp, #12]
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	9302      	str	r3, [sp, #8]
 8007390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007392:	9301      	str	r3, [sp, #4]
 8007394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	68b9      	ldr	r1, [r7, #8]
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 f80e 	bl	80073be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073a2:	69f8      	ldr	r0, [r7, #28]
 80073a4:	f000 f894 	bl	80074d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80073a8:	2301      	movs	r3, #1
 80073aa:	61bb      	str	r3, [r7, #24]
 80073ac:	e002      	b.n	80073b4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073ae:	f04f 33ff 	mov.w	r3, #4294967295
 80073b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073b4:	69bb      	ldr	r3, [r7, #24]
	}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3720      	adds	r7, #32
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b088      	sub	sp, #32
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	60f8      	str	r0, [r7, #12]
 80073c6:	60b9      	str	r1, [r7, #8]
 80073c8:	607a      	str	r2, [r7, #4]
 80073ca:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80073cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80073d6:	3b01      	subs	r3, #1
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4413      	add	r3, r2
 80073dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	f023 0307 	bic.w	r3, r3, #7
 80073e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	f003 0307 	and.w	r3, r3, #7
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00b      	beq.n	8007408 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	617b      	str	r3, [r7, #20]
}
 8007402:	bf00      	nop
 8007404:	bf00      	nop
 8007406:	e7fd      	b.n	8007404 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d01f      	beq.n	800744e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800740e:	2300      	movs	r3, #0
 8007410:	61fb      	str	r3, [r7, #28]
 8007412:	e012      	b.n	800743a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	4413      	add	r3, r2
 800741a:	7819      	ldrb	r1, [r3, #0]
 800741c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	4413      	add	r3, r2
 8007422:	3334      	adds	r3, #52	@ 0x34
 8007424:	460a      	mov	r2, r1
 8007426:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	4413      	add	r3, r2
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d006      	beq.n	8007442 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	3301      	adds	r3, #1
 8007438:	61fb      	str	r3, [r7, #28]
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	2b0f      	cmp	r3, #15
 800743e:	d9e9      	bls.n	8007414 <prvInitialiseNewTask+0x56>
 8007440:	e000      	b.n	8007444 <prvInitialiseNewTask+0x86>
			{
				break;
 8007442:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800744c:	e003      	b.n	8007456 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800744e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007458:	2b06      	cmp	r3, #6
 800745a:	d901      	bls.n	8007460 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800745c:	2306      	movs	r3, #6
 800745e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007462:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007464:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007468:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800746a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800746c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746e:	2200      	movs	r2, #0
 8007470:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007474:	3304      	adds	r3, #4
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff fe0c 	bl	8007094 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800747c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747e:	3318      	adds	r3, #24
 8007480:	4618      	mov	r0, r3
 8007482:	f7ff fe07 	bl	8007094 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007488:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800748a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800748c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748e:	f1c3 0207 	rsb	r2, r3, #7
 8007492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007494:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800749a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800749c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749e:	2200      	movs	r2, #0
 80074a0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	68f9      	ldr	r1, [r7, #12]
 80074ae:	69b8      	ldr	r0, [r7, #24]
 80074b0:	f000 fd32 	bl	8007f18 <pxPortInitialiseStack>
 80074b4:	4602      	mov	r2, r0
 80074b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80074ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074c6:	bf00      	nop
 80074c8:	3720      	adds	r7, #32
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
	...

080074d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074d8:	f000 fe4e 	bl	8008178 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074dc:	4b2a      	ldr	r3, [pc, #168]	@ (8007588 <prvAddNewTaskToReadyList+0xb8>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3301      	adds	r3, #1
 80074e2:	4a29      	ldr	r2, [pc, #164]	@ (8007588 <prvAddNewTaskToReadyList+0xb8>)
 80074e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074e6:	4b29      	ldr	r3, [pc, #164]	@ (800758c <prvAddNewTaskToReadyList+0xbc>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d109      	bne.n	8007502 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074ee:	4a27      	ldr	r2, [pc, #156]	@ (800758c <prvAddNewTaskToReadyList+0xbc>)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074f4:	4b24      	ldr	r3, [pc, #144]	@ (8007588 <prvAddNewTaskToReadyList+0xb8>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d110      	bne.n	800751e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80074fc:	f000 fb0e 	bl	8007b1c <prvInitialiseTaskLists>
 8007500:	e00d      	b.n	800751e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007502:	4b23      	ldr	r3, [pc, #140]	@ (8007590 <prvAddNewTaskToReadyList+0xc0>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d109      	bne.n	800751e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800750a:	4b20      	ldr	r3, [pc, #128]	@ (800758c <prvAddNewTaskToReadyList+0xbc>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007514:	429a      	cmp	r2, r3
 8007516:	d802      	bhi.n	800751e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007518:	4a1c      	ldr	r2, [pc, #112]	@ (800758c <prvAddNewTaskToReadyList+0xbc>)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800751e:	4b1d      	ldr	r3, [pc, #116]	@ (8007594 <prvAddNewTaskToReadyList+0xc4>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3301      	adds	r3, #1
 8007524:	4a1b      	ldr	r2, [pc, #108]	@ (8007594 <prvAddNewTaskToReadyList+0xc4>)
 8007526:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752c:	2201      	movs	r2, #1
 800752e:	409a      	lsls	r2, r3
 8007530:	4b19      	ldr	r3, [pc, #100]	@ (8007598 <prvAddNewTaskToReadyList+0xc8>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4313      	orrs	r3, r2
 8007536:	4a18      	ldr	r2, [pc, #96]	@ (8007598 <prvAddNewTaskToReadyList+0xc8>)
 8007538:	6013      	str	r3, [r2, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800753e:	4613      	mov	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4413      	add	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4a15      	ldr	r2, [pc, #84]	@ (800759c <prvAddNewTaskToReadyList+0xcc>)
 8007548:	441a      	add	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	3304      	adds	r3, #4
 800754e:	4619      	mov	r1, r3
 8007550:	4610      	mov	r0, r2
 8007552:	f7ff fdac 	bl	80070ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007556:	f000 fe41 	bl	80081dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800755a:	4b0d      	ldr	r3, [pc, #52]	@ (8007590 <prvAddNewTaskToReadyList+0xc0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00e      	beq.n	8007580 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007562:	4b0a      	ldr	r3, [pc, #40]	@ (800758c <prvAddNewTaskToReadyList+0xbc>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756c:	429a      	cmp	r2, r3
 800756e:	d207      	bcs.n	8007580 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007570:	4b0b      	ldr	r3, [pc, #44]	@ (80075a0 <prvAddNewTaskToReadyList+0xd0>)
 8007572:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007576:	601a      	str	r2, [r3, #0]
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007580:	bf00      	nop
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	20001ea4 	.word	0x20001ea4
 800758c:	20001da4 	.word	0x20001da4
 8007590:	20001eb0 	.word	0x20001eb0
 8007594:	20001ec0 	.word	0x20001ec0
 8007598:	20001eac 	.word	0x20001eac
 800759c:	20001da8 	.word	0x20001da8
 80075a0:	e000ed04 	.word	0xe000ed04

080075a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075ac:	2300      	movs	r3, #0
 80075ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d018      	beq.n	80075e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075b6:	4b14      	ldr	r3, [pc, #80]	@ (8007608 <vTaskDelay+0x64>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00b      	beq.n	80075d6 <vTaskDelay+0x32>
	__asm volatile
 80075be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	60bb      	str	r3, [r7, #8]
}
 80075d0:	bf00      	nop
 80075d2:	bf00      	nop
 80075d4:	e7fd      	b.n	80075d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80075d6:	f000 f863 	bl	80076a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80075da:	2100      	movs	r1, #0
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fc35 	bl	8007e4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80075e2:	f000 f86b 	bl	80076bc <xTaskResumeAll>
 80075e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d107      	bne.n	80075fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80075ee:	4b07      	ldr	r3, [pc, #28]	@ (800760c <vTaskDelay+0x68>)
 80075f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075fe:	bf00      	nop
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20001ecc 	.word	0x20001ecc
 800760c:	e000ed04 	.word	0xe000ed04

08007610 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8007616:	4b1c      	ldr	r3, [pc, #112]	@ (8007688 <vTaskStartScheduler+0x78>)
 8007618:	9301      	str	r3, [sp, #4]
 800761a:	2300      	movs	r3, #0
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	2300      	movs	r3, #0
 8007620:	2280      	movs	r2, #128	@ 0x80
 8007622:	491a      	ldr	r1, [pc, #104]	@ (800768c <vTaskStartScheduler+0x7c>)
 8007624:	481a      	ldr	r0, [pc, #104]	@ (8007690 <vTaskStartScheduler+0x80>)
 8007626:	f7ff fe89 	bl	800733c <xTaskCreate>
 800762a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d116      	bne.n	8007660 <vTaskStartScheduler+0x50>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	60bb      	str	r3, [r7, #8]
}
 8007644:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007646:	4b13      	ldr	r3, [pc, #76]	@ (8007694 <vTaskStartScheduler+0x84>)
 8007648:	f04f 32ff 	mov.w	r2, #4294967295
 800764c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800764e:	4b12      	ldr	r3, [pc, #72]	@ (8007698 <vTaskStartScheduler+0x88>)
 8007650:	2201      	movs	r2, #1
 8007652:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007654:	4b11      	ldr	r3, [pc, #68]	@ (800769c <vTaskStartScheduler+0x8c>)
 8007656:	2200      	movs	r2, #0
 8007658:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800765a:	f000 fce9 	bl	8008030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800765e:	e00f      	b.n	8007680 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007666:	d10b      	bne.n	8007680 <vTaskStartScheduler+0x70>
	__asm volatile
 8007668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	607b      	str	r3, [r7, #4]
}
 800767a:	bf00      	nop
 800767c:	bf00      	nop
 800767e:	e7fd      	b.n	800767c <vTaskStartScheduler+0x6c>
}
 8007680:	bf00      	nop
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	20001ec8 	.word	0x20001ec8
 800768c:	0800d41c 	.word	0x0800d41c
 8007690:	08007aed 	.word	0x08007aed
 8007694:	20001ec4 	.word	0x20001ec4
 8007698:	20001eb0 	.word	0x20001eb0
 800769c:	20001ea8 	.word	0x20001ea8

080076a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076a0:	b480      	push	{r7}
 80076a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80076a4:	4b04      	ldr	r3, [pc, #16]	@ (80076b8 <vTaskSuspendAll+0x18>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3301      	adds	r3, #1
 80076aa:	4a03      	ldr	r2, [pc, #12]	@ (80076b8 <vTaskSuspendAll+0x18>)
 80076ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80076ae:	bf00      	nop
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	20001ecc 	.word	0x20001ecc

080076bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80076c6:	2300      	movs	r3, #0
 80076c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80076ca:	4b42      	ldr	r3, [pc, #264]	@ (80077d4 <xTaskResumeAll+0x118>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10b      	bne.n	80076ea <xTaskResumeAll+0x2e>
	__asm volatile
 80076d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	603b      	str	r3, [r7, #0]
}
 80076e4:	bf00      	nop
 80076e6:	bf00      	nop
 80076e8:	e7fd      	b.n	80076e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80076ea:	f000 fd45 	bl	8008178 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076ee:	4b39      	ldr	r3, [pc, #228]	@ (80077d4 <xTaskResumeAll+0x118>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3b01      	subs	r3, #1
 80076f4:	4a37      	ldr	r2, [pc, #220]	@ (80077d4 <xTaskResumeAll+0x118>)
 80076f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076f8:	4b36      	ldr	r3, [pc, #216]	@ (80077d4 <xTaskResumeAll+0x118>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d161      	bne.n	80077c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007700:	4b35      	ldr	r3, [pc, #212]	@ (80077d8 <xTaskResumeAll+0x11c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d05d      	beq.n	80077c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007708:	e02e      	b.n	8007768 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800770a:	4b34      	ldr	r3, [pc, #208]	@ (80077dc <xTaskResumeAll+0x120>)
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	3318      	adds	r3, #24
 8007716:	4618      	mov	r0, r3
 8007718:	f7ff fd26 	bl	8007168 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	3304      	adds	r3, #4
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff fd21 	bl	8007168 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772a:	2201      	movs	r2, #1
 800772c:	409a      	lsls	r2, r3
 800772e:	4b2c      	ldr	r3, [pc, #176]	@ (80077e0 <xTaskResumeAll+0x124>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4313      	orrs	r3, r2
 8007734:	4a2a      	ldr	r2, [pc, #168]	@ (80077e0 <xTaskResumeAll+0x124>)
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800773c:	4613      	mov	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4a27      	ldr	r2, [pc, #156]	@ (80077e4 <xTaskResumeAll+0x128>)
 8007746:	441a      	add	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3304      	adds	r3, #4
 800774c:	4619      	mov	r1, r3
 800774e:	4610      	mov	r0, r2
 8007750:	f7ff fcad 	bl	80070ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007758:	4b23      	ldr	r3, [pc, #140]	@ (80077e8 <xTaskResumeAll+0x12c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775e:	429a      	cmp	r2, r3
 8007760:	d302      	bcc.n	8007768 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007762:	4b22      	ldr	r3, [pc, #136]	@ (80077ec <xTaskResumeAll+0x130>)
 8007764:	2201      	movs	r2, #1
 8007766:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007768:	4b1c      	ldr	r3, [pc, #112]	@ (80077dc <xTaskResumeAll+0x120>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1cc      	bne.n	800770a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007776:	f000 fa4f 	bl	8007c18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800777a:	4b1d      	ldr	r3, [pc, #116]	@ (80077f0 <xTaskResumeAll+0x134>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d010      	beq.n	80077a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007786:	f000 f837 	bl	80077f8 <xTaskIncrementTick>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007790:	4b16      	ldr	r3, [pc, #88]	@ (80077ec <xTaskResumeAll+0x130>)
 8007792:	2201      	movs	r2, #1
 8007794:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	3b01      	subs	r3, #1
 800779a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1f1      	bne.n	8007786 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80077a2:	4b13      	ldr	r3, [pc, #76]	@ (80077f0 <xTaskResumeAll+0x134>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077a8:	4b10      	ldr	r3, [pc, #64]	@ (80077ec <xTaskResumeAll+0x130>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d009      	beq.n	80077c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80077b0:	2301      	movs	r3, #1
 80077b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80077b4:	4b0f      	ldr	r3, [pc, #60]	@ (80077f4 <xTaskResumeAll+0x138>)
 80077b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077ba:	601a      	str	r2, [r3, #0]
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077c4:	f000 fd0a 	bl	80081dc <vPortExitCritical>

	return xAlreadyYielded;
 80077c8:	68bb      	ldr	r3, [r7, #8]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	20001ecc 	.word	0x20001ecc
 80077d8:	20001ea4 	.word	0x20001ea4
 80077dc:	20001e64 	.word	0x20001e64
 80077e0:	20001eac 	.word	0x20001eac
 80077e4:	20001da8 	.word	0x20001da8
 80077e8:	20001da4 	.word	0x20001da4
 80077ec:	20001eb8 	.word	0x20001eb8
 80077f0:	20001eb4 	.word	0x20001eb4
 80077f4:	e000ed04 	.word	0xe000ed04

080077f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80077fe:	2300      	movs	r3, #0
 8007800:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007802:	4b4f      	ldr	r3, [pc, #316]	@ (8007940 <xTaskIncrementTick+0x148>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	f040 808f 	bne.w	800792a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800780c:	4b4d      	ldr	r3, [pc, #308]	@ (8007944 <xTaskIncrementTick+0x14c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3301      	adds	r3, #1
 8007812:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007814:	4a4b      	ldr	r2, [pc, #300]	@ (8007944 <xTaskIncrementTick+0x14c>)
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d121      	bne.n	8007864 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007820:	4b49      	ldr	r3, [pc, #292]	@ (8007948 <xTaskIncrementTick+0x150>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00b      	beq.n	8007842 <xTaskIncrementTick+0x4a>
	__asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782e:	f383 8811 	msr	BASEPRI, r3
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	603b      	str	r3, [r7, #0]
}
 800783c:	bf00      	nop
 800783e:	bf00      	nop
 8007840:	e7fd      	b.n	800783e <xTaskIncrementTick+0x46>
 8007842:	4b41      	ldr	r3, [pc, #260]	@ (8007948 <xTaskIncrementTick+0x150>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	4b40      	ldr	r3, [pc, #256]	@ (800794c <xTaskIncrementTick+0x154>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a3e      	ldr	r2, [pc, #248]	@ (8007948 <xTaskIncrementTick+0x150>)
 800784e:	6013      	str	r3, [r2, #0]
 8007850:	4a3e      	ldr	r2, [pc, #248]	@ (800794c <xTaskIncrementTick+0x154>)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6013      	str	r3, [r2, #0]
 8007856:	4b3e      	ldr	r3, [pc, #248]	@ (8007950 <xTaskIncrementTick+0x158>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3301      	adds	r3, #1
 800785c:	4a3c      	ldr	r2, [pc, #240]	@ (8007950 <xTaskIncrementTick+0x158>)
 800785e:	6013      	str	r3, [r2, #0]
 8007860:	f000 f9da 	bl	8007c18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007864:	4b3b      	ldr	r3, [pc, #236]	@ (8007954 <xTaskIncrementTick+0x15c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	429a      	cmp	r2, r3
 800786c:	d348      	bcc.n	8007900 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800786e:	4b36      	ldr	r3, [pc, #216]	@ (8007948 <xTaskIncrementTick+0x150>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d104      	bne.n	8007882 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007878:	4b36      	ldr	r3, [pc, #216]	@ (8007954 <xTaskIncrementTick+0x15c>)
 800787a:	f04f 32ff 	mov.w	r2, #4294967295
 800787e:	601a      	str	r2, [r3, #0]
					break;
 8007880:	e03e      	b.n	8007900 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007882:	4b31      	ldr	r3, [pc, #196]	@ (8007948 <xTaskIncrementTick+0x150>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	429a      	cmp	r2, r3
 8007898:	d203      	bcs.n	80078a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800789a:	4a2e      	ldr	r2, [pc, #184]	@ (8007954 <xTaskIncrementTick+0x15c>)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078a0:	e02e      	b.n	8007900 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	3304      	adds	r3, #4
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff fc5e 	bl	8007168 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d004      	beq.n	80078be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	3318      	adds	r3, #24
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7ff fc55 	bl	8007168 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c2:	2201      	movs	r2, #1
 80078c4:	409a      	lsls	r2, r3
 80078c6:	4b24      	ldr	r3, [pc, #144]	@ (8007958 <xTaskIncrementTick+0x160>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	4a22      	ldr	r2, [pc, #136]	@ (8007958 <xTaskIncrementTick+0x160>)
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078d4:	4613      	mov	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4a1f      	ldr	r2, [pc, #124]	@ (800795c <xTaskIncrementTick+0x164>)
 80078de:	441a      	add	r2, r3
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	3304      	adds	r3, #4
 80078e4:	4619      	mov	r1, r3
 80078e6:	4610      	mov	r0, r2
 80078e8:	f7ff fbe1 	bl	80070ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f0:	4b1b      	ldr	r3, [pc, #108]	@ (8007960 <xTaskIncrementTick+0x168>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d3b9      	bcc.n	800786e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80078fa:	2301      	movs	r3, #1
 80078fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078fe:	e7b6      	b.n	800786e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007900:	4b17      	ldr	r3, [pc, #92]	@ (8007960 <xTaskIncrementTick+0x168>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007906:	4915      	ldr	r1, [pc, #84]	@ (800795c <xTaskIncrementTick+0x164>)
 8007908:	4613      	mov	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	440b      	add	r3, r1
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d901      	bls.n	800791c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007918:	2301      	movs	r3, #1
 800791a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800791c:	4b11      	ldr	r3, [pc, #68]	@ (8007964 <xTaskIncrementTick+0x16c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d007      	beq.n	8007934 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007924:	2301      	movs	r3, #1
 8007926:	617b      	str	r3, [r7, #20]
 8007928:	e004      	b.n	8007934 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800792a:	4b0f      	ldr	r3, [pc, #60]	@ (8007968 <xTaskIncrementTick+0x170>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3301      	adds	r3, #1
 8007930:	4a0d      	ldr	r2, [pc, #52]	@ (8007968 <xTaskIncrementTick+0x170>)
 8007932:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007934:	697b      	ldr	r3, [r7, #20]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3718      	adds	r7, #24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20001ecc 	.word	0x20001ecc
 8007944:	20001ea8 	.word	0x20001ea8
 8007948:	20001e5c 	.word	0x20001e5c
 800794c:	20001e60 	.word	0x20001e60
 8007950:	20001ebc 	.word	0x20001ebc
 8007954:	20001ec4 	.word	0x20001ec4
 8007958:	20001eac 	.word	0x20001eac
 800795c:	20001da8 	.word	0x20001da8
 8007960:	20001da4 	.word	0x20001da4
 8007964:	20001eb8 	.word	0x20001eb8
 8007968:	20001eb4 	.word	0x20001eb4

0800796c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800796c:	b480      	push	{r7}
 800796e:	b087      	sub	sp, #28
 8007970:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007972:	4b27      	ldr	r3, [pc, #156]	@ (8007a10 <vTaskSwitchContext+0xa4>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d003      	beq.n	8007982 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800797a:	4b26      	ldr	r3, [pc, #152]	@ (8007a14 <vTaskSwitchContext+0xa8>)
 800797c:	2201      	movs	r2, #1
 800797e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007980:	e040      	b.n	8007a04 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007982:	4b24      	ldr	r3, [pc, #144]	@ (8007a14 <vTaskSwitchContext+0xa8>)
 8007984:	2200      	movs	r2, #0
 8007986:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007988:	4b23      	ldr	r3, [pc, #140]	@ (8007a18 <vTaskSwitchContext+0xac>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	fab3 f383 	clz	r3, r3
 8007994:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007996:	7afb      	ldrb	r3, [r7, #11]
 8007998:	f1c3 031f 	rsb	r3, r3, #31
 800799c:	617b      	str	r3, [r7, #20]
 800799e:	491f      	ldr	r1, [pc, #124]	@ (8007a1c <vTaskSwitchContext+0xb0>)
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	4613      	mov	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	440b      	add	r3, r1
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10b      	bne.n	80079ca <vTaskSwitchContext+0x5e>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	607b      	str	r3, [r7, #4]
}
 80079c4:	bf00      	nop
 80079c6:	bf00      	nop
 80079c8:	e7fd      	b.n	80079c6 <vTaskSwitchContext+0x5a>
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	4613      	mov	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4a11      	ldr	r2, [pc, #68]	@ (8007a1c <vTaskSwitchContext+0xb0>)
 80079d6:	4413      	add	r3, r2
 80079d8:	613b      	str	r3, [r7, #16]
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	605a      	str	r2, [r3, #4]
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	3308      	adds	r3, #8
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d104      	bne.n	80079fa <vTaskSwitchContext+0x8e>
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	605a      	str	r2, [r3, #4]
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	4a07      	ldr	r2, [pc, #28]	@ (8007a20 <vTaskSwitchContext+0xb4>)
 8007a02:	6013      	str	r3, [r2, #0]
}
 8007a04:	bf00      	nop
 8007a06:	371c      	adds	r7, #28
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	20001ecc 	.word	0x20001ecc
 8007a14:	20001eb8 	.word	0x20001eb8
 8007a18:	20001eac 	.word	0x20001eac
 8007a1c:	20001da8 	.word	0x20001da8
 8007a20:	20001da4 	.word	0x20001da4

08007a24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10b      	bne.n	8007a52 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3e:	f383 8811 	msr	BASEPRI, r3
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	f3bf 8f4f 	dsb	sy
 8007a4a:	60fb      	str	r3, [r7, #12]
}
 8007a4c:	bf00      	nop
 8007a4e:	bf00      	nop
 8007a50:	e7fd      	b.n	8007a4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	3318      	adds	r3, #24
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7ff fb86 	bl	8007168 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ad4 <xTaskRemoveFromEventList+0xb0>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d11c      	bne.n	8007a9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	3304      	adds	r3, #4
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff fb7d 	bl	8007168 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a72:	2201      	movs	r2, #1
 8007a74:	409a      	lsls	r2, r3
 8007a76:	4b18      	ldr	r3, [pc, #96]	@ (8007ad8 <xTaskRemoveFromEventList+0xb4>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	4a16      	ldr	r2, [pc, #88]	@ (8007ad8 <xTaskRemoveFromEventList+0xb4>)
 8007a7e:	6013      	str	r3, [r2, #0]
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a84:	4613      	mov	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4a13      	ldr	r2, [pc, #76]	@ (8007adc <xTaskRemoveFromEventList+0xb8>)
 8007a8e:	441a      	add	r2, r3
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	3304      	adds	r3, #4
 8007a94:	4619      	mov	r1, r3
 8007a96:	4610      	mov	r0, r2
 8007a98:	f7ff fb09 	bl	80070ae <vListInsertEnd>
 8007a9c:	e005      	b.n	8007aaa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	3318      	adds	r3, #24
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	480e      	ldr	r0, [pc, #56]	@ (8007ae0 <xTaskRemoveFromEventList+0xbc>)
 8007aa6:	f7ff fb02 	bl	80070ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aae:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae4 <xTaskRemoveFromEventList+0xc0>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d905      	bls.n	8007ac4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007abc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae8 <xTaskRemoveFromEventList+0xc4>)
 8007abe:	2201      	movs	r2, #1
 8007ac0:	601a      	str	r2, [r3, #0]
 8007ac2:	e001      	b.n	8007ac8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ac8:	697b      	ldr	r3, [r7, #20]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20001ecc 	.word	0x20001ecc
 8007ad8:	20001eac 	.word	0x20001eac
 8007adc:	20001da8 	.word	0x20001da8
 8007ae0:	20001e64 	.word	0x20001e64
 8007ae4:	20001da4 	.word	0x20001da4
 8007ae8:	20001eb8 	.word	0x20001eb8

08007aec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007af4:	f000 f852 	bl	8007b9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007af8:	4b06      	ldr	r3, [pc, #24]	@ (8007b14 <prvIdleTask+0x28>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d9f9      	bls.n	8007af4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b00:	4b05      	ldr	r3, [pc, #20]	@ (8007b18 <prvIdleTask+0x2c>)
 8007b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b06:	601a      	str	r2, [r3, #0]
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b10:	e7f0      	b.n	8007af4 <prvIdleTask+0x8>
 8007b12:	bf00      	nop
 8007b14:	20001da8 	.word	0x20001da8
 8007b18:	e000ed04 	.word	0xe000ed04

08007b1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b22:	2300      	movs	r3, #0
 8007b24:	607b      	str	r3, [r7, #4]
 8007b26:	e00c      	b.n	8007b42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4413      	add	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4a12      	ldr	r2, [pc, #72]	@ (8007b7c <prvInitialiseTaskLists+0x60>)
 8007b34:	4413      	add	r3, r2
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7ff fa8c 	bl	8007054 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	607b      	str	r3, [r7, #4]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b06      	cmp	r3, #6
 8007b46:	d9ef      	bls.n	8007b28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b48:	480d      	ldr	r0, [pc, #52]	@ (8007b80 <prvInitialiseTaskLists+0x64>)
 8007b4a:	f7ff fa83 	bl	8007054 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b4e:	480d      	ldr	r0, [pc, #52]	@ (8007b84 <prvInitialiseTaskLists+0x68>)
 8007b50:	f7ff fa80 	bl	8007054 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b54:	480c      	ldr	r0, [pc, #48]	@ (8007b88 <prvInitialiseTaskLists+0x6c>)
 8007b56:	f7ff fa7d 	bl	8007054 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b5a:	480c      	ldr	r0, [pc, #48]	@ (8007b8c <prvInitialiseTaskLists+0x70>)
 8007b5c:	f7ff fa7a 	bl	8007054 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b60:	480b      	ldr	r0, [pc, #44]	@ (8007b90 <prvInitialiseTaskLists+0x74>)
 8007b62:	f7ff fa77 	bl	8007054 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b66:	4b0b      	ldr	r3, [pc, #44]	@ (8007b94 <prvInitialiseTaskLists+0x78>)
 8007b68:	4a05      	ldr	r2, [pc, #20]	@ (8007b80 <prvInitialiseTaskLists+0x64>)
 8007b6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b98 <prvInitialiseTaskLists+0x7c>)
 8007b6e:	4a05      	ldr	r2, [pc, #20]	@ (8007b84 <prvInitialiseTaskLists+0x68>)
 8007b70:	601a      	str	r2, [r3, #0]
}
 8007b72:	bf00      	nop
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20001da8 	.word	0x20001da8
 8007b80:	20001e34 	.word	0x20001e34
 8007b84:	20001e48 	.word	0x20001e48
 8007b88:	20001e64 	.word	0x20001e64
 8007b8c:	20001e78 	.word	0x20001e78
 8007b90:	20001e90 	.word	0x20001e90
 8007b94:	20001e5c 	.word	0x20001e5c
 8007b98:	20001e60 	.word	0x20001e60

08007b9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ba2:	e019      	b.n	8007bd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ba4:	f000 fae8 	bl	8008178 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ba8:	4b10      	ldr	r3, [pc, #64]	@ (8007bec <prvCheckTasksWaitingTermination+0x50>)
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7ff fad7 	bl	8007168 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007bba:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf0 <prvCheckTasksWaitingTermination+0x54>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8007bf0 <prvCheckTasksWaitingTermination+0x54>)
 8007bc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf4 <prvCheckTasksWaitingTermination+0x58>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	4a0a      	ldr	r2, [pc, #40]	@ (8007bf4 <prvCheckTasksWaitingTermination+0x58>)
 8007bcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007bce:	f000 fb05 	bl	80081dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f810 	bl	8007bf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bd8:	4b06      	ldr	r3, [pc, #24]	@ (8007bf4 <prvCheckTasksWaitingTermination+0x58>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1e1      	bne.n	8007ba4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007be0:	bf00      	nop
 8007be2:	bf00      	nop
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	20001e78 	.word	0x20001e78
 8007bf0:	20001ea4 	.word	0x20001ea4
 8007bf4:	20001e8c 	.word	0x20001e8c

08007bf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c04:	4618      	mov	r0, r3
 8007c06:	f000 fca7 	bl	8008558 <vPortFree>
			vPortFree( pxTCB );
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fca4 	bl	8008558 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c10:	bf00      	nop
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8007c50 <prvResetNextTaskUnblockTime+0x38>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d104      	bne.n	8007c32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c28:	4b0a      	ldr	r3, [pc, #40]	@ (8007c54 <prvResetNextTaskUnblockTime+0x3c>)
 8007c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c30:	e008      	b.n	8007c44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c32:	4b07      	ldr	r3, [pc, #28]	@ (8007c50 <prvResetNextTaskUnblockTime+0x38>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	4a04      	ldr	r2, [pc, #16]	@ (8007c54 <prvResetNextTaskUnblockTime+0x3c>)
 8007c42:	6013      	str	r3, [r2, #0]
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	20001e5c 	.word	0x20001e5c
 8007c54:	20001ec4 	.word	0x20001ec4

08007c58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c8c <xTaskGetSchedulerState+0x34>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d102      	bne.n	8007c6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c66:	2301      	movs	r3, #1
 8007c68:	607b      	str	r3, [r7, #4]
 8007c6a:	e008      	b.n	8007c7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c6c:	4b08      	ldr	r3, [pc, #32]	@ (8007c90 <xTaskGetSchedulerState+0x38>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d102      	bne.n	8007c7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c74:	2302      	movs	r3, #2
 8007c76:	607b      	str	r3, [r7, #4]
 8007c78:	e001      	b.n	8007c7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c7e:	687b      	ldr	r3, [r7, #4]
	}
 8007c80:	4618      	mov	r0, r3
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	20001eb0 	.word	0x20001eb0
 8007c90:	20001ecc 	.word	0x20001ecc

08007c94 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007c9e:	f000 fa6b 	bl	8008178 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8007d1c <ulTaskNotifyTake+0x88>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d113      	bne.n	8007cd4 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007cac:	4b1b      	ldr	r3, [pc, #108]	@ (8007d1c <ulTaskNotifyTake+0x88>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00b      	beq.n	8007cd4 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	6838      	ldr	r0, [r7, #0]
 8007cc0:	f000 f8c4 	bl	8007e4c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007cc4:	4b16      	ldr	r3, [pc, #88]	@ (8007d20 <ulTaskNotifyTake+0x8c>)
 8007cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cca:	601a      	str	r2, [r3, #0]
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007cd4:	f000 fa82 	bl	80081dc <vPortExitCritical>

		taskENTER_CRITICAL();
 8007cd8:	f000 fa4e 	bl	8008178 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8007d1c <ulTaskNotifyTake+0x88>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ce2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00c      	beq.n	8007d04 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d004      	beq.n	8007cfa <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8007d1c <ulTaskNotifyTake+0x88>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007cf8:	e004      	b.n	8007d04 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007cfa:	4b08      	ldr	r3, [pc, #32]	@ (8007d1c <ulTaskNotifyTake+0x88>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	3a01      	subs	r2, #1
 8007d02:	64da      	str	r2, [r3, #76]	@ 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d04:	4b05      	ldr	r3, [pc, #20]	@ (8007d1c <ulTaskNotifyTake+0x88>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 8007d0e:	f000 fa65 	bl	80081dc <vPortExitCritical>

		return ulReturn;
 8007d12:	68fb      	ldr	r3, [r7, #12]
	}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20001da4 	.word	0x20001da4
 8007d20:	e000ed04 	.word	0xe000ed04

08007d24 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08a      	sub	sp, #40	@ 0x28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10b      	bne.n	8007d4c <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8007d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	61bb      	str	r3, [r7, #24]
}
 8007d46:	bf00      	nop
 8007d48:	bf00      	nop
 8007d4a:	e7fd      	b.n	8007d48 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d4c:	f000 faf4 	bl	8008338 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	627b      	str	r3, [r7, #36]	@ 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d54:	f3ef 8211 	mrs	r2, BASEPRI
 8007d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	617a      	str	r2, [r7, #20]
 8007d6a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d6c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d6e:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007d76:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8007d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d84:	1c5a      	adds	r2, r3, #1
 8007d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d88:	64da      	str	r2, [r3, #76]	@ 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007d8a:	7ffb      	ldrb	r3, [r7, #31]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d146      	bne.n	8007e1e <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00b      	beq.n	8007db0 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8007d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d9c:	f383 8811 	msr	BASEPRI, r3
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	60fb      	str	r3, [r7, #12]
}
 8007daa:	bf00      	nop
 8007dac:	bf00      	nop
 8007dae:	e7fd      	b.n	8007dac <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007db0:	4b20      	ldr	r3, [pc, #128]	@ (8007e34 <vTaskNotifyGiveFromISR+0x110>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d11c      	bne.n	8007df2 <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dba:	3304      	adds	r3, #4
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7ff f9d3 	bl	8007168 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	409a      	lsls	r2, r3
 8007dca:	4b1b      	ldr	r3, [pc, #108]	@ (8007e38 <vTaskNotifyGiveFromISR+0x114>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	4a19      	ldr	r2, [pc, #100]	@ (8007e38 <vTaskNotifyGiveFromISR+0x114>)
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dd8:	4613      	mov	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4a16      	ldr	r2, [pc, #88]	@ (8007e3c <vTaskNotifyGiveFromISR+0x118>)
 8007de2:	441a      	add	r2, r3
 8007de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de6:	3304      	adds	r3, #4
 8007de8:	4619      	mov	r1, r3
 8007dea:	4610      	mov	r0, r2
 8007dec:	f7ff f95f 	bl	80070ae <vListInsertEnd>
 8007df0:	e005      	b.n	8007dfe <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df4:	3318      	adds	r3, #24
 8007df6:	4619      	mov	r1, r3
 8007df8:	4811      	ldr	r0, [pc, #68]	@ (8007e40 <vTaskNotifyGiveFromISR+0x11c>)
 8007dfa:	f7ff f958 	bl	80070ae <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e02:	4b10      	ldr	r3, [pc, #64]	@ (8007e44 <vTaskNotifyGiveFromISR+0x120>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d908      	bls.n	8007e1e <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	2201      	movs	r2, #1
 8007e16:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007e18:	4b0b      	ldr	r3, [pc, #44]	@ (8007e48 <vTaskNotifyGiveFromISR+0x124>)
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e28:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8007e2a:	bf00      	nop
 8007e2c:	3728      	adds	r7, #40	@ 0x28
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	20001ecc 	.word	0x20001ecc
 8007e38:	20001eac 	.word	0x20001eac
 8007e3c:	20001da8 	.word	0x20001da8
 8007e40:	20001e64 	.word	0x20001e64
 8007e44:	20001da4 	.word	0x20001da4
 8007e48:	20001eb8 	.word	0x20001eb8

08007e4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e56:	4b29      	ldr	r3, [pc, #164]	@ (8007efc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e5c:	4b28      	ldr	r3, [pc, #160]	@ (8007f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3304      	adds	r3, #4
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7ff f980 	bl	8007168 <uxListRemove>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10b      	bne.n	8007e86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007e6e:	4b24      	ldr	r3, [pc, #144]	@ (8007f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e74:	2201      	movs	r2, #1
 8007e76:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7a:	43da      	mvns	r2, r3
 8007e7c:	4b21      	ldr	r3, [pc, #132]	@ (8007f04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4013      	ands	r3, r2
 8007e82:	4a20      	ldr	r2, [pc, #128]	@ (8007f04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8c:	d10a      	bne.n	8007ea4 <prvAddCurrentTaskToDelayedList+0x58>
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d007      	beq.n	8007ea4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e94:	4b1a      	ldr	r3, [pc, #104]	@ (8007f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	3304      	adds	r3, #4
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	481a      	ldr	r0, [pc, #104]	@ (8007f08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007e9e:	f7ff f906 	bl	80070ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ea2:	e026      	b.n	8007ef2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007eac:	4b14      	ldr	r3, [pc, #80]	@ (8007f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d209      	bcs.n	8007ed0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ebc:	4b13      	ldr	r3, [pc, #76]	@ (8007f0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8007f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	4610      	mov	r0, r2
 8007eca:	f7ff f914 	bl	80070f6 <vListInsert>
}
 8007ece:	e010      	b.n	8007ef2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8007f10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8007f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	3304      	adds	r3, #4
 8007eda:	4619      	mov	r1, r3
 8007edc:	4610      	mov	r0, r2
 8007ede:	f7ff f90a 	bl	80070f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8007f14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d202      	bcs.n	8007ef2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007eec:	4a09      	ldr	r2, [pc, #36]	@ (8007f14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	6013      	str	r3, [r2, #0]
}
 8007ef2:	bf00      	nop
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	20001ea8 	.word	0x20001ea8
 8007f00:	20001da4 	.word	0x20001da4
 8007f04:	20001eac 	.word	0x20001eac
 8007f08:	20001e90 	.word	0x20001e90
 8007f0c:	20001e60 	.word	0x20001e60
 8007f10:	20001e5c 	.word	0x20001e5c
 8007f14:	20001ec4 	.word	0x20001ec4

08007f18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	3b04      	subs	r3, #4
 8007f28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007f30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	3b04      	subs	r3, #4
 8007f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f023 0201 	bic.w	r2, r3, #1
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3b04      	subs	r3, #4
 8007f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f48:	4a0c      	ldr	r2, [pc, #48]	@ (8007f7c <pxPortInitialiseStack+0x64>)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	3b14      	subs	r3, #20
 8007f52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	3b04      	subs	r3, #4
 8007f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f06f 0202 	mvn.w	r2, #2
 8007f66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	3b20      	subs	r3, #32
 8007f6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	08007f81 	.word	0x08007f81

08007f80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f8a:	4b13      	ldr	r3, [pc, #76]	@ (8007fd8 <prvTaskExitError+0x58>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f92:	d00b      	beq.n	8007fac <prvTaskExitError+0x2c>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	60fb      	str	r3, [r7, #12]
}
 8007fa6:	bf00      	nop
 8007fa8:	bf00      	nop
 8007faa:	e7fd      	b.n	8007fa8 <prvTaskExitError+0x28>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	60bb      	str	r3, [r7, #8]
}
 8007fbe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007fc0:	bf00      	nop
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d0fc      	beq.n	8007fc2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	2000000c 	.word	0x2000000c
 8007fdc:	00000000 	.word	0x00000000

08007fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007fe0:	4b07      	ldr	r3, [pc, #28]	@ (8008000 <pxCurrentTCBConst2>)
 8007fe2:	6819      	ldr	r1, [r3, #0]
 8007fe4:	6808      	ldr	r0, [r1, #0]
 8007fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fea:	f380 8809 	msr	PSP, r0
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f04f 0000 	mov.w	r0, #0
 8007ff6:	f380 8811 	msr	BASEPRI, r0
 8007ffa:	4770      	bx	lr
 8007ffc:	f3af 8000 	nop.w

08008000 <pxCurrentTCBConst2>:
 8008000:	20001da4 	.word	0x20001da4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop

08008008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008008:	4808      	ldr	r0, [pc, #32]	@ (800802c <prvPortStartFirstTask+0x24>)
 800800a:	6800      	ldr	r0, [r0, #0]
 800800c:	6800      	ldr	r0, [r0, #0]
 800800e:	f380 8808 	msr	MSP, r0
 8008012:	f04f 0000 	mov.w	r0, #0
 8008016:	f380 8814 	msr	CONTROL, r0
 800801a:	b662      	cpsie	i
 800801c:	b661      	cpsie	f
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	df00      	svc	0
 8008028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800802a:	bf00      	nop
 800802c:	e000ed08 	.word	0xe000ed08

08008030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008036:	4b47      	ldr	r3, [pc, #284]	@ (8008154 <xPortStartScheduler+0x124>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a47      	ldr	r2, [pc, #284]	@ (8008158 <xPortStartScheduler+0x128>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d10b      	bne.n	8008058 <xPortStartScheduler+0x28>
	__asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	613b      	str	r3, [r7, #16]
}
 8008052:	bf00      	nop
 8008054:	bf00      	nop
 8008056:	e7fd      	b.n	8008054 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008058:	4b3e      	ldr	r3, [pc, #248]	@ (8008154 <xPortStartScheduler+0x124>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a3f      	ldr	r2, [pc, #252]	@ (800815c <xPortStartScheduler+0x12c>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d10b      	bne.n	800807a <xPortStartScheduler+0x4a>
	__asm volatile
 8008062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	60fb      	str	r3, [r7, #12]
}
 8008074:	bf00      	nop
 8008076:	bf00      	nop
 8008078:	e7fd      	b.n	8008076 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800807a:	4b39      	ldr	r3, [pc, #228]	@ (8008160 <xPortStartScheduler+0x130>)
 800807c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	b2db      	uxtb	r3, r3
 8008084:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	22ff      	movs	r2, #255	@ 0xff
 800808a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	b2db      	uxtb	r3, r3
 8008092:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008094:	78fb      	ldrb	r3, [r7, #3]
 8008096:	b2db      	uxtb	r3, r3
 8008098:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800809c:	b2da      	uxtb	r2, r3
 800809e:	4b31      	ldr	r3, [pc, #196]	@ (8008164 <xPortStartScheduler+0x134>)
 80080a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80080a2:	4b31      	ldr	r3, [pc, #196]	@ (8008168 <xPortStartScheduler+0x138>)
 80080a4:	2207      	movs	r2, #7
 80080a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080a8:	e009      	b.n	80080be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80080aa:	4b2f      	ldr	r3, [pc, #188]	@ (8008168 <xPortStartScheduler+0x138>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3b01      	subs	r3, #1
 80080b0:	4a2d      	ldr	r2, [pc, #180]	@ (8008168 <xPortStartScheduler+0x138>)
 80080b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080b4:	78fb      	ldrb	r3, [r7, #3]
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	005b      	lsls	r3, r3, #1
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080be:	78fb      	ldrb	r3, [r7, #3]
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080c6:	2b80      	cmp	r3, #128	@ 0x80
 80080c8:	d0ef      	beq.n	80080aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080ca:	4b27      	ldr	r3, [pc, #156]	@ (8008168 <xPortStartScheduler+0x138>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f1c3 0307 	rsb	r3, r3, #7
 80080d2:	2b04      	cmp	r3, #4
 80080d4:	d00b      	beq.n	80080ee <xPortStartScheduler+0xbe>
	__asm volatile
 80080d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	60bb      	str	r3, [r7, #8]
}
 80080e8:	bf00      	nop
 80080ea:	bf00      	nop
 80080ec:	e7fd      	b.n	80080ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008168 <xPortStartScheduler+0x138>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	021b      	lsls	r3, r3, #8
 80080f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008168 <xPortStartScheduler+0x138>)
 80080f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008168 <xPortStartScheduler+0x138>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008100:	4a19      	ldr	r2, [pc, #100]	@ (8008168 <xPortStartScheduler+0x138>)
 8008102:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	b2da      	uxtb	r2, r3
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800810c:	4b17      	ldr	r3, [pc, #92]	@ (800816c <xPortStartScheduler+0x13c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a16      	ldr	r2, [pc, #88]	@ (800816c <xPortStartScheduler+0x13c>)
 8008112:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008116:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008118:	4b14      	ldr	r3, [pc, #80]	@ (800816c <xPortStartScheduler+0x13c>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a13      	ldr	r2, [pc, #76]	@ (800816c <xPortStartScheduler+0x13c>)
 800811e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008122:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008124:	f000 f8da 	bl	80082dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008128:	4b11      	ldr	r3, [pc, #68]	@ (8008170 <xPortStartScheduler+0x140>)
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800812e:	f000 f8f9 	bl	8008324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008132:	4b10      	ldr	r3, [pc, #64]	@ (8008174 <xPortStartScheduler+0x144>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a0f      	ldr	r2, [pc, #60]	@ (8008174 <xPortStartScheduler+0x144>)
 8008138:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800813c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800813e:	f7ff ff63 	bl	8008008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008142:	f7ff fc13 	bl	800796c <vTaskSwitchContext>
	prvTaskExitError();
 8008146:	f7ff ff1b 	bl	8007f80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3718      	adds	r7, #24
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	e000ed00 	.word	0xe000ed00
 8008158:	410fc271 	.word	0x410fc271
 800815c:	410fc270 	.word	0x410fc270
 8008160:	e000e400 	.word	0xe000e400
 8008164:	20001ed0 	.word	0x20001ed0
 8008168:	20001ed4 	.word	0x20001ed4
 800816c:	e000ed20 	.word	0xe000ed20
 8008170:	2000000c 	.word	0x2000000c
 8008174:	e000ef34 	.word	0xe000ef34

08008178 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	607b      	str	r3, [r7, #4]
}
 8008190:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008192:	4b10      	ldr	r3, [pc, #64]	@ (80081d4 <vPortEnterCritical+0x5c>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3301      	adds	r3, #1
 8008198:	4a0e      	ldr	r2, [pc, #56]	@ (80081d4 <vPortEnterCritical+0x5c>)
 800819a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800819c:	4b0d      	ldr	r3, [pc, #52]	@ (80081d4 <vPortEnterCritical+0x5c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d110      	bne.n	80081c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081a4:	4b0c      	ldr	r3, [pc, #48]	@ (80081d8 <vPortEnterCritical+0x60>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00b      	beq.n	80081c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	603b      	str	r3, [r7, #0]
}
 80081c0:	bf00      	nop
 80081c2:	bf00      	nop
 80081c4:	e7fd      	b.n	80081c2 <vPortEnterCritical+0x4a>
	}
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	2000000c 	.word	0x2000000c
 80081d8:	e000ed04 	.word	0xe000ed04

080081dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081e2:	4b12      	ldr	r3, [pc, #72]	@ (800822c <vPortExitCritical+0x50>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10b      	bne.n	8008202 <vPortExitCritical+0x26>
	__asm volatile
 80081ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	607b      	str	r3, [r7, #4]
}
 80081fc:	bf00      	nop
 80081fe:	bf00      	nop
 8008200:	e7fd      	b.n	80081fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008202:	4b0a      	ldr	r3, [pc, #40]	@ (800822c <vPortExitCritical+0x50>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	3b01      	subs	r3, #1
 8008208:	4a08      	ldr	r2, [pc, #32]	@ (800822c <vPortExitCritical+0x50>)
 800820a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800820c:	4b07      	ldr	r3, [pc, #28]	@ (800822c <vPortExitCritical+0x50>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d105      	bne.n	8008220 <vPortExitCritical+0x44>
 8008214:	2300      	movs	r3, #0
 8008216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	f383 8811 	msr	BASEPRI, r3
}
 800821e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	2000000c 	.word	0x2000000c

08008230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008230:	f3ef 8009 	mrs	r0, PSP
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	4b15      	ldr	r3, [pc, #84]	@ (8008290 <pxCurrentTCBConst>)
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	f01e 0f10 	tst.w	lr, #16
 8008240:	bf08      	it	eq
 8008242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824a:	6010      	str	r0, [r2, #0]
 800824c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008250:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008254:	f380 8811 	msr	BASEPRI, r0
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f7ff fb84 	bl	800796c <vTaskSwitchContext>
 8008264:	f04f 0000 	mov.w	r0, #0
 8008268:	f380 8811 	msr	BASEPRI, r0
 800826c:	bc09      	pop	{r0, r3}
 800826e:	6819      	ldr	r1, [r3, #0]
 8008270:	6808      	ldr	r0, [r1, #0]
 8008272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008276:	f01e 0f10 	tst.w	lr, #16
 800827a:	bf08      	it	eq
 800827c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008280:	f380 8809 	msr	PSP, r0
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	f3af 8000 	nop.w

08008290 <pxCurrentTCBConst>:
 8008290:	20001da4 	.word	0x20001da4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop

08008298 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
	__asm volatile
 800829e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	607b      	str	r3, [r7, #4]
}
 80082b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082b2:	f7ff faa1 	bl	80077f8 <xTaskIncrementTick>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d003      	beq.n	80082c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082bc:	4b06      	ldr	r3, [pc, #24]	@ (80082d8 <xPortSysTickHandler+0x40>)
 80082be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	2300      	movs	r3, #0
 80082c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	f383 8811 	msr	BASEPRI, r3
}
 80082ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082d0:	bf00      	nop
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	e000ed04 	.word	0xe000ed04

080082dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082dc:	b480      	push	{r7}
 80082de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008310 <vPortSetupTimerInterrupt+0x34>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008314 <vPortSetupTimerInterrupt+0x38>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008318 <vPortSetupTimerInterrupt+0x3c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a0a      	ldr	r2, [pc, #40]	@ (800831c <vPortSetupTimerInterrupt+0x40>)
 80082f2:	fba2 2303 	umull	r2, r3, r2, r3
 80082f6:	099b      	lsrs	r3, r3, #6
 80082f8:	4a09      	ldr	r2, [pc, #36]	@ (8008320 <vPortSetupTimerInterrupt+0x44>)
 80082fa:	3b01      	subs	r3, #1
 80082fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082fe:	4b04      	ldr	r3, [pc, #16]	@ (8008310 <vPortSetupTimerInterrupt+0x34>)
 8008300:	2207      	movs	r2, #7
 8008302:	601a      	str	r2, [r3, #0]
}
 8008304:	bf00      	nop
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	e000e010 	.word	0xe000e010
 8008314:	e000e018 	.word	0xe000e018
 8008318:	20000000 	.word	0x20000000
 800831c:	10624dd3 	.word	0x10624dd3
 8008320:	e000e014 	.word	0xe000e014

08008324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008324:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008334 <vPortEnableVFP+0x10>
 8008328:	6801      	ldr	r1, [r0, #0]
 800832a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800832e:	6001      	str	r1, [r0, #0]
 8008330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008332:	bf00      	nop
 8008334:	e000ed88 	.word	0xe000ed88

08008338 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800833e:	f3ef 8305 	mrs	r3, IPSR
 8008342:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2b0f      	cmp	r3, #15
 8008348:	d915      	bls.n	8008376 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800834a:	4a18      	ldr	r2, [pc, #96]	@ (80083ac <vPortValidateInterruptPriority+0x74>)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	4413      	add	r3, r2
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008354:	4b16      	ldr	r3, [pc, #88]	@ (80083b0 <vPortValidateInterruptPriority+0x78>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	7afa      	ldrb	r2, [r7, #11]
 800835a:	429a      	cmp	r2, r3
 800835c:	d20b      	bcs.n	8008376 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	607b      	str	r3, [r7, #4]
}
 8008370:	bf00      	nop
 8008372:	bf00      	nop
 8008374:	e7fd      	b.n	8008372 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008376:	4b0f      	ldr	r3, [pc, #60]	@ (80083b4 <vPortValidateInterruptPriority+0x7c>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800837e:	4b0e      	ldr	r3, [pc, #56]	@ (80083b8 <vPortValidateInterruptPriority+0x80>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	429a      	cmp	r2, r3
 8008384:	d90b      	bls.n	800839e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	603b      	str	r3, [r7, #0]
}
 8008398:	bf00      	nop
 800839a:	bf00      	nop
 800839c:	e7fd      	b.n	800839a <vPortValidateInterruptPriority+0x62>
	}
 800839e:	bf00      	nop
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	e000e3f0 	.word	0xe000e3f0
 80083b0:	20001ed0 	.word	0x20001ed0
 80083b4:	e000ed0c 	.word	0xe000ed0c
 80083b8:	20001ed4 	.word	0x20001ed4

080083bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b08a      	sub	sp, #40	@ 0x28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083c4:	2300      	movs	r3, #0
 80083c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083c8:	f7ff f96a 	bl	80076a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083cc:	4b5c      	ldr	r3, [pc, #368]	@ (8008540 <pvPortMalloc+0x184>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d101      	bne.n	80083d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083d4:	f000 f924 	bl	8008620 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083d8:	4b5a      	ldr	r3, [pc, #360]	@ (8008544 <pvPortMalloc+0x188>)
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4013      	ands	r3, r2
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f040 8095 	bne.w	8008510 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d01e      	beq.n	800842a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80083ec:	2208      	movs	r2, #8
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4413      	add	r3, r2
 80083f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f003 0307 	and.w	r3, r3, #7
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d015      	beq.n	800842a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f023 0307 	bic.w	r3, r3, #7
 8008404:	3308      	adds	r3, #8
 8008406:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f003 0307 	and.w	r3, r3, #7
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00b      	beq.n	800842a <pvPortMalloc+0x6e>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	617b      	str	r3, [r7, #20]
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop
 8008428:	e7fd      	b.n	8008426 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d06f      	beq.n	8008510 <pvPortMalloc+0x154>
 8008430:	4b45      	ldr	r3, [pc, #276]	@ (8008548 <pvPortMalloc+0x18c>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	429a      	cmp	r2, r3
 8008438:	d86a      	bhi.n	8008510 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800843a:	4b44      	ldr	r3, [pc, #272]	@ (800854c <pvPortMalloc+0x190>)
 800843c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800843e:	4b43      	ldr	r3, [pc, #268]	@ (800854c <pvPortMalloc+0x190>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008444:	e004      	b.n	8008450 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008448:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800844a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	429a      	cmp	r2, r3
 8008458:	d903      	bls.n	8008462 <pvPortMalloc+0xa6>
 800845a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1f1      	bne.n	8008446 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008462:	4b37      	ldr	r3, [pc, #220]	@ (8008540 <pvPortMalloc+0x184>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008468:	429a      	cmp	r2, r3
 800846a:	d051      	beq.n	8008510 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800846c:	6a3b      	ldr	r3, [r7, #32]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2208      	movs	r2, #8
 8008472:	4413      	add	r3, r2
 8008474:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800847e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	1ad2      	subs	r2, r2, r3
 8008486:	2308      	movs	r3, #8
 8008488:	005b      	lsls	r3, r3, #1
 800848a:	429a      	cmp	r2, r3
 800848c:	d920      	bls.n	80084d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800848e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4413      	add	r3, r2
 8008494:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	f003 0307 	and.w	r3, r3, #7
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00b      	beq.n	80084b8 <pvPortMalloc+0xfc>
	__asm volatile
 80084a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	613b      	str	r3, [r7, #16]
}
 80084b2:	bf00      	nop
 80084b4:	bf00      	nop
 80084b6:	e7fd      	b.n	80084b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	1ad2      	subs	r2, r2, r3
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084ca:	69b8      	ldr	r0, [r7, #24]
 80084cc:	f000 f90a 	bl	80086e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084d0:	4b1d      	ldr	r3, [pc, #116]	@ (8008548 <pvPortMalloc+0x18c>)
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	4a1b      	ldr	r2, [pc, #108]	@ (8008548 <pvPortMalloc+0x18c>)
 80084dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084de:	4b1a      	ldr	r3, [pc, #104]	@ (8008548 <pvPortMalloc+0x18c>)
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008550 <pvPortMalloc+0x194>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d203      	bcs.n	80084f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084ea:	4b17      	ldr	r3, [pc, #92]	@ (8008548 <pvPortMalloc+0x18c>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a18      	ldr	r2, [pc, #96]	@ (8008550 <pvPortMalloc+0x194>)
 80084f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f4:	685a      	ldr	r2, [r3, #4]
 80084f6:	4b13      	ldr	r3, [pc, #76]	@ (8008544 <pvPortMalloc+0x188>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	431a      	orrs	r2, r3
 80084fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008502:	2200      	movs	r2, #0
 8008504:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008506:	4b13      	ldr	r3, [pc, #76]	@ (8008554 <pvPortMalloc+0x198>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3301      	adds	r3, #1
 800850c:	4a11      	ldr	r2, [pc, #68]	@ (8008554 <pvPortMalloc+0x198>)
 800850e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008510:	f7ff f8d4 	bl	80076bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00b      	beq.n	8008536 <pvPortMalloc+0x17a>
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	60fb      	str	r3, [r7, #12]
}
 8008530:	bf00      	nop
 8008532:	bf00      	nop
 8008534:	e7fd      	b.n	8008532 <pvPortMalloc+0x176>
	return pvReturn;
 8008536:	69fb      	ldr	r3, [r7, #28]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3728      	adds	r7, #40	@ 0x28
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	200045f0 	.word	0x200045f0
 8008544:	20004604 	.word	0x20004604
 8008548:	200045f4 	.word	0x200045f4
 800854c:	200045e8 	.word	0x200045e8
 8008550:	200045f8 	.word	0x200045f8
 8008554:	200045fc 	.word	0x200045fc

08008558 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d04f      	beq.n	800860a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800856a:	2308      	movs	r3, #8
 800856c:	425b      	negs	r3, r3
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	4413      	add	r3, r2
 8008572:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	4b25      	ldr	r3, [pc, #148]	@ (8008614 <vPortFree+0xbc>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4013      	ands	r3, r2
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10b      	bne.n	800859e <vPortFree+0x46>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	60fb      	str	r3, [r7, #12]
}
 8008598:	bf00      	nop
 800859a:	bf00      	nop
 800859c:	e7fd      	b.n	800859a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00b      	beq.n	80085be <vPortFree+0x66>
	__asm volatile
 80085a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	60bb      	str	r3, [r7, #8]
}
 80085b8:	bf00      	nop
 80085ba:	bf00      	nop
 80085bc:	e7fd      	b.n	80085ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	4b14      	ldr	r3, [pc, #80]	@ (8008614 <vPortFree+0xbc>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4013      	ands	r3, r2
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d01e      	beq.n	800860a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d11a      	bne.n	800860a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	685a      	ldr	r2, [r3, #4]
 80085d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008614 <vPortFree+0xbc>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	43db      	mvns	r3, r3
 80085de:	401a      	ands	r2, r3
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085e4:	f7ff f85c 	bl	80076a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008618 <vPortFree+0xc0>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4413      	add	r3, r2
 80085f2:	4a09      	ldr	r2, [pc, #36]	@ (8008618 <vPortFree+0xc0>)
 80085f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80085f6:	6938      	ldr	r0, [r7, #16]
 80085f8:	f000 f874 	bl	80086e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80085fc:	4b07      	ldr	r3, [pc, #28]	@ (800861c <vPortFree+0xc4>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	3301      	adds	r3, #1
 8008602:	4a06      	ldr	r2, [pc, #24]	@ (800861c <vPortFree+0xc4>)
 8008604:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008606:	f7ff f859 	bl	80076bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800860a:	bf00      	nop
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	20004604 	.word	0x20004604
 8008618:	200045f4 	.word	0x200045f4
 800861c:	20004600 	.word	0x20004600

08008620 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008626:	f242 7310 	movw	r3, #10000	@ 0x2710
 800862a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800862c:	4b27      	ldr	r3, [pc, #156]	@ (80086cc <prvHeapInit+0xac>)
 800862e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f003 0307 	and.w	r3, r3, #7
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00c      	beq.n	8008654 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3307      	adds	r3, #7
 800863e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f023 0307 	bic.w	r3, r3, #7
 8008646:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	4a1f      	ldr	r2, [pc, #124]	@ (80086cc <prvHeapInit+0xac>)
 8008650:	4413      	add	r3, r2
 8008652:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008658:	4a1d      	ldr	r2, [pc, #116]	@ (80086d0 <prvHeapInit+0xb0>)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800865e:	4b1c      	ldr	r3, [pc, #112]	@ (80086d0 <prvHeapInit+0xb0>)
 8008660:	2200      	movs	r2, #0
 8008662:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	4413      	add	r3, r2
 800866a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800866c:	2208      	movs	r2, #8
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	1a9b      	subs	r3, r3, r2
 8008672:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f023 0307 	bic.w	r3, r3, #7
 800867a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	4a15      	ldr	r2, [pc, #84]	@ (80086d4 <prvHeapInit+0xb4>)
 8008680:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008682:	4b14      	ldr	r3, [pc, #80]	@ (80086d4 <prvHeapInit+0xb4>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2200      	movs	r2, #0
 8008688:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800868a:	4b12      	ldr	r3, [pc, #72]	@ (80086d4 <prvHeapInit+0xb4>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2200      	movs	r2, #0
 8008690:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	1ad2      	subs	r2, r2, r3
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086a0:	4b0c      	ldr	r3, [pc, #48]	@ (80086d4 <prvHeapInit+0xb4>)
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	4a0a      	ldr	r2, [pc, #40]	@ (80086d8 <prvHeapInit+0xb8>)
 80086ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	4a09      	ldr	r2, [pc, #36]	@ (80086dc <prvHeapInit+0xbc>)
 80086b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086b8:	4b09      	ldr	r3, [pc, #36]	@ (80086e0 <prvHeapInit+0xc0>)
 80086ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80086be:	601a      	str	r2, [r3, #0]
}
 80086c0:	bf00      	nop
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr
 80086cc:	20001ed8 	.word	0x20001ed8
 80086d0:	200045e8 	.word	0x200045e8
 80086d4:	200045f0 	.word	0x200045f0
 80086d8:	200045f8 	.word	0x200045f8
 80086dc:	200045f4 	.word	0x200045f4
 80086e0:	20004604 	.word	0x20004604

080086e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086ec:	4b28      	ldr	r3, [pc, #160]	@ (8008790 <prvInsertBlockIntoFreeList+0xac>)
 80086ee:	60fb      	str	r3, [r7, #12]
 80086f0:	e002      	b.n	80086f8 <prvInsertBlockIntoFreeList+0x14>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	60fb      	str	r3, [r7, #12]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d8f7      	bhi.n	80086f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	4413      	add	r3, r2
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	429a      	cmp	r2, r3
 8008712:	d108      	bne.n	8008726 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	441a      	add	r2, r3
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	441a      	add	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	429a      	cmp	r2, r3
 8008738:	d118      	bne.n	800876c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	4b15      	ldr	r3, [pc, #84]	@ (8008794 <prvInsertBlockIntoFreeList+0xb0>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	429a      	cmp	r2, r3
 8008744:	d00d      	beq.n	8008762 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	685a      	ldr	r2, [r3, #4]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	441a      	add	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	601a      	str	r2, [r3, #0]
 8008760:	e008      	b.n	8008774 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008762:	4b0c      	ldr	r3, [pc, #48]	@ (8008794 <prvInsertBlockIntoFreeList+0xb0>)
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	601a      	str	r2, [r3, #0]
 800876a:	e003      	b.n	8008774 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	429a      	cmp	r2, r3
 800877a:	d002      	beq.n	8008782 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008782:	bf00      	nop
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	200045e8 	.word	0x200045e8
 8008794:	200045f0 	.word	0x200045f0

08008798 <SPI_Write>:


TaskHandle_t Bump_task = NULL;


void SPI_Write(uint8_t reg, uint8_t value) {
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	460a      	mov	r2, r1
 80087a2:	71fb      	strb	r3, [r7, #7]
 80087a4:	4613      	mov	r3, r2
 80087a6:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg | 0x40;
 80087a8:	79fb      	ldrb	r3, [r7, #7]
 80087aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 80087b2:	79bb      	ldrb	r3, [r7, #6]
 80087b4:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 80087b6:	2200      	movs	r2, #0
 80087b8:	2120      	movs	r1, #32
 80087ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80087be:	f7fa fba9 	bl	8002f14 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
 80087c2:	f107 010c 	add.w	r1, r7, #12
 80087c6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ca:	2202      	movs	r2, #2
 80087cc:	4806      	ldr	r0, [pc, #24]	@ (80087e8 <SPI_Write+0x50>)
 80087ce:	f7fb fc64 	bl	800409a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 80087d2:	2201      	movs	r2, #1
 80087d4:	2120      	movs	r1, #32
 80087d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80087da:	f7fa fb9b 	bl	8002f14 <HAL_GPIO_WritePin>
}
 80087de:	bf00      	nop
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	20001a80 	.word	0x20001a80

080087ec <SPI_Read>:

uint8_t SPI_Read(uint8_t reg) {
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_data = reg | 0x80;
 80087f6:	79fb      	ldrb	r3, [r7, #7]
 80087f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	73fb      	strb	r3, [r7, #15]
	uint8_t rx_data = 0;
 8008800:	2300      	movs	r3, #0
 8008802:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 8008804:	2200      	movs	r2, #0
 8008806:	2120      	movs	r1, #32
 8008808:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800880c:	f7fa fb82 	bl	8002f14 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &tx_data, 1, HAL_MAX_DELAY);
 8008810:	f107 010f 	add.w	r1, r7, #15
 8008814:	f04f 33ff 	mov.w	r3, #4294967295
 8008818:	2201      	movs	r2, #1
 800881a:	480b      	ldr	r0, [pc, #44]	@ (8008848 <SPI_Read+0x5c>)
 800881c:	f7fb fc3d 	bl	800409a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &rx_data, 1, HAL_MAX_DELAY);
 8008820:	f107 010e 	add.w	r1, r7, #14
 8008824:	f04f 33ff 	mov.w	r3, #4294967295
 8008828:	2201      	movs	r2, #1
 800882a:	4807      	ldr	r0, [pc, #28]	@ (8008848 <SPI_Read+0x5c>)
 800882c:	f7fb fdaa 	bl	8004384 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 8008830:	2201      	movs	r2, #1
 8008832:	2120      	movs	r1, #32
 8008834:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008838:	f7fa fb6c 	bl	8002f14 <HAL_GPIO_WritePin>

	return rx_data;
 800883c:	7bbb      	ldrb	r3, [r7, #14]
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	20001a80 	.word	0x20001a80

0800884c <ADXL343_Init>:
	accel_data[2] = (float)raw_accel[2]; // Accélération Z en g

	return HAL_OK;
}

void ADXL343_Init(void) {
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
	uint8_t devid = SPI_Read(ADXL343_REG_DEVID);  // Lire le registre DEVID (0x00)
 8008852:	2000      	movs	r0, #0
 8008854:	f7ff ffca 	bl	80087ec <SPI_Read>
 8008858:	4603      	mov	r3, r0
 800885a:	73fb      	strb	r3, [r7, #15]

	if (devid == 0xE5) {
 800885c:	7bfb      	ldrb	r3, [r7, #15]
 800885e:	2be5      	cmp	r3, #229	@ 0xe5
 8008860:	d13f      	bne.n	80088e2 <ADXL343_Init+0x96>
		// Le composant est détecté, procéder à l'initialisation

		SPI_Write(ADXL343_REG_POWER_CTL, 0x00);  // Appareil en standby
 8008862:	2100      	movs	r1, #0
 8008864:	202d      	movs	r0, #45	@ 0x2d
 8008866:	f7ff ff97 	bl	8008798 <SPI_Write>
		SPI_Write(ADXL343_REG_DATA_FORMAT, 0x00);  // DATA_FORMAT : FULL_RES = 1, RANGE = ±2g
 800886a:	2100      	movs	r1, #0
 800886c:	2031      	movs	r0, #49	@ 0x31
 800886e:	f7ff ff93 	bl	8008798 <SPI_Write>

		//Configuration single tap
		SPI_Write(ADXL343_REG_THRESH_TAP, 50);	// Config seuil choc
 8008872:	2132      	movs	r1, #50	@ 0x32
 8008874:	201d      	movs	r0, #29
 8008876:	f7ff ff8f 	bl	8008798 <SPI_Write>
		SPI_Write(ADXL343_REG_DUR, 15);	// Config durée choc
 800887a:	210f      	movs	r1, #15
 800887c:	2021      	movs	r0, #33	@ 0x21
 800887e:	f7ff ff8b 	bl	8008798 <SPI_Write>
		SPI_Write(ADXL343_REG_LATENT, 0xC8);	// Config latence choc
 8008882:	21c8      	movs	r1, #200	@ 0xc8
 8008884:	2022      	movs	r0, #34	@ 0x22
 8008886:	f7ff ff87 	bl	8008798 <SPI_Write>

		SPI_Write(ADXL343_REG_TAP_AXES, 0x07);	// Activer axe X Y
 800888a:	2107      	movs	r1, #7
 800888c:	202a      	movs	r0, #42	@ 0x2a
 800888e:	f7ff ff83 	bl	8008798 <SPI_Write>
		SPI_Write(ADXL343_REG_BW_RATE, 0x0F);  // Configurer la bande passante
 8008892:	210f      	movs	r1, #15
 8008894:	202c      	movs	r0, #44	@ 0x2c
 8008896:	f7ff ff7f 	bl	8008798 <SPI_Write>

		SPI_Write(ADXL343_REG_INT_MAP, 0x00);	// Configurer pin interruption
 800889a:	2100      	movs	r1, #0
 800889c:	202f      	movs	r0, #47	@ 0x2f
 800889e:	f7ff ff7b 	bl	8008798 <SPI_Write>
		SPI_Write(ADXL343_REG_INT_ENABLE, 0x40);  // Activer interruption
 80088a2:	2140      	movs	r1, #64	@ 0x40
 80088a4:	202e      	movs	r0, #46	@ 0x2e
 80088a6:	f7ff ff77 	bl	8008798 <SPI_Write>
		SPI_Write(ADXL343_REG_POWER_CTL, 0x08);
 80088aa:	2108      	movs	r1, #8
 80088ac:	202d      	movs	r0, #45	@ 0x2d
 80088ae:	f7ff ff73 	bl	8008798 <SPI_Write>
		//Read_Acceleration(float *accel_data);    // Lire les données pour effacer l'interruption

		char *msg = "ADXL343 detecte et initialise !\r\n";
 80088b2:	4b14      	ldr	r3, [pc, #80]	@ (8008904 <ADXL343_Init+0xb8>)
 80088b4:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7f7 fd02 	bl	80002c0 <strlen>
 80088bc:	4603      	mov	r3, r0
 80088be:	b29a      	uxth	r2, r3
 80088c0:	f04f 33ff 	mov.w	r3, #4294967295
 80088c4:	6879      	ldr	r1, [r7, #4]
 80088c6:	4810      	ldr	r0, [pc, #64]	@ (8008908 <ADXL343_Init+0xbc>)
 80088c8:	f7fd fa9a 	bl	8005e00 <HAL_UART_Transmit>
		uint8_t check = SPI_Read(ADXL343_REG_INT_SOURCE);
 80088cc:	2030      	movs	r0, #48	@ 0x30
 80088ce:	f7ff ff8d 	bl	80087ec <SPI_Read>
 80088d2:	4603      	mov	r3, r0
 80088d4:	70fb      	strb	r3, [r7, #3]
		printf("%x\r\n", check);
 80088d6:	78fb      	ldrb	r3, [r7, #3]
 80088d8:	4619      	mov	r1, r3
 80088da:	480c      	ldr	r0, [pc, #48]	@ (800890c <ADXL343_Init+0xc0>)
 80088dc:	f001 f872 	bl	80099c4 <iprintf>
	} else {
		char *error_msg = "Erreur : ADXL343 non detecte !\r\n";
		HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
	}
}
 80088e0:	e00c      	b.n	80088fc <ADXL343_Init+0xb0>
		char *error_msg = "Erreur : ADXL343 non detecte !\r\n";
 80088e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008910 <ADXL343_Init+0xc4>)
 80088e4:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 80088e6:	68b8      	ldr	r0, [r7, #8]
 80088e8:	f7f7 fcea 	bl	80002c0 <strlen>
 80088ec:	4603      	mov	r3, r0
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	f04f 33ff 	mov.w	r3, #4294967295
 80088f4:	68b9      	ldr	r1, [r7, #8]
 80088f6:	4804      	ldr	r0, [pc, #16]	@ (8008908 <ADXL343_Init+0xbc>)
 80088f8:	f7fd fa82 	bl	8005e00 <HAL_UART_Transmit>
}
 80088fc:	bf00      	nop
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	0800d424 	.word	0x0800d424
 8008908:	20001c18 	.word	0x20001c18
 800890c:	0800d448 	.word	0x0800d448
 8008910:	0800d450 	.word	0x0800d450

08008914 <LIDAR_Init>:
extern uint16_t frame_start, frame_end;
/*
 * @brief Initialization of the lidar
 * @param
 */
void LIDAR_Init(LIDAR_HandleTypeDef_t * hlidar){
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
	hlidar->huart = &huart3;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a04      	ldr	r2, [pc, #16]	@ (8008930 <LIDAR_Init+0x1c>)
 8008920:	601a      	str	r2, [r3, #0]
	/*
	HAL_GPIO_WritePin(GPIOA, DEV_EN_LIDAR_Pin, GPIO_PIN_SET);
	// Enable M_EN lidar
	HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_SET);*/

}
 8008922:	bf00      	nop
 8008924:	370c      	adds	r7, #12
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	20001cac 	.word	0x20001cac

08008934 <LIDAR_Start>:

/*
 * @brief
 * @param
 */
HAL_StatusTypeDef LIDAR_Start(LIDAR_HandleTypeDef_t * hlidar){
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
	uint8_t lidar_command[2] = {START_CMD_LIDAR, SCAN_CMD_LIDAR};
 800893c:	f246 03a5 	movw	r3, #24741	@ 0x60a5
 8008940:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_UART_Transmit(hlidar->huart, lidar_command, 2, 2000);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6818      	ldr	r0, [r3, #0]
 8008946:	f107 010c 	add.w	r1, r7, #12
 800894a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800894e:	2202      	movs	r2, #2
 8008950:	f7fd fa56 	bl	8005e00 <HAL_UART_Transmit>
 8008954:	4603      	mov	r3, r0
 8008956:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK){
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10a      	bne.n	8008974 <LIDAR_Start+0x40>
		HAL_UART_Receive_DMA(hlidar->huart, hlidar->data_buff, DATA_BUFF_SIZE_LIDAR);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6818      	ldr	r0, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	3329      	adds	r3, #41	@ 0x29
 8008966:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800896a:	4619      	mov	r1, r3
 800896c:	f7fd fad6 	bl	8005f1c <HAL_UART_Receive_DMA>
		return status;
 8008970:	7bfb      	ldrb	r3, [r7, #15]
 8008972:	e000      	b.n	8008976 <LIDAR_Start+0x42>
	}
	else{
		return status;
 8008974:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
	...

08008980 <Motor_Forward_R>:
#define FWD_GPIO_PORT_L GPIOA      // Port pour FWD_L
#define REV_GPIO_PORT_L GPIOA      // Port pour REV_L
#define UART_RX_BUFFER_SIZE 1
#define UART_TX_BUFFER_SIZE 64

void Motor_Forward_R(int percentage) {
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
    // Limiter le pourcentage entre 0 et 100
    if (percentage > 100) percentage = 100;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b64      	cmp	r3, #100	@ 0x64
 800898c:	dd01      	ble.n	8008992 <Motor_Forward_R+0x12>
 800898e:	2364      	movs	r3, #100	@ 0x64
 8008990:	607b      	str	r3, [r7, #4]
    if (percentage < 0) percentage = 0;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	da01      	bge.n	800899c <Motor_Forward_R+0x1c>
 8008998:	2300      	movs	r3, #0
 800899a:	607b      	str	r3, [r7, #4]

    // Mettre à jour les GPIO et PWM pour avancer (moteur droit)
    HAL_GPIO_WritePin(REV_GPIO_PORT_R, REV_GPIO_PIN_R, GPIO_PIN_RESET);
 800899c:	2200      	movs	r2, #0
 800899e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80089a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80089a6:	f7fa fab5 	bl	8002f14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FWD_GPIO_PORT_R, FWD_GPIO_PIN_R, GPIO_PIN_SET);
 80089aa:	2201      	movs	r2, #1
 80089ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80089b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80089b4:	f7fa faae 	bl	8002f14 <HAL_GPIO_WritePin>
    TIM1->CCR1 = 0;
 80089b8:	4b09      	ldr	r3, [pc, #36]	@ (80089e0 <Motor_Forward_R+0x60>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = (percentage * PWM_MAX_DUTY_CYCLE) / 100;
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	4613      	mov	r3, r2
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4413      	add	r3, r2
 80089c6:	00db      	lsls	r3, r3, #3
 80089c8:	4a06      	ldr	r2, [pc, #24]	@ (80089e4 <Motor_Forward_R+0x64>)
 80089ca:	fb82 1203 	smull	r1, r2, r2, r3
 80089ce:	1152      	asrs	r2, r2, #5
 80089d0:	17db      	asrs	r3, r3, #31
 80089d2:	1ad2      	subs	r2, r2, r3
 80089d4:	4b02      	ldr	r3, [pc, #8]	@ (80089e0 <Motor_Forward_R+0x60>)
 80089d6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80089d8:	bf00      	nop
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	40012c00 	.word	0x40012c00
 80089e4:	51eb851f 	.word	0x51eb851f

080089e8 <Motor_Reverse_R>:

void Motor_Reverse_R(int percentage) {
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
    // Limiter le pourcentage entre 0 et 100
    if (percentage > 100) percentage = 100;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b64      	cmp	r3, #100	@ 0x64
 80089f4:	dd01      	ble.n	80089fa <Motor_Reverse_R+0x12>
 80089f6:	2364      	movs	r3, #100	@ 0x64
 80089f8:	607b      	str	r3, [r7, #4]
    if (percentage < 0) percentage = 0;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	da01      	bge.n	8008a04 <Motor_Reverse_R+0x1c>
 8008a00:	2300      	movs	r3, #0
 8008a02:	607b      	str	r3, [r7, #4]

    // Mettre à jour les GPIO et PWM pour reculer (moteur droit)
    HAL_GPIO_WritePin(FWD_GPIO_PORT_R, FWD_GPIO_PIN_R, GPIO_PIN_RESET);
 8008a04:	2200      	movs	r2, #0
 8008a06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008a0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008a0e:	f7fa fa81 	bl	8002f14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(REV_GPIO_PORT_R, REV_GPIO_PIN_R, GPIO_PIN_SET);
 8008a12:	2201      	movs	r2, #1
 8008a14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008a18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008a1c:	f7fa fa7a 	bl	8002f14 <HAL_GPIO_WritePin>
    TIM1->CCR1 = (percentage * PWM_MAX_DUTY_CYCLE) / 100;
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	4613      	mov	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	00db      	lsls	r3, r3, #3
 8008a2a:	4a07      	ldr	r2, [pc, #28]	@ (8008a48 <Motor_Reverse_R+0x60>)
 8008a2c:	fb82 1203 	smull	r1, r2, r2, r3
 8008a30:	1152      	asrs	r2, r2, #5
 8008a32:	17db      	asrs	r3, r3, #31
 8008a34:	1ad2      	subs	r2, r2, r3
 8008a36:	4b05      	ldr	r3, [pc, #20]	@ (8008a4c <Motor_Reverse_R+0x64>)
 8008a38:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = 0;
 8008a3a:	4b04      	ldr	r3, [pc, #16]	@ (8008a4c <Motor_Reverse_R+0x64>)
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8008a40:	bf00      	nop
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	51eb851f 	.word	0x51eb851f
 8008a4c:	40012c00 	.word	0x40012c00

08008a50 <Motor_Forward_L>:

void Motor_Forward_L(int percentage) {
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
    // Limiter le pourcentage entre 0 et 100
    if (percentage > 100) percentage = 100;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b64      	cmp	r3, #100	@ 0x64
 8008a5c:	dd01      	ble.n	8008a62 <Motor_Forward_L+0x12>
 8008a5e:	2364      	movs	r3, #100	@ 0x64
 8008a60:	607b      	str	r3, [r7, #4]
    if (percentage < 0) percentage = 0;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	da01      	bge.n	8008a6c <Motor_Forward_L+0x1c>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	607b      	str	r3, [r7, #4]

    // Mettre à jour les GPIO et PWM pour avancer (moteur gauche)
    HAL_GPIO_WritePin(REV_GPIO_PORT_L, REV_GPIO_PIN_L, GPIO_PIN_RESET);
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	2102      	movs	r1, #2
 8008a70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008a74:	f7fa fa4e 	bl	8002f14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FWD_GPIO_PORT_L, FWD_GPIO_PIN_L, GPIO_PIN_SET);
 8008a78:	2201      	movs	r2, #1
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008a80:	f7fa fa48 	bl	8002f14 <HAL_GPIO_WritePin>
    TIM2->CCR1 = (percentage * PWM_MAX_DUTY_CYCLE) / 100;
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	4613      	mov	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	00db      	lsls	r3, r3, #3
 8008a8e:	4a08      	ldr	r2, [pc, #32]	@ (8008ab0 <Motor_Forward_L+0x60>)
 8008a90:	fb82 1203 	smull	r1, r2, r2, r3
 8008a94:	1152      	asrs	r2, r2, #5
 8008a96:	17db      	asrs	r3, r3, #31
 8008a98:	1ad2      	subs	r2, r2, r3
 8008a9a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008a9e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = 0;
 8008aa0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8008aa8:	bf00      	nop
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	51eb851f 	.word	0x51eb851f

08008ab4 <Motor_Reverse_L>:

void Motor_Reverse_L(int percentage) {
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
    // Limiter le pourcentage entre 0 et 100
    if (percentage > 100) percentage = 100;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b64      	cmp	r3, #100	@ 0x64
 8008ac0:	dd01      	ble.n	8008ac6 <Motor_Reverse_L+0x12>
 8008ac2:	2364      	movs	r3, #100	@ 0x64
 8008ac4:	607b      	str	r3, [r7, #4]
    if (percentage < 0) percentage = 0;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	da01      	bge.n	8008ad0 <Motor_Reverse_L+0x1c>
 8008acc:	2300      	movs	r3, #0
 8008ace:	607b      	str	r3, [r7, #4]

    // Mettre à jour les GPIO et PWM pour reculer (moteur gauche)
    HAL_GPIO_WritePin(FWD_GPIO_PORT_L, FWD_GPIO_PIN_L, GPIO_PIN_RESET);
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	2101      	movs	r1, #1
 8008ad4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008ad8:	f7fa fa1c 	bl	8002f14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(REV_GPIO_PORT_L, REV_GPIO_PIN_L, GPIO_PIN_SET);
 8008adc:	2201      	movs	r2, #1
 8008ade:	2102      	movs	r1, #2
 8008ae0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008ae4:	f7fa fa16 	bl	8002f14 <HAL_GPIO_WritePin>
    TIM2->CCR1 = 0;
 8008ae8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008aec:	2200      	movs	r2, #0
 8008aee:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = (percentage * PWM_MAX_DUTY_CYCLE) / 100;
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	4613      	mov	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4413      	add	r3, r2
 8008af8:	00db      	lsls	r3, r3, #3
 8008afa:	4a06      	ldr	r2, [pc, #24]	@ (8008b14 <Motor_Reverse_L+0x60>)
 8008afc:	fb82 1203 	smull	r1, r2, r2, r3
 8008b00:	1152      	asrs	r2, r2, #5
 8008b02:	17db      	asrs	r3, r3, #31
 8008b04:	1ad2      	subs	r2, r2, r3
 8008b06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b0a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8008b0c:	bf00      	nop
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	51eb851f 	.word	0x51eb851f

08008b18 <Start_Motors>:
    TIM1->CCR2 = 0;
    TIM2->CCR1 = 0;
    TIM2->CCR2 = 0;
}

void Start_Motors(void) {
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	480f      	ldr	r0, [pc, #60]	@ (8008b5c <Start_Motors+0x44>)
 8008b20:	f7fc f99e 	bl	8004e60 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8008b24:	2104      	movs	r1, #4
 8008b26:	480d      	ldr	r0, [pc, #52]	@ (8008b5c <Start_Motors+0x44>)
 8008b28:	f7fc f99a 	bl	8004e60 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	480c      	ldr	r0, [pc, #48]	@ (8008b60 <Start_Motors+0x48>)
 8008b30:	f7fc f996 	bl	8004e60 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8008b34:	2104      	movs	r1, #4
 8008b36:	480a      	ldr	r0, [pc, #40]	@ (8008b60 <Start_Motors+0x48>)
 8008b38:	f7fc f992 	bl	8004e60 <HAL_TIM_PWM_Start>
    TIM1->CCR1 = 0;
 8008b3c:	4b09      	ldr	r3, [pc, #36]	@ (8008b64 <Start_Motors+0x4c>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = 0;
 8008b42:	4b08      	ldr	r3, [pc, #32]	@ (8008b64 <Start_Motors+0x4c>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR1 = 0;
 8008b48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = 0;
 8008b50:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b54:	2200      	movs	r2, #0
 8008b56:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8008b58:	bf00      	nop
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	20001ae8 	.word	0x20001ae8
 8008b60:	20001b34 	.word	0x20001b34
 8008b64:	40012c00 	.word	0x40012c00

08008b68 <__cvt>:
 8008b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b6c:	ec57 6b10 	vmov	r6, r7, d0
 8008b70:	2f00      	cmp	r7, #0
 8008b72:	460c      	mov	r4, r1
 8008b74:	4619      	mov	r1, r3
 8008b76:	463b      	mov	r3, r7
 8008b78:	bfbb      	ittet	lt
 8008b7a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008b7e:	461f      	movlt	r7, r3
 8008b80:	2300      	movge	r3, #0
 8008b82:	232d      	movlt	r3, #45	@ 0x2d
 8008b84:	700b      	strb	r3, [r1, #0]
 8008b86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b88:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008b8c:	4691      	mov	r9, r2
 8008b8e:	f023 0820 	bic.w	r8, r3, #32
 8008b92:	bfbc      	itt	lt
 8008b94:	4632      	movlt	r2, r6
 8008b96:	4616      	movlt	r6, r2
 8008b98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b9c:	d005      	beq.n	8008baa <__cvt+0x42>
 8008b9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008ba2:	d100      	bne.n	8008ba6 <__cvt+0x3e>
 8008ba4:	3401      	adds	r4, #1
 8008ba6:	2102      	movs	r1, #2
 8008ba8:	e000      	b.n	8008bac <__cvt+0x44>
 8008baa:	2103      	movs	r1, #3
 8008bac:	ab03      	add	r3, sp, #12
 8008bae:	9301      	str	r3, [sp, #4]
 8008bb0:	ab02      	add	r3, sp, #8
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	ec47 6b10 	vmov	d0, r6, r7
 8008bb8:	4653      	mov	r3, sl
 8008bba:	4622      	mov	r2, r4
 8008bbc:	f001 f988 	bl	8009ed0 <_dtoa_r>
 8008bc0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008bc4:	4605      	mov	r5, r0
 8008bc6:	d119      	bne.n	8008bfc <__cvt+0x94>
 8008bc8:	f019 0f01 	tst.w	r9, #1
 8008bcc:	d00e      	beq.n	8008bec <__cvt+0x84>
 8008bce:	eb00 0904 	add.w	r9, r0, r4
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	4639      	mov	r1, r7
 8008bda:	f7f7 ff9d 	bl	8000b18 <__aeabi_dcmpeq>
 8008bde:	b108      	cbz	r0, 8008be4 <__cvt+0x7c>
 8008be0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008be4:	2230      	movs	r2, #48	@ 0x30
 8008be6:	9b03      	ldr	r3, [sp, #12]
 8008be8:	454b      	cmp	r3, r9
 8008bea:	d31e      	bcc.n	8008c2a <__cvt+0xc2>
 8008bec:	9b03      	ldr	r3, [sp, #12]
 8008bee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bf0:	1b5b      	subs	r3, r3, r5
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	b004      	add	sp, #16
 8008bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bfc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c00:	eb00 0904 	add.w	r9, r0, r4
 8008c04:	d1e5      	bne.n	8008bd2 <__cvt+0x6a>
 8008c06:	7803      	ldrb	r3, [r0, #0]
 8008c08:	2b30      	cmp	r3, #48	@ 0x30
 8008c0a:	d10a      	bne.n	8008c22 <__cvt+0xba>
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	2300      	movs	r3, #0
 8008c10:	4630      	mov	r0, r6
 8008c12:	4639      	mov	r1, r7
 8008c14:	f7f7 ff80 	bl	8000b18 <__aeabi_dcmpeq>
 8008c18:	b918      	cbnz	r0, 8008c22 <__cvt+0xba>
 8008c1a:	f1c4 0401 	rsb	r4, r4, #1
 8008c1e:	f8ca 4000 	str.w	r4, [sl]
 8008c22:	f8da 3000 	ldr.w	r3, [sl]
 8008c26:	4499      	add	r9, r3
 8008c28:	e7d3      	b.n	8008bd2 <__cvt+0x6a>
 8008c2a:	1c59      	adds	r1, r3, #1
 8008c2c:	9103      	str	r1, [sp, #12]
 8008c2e:	701a      	strb	r2, [r3, #0]
 8008c30:	e7d9      	b.n	8008be6 <__cvt+0x7e>

08008c32 <__exponent>:
 8008c32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c34:	2900      	cmp	r1, #0
 8008c36:	bfba      	itte	lt
 8008c38:	4249      	neglt	r1, r1
 8008c3a:	232d      	movlt	r3, #45	@ 0x2d
 8008c3c:	232b      	movge	r3, #43	@ 0x2b
 8008c3e:	2909      	cmp	r1, #9
 8008c40:	7002      	strb	r2, [r0, #0]
 8008c42:	7043      	strb	r3, [r0, #1]
 8008c44:	dd29      	ble.n	8008c9a <__exponent+0x68>
 8008c46:	f10d 0307 	add.w	r3, sp, #7
 8008c4a:	461d      	mov	r5, r3
 8008c4c:	270a      	movs	r7, #10
 8008c4e:	461a      	mov	r2, r3
 8008c50:	fbb1 f6f7 	udiv	r6, r1, r7
 8008c54:	fb07 1416 	mls	r4, r7, r6, r1
 8008c58:	3430      	adds	r4, #48	@ 0x30
 8008c5a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008c5e:	460c      	mov	r4, r1
 8008c60:	2c63      	cmp	r4, #99	@ 0x63
 8008c62:	f103 33ff 	add.w	r3, r3, #4294967295
 8008c66:	4631      	mov	r1, r6
 8008c68:	dcf1      	bgt.n	8008c4e <__exponent+0x1c>
 8008c6a:	3130      	adds	r1, #48	@ 0x30
 8008c6c:	1e94      	subs	r4, r2, #2
 8008c6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008c72:	1c41      	adds	r1, r0, #1
 8008c74:	4623      	mov	r3, r4
 8008c76:	42ab      	cmp	r3, r5
 8008c78:	d30a      	bcc.n	8008c90 <__exponent+0x5e>
 8008c7a:	f10d 0309 	add.w	r3, sp, #9
 8008c7e:	1a9b      	subs	r3, r3, r2
 8008c80:	42ac      	cmp	r4, r5
 8008c82:	bf88      	it	hi
 8008c84:	2300      	movhi	r3, #0
 8008c86:	3302      	adds	r3, #2
 8008c88:	4403      	add	r3, r0
 8008c8a:	1a18      	subs	r0, r3, r0
 8008c8c:	b003      	add	sp, #12
 8008c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c90:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008c94:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008c98:	e7ed      	b.n	8008c76 <__exponent+0x44>
 8008c9a:	2330      	movs	r3, #48	@ 0x30
 8008c9c:	3130      	adds	r1, #48	@ 0x30
 8008c9e:	7083      	strb	r3, [r0, #2]
 8008ca0:	70c1      	strb	r1, [r0, #3]
 8008ca2:	1d03      	adds	r3, r0, #4
 8008ca4:	e7f1      	b.n	8008c8a <__exponent+0x58>
	...

08008ca8 <_printf_float>:
 8008ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cac:	b08d      	sub	sp, #52	@ 0x34
 8008cae:	460c      	mov	r4, r1
 8008cb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008cb4:	4616      	mov	r6, r2
 8008cb6:	461f      	mov	r7, r3
 8008cb8:	4605      	mov	r5, r0
 8008cba:	f000 fff3 	bl	8009ca4 <_localeconv_r>
 8008cbe:	6803      	ldr	r3, [r0, #0]
 8008cc0:	9304      	str	r3, [sp, #16]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7f7 fafc 	bl	80002c0 <strlen>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ccc:	f8d8 3000 	ldr.w	r3, [r8]
 8008cd0:	9005      	str	r0, [sp, #20]
 8008cd2:	3307      	adds	r3, #7
 8008cd4:	f023 0307 	bic.w	r3, r3, #7
 8008cd8:	f103 0208 	add.w	r2, r3, #8
 8008cdc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008ce0:	f8d4 b000 	ldr.w	fp, [r4]
 8008ce4:	f8c8 2000 	str.w	r2, [r8]
 8008ce8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008cf0:	9307      	str	r3, [sp, #28]
 8008cf2:	f8cd 8018 	str.w	r8, [sp, #24]
 8008cf6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008cfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cfe:	4b9c      	ldr	r3, [pc, #624]	@ (8008f70 <_printf_float+0x2c8>)
 8008d00:	f04f 32ff 	mov.w	r2, #4294967295
 8008d04:	f7f7 ff3a 	bl	8000b7c <__aeabi_dcmpun>
 8008d08:	bb70      	cbnz	r0, 8008d68 <_printf_float+0xc0>
 8008d0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d0e:	4b98      	ldr	r3, [pc, #608]	@ (8008f70 <_printf_float+0x2c8>)
 8008d10:	f04f 32ff 	mov.w	r2, #4294967295
 8008d14:	f7f7 ff14 	bl	8000b40 <__aeabi_dcmple>
 8008d18:	bb30      	cbnz	r0, 8008d68 <_printf_float+0xc0>
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4640      	mov	r0, r8
 8008d20:	4649      	mov	r1, r9
 8008d22:	f7f7 ff03 	bl	8000b2c <__aeabi_dcmplt>
 8008d26:	b110      	cbz	r0, 8008d2e <_printf_float+0x86>
 8008d28:	232d      	movs	r3, #45	@ 0x2d
 8008d2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d2e:	4a91      	ldr	r2, [pc, #580]	@ (8008f74 <_printf_float+0x2cc>)
 8008d30:	4b91      	ldr	r3, [pc, #580]	@ (8008f78 <_printf_float+0x2d0>)
 8008d32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008d36:	bf94      	ite	ls
 8008d38:	4690      	movls	r8, r2
 8008d3a:	4698      	movhi	r8, r3
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	6123      	str	r3, [r4, #16]
 8008d40:	f02b 0304 	bic.w	r3, fp, #4
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	f04f 0900 	mov.w	r9, #0
 8008d4a:	9700      	str	r7, [sp, #0]
 8008d4c:	4633      	mov	r3, r6
 8008d4e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008d50:	4621      	mov	r1, r4
 8008d52:	4628      	mov	r0, r5
 8008d54:	f000 f9d2 	bl	80090fc <_printf_common>
 8008d58:	3001      	adds	r0, #1
 8008d5a:	f040 808d 	bne.w	8008e78 <_printf_float+0x1d0>
 8008d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d62:	b00d      	add	sp, #52	@ 0x34
 8008d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d68:	4642      	mov	r2, r8
 8008d6a:	464b      	mov	r3, r9
 8008d6c:	4640      	mov	r0, r8
 8008d6e:	4649      	mov	r1, r9
 8008d70:	f7f7 ff04 	bl	8000b7c <__aeabi_dcmpun>
 8008d74:	b140      	cbz	r0, 8008d88 <_printf_float+0xe0>
 8008d76:	464b      	mov	r3, r9
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	bfbc      	itt	lt
 8008d7c:	232d      	movlt	r3, #45	@ 0x2d
 8008d7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008d82:	4a7e      	ldr	r2, [pc, #504]	@ (8008f7c <_printf_float+0x2d4>)
 8008d84:	4b7e      	ldr	r3, [pc, #504]	@ (8008f80 <_printf_float+0x2d8>)
 8008d86:	e7d4      	b.n	8008d32 <_printf_float+0x8a>
 8008d88:	6863      	ldr	r3, [r4, #4]
 8008d8a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008d8e:	9206      	str	r2, [sp, #24]
 8008d90:	1c5a      	adds	r2, r3, #1
 8008d92:	d13b      	bne.n	8008e0c <_printf_float+0x164>
 8008d94:	2306      	movs	r3, #6
 8008d96:	6063      	str	r3, [r4, #4]
 8008d98:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	6022      	str	r2, [r4, #0]
 8008da0:	9303      	str	r3, [sp, #12]
 8008da2:	ab0a      	add	r3, sp, #40	@ 0x28
 8008da4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008da8:	ab09      	add	r3, sp, #36	@ 0x24
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	6861      	ldr	r1, [r4, #4]
 8008dae:	ec49 8b10 	vmov	d0, r8, r9
 8008db2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008db6:	4628      	mov	r0, r5
 8008db8:	f7ff fed6 	bl	8008b68 <__cvt>
 8008dbc:	9b06      	ldr	r3, [sp, #24]
 8008dbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008dc0:	2b47      	cmp	r3, #71	@ 0x47
 8008dc2:	4680      	mov	r8, r0
 8008dc4:	d129      	bne.n	8008e1a <_printf_float+0x172>
 8008dc6:	1cc8      	adds	r0, r1, #3
 8008dc8:	db02      	blt.n	8008dd0 <_printf_float+0x128>
 8008dca:	6863      	ldr	r3, [r4, #4]
 8008dcc:	4299      	cmp	r1, r3
 8008dce:	dd41      	ble.n	8008e54 <_printf_float+0x1ac>
 8008dd0:	f1aa 0a02 	sub.w	sl, sl, #2
 8008dd4:	fa5f fa8a 	uxtb.w	sl, sl
 8008dd8:	3901      	subs	r1, #1
 8008dda:	4652      	mov	r2, sl
 8008ddc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008de0:	9109      	str	r1, [sp, #36]	@ 0x24
 8008de2:	f7ff ff26 	bl	8008c32 <__exponent>
 8008de6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008de8:	1813      	adds	r3, r2, r0
 8008dea:	2a01      	cmp	r2, #1
 8008dec:	4681      	mov	r9, r0
 8008dee:	6123      	str	r3, [r4, #16]
 8008df0:	dc02      	bgt.n	8008df8 <_printf_float+0x150>
 8008df2:	6822      	ldr	r2, [r4, #0]
 8008df4:	07d2      	lsls	r2, r2, #31
 8008df6:	d501      	bpl.n	8008dfc <_printf_float+0x154>
 8008df8:	3301      	adds	r3, #1
 8008dfa:	6123      	str	r3, [r4, #16]
 8008dfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0a2      	beq.n	8008d4a <_printf_float+0xa2>
 8008e04:	232d      	movs	r3, #45	@ 0x2d
 8008e06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e0a:	e79e      	b.n	8008d4a <_printf_float+0xa2>
 8008e0c:	9a06      	ldr	r2, [sp, #24]
 8008e0e:	2a47      	cmp	r2, #71	@ 0x47
 8008e10:	d1c2      	bne.n	8008d98 <_printf_float+0xf0>
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1c0      	bne.n	8008d98 <_printf_float+0xf0>
 8008e16:	2301      	movs	r3, #1
 8008e18:	e7bd      	b.n	8008d96 <_printf_float+0xee>
 8008e1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e1e:	d9db      	bls.n	8008dd8 <_printf_float+0x130>
 8008e20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008e24:	d118      	bne.n	8008e58 <_printf_float+0x1b0>
 8008e26:	2900      	cmp	r1, #0
 8008e28:	6863      	ldr	r3, [r4, #4]
 8008e2a:	dd0b      	ble.n	8008e44 <_printf_float+0x19c>
 8008e2c:	6121      	str	r1, [r4, #16]
 8008e2e:	b913      	cbnz	r3, 8008e36 <_printf_float+0x18e>
 8008e30:	6822      	ldr	r2, [r4, #0]
 8008e32:	07d0      	lsls	r0, r2, #31
 8008e34:	d502      	bpl.n	8008e3c <_printf_float+0x194>
 8008e36:	3301      	adds	r3, #1
 8008e38:	440b      	add	r3, r1
 8008e3a:	6123      	str	r3, [r4, #16]
 8008e3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008e3e:	f04f 0900 	mov.w	r9, #0
 8008e42:	e7db      	b.n	8008dfc <_printf_float+0x154>
 8008e44:	b913      	cbnz	r3, 8008e4c <_printf_float+0x1a4>
 8008e46:	6822      	ldr	r2, [r4, #0]
 8008e48:	07d2      	lsls	r2, r2, #31
 8008e4a:	d501      	bpl.n	8008e50 <_printf_float+0x1a8>
 8008e4c:	3302      	adds	r3, #2
 8008e4e:	e7f4      	b.n	8008e3a <_printf_float+0x192>
 8008e50:	2301      	movs	r3, #1
 8008e52:	e7f2      	b.n	8008e3a <_printf_float+0x192>
 8008e54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008e58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e5a:	4299      	cmp	r1, r3
 8008e5c:	db05      	blt.n	8008e6a <_printf_float+0x1c2>
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	6121      	str	r1, [r4, #16]
 8008e62:	07d8      	lsls	r0, r3, #31
 8008e64:	d5ea      	bpl.n	8008e3c <_printf_float+0x194>
 8008e66:	1c4b      	adds	r3, r1, #1
 8008e68:	e7e7      	b.n	8008e3a <_printf_float+0x192>
 8008e6a:	2900      	cmp	r1, #0
 8008e6c:	bfd4      	ite	le
 8008e6e:	f1c1 0202 	rsble	r2, r1, #2
 8008e72:	2201      	movgt	r2, #1
 8008e74:	4413      	add	r3, r2
 8008e76:	e7e0      	b.n	8008e3a <_printf_float+0x192>
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	055a      	lsls	r2, r3, #21
 8008e7c:	d407      	bmi.n	8008e8e <_printf_float+0x1e6>
 8008e7e:	6923      	ldr	r3, [r4, #16]
 8008e80:	4642      	mov	r2, r8
 8008e82:	4631      	mov	r1, r6
 8008e84:	4628      	mov	r0, r5
 8008e86:	47b8      	blx	r7
 8008e88:	3001      	adds	r0, #1
 8008e8a:	d12b      	bne.n	8008ee4 <_printf_float+0x23c>
 8008e8c:	e767      	b.n	8008d5e <_printf_float+0xb6>
 8008e8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e92:	f240 80dd 	bls.w	8009050 <_printf_float+0x3a8>
 8008e96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	f7f7 fe3b 	bl	8000b18 <__aeabi_dcmpeq>
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	d033      	beq.n	8008f0e <_printf_float+0x266>
 8008ea6:	4a37      	ldr	r2, [pc, #220]	@ (8008f84 <_printf_float+0x2dc>)
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	4631      	mov	r1, r6
 8008eac:	4628      	mov	r0, r5
 8008eae:	47b8      	blx	r7
 8008eb0:	3001      	adds	r0, #1
 8008eb2:	f43f af54 	beq.w	8008d5e <_printf_float+0xb6>
 8008eb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008eba:	4543      	cmp	r3, r8
 8008ebc:	db02      	blt.n	8008ec4 <_printf_float+0x21c>
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	07d8      	lsls	r0, r3, #31
 8008ec2:	d50f      	bpl.n	8008ee4 <_printf_float+0x23c>
 8008ec4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ec8:	4631      	mov	r1, r6
 8008eca:	4628      	mov	r0, r5
 8008ecc:	47b8      	blx	r7
 8008ece:	3001      	adds	r0, #1
 8008ed0:	f43f af45 	beq.w	8008d5e <_printf_float+0xb6>
 8008ed4:	f04f 0900 	mov.w	r9, #0
 8008ed8:	f108 38ff 	add.w	r8, r8, #4294967295
 8008edc:	f104 0a1a 	add.w	sl, r4, #26
 8008ee0:	45c8      	cmp	r8, r9
 8008ee2:	dc09      	bgt.n	8008ef8 <_printf_float+0x250>
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	079b      	lsls	r3, r3, #30
 8008ee8:	f100 8103 	bmi.w	80090f2 <_printf_float+0x44a>
 8008eec:	68e0      	ldr	r0, [r4, #12]
 8008eee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ef0:	4298      	cmp	r0, r3
 8008ef2:	bfb8      	it	lt
 8008ef4:	4618      	movlt	r0, r3
 8008ef6:	e734      	b.n	8008d62 <_printf_float+0xba>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	4652      	mov	r2, sl
 8008efc:	4631      	mov	r1, r6
 8008efe:	4628      	mov	r0, r5
 8008f00:	47b8      	blx	r7
 8008f02:	3001      	adds	r0, #1
 8008f04:	f43f af2b 	beq.w	8008d5e <_printf_float+0xb6>
 8008f08:	f109 0901 	add.w	r9, r9, #1
 8008f0c:	e7e8      	b.n	8008ee0 <_printf_float+0x238>
 8008f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	dc39      	bgt.n	8008f88 <_printf_float+0x2e0>
 8008f14:	4a1b      	ldr	r2, [pc, #108]	@ (8008f84 <_printf_float+0x2dc>)
 8008f16:	2301      	movs	r3, #1
 8008f18:	4631      	mov	r1, r6
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	47b8      	blx	r7
 8008f1e:	3001      	adds	r0, #1
 8008f20:	f43f af1d 	beq.w	8008d5e <_printf_float+0xb6>
 8008f24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008f28:	ea59 0303 	orrs.w	r3, r9, r3
 8008f2c:	d102      	bne.n	8008f34 <_printf_float+0x28c>
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	07d9      	lsls	r1, r3, #31
 8008f32:	d5d7      	bpl.n	8008ee4 <_printf_float+0x23c>
 8008f34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f38:	4631      	mov	r1, r6
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	47b8      	blx	r7
 8008f3e:	3001      	adds	r0, #1
 8008f40:	f43f af0d 	beq.w	8008d5e <_printf_float+0xb6>
 8008f44:	f04f 0a00 	mov.w	sl, #0
 8008f48:	f104 0b1a 	add.w	fp, r4, #26
 8008f4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f4e:	425b      	negs	r3, r3
 8008f50:	4553      	cmp	r3, sl
 8008f52:	dc01      	bgt.n	8008f58 <_printf_float+0x2b0>
 8008f54:	464b      	mov	r3, r9
 8008f56:	e793      	b.n	8008e80 <_printf_float+0x1d8>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	465a      	mov	r2, fp
 8008f5c:	4631      	mov	r1, r6
 8008f5e:	4628      	mov	r0, r5
 8008f60:	47b8      	blx	r7
 8008f62:	3001      	adds	r0, #1
 8008f64:	f43f aefb 	beq.w	8008d5e <_printf_float+0xb6>
 8008f68:	f10a 0a01 	add.w	sl, sl, #1
 8008f6c:	e7ee      	b.n	8008f4c <_printf_float+0x2a4>
 8008f6e:	bf00      	nop
 8008f70:	7fefffff 	.word	0x7fefffff
 8008f74:	0800d4b4 	.word	0x0800d4b4
 8008f78:	0800d4b8 	.word	0x0800d4b8
 8008f7c:	0800d4bc 	.word	0x0800d4bc
 8008f80:	0800d4c0 	.word	0x0800d4c0
 8008f84:	0800d4c4 	.word	0x0800d4c4
 8008f88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f8a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008f8e:	4553      	cmp	r3, sl
 8008f90:	bfa8      	it	ge
 8008f92:	4653      	movge	r3, sl
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	4699      	mov	r9, r3
 8008f98:	dc36      	bgt.n	8009008 <_printf_float+0x360>
 8008f9a:	f04f 0b00 	mov.w	fp, #0
 8008f9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fa2:	f104 021a 	add.w	r2, r4, #26
 8008fa6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008fa8:	9306      	str	r3, [sp, #24]
 8008faa:	eba3 0309 	sub.w	r3, r3, r9
 8008fae:	455b      	cmp	r3, fp
 8008fb0:	dc31      	bgt.n	8009016 <_printf_float+0x36e>
 8008fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fb4:	459a      	cmp	sl, r3
 8008fb6:	dc3a      	bgt.n	800902e <_printf_float+0x386>
 8008fb8:	6823      	ldr	r3, [r4, #0]
 8008fba:	07da      	lsls	r2, r3, #31
 8008fbc:	d437      	bmi.n	800902e <_printf_float+0x386>
 8008fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fc0:	ebaa 0903 	sub.w	r9, sl, r3
 8008fc4:	9b06      	ldr	r3, [sp, #24]
 8008fc6:	ebaa 0303 	sub.w	r3, sl, r3
 8008fca:	4599      	cmp	r9, r3
 8008fcc:	bfa8      	it	ge
 8008fce:	4699      	movge	r9, r3
 8008fd0:	f1b9 0f00 	cmp.w	r9, #0
 8008fd4:	dc33      	bgt.n	800903e <_printf_float+0x396>
 8008fd6:	f04f 0800 	mov.w	r8, #0
 8008fda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fde:	f104 0b1a 	add.w	fp, r4, #26
 8008fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe4:	ebaa 0303 	sub.w	r3, sl, r3
 8008fe8:	eba3 0309 	sub.w	r3, r3, r9
 8008fec:	4543      	cmp	r3, r8
 8008fee:	f77f af79 	ble.w	8008ee4 <_printf_float+0x23c>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	465a      	mov	r2, fp
 8008ff6:	4631      	mov	r1, r6
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	47b8      	blx	r7
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	f43f aeae 	beq.w	8008d5e <_printf_float+0xb6>
 8009002:	f108 0801 	add.w	r8, r8, #1
 8009006:	e7ec      	b.n	8008fe2 <_printf_float+0x33a>
 8009008:	4642      	mov	r2, r8
 800900a:	4631      	mov	r1, r6
 800900c:	4628      	mov	r0, r5
 800900e:	47b8      	blx	r7
 8009010:	3001      	adds	r0, #1
 8009012:	d1c2      	bne.n	8008f9a <_printf_float+0x2f2>
 8009014:	e6a3      	b.n	8008d5e <_printf_float+0xb6>
 8009016:	2301      	movs	r3, #1
 8009018:	4631      	mov	r1, r6
 800901a:	4628      	mov	r0, r5
 800901c:	9206      	str	r2, [sp, #24]
 800901e:	47b8      	blx	r7
 8009020:	3001      	adds	r0, #1
 8009022:	f43f ae9c 	beq.w	8008d5e <_printf_float+0xb6>
 8009026:	9a06      	ldr	r2, [sp, #24]
 8009028:	f10b 0b01 	add.w	fp, fp, #1
 800902c:	e7bb      	b.n	8008fa6 <_printf_float+0x2fe>
 800902e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009032:	4631      	mov	r1, r6
 8009034:	4628      	mov	r0, r5
 8009036:	47b8      	blx	r7
 8009038:	3001      	adds	r0, #1
 800903a:	d1c0      	bne.n	8008fbe <_printf_float+0x316>
 800903c:	e68f      	b.n	8008d5e <_printf_float+0xb6>
 800903e:	9a06      	ldr	r2, [sp, #24]
 8009040:	464b      	mov	r3, r9
 8009042:	4442      	add	r2, r8
 8009044:	4631      	mov	r1, r6
 8009046:	4628      	mov	r0, r5
 8009048:	47b8      	blx	r7
 800904a:	3001      	adds	r0, #1
 800904c:	d1c3      	bne.n	8008fd6 <_printf_float+0x32e>
 800904e:	e686      	b.n	8008d5e <_printf_float+0xb6>
 8009050:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009054:	f1ba 0f01 	cmp.w	sl, #1
 8009058:	dc01      	bgt.n	800905e <_printf_float+0x3b6>
 800905a:	07db      	lsls	r3, r3, #31
 800905c:	d536      	bpl.n	80090cc <_printf_float+0x424>
 800905e:	2301      	movs	r3, #1
 8009060:	4642      	mov	r2, r8
 8009062:	4631      	mov	r1, r6
 8009064:	4628      	mov	r0, r5
 8009066:	47b8      	blx	r7
 8009068:	3001      	adds	r0, #1
 800906a:	f43f ae78 	beq.w	8008d5e <_printf_float+0xb6>
 800906e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009072:	4631      	mov	r1, r6
 8009074:	4628      	mov	r0, r5
 8009076:	47b8      	blx	r7
 8009078:	3001      	adds	r0, #1
 800907a:	f43f ae70 	beq.w	8008d5e <_printf_float+0xb6>
 800907e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009082:	2200      	movs	r2, #0
 8009084:	2300      	movs	r3, #0
 8009086:	f10a 3aff 	add.w	sl, sl, #4294967295
 800908a:	f7f7 fd45 	bl	8000b18 <__aeabi_dcmpeq>
 800908e:	b9c0      	cbnz	r0, 80090c2 <_printf_float+0x41a>
 8009090:	4653      	mov	r3, sl
 8009092:	f108 0201 	add.w	r2, r8, #1
 8009096:	4631      	mov	r1, r6
 8009098:	4628      	mov	r0, r5
 800909a:	47b8      	blx	r7
 800909c:	3001      	adds	r0, #1
 800909e:	d10c      	bne.n	80090ba <_printf_float+0x412>
 80090a0:	e65d      	b.n	8008d5e <_printf_float+0xb6>
 80090a2:	2301      	movs	r3, #1
 80090a4:	465a      	mov	r2, fp
 80090a6:	4631      	mov	r1, r6
 80090a8:	4628      	mov	r0, r5
 80090aa:	47b8      	blx	r7
 80090ac:	3001      	adds	r0, #1
 80090ae:	f43f ae56 	beq.w	8008d5e <_printf_float+0xb6>
 80090b2:	f108 0801 	add.w	r8, r8, #1
 80090b6:	45d0      	cmp	r8, sl
 80090b8:	dbf3      	blt.n	80090a2 <_printf_float+0x3fa>
 80090ba:	464b      	mov	r3, r9
 80090bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80090c0:	e6df      	b.n	8008e82 <_printf_float+0x1da>
 80090c2:	f04f 0800 	mov.w	r8, #0
 80090c6:	f104 0b1a 	add.w	fp, r4, #26
 80090ca:	e7f4      	b.n	80090b6 <_printf_float+0x40e>
 80090cc:	2301      	movs	r3, #1
 80090ce:	4642      	mov	r2, r8
 80090d0:	e7e1      	b.n	8009096 <_printf_float+0x3ee>
 80090d2:	2301      	movs	r3, #1
 80090d4:	464a      	mov	r2, r9
 80090d6:	4631      	mov	r1, r6
 80090d8:	4628      	mov	r0, r5
 80090da:	47b8      	blx	r7
 80090dc:	3001      	adds	r0, #1
 80090de:	f43f ae3e 	beq.w	8008d5e <_printf_float+0xb6>
 80090e2:	f108 0801 	add.w	r8, r8, #1
 80090e6:	68e3      	ldr	r3, [r4, #12]
 80090e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80090ea:	1a5b      	subs	r3, r3, r1
 80090ec:	4543      	cmp	r3, r8
 80090ee:	dcf0      	bgt.n	80090d2 <_printf_float+0x42a>
 80090f0:	e6fc      	b.n	8008eec <_printf_float+0x244>
 80090f2:	f04f 0800 	mov.w	r8, #0
 80090f6:	f104 0919 	add.w	r9, r4, #25
 80090fa:	e7f4      	b.n	80090e6 <_printf_float+0x43e>

080090fc <_printf_common>:
 80090fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009100:	4616      	mov	r6, r2
 8009102:	4698      	mov	r8, r3
 8009104:	688a      	ldr	r2, [r1, #8]
 8009106:	690b      	ldr	r3, [r1, #16]
 8009108:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800910c:	4293      	cmp	r3, r2
 800910e:	bfb8      	it	lt
 8009110:	4613      	movlt	r3, r2
 8009112:	6033      	str	r3, [r6, #0]
 8009114:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009118:	4607      	mov	r7, r0
 800911a:	460c      	mov	r4, r1
 800911c:	b10a      	cbz	r2, 8009122 <_printf_common+0x26>
 800911e:	3301      	adds	r3, #1
 8009120:	6033      	str	r3, [r6, #0]
 8009122:	6823      	ldr	r3, [r4, #0]
 8009124:	0699      	lsls	r1, r3, #26
 8009126:	bf42      	ittt	mi
 8009128:	6833      	ldrmi	r3, [r6, #0]
 800912a:	3302      	addmi	r3, #2
 800912c:	6033      	strmi	r3, [r6, #0]
 800912e:	6825      	ldr	r5, [r4, #0]
 8009130:	f015 0506 	ands.w	r5, r5, #6
 8009134:	d106      	bne.n	8009144 <_printf_common+0x48>
 8009136:	f104 0a19 	add.w	sl, r4, #25
 800913a:	68e3      	ldr	r3, [r4, #12]
 800913c:	6832      	ldr	r2, [r6, #0]
 800913e:	1a9b      	subs	r3, r3, r2
 8009140:	42ab      	cmp	r3, r5
 8009142:	dc26      	bgt.n	8009192 <_printf_common+0x96>
 8009144:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009148:	6822      	ldr	r2, [r4, #0]
 800914a:	3b00      	subs	r3, #0
 800914c:	bf18      	it	ne
 800914e:	2301      	movne	r3, #1
 8009150:	0692      	lsls	r2, r2, #26
 8009152:	d42b      	bmi.n	80091ac <_printf_common+0xb0>
 8009154:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009158:	4641      	mov	r1, r8
 800915a:	4638      	mov	r0, r7
 800915c:	47c8      	blx	r9
 800915e:	3001      	adds	r0, #1
 8009160:	d01e      	beq.n	80091a0 <_printf_common+0xa4>
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	6922      	ldr	r2, [r4, #16]
 8009166:	f003 0306 	and.w	r3, r3, #6
 800916a:	2b04      	cmp	r3, #4
 800916c:	bf02      	ittt	eq
 800916e:	68e5      	ldreq	r5, [r4, #12]
 8009170:	6833      	ldreq	r3, [r6, #0]
 8009172:	1aed      	subeq	r5, r5, r3
 8009174:	68a3      	ldr	r3, [r4, #8]
 8009176:	bf0c      	ite	eq
 8009178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800917c:	2500      	movne	r5, #0
 800917e:	4293      	cmp	r3, r2
 8009180:	bfc4      	itt	gt
 8009182:	1a9b      	subgt	r3, r3, r2
 8009184:	18ed      	addgt	r5, r5, r3
 8009186:	2600      	movs	r6, #0
 8009188:	341a      	adds	r4, #26
 800918a:	42b5      	cmp	r5, r6
 800918c:	d11a      	bne.n	80091c4 <_printf_common+0xc8>
 800918e:	2000      	movs	r0, #0
 8009190:	e008      	b.n	80091a4 <_printf_common+0xa8>
 8009192:	2301      	movs	r3, #1
 8009194:	4652      	mov	r2, sl
 8009196:	4641      	mov	r1, r8
 8009198:	4638      	mov	r0, r7
 800919a:	47c8      	blx	r9
 800919c:	3001      	adds	r0, #1
 800919e:	d103      	bne.n	80091a8 <_printf_common+0xac>
 80091a0:	f04f 30ff 	mov.w	r0, #4294967295
 80091a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a8:	3501      	adds	r5, #1
 80091aa:	e7c6      	b.n	800913a <_printf_common+0x3e>
 80091ac:	18e1      	adds	r1, r4, r3
 80091ae:	1c5a      	adds	r2, r3, #1
 80091b0:	2030      	movs	r0, #48	@ 0x30
 80091b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80091b6:	4422      	add	r2, r4
 80091b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80091bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80091c0:	3302      	adds	r3, #2
 80091c2:	e7c7      	b.n	8009154 <_printf_common+0x58>
 80091c4:	2301      	movs	r3, #1
 80091c6:	4622      	mov	r2, r4
 80091c8:	4641      	mov	r1, r8
 80091ca:	4638      	mov	r0, r7
 80091cc:	47c8      	blx	r9
 80091ce:	3001      	adds	r0, #1
 80091d0:	d0e6      	beq.n	80091a0 <_printf_common+0xa4>
 80091d2:	3601      	adds	r6, #1
 80091d4:	e7d9      	b.n	800918a <_printf_common+0x8e>
	...

080091d8 <_printf_i>:
 80091d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091dc:	7e0f      	ldrb	r7, [r1, #24]
 80091de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80091e0:	2f78      	cmp	r7, #120	@ 0x78
 80091e2:	4691      	mov	r9, r2
 80091e4:	4680      	mov	r8, r0
 80091e6:	460c      	mov	r4, r1
 80091e8:	469a      	mov	sl, r3
 80091ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80091ee:	d807      	bhi.n	8009200 <_printf_i+0x28>
 80091f0:	2f62      	cmp	r7, #98	@ 0x62
 80091f2:	d80a      	bhi.n	800920a <_printf_i+0x32>
 80091f4:	2f00      	cmp	r7, #0
 80091f6:	f000 80d2 	beq.w	800939e <_printf_i+0x1c6>
 80091fa:	2f58      	cmp	r7, #88	@ 0x58
 80091fc:	f000 80b9 	beq.w	8009372 <_printf_i+0x19a>
 8009200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009204:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009208:	e03a      	b.n	8009280 <_printf_i+0xa8>
 800920a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800920e:	2b15      	cmp	r3, #21
 8009210:	d8f6      	bhi.n	8009200 <_printf_i+0x28>
 8009212:	a101      	add	r1, pc, #4	@ (adr r1, 8009218 <_printf_i+0x40>)
 8009214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009218:	08009271 	.word	0x08009271
 800921c:	08009285 	.word	0x08009285
 8009220:	08009201 	.word	0x08009201
 8009224:	08009201 	.word	0x08009201
 8009228:	08009201 	.word	0x08009201
 800922c:	08009201 	.word	0x08009201
 8009230:	08009285 	.word	0x08009285
 8009234:	08009201 	.word	0x08009201
 8009238:	08009201 	.word	0x08009201
 800923c:	08009201 	.word	0x08009201
 8009240:	08009201 	.word	0x08009201
 8009244:	08009385 	.word	0x08009385
 8009248:	080092af 	.word	0x080092af
 800924c:	0800933f 	.word	0x0800933f
 8009250:	08009201 	.word	0x08009201
 8009254:	08009201 	.word	0x08009201
 8009258:	080093a7 	.word	0x080093a7
 800925c:	08009201 	.word	0x08009201
 8009260:	080092af 	.word	0x080092af
 8009264:	08009201 	.word	0x08009201
 8009268:	08009201 	.word	0x08009201
 800926c:	08009347 	.word	0x08009347
 8009270:	6833      	ldr	r3, [r6, #0]
 8009272:	1d1a      	adds	r2, r3, #4
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	6032      	str	r2, [r6, #0]
 8009278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800927c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009280:	2301      	movs	r3, #1
 8009282:	e09d      	b.n	80093c0 <_printf_i+0x1e8>
 8009284:	6833      	ldr	r3, [r6, #0]
 8009286:	6820      	ldr	r0, [r4, #0]
 8009288:	1d19      	adds	r1, r3, #4
 800928a:	6031      	str	r1, [r6, #0]
 800928c:	0606      	lsls	r6, r0, #24
 800928e:	d501      	bpl.n	8009294 <_printf_i+0xbc>
 8009290:	681d      	ldr	r5, [r3, #0]
 8009292:	e003      	b.n	800929c <_printf_i+0xc4>
 8009294:	0645      	lsls	r5, r0, #25
 8009296:	d5fb      	bpl.n	8009290 <_printf_i+0xb8>
 8009298:	f9b3 5000 	ldrsh.w	r5, [r3]
 800929c:	2d00      	cmp	r5, #0
 800929e:	da03      	bge.n	80092a8 <_printf_i+0xd0>
 80092a0:	232d      	movs	r3, #45	@ 0x2d
 80092a2:	426d      	negs	r5, r5
 80092a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092a8:	4859      	ldr	r0, [pc, #356]	@ (8009410 <_printf_i+0x238>)
 80092aa:	230a      	movs	r3, #10
 80092ac:	e011      	b.n	80092d2 <_printf_i+0xfa>
 80092ae:	6821      	ldr	r1, [r4, #0]
 80092b0:	6833      	ldr	r3, [r6, #0]
 80092b2:	0608      	lsls	r0, r1, #24
 80092b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80092b8:	d402      	bmi.n	80092c0 <_printf_i+0xe8>
 80092ba:	0649      	lsls	r1, r1, #25
 80092bc:	bf48      	it	mi
 80092be:	b2ad      	uxthmi	r5, r5
 80092c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80092c2:	4853      	ldr	r0, [pc, #332]	@ (8009410 <_printf_i+0x238>)
 80092c4:	6033      	str	r3, [r6, #0]
 80092c6:	bf14      	ite	ne
 80092c8:	230a      	movne	r3, #10
 80092ca:	2308      	moveq	r3, #8
 80092cc:	2100      	movs	r1, #0
 80092ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80092d2:	6866      	ldr	r6, [r4, #4]
 80092d4:	60a6      	str	r6, [r4, #8]
 80092d6:	2e00      	cmp	r6, #0
 80092d8:	bfa2      	ittt	ge
 80092da:	6821      	ldrge	r1, [r4, #0]
 80092dc:	f021 0104 	bicge.w	r1, r1, #4
 80092e0:	6021      	strge	r1, [r4, #0]
 80092e2:	b90d      	cbnz	r5, 80092e8 <_printf_i+0x110>
 80092e4:	2e00      	cmp	r6, #0
 80092e6:	d04b      	beq.n	8009380 <_printf_i+0x1a8>
 80092e8:	4616      	mov	r6, r2
 80092ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80092ee:	fb03 5711 	mls	r7, r3, r1, r5
 80092f2:	5dc7      	ldrb	r7, [r0, r7]
 80092f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092f8:	462f      	mov	r7, r5
 80092fa:	42bb      	cmp	r3, r7
 80092fc:	460d      	mov	r5, r1
 80092fe:	d9f4      	bls.n	80092ea <_printf_i+0x112>
 8009300:	2b08      	cmp	r3, #8
 8009302:	d10b      	bne.n	800931c <_printf_i+0x144>
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	07df      	lsls	r7, r3, #31
 8009308:	d508      	bpl.n	800931c <_printf_i+0x144>
 800930a:	6923      	ldr	r3, [r4, #16]
 800930c:	6861      	ldr	r1, [r4, #4]
 800930e:	4299      	cmp	r1, r3
 8009310:	bfde      	ittt	le
 8009312:	2330      	movle	r3, #48	@ 0x30
 8009314:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009318:	f106 36ff 	addle.w	r6, r6, #4294967295
 800931c:	1b92      	subs	r2, r2, r6
 800931e:	6122      	str	r2, [r4, #16]
 8009320:	f8cd a000 	str.w	sl, [sp]
 8009324:	464b      	mov	r3, r9
 8009326:	aa03      	add	r2, sp, #12
 8009328:	4621      	mov	r1, r4
 800932a:	4640      	mov	r0, r8
 800932c:	f7ff fee6 	bl	80090fc <_printf_common>
 8009330:	3001      	adds	r0, #1
 8009332:	d14a      	bne.n	80093ca <_printf_i+0x1f2>
 8009334:	f04f 30ff 	mov.w	r0, #4294967295
 8009338:	b004      	add	sp, #16
 800933a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	f043 0320 	orr.w	r3, r3, #32
 8009344:	6023      	str	r3, [r4, #0]
 8009346:	4833      	ldr	r0, [pc, #204]	@ (8009414 <_printf_i+0x23c>)
 8009348:	2778      	movs	r7, #120	@ 0x78
 800934a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	6831      	ldr	r1, [r6, #0]
 8009352:	061f      	lsls	r7, r3, #24
 8009354:	f851 5b04 	ldr.w	r5, [r1], #4
 8009358:	d402      	bmi.n	8009360 <_printf_i+0x188>
 800935a:	065f      	lsls	r7, r3, #25
 800935c:	bf48      	it	mi
 800935e:	b2ad      	uxthmi	r5, r5
 8009360:	6031      	str	r1, [r6, #0]
 8009362:	07d9      	lsls	r1, r3, #31
 8009364:	bf44      	itt	mi
 8009366:	f043 0320 	orrmi.w	r3, r3, #32
 800936a:	6023      	strmi	r3, [r4, #0]
 800936c:	b11d      	cbz	r5, 8009376 <_printf_i+0x19e>
 800936e:	2310      	movs	r3, #16
 8009370:	e7ac      	b.n	80092cc <_printf_i+0xf4>
 8009372:	4827      	ldr	r0, [pc, #156]	@ (8009410 <_printf_i+0x238>)
 8009374:	e7e9      	b.n	800934a <_printf_i+0x172>
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	f023 0320 	bic.w	r3, r3, #32
 800937c:	6023      	str	r3, [r4, #0]
 800937e:	e7f6      	b.n	800936e <_printf_i+0x196>
 8009380:	4616      	mov	r6, r2
 8009382:	e7bd      	b.n	8009300 <_printf_i+0x128>
 8009384:	6833      	ldr	r3, [r6, #0]
 8009386:	6825      	ldr	r5, [r4, #0]
 8009388:	6961      	ldr	r1, [r4, #20]
 800938a:	1d18      	adds	r0, r3, #4
 800938c:	6030      	str	r0, [r6, #0]
 800938e:	062e      	lsls	r6, r5, #24
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	d501      	bpl.n	8009398 <_printf_i+0x1c0>
 8009394:	6019      	str	r1, [r3, #0]
 8009396:	e002      	b.n	800939e <_printf_i+0x1c6>
 8009398:	0668      	lsls	r0, r5, #25
 800939a:	d5fb      	bpl.n	8009394 <_printf_i+0x1bc>
 800939c:	8019      	strh	r1, [r3, #0]
 800939e:	2300      	movs	r3, #0
 80093a0:	6123      	str	r3, [r4, #16]
 80093a2:	4616      	mov	r6, r2
 80093a4:	e7bc      	b.n	8009320 <_printf_i+0x148>
 80093a6:	6833      	ldr	r3, [r6, #0]
 80093a8:	1d1a      	adds	r2, r3, #4
 80093aa:	6032      	str	r2, [r6, #0]
 80093ac:	681e      	ldr	r6, [r3, #0]
 80093ae:	6862      	ldr	r2, [r4, #4]
 80093b0:	2100      	movs	r1, #0
 80093b2:	4630      	mov	r0, r6
 80093b4:	f7f6 ff34 	bl	8000220 <memchr>
 80093b8:	b108      	cbz	r0, 80093be <_printf_i+0x1e6>
 80093ba:	1b80      	subs	r0, r0, r6
 80093bc:	6060      	str	r0, [r4, #4]
 80093be:	6863      	ldr	r3, [r4, #4]
 80093c0:	6123      	str	r3, [r4, #16]
 80093c2:	2300      	movs	r3, #0
 80093c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093c8:	e7aa      	b.n	8009320 <_printf_i+0x148>
 80093ca:	6923      	ldr	r3, [r4, #16]
 80093cc:	4632      	mov	r2, r6
 80093ce:	4649      	mov	r1, r9
 80093d0:	4640      	mov	r0, r8
 80093d2:	47d0      	blx	sl
 80093d4:	3001      	adds	r0, #1
 80093d6:	d0ad      	beq.n	8009334 <_printf_i+0x15c>
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	079b      	lsls	r3, r3, #30
 80093dc:	d413      	bmi.n	8009406 <_printf_i+0x22e>
 80093de:	68e0      	ldr	r0, [r4, #12]
 80093e0:	9b03      	ldr	r3, [sp, #12]
 80093e2:	4298      	cmp	r0, r3
 80093e4:	bfb8      	it	lt
 80093e6:	4618      	movlt	r0, r3
 80093e8:	e7a6      	b.n	8009338 <_printf_i+0x160>
 80093ea:	2301      	movs	r3, #1
 80093ec:	4632      	mov	r2, r6
 80093ee:	4649      	mov	r1, r9
 80093f0:	4640      	mov	r0, r8
 80093f2:	47d0      	blx	sl
 80093f4:	3001      	adds	r0, #1
 80093f6:	d09d      	beq.n	8009334 <_printf_i+0x15c>
 80093f8:	3501      	adds	r5, #1
 80093fa:	68e3      	ldr	r3, [r4, #12]
 80093fc:	9903      	ldr	r1, [sp, #12]
 80093fe:	1a5b      	subs	r3, r3, r1
 8009400:	42ab      	cmp	r3, r5
 8009402:	dcf2      	bgt.n	80093ea <_printf_i+0x212>
 8009404:	e7eb      	b.n	80093de <_printf_i+0x206>
 8009406:	2500      	movs	r5, #0
 8009408:	f104 0619 	add.w	r6, r4, #25
 800940c:	e7f5      	b.n	80093fa <_printf_i+0x222>
 800940e:	bf00      	nop
 8009410:	0800d4c6 	.word	0x0800d4c6
 8009414:	0800d4d7 	.word	0x0800d4d7

08009418 <_scanf_float>:
 8009418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800941c:	b087      	sub	sp, #28
 800941e:	4617      	mov	r7, r2
 8009420:	9303      	str	r3, [sp, #12]
 8009422:	688b      	ldr	r3, [r1, #8]
 8009424:	1e5a      	subs	r2, r3, #1
 8009426:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800942a:	bf81      	itttt	hi
 800942c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009430:	eb03 0b05 	addhi.w	fp, r3, r5
 8009434:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009438:	608b      	strhi	r3, [r1, #8]
 800943a:	680b      	ldr	r3, [r1, #0]
 800943c:	460a      	mov	r2, r1
 800943e:	f04f 0500 	mov.w	r5, #0
 8009442:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009446:	f842 3b1c 	str.w	r3, [r2], #28
 800944a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800944e:	4680      	mov	r8, r0
 8009450:	460c      	mov	r4, r1
 8009452:	bf98      	it	ls
 8009454:	f04f 0b00 	movls.w	fp, #0
 8009458:	9201      	str	r2, [sp, #4]
 800945a:	4616      	mov	r6, r2
 800945c:	46aa      	mov	sl, r5
 800945e:	46a9      	mov	r9, r5
 8009460:	9502      	str	r5, [sp, #8]
 8009462:	68a2      	ldr	r2, [r4, #8]
 8009464:	b152      	cbz	r2, 800947c <_scanf_float+0x64>
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	2b4e      	cmp	r3, #78	@ 0x4e
 800946c:	d864      	bhi.n	8009538 <_scanf_float+0x120>
 800946e:	2b40      	cmp	r3, #64	@ 0x40
 8009470:	d83c      	bhi.n	80094ec <_scanf_float+0xd4>
 8009472:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009476:	b2c8      	uxtb	r0, r1
 8009478:	280e      	cmp	r0, #14
 800947a:	d93a      	bls.n	80094f2 <_scanf_float+0xda>
 800947c:	f1b9 0f00 	cmp.w	r9, #0
 8009480:	d003      	beq.n	800948a <_scanf_float+0x72>
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009488:	6023      	str	r3, [r4, #0]
 800948a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800948e:	f1ba 0f01 	cmp.w	sl, #1
 8009492:	f200 8117 	bhi.w	80096c4 <_scanf_float+0x2ac>
 8009496:	9b01      	ldr	r3, [sp, #4]
 8009498:	429e      	cmp	r6, r3
 800949a:	f200 8108 	bhi.w	80096ae <_scanf_float+0x296>
 800949e:	2001      	movs	r0, #1
 80094a0:	b007      	add	sp, #28
 80094a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80094aa:	2a0d      	cmp	r2, #13
 80094ac:	d8e6      	bhi.n	800947c <_scanf_float+0x64>
 80094ae:	a101      	add	r1, pc, #4	@ (adr r1, 80094b4 <_scanf_float+0x9c>)
 80094b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80094b4:	080095fb 	.word	0x080095fb
 80094b8:	0800947d 	.word	0x0800947d
 80094bc:	0800947d 	.word	0x0800947d
 80094c0:	0800947d 	.word	0x0800947d
 80094c4:	0800965b 	.word	0x0800965b
 80094c8:	08009633 	.word	0x08009633
 80094cc:	0800947d 	.word	0x0800947d
 80094d0:	0800947d 	.word	0x0800947d
 80094d4:	08009609 	.word	0x08009609
 80094d8:	0800947d 	.word	0x0800947d
 80094dc:	0800947d 	.word	0x0800947d
 80094e0:	0800947d 	.word	0x0800947d
 80094e4:	0800947d 	.word	0x0800947d
 80094e8:	080095c1 	.word	0x080095c1
 80094ec:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80094f0:	e7db      	b.n	80094aa <_scanf_float+0x92>
 80094f2:	290e      	cmp	r1, #14
 80094f4:	d8c2      	bhi.n	800947c <_scanf_float+0x64>
 80094f6:	a001      	add	r0, pc, #4	@ (adr r0, 80094fc <_scanf_float+0xe4>)
 80094f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80094fc:	080095b1 	.word	0x080095b1
 8009500:	0800947d 	.word	0x0800947d
 8009504:	080095b1 	.word	0x080095b1
 8009508:	08009647 	.word	0x08009647
 800950c:	0800947d 	.word	0x0800947d
 8009510:	08009559 	.word	0x08009559
 8009514:	08009597 	.word	0x08009597
 8009518:	08009597 	.word	0x08009597
 800951c:	08009597 	.word	0x08009597
 8009520:	08009597 	.word	0x08009597
 8009524:	08009597 	.word	0x08009597
 8009528:	08009597 	.word	0x08009597
 800952c:	08009597 	.word	0x08009597
 8009530:	08009597 	.word	0x08009597
 8009534:	08009597 	.word	0x08009597
 8009538:	2b6e      	cmp	r3, #110	@ 0x6e
 800953a:	d809      	bhi.n	8009550 <_scanf_float+0x138>
 800953c:	2b60      	cmp	r3, #96	@ 0x60
 800953e:	d8b2      	bhi.n	80094a6 <_scanf_float+0x8e>
 8009540:	2b54      	cmp	r3, #84	@ 0x54
 8009542:	d07b      	beq.n	800963c <_scanf_float+0x224>
 8009544:	2b59      	cmp	r3, #89	@ 0x59
 8009546:	d199      	bne.n	800947c <_scanf_float+0x64>
 8009548:	2d07      	cmp	r5, #7
 800954a:	d197      	bne.n	800947c <_scanf_float+0x64>
 800954c:	2508      	movs	r5, #8
 800954e:	e02c      	b.n	80095aa <_scanf_float+0x192>
 8009550:	2b74      	cmp	r3, #116	@ 0x74
 8009552:	d073      	beq.n	800963c <_scanf_float+0x224>
 8009554:	2b79      	cmp	r3, #121	@ 0x79
 8009556:	e7f6      	b.n	8009546 <_scanf_float+0x12e>
 8009558:	6821      	ldr	r1, [r4, #0]
 800955a:	05c8      	lsls	r0, r1, #23
 800955c:	d51b      	bpl.n	8009596 <_scanf_float+0x17e>
 800955e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009562:	6021      	str	r1, [r4, #0]
 8009564:	f109 0901 	add.w	r9, r9, #1
 8009568:	f1bb 0f00 	cmp.w	fp, #0
 800956c:	d003      	beq.n	8009576 <_scanf_float+0x15e>
 800956e:	3201      	adds	r2, #1
 8009570:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009574:	60a2      	str	r2, [r4, #8]
 8009576:	68a3      	ldr	r3, [r4, #8]
 8009578:	3b01      	subs	r3, #1
 800957a:	60a3      	str	r3, [r4, #8]
 800957c:	6923      	ldr	r3, [r4, #16]
 800957e:	3301      	adds	r3, #1
 8009580:	6123      	str	r3, [r4, #16]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	3b01      	subs	r3, #1
 8009586:	2b00      	cmp	r3, #0
 8009588:	607b      	str	r3, [r7, #4]
 800958a:	f340 8087 	ble.w	800969c <_scanf_float+0x284>
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	3301      	adds	r3, #1
 8009592:	603b      	str	r3, [r7, #0]
 8009594:	e765      	b.n	8009462 <_scanf_float+0x4a>
 8009596:	eb1a 0105 	adds.w	r1, sl, r5
 800959a:	f47f af6f 	bne.w	800947c <_scanf_float+0x64>
 800959e:	6822      	ldr	r2, [r4, #0]
 80095a0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80095a4:	6022      	str	r2, [r4, #0]
 80095a6:	460d      	mov	r5, r1
 80095a8:	468a      	mov	sl, r1
 80095aa:	f806 3b01 	strb.w	r3, [r6], #1
 80095ae:	e7e2      	b.n	8009576 <_scanf_float+0x15e>
 80095b0:	6822      	ldr	r2, [r4, #0]
 80095b2:	0610      	lsls	r0, r2, #24
 80095b4:	f57f af62 	bpl.w	800947c <_scanf_float+0x64>
 80095b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80095bc:	6022      	str	r2, [r4, #0]
 80095be:	e7f4      	b.n	80095aa <_scanf_float+0x192>
 80095c0:	f1ba 0f00 	cmp.w	sl, #0
 80095c4:	d10e      	bne.n	80095e4 <_scanf_float+0x1cc>
 80095c6:	f1b9 0f00 	cmp.w	r9, #0
 80095ca:	d10e      	bne.n	80095ea <_scanf_float+0x1d2>
 80095cc:	6822      	ldr	r2, [r4, #0]
 80095ce:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80095d2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80095d6:	d108      	bne.n	80095ea <_scanf_float+0x1d2>
 80095d8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80095dc:	6022      	str	r2, [r4, #0]
 80095de:	f04f 0a01 	mov.w	sl, #1
 80095e2:	e7e2      	b.n	80095aa <_scanf_float+0x192>
 80095e4:	f1ba 0f02 	cmp.w	sl, #2
 80095e8:	d055      	beq.n	8009696 <_scanf_float+0x27e>
 80095ea:	2d01      	cmp	r5, #1
 80095ec:	d002      	beq.n	80095f4 <_scanf_float+0x1dc>
 80095ee:	2d04      	cmp	r5, #4
 80095f0:	f47f af44 	bne.w	800947c <_scanf_float+0x64>
 80095f4:	3501      	adds	r5, #1
 80095f6:	b2ed      	uxtb	r5, r5
 80095f8:	e7d7      	b.n	80095aa <_scanf_float+0x192>
 80095fa:	f1ba 0f01 	cmp.w	sl, #1
 80095fe:	f47f af3d 	bne.w	800947c <_scanf_float+0x64>
 8009602:	f04f 0a02 	mov.w	sl, #2
 8009606:	e7d0      	b.n	80095aa <_scanf_float+0x192>
 8009608:	b97d      	cbnz	r5, 800962a <_scanf_float+0x212>
 800960a:	f1b9 0f00 	cmp.w	r9, #0
 800960e:	f47f af38 	bne.w	8009482 <_scanf_float+0x6a>
 8009612:	6822      	ldr	r2, [r4, #0]
 8009614:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009618:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800961c:	f040 8108 	bne.w	8009830 <_scanf_float+0x418>
 8009620:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009624:	6022      	str	r2, [r4, #0]
 8009626:	2501      	movs	r5, #1
 8009628:	e7bf      	b.n	80095aa <_scanf_float+0x192>
 800962a:	2d03      	cmp	r5, #3
 800962c:	d0e2      	beq.n	80095f4 <_scanf_float+0x1dc>
 800962e:	2d05      	cmp	r5, #5
 8009630:	e7de      	b.n	80095f0 <_scanf_float+0x1d8>
 8009632:	2d02      	cmp	r5, #2
 8009634:	f47f af22 	bne.w	800947c <_scanf_float+0x64>
 8009638:	2503      	movs	r5, #3
 800963a:	e7b6      	b.n	80095aa <_scanf_float+0x192>
 800963c:	2d06      	cmp	r5, #6
 800963e:	f47f af1d 	bne.w	800947c <_scanf_float+0x64>
 8009642:	2507      	movs	r5, #7
 8009644:	e7b1      	b.n	80095aa <_scanf_float+0x192>
 8009646:	6822      	ldr	r2, [r4, #0]
 8009648:	0591      	lsls	r1, r2, #22
 800964a:	f57f af17 	bpl.w	800947c <_scanf_float+0x64>
 800964e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009652:	6022      	str	r2, [r4, #0]
 8009654:	f8cd 9008 	str.w	r9, [sp, #8]
 8009658:	e7a7      	b.n	80095aa <_scanf_float+0x192>
 800965a:	6822      	ldr	r2, [r4, #0]
 800965c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009660:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009664:	d006      	beq.n	8009674 <_scanf_float+0x25c>
 8009666:	0550      	lsls	r0, r2, #21
 8009668:	f57f af08 	bpl.w	800947c <_scanf_float+0x64>
 800966c:	f1b9 0f00 	cmp.w	r9, #0
 8009670:	f000 80de 	beq.w	8009830 <_scanf_float+0x418>
 8009674:	0591      	lsls	r1, r2, #22
 8009676:	bf58      	it	pl
 8009678:	9902      	ldrpl	r1, [sp, #8]
 800967a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800967e:	bf58      	it	pl
 8009680:	eba9 0101 	subpl.w	r1, r9, r1
 8009684:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009688:	bf58      	it	pl
 800968a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800968e:	6022      	str	r2, [r4, #0]
 8009690:	f04f 0900 	mov.w	r9, #0
 8009694:	e789      	b.n	80095aa <_scanf_float+0x192>
 8009696:	f04f 0a03 	mov.w	sl, #3
 800969a:	e786      	b.n	80095aa <_scanf_float+0x192>
 800969c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80096a0:	4639      	mov	r1, r7
 80096a2:	4640      	mov	r0, r8
 80096a4:	4798      	blx	r3
 80096a6:	2800      	cmp	r0, #0
 80096a8:	f43f aedb 	beq.w	8009462 <_scanf_float+0x4a>
 80096ac:	e6e6      	b.n	800947c <_scanf_float+0x64>
 80096ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80096b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80096b6:	463a      	mov	r2, r7
 80096b8:	4640      	mov	r0, r8
 80096ba:	4798      	blx	r3
 80096bc:	6923      	ldr	r3, [r4, #16]
 80096be:	3b01      	subs	r3, #1
 80096c0:	6123      	str	r3, [r4, #16]
 80096c2:	e6e8      	b.n	8009496 <_scanf_float+0x7e>
 80096c4:	1e6b      	subs	r3, r5, #1
 80096c6:	2b06      	cmp	r3, #6
 80096c8:	d824      	bhi.n	8009714 <_scanf_float+0x2fc>
 80096ca:	2d02      	cmp	r5, #2
 80096cc:	d836      	bhi.n	800973c <_scanf_float+0x324>
 80096ce:	9b01      	ldr	r3, [sp, #4]
 80096d0:	429e      	cmp	r6, r3
 80096d2:	f67f aee4 	bls.w	800949e <_scanf_float+0x86>
 80096d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80096da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80096de:	463a      	mov	r2, r7
 80096e0:	4640      	mov	r0, r8
 80096e2:	4798      	blx	r3
 80096e4:	6923      	ldr	r3, [r4, #16]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	6123      	str	r3, [r4, #16]
 80096ea:	e7f0      	b.n	80096ce <_scanf_float+0x2b6>
 80096ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80096f0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80096f4:	463a      	mov	r2, r7
 80096f6:	4640      	mov	r0, r8
 80096f8:	4798      	blx	r3
 80096fa:	6923      	ldr	r3, [r4, #16]
 80096fc:	3b01      	subs	r3, #1
 80096fe:	6123      	str	r3, [r4, #16]
 8009700:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009704:	fa5f fa8a 	uxtb.w	sl, sl
 8009708:	f1ba 0f02 	cmp.w	sl, #2
 800970c:	d1ee      	bne.n	80096ec <_scanf_float+0x2d4>
 800970e:	3d03      	subs	r5, #3
 8009710:	b2ed      	uxtb	r5, r5
 8009712:	1b76      	subs	r6, r6, r5
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	05da      	lsls	r2, r3, #23
 8009718:	d530      	bpl.n	800977c <_scanf_float+0x364>
 800971a:	055b      	lsls	r3, r3, #21
 800971c:	d511      	bpl.n	8009742 <_scanf_float+0x32a>
 800971e:	9b01      	ldr	r3, [sp, #4]
 8009720:	429e      	cmp	r6, r3
 8009722:	f67f aebc 	bls.w	800949e <_scanf_float+0x86>
 8009726:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800972a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800972e:	463a      	mov	r2, r7
 8009730:	4640      	mov	r0, r8
 8009732:	4798      	blx	r3
 8009734:	6923      	ldr	r3, [r4, #16]
 8009736:	3b01      	subs	r3, #1
 8009738:	6123      	str	r3, [r4, #16]
 800973a:	e7f0      	b.n	800971e <_scanf_float+0x306>
 800973c:	46aa      	mov	sl, r5
 800973e:	46b3      	mov	fp, r6
 8009740:	e7de      	b.n	8009700 <_scanf_float+0x2e8>
 8009742:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009746:	6923      	ldr	r3, [r4, #16]
 8009748:	2965      	cmp	r1, #101	@ 0x65
 800974a:	f103 33ff 	add.w	r3, r3, #4294967295
 800974e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009752:	6123      	str	r3, [r4, #16]
 8009754:	d00c      	beq.n	8009770 <_scanf_float+0x358>
 8009756:	2945      	cmp	r1, #69	@ 0x45
 8009758:	d00a      	beq.n	8009770 <_scanf_float+0x358>
 800975a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800975e:	463a      	mov	r2, r7
 8009760:	4640      	mov	r0, r8
 8009762:	4798      	blx	r3
 8009764:	6923      	ldr	r3, [r4, #16]
 8009766:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800976a:	3b01      	subs	r3, #1
 800976c:	1eb5      	subs	r5, r6, #2
 800976e:	6123      	str	r3, [r4, #16]
 8009770:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009774:	463a      	mov	r2, r7
 8009776:	4640      	mov	r0, r8
 8009778:	4798      	blx	r3
 800977a:	462e      	mov	r6, r5
 800977c:	6822      	ldr	r2, [r4, #0]
 800977e:	f012 0210 	ands.w	r2, r2, #16
 8009782:	d001      	beq.n	8009788 <_scanf_float+0x370>
 8009784:	2000      	movs	r0, #0
 8009786:	e68b      	b.n	80094a0 <_scanf_float+0x88>
 8009788:	7032      	strb	r2, [r6, #0]
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009790:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009794:	d11c      	bne.n	80097d0 <_scanf_float+0x3b8>
 8009796:	9b02      	ldr	r3, [sp, #8]
 8009798:	454b      	cmp	r3, r9
 800979a:	eba3 0209 	sub.w	r2, r3, r9
 800979e:	d123      	bne.n	80097e8 <_scanf_float+0x3d0>
 80097a0:	9901      	ldr	r1, [sp, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	4640      	mov	r0, r8
 80097a6:	f002 fd0b 	bl	800c1c0 <_strtod_r>
 80097aa:	9b03      	ldr	r3, [sp, #12]
 80097ac:	6821      	ldr	r1, [r4, #0]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f011 0f02 	tst.w	r1, #2
 80097b4:	ec57 6b10 	vmov	r6, r7, d0
 80097b8:	f103 0204 	add.w	r2, r3, #4
 80097bc:	d01f      	beq.n	80097fe <_scanf_float+0x3e6>
 80097be:	9903      	ldr	r1, [sp, #12]
 80097c0:	600a      	str	r2, [r1, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	e9c3 6700 	strd	r6, r7, [r3]
 80097c8:	68e3      	ldr	r3, [r4, #12]
 80097ca:	3301      	adds	r3, #1
 80097cc:	60e3      	str	r3, [r4, #12]
 80097ce:	e7d9      	b.n	8009784 <_scanf_float+0x36c>
 80097d0:	9b04      	ldr	r3, [sp, #16]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d0e4      	beq.n	80097a0 <_scanf_float+0x388>
 80097d6:	9905      	ldr	r1, [sp, #20]
 80097d8:	230a      	movs	r3, #10
 80097da:	3101      	adds	r1, #1
 80097dc:	4640      	mov	r0, r8
 80097de:	f002 fd6f 	bl	800c2c0 <_strtol_r>
 80097e2:	9b04      	ldr	r3, [sp, #16]
 80097e4:	9e05      	ldr	r6, [sp, #20]
 80097e6:	1ac2      	subs	r2, r0, r3
 80097e8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80097ec:	429e      	cmp	r6, r3
 80097ee:	bf28      	it	cs
 80097f0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80097f4:	4910      	ldr	r1, [pc, #64]	@ (8009838 <_scanf_float+0x420>)
 80097f6:	4630      	mov	r0, r6
 80097f8:	f000 f954 	bl	8009aa4 <siprintf>
 80097fc:	e7d0      	b.n	80097a0 <_scanf_float+0x388>
 80097fe:	f011 0f04 	tst.w	r1, #4
 8009802:	9903      	ldr	r1, [sp, #12]
 8009804:	600a      	str	r2, [r1, #0]
 8009806:	d1dc      	bne.n	80097c2 <_scanf_float+0x3aa>
 8009808:	681d      	ldr	r5, [r3, #0]
 800980a:	4632      	mov	r2, r6
 800980c:	463b      	mov	r3, r7
 800980e:	4630      	mov	r0, r6
 8009810:	4639      	mov	r1, r7
 8009812:	f7f7 f9b3 	bl	8000b7c <__aeabi_dcmpun>
 8009816:	b128      	cbz	r0, 8009824 <_scanf_float+0x40c>
 8009818:	4808      	ldr	r0, [pc, #32]	@ (800983c <_scanf_float+0x424>)
 800981a:	f000 fac9 	bl	8009db0 <nanf>
 800981e:	ed85 0a00 	vstr	s0, [r5]
 8009822:	e7d1      	b.n	80097c8 <_scanf_float+0x3b0>
 8009824:	4630      	mov	r0, r6
 8009826:	4639      	mov	r1, r7
 8009828:	f7f7 fa06 	bl	8000c38 <__aeabi_d2f>
 800982c:	6028      	str	r0, [r5, #0]
 800982e:	e7cb      	b.n	80097c8 <_scanf_float+0x3b0>
 8009830:	f04f 0900 	mov.w	r9, #0
 8009834:	e629      	b.n	800948a <_scanf_float+0x72>
 8009836:	bf00      	nop
 8009838:	0800d4e8 	.word	0x0800d4e8
 800983c:	0800d87d 	.word	0x0800d87d

08009840 <std>:
 8009840:	2300      	movs	r3, #0
 8009842:	b510      	push	{r4, lr}
 8009844:	4604      	mov	r4, r0
 8009846:	e9c0 3300 	strd	r3, r3, [r0]
 800984a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800984e:	6083      	str	r3, [r0, #8]
 8009850:	8181      	strh	r1, [r0, #12]
 8009852:	6643      	str	r3, [r0, #100]	@ 0x64
 8009854:	81c2      	strh	r2, [r0, #14]
 8009856:	6183      	str	r3, [r0, #24]
 8009858:	4619      	mov	r1, r3
 800985a:	2208      	movs	r2, #8
 800985c:	305c      	adds	r0, #92	@ 0x5c
 800985e:	f000 fa19 	bl	8009c94 <memset>
 8009862:	4b0d      	ldr	r3, [pc, #52]	@ (8009898 <std+0x58>)
 8009864:	6263      	str	r3, [r4, #36]	@ 0x24
 8009866:	4b0d      	ldr	r3, [pc, #52]	@ (800989c <std+0x5c>)
 8009868:	62a3      	str	r3, [r4, #40]	@ 0x28
 800986a:	4b0d      	ldr	r3, [pc, #52]	@ (80098a0 <std+0x60>)
 800986c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800986e:	4b0d      	ldr	r3, [pc, #52]	@ (80098a4 <std+0x64>)
 8009870:	6323      	str	r3, [r4, #48]	@ 0x30
 8009872:	4b0d      	ldr	r3, [pc, #52]	@ (80098a8 <std+0x68>)
 8009874:	6224      	str	r4, [r4, #32]
 8009876:	429c      	cmp	r4, r3
 8009878:	d006      	beq.n	8009888 <std+0x48>
 800987a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800987e:	4294      	cmp	r4, r2
 8009880:	d002      	beq.n	8009888 <std+0x48>
 8009882:	33d0      	adds	r3, #208	@ 0xd0
 8009884:	429c      	cmp	r4, r3
 8009886:	d105      	bne.n	8009894 <std+0x54>
 8009888:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800988c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009890:	f000 ba7c 	b.w	8009d8c <__retarget_lock_init_recursive>
 8009894:	bd10      	pop	{r4, pc}
 8009896:	bf00      	nop
 8009898:	08009ae5 	.word	0x08009ae5
 800989c:	08009b07 	.word	0x08009b07
 80098a0:	08009b3f 	.word	0x08009b3f
 80098a4:	08009b63 	.word	0x08009b63
 80098a8:	20004608 	.word	0x20004608

080098ac <stdio_exit_handler>:
 80098ac:	4a02      	ldr	r2, [pc, #8]	@ (80098b8 <stdio_exit_handler+0xc>)
 80098ae:	4903      	ldr	r1, [pc, #12]	@ (80098bc <stdio_exit_handler+0x10>)
 80098b0:	4803      	ldr	r0, [pc, #12]	@ (80098c0 <stdio_exit_handler+0x14>)
 80098b2:	f000 b869 	b.w	8009988 <_fwalk_sglue>
 80098b6:	bf00      	nop
 80098b8:	20000010 	.word	0x20000010
 80098bc:	0800c901 	.word	0x0800c901
 80098c0:	20000020 	.word	0x20000020

080098c4 <cleanup_stdio>:
 80098c4:	6841      	ldr	r1, [r0, #4]
 80098c6:	4b0c      	ldr	r3, [pc, #48]	@ (80098f8 <cleanup_stdio+0x34>)
 80098c8:	4299      	cmp	r1, r3
 80098ca:	b510      	push	{r4, lr}
 80098cc:	4604      	mov	r4, r0
 80098ce:	d001      	beq.n	80098d4 <cleanup_stdio+0x10>
 80098d0:	f003 f816 	bl	800c900 <_fflush_r>
 80098d4:	68a1      	ldr	r1, [r4, #8]
 80098d6:	4b09      	ldr	r3, [pc, #36]	@ (80098fc <cleanup_stdio+0x38>)
 80098d8:	4299      	cmp	r1, r3
 80098da:	d002      	beq.n	80098e2 <cleanup_stdio+0x1e>
 80098dc:	4620      	mov	r0, r4
 80098de:	f003 f80f 	bl	800c900 <_fflush_r>
 80098e2:	68e1      	ldr	r1, [r4, #12]
 80098e4:	4b06      	ldr	r3, [pc, #24]	@ (8009900 <cleanup_stdio+0x3c>)
 80098e6:	4299      	cmp	r1, r3
 80098e8:	d004      	beq.n	80098f4 <cleanup_stdio+0x30>
 80098ea:	4620      	mov	r0, r4
 80098ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098f0:	f003 b806 	b.w	800c900 <_fflush_r>
 80098f4:	bd10      	pop	{r4, pc}
 80098f6:	bf00      	nop
 80098f8:	20004608 	.word	0x20004608
 80098fc:	20004670 	.word	0x20004670
 8009900:	200046d8 	.word	0x200046d8

08009904 <global_stdio_init.part.0>:
 8009904:	b510      	push	{r4, lr}
 8009906:	4b0b      	ldr	r3, [pc, #44]	@ (8009934 <global_stdio_init.part.0+0x30>)
 8009908:	4c0b      	ldr	r4, [pc, #44]	@ (8009938 <global_stdio_init.part.0+0x34>)
 800990a:	4a0c      	ldr	r2, [pc, #48]	@ (800993c <global_stdio_init.part.0+0x38>)
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	4620      	mov	r0, r4
 8009910:	2200      	movs	r2, #0
 8009912:	2104      	movs	r1, #4
 8009914:	f7ff ff94 	bl	8009840 <std>
 8009918:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800991c:	2201      	movs	r2, #1
 800991e:	2109      	movs	r1, #9
 8009920:	f7ff ff8e 	bl	8009840 <std>
 8009924:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009928:	2202      	movs	r2, #2
 800992a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800992e:	2112      	movs	r1, #18
 8009930:	f7ff bf86 	b.w	8009840 <std>
 8009934:	20004740 	.word	0x20004740
 8009938:	20004608 	.word	0x20004608
 800993c:	080098ad 	.word	0x080098ad

08009940 <__sfp_lock_acquire>:
 8009940:	4801      	ldr	r0, [pc, #4]	@ (8009948 <__sfp_lock_acquire+0x8>)
 8009942:	f000 ba24 	b.w	8009d8e <__retarget_lock_acquire_recursive>
 8009946:	bf00      	nop
 8009948:	20004749 	.word	0x20004749

0800994c <__sfp_lock_release>:
 800994c:	4801      	ldr	r0, [pc, #4]	@ (8009954 <__sfp_lock_release+0x8>)
 800994e:	f000 ba1f 	b.w	8009d90 <__retarget_lock_release_recursive>
 8009952:	bf00      	nop
 8009954:	20004749 	.word	0x20004749

08009958 <__sinit>:
 8009958:	b510      	push	{r4, lr}
 800995a:	4604      	mov	r4, r0
 800995c:	f7ff fff0 	bl	8009940 <__sfp_lock_acquire>
 8009960:	6a23      	ldr	r3, [r4, #32]
 8009962:	b11b      	cbz	r3, 800996c <__sinit+0x14>
 8009964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009968:	f7ff bff0 	b.w	800994c <__sfp_lock_release>
 800996c:	4b04      	ldr	r3, [pc, #16]	@ (8009980 <__sinit+0x28>)
 800996e:	6223      	str	r3, [r4, #32]
 8009970:	4b04      	ldr	r3, [pc, #16]	@ (8009984 <__sinit+0x2c>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1f5      	bne.n	8009964 <__sinit+0xc>
 8009978:	f7ff ffc4 	bl	8009904 <global_stdio_init.part.0>
 800997c:	e7f2      	b.n	8009964 <__sinit+0xc>
 800997e:	bf00      	nop
 8009980:	080098c5 	.word	0x080098c5
 8009984:	20004740 	.word	0x20004740

08009988 <_fwalk_sglue>:
 8009988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800998c:	4607      	mov	r7, r0
 800998e:	4688      	mov	r8, r1
 8009990:	4614      	mov	r4, r2
 8009992:	2600      	movs	r6, #0
 8009994:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009998:	f1b9 0901 	subs.w	r9, r9, #1
 800999c:	d505      	bpl.n	80099aa <_fwalk_sglue+0x22>
 800999e:	6824      	ldr	r4, [r4, #0]
 80099a0:	2c00      	cmp	r4, #0
 80099a2:	d1f7      	bne.n	8009994 <_fwalk_sglue+0xc>
 80099a4:	4630      	mov	r0, r6
 80099a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099aa:	89ab      	ldrh	r3, [r5, #12]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d907      	bls.n	80099c0 <_fwalk_sglue+0x38>
 80099b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099b4:	3301      	adds	r3, #1
 80099b6:	d003      	beq.n	80099c0 <_fwalk_sglue+0x38>
 80099b8:	4629      	mov	r1, r5
 80099ba:	4638      	mov	r0, r7
 80099bc:	47c0      	blx	r8
 80099be:	4306      	orrs	r6, r0
 80099c0:	3568      	adds	r5, #104	@ 0x68
 80099c2:	e7e9      	b.n	8009998 <_fwalk_sglue+0x10>

080099c4 <iprintf>:
 80099c4:	b40f      	push	{r0, r1, r2, r3}
 80099c6:	b507      	push	{r0, r1, r2, lr}
 80099c8:	4906      	ldr	r1, [pc, #24]	@ (80099e4 <iprintf+0x20>)
 80099ca:	ab04      	add	r3, sp, #16
 80099cc:	6808      	ldr	r0, [r1, #0]
 80099ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80099d2:	6881      	ldr	r1, [r0, #8]
 80099d4:	9301      	str	r3, [sp, #4]
 80099d6:	f002 fdf7 	bl	800c5c8 <_vfiprintf_r>
 80099da:	b003      	add	sp, #12
 80099dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80099e0:	b004      	add	sp, #16
 80099e2:	4770      	bx	lr
 80099e4:	2000001c 	.word	0x2000001c

080099e8 <_puts_r>:
 80099e8:	6a03      	ldr	r3, [r0, #32]
 80099ea:	b570      	push	{r4, r5, r6, lr}
 80099ec:	6884      	ldr	r4, [r0, #8]
 80099ee:	4605      	mov	r5, r0
 80099f0:	460e      	mov	r6, r1
 80099f2:	b90b      	cbnz	r3, 80099f8 <_puts_r+0x10>
 80099f4:	f7ff ffb0 	bl	8009958 <__sinit>
 80099f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099fa:	07db      	lsls	r3, r3, #31
 80099fc:	d405      	bmi.n	8009a0a <_puts_r+0x22>
 80099fe:	89a3      	ldrh	r3, [r4, #12]
 8009a00:	0598      	lsls	r0, r3, #22
 8009a02:	d402      	bmi.n	8009a0a <_puts_r+0x22>
 8009a04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a06:	f000 f9c2 	bl	8009d8e <__retarget_lock_acquire_recursive>
 8009a0a:	89a3      	ldrh	r3, [r4, #12]
 8009a0c:	0719      	lsls	r1, r3, #28
 8009a0e:	d502      	bpl.n	8009a16 <_puts_r+0x2e>
 8009a10:	6923      	ldr	r3, [r4, #16]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d135      	bne.n	8009a82 <_puts_r+0x9a>
 8009a16:	4621      	mov	r1, r4
 8009a18:	4628      	mov	r0, r5
 8009a1a:	f000 f8e5 	bl	8009be8 <__swsetup_r>
 8009a1e:	b380      	cbz	r0, 8009a82 <_puts_r+0x9a>
 8009a20:	f04f 35ff 	mov.w	r5, #4294967295
 8009a24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a26:	07da      	lsls	r2, r3, #31
 8009a28:	d405      	bmi.n	8009a36 <_puts_r+0x4e>
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	059b      	lsls	r3, r3, #22
 8009a2e:	d402      	bmi.n	8009a36 <_puts_r+0x4e>
 8009a30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a32:	f000 f9ad 	bl	8009d90 <__retarget_lock_release_recursive>
 8009a36:	4628      	mov	r0, r5
 8009a38:	bd70      	pop	{r4, r5, r6, pc}
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	da04      	bge.n	8009a48 <_puts_r+0x60>
 8009a3e:	69a2      	ldr	r2, [r4, #24]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	dc17      	bgt.n	8009a74 <_puts_r+0x8c>
 8009a44:	290a      	cmp	r1, #10
 8009a46:	d015      	beq.n	8009a74 <_puts_r+0x8c>
 8009a48:	6823      	ldr	r3, [r4, #0]
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	6022      	str	r2, [r4, #0]
 8009a4e:	7019      	strb	r1, [r3, #0]
 8009a50:	68a3      	ldr	r3, [r4, #8]
 8009a52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a56:	3b01      	subs	r3, #1
 8009a58:	60a3      	str	r3, [r4, #8]
 8009a5a:	2900      	cmp	r1, #0
 8009a5c:	d1ed      	bne.n	8009a3a <_puts_r+0x52>
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	da11      	bge.n	8009a86 <_puts_r+0x9e>
 8009a62:	4622      	mov	r2, r4
 8009a64:	210a      	movs	r1, #10
 8009a66:	4628      	mov	r0, r5
 8009a68:	f000 f87f 	bl	8009b6a <__swbuf_r>
 8009a6c:	3001      	adds	r0, #1
 8009a6e:	d0d7      	beq.n	8009a20 <_puts_r+0x38>
 8009a70:	250a      	movs	r5, #10
 8009a72:	e7d7      	b.n	8009a24 <_puts_r+0x3c>
 8009a74:	4622      	mov	r2, r4
 8009a76:	4628      	mov	r0, r5
 8009a78:	f000 f877 	bl	8009b6a <__swbuf_r>
 8009a7c:	3001      	adds	r0, #1
 8009a7e:	d1e7      	bne.n	8009a50 <_puts_r+0x68>
 8009a80:	e7ce      	b.n	8009a20 <_puts_r+0x38>
 8009a82:	3e01      	subs	r6, #1
 8009a84:	e7e4      	b.n	8009a50 <_puts_r+0x68>
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	1c5a      	adds	r2, r3, #1
 8009a8a:	6022      	str	r2, [r4, #0]
 8009a8c:	220a      	movs	r2, #10
 8009a8e:	701a      	strb	r2, [r3, #0]
 8009a90:	e7ee      	b.n	8009a70 <_puts_r+0x88>
	...

08009a94 <puts>:
 8009a94:	4b02      	ldr	r3, [pc, #8]	@ (8009aa0 <puts+0xc>)
 8009a96:	4601      	mov	r1, r0
 8009a98:	6818      	ldr	r0, [r3, #0]
 8009a9a:	f7ff bfa5 	b.w	80099e8 <_puts_r>
 8009a9e:	bf00      	nop
 8009aa0:	2000001c 	.word	0x2000001c

08009aa4 <siprintf>:
 8009aa4:	b40e      	push	{r1, r2, r3}
 8009aa6:	b500      	push	{lr}
 8009aa8:	b09c      	sub	sp, #112	@ 0x70
 8009aaa:	ab1d      	add	r3, sp, #116	@ 0x74
 8009aac:	9002      	str	r0, [sp, #8]
 8009aae:	9006      	str	r0, [sp, #24]
 8009ab0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009ab4:	4809      	ldr	r0, [pc, #36]	@ (8009adc <siprintf+0x38>)
 8009ab6:	9107      	str	r1, [sp, #28]
 8009ab8:	9104      	str	r1, [sp, #16]
 8009aba:	4909      	ldr	r1, [pc, #36]	@ (8009ae0 <siprintf+0x3c>)
 8009abc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ac0:	9105      	str	r1, [sp, #20]
 8009ac2:	6800      	ldr	r0, [r0, #0]
 8009ac4:	9301      	str	r3, [sp, #4]
 8009ac6:	a902      	add	r1, sp, #8
 8009ac8:	f002 fc58 	bl	800c37c <_svfiprintf_r>
 8009acc:	9b02      	ldr	r3, [sp, #8]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	701a      	strb	r2, [r3, #0]
 8009ad2:	b01c      	add	sp, #112	@ 0x70
 8009ad4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ad8:	b003      	add	sp, #12
 8009ada:	4770      	bx	lr
 8009adc:	2000001c 	.word	0x2000001c
 8009ae0:	ffff0208 	.word	0xffff0208

08009ae4 <__sread>:
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aec:	f000 f900 	bl	8009cf0 <_read_r>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	bfab      	itete	ge
 8009af4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009af6:	89a3      	ldrhlt	r3, [r4, #12]
 8009af8:	181b      	addge	r3, r3, r0
 8009afa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009afe:	bfac      	ite	ge
 8009b00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b02:	81a3      	strhlt	r3, [r4, #12]
 8009b04:	bd10      	pop	{r4, pc}

08009b06 <__swrite>:
 8009b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b0a:	461f      	mov	r7, r3
 8009b0c:	898b      	ldrh	r3, [r1, #12]
 8009b0e:	05db      	lsls	r3, r3, #23
 8009b10:	4605      	mov	r5, r0
 8009b12:	460c      	mov	r4, r1
 8009b14:	4616      	mov	r6, r2
 8009b16:	d505      	bpl.n	8009b24 <__swrite+0x1e>
 8009b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f000 f8d4 	bl	8009ccc <_lseek_r>
 8009b24:	89a3      	ldrh	r3, [r4, #12]
 8009b26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b2e:	81a3      	strh	r3, [r4, #12]
 8009b30:	4632      	mov	r2, r6
 8009b32:	463b      	mov	r3, r7
 8009b34:	4628      	mov	r0, r5
 8009b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b3a:	f000 b8eb 	b.w	8009d14 <_write_r>

08009b3e <__sseek>:
 8009b3e:	b510      	push	{r4, lr}
 8009b40:	460c      	mov	r4, r1
 8009b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b46:	f000 f8c1 	bl	8009ccc <_lseek_r>
 8009b4a:	1c43      	adds	r3, r0, #1
 8009b4c:	89a3      	ldrh	r3, [r4, #12]
 8009b4e:	bf15      	itete	ne
 8009b50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009b52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009b56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009b5a:	81a3      	strheq	r3, [r4, #12]
 8009b5c:	bf18      	it	ne
 8009b5e:	81a3      	strhne	r3, [r4, #12]
 8009b60:	bd10      	pop	{r4, pc}

08009b62 <__sclose>:
 8009b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b66:	f000 b8a1 	b.w	8009cac <_close_r>

08009b6a <__swbuf_r>:
 8009b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6c:	460e      	mov	r6, r1
 8009b6e:	4614      	mov	r4, r2
 8009b70:	4605      	mov	r5, r0
 8009b72:	b118      	cbz	r0, 8009b7c <__swbuf_r+0x12>
 8009b74:	6a03      	ldr	r3, [r0, #32]
 8009b76:	b90b      	cbnz	r3, 8009b7c <__swbuf_r+0x12>
 8009b78:	f7ff feee 	bl	8009958 <__sinit>
 8009b7c:	69a3      	ldr	r3, [r4, #24]
 8009b7e:	60a3      	str	r3, [r4, #8]
 8009b80:	89a3      	ldrh	r3, [r4, #12]
 8009b82:	071a      	lsls	r2, r3, #28
 8009b84:	d501      	bpl.n	8009b8a <__swbuf_r+0x20>
 8009b86:	6923      	ldr	r3, [r4, #16]
 8009b88:	b943      	cbnz	r3, 8009b9c <__swbuf_r+0x32>
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	f000 f82b 	bl	8009be8 <__swsetup_r>
 8009b92:	b118      	cbz	r0, 8009b9c <__swbuf_r+0x32>
 8009b94:	f04f 37ff 	mov.w	r7, #4294967295
 8009b98:	4638      	mov	r0, r7
 8009b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	6922      	ldr	r2, [r4, #16]
 8009ba0:	1a98      	subs	r0, r3, r2
 8009ba2:	6963      	ldr	r3, [r4, #20]
 8009ba4:	b2f6      	uxtb	r6, r6
 8009ba6:	4283      	cmp	r3, r0
 8009ba8:	4637      	mov	r7, r6
 8009baa:	dc05      	bgt.n	8009bb8 <__swbuf_r+0x4e>
 8009bac:	4621      	mov	r1, r4
 8009bae:	4628      	mov	r0, r5
 8009bb0:	f002 fea6 	bl	800c900 <_fflush_r>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d1ed      	bne.n	8009b94 <__swbuf_r+0x2a>
 8009bb8:	68a3      	ldr	r3, [r4, #8]
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	60a3      	str	r3, [r4, #8]
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	1c5a      	adds	r2, r3, #1
 8009bc2:	6022      	str	r2, [r4, #0]
 8009bc4:	701e      	strb	r6, [r3, #0]
 8009bc6:	6962      	ldr	r2, [r4, #20]
 8009bc8:	1c43      	adds	r3, r0, #1
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d004      	beq.n	8009bd8 <__swbuf_r+0x6e>
 8009bce:	89a3      	ldrh	r3, [r4, #12]
 8009bd0:	07db      	lsls	r3, r3, #31
 8009bd2:	d5e1      	bpl.n	8009b98 <__swbuf_r+0x2e>
 8009bd4:	2e0a      	cmp	r6, #10
 8009bd6:	d1df      	bne.n	8009b98 <__swbuf_r+0x2e>
 8009bd8:	4621      	mov	r1, r4
 8009bda:	4628      	mov	r0, r5
 8009bdc:	f002 fe90 	bl	800c900 <_fflush_r>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d0d9      	beq.n	8009b98 <__swbuf_r+0x2e>
 8009be4:	e7d6      	b.n	8009b94 <__swbuf_r+0x2a>
	...

08009be8 <__swsetup_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4b29      	ldr	r3, [pc, #164]	@ (8009c90 <__swsetup_r+0xa8>)
 8009bec:	4605      	mov	r5, r0
 8009bee:	6818      	ldr	r0, [r3, #0]
 8009bf0:	460c      	mov	r4, r1
 8009bf2:	b118      	cbz	r0, 8009bfc <__swsetup_r+0x14>
 8009bf4:	6a03      	ldr	r3, [r0, #32]
 8009bf6:	b90b      	cbnz	r3, 8009bfc <__swsetup_r+0x14>
 8009bf8:	f7ff feae 	bl	8009958 <__sinit>
 8009bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c00:	0719      	lsls	r1, r3, #28
 8009c02:	d422      	bmi.n	8009c4a <__swsetup_r+0x62>
 8009c04:	06da      	lsls	r2, r3, #27
 8009c06:	d407      	bmi.n	8009c18 <__swsetup_r+0x30>
 8009c08:	2209      	movs	r2, #9
 8009c0a:	602a      	str	r2, [r5, #0]
 8009c0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c10:	81a3      	strh	r3, [r4, #12]
 8009c12:	f04f 30ff 	mov.w	r0, #4294967295
 8009c16:	e033      	b.n	8009c80 <__swsetup_r+0x98>
 8009c18:	0758      	lsls	r0, r3, #29
 8009c1a:	d512      	bpl.n	8009c42 <__swsetup_r+0x5a>
 8009c1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c1e:	b141      	cbz	r1, 8009c32 <__swsetup_r+0x4a>
 8009c20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c24:	4299      	cmp	r1, r3
 8009c26:	d002      	beq.n	8009c2e <__swsetup_r+0x46>
 8009c28:	4628      	mov	r0, r5
 8009c2a:	f000 ff15 	bl	800aa58 <_free_r>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009c38:	81a3      	strh	r3, [r4, #12]
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	6063      	str	r3, [r4, #4]
 8009c3e:	6923      	ldr	r3, [r4, #16]
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	89a3      	ldrh	r3, [r4, #12]
 8009c44:	f043 0308 	orr.w	r3, r3, #8
 8009c48:	81a3      	strh	r3, [r4, #12]
 8009c4a:	6923      	ldr	r3, [r4, #16]
 8009c4c:	b94b      	cbnz	r3, 8009c62 <__swsetup_r+0x7a>
 8009c4e:	89a3      	ldrh	r3, [r4, #12]
 8009c50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c58:	d003      	beq.n	8009c62 <__swsetup_r+0x7a>
 8009c5a:	4621      	mov	r1, r4
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	f002 fe9d 	bl	800c99c <__smakebuf_r>
 8009c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c66:	f013 0201 	ands.w	r2, r3, #1
 8009c6a:	d00a      	beq.n	8009c82 <__swsetup_r+0x9a>
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	60a2      	str	r2, [r4, #8]
 8009c70:	6962      	ldr	r2, [r4, #20]
 8009c72:	4252      	negs	r2, r2
 8009c74:	61a2      	str	r2, [r4, #24]
 8009c76:	6922      	ldr	r2, [r4, #16]
 8009c78:	b942      	cbnz	r2, 8009c8c <__swsetup_r+0xa4>
 8009c7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c7e:	d1c5      	bne.n	8009c0c <__swsetup_r+0x24>
 8009c80:	bd38      	pop	{r3, r4, r5, pc}
 8009c82:	0799      	lsls	r1, r3, #30
 8009c84:	bf58      	it	pl
 8009c86:	6962      	ldrpl	r2, [r4, #20]
 8009c88:	60a2      	str	r2, [r4, #8]
 8009c8a:	e7f4      	b.n	8009c76 <__swsetup_r+0x8e>
 8009c8c:	2000      	movs	r0, #0
 8009c8e:	e7f7      	b.n	8009c80 <__swsetup_r+0x98>
 8009c90:	2000001c 	.word	0x2000001c

08009c94 <memset>:
 8009c94:	4402      	add	r2, r0
 8009c96:	4603      	mov	r3, r0
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d100      	bne.n	8009c9e <memset+0xa>
 8009c9c:	4770      	bx	lr
 8009c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8009ca2:	e7f9      	b.n	8009c98 <memset+0x4>

08009ca4 <_localeconv_r>:
 8009ca4:	4800      	ldr	r0, [pc, #0]	@ (8009ca8 <_localeconv_r+0x4>)
 8009ca6:	4770      	bx	lr
 8009ca8:	2000015c 	.word	0x2000015c

08009cac <_close_r>:
 8009cac:	b538      	push	{r3, r4, r5, lr}
 8009cae:	4d06      	ldr	r5, [pc, #24]	@ (8009cc8 <_close_r+0x1c>)
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	4608      	mov	r0, r1
 8009cb6:	602b      	str	r3, [r5, #0]
 8009cb8:	f7f7 feb0 	bl	8001a1c <_close>
 8009cbc:	1c43      	adds	r3, r0, #1
 8009cbe:	d102      	bne.n	8009cc6 <_close_r+0x1a>
 8009cc0:	682b      	ldr	r3, [r5, #0]
 8009cc2:	b103      	cbz	r3, 8009cc6 <_close_r+0x1a>
 8009cc4:	6023      	str	r3, [r4, #0]
 8009cc6:	bd38      	pop	{r3, r4, r5, pc}
 8009cc8:	20004744 	.word	0x20004744

08009ccc <_lseek_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	4d07      	ldr	r5, [pc, #28]	@ (8009cec <_lseek_r+0x20>)
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	4608      	mov	r0, r1
 8009cd4:	4611      	mov	r1, r2
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	602a      	str	r2, [r5, #0]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	f7f7 fec5 	bl	8001a6a <_lseek>
 8009ce0:	1c43      	adds	r3, r0, #1
 8009ce2:	d102      	bne.n	8009cea <_lseek_r+0x1e>
 8009ce4:	682b      	ldr	r3, [r5, #0]
 8009ce6:	b103      	cbz	r3, 8009cea <_lseek_r+0x1e>
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	bd38      	pop	{r3, r4, r5, pc}
 8009cec:	20004744 	.word	0x20004744

08009cf0 <_read_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4d07      	ldr	r5, [pc, #28]	@ (8009d10 <_read_r+0x20>)
 8009cf4:	4604      	mov	r4, r0
 8009cf6:	4608      	mov	r0, r1
 8009cf8:	4611      	mov	r1, r2
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	602a      	str	r2, [r5, #0]
 8009cfe:	461a      	mov	r2, r3
 8009d00:	f7f7 fe53 	bl	80019aa <_read>
 8009d04:	1c43      	adds	r3, r0, #1
 8009d06:	d102      	bne.n	8009d0e <_read_r+0x1e>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	b103      	cbz	r3, 8009d0e <_read_r+0x1e>
 8009d0c:	6023      	str	r3, [r4, #0]
 8009d0e:	bd38      	pop	{r3, r4, r5, pc}
 8009d10:	20004744 	.word	0x20004744

08009d14 <_write_r>:
 8009d14:	b538      	push	{r3, r4, r5, lr}
 8009d16:	4d07      	ldr	r5, [pc, #28]	@ (8009d34 <_write_r+0x20>)
 8009d18:	4604      	mov	r4, r0
 8009d1a:	4608      	mov	r0, r1
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	2200      	movs	r2, #0
 8009d20:	602a      	str	r2, [r5, #0]
 8009d22:	461a      	mov	r2, r3
 8009d24:	f7f7 fe5e 	bl	80019e4 <_write>
 8009d28:	1c43      	adds	r3, r0, #1
 8009d2a:	d102      	bne.n	8009d32 <_write_r+0x1e>
 8009d2c:	682b      	ldr	r3, [r5, #0]
 8009d2e:	b103      	cbz	r3, 8009d32 <_write_r+0x1e>
 8009d30:	6023      	str	r3, [r4, #0]
 8009d32:	bd38      	pop	{r3, r4, r5, pc}
 8009d34:	20004744 	.word	0x20004744

08009d38 <__errno>:
 8009d38:	4b01      	ldr	r3, [pc, #4]	@ (8009d40 <__errno+0x8>)
 8009d3a:	6818      	ldr	r0, [r3, #0]
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	2000001c 	.word	0x2000001c

08009d44 <__libc_init_array>:
 8009d44:	b570      	push	{r4, r5, r6, lr}
 8009d46:	4d0d      	ldr	r5, [pc, #52]	@ (8009d7c <__libc_init_array+0x38>)
 8009d48:	4c0d      	ldr	r4, [pc, #52]	@ (8009d80 <__libc_init_array+0x3c>)
 8009d4a:	1b64      	subs	r4, r4, r5
 8009d4c:	10a4      	asrs	r4, r4, #2
 8009d4e:	2600      	movs	r6, #0
 8009d50:	42a6      	cmp	r6, r4
 8009d52:	d109      	bne.n	8009d68 <__libc_init_array+0x24>
 8009d54:	4d0b      	ldr	r5, [pc, #44]	@ (8009d84 <__libc_init_array+0x40>)
 8009d56:	4c0c      	ldr	r4, [pc, #48]	@ (8009d88 <__libc_init_array+0x44>)
 8009d58:	f003 fae0 	bl	800d31c <_init>
 8009d5c:	1b64      	subs	r4, r4, r5
 8009d5e:	10a4      	asrs	r4, r4, #2
 8009d60:	2600      	movs	r6, #0
 8009d62:	42a6      	cmp	r6, r4
 8009d64:	d105      	bne.n	8009d72 <__libc_init_array+0x2e>
 8009d66:	bd70      	pop	{r4, r5, r6, pc}
 8009d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d6c:	4798      	blx	r3
 8009d6e:	3601      	adds	r6, #1
 8009d70:	e7ee      	b.n	8009d50 <__libc_init_array+0xc>
 8009d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d76:	4798      	blx	r3
 8009d78:	3601      	adds	r6, #1
 8009d7a:	e7f2      	b.n	8009d62 <__libc_init_array+0x1e>
 8009d7c:	0800d8e8 	.word	0x0800d8e8
 8009d80:	0800d8e8 	.word	0x0800d8e8
 8009d84:	0800d8e8 	.word	0x0800d8e8
 8009d88:	0800d8ec 	.word	0x0800d8ec

08009d8c <__retarget_lock_init_recursive>:
 8009d8c:	4770      	bx	lr

08009d8e <__retarget_lock_acquire_recursive>:
 8009d8e:	4770      	bx	lr

08009d90 <__retarget_lock_release_recursive>:
 8009d90:	4770      	bx	lr

08009d92 <memcpy>:
 8009d92:	440a      	add	r2, r1
 8009d94:	4291      	cmp	r1, r2
 8009d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d9a:	d100      	bne.n	8009d9e <memcpy+0xc>
 8009d9c:	4770      	bx	lr
 8009d9e:	b510      	push	{r4, lr}
 8009da0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009da4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009da8:	4291      	cmp	r1, r2
 8009daa:	d1f9      	bne.n	8009da0 <memcpy+0xe>
 8009dac:	bd10      	pop	{r4, pc}
	...

08009db0 <nanf>:
 8009db0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009db8 <nanf+0x8>
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	7fc00000 	.word	0x7fc00000

08009dbc <quorem>:
 8009dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc0:	6903      	ldr	r3, [r0, #16]
 8009dc2:	690c      	ldr	r4, [r1, #16]
 8009dc4:	42a3      	cmp	r3, r4
 8009dc6:	4607      	mov	r7, r0
 8009dc8:	db7e      	blt.n	8009ec8 <quorem+0x10c>
 8009dca:	3c01      	subs	r4, #1
 8009dcc:	f101 0814 	add.w	r8, r1, #20
 8009dd0:	00a3      	lsls	r3, r4, #2
 8009dd2:	f100 0514 	add.w	r5, r0, #20
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ddc:	9301      	str	r3, [sp, #4]
 8009dde:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009de2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009de6:	3301      	adds	r3, #1
 8009de8:	429a      	cmp	r2, r3
 8009dea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009dee:	fbb2 f6f3 	udiv	r6, r2, r3
 8009df2:	d32e      	bcc.n	8009e52 <quorem+0x96>
 8009df4:	f04f 0a00 	mov.w	sl, #0
 8009df8:	46c4      	mov	ip, r8
 8009dfa:	46ae      	mov	lr, r5
 8009dfc:	46d3      	mov	fp, sl
 8009dfe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009e02:	b298      	uxth	r0, r3
 8009e04:	fb06 a000 	mla	r0, r6, r0, sl
 8009e08:	0c02      	lsrs	r2, r0, #16
 8009e0a:	0c1b      	lsrs	r3, r3, #16
 8009e0c:	fb06 2303 	mla	r3, r6, r3, r2
 8009e10:	f8de 2000 	ldr.w	r2, [lr]
 8009e14:	b280      	uxth	r0, r0
 8009e16:	b292      	uxth	r2, r2
 8009e18:	1a12      	subs	r2, r2, r0
 8009e1a:	445a      	add	r2, fp
 8009e1c:	f8de 0000 	ldr.w	r0, [lr]
 8009e20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009e2a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009e2e:	b292      	uxth	r2, r2
 8009e30:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009e34:	45e1      	cmp	r9, ip
 8009e36:	f84e 2b04 	str.w	r2, [lr], #4
 8009e3a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009e3e:	d2de      	bcs.n	8009dfe <quorem+0x42>
 8009e40:	9b00      	ldr	r3, [sp, #0]
 8009e42:	58eb      	ldr	r3, [r5, r3]
 8009e44:	b92b      	cbnz	r3, 8009e52 <quorem+0x96>
 8009e46:	9b01      	ldr	r3, [sp, #4]
 8009e48:	3b04      	subs	r3, #4
 8009e4a:	429d      	cmp	r5, r3
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	d32f      	bcc.n	8009eb0 <quorem+0xf4>
 8009e50:	613c      	str	r4, [r7, #16]
 8009e52:	4638      	mov	r0, r7
 8009e54:	f001 f9c4 	bl	800b1e0 <__mcmp>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	db25      	blt.n	8009ea8 <quorem+0xec>
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	2000      	movs	r0, #0
 8009e60:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e64:	f8d1 c000 	ldr.w	ip, [r1]
 8009e68:	fa1f fe82 	uxth.w	lr, r2
 8009e6c:	fa1f f38c 	uxth.w	r3, ip
 8009e70:	eba3 030e 	sub.w	r3, r3, lr
 8009e74:	4403      	add	r3, r0
 8009e76:	0c12      	lsrs	r2, r2, #16
 8009e78:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009e7c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e86:	45c1      	cmp	r9, r8
 8009e88:	f841 3b04 	str.w	r3, [r1], #4
 8009e8c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e90:	d2e6      	bcs.n	8009e60 <quorem+0xa4>
 8009e92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e9a:	b922      	cbnz	r2, 8009ea6 <quorem+0xea>
 8009e9c:	3b04      	subs	r3, #4
 8009e9e:	429d      	cmp	r5, r3
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	d30b      	bcc.n	8009ebc <quorem+0x100>
 8009ea4:	613c      	str	r4, [r7, #16]
 8009ea6:	3601      	adds	r6, #1
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	b003      	add	sp, #12
 8009eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb0:	6812      	ldr	r2, [r2, #0]
 8009eb2:	3b04      	subs	r3, #4
 8009eb4:	2a00      	cmp	r2, #0
 8009eb6:	d1cb      	bne.n	8009e50 <quorem+0x94>
 8009eb8:	3c01      	subs	r4, #1
 8009eba:	e7c6      	b.n	8009e4a <quorem+0x8e>
 8009ebc:	6812      	ldr	r2, [r2, #0]
 8009ebe:	3b04      	subs	r3, #4
 8009ec0:	2a00      	cmp	r2, #0
 8009ec2:	d1ef      	bne.n	8009ea4 <quorem+0xe8>
 8009ec4:	3c01      	subs	r4, #1
 8009ec6:	e7ea      	b.n	8009e9e <quorem+0xe2>
 8009ec8:	2000      	movs	r0, #0
 8009eca:	e7ee      	b.n	8009eaa <quorem+0xee>
 8009ecc:	0000      	movs	r0, r0
	...

08009ed0 <_dtoa_r>:
 8009ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed4:	69c7      	ldr	r7, [r0, #28]
 8009ed6:	b099      	sub	sp, #100	@ 0x64
 8009ed8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009edc:	ec55 4b10 	vmov	r4, r5, d0
 8009ee0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009ee2:	9109      	str	r1, [sp, #36]	@ 0x24
 8009ee4:	4683      	mov	fp, r0
 8009ee6:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ee8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009eea:	b97f      	cbnz	r7, 8009f0c <_dtoa_r+0x3c>
 8009eec:	2010      	movs	r0, #16
 8009eee:	f000 fdfd 	bl	800aaec <malloc>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	f8cb 001c 	str.w	r0, [fp, #28]
 8009ef8:	b920      	cbnz	r0, 8009f04 <_dtoa_r+0x34>
 8009efa:	4ba7      	ldr	r3, [pc, #668]	@ (800a198 <_dtoa_r+0x2c8>)
 8009efc:	21ef      	movs	r1, #239	@ 0xef
 8009efe:	48a7      	ldr	r0, [pc, #668]	@ (800a19c <_dtoa_r+0x2cc>)
 8009f00:	f002 fdee 	bl	800cae0 <__assert_func>
 8009f04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009f08:	6007      	str	r7, [r0, #0]
 8009f0a:	60c7      	str	r7, [r0, #12]
 8009f0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009f10:	6819      	ldr	r1, [r3, #0]
 8009f12:	b159      	cbz	r1, 8009f2c <_dtoa_r+0x5c>
 8009f14:	685a      	ldr	r2, [r3, #4]
 8009f16:	604a      	str	r2, [r1, #4]
 8009f18:	2301      	movs	r3, #1
 8009f1a:	4093      	lsls	r3, r2
 8009f1c:	608b      	str	r3, [r1, #8]
 8009f1e:	4658      	mov	r0, fp
 8009f20:	f000 feda 	bl	800acd8 <_Bfree>
 8009f24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	601a      	str	r2, [r3, #0]
 8009f2c:	1e2b      	subs	r3, r5, #0
 8009f2e:	bfb9      	ittee	lt
 8009f30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009f34:	9303      	strlt	r3, [sp, #12]
 8009f36:	2300      	movge	r3, #0
 8009f38:	6033      	strge	r3, [r6, #0]
 8009f3a:	9f03      	ldr	r7, [sp, #12]
 8009f3c:	4b98      	ldr	r3, [pc, #608]	@ (800a1a0 <_dtoa_r+0x2d0>)
 8009f3e:	bfbc      	itt	lt
 8009f40:	2201      	movlt	r2, #1
 8009f42:	6032      	strlt	r2, [r6, #0]
 8009f44:	43bb      	bics	r3, r7
 8009f46:	d112      	bne.n	8009f6e <_dtoa_r+0x9e>
 8009f48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009f4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009f4e:	6013      	str	r3, [r2, #0]
 8009f50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f54:	4323      	orrs	r3, r4
 8009f56:	f000 854d 	beq.w	800a9f4 <_dtoa_r+0xb24>
 8009f5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a1b4 <_dtoa_r+0x2e4>
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 854f 	beq.w	800aa04 <_dtoa_r+0xb34>
 8009f66:	f10a 0303 	add.w	r3, sl, #3
 8009f6a:	f000 bd49 	b.w	800aa00 <_dtoa_r+0xb30>
 8009f6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f72:	2200      	movs	r2, #0
 8009f74:	ec51 0b17 	vmov	r0, r1, d7
 8009f78:	2300      	movs	r3, #0
 8009f7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009f7e:	f7f6 fdcb 	bl	8000b18 <__aeabi_dcmpeq>
 8009f82:	4680      	mov	r8, r0
 8009f84:	b158      	cbz	r0, 8009f9e <_dtoa_r+0xce>
 8009f86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009f88:	2301      	movs	r3, #1
 8009f8a:	6013      	str	r3, [r2, #0]
 8009f8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f8e:	b113      	cbz	r3, 8009f96 <_dtoa_r+0xc6>
 8009f90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009f92:	4b84      	ldr	r3, [pc, #528]	@ (800a1a4 <_dtoa_r+0x2d4>)
 8009f94:	6013      	str	r3, [r2, #0]
 8009f96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a1b8 <_dtoa_r+0x2e8>
 8009f9a:	f000 bd33 	b.w	800aa04 <_dtoa_r+0xb34>
 8009f9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009fa2:	aa16      	add	r2, sp, #88	@ 0x58
 8009fa4:	a917      	add	r1, sp, #92	@ 0x5c
 8009fa6:	4658      	mov	r0, fp
 8009fa8:	f001 fa3a 	bl	800b420 <__d2b>
 8009fac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009fb0:	4681      	mov	r9, r0
 8009fb2:	2e00      	cmp	r6, #0
 8009fb4:	d077      	beq.n	800a0a6 <_dtoa_r+0x1d6>
 8009fb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fb8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009fbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fc4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009fc8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009fcc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	4b74      	ldr	r3, [pc, #464]	@ (800a1a8 <_dtoa_r+0x2d8>)
 8009fd6:	f7f6 f97f 	bl	80002d8 <__aeabi_dsub>
 8009fda:	a369      	add	r3, pc, #420	@ (adr r3, 800a180 <_dtoa_r+0x2b0>)
 8009fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe0:	f7f6 fb32 	bl	8000648 <__aeabi_dmul>
 8009fe4:	a368      	add	r3, pc, #416	@ (adr r3, 800a188 <_dtoa_r+0x2b8>)
 8009fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fea:	f7f6 f977 	bl	80002dc <__adddf3>
 8009fee:	4604      	mov	r4, r0
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	460d      	mov	r5, r1
 8009ff4:	f7f6 fabe 	bl	8000574 <__aeabi_i2d>
 8009ff8:	a365      	add	r3, pc, #404	@ (adr r3, 800a190 <_dtoa_r+0x2c0>)
 8009ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffe:	f7f6 fb23 	bl	8000648 <__aeabi_dmul>
 800a002:	4602      	mov	r2, r0
 800a004:	460b      	mov	r3, r1
 800a006:	4620      	mov	r0, r4
 800a008:	4629      	mov	r1, r5
 800a00a:	f7f6 f967 	bl	80002dc <__adddf3>
 800a00e:	4604      	mov	r4, r0
 800a010:	460d      	mov	r5, r1
 800a012:	f7f6 fdc9 	bl	8000ba8 <__aeabi_d2iz>
 800a016:	2200      	movs	r2, #0
 800a018:	4607      	mov	r7, r0
 800a01a:	2300      	movs	r3, #0
 800a01c:	4620      	mov	r0, r4
 800a01e:	4629      	mov	r1, r5
 800a020:	f7f6 fd84 	bl	8000b2c <__aeabi_dcmplt>
 800a024:	b140      	cbz	r0, 800a038 <_dtoa_r+0x168>
 800a026:	4638      	mov	r0, r7
 800a028:	f7f6 faa4 	bl	8000574 <__aeabi_i2d>
 800a02c:	4622      	mov	r2, r4
 800a02e:	462b      	mov	r3, r5
 800a030:	f7f6 fd72 	bl	8000b18 <__aeabi_dcmpeq>
 800a034:	b900      	cbnz	r0, 800a038 <_dtoa_r+0x168>
 800a036:	3f01      	subs	r7, #1
 800a038:	2f16      	cmp	r7, #22
 800a03a:	d851      	bhi.n	800a0e0 <_dtoa_r+0x210>
 800a03c:	4b5b      	ldr	r3, [pc, #364]	@ (800a1ac <_dtoa_r+0x2dc>)
 800a03e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a046:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a04a:	f7f6 fd6f 	bl	8000b2c <__aeabi_dcmplt>
 800a04e:	2800      	cmp	r0, #0
 800a050:	d048      	beq.n	800a0e4 <_dtoa_r+0x214>
 800a052:	3f01      	subs	r7, #1
 800a054:	2300      	movs	r3, #0
 800a056:	9312      	str	r3, [sp, #72]	@ 0x48
 800a058:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a05a:	1b9b      	subs	r3, r3, r6
 800a05c:	1e5a      	subs	r2, r3, #1
 800a05e:	bf44      	itt	mi
 800a060:	f1c3 0801 	rsbmi	r8, r3, #1
 800a064:	2300      	movmi	r3, #0
 800a066:	9208      	str	r2, [sp, #32]
 800a068:	bf54      	ite	pl
 800a06a:	f04f 0800 	movpl.w	r8, #0
 800a06e:	9308      	strmi	r3, [sp, #32]
 800a070:	2f00      	cmp	r7, #0
 800a072:	db39      	blt.n	800a0e8 <_dtoa_r+0x218>
 800a074:	9b08      	ldr	r3, [sp, #32]
 800a076:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a078:	443b      	add	r3, r7
 800a07a:	9308      	str	r3, [sp, #32]
 800a07c:	2300      	movs	r3, #0
 800a07e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a080:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a082:	2b09      	cmp	r3, #9
 800a084:	d864      	bhi.n	800a150 <_dtoa_r+0x280>
 800a086:	2b05      	cmp	r3, #5
 800a088:	bfc4      	itt	gt
 800a08a:	3b04      	subgt	r3, #4
 800a08c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a090:	f1a3 0302 	sub.w	r3, r3, #2
 800a094:	bfcc      	ite	gt
 800a096:	2400      	movgt	r4, #0
 800a098:	2401      	movle	r4, #1
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	d863      	bhi.n	800a166 <_dtoa_r+0x296>
 800a09e:	e8df f003 	tbb	[pc, r3]
 800a0a2:	372a      	.short	0x372a
 800a0a4:	5535      	.short	0x5535
 800a0a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a0aa:	441e      	add	r6, r3
 800a0ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a0b0:	2b20      	cmp	r3, #32
 800a0b2:	bfc1      	itttt	gt
 800a0b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a0b8:	409f      	lslgt	r7, r3
 800a0ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a0be:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a0c2:	bfd6      	itet	le
 800a0c4:	f1c3 0320 	rsble	r3, r3, #32
 800a0c8:	ea47 0003 	orrgt.w	r0, r7, r3
 800a0cc:	fa04 f003 	lslle.w	r0, r4, r3
 800a0d0:	f7f6 fa40 	bl	8000554 <__aeabi_ui2d>
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a0da:	3e01      	subs	r6, #1
 800a0dc:	9214      	str	r2, [sp, #80]	@ 0x50
 800a0de:	e777      	b.n	8009fd0 <_dtoa_r+0x100>
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e7b8      	b.n	800a056 <_dtoa_r+0x186>
 800a0e4:	9012      	str	r0, [sp, #72]	@ 0x48
 800a0e6:	e7b7      	b.n	800a058 <_dtoa_r+0x188>
 800a0e8:	427b      	negs	r3, r7
 800a0ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	eba8 0807 	sub.w	r8, r8, r7
 800a0f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a0f4:	e7c4      	b.n	800a080 <_dtoa_r+0x1b0>
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	dc35      	bgt.n	800a16c <_dtoa_r+0x29c>
 800a100:	2301      	movs	r3, #1
 800a102:	9300      	str	r3, [sp, #0]
 800a104:	9307      	str	r3, [sp, #28]
 800a106:	461a      	mov	r2, r3
 800a108:	920e      	str	r2, [sp, #56]	@ 0x38
 800a10a:	e00b      	b.n	800a124 <_dtoa_r+0x254>
 800a10c:	2301      	movs	r3, #1
 800a10e:	e7f3      	b.n	800a0f8 <_dtoa_r+0x228>
 800a110:	2300      	movs	r3, #0
 800a112:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a114:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a116:	18fb      	adds	r3, r7, r3
 800a118:	9300      	str	r3, [sp, #0]
 800a11a:	3301      	adds	r3, #1
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	9307      	str	r3, [sp, #28]
 800a120:	bfb8      	it	lt
 800a122:	2301      	movlt	r3, #1
 800a124:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a128:	2100      	movs	r1, #0
 800a12a:	2204      	movs	r2, #4
 800a12c:	f102 0514 	add.w	r5, r2, #20
 800a130:	429d      	cmp	r5, r3
 800a132:	d91f      	bls.n	800a174 <_dtoa_r+0x2a4>
 800a134:	6041      	str	r1, [r0, #4]
 800a136:	4658      	mov	r0, fp
 800a138:	f000 fd8e 	bl	800ac58 <_Balloc>
 800a13c:	4682      	mov	sl, r0
 800a13e:	2800      	cmp	r0, #0
 800a140:	d13c      	bne.n	800a1bc <_dtoa_r+0x2ec>
 800a142:	4b1b      	ldr	r3, [pc, #108]	@ (800a1b0 <_dtoa_r+0x2e0>)
 800a144:	4602      	mov	r2, r0
 800a146:	f240 11af 	movw	r1, #431	@ 0x1af
 800a14a:	e6d8      	b.n	8009efe <_dtoa_r+0x2e>
 800a14c:	2301      	movs	r3, #1
 800a14e:	e7e0      	b.n	800a112 <_dtoa_r+0x242>
 800a150:	2401      	movs	r4, #1
 800a152:	2300      	movs	r3, #0
 800a154:	9309      	str	r3, [sp, #36]	@ 0x24
 800a156:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a158:	f04f 33ff 	mov.w	r3, #4294967295
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	9307      	str	r3, [sp, #28]
 800a160:	2200      	movs	r2, #0
 800a162:	2312      	movs	r3, #18
 800a164:	e7d0      	b.n	800a108 <_dtoa_r+0x238>
 800a166:	2301      	movs	r3, #1
 800a168:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a16a:	e7f5      	b.n	800a158 <_dtoa_r+0x288>
 800a16c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	9307      	str	r3, [sp, #28]
 800a172:	e7d7      	b.n	800a124 <_dtoa_r+0x254>
 800a174:	3101      	adds	r1, #1
 800a176:	0052      	lsls	r2, r2, #1
 800a178:	e7d8      	b.n	800a12c <_dtoa_r+0x25c>
 800a17a:	bf00      	nop
 800a17c:	f3af 8000 	nop.w
 800a180:	636f4361 	.word	0x636f4361
 800a184:	3fd287a7 	.word	0x3fd287a7
 800a188:	8b60c8b3 	.word	0x8b60c8b3
 800a18c:	3fc68a28 	.word	0x3fc68a28
 800a190:	509f79fb 	.word	0x509f79fb
 800a194:	3fd34413 	.word	0x3fd34413
 800a198:	0800d4fa 	.word	0x0800d4fa
 800a19c:	0800d511 	.word	0x0800d511
 800a1a0:	7ff00000 	.word	0x7ff00000
 800a1a4:	0800d4c5 	.word	0x0800d4c5
 800a1a8:	3ff80000 	.word	0x3ff80000
 800a1ac:	0800d608 	.word	0x0800d608
 800a1b0:	0800d569 	.word	0x0800d569
 800a1b4:	0800d4f6 	.word	0x0800d4f6
 800a1b8:	0800d4c4 	.word	0x0800d4c4
 800a1bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a1c0:	6018      	str	r0, [r3, #0]
 800a1c2:	9b07      	ldr	r3, [sp, #28]
 800a1c4:	2b0e      	cmp	r3, #14
 800a1c6:	f200 80a4 	bhi.w	800a312 <_dtoa_r+0x442>
 800a1ca:	2c00      	cmp	r4, #0
 800a1cc:	f000 80a1 	beq.w	800a312 <_dtoa_r+0x442>
 800a1d0:	2f00      	cmp	r7, #0
 800a1d2:	dd33      	ble.n	800a23c <_dtoa_r+0x36c>
 800a1d4:	4bad      	ldr	r3, [pc, #692]	@ (800a48c <_dtoa_r+0x5bc>)
 800a1d6:	f007 020f 	and.w	r2, r7, #15
 800a1da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1de:	ed93 7b00 	vldr	d7, [r3]
 800a1e2:	05f8      	lsls	r0, r7, #23
 800a1e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a1e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a1ec:	d516      	bpl.n	800a21c <_dtoa_r+0x34c>
 800a1ee:	4ba8      	ldr	r3, [pc, #672]	@ (800a490 <_dtoa_r+0x5c0>)
 800a1f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1f8:	f7f6 fb50 	bl	800089c <__aeabi_ddiv>
 800a1fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a200:	f004 040f 	and.w	r4, r4, #15
 800a204:	2603      	movs	r6, #3
 800a206:	4da2      	ldr	r5, [pc, #648]	@ (800a490 <_dtoa_r+0x5c0>)
 800a208:	b954      	cbnz	r4, 800a220 <_dtoa_r+0x350>
 800a20a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a20e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a212:	f7f6 fb43 	bl	800089c <__aeabi_ddiv>
 800a216:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a21a:	e028      	b.n	800a26e <_dtoa_r+0x39e>
 800a21c:	2602      	movs	r6, #2
 800a21e:	e7f2      	b.n	800a206 <_dtoa_r+0x336>
 800a220:	07e1      	lsls	r1, r4, #31
 800a222:	d508      	bpl.n	800a236 <_dtoa_r+0x366>
 800a224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a228:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a22c:	f7f6 fa0c 	bl	8000648 <__aeabi_dmul>
 800a230:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a234:	3601      	adds	r6, #1
 800a236:	1064      	asrs	r4, r4, #1
 800a238:	3508      	adds	r5, #8
 800a23a:	e7e5      	b.n	800a208 <_dtoa_r+0x338>
 800a23c:	f000 80d2 	beq.w	800a3e4 <_dtoa_r+0x514>
 800a240:	427c      	negs	r4, r7
 800a242:	4b92      	ldr	r3, [pc, #584]	@ (800a48c <_dtoa_r+0x5bc>)
 800a244:	4d92      	ldr	r5, [pc, #584]	@ (800a490 <_dtoa_r+0x5c0>)
 800a246:	f004 020f 	and.w	r2, r4, #15
 800a24a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a252:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a256:	f7f6 f9f7 	bl	8000648 <__aeabi_dmul>
 800a25a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a25e:	1124      	asrs	r4, r4, #4
 800a260:	2300      	movs	r3, #0
 800a262:	2602      	movs	r6, #2
 800a264:	2c00      	cmp	r4, #0
 800a266:	f040 80b2 	bne.w	800a3ce <_dtoa_r+0x4fe>
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d1d3      	bne.n	800a216 <_dtoa_r+0x346>
 800a26e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a270:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a274:	2b00      	cmp	r3, #0
 800a276:	f000 80b7 	beq.w	800a3e8 <_dtoa_r+0x518>
 800a27a:	4b86      	ldr	r3, [pc, #536]	@ (800a494 <_dtoa_r+0x5c4>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	4620      	mov	r0, r4
 800a280:	4629      	mov	r1, r5
 800a282:	f7f6 fc53 	bl	8000b2c <__aeabi_dcmplt>
 800a286:	2800      	cmp	r0, #0
 800a288:	f000 80ae 	beq.w	800a3e8 <_dtoa_r+0x518>
 800a28c:	9b07      	ldr	r3, [sp, #28]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	f000 80aa 	beq.w	800a3e8 <_dtoa_r+0x518>
 800a294:	9b00      	ldr	r3, [sp, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	dd37      	ble.n	800a30a <_dtoa_r+0x43a>
 800a29a:	1e7b      	subs	r3, r7, #1
 800a29c:	9304      	str	r3, [sp, #16]
 800a29e:	4620      	mov	r0, r4
 800a2a0:	4b7d      	ldr	r3, [pc, #500]	@ (800a498 <_dtoa_r+0x5c8>)
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	f7f6 f9cf 	bl	8000648 <__aeabi_dmul>
 800a2aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2ae:	9c00      	ldr	r4, [sp, #0]
 800a2b0:	3601      	adds	r6, #1
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	f7f6 f95e 	bl	8000574 <__aeabi_i2d>
 800a2b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2bc:	f7f6 f9c4 	bl	8000648 <__aeabi_dmul>
 800a2c0:	4b76      	ldr	r3, [pc, #472]	@ (800a49c <_dtoa_r+0x5cc>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f7f6 f80a 	bl	80002dc <__adddf3>
 800a2c8:	4605      	mov	r5, r0
 800a2ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a2ce:	2c00      	cmp	r4, #0
 800a2d0:	f040 808d 	bne.w	800a3ee <_dtoa_r+0x51e>
 800a2d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2d8:	4b71      	ldr	r3, [pc, #452]	@ (800a4a0 <_dtoa_r+0x5d0>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f7f5 fffc 	bl	80002d8 <__aeabi_dsub>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a2e8:	462a      	mov	r2, r5
 800a2ea:	4633      	mov	r3, r6
 800a2ec:	f7f6 fc3c 	bl	8000b68 <__aeabi_dcmpgt>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	f040 828b 	bne.w	800a80c <_dtoa_r+0x93c>
 800a2f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2fa:	462a      	mov	r2, r5
 800a2fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a300:	f7f6 fc14 	bl	8000b2c <__aeabi_dcmplt>
 800a304:	2800      	cmp	r0, #0
 800a306:	f040 8128 	bne.w	800a55a <_dtoa_r+0x68a>
 800a30a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a30e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a312:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a314:	2b00      	cmp	r3, #0
 800a316:	f2c0 815a 	blt.w	800a5ce <_dtoa_r+0x6fe>
 800a31a:	2f0e      	cmp	r7, #14
 800a31c:	f300 8157 	bgt.w	800a5ce <_dtoa_r+0x6fe>
 800a320:	4b5a      	ldr	r3, [pc, #360]	@ (800a48c <_dtoa_r+0x5bc>)
 800a322:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a326:	ed93 7b00 	vldr	d7, [r3]
 800a32a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	ed8d 7b00 	vstr	d7, [sp]
 800a332:	da03      	bge.n	800a33c <_dtoa_r+0x46c>
 800a334:	9b07      	ldr	r3, [sp, #28]
 800a336:	2b00      	cmp	r3, #0
 800a338:	f340 8101 	ble.w	800a53e <_dtoa_r+0x66e>
 800a33c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a340:	4656      	mov	r6, sl
 800a342:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a346:	4620      	mov	r0, r4
 800a348:	4629      	mov	r1, r5
 800a34a:	f7f6 faa7 	bl	800089c <__aeabi_ddiv>
 800a34e:	f7f6 fc2b 	bl	8000ba8 <__aeabi_d2iz>
 800a352:	4680      	mov	r8, r0
 800a354:	f7f6 f90e 	bl	8000574 <__aeabi_i2d>
 800a358:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a35c:	f7f6 f974 	bl	8000648 <__aeabi_dmul>
 800a360:	4602      	mov	r2, r0
 800a362:	460b      	mov	r3, r1
 800a364:	4620      	mov	r0, r4
 800a366:	4629      	mov	r1, r5
 800a368:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a36c:	f7f5 ffb4 	bl	80002d8 <__aeabi_dsub>
 800a370:	f806 4b01 	strb.w	r4, [r6], #1
 800a374:	9d07      	ldr	r5, [sp, #28]
 800a376:	eba6 040a 	sub.w	r4, r6, sl
 800a37a:	42a5      	cmp	r5, r4
 800a37c:	4602      	mov	r2, r0
 800a37e:	460b      	mov	r3, r1
 800a380:	f040 8117 	bne.w	800a5b2 <_dtoa_r+0x6e2>
 800a384:	f7f5 ffaa 	bl	80002dc <__adddf3>
 800a388:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a38c:	4604      	mov	r4, r0
 800a38e:	460d      	mov	r5, r1
 800a390:	f7f6 fbea 	bl	8000b68 <__aeabi_dcmpgt>
 800a394:	2800      	cmp	r0, #0
 800a396:	f040 80f9 	bne.w	800a58c <_dtoa_r+0x6bc>
 800a39a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a39e:	4620      	mov	r0, r4
 800a3a0:	4629      	mov	r1, r5
 800a3a2:	f7f6 fbb9 	bl	8000b18 <__aeabi_dcmpeq>
 800a3a6:	b118      	cbz	r0, 800a3b0 <_dtoa_r+0x4e0>
 800a3a8:	f018 0f01 	tst.w	r8, #1
 800a3ac:	f040 80ee 	bne.w	800a58c <_dtoa_r+0x6bc>
 800a3b0:	4649      	mov	r1, r9
 800a3b2:	4658      	mov	r0, fp
 800a3b4:	f000 fc90 	bl	800acd8 <_Bfree>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	7033      	strb	r3, [r6, #0]
 800a3bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a3be:	3701      	adds	r7, #1
 800a3c0:	601f      	str	r7, [r3, #0]
 800a3c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f000 831d 	beq.w	800aa04 <_dtoa_r+0xb34>
 800a3ca:	601e      	str	r6, [r3, #0]
 800a3cc:	e31a      	b.n	800aa04 <_dtoa_r+0xb34>
 800a3ce:	07e2      	lsls	r2, r4, #31
 800a3d0:	d505      	bpl.n	800a3de <_dtoa_r+0x50e>
 800a3d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a3d6:	f7f6 f937 	bl	8000648 <__aeabi_dmul>
 800a3da:	3601      	adds	r6, #1
 800a3dc:	2301      	movs	r3, #1
 800a3de:	1064      	asrs	r4, r4, #1
 800a3e0:	3508      	adds	r5, #8
 800a3e2:	e73f      	b.n	800a264 <_dtoa_r+0x394>
 800a3e4:	2602      	movs	r6, #2
 800a3e6:	e742      	b.n	800a26e <_dtoa_r+0x39e>
 800a3e8:	9c07      	ldr	r4, [sp, #28]
 800a3ea:	9704      	str	r7, [sp, #16]
 800a3ec:	e761      	b.n	800a2b2 <_dtoa_r+0x3e2>
 800a3ee:	4b27      	ldr	r3, [pc, #156]	@ (800a48c <_dtoa_r+0x5bc>)
 800a3f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a3f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3fa:	4454      	add	r4, sl
 800a3fc:	2900      	cmp	r1, #0
 800a3fe:	d053      	beq.n	800a4a8 <_dtoa_r+0x5d8>
 800a400:	4928      	ldr	r1, [pc, #160]	@ (800a4a4 <_dtoa_r+0x5d4>)
 800a402:	2000      	movs	r0, #0
 800a404:	f7f6 fa4a 	bl	800089c <__aeabi_ddiv>
 800a408:	4633      	mov	r3, r6
 800a40a:	462a      	mov	r2, r5
 800a40c:	f7f5 ff64 	bl	80002d8 <__aeabi_dsub>
 800a410:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a414:	4656      	mov	r6, sl
 800a416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a41a:	f7f6 fbc5 	bl	8000ba8 <__aeabi_d2iz>
 800a41e:	4605      	mov	r5, r0
 800a420:	f7f6 f8a8 	bl	8000574 <__aeabi_i2d>
 800a424:	4602      	mov	r2, r0
 800a426:	460b      	mov	r3, r1
 800a428:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a42c:	f7f5 ff54 	bl	80002d8 <__aeabi_dsub>
 800a430:	3530      	adds	r5, #48	@ 0x30
 800a432:	4602      	mov	r2, r0
 800a434:	460b      	mov	r3, r1
 800a436:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a43a:	f806 5b01 	strb.w	r5, [r6], #1
 800a43e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a442:	f7f6 fb73 	bl	8000b2c <__aeabi_dcmplt>
 800a446:	2800      	cmp	r0, #0
 800a448:	d171      	bne.n	800a52e <_dtoa_r+0x65e>
 800a44a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a44e:	4911      	ldr	r1, [pc, #68]	@ (800a494 <_dtoa_r+0x5c4>)
 800a450:	2000      	movs	r0, #0
 800a452:	f7f5 ff41 	bl	80002d8 <__aeabi_dsub>
 800a456:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a45a:	f7f6 fb67 	bl	8000b2c <__aeabi_dcmplt>
 800a45e:	2800      	cmp	r0, #0
 800a460:	f040 8095 	bne.w	800a58e <_dtoa_r+0x6be>
 800a464:	42a6      	cmp	r6, r4
 800a466:	f43f af50 	beq.w	800a30a <_dtoa_r+0x43a>
 800a46a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a46e:	4b0a      	ldr	r3, [pc, #40]	@ (800a498 <_dtoa_r+0x5c8>)
 800a470:	2200      	movs	r2, #0
 800a472:	f7f6 f8e9 	bl	8000648 <__aeabi_dmul>
 800a476:	4b08      	ldr	r3, [pc, #32]	@ (800a498 <_dtoa_r+0x5c8>)
 800a478:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a47c:	2200      	movs	r2, #0
 800a47e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a482:	f7f6 f8e1 	bl	8000648 <__aeabi_dmul>
 800a486:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a48a:	e7c4      	b.n	800a416 <_dtoa_r+0x546>
 800a48c:	0800d608 	.word	0x0800d608
 800a490:	0800d5e0 	.word	0x0800d5e0
 800a494:	3ff00000 	.word	0x3ff00000
 800a498:	40240000 	.word	0x40240000
 800a49c:	401c0000 	.word	0x401c0000
 800a4a0:	40140000 	.word	0x40140000
 800a4a4:	3fe00000 	.word	0x3fe00000
 800a4a8:	4631      	mov	r1, r6
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	f7f6 f8cc 	bl	8000648 <__aeabi_dmul>
 800a4b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a4b4:	9415      	str	r4, [sp, #84]	@ 0x54
 800a4b6:	4656      	mov	r6, sl
 800a4b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4bc:	f7f6 fb74 	bl	8000ba8 <__aeabi_d2iz>
 800a4c0:	4605      	mov	r5, r0
 800a4c2:	f7f6 f857 	bl	8000574 <__aeabi_i2d>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4ce:	f7f5 ff03 	bl	80002d8 <__aeabi_dsub>
 800a4d2:	3530      	adds	r5, #48	@ 0x30
 800a4d4:	f806 5b01 	strb.w	r5, [r6], #1
 800a4d8:	4602      	mov	r2, r0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	42a6      	cmp	r6, r4
 800a4de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a4e2:	f04f 0200 	mov.w	r2, #0
 800a4e6:	d124      	bne.n	800a532 <_dtoa_r+0x662>
 800a4e8:	4bac      	ldr	r3, [pc, #688]	@ (800a79c <_dtoa_r+0x8cc>)
 800a4ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a4ee:	f7f5 fef5 	bl	80002dc <__adddf3>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4fa:	f7f6 fb35 	bl	8000b68 <__aeabi_dcmpgt>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d145      	bne.n	800a58e <_dtoa_r+0x6be>
 800a502:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a506:	49a5      	ldr	r1, [pc, #660]	@ (800a79c <_dtoa_r+0x8cc>)
 800a508:	2000      	movs	r0, #0
 800a50a:	f7f5 fee5 	bl	80002d8 <__aeabi_dsub>
 800a50e:	4602      	mov	r2, r0
 800a510:	460b      	mov	r3, r1
 800a512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a516:	f7f6 fb09 	bl	8000b2c <__aeabi_dcmplt>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	f43f aef5 	beq.w	800a30a <_dtoa_r+0x43a>
 800a520:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a522:	1e73      	subs	r3, r6, #1
 800a524:	9315      	str	r3, [sp, #84]	@ 0x54
 800a526:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a52a:	2b30      	cmp	r3, #48	@ 0x30
 800a52c:	d0f8      	beq.n	800a520 <_dtoa_r+0x650>
 800a52e:	9f04      	ldr	r7, [sp, #16]
 800a530:	e73e      	b.n	800a3b0 <_dtoa_r+0x4e0>
 800a532:	4b9b      	ldr	r3, [pc, #620]	@ (800a7a0 <_dtoa_r+0x8d0>)
 800a534:	f7f6 f888 	bl	8000648 <__aeabi_dmul>
 800a538:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a53c:	e7bc      	b.n	800a4b8 <_dtoa_r+0x5e8>
 800a53e:	d10c      	bne.n	800a55a <_dtoa_r+0x68a>
 800a540:	4b98      	ldr	r3, [pc, #608]	@ (800a7a4 <_dtoa_r+0x8d4>)
 800a542:	2200      	movs	r2, #0
 800a544:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a548:	f7f6 f87e 	bl	8000648 <__aeabi_dmul>
 800a54c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a550:	f7f6 fb00 	bl	8000b54 <__aeabi_dcmpge>
 800a554:	2800      	cmp	r0, #0
 800a556:	f000 8157 	beq.w	800a808 <_dtoa_r+0x938>
 800a55a:	2400      	movs	r4, #0
 800a55c:	4625      	mov	r5, r4
 800a55e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a560:	43db      	mvns	r3, r3
 800a562:	9304      	str	r3, [sp, #16]
 800a564:	4656      	mov	r6, sl
 800a566:	2700      	movs	r7, #0
 800a568:	4621      	mov	r1, r4
 800a56a:	4658      	mov	r0, fp
 800a56c:	f000 fbb4 	bl	800acd8 <_Bfree>
 800a570:	2d00      	cmp	r5, #0
 800a572:	d0dc      	beq.n	800a52e <_dtoa_r+0x65e>
 800a574:	b12f      	cbz	r7, 800a582 <_dtoa_r+0x6b2>
 800a576:	42af      	cmp	r7, r5
 800a578:	d003      	beq.n	800a582 <_dtoa_r+0x6b2>
 800a57a:	4639      	mov	r1, r7
 800a57c:	4658      	mov	r0, fp
 800a57e:	f000 fbab 	bl	800acd8 <_Bfree>
 800a582:	4629      	mov	r1, r5
 800a584:	4658      	mov	r0, fp
 800a586:	f000 fba7 	bl	800acd8 <_Bfree>
 800a58a:	e7d0      	b.n	800a52e <_dtoa_r+0x65e>
 800a58c:	9704      	str	r7, [sp, #16]
 800a58e:	4633      	mov	r3, r6
 800a590:	461e      	mov	r6, r3
 800a592:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a596:	2a39      	cmp	r2, #57	@ 0x39
 800a598:	d107      	bne.n	800a5aa <_dtoa_r+0x6da>
 800a59a:	459a      	cmp	sl, r3
 800a59c:	d1f8      	bne.n	800a590 <_dtoa_r+0x6c0>
 800a59e:	9a04      	ldr	r2, [sp, #16]
 800a5a0:	3201      	adds	r2, #1
 800a5a2:	9204      	str	r2, [sp, #16]
 800a5a4:	2230      	movs	r2, #48	@ 0x30
 800a5a6:	f88a 2000 	strb.w	r2, [sl]
 800a5aa:	781a      	ldrb	r2, [r3, #0]
 800a5ac:	3201      	adds	r2, #1
 800a5ae:	701a      	strb	r2, [r3, #0]
 800a5b0:	e7bd      	b.n	800a52e <_dtoa_r+0x65e>
 800a5b2:	4b7b      	ldr	r3, [pc, #492]	@ (800a7a0 <_dtoa_r+0x8d0>)
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f7f6 f847 	bl	8000648 <__aeabi_dmul>
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	2300      	movs	r3, #0
 800a5be:	4604      	mov	r4, r0
 800a5c0:	460d      	mov	r5, r1
 800a5c2:	f7f6 faa9 	bl	8000b18 <__aeabi_dcmpeq>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	f43f aebb 	beq.w	800a342 <_dtoa_r+0x472>
 800a5cc:	e6f0      	b.n	800a3b0 <_dtoa_r+0x4e0>
 800a5ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a5d0:	2a00      	cmp	r2, #0
 800a5d2:	f000 80db 	beq.w	800a78c <_dtoa_r+0x8bc>
 800a5d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5d8:	2a01      	cmp	r2, #1
 800a5da:	f300 80bf 	bgt.w	800a75c <_dtoa_r+0x88c>
 800a5de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a5e0:	2a00      	cmp	r2, #0
 800a5e2:	f000 80b7 	beq.w	800a754 <_dtoa_r+0x884>
 800a5e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a5ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a5ec:	4646      	mov	r6, r8
 800a5ee:	9a08      	ldr	r2, [sp, #32]
 800a5f0:	2101      	movs	r1, #1
 800a5f2:	441a      	add	r2, r3
 800a5f4:	4658      	mov	r0, fp
 800a5f6:	4498      	add	r8, r3
 800a5f8:	9208      	str	r2, [sp, #32]
 800a5fa:	f000 fc6b 	bl	800aed4 <__i2b>
 800a5fe:	4605      	mov	r5, r0
 800a600:	b15e      	cbz	r6, 800a61a <_dtoa_r+0x74a>
 800a602:	9b08      	ldr	r3, [sp, #32]
 800a604:	2b00      	cmp	r3, #0
 800a606:	dd08      	ble.n	800a61a <_dtoa_r+0x74a>
 800a608:	42b3      	cmp	r3, r6
 800a60a:	9a08      	ldr	r2, [sp, #32]
 800a60c:	bfa8      	it	ge
 800a60e:	4633      	movge	r3, r6
 800a610:	eba8 0803 	sub.w	r8, r8, r3
 800a614:	1af6      	subs	r6, r6, r3
 800a616:	1ad3      	subs	r3, r2, r3
 800a618:	9308      	str	r3, [sp, #32]
 800a61a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a61c:	b1f3      	cbz	r3, 800a65c <_dtoa_r+0x78c>
 800a61e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a620:	2b00      	cmp	r3, #0
 800a622:	f000 80b7 	beq.w	800a794 <_dtoa_r+0x8c4>
 800a626:	b18c      	cbz	r4, 800a64c <_dtoa_r+0x77c>
 800a628:	4629      	mov	r1, r5
 800a62a:	4622      	mov	r2, r4
 800a62c:	4658      	mov	r0, fp
 800a62e:	f000 fd11 	bl	800b054 <__pow5mult>
 800a632:	464a      	mov	r2, r9
 800a634:	4601      	mov	r1, r0
 800a636:	4605      	mov	r5, r0
 800a638:	4658      	mov	r0, fp
 800a63a:	f000 fc61 	bl	800af00 <__multiply>
 800a63e:	4649      	mov	r1, r9
 800a640:	9004      	str	r0, [sp, #16]
 800a642:	4658      	mov	r0, fp
 800a644:	f000 fb48 	bl	800acd8 <_Bfree>
 800a648:	9b04      	ldr	r3, [sp, #16]
 800a64a:	4699      	mov	r9, r3
 800a64c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a64e:	1b1a      	subs	r2, r3, r4
 800a650:	d004      	beq.n	800a65c <_dtoa_r+0x78c>
 800a652:	4649      	mov	r1, r9
 800a654:	4658      	mov	r0, fp
 800a656:	f000 fcfd 	bl	800b054 <__pow5mult>
 800a65a:	4681      	mov	r9, r0
 800a65c:	2101      	movs	r1, #1
 800a65e:	4658      	mov	r0, fp
 800a660:	f000 fc38 	bl	800aed4 <__i2b>
 800a664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a666:	4604      	mov	r4, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f000 81cf 	beq.w	800aa0c <_dtoa_r+0xb3c>
 800a66e:	461a      	mov	r2, r3
 800a670:	4601      	mov	r1, r0
 800a672:	4658      	mov	r0, fp
 800a674:	f000 fcee 	bl	800b054 <__pow5mult>
 800a678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	4604      	mov	r4, r0
 800a67e:	f300 8095 	bgt.w	800a7ac <_dtoa_r+0x8dc>
 800a682:	9b02      	ldr	r3, [sp, #8]
 800a684:	2b00      	cmp	r3, #0
 800a686:	f040 8087 	bne.w	800a798 <_dtoa_r+0x8c8>
 800a68a:	9b03      	ldr	r3, [sp, #12]
 800a68c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a690:	2b00      	cmp	r3, #0
 800a692:	f040 8089 	bne.w	800a7a8 <_dtoa_r+0x8d8>
 800a696:	9b03      	ldr	r3, [sp, #12]
 800a698:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a69c:	0d1b      	lsrs	r3, r3, #20
 800a69e:	051b      	lsls	r3, r3, #20
 800a6a0:	b12b      	cbz	r3, 800a6ae <_dtoa_r+0x7de>
 800a6a2:	9b08      	ldr	r3, [sp, #32]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	9308      	str	r3, [sp, #32]
 800a6a8:	f108 0801 	add.w	r8, r8, #1
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f000 81b0 	beq.w	800aa18 <_dtoa_r+0xb48>
 800a6b8:	6923      	ldr	r3, [r4, #16]
 800a6ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a6be:	6918      	ldr	r0, [r3, #16]
 800a6c0:	f000 fbbc 	bl	800ae3c <__hi0bits>
 800a6c4:	f1c0 0020 	rsb	r0, r0, #32
 800a6c8:	9b08      	ldr	r3, [sp, #32]
 800a6ca:	4418      	add	r0, r3
 800a6cc:	f010 001f 	ands.w	r0, r0, #31
 800a6d0:	d077      	beq.n	800a7c2 <_dtoa_r+0x8f2>
 800a6d2:	f1c0 0320 	rsb	r3, r0, #32
 800a6d6:	2b04      	cmp	r3, #4
 800a6d8:	dd6b      	ble.n	800a7b2 <_dtoa_r+0x8e2>
 800a6da:	9b08      	ldr	r3, [sp, #32]
 800a6dc:	f1c0 001c 	rsb	r0, r0, #28
 800a6e0:	4403      	add	r3, r0
 800a6e2:	4480      	add	r8, r0
 800a6e4:	4406      	add	r6, r0
 800a6e6:	9308      	str	r3, [sp, #32]
 800a6e8:	f1b8 0f00 	cmp.w	r8, #0
 800a6ec:	dd05      	ble.n	800a6fa <_dtoa_r+0x82a>
 800a6ee:	4649      	mov	r1, r9
 800a6f0:	4642      	mov	r2, r8
 800a6f2:	4658      	mov	r0, fp
 800a6f4:	f000 fd08 	bl	800b108 <__lshift>
 800a6f8:	4681      	mov	r9, r0
 800a6fa:	9b08      	ldr	r3, [sp, #32]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	dd05      	ble.n	800a70c <_dtoa_r+0x83c>
 800a700:	4621      	mov	r1, r4
 800a702:	461a      	mov	r2, r3
 800a704:	4658      	mov	r0, fp
 800a706:	f000 fcff 	bl	800b108 <__lshift>
 800a70a:	4604      	mov	r4, r0
 800a70c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d059      	beq.n	800a7c6 <_dtoa_r+0x8f6>
 800a712:	4621      	mov	r1, r4
 800a714:	4648      	mov	r0, r9
 800a716:	f000 fd63 	bl	800b1e0 <__mcmp>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	da53      	bge.n	800a7c6 <_dtoa_r+0x8f6>
 800a71e:	1e7b      	subs	r3, r7, #1
 800a720:	9304      	str	r3, [sp, #16]
 800a722:	4649      	mov	r1, r9
 800a724:	2300      	movs	r3, #0
 800a726:	220a      	movs	r2, #10
 800a728:	4658      	mov	r0, fp
 800a72a:	f000 faf7 	bl	800ad1c <__multadd>
 800a72e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a730:	4681      	mov	r9, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	f000 8172 	beq.w	800aa1c <_dtoa_r+0xb4c>
 800a738:	2300      	movs	r3, #0
 800a73a:	4629      	mov	r1, r5
 800a73c:	220a      	movs	r2, #10
 800a73e:	4658      	mov	r0, fp
 800a740:	f000 faec 	bl	800ad1c <__multadd>
 800a744:	9b00      	ldr	r3, [sp, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	4605      	mov	r5, r0
 800a74a:	dc67      	bgt.n	800a81c <_dtoa_r+0x94c>
 800a74c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a74e:	2b02      	cmp	r3, #2
 800a750:	dc41      	bgt.n	800a7d6 <_dtoa_r+0x906>
 800a752:	e063      	b.n	800a81c <_dtoa_r+0x94c>
 800a754:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a756:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a75a:	e746      	b.n	800a5ea <_dtoa_r+0x71a>
 800a75c:	9b07      	ldr	r3, [sp, #28]
 800a75e:	1e5c      	subs	r4, r3, #1
 800a760:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a762:	42a3      	cmp	r3, r4
 800a764:	bfbf      	itttt	lt
 800a766:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a768:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a76a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a76c:	1ae3      	sublt	r3, r4, r3
 800a76e:	bfb4      	ite	lt
 800a770:	18d2      	addlt	r2, r2, r3
 800a772:	1b1c      	subge	r4, r3, r4
 800a774:	9b07      	ldr	r3, [sp, #28]
 800a776:	bfbc      	itt	lt
 800a778:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a77a:	2400      	movlt	r4, #0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	bfb5      	itete	lt
 800a780:	eba8 0603 	sublt.w	r6, r8, r3
 800a784:	9b07      	ldrge	r3, [sp, #28]
 800a786:	2300      	movlt	r3, #0
 800a788:	4646      	movge	r6, r8
 800a78a:	e730      	b.n	800a5ee <_dtoa_r+0x71e>
 800a78c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a78e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a790:	4646      	mov	r6, r8
 800a792:	e735      	b.n	800a600 <_dtoa_r+0x730>
 800a794:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a796:	e75c      	b.n	800a652 <_dtoa_r+0x782>
 800a798:	2300      	movs	r3, #0
 800a79a:	e788      	b.n	800a6ae <_dtoa_r+0x7de>
 800a79c:	3fe00000 	.word	0x3fe00000
 800a7a0:	40240000 	.word	0x40240000
 800a7a4:	40140000 	.word	0x40140000
 800a7a8:	9b02      	ldr	r3, [sp, #8]
 800a7aa:	e780      	b.n	800a6ae <_dtoa_r+0x7de>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7b0:	e782      	b.n	800a6b8 <_dtoa_r+0x7e8>
 800a7b2:	d099      	beq.n	800a6e8 <_dtoa_r+0x818>
 800a7b4:	9a08      	ldr	r2, [sp, #32]
 800a7b6:	331c      	adds	r3, #28
 800a7b8:	441a      	add	r2, r3
 800a7ba:	4498      	add	r8, r3
 800a7bc:	441e      	add	r6, r3
 800a7be:	9208      	str	r2, [sp, #32]
 800a7c0:	e792      	b.n	800a6e8 <_dtoa_r+0x818>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	e7f6      	b.n	800a7b4 <_dtoa_r+0x8e4>
 800a7c6:	9b07      	ldr	r3, [sp, #28]
 800a7c8:	9704      	str	r7, [sp, #16]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	dc20      	bgt.n	800a810 <_dtoa_r+0x940>
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	dd1e      	ble.n	800a814 <_dtoa_r+0x944>
 800a7d6:	9b00      	ldr	r3, [sp, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f47f aec0 	bne.w	800a55e <_dtoa_r+0x68e>
 800a7de:	4621      	mov	r1, r4
 800a7e0:	2205      	movs	r2, #5
 800a7e2:	4658      	mov	r0, fp
 800a7e4:	f000 fa9a 	bl	800ad1c <__multadd>
 800a7e8:	4601      	mov	r1, r0
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	4648      	mov	r0, r9
 800a7ee:	f000 fcf7 	bl	800b1e0 <__mcmp>
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	f77f aeb3 	ble.w	800a55e <_dtoa_r+0x68e>
 800a7f8:	4656      	mov	r6, sl
 800a7fa:	2331      	movs	r3, #49	@ 0x31
 800a7fc:	f806 3b01 	strb.w	r3, [r6], #1
 800a800:	9b04      	ldr	r3, [sp, #16]
 800a802:	3301      	adds	r3, #1
 800a804:	9304      	str	r3, [sp, #16]
 800a806:	e6ae      	b.n	800a566 <_dtoa_r+0x696>
 800a808:	9c07      	ldr	r4, [sp, #28]
 800a80a:	9704      	str	r7, [sp, #16]
 800a80c:	4625      	mov	r5, r4
 800a80e:	e7f3      	b.n	800a7f8 <_dtoa_r+0x928>
 800a810:	9b07      	ldr	r3, [sp, #28]
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a816:	2b00      	cmp	r3, #0
 800a818:	f000 8104 	beq.w	800aa24 <_dtoa_r+0xb54>
 800a81c:	2e00      	cmp	r6, #0
 800a81e:	dd05      	ble.n	800a82c <_dtoa_r+0x95c>
 800a820:	4629      	mov	r1, r5
 800a822:	4632      	mov	r2, r6
 800a824:	4658      	mov	r0, fp
 800a826:	f000 fc6f 	bl	800b108 <__lshift>
 800a82a:	4605      	mov	r5, r0
 800a82c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d05a      	beq.n	800a8e8 <_dtoa_r+0xa18>
 800a832:	6869      	ldr	r1, [r5, #4]
 800a834:	4658      	mov	r0, fp
 800a836:	f000 fa0f 	bl	800ac58 <_Balloc>
 800a83a:	4606      	mov	r6, r0
 800a83c:	b928      	cbnz	r0, 800a84a <_dtoa_r+0x97a>
 800a83e:	4b84      	ldr	r3, [pc, #528]	@ (800aa50 <_dtoa_r+0xb80>)
 800a840:	4602      	mov	r2, r0
 800a842:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a846:	f7ff bb5a 	b.w	8009efe <_dtoa_r+0x2e>
 800a84a:	692a      	ldr	r2, [r5, #16]
 800a84c:	3202      	adds	r2, #2
 800a84e:	0092      	lsls	r2, r2, #2
 800a850:	f105 010c 	add.w	r1, r5, #12
 800a854:	300c      	adds	r0, #12
 800a856:	f7ff fa9c 	bl	8009d92 <memcpy>
 800a85a:	2201      	movs	r2, #1
 800a85c:	4631      	mov	r1, r6
 800a85e:	4658      	mov	r0, fp
 800a860:	f000 fc52 	bl	800b108 <__lshift>
 800a864:	f10a 0301 	add.w	r3, sl, #1
 800a868:	9307      	str	r3, [sp, #28]
 800a86a:	9b00      	ldr	r3, [sp, #0]
 800a86c:	4453      	add	r3, sl
 800a86e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a870:	9b02      	ldr	r3, [sp, #8]
 800a872:	f003 0301 	and.w	r3, r3, #1
 800a876:	462f      	mov	r7, r5
 800a878:	930a      	str	r3, [sp, #40]	@ 0x28
 800a87a:	4605      	mov	r5, r0
 800a87c:	9b07      	ldr	r3, [sp, #28]
 800a87e:	4621      	mov	r1, r4
 800a880:	3b01      	subs	r3, #1
 800a882:	4648      	mov	r0, r9
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	f7ff fa99 	bl	8009dbc <quorem>
 800a88a:	4639      	mov	r1, r7
 800a88c:	9002      	str	r0, [sp, #8]
 800a88e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a892:	4648      	mov	r0, r9
 800a894:	f000 fca4 	bl	800b1e0 <__mcmp>
 800a898:	462a      	mov	r2, r5
 800a89a:	9008      	str	r0, [sp, #32]
 800a89c:	4621      	mov	r1, r4
 800a89e:	4658      	mov	r0, fp
 800a8a0:	f000 fcba 	bl	800b218 <__mdiff>
 800a8a4:	68c2      	ldr	r2, [r0, #12]
 800a8a6:	4606      	mov	r6, r0
 800a8a8:	bb02      	cbnz	r2, 800a8ec <_dtoa_r+0xa1c>
 800a8aa:	4601      	mov	r1, r0
 800a8ac:	4648      	mov	r0, r9
 800a8ae:	f000 fc97 	bl	800b1e0 <__mcmp>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	4631      	mov	r1, r6
 800a8b6:	4658      	mov	r0, fp
 800a8b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a8ba:	f000 fa0d 	bl	800acd8 <_Bfree>
 800a8be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8c2:	9e07      	ldr	r6, [sp, #28]
 800a8c4:	ea43 0102 	orr.w	r1, r3, r2
 800a8c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8ca:	4319      	orrs	r1, r3
 800a8cc:	d110      	bne.n	800a8f0 <_dtoa_r+0xa20>
 800a8ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a8d2:	d029      	beq.n	800a928 <_dtoa_r+0xa58>
 800a8d4:	9b08      	ldr	r3, [sp, #32]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	dd02      	ble.n	800a8e0 <_dtoa_r+0xa10>
 800a8da:	9b02      	ldr	r3, [sp, #8]
 800a8dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a8e0:	9b00      	ldr	r3, [sp, #0]
 800a8e2:	f883 8000 	strb.w	r8, [r3]
 800a8e6:	e63f      	b.n	800a568 <_dtoa_r+0x698>
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	e7bb      	b.n	800a864 <_dtoa_r+0x994>
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	e7e1      	b.n	800a8b4 <_dtoa_r+0x9e4>
 800a8f0:	9b08      	ldr	r3, [sp, #32]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	db04      	blt.n	800a900 <_dtoa_r+0xa30>
 800a8f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a8f8:	430b      	orrs	r3, r1
 800a8fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a8fc:	430b      	orrs	r3, r1
 800a8fe:	d120      	bne.n	800a942 <_dtoa_r+0xa72>
 800a900:	2a00      	cmp	r2, #0
 800a902:	dded      	ble.n	800a8e0 <_dtoa_r+0xa10>
 800a904:	4649      	mov	r1, r9
 800a906:	2201      	movs	r2, #1
 800a908:	4658      	mov	r0, fp
 800a90a:	f000 fbfd 	bl	800b108 <__lshift>
 800a90e:	4621      	mov	r1, r4
 800a910:	4681      	mov	r9, r0
 800a912:	f000 fc65 	bl	800b1e0 <__mcmp>
 800a916:	2800      	cmp	r0, #0
 800a918:	dc03      	bgt.n	800a922 <_dtoa_r+0xa52>
 800a91a:	d1e1      	bne.n	800a8e0 <_dtoa_r+0xa10>
 800a91c:	f018 0f01 	tst.w	r8, #1
 800a920:	d0de      	beq.n	800a8e0 <_dtoa_r+0xa10>
 800a922:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a926:	d1d8      	bne.n	800a8da <_dtoa_r+0xa0a>
 800a928:	9a00      	ldr	r2, [sp, #0]
 800a92a:	2339      	movs	r3, #57	@ 0x39
 800a92c:	7013      	strb	r3, [r2, #0]
 800a92e:	4633      	mov	r3, r6
 800a930:	461e      	mov	r6, r3
 800a932:	3b01      	subs	r3, #1
 800a934:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a938:	2a39      	cmp	r2, #57	@ 0x39
 800a93a:	d052      	beq.n	800a9e2 <_dtoa_r+0xb12>
 800a93c:	3201      	adds	r2, #1
 800a93e:	701a      	strb	r2, [r3, #0]
 800a940:	e612      	b.n	800a568 <_dtoa_r+0x698>
 800a942:	2a00      	cmp	r2, #0
 800a944:	dd07      	ble.n	800a956 <_dtoa_r+0xa86>
 800a946:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a94a:	d0ed      	beq.n	800a928 <_dtoa_r+0xa58>
 800a94c:	9a00      	ldr	r2, [sp, #0]
 800a94e:	f108 0301 	add.w	r3, r8, #1
 800a952:	7013      	strb	r3, [r2, #0]
 800a954:	e608      	b.n	800a568 <_dtoa_r+0x698>
 800a956:	9b07      	ldr	r3, [sp, #28]
 800a958:	9a07      	ldr	r2, [sp, #28]
 800a95a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a95e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a960:	4293      	cmp	r3, r2
 800a962:	d028      	beq.n	800a9b6 <_dtoa_r+0xae6>
 800a964:	4649      	mov	r1, r9
 800a966:	2300      	movs	r3, #0
 800a968:	220a      	movs	r2, #10
 800a96a:	4658      	mov	r0, fp
 800a96c:	f000 f9d6 	bl	800ad1c <__multadd>
 800a970:	42af      	cmp	r7, r5
 800a972:	4681      	mov	r9, r0
 800a974:	f04f 0300 	mov.w	r3, #0
 800a978:	f04f 020a 	mov.w	r2, #10
 800a97c:	4639      	mov	r1, r7
 800a97e:	4658      	mov	r0, fp
 800a980:	d107      	bne.n	800a992 <_dtoa_r+0xac2>
 800a982:	f000 f9cb 	bl	800ad1c <__multadd>
 800a986:	4607      	mov	r7, r0
 800a988:	4605      	mov	r5, r0
 800a98a:	9b07      	ldr	r3, [sp, #28]
 800a98c:	3301      	adds	r3, #1
 800a98e:	9307      	str	r3, [sp, #28]
 800a990:	e774      	b.n	800a87c <_dtoa_r+0x9ac>
 800a992:	f000 f9c3 	bl	800ad1c <__multadd>
 800a996:	4629      	mov	r1, r5
 800a998:	4607      	mov	r7, r0
 800a99a:	2300      	movs	r3, #0
 800a99c:	220a      	movs	r2, #10
 800a99e:	4658      	mov	r0, fp
 800a9a0:	f000 f9bc 	bl	800ad1c <__multadd>
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	e7f0      	b.n	800a98a <_dtoa_r+0xaba>
 800a9a8:	9b00      	ldr	r3, [sp, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	bfcc      	ite	gt
 800a9ae:	461e      	movgt	r6, r3
 800a9b0:	2601      	movle	r6, #1
 800a9b2:	4456      	add	r6, sl
 800a9b4:	2700      	movs	r7, #0
 800a9b6:	4649      	mov	r1, r9
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	4658      	mov	r0, fp
 800a9bc:	f000 fba4 	bl	800b108 <__lshift>
 800a9c0:	4621      	mov	r1, r4
 800a9c2:	4681      	mov	r9, r0
 800a9c4:	f000 fc0c 	bl	800b1e0 <__mcmp>
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	dcb0      	bgt.n	800a92e <_dtoa_r+0xa5e>
 800a9cc:	d102      	bne.n	800a9d4 <_dtoa_r+0xb04>
 800a9ce:	f018 0f01 	tst.w	r8, #1
 800a9d2:	d1ac      	bne.n	800a92e <_dtoa_r+0xa5e>
 800a9d4:	4633      	mov	r3, r6
 800a9d6:	461e      	mov	r6, r3
 800a9d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9dc:	2a30      	cmp	r2, #48	@ 0x30
 800a9de:	d0fa      	beq.n	800a9d6 <_dtoa_r+0xb06>
 800a9e0:	e5c2      	b.n	800a568 <_dtoa_r+0x698>
 800a9e2:	459a      	cmp	sl, r3
 800a9e4:	d1a4      	bne.n	800a930 <_dtoa_r+0xa60>
 800a9e6:	9b04      	ldr	r3, [sp, #16]
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	9304      	str	r3, [sp, #16]
 800a9ec:	2331      	movs	r3, #49	@ 0x31
 800a9ee:	f88a 3000 	strb.w	r3, [sl]
 800a9f2:	e5b9      	b.n	800a568 <_dtoa_r+0x698>
 800a9f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a9f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800aa54 <_dtoa_r+0xb84>
 800a9fa:	b11b      	cbz	r3, 800aa04 <_dtoa_r+0xb34>
 800a9fc:	f10a 0308 	add.w	r3, sl, #8
 800aa00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aa02:	6013      	str	r3, [r2, #0]
 800aa04:	4650      	mov	r0, sl
 800aa06:	b019      	add	sp, #100	@ 0x64
 800aa08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	f77f ae37 	ble.w	800a682 <_dtoa_r+0x7b2>
 800aa14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa16:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa18:	2001      	movs	r0, #1
 800aa1a:	e655      	b.n	800a6c8 <_dtoa_r+0x7f8>
 800aa1c:	9b00      	ldr	r3, [sp, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f77f aed6 	ble.w	800a7d0 <_dtoa_r+0x900>
 800aa24:	4656      	mov	r6, sl
 800aa26:	4621      	mov	r1, r4
 800aa28:	4648      	mov	r0, r9
 800aa2a:	f7ff f9c7 	bl	8009dbc <quorem>
 800aa2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aa32:	f806 8b01 	strb.w	r8, [r6], #1
 800aa36:	9b00      	ldr	r3, [sp, #0]
 800aa38:	eba6 020a 	sub.w	r2, r6, sl
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	ddb3      	ble.n	800a9a8 <_dtoa_r+0xad8>
 800aa40:	4649      	mov	r1, r9
 800aa42:	2300      	movs	r3, #0
 800aa44:	220a      	movs	r2, #10
 800aa46:	4658      	mov	r0, fp
 800aa48:	f000 f968 	bl	800ad1c <__multadd>
 800aa4c:	4681      	mov	r9, r0
 800aa4e:	e7ea      	b.n	800aa26 <_dtoa_r+0xb56>
 800aa50:	0800d569 	.word	0x0800d569
 800aa54:	0800d4ed 	.word	0x0800d4ed

0800aa58 <_free_r>:
 800aa58:	b538      	push	{r3, r4, r5, lr}
 800aa5a:	4605      	mov	r5, r0
 800aa5c:	2900      	cmp	r1, #0
 800aa5e:	d041      	beq.n	800aae4 <_free_r+0x8c>
 800aa60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa64:	1f0c      	subs	r4, r1, #4
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	bfb8      	it	lt
 800aa6a:	18e4      	addlt	r4, r4, r3
 800aa6c:	f000 f8e8 	bl	800ac40 <__malloc_lock>
 800aa70:	4a1d      	ldr	r2, [pc, #116]	@ (800aae8 <_free_r+0x90>)
 800aa72:	6813      	ldr	r3, [r2, #0]
 800aa74:	b933      	cbnz	r3, 800aa84 <_free_r+0x2c>
 800aa76:	6063      	str	r3, [r4, #4]
 800aa78:	6014      	str	r4, [r2, #0]
 800aa7a:	4628      	mov	r0, r5
 800aa7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa80:	f000 b8e4 	b.w	800ac4c <__malloc_unlock>
 800aa84:	42a3      	cmp	r3, r4
 800aa86:	d908      	bls.n	800aa9a <_free_r+0x42>
 800aa88:	6820      	ldr	r0, [r4, #0]
 800aa8a:	1821      	adds	r1, r4, r0
 800aa8c:	428b      	cmp	r3, r1
 800aa8e:	bf01      	itttt	eq
 800aa90:	6819      	ldreq	r1, [r3, #0]
 800aa92:	685b      	ldreq	r3, [r3, #4]
 800aa94:	1809      	addeq	r1, r1, r0
 800aa96:	6021      	streq	r1, [r4, #0]
 800aa98:	e7ed      	b.n	800aa76 <_free_r+0x1e>
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	b10b      	cbz	r3, 800aaa4 <_free_r+0x4c>
 800aaa0:	42a3      	cmp	r3, r4
 800aaa2:	d9fa      	bls.n	800aa9a <_free_r+0x42>
 800aaa4:	6811      	ldr	r1, [r2, #0]
 800aaa6:	1850      	adds	r0, r2, r1
 800aaa8:	42a0      	cmp	r0, r4
 800aaaa:	d10b      	bne.n	800aac4 <_free_r+0x6c>
 800aaac:	6820      	ldr	r0, [r4, #0]
 800aaae:	4401      	add	r1, r0
 800aab0:	1850      	adds	r0, r2, r1
 800aab2:	4283      	cmp	r3, r0
 800aab4:	6011      	str	r1, [r2, #0]
 800aab6:	d1e0      	bne.n	800aa7a <_free_r+0x22>
 800aab8:	6818      	ldr	r0, [r3, #0]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	6053      	str	r3, [r2, #4]
 800aabe:	4408      	add	r0, r1
 800aac0:	6010      	str	r0, [r2, #0]
 800aac2:	e7da      	b.n	800aa7a <_free_r+0x22>
 800aac4:	d902      	bls.n	800aacc <_free_r+0x74>
 800aac6:	230c      	movs	r3, #12
 800aac8:	602b      	str	r3, [r5, #0]
 800aaca:	e7d6      	b.n	800aa7a <_free_r+0x22>
 800aacc:	6820      	ldr	r0, [r4, #0]
 800aace:	1821      	adds	r1, r4, r0
 800aad0:	428b      	cmp	r3, r1
 800aad2:	bf04      	itt	eq
 800aad4:	6819      	ldreq	r1, [r3, #0]
 800aad6:	685b      	ldreq	r3, [r3, #4]
 800aad8:	6063      	str	r3, [r4, #4]
 800aada:	bf04      	itt	eq
 800aadc:	1809      	addeq	r1, r1, r0
 800aade:	6021      	streq	r1, [r4, #0]
 800aae0:	6054      	str	r4, [r2, #4]
 800aae2:	e7ca      	b.n	800aa7a <_free_r+0x22>
 800aae4:	bd38      	pop	{r3, r4, r5, pc}
 800aae6:	bf00      	nop
 800aae8:	20004750 	.word	0x20004750

0800aaec <malloc>:
 800aaec:	4b02      	ldr	r3, [pc, #8]	@ (800aaf8 <malloc+0xc>)
 800aaee:	4601      	mov	r1, r0
 800aaf0:	6818      	ldr	r0, [r3, #0]
 800aaf2:	f000 b825 	b.w	800ab40 <_malloc_r>
 800aaf6:	bf00      	nop
 800aaf8:	2000001c 	.word	0x2000001c

0800aafc <sbrk_aligned>:
 800aafc:	b570      	push	{r4, r5, r6, lr}
 800aafe:	4e0f      	ldr	r6, [pc, #60]	@ (800ab3c <sbrk_aligned+0x40>)
 800ab00:	460c      	mov	r4, r1
 800ab02:	6831      	ldr	r1, [r6, #0]
 800ab04:	4605      	mov	r5, r0
 800ab06:	b911      	cbnz	r1, 800ab0e <sbrk_aligned+0x12>
 800ab08:	f001 ffd2 	bl	800cab0 <_sbrk_r>
 800ab0c:	6030      	str	r0, [r6, #0]
 800ab0e:	4621      	mov	r1, r4
 800ab10:	4628      	mov	r0, r5
 800ab12:	f001 ffcd 	bl	800cab0 <_sbrk_r>
 800ab16:	1c43      	adds	r3, r0, #1
 800ab18:	d103      	bne.n	800ab22 <sbrk_aligned+0x26>
 800ab1a:	f04f 34ff 	mov.w	r4, #4294967295
 800ab1e:	4620      	mov	r0, r4
 800ab20:	bd70      	pop	{r4, r5, r6, pc}
 800ab22:	1cc4      	adds	r4, r0, #3
 800ab24:	f024 0403 	bic.w	r4, r4, #3
 800ab28:	42a0      	cmp	r0, r4
 800ab2a:	d0f8      	beq.n	800ab1e <sbrk_aligned+0x22>
 800ab2c:	1a21      	subs	r1, r4, r0
 800ab2e:	4628      	mov	r0, r5
 800ab30:	f001 ffbe 	bl	800cab0 <_sbrk_r>
 800ab34:	3001      	adds	r0, #1
 800ab36:	d1f2      	bne.n	800ab1e <sbrk_aligned+0x22>
 800ab38:	e7ef      	b.n	800ab1a <sbrk_aligned+0x1e>
 800ab3a:	bf00      	nop
 800ab3c:	2000474c 	.word	0x2000474c

0800ab40 <_malloc_r>:
 800ab40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab44:	1ccd      	adds	r5, r1, #3
 800ab46:	f025 0503 	bic.w	r5, r5, #3
 800ab4a:	3508      	adds	r5, #8
 800ab4c:	2d0c      	cmp	r5, #12
 800ab4e:	bf38      	it	cc
 800ab50:	250c      	movcc	r5, #12
 800ab52:	2d00      	cmp	r5, #0
 800ab54:	4606      	mov	r6, r0
 800ab56:	db01      	blt.n	800ab5c <_malloc_r+0x1c>
 800ab58:	42a9      	cmp	r1, r5
 800ab5a:	d904      	bls.n	800ab66 <_malloc_r+0x26>
 800ab5c:	230c      	movs	r3, #12
 800ab5e:	6033      	str	r3, [r6, #0]
 800ab60:	2000      	movs	r0, #0
 800ab62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac3c <_malloc_r+0xfc>
 800ab6a:	f000 f869 	bl	800ac40 <__malloc_lock>
 800ab6e:	f8d8 3000 	ldr.w	r3, [r8]
 800ab72:	461c      	mov	r4, r3
 800ab74:	bb44      	cbnz	r4, 800abc8 <_malloc_r+0x88>
 800ab76:	4629      	mov	r1, r5
 800ab78:	4630      	mov	r0, r6
 800ab7a:	f7ff ffbf 	bl	800aafc <sbrk_aligned>
 800ab7e:	1c43      	adds	r3, r0, #1
 800ab80:	4604      	mov	r4, r0
 800ab82:	d158      	bne.n	800ac36 <_malloc_r+0xf6>
 800ab84:	f8d8 4000 	ldr.w	r4, [r8]
 800ab88:	4627      	mov	r7, r4
 800ab8a:	2f00      	cmp	r7, #0
 800ab8c:	d143      	bne.n	800ac16 <_malloc_r+0xd6>
 800ab8e:	2c00      	cmp	r4, #0
 800ab90:	d04b      	beq.n	800ac2a <_malloc_r+0xea>
 800ab92:	6823      	ldr	r3, [r4, #0]
 800ab94:	4639      	mov	r1, r7
 800ab96:	4630      	mov	r0, r6
 800ab98:	eb04 0903 	add.w	r9, r4, r3
 800ab9c:	f001 ff88 	bl	800cab0 <_sbrk_r>
 800aba0:	4581      	cmp	r9, r0
 800aba2:	d142      	bne.n	800ac2a <_malloc_r+0xea>
 800aba4:	6821      	ldr	r1, [r4, #0]
 800aba6:	1a6d      	subs	r5, r5, r1
 800aba8:	4629      	mov	r1, r5
 800abaa:	4630      	mov	r0, r6
 800abac:	f7ff ffa6 	bl	800aafc <sbrk_aligned>
 800abb0:	3001      	adds	r0, #1
 800abb2:	d03a      	beq.n	800ac2a <_malloc_r+0xea>
 800abb4:	6823      	ldr	r3, [r4, #0]
 800abb6:	442b      	add	r3, r5
 800abb8:	6023      	str	r3, [r4, #0]
 800abba:	f8d8 3000 	ldr.w	r3, [r8]
 800abbe:	685a      	ldr	r2, [r3, #4]
 800abc0:	bb62      	cbnz	r2, 800ac1c <_malloc_r+0xdc>
 800abc2:	f8c8 7000 	str.w	r7, [r8]
 800abc6:	e00f      	b.n	800abe8 <_malloc_r+0xa8>
 800abc8:	6822      	ldr	r2, [r4, #0]
 800abca:	1b52      	subs	r2, r2, r5
 800abcc:	d420      	bmi.n	800ac10 <_malloc_r+0xd0>
 800abce:	2a0b      	cmp	r2, #11
 800abd0:	d917      	bls.n	800ac02 <_malloc_r+0xc2>
 800abd2:	1961      	adds	r1, r4, r5
 800abd4:	42a3      	cmp	r3, r4
 800abd6:	6025      	str	r5, [r4, #0]
 800abd8:	bf18      	it	ne
 800abda:	6059      	strne	r1, [r3, #4]
 800abdc:	6863      	ldr	r3, [r4, #4]
 800abde:	bf08      	it	eq
 800abe0:	f8c8 1000 	streq.w	r1, [r8]
 800abe4:	5162      	str	r2, [r4, r5]
 800abe6:	604b      	str	r3, [r1, #4]
 800abe8:	4630      	mov	r0, r6
 800abea:	f000 f82f 	bl	800ac4c <__malloc_unlock>
 800abee:	f104 000b 	add.w	r0, r4, #11
 800abf2:	1d23      	adds	r3, r4, #4
 800abf4:	f020 0007 	bic.w	r0, r0, #7
 800abf8:	1ac2      	subs	r2, r0, r3
 800abfa:	bf1c      	itt	ne
 800abfc:	1a1b      	subne	r3, r3, r0
 800abfe:	50a3      	strne	r3, [r4, r2]
 800ac00:	e7af      	b.n	800ab62 <_malloc_r+0x22>
 800ac02:	6862      	ldr	r2, [r4, #4]
 800ac04:	42a3      	cmp	r3, r4
 800ac06:	bf0c      	ite	eq
 800ac08:	f8c8 2000 	streq.w	r2, [r8]
 800ac0c:	605a      	strne	r2, [r3, #4]
 800ac0e:	e7eb      	b.n	800abe8 <_malloc_r+0xa8>
 800ac10:	4623      	mov	r3, r4
 800ac12:	6864      	ldr	r4, [r4, #4]
 800ac14:	e7ae      	b.n	800ab74 <_malloc_r+0x34>
 800ac16:	463c      	mov	r4, r7
 800ac18:	687f      	ldr	r7, [r7, #4]
 800ac1a:	e7b6      	b.n	800ab8a <_malloc_r+0x4a>
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	42a3      	cmp	r3, r4
 800ac22:	d1fb      	bne.n	800ac1c <_malloc_r+0xdc>
 800ac24:	2300      	movs	r3, #0
 800ac26:	6053      	str	r3, [r2, #4]
 800ac28:	e7de      	b.n	800abe8 <_malloc_r+0xa8>
 800ac2a:	230c      	movs	r3, #12
 800ac2c:	6033      	str	r3, [r6, #0]
 800ac2e:	4630      	mov	r0, r6
 800ac30:	f000 f80c 	bl	800ac4c <__malloc_unlock>
 800ac34:	e794      	b.n	800ab60 <_malloc_r+0x20>
 800ac36:	6005      	str	r5, [r0, #0]
 800ac38:	e7d6      	b.n	800abe8 <_malloc_r+0xa8>
 800ac3a:	bf00      	nop
 800ac3c:	20004750 	.word	0x20004750

0800ac40 <__malloc_lock>:
 800ac40:	4801      	ldr	r0, [pc, #4]	@ (800ac48 <__malloc_lock+0x8>)
 800ac42:	f7ff b8a4 	b.w	8009d8e <__retarget_lock_acquire_recursive>
 800ac46:	bf00      	nop
 800ac48:	20004748 	.word	0x20004748

0800ac4c <__malloc_unlock>:
 800ac4c:	4801      	ldr	r0, [pc, #4]	@ (800ac54 <__malloc_unlock+0x8>)
 800ac4e:	f7ff b89f 	b.w	8009d90 <__retarget_lock_release_recursive>
 800ac52:	bf00      	nop
 800ac54:	20004748 	.word	0x20004748

0800ac58 <_Balloc>:
 800ac58:	b570      	push	{r4, r5, r6, lr}
 800ac5a:	69c6      	ldr	r6, [r0, #28]
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	460d      	mov	r5, r1
 800ac60:	b976      	cbnz	r6, 800ac80 <_Balloc+0x28>
 800ac62:	2010      	movs	r0, #16
 800ac64:	f7ff ff42 	bl	800aaec <malloc>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	61e0      	str	r0, [r4, #28]
 800ac6c:	b920      	cbnz	r0, 800ac78 <_Balloc+0x20>
 800ac6e:	4b18      	ldr	r3, [pc, #96]	@ (800acd0 <_Balloc+0x78>)
 800ac70:	4818      	ldr	r0, [pc, #96]	@ (800acd4 <_Balloc+0x7c>)
 800ac72:	216b      	movs	r1, #107	@ 0x6b
 800ac74:	f001 ff34 	bl	800cae0 <__assert_func>
 800ac78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac7c:	6006      	str	r6, [r0, #0]
 800ac7e:	60c6      	str	r6, [r0, #12]
 800ac80:	69e6      	ldr	r6, [r4, #28]
 800ac82:	68f3      	ldr	r3, [r6, #12]
 800ac84:	b183      	cbz	r3, 800aca8 <_Balloc+0x50>
 800ac86:	69e3      	ldr	r3, [r4, #28]
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac8e:	b9b8      	cbnz	r0, 800acc0 <_Balloc+0x68>
 800ac90:	2101      	movs	r1, #1
 800ac92:	fa01 f605 	lsl.w	r6, r1, r5
 800ac96:	1d72      	adds	r2, r6, #5
 800ac98:	0092      	lsls	r2, r2, #2
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	f001 ff3e 	bl	800cb1c <_calloc_r>
 800aca0:	b160      	cbz	r0, 800acbc <_Balloc+0x64>
 800aca2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aca6:	e00e      	b.n	800acc6 <_Balloc+0x6e>
 800aca8:	2221      	movs	r2, #33	@ 0x21
 800acaa:	2104      	movs	r1, #4
 800acac:	4620      	mov	r0, r4
 800acae:	f001 ff35 	bl	800cb1c <_calloc_r>
 800acb2:	69e3      	ldr	r3, [r4, #28]
 800acb4:	60f0      	str	r0, [r6, #12]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1e4      	bne.n	800ac86 <_Balloc+0x2e>
 800acbc:	2000      	movs	r0, #0
 800acbe:	bd70      	pop	{r4, r5, r6, pc}
 800acc0:	6802      	ldr	r2, [r0, #0]
 800acc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acc6:	2300      	movs	r3, #0
 800acc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800accc:	e7f7      	b.n	800acbe <_Balloc+0x66>
 800acce:	bf00      	nop
 800acd0:	0800d4fa 	.word	0x0800d4fa
 800acd4:	0800d57a 	.word	0x0800d57a

0800acd8 <_Bfree>:
 800acd8:	b570      	push	{r4, r5, r6, lr}
 800acda:	69c6      	ldr	r6, [r0, #28]
 800acdc:	4605      	mov	r5, r0
 800acde:	460c      	mov	r4, r1
 800ace0:	b976      	cbnz	r6, 800ad00 <_Bfree+0x28>
 800ace2:	2010      	movs	r0, #16
 800ace4:	f7ff ff02 	bl	800aaec <malloc>
 800ace8:	4602      	mov	r2, r0
 800acea:	61e8      	str	r0, [r5, #28]
 800acec:	b920      	cbnz	r0, 800acf8 <_Bfree+0x20>
 800acee:	4b09      	ldr	r3, [pc, #36]	@ (800ad14 <_Bfree+0x3c>)
 800acf0:	4809      	ldr	r0, [pc, #36]	@ (800ad18 <_Bfree+0x40>)
 800acf2:	218f      	movs	r1, #143	@ 0x8f
 800acf4:	f001 fef4 	bl	800cae0 <__assert_func>
 800acf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acfc:	6006      	str	r6, [r0, #0]
 800acfe:	60c6      	str	r6, [r0, #12]
 800ad00:	b13c      	cbz	r4, 800ad12 <_Bfree+0x3a>
 800ad02:	69eb      	ldr	r3, [r5, #28]
 800ad04:	6862      	ldr	r2, [r4, #4]
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad0c:	6021      	str	r1, [r4, #0]
 800ad0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad12:	bd70      	pop	{r4, r5, r6, pc}
 800ad14:	0800d4fa 	.word	0x0800d4fa
 800ad18:	0800d57a 	.word	0x0800d57a

0800ad1c <__multadd>:
 800ad1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad20:	690d      	ldr	r5, [r1, #16]
 800ad22:	4607      	mov	r7, r0
 800ad24:	460c      	mov	r4, r1
 800ad26:	461e      	mov	r6, r3
 800ad28:	f101 0c14 	add.w	ip, r1, #20
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	f8dc 3000 	ldr.w	r3, [ip]
 800ad32:	b299      	uxth	r1, r3
 800ad34:	fb02 6101 	mla	r1, r2, r1, r6
 800ad38:	0c1e      	lsrs	r6, r3, #16
 800ad3a:	0c0b      	lsrs	r3, r1, #16
 800ad3c:	fb02 3306 	mla	r3, r2, r6, r3
 800ad40:	b289      	uxth	r1, r1
 800ad42:	3001      	adds	r0, #1
 800ad44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad48:	4285      	cmp	r5, r0
 800ad4a:	f84c 1b04 	str.w	r1, [ip], #4
 800ad4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad52:	dcec      	bgt.n	800ad2e <__multadd+0x12>
 800ad54:	b30e      	cbz	r6, 800ad9a <__multadd+0x7e>
 800ad56:	68a3      	ldr	r3, [r4, #8]
 800ad58:	42ab      	cmp	r3, r5
 800ad5a:	dc19      	bgt.n	800ad90 <__multadd+0x74>
 800ad5c:	6861      	ldr	r1, [r4, #4]
 800ad5e:	4638      	mov	r0, r7
 800ad60:	3101      	adds	r1, #1
 800ad62:	f7ff ff79 	bl	800ac58 <_Balloc>
 800ad66:	4680      	mov	r8, r0
 800ad68:	b928      	cbnz	r0, 800ad76 <__multadd+0x5a>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	4b0c      	ldr	r3, [pc, #48]	@ (800ada0 <__multadd+0x84>)
 800ad6e:	480d      	ldr	r0, [pc, #52]	@ (800ada4 <__multadd+0x88>)
 800ad70:	21ba      	movs	r1, #186	@ 0xba
 800ad72:	f001 feb5 	bl	800cae0 <__assert_func>
 800ad76:	6922      	ldr	r2, [r4, #16]
 800ad78:	3202      	adds	r2, #2
 800ad7a:	f104 010c 	add.w	r1, r4, #12
 800ad7e:	0092      	lsls	r2, r2, #2
 800ad80:	300c      	adds	r0, #12
 800ad82:	f7ff f806 	bl	8009d92 <memcpy>
 800ad86:	4621      	mov	r1, r4
 800ad88:	4638      	mov	r0, r7
 800ad8a:	f7ff ffa5 	bl	800acd8 <_Bfree>
 800ad8e:	4644      	mov	r4, r8
 800ad90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad94:	3501      	adds	r5, #1
 800ad96:	615e      	str	r6, [r3, #20]
 800ad98:	6125      	str	r5, [r4, #16]
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada0:	0800d569 	.word	0x0800d569
 800ada4:	0800d57a 	.word	0x0800d57a

0800ada8 <__s2b>:
 800ada8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adac:	460c      	mov	r4, r1
 800adae:	4615      	mov	r5, r2
 800adb0:	461f      	mov	r7, r3
 800adb2:	2209      	movs	r2, #9
 800adb4:	3308      	adds	r3, #8
 800adb6:	4606      	mov	r6, r0
 800adb8:	fb93 f3f2 	sdiv	r3, r3, r2
 800adbc:	2100      	movs	r1, #0
 800adbe:	2201      	movs	r2, #1
 800adc0:	429a      	cmp	r2, r3
 800adc2:	db09      	blt.n	800add8 <__s2b+0x30>
 800adc4:	4630      	mov	r0, r6
 800adc6:	f7ff ff47 	bl	800ac58 <_Balloc>
 800adca:	b940      	cbnz	r0, 800adde <__s2b+0x36>
 800adcc:	4602      	mov	r2, r0
 800adce:	4b19      	ldr	r3, [pc, #100]	@ (800ae34 <__s2b+0x8c>)
 800add0:	4819      	ldr	r0, [pc, #100]	@ (800ae38 <__s2b+0x90>)
 800add2:	21d3      	movs	r1, #211	@ 0xd3
 800add4:	f001 fe84 	bl	800cae0 <__assert_func>
 800add8:	0052      	lsls	r2, r2, #1
 800adda:	3101      	adds	r1, #1
 800addc:	e7f0      	b.n	800adc0 <__s2b+0x18>
 800adde:	9b08      	ldr	r3, [sp, #32]
 800ade0:	6143      	str	r3, [r0, #20]
 800ade2:	2d09      	cmp	r5, #9
 800ade4:	f04f 0301 	mov.w	r3, #1
 800ade8:	6103      	str	r3, [r0, #16]
 800adea:	dd16      	ble.n	800ae1a <__s2b+0x72>
 800adec:	f104 0909 	add.w	r9, r4, #9
 800adf0:	46c8      	mov	r8, r9
 800adf2:	442c      	add	r4, r5
 800adf4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800adf8:	4601      	mov	r1, r0
 800adfa:	3b30      	subs	r3, #48	@ 0x30
 800adfc:	220a      	movs	r2, #10
 800adfe:	4630      	mov	r0, r6
 800ae00:	f7ff ff8c 	bl	800ad1c <__multadd>
 800ae04:	45a0      	cmp	r8, r4
 800ae06:	d1f5      	bne.n	800adf4 <__s2b+0x4c>
 800ae08:	f1a5 0408 	sub.w	r4, r5, #8
 800ae0c:	444c      	add	r4, r9
 800ae0e:	1b2d      	subs	r5, r5, r4
 800ae10:	1963      	adds	r3, r4, r5
 800ae12:	42bb      	cmp	r3, r7
 800ae14:	db04      	blt.n	800ae20 <__s2b+0x78>
 800ae16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae1a:	340a      	adds	r4, #10
 800ae1c:	2509      	movs	r5, #9
 800ae1e:	e7f6      	b.n	800ae0e <__s2b+0x66>
 800ae20:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae24:	4601      	mov	r1, r0
 800ae26:	3b30      	subs	r3, #48	@ 0x30
 800ae28:	220a      	movs	r2, #10
 800ae2a:	4630      	mov	r0, r6
 800ae2c:	f7ff ff76 	bl	800ad1c <__multadd>
 800ae30:	e7ee      	b.n	800ae10 <__s2b+0x68>
 800ae32:	bf00      	nop
 800ae34:	0800d569 	.word	0x0800d569
 800ae38:	0800d57a 	.word	0x0800d57a

0800ae3c <__hi0bits>:
 800ae3c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ae40:	4603      	mov	r3, r0
 800ae42:	bf36      	itet	cc
 800ae44:	0403      	lslcc	r3, r0, #16
 800ae46:	2000      	movcs	r0, #0
 800ae48:	2010      	movcc	r0, #16
 800ae4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae4e:	bf3c      	itt	cc
 800ae50:	021b      	lslcc	r3, r3, #8
 800ae52:	3008      	addcc	r0, #8
 800ae54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae58:	bf3c      	itt	cc
 800ae5a:	011b      	lslcc	r3, r3, #4
 800ae5c:	3004      	addcc	r0, #4
 800ae5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae62:	bf3c      	itt	cc
 800ae64:	009b      	lslcc	r3, r3, #2
 800ae66:	3002      	addcc	r0, #2
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	db05      	blt.n	800ae78 <__hi0bits+0x3c>
 800ae6c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ae70:	f100 0001 	add.w	r0, r0, #1
 800ae74:	bf08      	it	eq
 800ae76:	2020      	moveq	r0, #32
 800ae78:	4770      	bx	lr

0800ae7a <__lo0bits>:
 800ae7a:	6803      	ldr	r3, [r0, #0]
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	f013 0007 	ands.w	r0, r3, #7
 800ae82:	d00b      	beq.n	800ae9c <__lo0bits+0x22>
 800ae84:	07d9      	lsls	r1, r3, #31
 800ae86:	d421      	bmi.n	800aecc <__lo0bits+0x52>
 800ae88:	0798      	lsls	r0, r3, #30
 800ae8a:	bf49      	itett	mi
 800ae8c:	085b      	lsrmi	r3, r3, #1
 800ae8e:	089b      	lsrpl	r3, r3, #2
 800ae90:	2001      	movmi	r0, #1
 800ae92:	6013      	strmi	r3, [r2, #0]
 800ae94:	bf5c      	itt	pl
 800ae96:	6013      	strpl	r3, [r2, #0]
 800ae98:	2002      	movpl	r0, #2
 800ae9a:	4770      	bx	lr
 800ae9c:	b299      	uxth	r1, r3
 800ae9e:	b909      	cbnz	r1, 800aea4 <__lo0bits+0x2a>
 800aea0:	0c1b      	lsrs	r3, r3, #16
 800aea2:	2010      	movs	r0, #16
 800aea4:	b2d9      	uxtb	r1, r3
 800aea6:	b909      	cbnz	r1, 800aeac <__lo0bits+0x32>
 800aea8:	3008      	adds	r0, #8
 800aeaa:	0a1b      	lsrs	r3, r3, #8
 800aeac:	0719      	lsls	r1, r3, #28
 800aeae:	bf04      	itt	eq
 800aeb0:	091b      	lsreq	r3, r3, #4
 800aeb2:	3004      	addeq	r0, #4
 800aeb4:	0799      	lsls	r1, r3, #30
 800aeb6:	bf04      	itt	eq
 800aeb8:	089b      	lsreq	r3, r3, #2
 800aeba:	3002      	addeq	r0, #2
 800aebc:	07d9      	lsls	r1, r3, #31
 800aebe:	d403      	bmi.n	800aec8 <__lo0bits+0x4e>
 800aec0:	085b      	lsrs	r3, r3, #1
 800aec2:	f100 0001 	add.w	r0, r0, #1
 800aec6:	d003      	beq.n	800aed0 <__lo0bits+0x56>
 800aec8:	6013      	str	r3, [r2, #0]
 800aeca:	4770      	bx	lr
 800aecc:	2000      	movs	r0, #0
 800aece:	4770      	bx	lr
 800aed0:	2020      	movs	r0, #32
 800aed2:	4770      	bx	lr

0800aed4 <__i2b>:
 800aed4:	b510      	push	{r4, lr}
 800aed6:	460c      	mov	r4, r1
 800aed8:	2101      	movs	r1, #1
 800aeda:	f7ff febd 	bl	800ac58 <_Balloc>
 800aede:	4602      	mov	r2, r0
 800aee0:	b928      	cbnz	r0, 800aeee <__i2b+0x1a>
 800aee2:	4b05      	ldr	r3, [pc, #20]	@ (800aef8 <__i2b+0x24>)
 800aee4:	4805      	ldr	r0, [pc, #20]	@ (800aefc <__i2b+0x28>)
 800aee6:	f240 1145 	movw	r1, #325	@ 0x145
 800aeea:	f001 fdf9 	bl	800cae0 <__assert_func>
 800aeee:	2301      	movs	r3, #1
 800aef0:	6144      	str	r4, [r0, #20]
 800aef2:	6103      	str	r3, [r0, #16]
 800aef4:	bd10      	pop	{r4, pc}
 800aef6:	bf00      	nop
 800aef8:	0800d569 	.word	0x0800d569
 800aefc:	0800d57a 	.word	0x0800d57a

0800af00 <__multiply>:
 800af00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af04:	4614      	mov	r4, r2
 800af06:	690a      	ldr	r2, [r1, #16]
 800af08:	6923      	ldr	r3, [r4, #16]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	bfa8      	it	ge
 800af0e:	4623      	movge	r3, r4
 800af10:	460f      	mov	r7, r1
 800af12:	bfa4      	itt	ge
 800af14:	460c      	movge	r4, r1
 800af16:	461f      	movge	r7, r3
 800af18:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800af1c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800af20:	68a3      	ldr	r3, [r4, #8]
 800af22:	6861      	ldr	r1, [r4, #4]
 800af24:	eb0a 0609 	add.w	r6, sl, r9
 800af28:	42b3      	cmp	r3, r6
 800af2a:	b085      	sub	sp, #20
 800af2c:	bfb8      	it	lt
 800af2e:	3101      	addlt	r1, #1
 800af30:	f7ff fe92 	bl	800ac58 <_Balloc>
 800af34:	b930      	cbnz	r0, 800af44 <__multiply+0x44>
 800af36:	4602      	mov	r2, r0
 800af38:	4b44      	ldr	r3, [pc, #272]	@ (800b04c <__multiply+0x14c>)
 800af3a:	4845      	ldr	r0, [pc, #276]	@ (800b050 <__multiply+0x150>)
 800af3c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800af40:	f001 fdce 	bl	800cae0 <__assert_func>
 800af44:	f100 0514 	add.w	r5, r0, #20
 800af48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af4c:	462b      	mov	r3, r5
 800af4e:	2200      	movs	r2, #0
 800af50:	4543      	cmp	r3, r8
 800af52:	d321      	bcc.n	800af98 <__multiply+0x98>
 800af54:	f107 0114 	add.w	r1, r7, #20
 800af58:	f104 0214 	add.w	r2, r4, #20
 800af5c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800af60:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800af64:	9302      	str	r3, [sp, #8]
 800af66:	1b13      	subs	r3, r2, r4
 800af68:	3b15      	subs	r3, #21
 800af6a:	f023 0303 	bic.w	r3, r3, #3
 800af6e:	3304      	adds	r3, #4
 800af70:	f104 0715 	add.w	r7, r4, #21
 800af74:	42ba      	cmp	r2, r7
 800af76:	bf38      	it	cc
 800af78:	2304      	movcc	r3, #4
 800af7a:	9301      	str	r3, [sp, #4]
 800af7c:	9b02      	ldr	r3, [sp, #8]
 800af7e:	9103      	str	r1, [sp, #12]
 800af80:	428b      	cmp	r3, r1
 800af82:	d80c      	bhi.n	800af9e <__multiply+0x9e>
 800af84:	2e00      	cmp	r6, #0
 800af86:	dd03      	ble.n	800af90 <__multiply+0x90>
 800af88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d05b      	beq.n	800b048 <__multiply+0x148>
 800af90:	6106      	str	r6, [r0, #16]
 800af92:	b005      	add	sp, #20
 800af94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af98:	f843 2b04 	str.w	r2, [r3], #4
 800af9c:	e7d8      	b.n	800af50 <__multiply+0x50>
 800af9e:	f8b1 a000 	ldrh.w	sl, [r1]
 800afa2:	f1ba 0f00 	cmp.w	sl, #0
 800afa6:	d024      	beq.n	800aff2 <__multiply+0xf2>
 800afa8:	f104 0e14 	add.w	lr, r4, #20
 800afac:	46a9      	mov	r9, r5
 800afae:	f04f 0c00 	mov.w	ip, #0
 800afb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800afb6:	f8d9 3000 	ldr.w	r3, [r9]
 800afba:	fa1f fb87 	uxth.w	fp, r7
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	fb0a 330b 	mla	r3, sl, fp, r3
 800afc4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800afc8:	f8d9 7000 	ldr.w	r7, [r9]
 800afcc:	4463      	add	r3, ip
 800afce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800afd2:	fb0a c70b 	mla	r7, sl, fp, ip
 800afd6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800afda:	b29b      	uxth	r3, r3
 800afdc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800afe0:	4572      	cmp	r2, lr
 800afe2:	f849 3b04 	str.w	r3, [r9], #4
 800afe6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800afea:	d8e2      	bhi.n	800afb2 <__multiply+0xb2>
 800afec:	9b01      	ldr	r3, [sp, #4]
 800afee:	f845 c003 	str.w	ip, [r5, r3]
 800aff2:	9b03      	ldr	r3, [sp, #12]
 800aff4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aff8:	3104      	adds	r1, #4
 800affa:	f1b9 0f00 	cmp.w	r9, #0
 800affe:	d021      	beq.n	800b044 <__multiply+0x144>
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	f104 0c14 	add.w	ip, r4, #20
 800b006:	46ae      	mov	lr, r5
 800b008:	f04f 0a00 	mov.w	sl, #0
 800b00c:	f8bc b000 	ldrh.w	fp, [ip]
 800b010:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b014:	fb09 770b 	mla	r7, r9, fp, r7
 800b018:	4457      	add	r7, sl
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b020:	f84e 3b04 	str.w	r3, [lr], #4
 800b024:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b028:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b02c:	f8be 3000 	ldrh.w	r3, [lr]
 800b030:	fb09 330a 	mla	r3, r9, sl, r3
 800b034:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b038:	4562      	cmp	r2, ip
 800b03a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b03e:	d8e5      	bhi.n	800b00c <__multiply+0x10c>
 800b040:	9f01      	ldr	r7, [sp, #4]
 800b042:	51eb      	str	r3, [r5, r7]
 800b044:	3504      	adds	r5, #4
 800b046:	e799      	b.n	800af7c <__multiply+0x7c>
 800b048:	3e01      	subs	r6, #1
 800b04a:	e79b      	b.n	800af84 <__multiply+0x84>
 800b04c:	0800d569 	.word	0x0800d569
 800b050:	0800d57a 	.word	0x0800d57a

0800b054 <__pow5mult>:
 800b054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b058:	4615      	mov	r5, r2
 800b05a:	f012 0203 	ands.w	r2, r2, #3
 800b05e:	4607      	mov	r7, r0
 800b060:	460e      	mov	r6, r1
 800b062:	d007      	beq.n	800b074 <__pow5mult+0x20>
 800b064:	4c25      	ldr	r4, [pc, #148]	@ (800b0fc <__pow5mult+0xa8>)
 800b066:	3a01      	subs	r2, #1
 800b068:	2300      	movs	r3, #0
 800b06a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b06e:	f7ff fe55 	bl	800ad1c <__multadd>
 800b072:	4606      	mov	r6, r0
 800b074:	10ad      	asrs	r5, r5, #2
 800b076:	d03d      	beq.n	800b0f4 <__pow5mult+0xa0>
 800b078:	69fc      	ldr	r4, [r7, #28]
 800b07a:	b97c      	cbnz	r4, 800b09c <__pow5mult+0x48>
 800b07c:	2010      	movs	r0, #16
 800b07e:	f7ff fd35 	bl	800aaec <malloc>
 800b082:	4602      	mov	r2, r0
 800b084:	61f8      	str	r0, [r7, #28]
 800b086:	b928      	cbnz	r0, 800b094 <__pow5mult+0x40>
 800b088:	4b1d      	ldr	r3, [pc, #116]	@ (800b100 <__pow5mult+0xac>)
 800b08a:	481e      	ldr	r0, [pc, #120]	@ (800b104 <__pow5mult+0xb0>)
 800b08c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b090:	f001 fd26 	bl	800cae0 <__assert_func>
 800b094:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b098:	6004      	str	r4, [r0, #0]
 800b09a:	60c4      	str	r4, [r0, #12]
 800b09c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b0a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0a4:	b94c      	cbnz	r4, 800b0ba <__pow5mult+0x66>
 800b0a6:	f240 2171 	movw	r1, #625	@ 0x271
 800b0aa:	4638      	mov	r0, r7
 800b0ac:	f7ff ff12 	bl	800aed4 <__i2b>
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	6003      	str	r3, [r0, #0]
 800b0ba:	f04f 0900 	mov.w	r9, #0
 800b0be:	07eb      	lsls	r3, r5, #31
 800b0c0:	d50a      	bpl.n	800b0d8 <__pow5mult+0x84>
 800b0c2:	4631      	mov	r1, r6
 800b0c4:	4622      	mov	r2, r4
 800b0c6:	4638      	mov	r0, r7
 800b0c8:	f7ff ff1a 	bl	800af00 <__multiply>
 800b0cc:	4631      	mov	r1, r6
 800b0ce:	4680      	mov	r8, r0
 800b0d0:	4638      	mov	r0, r7
 800b0d2:	f7ff fe01 	bl	800acd8 <_Bfree>
 800b0d6:	4646      	mov	r6, r8
 800b0d8:	106d      	asrs	r5, r5, #1
 800b0da:	d00b      	beq.n	800b0f4 <__pow5mult+0xa0>
 800b0dc:	6820      	ldr	r0, [r4, #0]
 800b0de:	b938      	cbnz	r0, 800b0f0 <__pow5mult+0x9c>
 800b0e0:	4622      	mov	r2, r4
 800b0e2:	4621      	mov	r1, r4
 800b0e4:	4638      	mov	r0, r7
 800b0e6:	f7ff ff0b 	bl	800af00 <__multiply>
 800b0ea:	6020      	str	r0, [r4, #0]
 800b0ec:	f8c0 9000 	str.w	r9, [r0]
 800b0f0:	4604      	mov	r4, r0
 800b0f2:	e7e4      	b.n	800b0be <__pow5mult+0x6a>
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0fa:	bf00      	nop
 800b0fc:	0800d5d4 	.word	0x0800d5d4
 800b100:	0800d4fa 	.word	0x0800d4fa
 800b104:	0800d57a 	.word	0x0800d57a

0800b108 <__lshift>:
 800b108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b10c:	460c      	mov	r4, r1
 800b10e:	6849      	ldr	r1, [r1, #4]
 800b110:	6923      	ldr	r3, [r4, #16]
 800b112:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b116:	68a3      	ldr	r3, [r4, #8]
 800b118:	4607      	mov	r7, r0
 800b11a:	4691      	mov	r9, r2
 800b11c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b120:	f108 0601 	add.w	r6, r8, #1
 800b124:	42b3      	cmp	r3, r6
 800b126:	db0b      	blt.n	800b140 <__lshift+0x38>
 800b128:	4638      	mov	r0, r7
 800b12a:	f7ff fd95 	bl	800ac58 <_Balloc>
 800b12e:	4605      	mov	r5, r0
 800b130:	b948      	cbnz	r0, 800b146 <__lshift+0x3e>
 800b132:	4602      	mov	r2, r0
 800b134:	4b28      	ldr	r3, [pc, #160]	@ (800b1d8 <__lshift+0xd0>)
 800b136:	4829      	ldr	r0, [pc, #164]	@ (800b1dc <__lshift+0xd4>)
 800b138:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b13c:	f001 fcd0 	bl	800cae0 <__assert_func>
 800b140:	3101      	adds	r1, #1
 800b142:	005b      	lsls	r3, r3, #1
 800b144:	e7ee      	b.n	800b124 <__lshift+0x1c>
 800b146:	2300      	movs	r3, #0
 800b148:	f100 0114 	add.w	r1, r0, #20
 800b14c:	f100 0210 	add.w	r2, r0, #16
 800b150:	4618      	mov	r0, r3
 800b152:	4553      	cmp	r3, sl
 800b154:	db33      	blt.n	800b1be <__lshift+0xb6>
 800b156:	6920      	ldr	r0, [r4, #16]
 800b158:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b15c:	f104 0314 	add.w	r3, r4, #20
 800b160:	f019 091f 	ands.w	r9, r9, #31
 800b164:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b168:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b16c:	d02b      	beq.n	800b1c6 <__lshift+0xbe>
 800b16e:	f1c9 0e20 	rsb	lr, r9, #32
 800b172:	468a      	mov	sl, r1
 800b174:	2200      	movs	r2, #0
 800b176:	6818      	ldr	r0, [r3, #0]
 800b178:	fa00 f009 	lsl.w	r0, r0, r9
 800b17c:	4310      	orrs	r0, r2
 800b17e:	f84a 0b04 	str.w	r0, [sl], #4
 800b182:	f853 2b04 	ldr.w	r2, [r3], #4
 800b186:	459c      	cmp	ip, r3
 800b188:	fa22 f20e 	lsr.w	r2, r2, lr
 800b18c:	d8f3      	bhi.n	800b176 <__lshift+0x6e>
 800b18e:	ebac 0304 	sub.w	r3, ip, r4
 800b192:	3b15      	subs	r3, #21
 800b194:	f023 0303 	bic.w	r3, r3, #3
 800b198:	3304      	adds	r3, #4
 800b19a:	f104 0015 	add.w	r0, r4, #21
 800b19e:	4584      	cmp	ip, r0
 800b1a0:	bf38      	it	cc
 800b1a2:	2304      	movcc	r3, #4
 800b1a4:	50ca      	str	r2, [r1, r3]
 800b1a6:	b10a      	cbz	r2, 800b1ac <__lshift+0xa4>
 800b1a8:	f108 0602 	add.w	r6, r8, #2
 800b1ac:	3e01      	subs	r6, #1
 800b1ae:	4638      	mov	r0, r7
 800b1b0:	612e      	str	r6, [r5, #16]
 800b1b2:	4621      	mov	r1, r4
 800b1b4:	f7ff fd90 	bl	800acd8 <_Bfree>
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1be:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	e7c5      	b.n	800b152 <__lshift+0x4a>
 800b1c6:	3904      	subs	r1, #4
 800b1c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1d0:	459c      	cmp	ip, r3
 800b1d2:	d8f9      	bhi.n	800b1c8 <__lshift+0xc0>
 800b1d4:	e7ea      	b.n	800b1ac <__lshift+0xa4>
 800b1d6:	bf00      	nop
 800b1d8:	0800d569 	.word	0x0800d569
 800b1dc:	0800d57a 	.word	0x0800d57a

0800b1e0 <__mcmp>:
 800b1e0:	690a      	ldr	r2, [r1, #16]
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	6900      	ldr	r0, [r0, #16]
 800b1e6:	1a80      	subs	r0, r0, r2
 800b1e8:	b530      	push	{r4, r5, lr}
 800b1ea:	d10e      	bne.n	800b20a <__mcmp+0x2a>
 800b1ec:	3314      	adds	r3, #20
 800b1ee:	3114      	adds	r1, #20
 800b1f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b1f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b1f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b1fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b200:	4295      	cmp	r5, r2
 800b202:	d003      	beq.n	800b20c <__mcmp+0x2c>
 800b204:	d205      	bcs.n	800b212 <__mcmp+0x32>
 800b206:	f04f 30ff 	mov.w	r0, #4294967295
 800b20a:	bd30      	pop	{r4, r5, pc}
 800b20c:	42a3      	cmp	r3, r4
 800b20e:	d3f3      	bcc.n	800b1f8 <__mcmp+0x18>
 800b210:	e7fb      	b.n	800b20a <__mcmp+0x2a>
 800b212:	2001      	movs	r0, #1
 800b214:	e7f9      	b.n	800b20a <__mcmp+0x2a>
	...

0800b218 <__mdiff>:
 800b218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21c:	4689      	mov	r9, r1
 800b21e:	4606      	mov	r6, r0
 800b220:	4611      	mov	r1, r2
 800b222:	4648      	mov	r0, r9
 800b224:	4614      	mov	r4, r2
 800b226:	f7ff ffdb 	bl	800b1e0 <__mcmp>
 800b22a:	1e05      	subs	r5, r0, #0
 800b22c:	d112      	bne.n	800b254 <__mdiff+0x3c>
 800b22e:	4629      	mov	r1, r5
 800b230:	4630      	mov	r0, r6
 800b232:	f7ff fd11 	bl	800ac58 <_Balloc>
 800b236:	4602      	mov	r2, r0
 800b238:	b928      	cbnz	r0, 800b246 <__mdiff+0x2e>
 800b23a:	4b3f      	ldr	r3, [pc, #252]	@ (800b338 <__mdiff+0x120>)
 800b23c:	f240 2137 	movw	r1, #567	@ 0x237
 800b240:	483e      	ldr	r0, [pc, #248]	@ (800b33c <__mdiff+0x124>)
 800b242:	f001 fc4d 	bl	800cae0 <__assert_func>
 800b246:	2301      	movs	r3, #1
 800b248:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b24c:	4610      	mov	r0, r2
 800b24e:	b003      	add	sp, #12
 800b250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b254:	bfbc      	itt	lt
 800b256:	464b      	movlt	r3, r9
 800b258:	46a1      	movlt	r9, r4
 800b25a:	4630      	mov	r0, r6
 800b25c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b260:	bfba      	itte	lt
 800b262:	461c      	movlt	r4, r3
 800b264:	2501      	movlt	r5, #1
 800b266:	2500      	movge	r5, #0
 800b268:	f7ff fcf6 	bl	800ac58 <_Balloc>
 800b26c:	4602      	mov	r2, r0
 800b26e:	b918      	cbnz	r0, 800b278 <__mdiff+0x60>
 800b270:	4b31      	ldr	r3, [pc, #196]	@ (800b338 <__mdiff+0x120>)
 800b272:	f240 2145 	movw	r1, #581	@ 0x245
 800b276:	e7e3      	b.n	800b240 <__mdiff+0x28>
 800b278:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b27c:	6926      	ldr	r6, [r4, #16]
 800b27e:	60c5      	str	r5, [r0, #12]
 800b280:	f109 0310 	add.w	r3, r9, #16
 800b284:	f109 0514 	add.w	r5, r9, #20
 800b288:	f104 0e14 	add.w	lr, r4, #20
 800b28c:	f100 0b14 	add.w	fp, r0, #20
 800b290:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b294:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b298:	9301      	str	r3, [sp, #4]
 800b29a:	46d9      	mov	r9, fp
 800b29c:	f04f 0c00 	mov.w	ip, #0
 800b2a0:	9b01      	ldr	r3, [sp, #4]
 800b2a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b2a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b2aa:	9301      	str	r3, [sp, #4]
 800b2ac:	fa1f f38a 	uxth.w	r3, sl
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	b283      	uxth	r3, r0
 800b2b4:	1acb      	subs	r3, r1, r3
 800b2b6:	0c00      	lsrs	r0, r0, #16
 800b2b8:	4463      	add	r3, ip
 800b2ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b2be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b2c8:	4576      	cmp	r6, lr
 800b2ca:	f849 3b04 	str.w	r3, [r9], #4
 800b2ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b2d2:	d8e5      	bhi.n	800b2a0 <__mdiff+0x88>
 800b2d4:	1b33      	subs	r3, r6, r4
 800b2d6:	3b15      	subs	r3, #21
 800b2d8:	f023 0303 	bic.w	r3, r3, #3
 800b2dc:	3415      	adds	r4, #21
 800b2de:	3304      	adds	r3, #4
 800b2e0:	42a6      	cmp	r6, r4
 800b2e2:	bf38      	it	cc
 800b2e4:	2304      	movcc	r3, #4
 800b2e6:	441d      	add	r5, r3
 800b2e8:	445b      	add	r3, fp
 800b2ea:	461e      	mov	r6, r3
 800b2ec:	462c      	mov	r4, r5
 800b2ee:	4544      	cmp	r4, r8
 800b2f0:	d30e      	bcc.n	800b310 <__mdiff+0xf8>
 800b2f2:	f108 0103 	add.w	r1, r8, #3
 800b2f6:	1b49      	subs	r1, r1, r5
 800b2f8:	f021 0103 	bic.w	r1, r1, #3
 800b2fc:	3d03      	subs	r5, #3
 800b2fe:	45a8      	cmp	r8, r5
 800b300:	bf38      	it	cc
 800b302:	2100      	movcc	r1, #0
 800b304:	440b      	add	r3, r1
 800b306:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b30a:	b191      	cbz	r1, 800b332 <__mdiff+0x11a>
 800b30c:	6117      	str	r7, [r2, #16]
 800b30e:	e79d      	b.n	800b24c <__mdiff+0x34>
 800b310:	f854 1b04 	ldr.w	r1, [r4], #4
 800b314:	46e6      	mov	lr, ip
 800b316:	0c08      	lsrs	r0, r1, #16
 800b318:	fa1c fc81 	uxtah	ip, ip, r1
 800b31c:	4471      	add	r1, lr
 800b31e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b322:	b289      	uxth	r1, r1
 800b324:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b328:	f846 1b04 	str.w	r1, [r6], #4
 800b32c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b330:	e7dd      	b.n	800b2ee <__mdiff+0xd6>
 800b332:	3f01      	subs	r7, #1
 800b334:	e7e7      	b.n	800b306 <__mdiff+0xee>
 800b336:	bf00      	nop
 800b338:	0800d569 	.word	0x0800d569
 800b33c:	0800d57a 	.word	0x0800d57a

0800b340 <__ulp>:
 800b340:	b082      	sub	sp, #8
 800b342:	ed8d 0b00 	vstr	d0, [sp]
 800b346:	9a01      	ldr	r2, [sp, #4]
 800b348:	4b0f      	ldr	r3, [pc, #60]	@ (800b388 <__ulp+0x48>)
 800b34a:	4013      	ands	r3, r2
 800b34c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b350:	2b00      	cmp	r3, #0
 800b352:	dc08      	bgt.n	800b366 <__ulp+0x26>
 800b354:	425b      	negs	r3, r3
 800b356:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b35a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b35e:	da04      	bge.n	800b36a <__ulp+0x2a>
 800b360:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b364:	4113      	asrs	r3, r2
 800b366:	2200      	movs	r2, #0
 800b368:	e008      	b.n	800b37c <__ulp+0x3c>
 800b36a:	f1a2 0314 	sub.w	r3, r2, #20
 800b36e:	2b1e      	cmp	r3, #30
 800b370:	bfda      	itte	le
 800b372:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b376:	40da      	lsrle	r2, r3
 800b378:	2201      	movgt	r2, #1
 800b37a:	2300      	movs	r3, #0
 800b37c:	4619      	mov	r1, r3
 800b37e:	4610      	mov	r0, r2
 800b380:	ec41 0b10 	vmov	d0, r0, r1
 800b384:	b002      	add	sp, #8
 800b386:	4770      	bx	lr
 800b388:	7ff00000 	.word	0x7ff00000

0800b38c <__b2d>:
 800b38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b390:	6906      	ldr	r6, [r0, #16]
 800b392:	f100 0814 	add.w	r8, r0, #20
 800b396:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b39a:	1f37      	subs	r7, r6, #4
 800b39c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	f7ff fd4b 	bl	800ae3c <__hi0bits>
 800b3a6:	f1c0 0320 	rsb	r3, r0, #32
 800b3aa:	280a      	cmp	r0, #10
 800b3ac:	600b      	str	r3, [r1, #0]
 800b3ae:	491b      	ldr	r1, [pc, #108]	@ (800b41c <__b2d+0x90>)
 800b3b0:	dc15      	bgt.n	800b3de <__b2d+0x52>
 800b3b2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b3b6:	fa22 f30c 	lsr.w	r3, r2, ip
 800b3ba:	45b8      	cmp	r8, r7
 800b3bc:	ea43 0501 	orr.w	r5, r3, r1
 800b3c0:	bf34      	ite	cc
 800b3c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b3c6:	2300      	movcs	r3, #0
 800b3c8:	3015      	adds	r0, #21
 800b3ca:	fa02 f000 	lsl.w	r0, r2, r0
 800b3ce:	fa23 f30c 	lsr.w	r3, r3, ip
 800b3d2:	4303      	orrs	r3, r0
 800b3d4:	461c      	mov	r4, r3
 800b3d6:	ec45 4b10 	vmov	d0, r4, r5
 800b3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3de:	45b8      	cmp	r8, r7
 800b3e0:	bf3a      	itte	cc
 800b3e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b3e6:	f1a6 0708 	subcc.w	r7, r6, #8
 800b3ea:	2300      	movcs	r3, #0
 800b3ec:	380b      	subs	r0, #11
 800b3ee:	d012      	beq.n	800b416 <__b2d+0x8a>
 800b3f0:	f1c0 0120 	rsb	r1, r0, #32
 800b3f4:	fa23 f401 	lsr.w	r4, r3, r1
 800b3f8:	4082      	lsls	r2, r0
 800b3fa:	4322      	orrs	r2, r4
 800b3fc:	4547      	cmp	r7, r8
 800b3fe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b402:	bf8c      	ite	hi
 800b404:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b408:	2200      	movls	r2, #0
 800b40a:	4083      	lsls	r3, r0
 800b40c:	40ca      	lsrs	r2, r1
 800b40e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b412:	4313      	orrs	r3, r2
 800b414:	e7de      	b.n	800b3d4 <__b2d+0x48>
 800b416:	ea42 0501 	orr.w	r5, r2, r1
 800b41a:	e7db      	b.n	800b3d4 <__b2d+0x48>
 800b41c:	3ff00000 	.word	0x3ff00000

0800b420 <__d2b>:
 800b420:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b424:	460f      	mov	r7, r1
 800b426:	2101      	movs	r1, #1
 800b428:	ec59 8b10 	vmov	r8, r9, d0
 800b42c:	4616      	mov	r6, r2
 800b42e:	f7ff fc13 	bl	800ac58 <_Balloc>
 800b432:	4604      	mov	r4, r0
 800b434:	b930      	cbnz	r0, 800b444 <__d2b+0x24>
 800b436:	4602      	mov	r2, r0
 800b438:	4b23      	ldr	r3, [pc, #140]	@ (800b4c8 <__d2b+0xa8>)
 800b43a:	4824      	ldr	r0, [pc, #144]	@ (800b4cc <__d2b+0xac>)
 800b43c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b440:	f001 fb4e 	bl	800cae0 <__assert_func>
 800b444:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b448:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b44c:	b10d      	cbz	r5, 800b452 <__d2b+0x32>
 800b44e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b452:	9301      	str	r3, [sp, #4]
 800b454:	f1b8 0300 	subs.w	r3, r8, #0
 800b458:	d023      	beq.n	800b4a2 <__d2b+0x82>
 800b45a:	4668      	mov	r0, sp
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	f7ff fd0c 	bl	800ae7a <__lo0bits>
 800b462:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b466:	b1d0      	cbz	r0, 800b49e <__d2b+0x7e>
 800b468:	f1c0 0320 	rsb	r3, r0, #32
 800b46c:	fa02 f303 	lsl.w	r3, r2, r3
 800b470:	430b      	orrs	r3, r1
 800b472:	40c2      	lsrs	r2, r0
 800b474:	6163      	str	r3, [r4, #20]
 800b476:	9201      	str	r2, [sp, #4]
 800b478:	9b01      	ldr	r3, [sp, #4]
 800b47a:	61a3      	str	r3, [r4, #24]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	bf0c      	ite	eq
 800b480:	2201      	moveq	r2, #1
 800b482:	2202      	movne	r2, #2
 800b484:	6122      	str	r2, [r4, #16]
 800b486:	b1a5      	cbz	r5, 800b4b2 <__d2b+0x92>
 800b488:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b48c:	4405      	add	r5, r0
 800b48e:	603d      	str	r5, [r7, #0]
 800b490:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b494:	6030      	str	r0, [r6, #0]
 800b496:	4620      	mov	r0, r4
 800b498:	b003      	add	sp, #12
 800b49a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b49e:	6161      	str	r1, [r4, #20]
 800b4a0:	e7ea      	b.n	800b478 <__d2b+0x58>
 800b4a2:	a801      	add	r0, sp, #4
 800b4a4:	f7ff fce9 	bl	800ae7a <__lo0bits>
 800b4a8:	9b01      	ldr	r3, [sp, #4]
 800b4aa:	6163      	str	r3, [r4, #20]
 800b4ac:	3020      	adds	r0, #32
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	e7e8      	b.n	800b484 <__d2b+0x64>
 800b4b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b4ba:	6038      	str	r0, [r7, #0]
 800b4bc:	6918      	ldr	r0, [r3, #16]
 800b4be:	f7ff fcbd 	bl	800ae3c <__hi0bits>
 800b4c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4c6:	e7e5      	b.n	800b494 <__d2b+0x74>
 800b4c8:	0800d569 	.word	0x0800d569
 800b4cc:	0800d57a 	.word	0x0800d57a

0800b4d0 <__ratio>:
 800b4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d4:	b085      	sub	sp, #20
 800b4d6:	e9cd 1000 	strd	r1, r0, [sp]
 800b4da:	a902      	add	r1, sp, #8
 800b4dc:	f7ff ff56 	bl	800b38c <__b2d>
 800b4e0:	9800      	ldr	r0, [sp, #0]
 800b4e2:	a903      	add	r1, sp, #12
 800b4e4:	ec55 4b10 	vmov	r4, r5, d0
 800b4e8:	f7ff ff50 	bl	800b38c <__b2d>
 800b4ec:	9b01      	ldr	r3, [sp, #4]
 800b4ee:	6919      	ldr	r1, [r3, #16]
 800b4f0:	9b00      	ldr	r3, [sp, #0]
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	1ac9      	subs	r1, r1, r3
 800b4f6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b4fa:	1a9b      	subs	r3, r3, r2
 800b4fc:	ec5b ab10 	vmov	sl, fp, d0
 800b500:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b504:	2b00      	cmp	r3, #0
 800b506:	bfce      	itee	gt
 800b508:	462a      	movgt	r2, r5
 800b50a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b50e:	465a      	movle	r2, fp
 800b510:	462f      	mov	r7, r5
 800b512:	46d9      	mov	r9, fp
 800b514:	bfcc      	ite	gt
 800b516:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b51a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b51e:	464b      	mov	r3, r9
 800b520:	4652      	mov	r2, sl
 800b522:	4620      	mov	r0, r4
 800b524:	4639      	mov	r1, r7
 800b526:	f7f5 f9b9 	bl	800089c <__aeabi_ddiv>
 800b52a:	ec41 0b10 	vmov	d0, r0, r1
 800b52e:	b005      	add	sp, #20
 800b530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b534 <__copybits>:
 800b534:	3901      	subs	r1, #1
 800b536:	b570      	push	{r4, r5, r6, lr}
 800b538:	1149      	asrs	r1, r1, #5
 800b53a:	6914      	ldr	r4, [r2, #16]
 800b53c:	3101      	adds	r1, #1
 800b53e:	f102 0314 	add.w	r3, r2, #20
 800b542:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b546:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b54a:	1f05      	subs	r5, r0, #4
 800b54c:	42a3      	cmp	r3, r4
 800b54e:	d30c      	bcc.n	800b56a <__copybits+0x36>
 800b550:	1aa3      	subs	r3, r4, r2
 800b552:	3b11      	subs	r3, #17
 800b554:	f023 0303 	bic.w	r3, r3, #3
 800b558:	3211      	adds	r2, #17
 800b55a:	42a2      	cmp	r2, r4
 800b55c:	bf88      	it	hi
 800b55e:	2300      	movhi	r3, #0
 800b560:	4418      	add	r0, r3
 800b562:	2300      	movs	r3, #0
 800b564:	4288      	cmp	r0, r1
 800b566:	d305      	bcc.n	800b574 <__copybits+0x40>
 800b568:	bd70      	pop	{r4, r5, r6, pc}
 800b56a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b56e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b572:	e7eb      	b.n	800b54c <__copybits+0x18>
 800b574:	f840 3b04 	str.w	r3, [r0], #4
 800b578:	e7f4      	b.n	800b564 <__copybits+0x30>

0800b57a <__any_on>:
 800b57a:	f100 0214 	add.w	r2, r0, #20
 800b57e:	6900      	ldr	r0, [r0, #16]
 800b580:	114b      	asrs	r3, r1, #5
 800b582:	4298      	cmp	r0, r3
 800b584:	b510      	push	{r4, lr}
 800b586:	db11      	blt.n	800b5ac <__any_on+0x32>
 800b588:	dd0a      	ble.n	800b5a0 <__any_on+0x26>
 800b58a:	f011 011f 	ands.w	r1, r1, #31
 800b58e:	d007      	beq.n	800b5a0 <__any_on+0x26>
 800b590:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b594:	fa24 f001 	lsr.w	r0, r4, r1
 800b598:	fa00 f101 	lsl.w	r1, r0, r1
 800b59c:	428c      	cmp	r4, r1
 800b59e:	d10b      	bne.n	800b5b8 <__any_on+0x3e>
 800b5a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d803      	bhi.n	800b5b0 <__any_on+0x36>
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	bd10      	pop	{r4, pc}
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	e7f7      	b.n	800b5a0 <__any_on+0x26>
 800b5b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5b4:	2900      	cmp	r1, #0
 800b5b6:	d0f5      	beq.n	800b5a4 <__any_on+0x2a>
 800b5b8:	2001      	movs	r0, #1
 800b5ba:	e7f6      	b.n	800b5aa <__any_on+0x30>

0800b5bc <sulp>:
 800b5bc:	b570      	push	{r4, r5, r6, lr}
 800b5be:	4604      	mov	r4, r0
 800b5c0:	460d      	mov	r5, r1
 800b5c2:	ec45 4b10 	vmov	d0, r4, r5
 800b5c6:	4616      	mov	r6, r2
 800b5c8:	f7ff feba 	bl	800b340 <__ulp>
 800b5cc:	ec51 0b10 	vmov	r0, r1, d0
 800b5d0:	b17e      	cbz	r6, 800b5f2 <sulp+0x36>
 800b5d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b5d6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	dd09      	ble.n	800b5f2 <sulp+0x36>
 800b5de:	051b      	lsls	r3, r3, #20
 800b5e0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b5e4:	2400      	movs	r4, #0
 800b5e6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b5ea:	4622      	mov	r2, r4
 800b5ec:	462b      	mov	r3, r5
 800b5ee:	f7f5 f82b 	bl	8000648 <__aeabi_dmul>
 800b5f2:	ec41 0b10 	vmov	d0, r0, r1
 800b5f6:	bd70      	pop	{r4, r5, r6, pc}

0800b5f8 <_strtod_l>:
 800b5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fc:	b09f      	sub	sp, #124	@ 0x7c
 800b5fe:	460c      	mov	r4, r1
 800b600:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b602:	2200      	movs	r2, #0
 800b604:	921a      	str	r2, [sp, #104]	@ 0x68
 800b606:	9005      	str	r0, [sp, #20]
 800b608:	f04f 0a00 	mov.w	sl, #0
 800b60c:	f04f 0b00 	mov.w	fp, #0
 800b610:	460a      	mov	r2, r1
 800b612:	9219      	str	r2, [sp, #100]	@ 0x64
 800b614:	7811      	ldrb	r1, [r2, #0]
 800b616:	292b      	cmp	r1, #43	@ 0x2b
 800b618:	d04a      	beq.n	800b6b0 <_strtod_l+0xb8>
 800b61a:	d838      	bhi.n	800b68e <_strtod_l+0x96>
 800b61c:	290d      	cmp	r1, #13
 800b61e:	d832      	bhi.n	800b686 <_strtod_l+0x8e>
 800b620:	2908      	cmp	r1, #8
 800b622:	d832      	bhi.n	800b68a <_strtod_l+0x92>
 800b624:	2900      	cmp	r1, #0
 800b626:	d03b      	beq.n	800b6a0 <_strtod_l+0xa8>
 800b628:	2200      	movs	r2, #0
 800b62a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b62c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b62e:	782a      	ldrb	r2, [r5, #0]
 800b630:	2a30      	cmp	r2, #48	@ 0x30
 800b632:	f040 80b3 	bne.w	800b79c <_strtod_l+0x1a4>
 800b636:	786a      	ldrb	r2, [r5, #1]
 800b638:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b63c:	2a58      	cmp	r2, #88	@ 0x58
 800b63e:	d16e      	bne.n	800b71e <_strtod_l+0x126>
 800b640:	9302      	str	r3, [sp, #8]
 800b642:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b644:	9301      	str	r3, [sp, #4]
 800b646:	ab1a      	add	r3, sp, #104	@ 0x68
 800b648:	9300      	str	r3, [sp, #0]
 800b64a:	4a8e      	ldr	r2, [pc, #568]	@ (800b884 <_strtod_l+0x28c>)
 800b64c:	9805      	ldr	r0, [sp, #20]
 800b64e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b650:	a919      	add	r1, sp, #100	@ 0x64
 800b652:	f001 fadf 	bl	800cc14 <__gethex>
 800b656:	f010 060f 	ands.w	r6, r0, #15
 800b65a:	4604      	mov	r4, r0
 800b65c:	d005      	beq.n	800b66a <_strtod_l+0x72>
 800b65e:	2e06      	cmp	r6, #6
 800b660:	d128      	bne.n	800b6b4 <_strtod_l+0xbc>
 800b662:	3501      	adds	r5, #1
 800b664:	2300      	movs	r3, #0
 800b666:	9519      	str	r5, [sp, #100]	@ 0x64
 800b668:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b66a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f040 858e 	bne.w	800c18e <_strtod_l+0xb96>
 800b672:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b674:	b1cb      	cbz	r3, 800b6aa <_strtod_l+0xb2>
 800b676:	4652      	mov	r2, sl
 800b678:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b67c:	ec43 2b10 	vmov	d0, r2, r3
 800b680:	b01f      	add	sp, #124	@ 0x7c
 800b682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b686:	2920      	cmp	r1, #32
 800b688:	d1ce      	bne.n	800b628 <_strtod_l+0x30>
 800b68a:	3201      	adds	r2, #1
 800b68c:	e7c1      	b.n	800b612 <_strtod_l+0x1a>
 800b68e:	292d      	cmp	r1, #45	@ 0x2d
 800b690:	d1ca      	bne.n	800b628 <_strtod_l+0x30>
 800b692:	2101      	movs	r1, #1
 800b694:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b696:	1c51      	adds	r1, r2, #1
 800b698:	9119      	str	r1, [sp, #100]	@ 0x64
 800b69a:	7852      	ldrb	r2, [r2, #1]
 800b69c:	2a00      	cmp	r2, #0
 800b69e:	d1c5      	bne.n	800b62c <_strtod_l+0x34>
 800b6a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b6a2:	9419      	str	r4, [sp, #100]	@ 0x64
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f040 8570 	bne.w	800c18a <_strtod_l+0xb92>
 800b6aa:	4652      	mov	r2, sl
 800b6ac:	465b      	mov	r3, fp
 800b6ae:	e7e5      	b.n	800b67c <_strtod_l+0x84>
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	e7ef      	b.n	800b694 <_strtod_l+0x9c>
 800b6b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b6b6:	b13a      	cbz	r2, 800b6c8 <_strtod_l+0xd0>
 800b6b8:	2135      	movs	r1, #53	@ 0x35
 800b6ba:	a81c      	add	r0, sp, #112	@ 0x70
 800b6bc:	f7ff ff3a 	bl	800b534 <__copybits>
 800b6c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b6c2:	9805      	ldr	r0, [sp, #20]
 800b6c4:	f7ff fb08 	bl	800acd8 <_Bfree>
 800b6c8:	3e01      	subs	r6, #1
 800b6ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b6cc:	2e04      	cmp	r6, #4
 800b6ce:	d806      	bhi.n	800b6de <_strtod_l+0xe6>
 800b6d0:	e8df f006 	tbb	[pc, r6]
 800b6d4:	201d0314 	.word	0x201d0314
 800b6d8:	14          	.byte	0x14
 800b6d9:	00          	.byte	0x00
 800b6da:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b6de:	05e1      	lsls	r1, r4, #23
 800b6e0:	bf48      	it	mi
 800b6e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b6e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b6ea:	0d1b      	lsrs	r3, r3, #20
 800b6ec:	051b      	lsls	r3, r3, #20
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d1bb      	bne.n	800b66a <_strtod_l+0x72>
 800b6f2:	f7fe fb21 	bl	8009d38 <__errno>
 800b6f6:	2322      	movs	r3, #34	@ 0x22
 800b6f8:	6003      	str	r3, [r0, #0]
 800b6fa:	e7b6      	b.n	800b66a <_strtod_l+0x72>
 800b6fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b700:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b704:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b708:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b70c:	e7e7      	b.n	800b6de <_strtod_l+0xe6>
 800b70e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b88c <_strtod_l+0x294>
 800b712:	e7e4      	b.n	800b6de <_strtod_l+0xe6>
 800b714:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b718:	f04f 3aff 	mov.w	sl, #4294967295
 800b71c:	e7df      	b.n	800b6de <_strtod_l+0xe6>
 800b71e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b720:	1c5a      	adds	r2, r3, #1
 800b722:	9219      	str	r2, [sp, #100]	@ 0x64
 800b724:	785b      	ldrb	r3, [r3, #1]
 800b726:	2b30      	cmp	r3, #48	@ 0x30
 800b728:	d0f9      	beq.n	800b71e <_strtod_l+0x126>
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d09d      	beq.n	800b66a <_strtod_l+0x72>
 800b72e:	2301      	movs	r3, #1
 800b730:	9309      	str	r3, [sp, #36]	@ 0x24
 800b732:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b734:	930c      	str	r3, [sp, #48]	@ 0x30
 800b736:	2300      	movs	r3, #0
 800b738:	9308      	str	r3, [sp, #32]
 800b73a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b73c:	461f      	mov	r7, r3
 800b73e:	220a      	movs	r2, #10
 800b740:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b742:	7805      	ldrb	r5, [r0, #0]
 800b744:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b748:	b2d9      	uxtb	r1, r3
 800b74a:	2909      	cmp	r1, #9
 800b74c:	d928      	bls.n	800b7a0 <_strtod_l+0x1a8>
 800b74e:	494e      	ldr	r1, [pc, #312]	@ (800b888 <_strtod_l+0x290>)
 800b750:	2201      	movs	r2, #1
 800b752:	f001 f979 	bl	800ca48 <strncmp>
 800b756:	2800      	cmp	r0, #0
 800b758:	d032      	beq.n	800b7c0 <_strtod_l+0x1c8>
 800b75a:	2000      	movs	r0, #0
 800b75c:	462a      	mov	r2, r5
 800b75e:	4681      	mov	r9, r0
 800b760:	463d      	mov	r5, r7
 800b762:	4603      	mov	r3, r0
 800b764:	2a65      	cmp	r2, #101	@ 0x65
 800b766:	d001      	beq.n	800b76c <_strtod_l+0x174>
 800b768:	2a45      	cmp	r2, #69	@ 0x45
 800b76a:	d114      	bne.n	800b796 <_strtod_l+0x19e>
 800b76c:	b91d      	cbnz	r5, 800b776 <_strtod_l+0x17e>
 800b76e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b770:	4302      	orrs	r2, r0
 800b772:	d095      	beq.n	800b6a0 <_strtod_l+0xa8>
 800b774:	2500      	movs	r5, #0
 800b776:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b778:	1c62      	adds	r2, r4, #1
 800b77a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b77c:	7862      	ldrb	r2, [r4, #1]
 800b77e:	2a2b      	cmp	r2, #43	@ 0x2b
 800b780:	d077      	beq.n	800b872 <_strtod_l+0x27a>
 800b782:	2a2d      	cmp	r2, #45	@ 0x2d
 800b784:	d07b      	beq.n	800b87e <_strtod_l+0x286>
 800b786:	f04f 0c00 	mov.w	ip, #0
 800b78a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b78e:	2909      	cmp	r1, #9
 800b790:	f240 8082 	bls.w	800b898 <_strtod_l+0x2a0>
 800b794:	9419      	str	r4, [sp, #100]	@ 0x64
 800b796:	f04f 0800 	mov.w	r8, #0
 800b79a:	e0a2      	b.n	800b8e2 <_strtod_l+0x2ea>
 800b79c:	2300      	movs	r3, #0
 800b79e:	e7c7      	b.n	800b730 <_strtod_l+0x138>
 800b7a0:	2f08      	cmp	r7, #8
 800b7a2:	bfd5      	itete	le
 800b7a4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b7a6:	9908      	ldrgt	r1, [sp, #32]
 800b7a8:	fb02 3301 	mlale	r3, r2, r1, r3
 800b7ac:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b7b0:	f100 0001 	add.w	r0, r0, #1
 800b7b4:	bfd4      	ite	le
 800b7b6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b7b8:	9308      	strgt	r3, [sp, #32]
 800b7ba:	3701      	adds	r7, #1
 800b7bc:	9019      	str	r0, [sp, #100]	@ 0x64
 800b7be:	e7bf      	b.n	800b740 <_strtod_l+0x148>
 800b7c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7c2:	1c5a      	adds	r2, r3, #1
 800b7c4:	9219      	str	r2, [sp, #100]	@ 0x64
 800b7c6:	785a      	ldrb	r2, [r3, #1]
 800b7c8:	b37f      	cbz	r7, 800b82a <_strtod_l+0x232>
 800b7ca:	4681      	mov	r9, r0
 800b7cc:	463d      	mov	r5, r7
 800b7ce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b7d2:	2b09      	cmp	r3, #9
 800b7d4:	d912      	bls.n	800b7fc <_strtod_l+0x204>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e7c4      	b.n	800b764 <_strtod_l+0x16c>
 800b7da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7dc:	1c5a      	adds	r2, r3, #1
 800b7de:	9219      	str	r2, [sp, #100]	@ 0x64
 800b7e0:	785a      	ldrb	r2, [r3, #1]
 800b7e2:	3001      	adds	r0, #1
 800b7e4:	2a30      	cmp	r2, #48	@ 0x30
 800b7e6:	d0f8      	beq.n	800b7da <_strtod_l+0x1e2>
 800b7e8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b7ec:	2b08      	cmp	r3, #8
 800b7ee:	f200 84d3 	bhi.w	800c198 <_strtod_l+0xba0>
 800b7f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7f4:	930c      	str	r3, [sp, #48]	@ 0x30
 800b7f6:	4681      	mov	r9, r0
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	4605      	mov	r5, r0
 800b7fc:	3a30      	subs	r2, #48	@ 0x30
 800b7fe:	f100 0301 	add.w	r3, r0, #1
 800b802:	d02a      	beq.n	800b85a <_strtod_l+0x262>
 800b804:	4499      	add	r9, r3
 800b806:	eb00 0c05 	add.w	ip, r0, r5
 800b80a:	462b      	mov	r3, r5
 800b80c:	210a      	movs	r1, #10
 800b80e:	4563      	cmp	r3, ip
 800b810:	d10d      	bne.n	800b82e <_strtod_l+0x236>
 800b812:	1c69      	adds	r1, r5, #1
 800b814:	4401      	add	r1, r0
 800b816:	4428      	add	r0, r5
 800b818:	2808      	cmp	r0, #8
 800b81a:	dc16      	bgt.n	800b84a <_strtod_l+0x252>
 800b81c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b81e:	230a      	movs	r3, #10
 800b820:	fb03 2300 	mla	r3, r3, r0, r2
 800b824:	930a      	str	r3, [sp, #40]	@ 0x28
 800b826:	2300      	movs	r3, #0
 800b828:	e018      	b.n	800b85c <_strtod_l+0x264>
 800b82a:	4638      	mov	r0, r7
 800b82c:	e7da      	b.n	800b7e4 <_strtod_l+0x1ec>
 800b82e:	2b08      	cmp	r3, #8
 800b830:	f103 0301 	add.w	r3, r3, #1
 800b834:	dc03      	bgt.n	800b83e <_strtod_l+0x246>
 800b836:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b838:	434e      	muls	r6, r1
 800b83a:	960a      	str	r6, [sp, #40]	@ 0x28
 800b83c:	e7e7      	b.n	800b80e <_strtod_l+0x216>
 800b83e:	2b10      	cmp	r3, #16
 800b840:	bfde      	ittt	le
 800b842:	9e08      	ldrle	r6, [sp, #32]
 800b844:	434e      	mulle	r6, r1
 800b846:	9608      	strle	r6, [sp, #32]
 800b848:	e7e1      	b.n	800b80e <_strtod_l+0x216>
 800b84a:	280f      	cmp	r0, #15
 800b84c:	dceb      	bgt.n	800b826 <_strtod_l+0x22e>
 800b84e:	9808      	ldr	r0, [sp, #32]
 800b850:	230a      	movs	r3, #10
 800b852:	fb03 2300 	mla	r3, r3, r0, r2
 800b856:	9308      	str	r3, [sp, #32]
 800b858:	e7e5      	b.n	800b826 <_strtod_l+0x22e>
 800b85a:	4629      	mov	r1, r5
 800b85c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b85e:	1c50      	adds	r0, r2, #1
 800b860:	9019      	str	r0, [sp, #100]	@ 0x64
 800b862:	7852      	ldrb	r2, [r2, #1]
 800b864:	4618      	mov	r0, r3
 800b866:	460d      	mov	r5, r1
 800b868:	e7b1      	b.n	800b7ce <_strtod_l+0x1d6>
 800b86a:	f04f 0900 	mov.w	r9, #0
 800b86e:	2301      	movs	r3, #1
 800b870:	e77d      	b.n	800b76e <_strtod_l+0x176>
 800b872:	f04f 0c00 	mov.w	ip, #0
 800b876:	1ca2      	adds	r2, r4, #2
 800b878:	9219      	str	r2, [sp, #100]	@ 0x64
 800b87a:	78a2      	ldrb	r2, [r4, #2]
 800b87c:	e785      	b.n	800b78a <_strtod_l+0x192>
 800b87e:	f04f 0c01 	mov.w	ip, #1
 800b882:	e7f8      	b.n	800b876 <_strtod_l+0x27e>
 800b884:	0800d6e8 	.word	0x0800d6e8
 800b888:	0800d6d0 	.word	0x0800d6d0
 800b88c:	7ff00000 	.word	0x7ff00000
 800b890:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b892:	1c51      	adds	r1, r2, #1
 800b894:	9119      	str	r1, [sp, #100]	@ 0x64
 800b896:	7852      	ldrb	r2, [r2, #1]
 800b898:	2a30      	cmp	r2, #48	@ 0x30
 800b89a:	d0f9      	beq.n	800b890 <_strtod_l+0x298>
 800b89c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b8a0:	2908      	cmp	r1, #8
 800b8a2:	f63f af78 	bhi.w	800b796 <_strtod_l+0x19e>
 800b8a6:	3a30      	subs	r2, #48	@ 0x30
 800b8a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b8aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b8ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b8ae:	f04f 080a 	mov.w	r8, #10
 800b8b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b8b4:	1c56      	adds	r6, r2, #1
 800b8b6:	9619      	str	r6, [sp, #100]	@ 0x64
 800b8b8:	7852      	ldrb	r2, [r2, #1]
 800b8ba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b8be:	f1be 0f09 	cmp.w	lr, #9
 800b8c2:	d939      	bls.n	800b938 <_strtod_l+0x340>
 800b8c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b8c6:	1a76      	subs	r6, r6, r1
 800b8c8:	2e08      	cmp	r6, #8
 800b8ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b8ce:	dc03      	bgt.n	800b8d8 <_strtod_l+0x2e0>
 800b8d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b8d2:	4588      	cmp	r8, r1
 800b8d4:	bfa8      	it	ge
 800b8d6:	4688      	movge	r8, r1
 800b8d8:	f1bc 0f00 	cmp.w	ip, #0
 800b8dc:	d001      	beq.n	800b8e2 <_strtod_l+0x2ea>
 800b8de:	f1c8 0800 	rsb	r8, r8, #0
 800b8e2:	2d00      	cmp	r5, #0
 800b8e4:	d14e      	bne.n	800b984 <_strtod_l+0x38c>
 800b8e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b8e8:	4308      	orrs	r0, r1
 800b8ea:	f47f aebe 	bne.w	800b66a <_strtod_l+0x72>
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f47f aed6 	bne.w	800b6a0 <_strtod_l+0xa8>
 800b8f4:	2a69      	cmp	r2, #105	@ 0x69
 800b8f6:	d028      	beq.n	800b94a <_strtod_l+0x352>
 800b8f8:	dc25      	bgt.n	800b946 <_strtod_l+0x34e>
 800b8fa:	2a49      	cmp	r2, #73	@ 0x49
 800b8fc:	d025      	beq.n	800b94a <_strtod_l+0x352>
 800b8fe:	2a4e      	cmp	r2, #78	@ 0x4e
 800b900:	f47f aece 	bne.w	800b6a0 <_strtod_l+0xa8>
 800b904:	499b      	ldr	r1, [pc, #620]	@ (800bb74 <_strtod_l+0x57c>)
 800b906:	a819      	add	r0, sp, #100	@ 0x64
 800b908:	f001 fba6 	bl	800d058 <__match>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	f43f aec7 	beq.w	800b6a0 <_strtod_l+0xa8>
 800b912:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	2b28      	cmp	r3, #40	@ 0x28
 800b918:	d12e      	bne.n	800b978 <_strtod_l+0x380>
 800b91a:	4997      	ldr	r1, [pc, #604]	@ (800bb78 <_strtod_l+0x580>)
 800b91c:	aa1c      	add	r2, sp, #112	@ 0x70
 800b91e:	a819      	add	r0, sp, #100	@ 0x64
 800b920:	f001 fbae 	bl	800d080 <__hexnan>
 800b924:	2805      	cmp	r0, #5
 800b926:	d127      	bne.n	800b978 <_strtod_l+0x380>
 800b928:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b92a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b92e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b932:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b936:	e698      	b.n	800b66a <_strtod_l+0x72>
 800b938:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b93a:	fb08 2101 	mla	r1, r8, r1, r2
 800b93e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b942:	920e      	str	r2, [sp, #56]	@ 0x38
 800b944:	e7b5      	b.n	800b8b2 <_strtod_l+0x2ba>
 800b946:	2a6e      	cmp	r2, #110	@ 0x6e
 800b948:	e7da      	b.n	800b900 <_strtod_l+0x308>
 800b94a:	498c      	ldr	r1, [pc, #560]	@ (800bb7c <_strtod_l+0x584>)
 800b94c:	a819      	add	r0, sp, #100	@ 0x64
 800b94e:	f001 fb83 	bl	800d058 <__match>
 800b952:	2800      	cmp	r0, #0
 800b954:	f43f aea4 	beq.w	800b6a0 <_strtod_l+0xa8>
 800b958:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b95a:	4989      	ldr	r1, [pc, #548]	@ (800bb80 <_strtod_l+0x588>)
 800b95c:	3b01      	subs	r3, #1
 800b95e:	a819      	add	r0, sp, #100	@ 0x64
 800b960:	9319      	str	r3, [sp, #100]	@ 0x64
 800b962:	f001 fb79 	bl	800d058 <__match>
 800b966:	b910      	cbnz	r0, 800b96e <_strtod_l+0x376>
 800b968:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b96a:	3301      	adds	r3, #1
 800b96c:	9319      	str	r3, [sp, #100]	@ 0x64
 800b96e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bb90 <_strtod_l+0x598>
 800b972:	f04f 0a00 	mov.w	sl, #0
 800b976:	e678      	b.n	800b66a <_strtod_l+0x72>
 800b978:	4882      	ldr	r0, [pc, #520]	@ (800bb84 <_strtod_l+0x58c>)
 800b97a:	f001 f8a9 	bl	800cad0 <nan>
 800b97e:	ec5b ab10 	vmov	sl, fp, d0
 800b982:	e672      	b.n	800b66a <_strtod_l+0x72>
 800b984:	eba8 0309 	sub.w	r3, r8, r9
 800b988:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b98a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b98c:	2f00      	cmp	r7, #0
 800b98e:	bf08      	it	eq
 800b990:	462f      	moveq	r7, r5
 800b992:	2d10      	cmp	r5, #16
 800b994:	462c      	mov	r4, r5
 800b996:	bfa8      	it	ge
 800b998:	2410      	movge	r4, #16
 800b99a:	f7f4 fddb 	bl	8000554 <__aeabi_ui2d>
 800b99e:	2d09      	cmp	r5, #9
 800b9a0:	4682      	mov	sl, r0
 800b9a2:	468b      	mov	fp, r1
 800b9a4:	dc13      	bgt.n	800b9ce <_strtod_l+0x3d6>
 800b9a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f43f ae5e 	beq.w	800b66a <_strtod_l+0x72>
 800b9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9b0:	dd78      	ble.n	800baa4 <_strtod_l+0x4ac>
 800b9b2:	2b16      	cmp	r3, #22
 800b9b4:	dc5f      	bgt.n	800ba76 <_strtod_l+0x47e>
 800b9b6:	4974      	ldr	r1, [pc, #464]	@ (800bb88 <_strtod_l+0x590>)
 800b9b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b9bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9c0:	4652      	mov	r2, sl
 800b9c2:	465b      	mov	r3, fp
 800b9c4:	f7f4 fe40 	bl	8000648 <__aeabi_dmul>
 800b9c8:	4682      	mov	sl, r0
 800b9ca:	468b      	mov	fp, r1
 800b9cc:	e64d      	b.n	800b66a <_strtod_l+0x72>
 800b9ce:	4b6e      	ldr	r3, [pc, #440]	@ (800bb88 <_strtod_l+0x590>)
 800b9d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b9d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b9d8:	f7f4 fe36 	bl	8000648 <__aeabi_dmul>
 800b9dc:	4682      	mov	sl, r0
 800b9de:	9808      	ldr	r0, [sp, #32]
 800b9e0:	468b      	mov	fp, r1
 800b9e2:	f7f4 fdb7 	bl	8000554 <__aeabi_ui2d>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	4650      	mov	r0, sl
 800b9ec:	4659      	mov	r1, fp
 800b9ee:	f7f4 fc75 	bl	80002dc <__adddf3>
 800b9f2:	2d0f      	cmp	r5, #15
 800b9f4:	4682      	mov	sl, r0
 800b9f6:	468b      	mov	fp, r1
 800b9f8:	ddd5      	ble.n	800b9a6 <_strtod_l+0x3ae>
 800b9fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9fc:	1b2c      	subs	r4, r5, r4
 800b9fe:	441c      	add	r4, r3
 800ba00:	2c00      	cmp	r4, #0
 800ba02:	f340 8096 	ble.w	800bb32 <_strtod_l+0x53a>
 800ba06:	f014 030f 	ands.w	r3, r4, #15
 800ba0a:	d00a      	beq.n	800ba22 <_strtod_l+0x42a>
 800ba0c:	495e      	ldr	r1, [pc, #376]	@ (800bb88 <_strtod_l+0x590>)
 800ba0e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba12:	4652      	mov	r2, sl
 800ba14:	465b      	mov	r3, fp
 800ba16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba1a:	f7f4 fe15 	bl	8000648 <__aeabi_dmul>
 800ba1e:	4682      	mov	sl, r0
 800ba20:	468b      	mov	fp, r1
 800ba22:	f034 040f 	bics.w	r4, r4, #15
 800ba26:	d073      	beq.n	800bb10 <_strtod_l+0x518>
 800ba28:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ba2c:	dd48      	ble.n	800bac0 <_strtod_l+0x4c8>
 800ba2e:	2400      	movs	r4, #0
 800ba30:	46a0      	mov	r8, r4
 800ba32:	940a      	str	r4, [sp, #40]	@ 0x28
 800ba34:	46a1      	mov	r9, r4
 800ba36:	9a05      	ldr	r2, [sp, #20]
 800ba38:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bb90 <_strtod_l+0x598>
 800ba3c:	2322      	movs	r3, #34	@ 0x22
 800ba3e:	6013      	str	r3, [r2, #0]
 800ba40:	f04f 0a00 	mov.w	sl, #0
 800ba44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	f43f ae0f 	beq.w	800b66a <_strtod_l+0x72>
 800ba4c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba4e:	9805      	ldr	r0, [sp, #20]
 800ba50:	f7ff f942 	bl	800acd8 <_Bfree>
 800ba54:	9805      	ldr	r0, [sp, #20]
 800ba56:	4649      	mov	r1, r9
 800ba58:	f7ff f93e 	bl	800acd8 <_Bfree>
 800ba5c:	9805      	ldr	r0, [sp, #20]
 800ba5e:	4641      	mov	r1, r8
 800ba60:	f7ff f93a 	bl	800acd8 <_Bfree>
 800ba64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ba66:	9805      	ldr	r0, [sp, #20]
 800ba68:	f7ff f936 	bl	800acd8 <_Bfree>
 800ba6c:	9805      	ldr	r0, [sp, #20]
 800ba6e:	4621      	mov	r1, r4
 800ba70:	f7ff f932 	bl	800acd8 <_Bfree>
 800ba74:	e5f9      	b.n	800b66a <_strtod_l+0x72>
 800ba76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba78:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	dbbc      	blt.n	800b9fa <_strtod_l+0x402>
 800ba80:	4c41      	ldr	r4, [pc, #260]	@ (800bb88 <_strtod_l+0x590>)
 800ba82:	f1c5 050f 	rsb	r5, r5, #15
 800ba86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ba8a:	4652      	mov	r2, sl
 800ba8c:	465b      	mov	r3, fp
 800ba8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba92:	f7f4 fdd9 	bl	8000648 <__aeabi_dmul>
 800ba96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba98:	1b5d      	subs	r5, r3, r5
 800ba9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ba9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800baa2:	e78f      	b.n	800b9c4 <_strtod_l+0x3cc>
 800baa4:	3316      	adds	r3, #22
 800baa6:	dba8      	blt.n	800b9fa <_strtod_l+0x402>
 800baa8:	4b37      	ldr	r3, [pc, #220]	@ (800bb88 <_strtod_l+0x590>)
 800baaa:	eba9 0808 	sub.w	r8, r9, r8
 800baae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bab2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bab6:	4650      	mov	r0, sl
 800bab8:	4659      	mov	r1, fp
 800baba:	f7f4 feef 	bl	800089c <__aeabi_ddiv>
 800babe:	e783      	b.n	800b9c8 <_strtod_l+0x3d0>
 800bac0:	4b32      	ldr	r3, [pc, #200]	@ (800bb8c <_strtod_l+0x594>)
 800bac2:	9308      	str	r3, [sp, #32]
 800bac4:	2300      	movs	r3, #0
 800bac6:	1124      	asrs	r4, r4, #4
 800bac8:	4650      	mov	r0, sl
 800baca:	4659      	mov	r1, fp
 800bacc:	461e      	mov	r6, r3
 800bace:	2c01      	cmp	r4, #1
 800bad0:	dc21      	bgt.n	800bb16 <_strtod_l+0x51e>
 800bad2:	b10b      	cbz	r3, 800bad8 <_strtod_l+0x4e0>
 800bad4:	4682      	mov	sl, r0
 800bad6:	468b      	mov	fp, r1
 800bad8:	492c      	ldr	r1, [pc, #176]	@ (800bb8c <_strtod_l+0x594>)
 800bada:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bade:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bae2:	4652      	mov	r2, sl
 800bae4:	465b      	mov	r3, fp
 800bae6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baea:	f7f4 fdad 	bl	8000648 <__aeabi_dmul>
 800baee:	4b28      	ldr	r3, [pc, #160]	@ (800bb90 <_strtod_l+0x598>)
 800baf0:	460a      	mov	r2, r1
 800baf2:	400b      	ands	r3, r1
 800baf4:	4927      	ldr	r1, [pc, #156]	@ (800bb94 <_strtod_l+0x59c>)
 800baf6:	428b      	cmp	r3, r1
 800baf8:	4682      	mov	sl, r0
 800bafa:	d898      	bhi.n	800ba2e <_strtod_l+0x436>
 800bafc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bb00:	428b      	cmp	r3, r1
 800bb02:	bf86      	itte	hi
 800bb04:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bb98 <_strtod_l+0x5a0>
 800bb08:	f04f 3aff 	movhi.w	sl, #4294967295
 800bb0c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bb10:	2300      	movs	r3, #0
 800bb12:	9308      	str	r3, [sp, #32]
 800bb14:	e07a      	b.n	800bc0c <_strtod_l+0x614>
 800bb16:	07e2      	lsls	r2, r4, #31
 800bb18:	d505      	bpl.n	800bb26 <_strtod_l+0x52e>
 800bb1a:	9b08      	ldr	r3, [sp, #32]
 800bb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb20:	f7f4 fd92 	bl	8000648 <__aeabi_dmul>
 800bb24:	2301      	movs	r3, #1
 800bb26:	9a08      	ldr	r2, [sp, #32]
 800bb28:	3208      	adds	r2, #8
 800bb2a:	3601      	adds	r6, #1
 800bb2c:	1064      	asrs	r4, r4, #1
 800bb2e:	9208      	str	r2, [sp, #32]
 800bb30:	e7cd      	b.n	800bace <_strtod_l+0x4d6>
 800bb32:	d0ed      	beq.n	800bb10 <_strtod_l+0x518>
 800bb34:	4264      	negs	r4, r4
 800bb36:	f014 020f 	ands.w	r2, r4, #15
 800bb3a:	d00a      	beq.n	800bb52 <_strtod_l+0x55a>
 800bb3c:	4b12      	ldr	r3, [pc, #72]	@ (800bb88 <_strtod_l+0x590>)
 800bb3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb42:	4650      	mov	r0, sl
 800bb44:	4659      	mov	r1, fp
 800bb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4a:	f7f4 fea7 	bl	800089c <__aeabi_ddiv>
 800bb4e:	4682      	mov	sl, r0
 800bb50:	468b      	mov	fp, r1
 800bb52:	1124      	asrs	r4, r4, #4
 800bb54:	d0dc      	beq.n	800bb10 <_strtod_l+0x518>
 800bb56:	2c1f      	cmp	r4, #31
 800bb58:	dd20      	ble.n	800bb9c <_strtod_l+0x5a4>
 800bb5a:	2400      	movs	r4, #0
 800bb5c:	46a0      	mov	r8, r4
 800bb5e:	940a      	str	r4, [sp, #40]	@ 0x28
 800bb60:	46a1      	mov	r9, r4
 800bb62:	9a05      	ldr	r2, [sp, #20]
 800bb64:	2322      	movs	r3, #34	@ 0x22
 800bb66:	f04f 0a00 	mov.w	sl, #0
 800bb6a:	f04f 0b00 	mov.w	fp, #0
 800bb6e:	6013      	str	r3, [r2, #0]
 800bb70:	e768      	b.n	800ba44 <_strtod_l+0x44c>
 800bb72:	bf00      	nop
 800bb74:	0800d4c1 	.word	0x0800d4c1
 800bb78:	0800d6d4 	.word	0x0800d6d4
 800bb7c:	0800d4b9 	.word	0x0800d4b9
 800bb80:	0800d4f0 	.word	0x0800d4f0
 800bb84:	0800d87d 	.word	0x0800d87d
 800bb88:	0800d608 	.word	0x0800d608
 800bb8c:	0800d5e0 	.word	0x0800d5e0
 800bb90:	7ff00000 	.word	0x7ff00000
 800bb94:	7ca00000 	.word	0x7ca00000
 800bb98:	7fefffff 	.word	0x7fefffff
 800bb9c:	f014 0310 	ands.w	r3, r4, #16
 800bba0:	bf18      	it	ne
 800bba2:	236a      	movne	r3, #106	@ 0x6a
 800bba4:	4ea9      	ldr	r6, [pc, #676]	@ (800be4c <_strtod_l+0x854>)
 800bba6:	9308      	str	r3, [sp, #32]
 800bba8:	4650      	mov	r0, sl
 800bbaa:	4659      	mov	r1, fp
 800bbac:	2300      	movs	r3, #0
 800bbae:	07e2      	lsls	r2, r4, #31
 800bbb0:	d504      	bpl.n	800bbbc <_strtod_l+0x5c4>
 800bbb2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bbb6:	f7f4 fd47 	bl	8000648 <__aeabi_dmul>
 800bbba:	2301      	movs	r3, #1
 800bbbc:	1064      	asrs	r4, r4, #1
 800bbbe:	f106 0608 	add.w	r6, r6, #8
 800bbc2:	d1f4      	bne.n	800bbae <_strtod_l+0x5b6>
 800bbc4:	b10b      	cbz	r3, 800bbca <_strtod_l+0x5d2>
 800bbc6:	4682      	mov	sl, r0
 800bbc8:	468b      	mov	fp, r1
 800bbca:	9b08      	ldr	r3, [sp, #32]
 800bbcc:	b1b3      	cbz	r3, 800bbfc <_strtod_l+0x604>
 800bbce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bbd2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	4659      	mov	r1, fp
 800bbda:	dd0f      	ble.n	800bbfc <_strtod_l+0x604>
 800bbdc:	2b1f      	cmp	r3, #31
 800bbde:	dd55      	ble.n	800bc8c <_strtod_l+0x694>
 800bbe0:	2b34      	cmp	r3, #52	@ 0x34
 800bbe2:	bfde      	ittt	le
 800bbe4:	f04f 33ff 	movle.w	r3, #4294967295
 800bbe8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bbec:	4093      	lslle	r3, r2
 800bbee:	f04f 0a00 	mov.w	sl, #0
 800bbf2:	bfcc      	ite	gt
 800bbf4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bbf8:	ea03 0b01 	andle.w	fp, r3, r1
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	2300      	movs	r3, #0
 800bc00:	4650      	mov	r0, sl
 800bc02:	4659      	mov	r1, fp
 800bc04:	f7f4 ff88 	bl	8000b18 <__aeabi_dcmpeq>
 800bc08:	2800      	cmp	r0, #0
 800bc0a:	d1a6      	bne.n	800bb5a <_strtod_l+0x562>
 800bc0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bc12:	9805      	ldr	r0, [sp, #20]
 800bc14:	462b      	mov	r3, r5
 800bc16:	463a      	mov	r2, r7
 800bc18:	f7ff f8c6 	bl	800ada8 <__s2b>
 800bc1c:	900a      	str	r0, [sp, #40]	@ 0x28
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	f43f af05 	beq.w	800ba2e <_strtod_l+0x436>
 800bc24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc26:	2a00      	cmp	r2, #0
 800bc28:	eba9 0308 	sub.w	r3, r9, r8
 800bc2c:	bfa8      	it	ge
 800bc2e:	2300      	movge	r3, #0
 800bc30:	9312      	str	r3, [sp, #72]	@ 0x48
 800bc32:	2400      	movs	r4, #0
 800bc34:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bc38:	9316      	str	r3, [sp, #88]	@ 0x58
 800bc3a:	46a0      	mov	r8, r4
 800bc3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc3e:	9805      	ldr	r0, [sp, #20]
 800bc40:	6859      	ldr	r1, [r3, #4]
 800bc42:	f7ff f809 	bl	800ac58 <_Balloc>
 800bc46:	4681      	mov	r9, r0
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	f43f aef4 	beq.w	800ba36 <_strtod_l+0x43e>
 800bc4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc50:	691a      	ldr	r2, [r3, #16]
 800bc52:	3202      	adds	r2, #2
 800bc54:	f103 010c 	add.w	r1, r3, #12
 800bc58:	0092      	lsls	r2, r2, #2
 800bc5a:	300c      	adds	r0, #12
 800bc5c:	f7fe f899 	bl	8009d92 <memcpy>
 800bc60:	ec4b ab10 	vmov	d0, sl, fp
 800bc64:	9805      	ldr	r0, [sp, #20]
 800bc66:	aa1c      	add	r2, sp, #112	@ 0x70
 800bc68:	a91b      	add	r1, sp, #108	@ 0x6c
 800bc6a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bc6e:	f7ff fbd7 	bl	800b420 <__d2b>
 800bc72:	901a      	str	r0, [sp, #104]	@ 0x68
 800bc74:	2800      	cmp	r0, #0
 800bc76:	f43f aede 	beq.w	800ba36 <_strtod_l+0x43e>
 800bc7a:	9805      	ldr	r0, [sp, #20]
 800bc7c:	2101      	movs	r1, #1
 800bc7e:	f7ff f929 	bl	800aed4 <__i2b>
 800bc82:	4680      	mov	r8, r0
 800bc84:	b948      	cbnz	r0, 800bc9a <_strtod_l+0x6a2>
 800bc86:	f04f 0800 	mov.w	r8, #0
 800bc8a:	e6d4      	b.n	800ba36 <_strtod_l+0x43e>
 800bc8c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc90:	fa02 f303 	lsl.w	r3, r2, r3
 800bc94:	ea03 0a0a 	and.w	sl, r3, sl
 800bc98:	e7b0      	b.n	800bbfc <_strtod_l+0x604>
 800bc9a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bc9c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bc9e:	2d00      	cmp	r5, #0
 800bca0:	bfab      	itete	ge
 800bca2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bca4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bca6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bca8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bcaa:	bfac      	ite	ge
 800bcac:	18ef      	addge	r7, r5, r3
 800bcae:	1b5e      	sublt	r6, r3, r5
 800bcb0:	9b08      	ldr	r3, [sp, #32]
 800bcb2:	1aed      	subs	r5, r5, r3
 800bcb4:	4415      	add	r5, r2
 800bcb6:	4b66      	ldr	r3, [pc, #408]	@ (800be50 <_strtod_l+0x858>)
 800bcb8:	3d01      	subs	r5, #1
 800bcba:	429d      	cmp	r5, r3
 800bcbc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bcc0:	da50      	bge.n	800bd64 <_strtod_l+0x76c>
 800bcc2:	1b5b      	subs	r3, r3, r5
 800bcc4:	2b1f      	cmp	r3, #31
 800bcc6:	eba2 0203 	sub.w	r2, r2, r3
 800bcca:	f04f 0101 	mov.w	r1, #1
 800bcce:	dc3d      	bgt.n	800bd4c <_strtod_l+0x754>
 800bcd0:	fa01 f303 	lsl.w	r3, r1, r3
 800bcd4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	9310      	str	r3, [sp, #64]	@ 0x40
 800bcda:	18bd      	adds	r5, r7, r2
 800bcdc:	9b08      	ldr	r3, [sp, #32]
 800bcde:	42af      	cmp	r7, r5
 800bce0:	4416      	add	r6, r2
 800bce2:	441e      	add	r6, r3
 800bce4:	463b      	mov	r3, r7
 800bce6:	bfa8      	it	ge
 800bce8:	462b      	movge	r3, r5
 800bcea:	42b3      	cmp	r3, r6
 800bcec:	bfa8      	it	ge
 800bcee:	4633      	movge	r3, r6
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	bfc2      	ittt	gt
 800bcf4:	1aed      	subgt	r5, r5, r3
 800bcf6:	1af6      	subgt	r6, r6, r3
 800bcf8:	1aff      	subgt	r7, r7, r3
 800bcfa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	dd16      	ble.n	800bd2e <_strtod_l+0x736>
 800bd00:	4641      	mov	r1, r8
 800bd02:	9805      	ldr	r0, [sp, #20]
 800bd04:	461a      	mov	r2, r3
 800bd06:	f7ff f9a5 	bl	800b054 <__pow5mult>
 800bd0a:	4680      	mov	r8, r0
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	d0ba      	beq.n	800bc86 <_strtod_l+0x68e>
 800bd10:	4601      	mov	r1, r0
 800bd12:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bd14:	9805      	ldr	r0, [sp, #20]
 800bd16:	f7ff f8f3 	bl	800af00 <__multiply>
 800bd1a:	900e      	str	r0, [sp, #56]	@ 0x38
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	f43f ae8a 	beq.w	800ba36 <_strtod_l+0x43e>
 800bd22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd24:	9805      	ldr	r0, [sp, #20]
 800bd26:	f7fe ffd7 	bl	800acd8 <_Bfree>
 800bd2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd2c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd2e:	2d00      	cmp	r5, #0
 800bd30:	dc1d      	bgt.n	800bd6e <_strtod_l+0x776>
 800bd32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	dd23      	ble.n	800bd80 <_strtod_l+0x788>
 800bd38:	4649      	mov	r1, r9
 800bd3a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bd3c:	9805      	ldr	r0, [sp, #20]
 800bd3e:	f7ff f989 	bl	800b054 <__pow5mult>
 800bd42:	4681      	mov	r9, r0
 800bd44:	b9e0      	cbnz	r0, 800bd80 <_strtod_l+0x788>
 800bd46:	f04f 0900 	mov.w	r9, #0
 800bd4a:	e674      	b.n	800ba36 <_strtod_l+0x43e>
 800bd4c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bd50:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bd54:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bd58:	35e2      	adds	r5, #226	@ 0xe2
 800bd5a:	fa01 f305 	lsl.w	r3, r1, r5
 800bd5e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd60:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bd62:	e7ba      	b.n	800bcda <_strtod_l+0x6e2>
 800bd64:	2300      	movs	r3, #0
 800bd66:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd68:	2301      	movs	r3, #1
 800bd6a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd6c:	e7b5      	b.n	800bcda <_strtod_l+0x6e2>
 800bd6e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd70:	9805      	ldr	r0, [sp, #20]
 800bd72:	462a      	mov	r2, r5
 800bd74:	f7ff f9c8 	bl	800b108 <__lshift>
 800bd78:	901a      	str	r0, [sp, #104]	@ 0x68
 800bd7a:	2800      	cmp	r0, #0
 800bd7c:	d1d9      	bne.n	800bd32 <_strtod_l+0x73a>
 800bd7e:	e65a      	b.n	800ba36 <_strtod_l+0x43e>
 800bd80:	2e00      	cmp	r6, #0
 800bd82:	dd07      	ble.n	800bd94 <_strtod_l+0x79c>
 800bd84:	4649      	mov	r1, r9
 800bd86:	9805      	ldr	r0, [sp, #20]
 800bd88:	4632      	mov	r2, r6
 800bd8a:	f7ff f9bd 	bl	800b108 <__lshift>
 800bd8e:	4681      	mov	r9, r0
 800bd90:	2800      	cmp	r0, #0
 800bd92:	d0d8      	beq.n	800bd46 <_strtod_l+0x74e>
 800bd94:	2f00      	cmp	r7, #0
 800bd96:	dd08      	ble.n	800bdaa <_strtod_l+0x7b2>
 800bd98:	4641      	mov	r1, r8
 800bd9a:	9805      	ldr	r0, [sp, #20]
 800bd9c:	463a      	mov	r2, r7
 800bd9e:	f7ff f9b3 	bl	800b108 <__lshift>
 800bda2:	4680      	mov	r8, r0
 800bda4:	2800      	cmp	r0, #0
 800bda6:	f43f ae46 	beq.w	800ba36 <_strtod_l+0x43e>
 800bdaa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bdac:	9805      	ldr	r0, [sp, #20]
 800bdae:	464a      	mov	r2, r9
 800bdb0:	f7ff fa32 	bl	800b218 <__mdiff>
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	f43f ae3d 	beq.w	800ba36 <_strtod_l+0x43e>
 800bdbc:	68c3      	ldr	r3, [r0, #12]
 800bdbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	60c3      	str	r3, [r0, #12]
 800bdc4:	4641      	mov	r1, r8
 800bdc6:	f7ff fa0b 	bl	800b1e0 <__mcmp>
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	da46      	bge.n	800be5c <_strtod_l+0x864>
 800bdce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdd0:	ea53 030a 	orrs.w	r3, r3, sl
 800bdd4:	d16c      	bne.n	800beb0 <_strtod_l+0x8b8>
 800bdd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d168      	bne.n	800beb0 <_strtod_l+0x8b8>
 800bdde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bde2:	0d1b      	lsrs	r3, r3, #20
 800bde4:	051b      	lsls	r3, r3, #20
 800bde6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bdea:	d961      	bls.n	800beb0 <_strtod_l+0x8b8>
 800bdec:	6963      	ldr	r3, [r4, #20]
 800bdee:	b913      	cbnz	r3, 800bdf6 <_strtod_l+0x7fe>
 800bdf0:	6923      	ldr	r3, [r4, #16]
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	dd5c      	ble.n	800beb0 <_strtod_l+0x8b8>
 800bdf6:	4621      	mov	r1, r4
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	9805      	ldr	r0, [sp, #20]
 800bdfc:	f7ff f984 	bl	800b108 <__lshift>
 800be00:	4641      	mov	r1, r8
 800be02:	4604      	mov	r4, r0
 800be04:	f7ff f9ec 	bl	800b1e0 <__mcmp>
 800be08:	2800      	cmp	r0, #0
 800be0a:	dd51      	ble.n	800beb0 <_strtod_l+0x8b8>
 800be0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be10:	9a08      	ldr	r2, [sp, #32]
 800be12:	0d1b      	lsrs	r3, r3, #20
 800be14:	051b      	lsls	r3, r3, #20
 800be16:	2a00      	cmp	r2, #0
 800be18:	d06b      	beq.n	800bef2 <_strtod_l+0x8fa>
 800be1a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800be1e:	d868      	bhi.n	800bef2 <_strtod_l+0x8fa>
 800be20:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800be24:	f67f ae9d 	bls.w	800bb62 <_strtod_l+0x56a>
 800be28:	4b0a      	ldr	r3, [pc, #40]	@ (800be54 <_strtod_l+0x85c>)
 800be2a:	4650      	mov	r0, sl
 800be2c:	4659      	mov	r1, fp
 800be2e:	2200      	movs	r2, #0
 800be30:	f7f4 fc0a 	bl	8000648 <__aeabi_dmul>
 800be34:	4b08      	ldr	r3, [pc, #32]	@ (800be58 <_strtod_l+0x860>)
 800be36:	400b      	ands	r3, r1
 800be38:	4682      	mov	sl, r0
 800be3a:	468b      	mov	fp, r1
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f47f ae05 	bne.w	800ba4c <_strtod_l+0x454>
 800be42:	9a05      	ldr	r2, [sp, #20]
 800be44:	2322      	movs	r3, #34	@ 0x22
 800be46:	6013      	str	r3, [r2, #0]
 800be48:	e600      	b.n	800ba4c <_strtod_l+0x454>
 800be4a:	bf00      	nop
 800be4c:	0800d700 	.word	0x0800d700
 800be50:	fffffc02 	.word	0xfffffc02
 800be54:	39500000 	.word	0x39500000
 800be58:	7ff00000 	.word	0x7ff00000
 800be5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800be60:	d165      	bne.n	800bf2e <_strtod_l+0x936>
 800be62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800be64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be68:	b35a      	cbz	r2, 800bec2 <_strtod_l+0x8ca>
 800be6a:	4a9f      	ldr	r2, [pc, #636]	@ (800c0e8 <_strtod_l+0xaf0>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d12b      	bne.n	800bec8 <_strtod_l+0x8d0>
 800be70:	9b08      	ldr	r3, [sp, #32]
 800be72:	4651      	mov	r1, sl
 800be74:	b303      	cbz	r3, 800beb8 <_strtod_l+0x8c0>
 800be76:	4b9d      	ldr	r3, [pc, #628]	@ (800c0ec <_strtod_l+0xaf4>)
 800be78:	465a      	mov	r2, fp
 800be7a:	4013      	ands	r3, r2
 800be7c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800be80:	f04f 32ff 	mov.w	r2, #4294967295
 800be84:	d81b      	bhi.n	800bebe <_strtod_l+0x8c6>
 800be86:	0d1b      	lsrs	r3, r3, #20
 800be88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800be8c:	fa02 f303 	lsl.w	r3, r2, r3
 800be90:	4299      	cmp	r1, r3
 800be92:	d119      	bne.n	800bec8 <_strtod_l+0x8d0>
 800be94:	4b96      	ldr	r3, [pc, #600]	@ (800c0f0 <_strtod_l+0xaf8>)
 800be96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be98:	429a      	cmp	r2, r3
 800be9a:	d102      	bne.n	800bea2 <_strtod_l+0x8aa>
 800be9c:	3101      	adds	r1, #1
 800be9e:	f43f adca 	beq.w	800ba36 <_strtod_l+0x43e>
 800bea2:	4b92      	ldr	r3, [pc, #584]	@ (800c0ec <_strtod_l+0xaf4>)
 800bea4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bea6:	401a      	ands	r2, r3
 800bea8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800beac:	f04f 0a00 	mov.w	sl, #0
 800beb0:	9b08      	ldr	r3, [sp, #32]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d1b8      	bne.n	800be28 <_strtod_l+0x830>
 800beb6:	e5c9      	b.n	800ba4c <_strtod_l+0x454>
 800beb8:	f04f 33ff 	mov.w	r3, #4294967295
 800bebc:	e7e8      	b.n	800be90 <_strtod_l+0x898>
 800bebe:	4613      	mov	r3, r2
 800bec0:	e7e6      	b.n	800be90 <_strtod_l+0x898>
 800bec2:	ea53 030a 	orrs.w	r3, r3, sl
 800bec6:	d0a1      	beq.n	800be0c <_strtod_l+0x814>
 800bec8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800beca:	b1db      	cbz	r3, 800bf04 <_strtod_l+0x90c>
 800becc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bece:	4213      	tst	r3, r2
 800bed0:	d0ee      	beq.n	800beb0 <_strtod_l+0x8b8>
 800bed2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bed4:	9a08      	ldr	r2, [sp, #32]
 800bed6:	4650      	mov	r0, sl
 800bed8:	4659      	mov	r1, fp
 800beda:	b1bb      	cbz	r3, 800bf0c <_strtod_l+0x914>
 800bedc:	f7ff fb6e 	bl	800b5bc <sulp>
 800bee0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bee4:	ec53 2b10 	vmov	r2, r3, d0
 800bee8:	f7f4 f9f8 	bl	80002dc <__adddf3>
 800beec:	4682      	mov	sl, r0
 800beee:	468b      	mov	fp, r1
 800bef0:	e7de      	b.n	800beb0 <_strtod_l+0x8b8>
 800bef2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bef6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800befa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800befe:	f04f 3aff 	mov.w	sl, #4294967295
 800bf02:	e7d5      	b.n	800beb0 <_strtod_l+0x8b8>
 800bf04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bf06:	ea13 0f0a 	tst.w	r3, sl
 800bf0a:	e7e1      	b.n	800bed0 <_strtod_l+0x8d8>
 800bf0c:	f7ff fb56 	bl	800b5bc <sulp>
 800bf10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf14:	ec53 2b10 	vmov	r2, r3, d0
 800bf18:	f7f4 f9de 	bl	80002d8 <__aeabi_dsub>
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	2300      	movs	r3, #0
 800bf20:	4682      	mov	sl, r0
 800bf22:	468b      	mov	fp, r1
 800bf24:	f7f4 fdf8 	bl	8000b18 <__aeabi_dcmpeq>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	d0c1      	beq.n	800beb0 <_strtod_l+0x8b8>
 800bf2c:	e619      	b.n	800bb62 <_strtod_l+0x56a>
 800bf2e:	4641      	mov	r1, r8
 800bf30:	4620      	mov	r0, r4
 800bf32:	f7ff facd 	bl	800b4d0 <__ratio>
 800bf36:	ec57 6b10 	vmov	r6, r7, d0
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bf40:	4630      	mov	r0, r6
 800bf42:	4639      	mov	r1, r7
 800bf44:	f7f4 fdfc 	bl	8000b40 <__aeabi_dcmple>
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	d06f      	beq.n	800c02c <_strtod_l+0xa34>
 800bf4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d17a      	bne.n	800c048 <_strtod_l+0xa50>
 800bf52:	f1ba 0f00 	cmp.w	sl, #0
 800bf56:	d158      	bne.n	800c00a <_strtod_l+0xa12>
 800bf58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d15a      	bne.n	800c018 <_strtod_l+0xa20>
 800bf62:	4b64      	ldr	r3, [pc, #400]	@ (800c0f4 <_strtod_l+0xafc>)
 800bf64:	2200      	movs	r2, #0
 800bf66:	4630      	mov	r0, r6
 800bf68:	4639      	mov	r1, r7
 800bf6a:	f7f4 fddf 	bl	8000b2c <__aeabi_dcmplt>
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	d159      	bne.n	800c026 <_strtod_l+0xa2e>
 800bf72:	4630      	mov	r0, r6
 800bf74:	4639      	mov	r1, r7
 800bf76:	4b60      	ldr	r3, [pc, #384]	@ (800c0f8 <_strtod_l+0xb00>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f7f4 fb65 	bl	8000648 <__aeabi_dmul>
 800bf7e:	4606      	mov	r6, r0
 800bf80:	460f      	mov	r7, r1
 800bf82:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bf86:	9606      	str	r6, [sp, #24]
 800bf88:	9307      	str	r3, [sp, #28]
 800bf8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf8e:	4d57      	ldr	r5, [pc, #348]	@ (800c0ec <_strtod_l+0xaf4>)
 800bf90:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bf94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf96:	401d      	ands	r5, r3
 800bf98:	4b58      	ldr	r3, [pc, #352]	@ (800c0fc <_strtod_l+0xb04>)
 800bf9a:	429d      	cmp	r5, r3
 800bf9c:	f040 80b2 	bne.w	800c104 <_strtod_l+0xb0c>
 800bfa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfa2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bfa6:	ec4b ab10 	vmov	d0, sl, fp
 800bfaa:	f7ff f9c9 	bl	800b340 <__ulp>
 800bfae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfb2:	ec51 0b10 	vmov	r0, r1, d0
 800bfb6:	f7f4 fb47 	bl	8000648 <__aeabi_dmul>
 800bfba:	4652      	mov	r2, sl
 800bfbc:	465b      	mov	r3, fp
 800bfbe:	f7f4 f98d 	bl	80002dc <__adddf3>
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	4949      	ldr	r1, [pc, #292]	@ (800c0ec <_strtod_l+0xaf4>)
 800bfc6:	4a4e      	ldr	r2, [pc, #312]	@ (800c100 <_strtod_l+0xb08>)
 800bfc8:	4019      	ands	r1, r3
 800bfca:	4291      	cmp	r1, r2
 800bfcc:	4682      	mov	sl, r0
 800bfce:	d942      	bls.n	800c056 <_strtod_l+0xa5e>
 800bfd0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bfd2:	4b47      	ldr	r3, [pc, #284]	@ (800c0f0 <_strtod_l+0xaf8>)
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d103      	bne.n	800bfe0 <_strtod_l+0x9e8>
 800bfd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bfda:	3301      	adds	r3, #1
 800bfdc:	f43f ad2b 	beq.w	800ba36 <_strtod_l+0x43e>
 800bfe0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c0f0 <_strtod_l+0xaf8>
 800bfe4:	f04f 3aff 	mov.w	sl, #4294967295
 800bfe8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bfea:	9805      	ldr	r0, [sp, #20]
 800bfec:	f7fe fe74 	bl	800acd8 <_Bfree>
 800bff0:	9805      	ldr	r0, [sp, #20]
 800bff2:	4649      	mov	r1, r9
 800bff4:	f7fe fe70 	bl	800acd8 <_Bfree>
 800bff8:	9805      	ldr	r0, [sp, #20]
 800bffa:	4641      	mov	r1, r8
 800bffc:	f7fe fe6c 	bl	800acd8 <_Bfree>
 800c000:	9805      	ldr	r0, [sp, #20]
 800c002:	4621      	mov	r1, r4
 800c004:	f7fe fe68 	bl	800acd8 <_Bfree>
 800c008:	e618      	b.n	800bc3c <_strtod_l+0x644>
 800c00a:	f1ba 0f01 	cmp.w	sl, #1
 800c00e:	d103      	bne.n	800c018 <_strtod_l+0xa20>
 800c010:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c012:	2b00      	cmp	r3, #0
 800c014:	f43f ada5 	beq.w	800bb62 <_strtod_l+0x56a>
 800c018:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c0c8 <_strtod_l+0xad0>
 800c01c:	4f35      	ldr	r7, [pc, #212]	@ (800c0f4 <_strtod_l+0xafc>)
 800c01e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c022:	2600      	movs	r6, #0
 800c024:	e7b1      	b.n	800bf8a <_strtod_l+0x992>
 800c026:	4f34      	ldr	r7, [pc, #208]	@ (800c0f8 <_strtod_l+0xb00>)
 800c028:	2600      	movs	r6, #0
 800c02a:	e7aa      	b.n	800bf82 <_strtod_l+0x98a>
 800c02c:	4b32      	ldr	r3, [pc, #200]	@ (800c0f8 <_strtod_l+0xb00>)
 800c02e:	4630      	mov	r0, r6
 800c030:	4639      	mov	r1, r7
 800c032:	2200      	movs	r2, #0
 800c034:	f7f4 fb08 	bl	8000648 <__aeabi_dmul>
 800c038:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c03a:	4606      	mov	r6, r0
 800c03c:	460f      	mov	r7, r1
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d09f      	beq.n	800bf82 <_strtod_l+0x98a>
 800c042:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c046:	e7a0      	b.n	800bf8a <_strtod_l+0x992>
 800c048:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c0d0 <_strtod_l+0xad8>
 800c04c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c050:	ec57 6b17 	vmov	r6, r7, d7
 800c054:	e799      	b.n	800bf8a <_strtod_l+0x992>
 800c056:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c05a:	9b08      	ldr	r3, [sp, #32]
 800c05c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c060:	2b00      	cmp	r3, #0
 800c062:	d1c1      	bne.n	800bfe8 <_strtod_l+0x9f0>
 800c064:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c068:	0d1b      	lsrs	r3, r3, #20
 800c06a:	051b      	lsls	r3, r3, #20
 800c06c:	429d      	cmp	r5, r3
 800c06e:	d1bb      	bne.n	800bfe8 <_strtod_l+0x9f0>
 800c070:	4630      	mov	r0, r6
 800c072:	4639      	mov	r1, r7
 800c074:	f7f4 fe48 	bl	8000d08 <__aeabi_d2lz>
 800c078:	f7f4 fab8 	bl	80005ec <__aeabi_l2d>
 800c07c:	4602      	mov	r2, r0
 800c07e:	460b      	mov	r3, r1
 800c080:	4630      	mov	r0, r6
 800c082:	4639      	mov	r1, r7
 800c084:	f7f4 f928 	bl	80002d8 <__aeabi_dsub>
 800c088:	460b      	mov	r3, r1
 800c08a:	4602      	mov	r2, r0
 800c08c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c090:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c096:	ea46 060a 	orr.w	r6, r6, sl
 800c09a:	431e      	orrs	r6, r3
 800c09c:	d06f      	beq.n	800c17e <_strtod_l+0xb86>
 800c09e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c0d8 <_strtod_l+0xae0>)
 800c0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a4:	f7f4 fd42 	bl	8000b2c <__aeabi_dcmplt>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	f47f accf 	bne.w	800ba4c <_strtod_l+0x454>
 800c0ae:	a30c      	add	r3, pc, #48	@ (adr r3, 800c0e0 <_strtod_l+0xae8>)
 800c0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c0b8:	f7f4 fd56 	bl	8000b68 <__aeabi_dcmpgt>
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d093      	beq.n	800bfe8 <_strtod_l+0x9f0>
 800c0c0:	e4c4      	b.n	800ba4c <_strtod_l+0x454>
 800c0c2:	bf00      	nop
 800c0c4:	f3af 8000 	nop.w
 800c0c8:	00000000 	.word	0x00000000
 800c0cc:	bff00000 	.word	0xbff00000
 800c0d0:	00000000 	.word	0x00000000
 800c0d4:	3ff00000 	.word	0x3ff00000
 800c0d8:	94a03595 	.word	0x94a03595
 800c0dc:	3fdfffff 	.word	0x3fdfffff
 800c0e0:	35afe535 	.word	0x35afe535
 800c0e4:	3fe00000 	.word	0x3fe00000
 800c0e8:	000fffff 	.word	0x000fffff
 800c0ec:	7ff00000 	.word	0x7ff00000
 800c0f0:	7fefffff 	.word	0x7fefffff
 800c0f4:	3ff00000 	.word	0x3ff00000
 800c0f8:	3fe00000 	.word	0x3fe00000
 800c0fc:	7fe00000 	.word	0x7fe00000
 800c100:	7c9fffff 	.word	0x7c9fffff
 800c104:	9b08      	ldr	r3, [sp, #32]
 800c106:	b323      	cbz	r3, 800c152 <_strtod_l+0xb5a>
 800c108:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c10c:	d821      	bhi.n	800c152 <_strtod_l+0xb5a>
 800c10e:	a328      	add	r3, pc, #160	@ (adr r3, 800c1b0 <_strtod_l+0xbb8>)
 800c110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c114:	4630      	mov	r0, r6
 800c116:	4639      	mov	r1, r7
 800c118:	f7f4 fd12 	bl	8000b40 <__aeabi_dcmple>
 800c11c:	b1a0      	cbz	r0, 800c148 <_strtod_l+0xb50>
 800c11e:	4639      	mov	r1, r7
 800c120:	4630      	mov	r0, r6
 800c122:	f7f4 fd69 	bl	8000bf8 <__aeabi_d2uiz>
 800c126:	2801      	cmp	r0, #1
 800c128:	bf38      	it	cc
 800c12a:	2001      	movcc	r0, #1
 800c12c:	f7f4 fa12 	bl	8000554 <__aeabi_ui2d>
 800c130:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c132:	4606      	mov	r6, r0
 800c134:	460f      	mov	r7, r1
 800c136:	b9fb      	cbnz	r3, 800c178 <_strtod_l+0xb80>
 800c138:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c13c:	9014      	str	r0, [sp, #80]	@ 0x50
 800c13e:	9315      	str	r3, [sp, #84]	@ 0x54
 800c140:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c144:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c148:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c14a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c14e:	1b5b      	subs	r3, r3, r5
 800c150:	9311      	str	r3, [sp, #68]	@ 0x44
 800c152:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c156:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c15a:	f7ff f8f1 	bl	800b340 <__ulp>
 800c15e:	4650      	mov	r0, sl
 800c160:	ec53 2b10 	vmov	r2, r3, d0
 800c164:	4659      	mov	r1, fp
 800c166:	f7f4 fa6f 	bl	8000648 <__aeabi_dmul>
 800c16a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c16e:	f7f4 f8b5 	bl	80002dc <__adddf3>
 800c172:	4682      	mov	sl, r0
 800c174:	468b      	mov	fp, r1
 800c176:	e770      	b.n	800c05a <_strtod_l+0xa62>
 800c178:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c17c:	e7e0      	b.n	800c140 <_strtod_l+0xb48>
 800c17e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c1b8 <_strtod_l+0xbc0>)
 800c180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c184:	f7f4 fcd2 	bl	8000b2c <__aeabi_dcmplt>
 800c188:	e798      	b.n	800c0bc <_strtod_l+0xac4>
 800c18a:	2300      	movs	r3, #0
 800c18c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c18e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c190:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c192:	6013      	str	r3, [r2, #0]
 800c194:	f7ff ba6d 	b.w	800b672 <_strtod_l+0x7a>
 800c198:	2a65      	cmp	r2, #101	@ 0x65
 800c19a:	f43f ab66 	beq.w	800b86a <_strtod_l+0x272>
 800c19e:	2a45      	cmp	r2, #69	@ 0x45
 800c1a0:	f43f ab63 	beq.w	800b86a <_strtod_l+0x272>
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	f7ff bb9e 	b.w	800b8e6 <_strtod_l+0x2ee>
 800c1aa:	bf00      	nop
 800c1ac:	f3af 8000 	nop.w
 800c1b0:	ffc00000 	.word	0xffc00000
 800c1b4:	41dfffff 	.word	0x41dfffff
 800c1b8:	94a03595 	.word	0x94a03595
 800c1bc:	3fcfffff 	.word	0x3fcfffff

0800c1c0 <_strtod_r>:
 800c1c0:	4b01      	ldr	r3, [pc, #4]	@ (800c1c8 <_strtod_r+0x8>)
 800c1c2:	f7ff ba19 	b.w	800b5f8 <_strtod_l>
 800c1c6:	bf00      	nop
 800c1c8:	2000006c 	.word	0x2000006c

0800c1cc <_strtol_l.constprop.0>:
 800c1cc:	2b24      	cmp	r3, #36	@ 0x24
 800c1ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1d2:	4686      	mov	lr, r0
 800c1d4:	4690      	mov	r8, r2
 800c1d6:	d801      	bhi.n	800c1dc <_strtol_l.constprop.0+0x10>
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d106      	bne.n	800c1ea <_strtol_l.constprop.0+0x1e>
 800c1dc:	f7fd fdac 	bl	8009d38 <__errno>
 800c1e0:	2316      	movs	r3, #22
 800c1e2:	6003      	str	r3, [r0, #0]
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ea:	4834      	ldr	r0, [pc, #208]	@ (800c2bc <_strtol_l.constprop.0+0xf0>)
 800c1ec:	460d      	mov	r5, r1
 800c1ee:	462a      	mov	r2, r5
 800c1f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1f4:	5d06      	ldrb	r6, [r0, r4]
 800c1f6:	f016 0608 	ands.w	r6, r6, #8
 800c1fa:	d1f8      	bne.n	800c1ee <_strtol_l.constprop.0+0x22>
 800c1fc:	2c2d      	cmp	r4, #45	@ 0x2d
 800c1fe:	d12d      	bne.n	800c25c <_strtol_l.constprop.0+0x90>
 800c200:	782c      	ldrb	r4, [r5, #0]
 800c202:	2601      	movs	r6, #1
 800c204:	1c95      	adds	r5, r2, #2
 800c206:	f033 0210 	bics.w	r2, r3, #16
 800c20a:	d109      	bne.n	800c220 <_strtol_l.constprop.0+0x54>
 800c20c:	2c30      	cmp	r4, #48	@ 0x30
 800c20e:	d12a      	bne.n	800c266 <_strtol_l.constprop.0+0x9a>
 800c210:	782a      	ldrb	r2, [r5, #0]
 800c212:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c216:	2a58      	cmp	r2, #88	@ 0x58
 800c218:	d125      	bne.n	800c266 <_strtol_l.constprop.0+0x9a>
 800c21a:	786c      	ldrb	r4, [r5, #1]
 800c21c:	2310      	movs	r3, #16
 800c21e:	3502      	adds	r5, #2
 800c220:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c224:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c228:	2200      	movs	r2, #0
 800c22a:	fbbc f9f3 	udiv	r9, ip, r3
 800c22e:	4610      	mov	r0, r2
 800c230:	fb03 ca19 	mls	sl, r3, r9, ip
 800c234:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c238:	2f09      	cmp	r7, #9
 800c23a:	d81b      	bhi.n	800c274 <_strtol_l.constprop.0+0xa8>
 800c23c:	463c      	mov	r4, r7
 800c23e:	42a3      	cmp	r3, r4
 800c240:	dd27      	ble.n	800c292 <_strtol_l.constprop.0+0xc6>
 800c242:	1c57      	adds	r7, r2, #1
 800c244:	d007      	beq.n	800c256 <_strtol_l.constprop.0+0x8a>
 800c246:	4581      	cmp	r9, r0
 800c248:	d320      	bcc.n	800c28c <_strtol_l.constprop.0+0xc0>
 800c24a:	d101      	bne.n	800c250 <_strtol_l.constprop.0+0x84>
 800c24c:	45a2      	cmp	sl, r4
 800c24e:	db1d      	blt.n	800c28c <_strtol_l.constprop.0+0xc0>
 800c250:	fb00 4003 	mla	r0, r0, r3, r4
 800c254:	2201      	movs	r2, #1
 800c256:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c25a:	e7eb      	b.n	800c234 <_strtol_l.constprop.0+0x68>
 800c25c:	2c2b      	cmp	r4, #43	@ 0x2b
 800c25e:	bf04      	itt	eq
 800c260:	782c      	ldrbeq	r4, [r5, #0]
 800c262:	1c95      	addeq	r5, r2, #2
 800c264:	e7cf      	b.n	800c206 <_strtol_l.constprop.0+0x3a>
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1da      	bne.n	800c220 <_strtol_l.constprop.0+0x54>
 800c26a:	2c30      	cmp	r4, #48	@ 0x30
 800c26c:	bf0c      	ite	eq
 800c26e:	2308      	moveq	r3, #8
 800c270:	230a      	movne	r3, #10
 800c272:	e7d5      	b.n	800c220 <_strtol_l.constprop.0+0x54>
 800c274:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c278:	2f19      	cmp	r7, #25
 800c27a:	d801      	bhi.n	800c280 <_strtol_l.constprop.0+0xb4>
 800c27c:	3c37      	subs	r4, #55	@ 0x37
 800c27e:	e7de      	b.n	800c23e <_strtol_l.constprop.0+0x72>
 800c280:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c284:	2f19      	cmp	r7, #25
 800c286:	d804      	bhi.n	800c292 <_strtol_l.constprop.0+0xc6>
 800c288:	3c57      	subs	r4, #87	@ 0x57
 800c28a:	e7d8      	b.n	800c23e <_strtol_l.constprop.0+0x72>
 800c28c:	f04f 32ff 	mov.w	r2, #4294967295
 800c290:	e7e1      	b.n	800c256 <_strtol_l.constprop.0+0x8a>
 800c292:	1c53      	adds	r3, r2, #1
 800c294:	d108      	bne.n	800c2a8 <_strtol_l.constprop.0+0xdc>
 800c296:	2322      	movs	r3, #34	@ 0x22
 800c298:	f8ce 3000 	str.w	r3, [lr]
 800c29c:	4660      	mov	r0, ip
 800c29e:	f1b8 0f00 	cmp.w	r8, #0
 800c2a2:	d0a0      	beq.n	800c1e6 <_strtol_l.constprop.0+0x1a>
 800c2a4:	1e69      	subs	r1, r5, #1
 800c2a6:	e006      	b.n	800c2b6 <_strtol_l.constprop.0+0xea>
 800c2a8:	b106      	cbz	r6, 800c2ac <_strtol_l.constprop.0+0xe0>
 800c2aa:	4240      	negs	r0, r0
 800c2ac:	f1b8 0f00 	cmp.w	r8, #0
 800c2b0:	d099      	beq.n	800c1e6 <_strtol_l.constprop.0+0x1a>
 800c2b2:	2a00      	cmp	r2, #0
 800c2b4:	d1f6      	bne.n	800c2a4 <_strtol_l.constprop.0+0xd8>
 800c2b6:	f8c8 1000 	str.w	r1, [r8]
 800c2ba:	e794      	b.n	800c1e6 <_strtol_l.constprop.0+0x1a>
 800c2bc:	0800d729 	.word	0x0800d729

0800c2c0 <_strtol_r>:
 800c2c0:	f7ff bf84 	b.w	800c1cc <_strtol_l.constprop.0>

0800c2c4 <__ssputs_r>:
 800c2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2c8:	688e      	ldr	r6, [r1, #8]
 800c2ca:	461f      	mov	r7, r3
 800c2cc:	42be      	cmp	r6, r7
 800c2ce:	680b      	ldr	r3, [r1, #0]
 800c2d0:	4682      	mov	sl, r0
 800c2d2:	460c      	mov	r4, r1
 800c2d4:	4690      	mov	r8, r2
 800c2d6:	d82d      	bhi.n	800c334 <__ssputs_r+0x70>
 800c2d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c2e0:	d026      	beq.n	800c330 <__ssputs_r+0x6c>
 800c2e2:	6965      	ldr	r5, [r4, #20]
 800c2e4:	6909      	ldr	r1, [r1, #16]
 800c2e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2ea:	eba3 0901 	sub.w	r9, r3, r1
 800c2ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2f2:	1c7b      	adds	r3, r7, #1
 800c2f4:	444b      	add	r3, r9
 800c2f6:	106d      	asrs	r5, r5, #1
 800c2f8:	429d      	cmp	r5, r3
 800c2fa:	bf38      	it	cc
 800c2fc:	461d      	movcc	r5, r3
 800c2fe:	0553      	lsls	r3, r2, #21
 800c300:	d527      	bpl.n	800c352 <__ssputs_r+0x8e>
 800c302:	4629      	mov	r1, r5
 800c304:	f7fe fc1c 	bl	800ab40 <_malloc_r>
 800c308:	4606      	mov	r6, r0
 800c30a:	b360      	cbz	r0, 800c366 <__ssputs_r+0xa2>
 800c30c:	6921      	ldr	r1, [r4, #16]
 800c30e:	464a      	mov	r2, r9
 800c310:	f7fd fd3f 	bl	8009d92 <memcpy>
 800c314:	89a3      	ldrh	r3, [r4, #12]
 800c316:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c31a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c31e:	81a3      	strh	r3, [r4, #12]
 800c320:	6126      	str	r6, [r4, #16]
 800c322:	6165      	str	r5, [r4, #20]
 800c324:	444e      	add	r6, r9
 800c326:	eba5 0509 	sub.w	r5, r5, r9
 800c32a:	6026      	str	r6, [r4, #0]
 800c32c:	60a5      	str	r5, [r4, #8]
 800c32e:	463e      	mov	r6, r7
 800c330:	42be      	cmp	r6, r7
 800c332:	d900      	bls.n	800c336 <__ssputs_r+0x72>
 800c334:	463e      	mov	r6, r7
 800c336:	6820      	ldr	r0, [r4, #0]
 800c338:	4632      	mov	r2, r6
 800c33a:	4641      	mov	r1, r8
 800c33c:	f000 fb6a 	bl	800ca14 <memmove>
 800c340:	68a3      	ldr	r3, [r4, #8]
 800c342:	1b9b      	subs	r3, r3, r6
 800c344:	60a3      	str	r3, [r4, #8]
 800c346:	6823      	ldr	r3, [r4, #0]
 800c348:	4433      	add	r3, r6
 800c34a:	6023      	str	r3, [r4, #0]
 800c34c:	2000      	movs	r0, #0
 800c34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c352:	462a      	mov	r2, r5
 800c354:	f000 ff41 	bl	800d1da <_realloc_r>
 800c358:	4606      	mov	r6, r0
 800c35a:	2800      	cmp	r0, #0
 800c35c:	d1e0      	bne.n	800c320 <__ssputs_r+0x5c>
 800c35e:	6921      	ldr	r1, [r4, #16]
 800c360:	4650      	mov	r0, sl
 800c362:	f7fe fb79 	bl	800aa58 <_free_r>
 800c366:	230c      	movs	r3, #12
 800c368:	f8ca 3000 	str.w	r3, [sl]
 800c36c:	89a3      	ldrh	r3, [r4, #12]
 800c36e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c372:	81a3      	strh	r3, [r4, #12]
 800c374:	f04f 30ff 	mov.w	r0, #4294967295
 800c378:	e7e9      	b.n	800c34e <__ssputs_r+0x8a>
	...

0800c37c <_svfiprintf_r>:
 800c37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c380:	4698      	mov	r8, r3
 800c382:	898b      	ldrh	r3, [r1, #12]
 800c384:	061b      	lsls	r3, r3, #24
 800c386:	b09d      	sub	sp, #116	@ 0x74
 800c388:	4607      	mov	r7, r0
 800c38a:	460d      	mov	r5, r1
 800c38c:	4614      	mov	r4, r2
 800c38e:	d510      	bpl.n	800c3b2 <_svfiprintf_r+0x36>
 800c390:	690b      	ldr	r3, [r1, #16]
 800c392:	b973      	cbnz	r3, 800c3b2 <_svfiprintf_r+0x36>
 800c394:	2140      	movs	r1, #64	@ 0x40
 800c396:	f7fe fbd3 	bl	800ab40 <_malloc_r>
 800c39a:	6028      	str	r0, [r5, #0]
 800c39c:	6128      	str	r0, [r5, #16]
 800c39e:	b930      	cbnz	r0, 800c3ae <_svfiprintf_r+0x32>
 800c3a0:	230c      	movs	r3, #12
 800c3a2:	603b      	str	r3, [r7, #0]
 800c3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a8:	b01d      	add	sp, #116	@ 0x74
 800c3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ae:	2340      	movs	r3, #64	@ 0x40
 800c3b0:	616b      	str	r3, [r5, #20]
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3b6:	2320      	movs	r3, #32
 800c3b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c3bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3c0:	2330      	movs	r3, #48	@ 0x30
 800c3c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c560 <_svfiprintf_r+0x1e4>
 800c3c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c3ca:	f04f 0901 	mov.w	r9, #1
 800c3ce:	4623      	mov	r3, r4
 800c3d0:	469a      	mov	sl, r3
 800c3d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3d6:	b10a      	cbz	r2, 800c3dc <_svfiprintf_r+0x60>
 800c3d8:	2a25      	cmp	r2, #37	@ 0x25
 800c3da:	d1f9      	bne.n	800c3d0 <_svfiprintf_r+0x54>
 800c3dc:	ebba 0b04 	subs.w	fp, sl, r4
 800c3e0:	d00b      	beq.n	800c3fa <_svfiprintf_r+0x7e>
 800c3e2:	465b      	mov	r3, fp
 800c3e4:	4622      	mov	r2, r4
 800c3e6:	4629      	mov	r1, r5
 800c3e8:	4638      	mov	r0, r7
 800c3ea:	f7ff ff6b 	bl	800c2c4 <__ssputs_r>
 800c3ee:	3001      	adds	r0, #1
 800c3f0:	f000 80a7 	beq.w	800c542 <_svfiprintf_r+0x1c6>
 800c3f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3f6:	445a      	add	r2, fp
 800c3f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	f000 809f 	beq.w	800c542 <_svfiprintf_r+0x1c6>
 800c404:	2300      	movs	r3, #0
 800c406:	f04f 32ff 	mov.w	r2, #4294967295
 800c40a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c40e:	f10a 0a01 	add.w	sl, sl, #1
 800c412:	9304      	str	r3, [sp, #16]
 800c414:	9307      	str	r3, [sp, #28]
 800c416:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c41a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c41c:	4654      	mov	r4, sl
 800c41e:	2205      	movs	r2, #5
 800c420:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c424:	484e      	ldr	r0, [pc, #312]	@ (800c560 <_svfiprintf_r+0x1e4>)
 800c426:	f7f3 fefb 	bl	8000220 <memchr>
 800c42a:	9a04      	ldr	r2, [sp, #16]
 800c42c:	b9d8      	cbnz	r0, 800c466 <_svfiprintf_r+0xea>
 800c42e:	06d0      	lsls	r0, r2, #27
 800c430:	bf44      	itt	mi
 800c432:	2320      	movmi	r3, #32
 800c434:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c438:	0711      	lsls	r1, r2, #28
 800c43a:	bf44      	itt	mi
 800c43c:	232b      	movmi	r3, #43	@ 0x2b
 800c43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c442:	f89a 3000 	ldrb.w	r3, [sl]
 800c446:	2b2a      	cmp	r3, #42	@ 0x2a
 800c448:	d015      	beq.n	800c476 <_svfiprintf_r+0xfa>
 800c44a:	9a07      	ldr	r2, [sp, #28]
 800c44c:	4654      	mov	r4, sl
 800c44e:	2000      	movs	r0, #0
 800c450:	f04f 0c0a 	mov.w	ip, #10
 800c454:	4621      	mov	r1, r4
 800c456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c45a:	3b30      	subs	r3, #48	@ 0x30
 800c45c:	2b09      	cmp	r3, #9
 800c45e:	d94b      	bls.n	800c4f8 <_svfiprintf_r+0x17c>
 800c460:	b1b0      	cbz	r0, 800c490 <_svfiprintf_r+0x114>
 800c462:	9207      	str	r2, [sp, #28]
 800c464:	e014      	b.n	800c490 <_svfiprintf_r+0x114>
 800c466:	eba0 0308 	sub.w	r3, r0, r8
 800c46a:	fa09 f303 	lsl.w	r3, r9, r3
 800c46e:	4313      	orrs	r3, r2
 800c470:	9304      	str	r3, [sp, #16]
 800c472:	46a2      	mov	sl, r4
 800c474:	e7d2      	b.n	800c41c <_svfiprintf_r+0xa0>
 800c476:	9b03      	ldr	r3, [sp, #12]
 800c478:	1d19      	adds	r1, r3, #4
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	9103      	str	r1, [sp, #12]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	bfbb      	ittet	lt
 800c482:	425b      	neglt	r3, r3
 800c484:	f042 0202 	orrlt.w	r2, r2, #2
 800c488:	9307      	strge	r3, [sp, #28]
 800c48a:	9307      	strlt	r3, [sp, #28]
 800c48c:	bfb8      	it	lt
 800c48e:	9204      	strlt	r2, [sp, #16]
 800c490:	7823      	ldrb	r3, [r4, #0]
 800c492:	2b2e      	cmp	r3, #46	@ 0x2e
 800c494:	d10a      	bne.n	800c4ac <_svfiprintf_r+0x130>
 800c496:	7863      	ldrb	r3, [r4, #1]
 800c498:	2b2a      	cmp	r3, #42	@ 0x2a
 800c49a:	d132      	bne.n	800c502 <_svfiprintf_r+0x186>
 800c49c:	9b03      	ldr	r3, [sp, #12]
 800c49e:	1d1a      	adds	r2, r3, #4
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	9203      	str	r2, [sp, #12]
 800c4a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c4a8:	3402      	adds	r4, #2
 800c4aa:	9305      	str	r3, [sp, #20]
 800c4ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c570 <_svfiprintf_r+0x1f4>
 800c4b0:	7821      	ldrb	r1, [r4, #0]
 800c4b2:	2203      	movs	r2, #3
 800c4b4:	4650      	mov	r0, sl
 800c4b6:	f7f3 feb3 	bl	8000220 <memchr>
 800c4ba:	b138      	cbz	r0, 800c4cc <_svfiprintf_r+0x150>
 800c4bc:	9b04      	ldr	r3, [sp, #16]
 800c4be:	eba0 000a 	sub.w	r0, r0, sl
 800c4c2:	2240      	movs	r2, #64	@ 0x40
 800c4c4:	4082      	lsls	r2, r0
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	3401      	adds	r4, #1
 800c4ca:	9304      	str	r3, [sp, #16]
 800c4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4d0:	4824      	ldr	r0, [pc, #144]	@ (800c564 <_svfiprintf_r+0x1e8>)
 800c4d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c4d6:	2206      	movs	r2, #6
 800c4d8:	f7f3 fea2 	bl	8000220 <memchr>
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	d036      	beq.n	800c54e <_svfiprintf_r+0x1d2>
 800c4e0:	4b21      	ldr	r3, [pc, #132]	@ (800c568 <_svfiprintf_r+0x1ec>)
 800c4e2:	bb1b      	cbnz	r3, 800c52c <_svfiprintf_r+0x1b0>
 800c4e4:	9b03      	ldr	r3, [sp, #12]
 800c4e6:	3307      	adds	r3, #7
 800c4e8:	f023 0307 	bic.w	r3, r3, #7
 800c4ec:	3308      	adds	r3, #8
 800c4ee:	9303      	str	r3, [sp, #12]
 800c4f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4f2:	4433      	add	r3, r6
 800c4f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4f6:	e76a      	b.n	800c3ce <_svfiprintf_r+0x52>
 800c4f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4fc:	460c      	mov	r4, r1
 800c4fe:	2001      	movs	r0, #1
 800c500:	e7a8      	b.n	800c454 <_svfiprintf_r+0xd8>
 800c502:	2300      	movs	r3, #0
 800c504:	3401      	adds	r4, #1
 800c506:	9305      	str	r3, [sp, #20]
 800c508:	4619      	mov	r1, r3
 800c50a:	f04f 0c0a 	mov.w	ip, #10
 800c50e:	4620      	mov	r0, r4
 800c510:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c514:	3a30      	subs	r2, #48	@ 0x30
 800c516:	2a09      	cmp	r2, #9
 800c518:	d903      	bls.n	800c522 <_svfiprintf_r+0x1a6>
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d0c6      	beq.n	800c4ac <_svfiprintf_r+0x130>
 800c51e:	9105      	str	r1, [sp, #20]
 800c520:	e7c4      	b.n	800c4ac <_svfiprintf_r+0x130>
 800c522:	fb0c 2101 	mla	r1, ip, r1, r2
 800c526:	4604      	mov	r4, r0
 800c528:	2301      	movs	r3, #1
 800c52a:	e7f0      	b.n	800c50e <_svfiprintf_r+0x192>
 800c52c:	ab03      	add	r3, sp, #12
 800c52e:	9300      	str	r3, [sp, #0]
 800c530:	462a      	mov	r2, r5
 800c532:	4b0e      	ldr	r3, [pc, #56]	@ (800c56c <_svfiprintf_r+0x1f0>)
 800c534:	a904      	add	r1, sp, #16
 800c536:	4638      	mov	r0, r7
 800c538:	f7fc fbb6 	bl	8008ca8 <_printf_float>
 800c53c:	1c42      	adds	r2, r0, #1
 800c53e:	4606      	mov	r6, r0
 800c540:	d1d6      	bne.n	800c4f0 <_svfiprintf_r+0x174>
 800c542:	89ab      	ldrh	r3, [r5, #12]
 800c544:	065b      	lsls	r3, r3, #25
 800c546:	f53f af2d 	bmi.w	800c3a4 <_svfiprintf_r+0x28>
 800c54a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c54c:	e72c      	b.n	800c3a8 <_svfiprintf_r+0x2c>
 800c54e:	ab03      	add	r3, sp, #12
 800c550:	9300      	str	r3, [sp, #0]
 800c552:	462a      	mov	r2, r5
 800c554:	4b05      	ldr	r3, [pc, #20]	@ (800c56c <_svfiprintf_r+0x1f0>)
 800c556:	a904      	add	r1, sp, #16
 800c558:	4638      	mov	r0, r7
 800c55a:	f7fc fe3d 	bl	80091d8 <_printf_i>
 800c55e:	e7ed      	b.n	800c53c <_svfiprintf_r+0x1c0>
 800c560:	0800d829 	.word	0x0800d829
 800c564:	0800d833 	.word	0x0800d833
 800c568:	08008ca9 	.word	0x08008ca9
 800c56c:	0800c2c5 	.word	0x0800c2c5
 800c570:	0800d82f 	.word	0x0800d82f

0800c574 <__sfputc_r>:
 800c574:	6893      	ldr	r3, [r2, #8]
 800c576:	3b01      	subs	r3, #1
 800c578:	2b00      	cmp	r3, #0
 800c57a:	b410      	push	{r4}
 800c57c:	6093      	str	r3, [r2, #8]
 800c57e:	da08      	bge.n	800c592 <__sfputc_r+0x1e>
 800c580:	6994      	ldr	r4, [r2, #24]
 800c582:	42a3      	cmp	r3, r4
 800c584:	db01      	blt.n	800c58a <__sfputc_r+0x16>
 800c586:	290a      	cmp	r1, #10
 800c588:	d103      	bne.n	800c592 <__sfputc_r+0x1e>
 800c58a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c58e:	f7fd baec 	b.w	8009b6a <__swbuf_r>
 800c592:	6813      	ldr	r3, [r2, #0]
 800c594:	1c58      	adds	r0, r3, #1
 800c596:	6010      	str	r0, [r2, #0]
 800c598:	7019      	strb	r1, [r3, #0]
 800c59a:	4608      	mov	r0, r1
 800c59c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5a0:	4770      	bx	lr

0800c5a2 <__sfputs_r>:
 800c5a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5a4:	4606      	mov	r6, r0
 800c5a6:	460f      	mov	r7, r1
 800c5a8:	4614      	mov	r4, r2
 800c5aa:	18d5      	adds	r5, r2, r3
 800c5ac:	42ac      	cmp	r4, r5
 800c5ae:	d101      	bne.n	800c5b4 <__sfputs_r+0x12>
 800c5b0:	2000      	movs	r0, #0
 800c5b2:	e007      	b.n	800c5c4 <__sfputs_r+0x22>
 800c5b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5b8:	463a      	mov	r2, r7
 800c5ba:	4630      	mov	r0, r6
 800c5bc:	f7ff ffda 	bl	800c574 <__sfputc_r>
 800c5c0:	1c43      	adds	r3, r0, #1
 800c5c2:	d1f3      	bne.n	800c5ac <__sfputs_r+0xa>
 800c5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5c8 <_vfiprintf_r>:
 800c5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5cc:	460d      	mov	r5, r1
 800c5ce:	b09d      	sub	sp, #116	@ 0x74
 800c5d0:	4614      	mov	r4, r2
 800c5d2:	4698      	mov	r8, r3
 800c5d4:	4606      	mov	r6, r0
 800c5d6:	b118      	cbz	r0, 800c5e0 <_vfiprintf_r+0x18>
 800c5d8:	6a03      	ldr	r3, [r0, #32]
 800c5da:	b90b      	cbnz	r3, 800c5e0 <_vfiprintf_r+0x18>
 800c5dc:	f7fd f9bc 	bl	8009958 <__sinit>
 800c5e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5e2:	07d9      	lsls	r1, r3, #31
 800c5e4:	d405      	bmi.n	800c5f2 <_vfiprintf_r+0x2a>
 800c5e6:	89ab      	ldrh	r3, [r5, #12]
 800c5e8:	059a      	lsls	r2, r3, #22
 800c5ea:	d402      	bmi.n	800c5f2 <_vfiprintf_r+0x2a>
 800c5ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5ee:	f7fd fbce 	bl	8009d8e <__retarget_lock_acquire_recursive>
 800c5f2:	89ab      	ldrh	r3, [r5, #12]
 800c5f4:	071b      	lsls	r3, r3, #28
 800c5f6:	d501      	bpl.n	800c5fc <_vfiprintf_r+0x34>
 800c5f8:	692b      	ldr	r3, [r5, #16]
 800c5fa:	b99b      	cbnz	r3, 800c624 <_vfiprintf_r+0x5c>
 800c5fc:	4629      	mov	r1, r5
 800c5fe:	4630      	mov	r0, r6
 800c600:	f7fd faf2 	bl	8009be8 <__swsetup_r>
 800c604:	b170      	cbz	r0, 800c624 <_vfiprintf_r+0x5c>
 800c606:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c608:	07dc      	lsls	r4, r3, #31
 800c60a:	d504      	bpl.n	800c616 <_vfiprintf_r+0x4e>
 800c60c:	f04f 30ff 	mov.w	r0, #4294967295
 800c610:	b01d      	add	sp, #116	@ 0x74
 800c612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c616:	89ab      	ldrh	r3, [r5, #12]
 800c618:	0598      	lsls	r0, r3, #22
 800c61a:	d4f7      	bmi.n	800c60c <_vfiprintf_r+0x44>
 800c61c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c61e:	f7fd fbb7 	bl	8009d90 <__retarget_lock_release_recursive>
 800c622:	e7f3      	b.n	800c60c <_vfiprintf_r+0x44>
 800c624:	2300      	movs	r3, #0
 800c626:	9309      	str	r3, [sp, #36]	@ 0x24
 800c628:	2320      	movs	r3, #32
 800c62a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c62e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c632:	2330      	movs	r3, #48	@ 0x30
 800c634:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c7e4 <_vfiprintf_r+0x21c>
 800c638:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c63c:	f04f 0901 	mov.w	r9, #1
 800c640:	4623      	mov	r3, r4
 800c642:	469a      	mov	sl, r3
 800c644:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c648:	b10a      	cbz	r2, 800c64e <_vfiprintf_r+0x86>
 800c64a:	2a25      	cmp	r2, #37	@ 0x25
 800c64c:	d1f9      	bne.n	800c642 <_vfiprintf_r+0x7a>
 800c64e:	ebba 0b04 	subs.w	fp, sl, r4
 800c652:	d00b      	beq.n	800c66c <_vfiprintf_r+0xa4>
 800c654:	465b      	mov	r3, fp
 800c656:	4622      	mov	r2, r4
 800c658:	4629      	mov	r1, r5
 800c65a:	4630      	mov	r0, r6
 800c65c:	f7ff ffa1 	bl	800c5a2 <__sfputs_r>
 800c660:	3001      	adds	r0, #1
 800c662:	f000 80a7 	beq.w	800c7b4 <_vfiprintf_r+0x1ec>
 800c666:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c668:	445a      	add	r2, fp
 800c66a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c66c:	f89a 3000 	ldrb.w	r3, [sl]
 800c670:	2b00      	cmp	r3, #0
 800c672:	f000 809f 	beq.w	800c7b4 <_vfiprintf_r+0x1ec>
 800c676:	2300      	movs	r3, #0
 800c678:	f04f 32ff 	mov.w	r2, #4294967295
 800c67c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c680:	f10a 0a01 	add.w	sl, sl, #1
 800c684:	9304      	str	r3, [sp, #16]
 800c686:	9307      	str	r3, [sp, #28]
 800c688:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c68c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c68e:	4654      	mov	r4, sl
 800c690:	2205      	movs	r2, #5
 800c692:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c696:	4853      	ldr	r0, [pc, #332]	@ (800c7e4 <_vfiprintf_r+0x21c>)
 800c698:	f7f3 fdc2 	bl	8000220 <memchr>
 800c69c:	9a04      	ldr	r2, [sp, #16]
 800c69e:	b9d8      	cbnz	r0, 800c6d8 <_vfiprintf_r+0x110>
 800c6a0:	06d1      	lsls	r1, r2, #27
 800c6a2:	bf44      	itt	mi
 800c6a4:	2320      	movmi	r3, #32
 800c6a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6aa:	0713      	lsls	r3, r2, #28
 800c6ac:	bf44      	itt	mi
 800c6ae:	232b      	movmi	r3, #43	@ 0x2b
 800c6b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6b4:	f89a 3000 	ldrb.w	r3, [sl]
 800c6b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6ba:	d015      	beq.n	800c6e8 <_vfiprintf_r+0x120>
 800c6bc:	9a07      	ldr	r2, [sp, #28]
 800c6be:	4654      	mov	r4, sl
 800c6c0:	2000      	movs	r0, #0
 800c6c2:	f04f 0c0a 	mov.w	ip, #10
 800c6c6:	4621      	mov	r1, r4
 800c6c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6cc:	3b30      	subs	r3, #48	@ 0x30
 800c6ce:	2b09      	cmp	r3, #9
 800c6d0:	d94b      	bls.n	800c76a <_vfiprintf_r+0x1a2>
 800c6d2:	b1b0      	cbz	r0, 800c702 <_vfiprintf_r+0x13a>
 800c6d4:	9207      	str	r2, [sp, #28]
 800c6d6:	e014      	b.n	800c702 <_vfiprintf_r+0x13a>
 800c6d8:	eba0 0308 	sub.w	r3, r0, r8
 800c6dc:	fa09 f303 	lsl.w	r3, r9, r3
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	9304      	str	r3, [sp, #16]
 800c6e4:	46a2      	mov	sl, r4
 800c6e6:	e7d2      	b.n	800c68e <_vfiprintf_r+0xc6>
 800c6e8:	9b03      	ldr	r3, [sp, #12]
 800c6ea:	1d19      	adds	r1, r3, #4
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	9103      	str	r1, [sp, #12]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	bfbb      	ittet	lt
 800c6f4:	425b      	neglt	r3, r3
 800c6f6:	f042 0202 	orrlt.w	r2, r2, #2
 800c6fa:	9307      	strge	r3, [sp, #28]
 800c6fc:	9307      	strlt	r3, [sp, #28]
 800c6fe:	bfb8      	it	lt
 800c700:	9204      	strlt	r2, [sp, #16]
 800c702:	7823      	ldrb	r3, [r4, #0]
 800c704:	2b2e      	cmp	r3, #46	@ 0x2e
 800c706:	d10a      	bne.n	800c71e <_vfiprintf_r+0x156>
 800c708:	7863      	ldrb	r3, [r4, #1]
 800c70a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c70c:	d132      	bne.n	800c774 <_vfiprintf_r+0x1ac>
 800c70e:	9b03      	ldr	r3, [sp, #12]
 800c710:	1d1a      	adds	r2, r3, #4
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	9203      	str	r2, [sp, #12]
 800c716:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c71a:	3402      	adds	r4, #2
 800c71c:	9305      	str	r3, [sp, #20]
 800c71e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c7f4 <_vfiprintf_r+0x22c>
 800c722:	7821      	ldrb	r1, [r4, #0]
 800c724:	2203      	movs	r2, #3
 800c726:	4650      	mov	r0, sl
 800c728:	f7f3 fd7a 	bl	8000220 <memchr>
 800c72c:	b138      	cbz	r0, 800c73e <_vfiprintf_r+0x176>
 800c72e:	9b04      	ldr	r3, [sp, #16]
 800c730:	eba0 000a 	sub.w	r0, r0, sl
 800c734:	2240      	movs	r2, #64	@ 0x40
 800c736:	4082      	lsls	r2, r0
 800c738:	4313      	orrs	r3, r2
 800c73a:	3401      	adds	r4, #1
 800c73c:	9304      	str	r3, [sp, #16]
 800c73e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c742:	4829      	ldr	r0, [pc, #164]	@ (800c7e8 <_vfiprintf_r+0x220>)
 800c744:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c748:	2206      	movs	r2, #6
 800c74a:	f7f3 fd69 	bl	8000220 <memchr>
 800c74e:	2800      	cmp	r0, #0
 800c750:	d03f      	beq.n	800c7d2 <_vfiprintf_r+0x20a>
 800c752:	4b26      	ldr	r3, [pc, #152]	@ (800c7ec <_vfiprintf_r+0x224>)
 800c754:	bb1b      	cbnz	r3, 800c79e <_vfiprintf_r+0x1d6>
 800c756:	9b03      	ldr	r3, [sp, #12]
 800c758:	3307      	adds	r3, #7
 800c75a:	f023 0307 	bic.w	r3, r3, #7
 800c75e:	3308      	adds	r3, #8
 800c760:	9303      	str	r3, [sp, #12]
 800c762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c764:	443b      	add	r3, r7
 800c766:	9309      	str	r3, [sp, #36]	@ 0x24
 800c768:	e76a      	b.n	800c640 <_vfiprintf_r+0x78>
 800c76a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c76e:	460c      	mov	r4, r1
 800c770:	2001      	movs	r0, #1
 800c772:	e7a8      	b.n	800c6c6 <_vfiprintf_r+0xfe>
 800c774:	2300      	movs	r3, #0
 800c776:	3401      	adds	r4, #1
 800c778:	9305      	str	r3, [sp, #20]
 800c77a:	4619      	mov	r1, r3
 800c77c:	f04f 0c0a 	mov.w	ip, #10
 800c780:	4620      	mov	r0, r4
 800c782:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c786:	3a30      	subs	r2, #48	@ 0x30
 800c788:	2a09      	cmp	r2, #9
 800c78a:	d903      	bls.n	800c794 <_vfiprintf_r+0x1cc>
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d0c6      	beq.n	800c71e <_vfiprintf_r+0x156>
 800c790:	9105      	str	r1, [sp, #20]
 800c792:	e7c4      	b.n	800c71e <_vfiprintf_r+0x156>
 800c794:	fb0c 2101 	mla	r1, ip, r1, r2
 800c798:	4604      	mov	r4, r0
 800c79a:	2301      	movs	r3, #1
 800c79c:	e7f0      	b.n	800c780 <_vfiprintf_r+0x1b8>
 800c79e:	ab03      	add	r3, sp, #12
 800c7a0:	9300      	str	r3, [sp, #0]
 800c7a2:	462a      	mov	r2, r5
 800c7a4:	4b12      	ldr	r3, [pc, #72]	@ (800c7f0 <_vfiprintf_r+0x228>)
 800c7a6:	a904      	add	r1, sp, #16
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	f7fc fa7d 	bl	8008ca8 <_printf_float>
 800c7ae:	4607      	mov	r7, r0
 800c7b0:	1c78      	adds	r0, r7, #1
 800c7b2:	d1d6      	bne.n	800c762 <_vfiprintf_r+0x19a>
 800c7b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7b6:	07d9      	lsls	r1, r3, #31
 800c7b8:	d405      	bmi.n	800c7c6 <_vfiprintf_r+0x1fe>
 800c7ba:	89ab      	ldrh	r3, [r5, #12]
 800c7bc:	059a      	lsls	r2, r3, #22
 800c7be:	d402      	bmi.n	800c7c6 <_vfiprintf_r+0x1fe>
 800c7c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7c2:	f7fd fae5 	bl	8009d90 <__retarget_lock_release_recursive>
 800c7c6:	89ab      	ldrh	r3, [r5, #12]
 800c7c8:	065b      	lsls	r3, r3, #25
 800c7ca:	f53f af1f 	bmi.w	800c60c <_vfiprintf_r+0x44>
 800c7ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7d0:	e71e      	b.n	800c610 <_vfiprintf_r+0x48>
 800c7d2:	ab03      	add	r3, sp, #12
 800c7d4:	9300      	str	r3, [sp, #0]
 800c7d6:	462a      	mov	r2, r5
 800c7d8:	4b05      	ldr	r3, [pc, #20]	@ (800c7f0 <_vfiprintf_r+0x228>)
 800c7da:	a904      	add	r1, sp, #16
 800c7dc:	4630      	mov	r0, r6
 800c7de:	f7fc fcfb 	bl	80091d8 <_printf_i>
 800c7e2:	e7e4      	b.n	800c7ae <_vfiprintf_r+0x1e6>
 800c7e4:	0800d829 	.word	0x0800d829
 800c7e8:	0800d833 	.word	0x0800d833
 800c7ec:	08008ca9 	.word	0x08008ca9
 800c7f0:	0800c5a3 	.word	0x0800c5a3
 800c7f4:	0800d82f 	.word	0x0800d82f

0800c7f8 <__sflush_r>:
 800c7f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c800:	0716      	lsls	r6, r2, #28
 800c802:	4605      	mov	r5, r0
 800c804:	460c      	mov	r4, r1
 800c806:	d454      	bmi.n	800c8b2 <__sflush_r+0xba>
 800c808:	684b      	ldr	r3, [r1, #4]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	dc02      	bgt.n	800c814 <__sflush_r+0x1c>
 800c80e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c810:	2b00      	cmp	r3, #0
 800c812:	dd48      	ble.n	800c8a6 <__sflush_r+0xae>
 800c814:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c816:	2e00      	cmp	r6, #0
 800c818:	d045      	beq.n	800c8a6 <__sflush_r+0xae>
 800c81a:	2300      	movs	r3, #0
 800c81c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c820:	682f      	ldr	r7, [r5, #0]
 800c822:	6a21      	ldr	r1, [r4, #32]
 800c824:	602b      	str	r3, [r5, #0]
 800c826:	d030      	beq.n	800c88a <__sflush_r+0x92>
 800c828:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c82a:	89a3      	ldrh	r3, [r4, #12]
 800c82c:	0759      	lsls	r1, r3, #29
 800c82e:	d505      	bpl.n	800c83c <__sflush_r+0x44>
 800c830:	6863      	ldr	r3, [r4, #4]
 800c832:	1ad2      	subs	r2, r2, r3
 800c834:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c836:	b10b      	cbz	r3, 800c83c <__sflush_r+0x44>
 800c838:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c83a:	1ad2      	subs	r2, r2, r3
 800c83c:	2300      	movs	r3, #0
 800c83e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c840:	6a21      	ldr	r1, [r4, #32]
 800c842:	4628      	mov	r0, r5
 800c844:	47b0      	blx	r6
 800c846:	1c43      	adds	r3, r0, #1
 800c848:	89a3      	ldrh	r3, [r4, #12]
 800c84a:	d106      	bne.n	800c85a <__sflush_r+0x62>
 800c84c:	6829      	ldr	r1, [r5, #0]
 800c84e:	291d      	cmp	r1, #29
 800c850:	d82b      	bhi.n	800c8aa <__sflush_r+0xb2>
 800c852:	4a2a      	ldr	r2, [pc, #168]	@ (800c8fc <__sflush_r+0x104>)
 800c854:	410a      	asrs	r2, r1
 800c856:	07d6      	lsls	r6, r2, #31
 800c858:	d427      	bmi.n	800c8aa <__sflush_r+0xb2>
 800c85a:	2200      	movs	r2, #0
 800c85c:	6062      	str	r2, [r4, #4]
 800c85e:	04d9      	lsls	r1, r3, #19
 800c860:	6922      	ldr	r2, [r4, #16]
 800c862:	6022      	str	r2, [r4, #0]
 800c864:	d504      	bpl.n	800c870 <__sflush_r+0x78>
 800c866:	1c42      	adds	r2, r0, #1
 800c868:	d101      	bne.n	800c86e <__sflush_r+0x76>
 800c86a:	682b      	ldr	r3, [r5, #0]
 800c86c:	b903      	cbnz	r3, 800c870 <__sflush_r+0x78>
 800c86e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c872:	602f      	str	r7, [r5, #0]
 800c874:	b1b9      	cbz	r1, 800c8a6 <__sflush_r+0xae>
 800c876:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c87a:	4299      	cmp	r1, r3
 800c87c:	d002      	beq.n	800c884 <__sflush_r+0x8c>
 800c87e:	4628      	mov	r0, r5
 800c880:	f7fe f8ea 	bl	800aa58 <_free_r>
 800c884:	2300      	movs	r3, #0
 800c886:	6363      	str	r3, [r4, #52]	@ 0x34
 800c888:	e00d      	b.n	800c8a6 <__sflush_r+0xae>
 800c88a:	2301      	movs	r3, #1
 800c88c:	4628      	mov	r0, r5
 800c88e:	47b0      	blx	r6
 800c890:	4602      	mov	r2, r0
 800c892:	1c50      	adds	r0, r2, #1
 800c894:	d1c9      	bne.n	800c82a <__sflush_r+0x32>
 800c896:	682b      	ldr	r3, [r5, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d0c6      	beq.n	800c82a <__sflush_r+0x32>
 800c89c:	2b1d      	cmp	r3, #29
 800c89e:	d001      	beq.n	800c8a4 <__sflush_r+0xac>
 800c8a0:	2b16      	cmp	r3, #22
 800c8a2:	d11e      	bne.n	800c8e2 <__sflush_r+0xea>
 800c8a4:	602f      	str	r7, [r5, #0]
 800c8a6:	2000      	movs	r0, #0
 800c8a8:	e022      	b.n	800c8f0 <__sflush_r+0xf8>
 800c8aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8ae:	b21b      	sxth	r3, r3
 800c8b0:	e01b      	b.n	800c8ea <__sflush_r+0xf2>
 800c8b2:	690f      	ldr	r7, [r1, #16]
 800c8b4:	2f00      	cmp	r7, #0
 800c8b6:	d0f6      	beq.n	800c8a6 <__sflush_r+0xae>
 800c8b8:	0793      	lsls	r3, r2, #30
 800c8ba:	680e      	ldr	r6, [r1, #0]
 800c8bc:	bf08      	it	eq
 800c8be:	694b      	ldreq	r3, [r1, #20]
 800c8c0:	600f      	str	r7, [r1, #0]
 800c8c2:	bf18      	it	ne
 800c8c4:	2300      	movne	r3, #0
 800c8c6:	eba6 0807 	sub.w	r8, r6, r7
 800c8ca:	608b      	str	r3, [r1, #8]
 800c8cc:	f1b8 0f00 	cmp.w	r8, #0
 800c8d0:	dde9      	ble.n	800c8a6 <__sflush_r+0xae>
 800c8d2:	6a21      	ldr	r1, [r4, #32]
 800c8d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c8d6:	4643      	mov	r3, r8
 800c8d8:	463a      	mov	r2, r7
 800c8da:	4628      	mov	r0, r5
 800c8dc:	47b0      	blx	r6
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	dc08      	bgt.n	800c8f4 <__sflush_r+0xfc>
 800c8e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8ea:	81a3      	strh	r3, [r4, #12]
 800c8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f4:	4407      	add	r7, r0
 800c8f6:	eba8 0800 	sub.w	r8, r8, r0
 800c8fa:	e7e7      	b.n	800c8cc <__sflush_r+0xd4>
 800c8fc:	dfbffffe 	.word	0xdfbffffe

0800c900 <_fflush_r>:
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	690b      	ldr	r3, [r1, #16]
 800c904:	4605      	mov	r5, r0
 800c906:	460c      	mov	r4, r1
 800c908:	b913      	cbnz	r3, 800c910 <_fflush_r+0x10>
 800c90a:	2500      	movs	r5, #0
 800c90c:	4628      	mov	r0, r5
 800c90e:	bd38      	pop	{r3, r4, r5, pc}
 800c910:	b118      	cbz	r0, 800c91a <_fflush_r+0x1a>
 800c912:	6a03      	ldr	r3, [r0, #32]
 800c914:	b90b      	cbnz	r3, 800c91a <_fflush_r+0x1a>
 800c916:	f7fd f81f 	bl	8009958 <__sinit>
 800c91a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d0f3      	beq.n	800c90a <_fflush_r+0xa>
 800c922:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c924:	07d0      	lsls	r0, r2, #31
 800c926:	d404      	bmi.n	800c932 <_fflush_r+0x32>
 800c928:	0599      	lsls	r1, r3, #22
 800c92a:	d402      	bmi.n	800c932 <_fflush_r+0x32>
 800c92c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c92e:	f7fd fa2e 	bl	8009d8e <__retarget_lock_acquire_recursive>
 800c932:	4628      	mov	r0, r5
 800c934:	4621      	mov	r1, r4
 800c936:	f7ff ff5f 	bl	800c7f8 <__sflush_r>
 800c93a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c93c:	07da      	lsls	r2, r3, #31
 800c93e:	4605      	mov	r5, r0
 800c940:	d4e4      	bmi.n	800c90c <_fflush_r+0xc>
 800c942:	89a3      	ldrh	r3, [r4, #12]
 800c944:	059b      	lsls	r3, r3, #22
 800c946:	d4e1      	bmi.n	800c90c <_fflush_r+0xc>
 800c948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c94a:	f7fd fa21 	bl	8009d90 <__retarget_lock_release_recursive>
 800c94e:	e7dd      	b.n	800c90c <_fflush_r+0xc>

0800c950 <__swhatbuf_r>:
 800c950:	b570      	push	{r4, r5, r6, lr}
 800c952:	460c      	mov	r4, r1
 800c954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c958:	2900      	cmp	r1, #0
 800c95a:	b096      	sub	sp, #88	@ 0x58
 800c95c:	4615      	mov	r5, r2
 800c95e:	461e      	mov	r6, r3
 800c960:	da0d      	bge.n	800c97e <__swhatbuf_r+0x2e>
 800c962:	89a3      	ldrh	r3, [r4, #12]
 800c964:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c968:	f04f 0100 	mov.w	r1, #0
 800c96c:	bf14      	ite	ne
 800c96e:	2340      	movne	r3, #64	@ 0x40
 800c970:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c974:	2000      	movs	r0, #0
 800c976:	6031      	str	r1, [r6, #0]
 800c978:	602b      	str	r3, [r5, #0]
 800c97a:	b016      	add	sp, #88	@ 0x58
 800c97c:	bd70      	pop	{r4, r5, r6, pc}
 800c97e:	466a      	mov	r2, sp
 800c980:	f000 f874 	bl	800ca6c <_fstat_r>
 800c984:	2800      	cmp	r0, #0
 800c986:	dbec      	blt.n	800c962 <__swhatbuf_r+0x12>
 800c988:	9901      	ldr	r1, [sp, #4]
 800c98a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c98e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c992:	4259      	negs	r1, r3
 800c994:	4159      	adcs	r1, r3
 800c996:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c99a:	e7eb      	b.n	800c974 <__swhatbuf_r+0x24>

0800c99c <__smakebuf_r>:
 800c99c:	898b      	ldrh	r3, [r1, #12]
 800c99e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9a0:	079d      	lsls	r5, r3, #30
 800c9a2:	4606      	mov	r6, r0
 800c9a4:	460c      	mov	r4, r1
 800c9a6:	d507      	bpl.n	800c9b8 <__smakebuf_r+0x1c>
 800c9a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c9ac:	6023      	str	r3, [r4, #0]
 800c9ae:	6123      	str	r3, [r4, #16]
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	6163      	str	r3, [r4, #20]
 800c9b4:	b003      	add	sp, #12
 800c9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9b8:	ab01      	add	r3, sp, #4
 800c9ba:	466a      	mov	r2, sp
 800c9bc:	f7ff ffc8 	bl	800c950 <__swhatbuf_r>
 800c9c0:	9f00      	ldr	r7, [sp, #0]
 800c9c2:	4605      	mov	r5, r0
 800c9c4:	4639      	mov	r1, r7
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	f7fe f8ba 	bl	800ab40 <_malloc_r>
 800c9cc:	b948      	cbnz	r0, 800c9e2 <__smakebuf_r+0x46>
 800c9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9d2:	059a      	lsls	r2, r3, #22
 800c9d4:	d4ee      	bmi.n	800c9b4 <__smakebuf_r+0x18>
 800c9d6:	f023 0303 	bic.w	r3, r3, #3
 800c9da:	f043 0302 	orr.w	r3, r3, #2
 800c9de:	81a3      	strh	r3, [r4, #12]
 800c9e0:	e7e2      	b.n	800c9a8 <__smakebuf_r+0xc>
 800c9e2:	89a3      	ldrh	r3, [r4, #12]
 800c9e4:	6020      	str	r0, [r4, #0]
 800c9e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9ea:	81a3      	strh	r3, [r4, #12]
 800c9ec:	9b01      	ldr	r3, [sp, #4]
 800c9ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c9f2:	b15b      	cbz	r3, 800ca0c <__smakebuf_r+0x70>
 800c9f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9f8:	4630      	mov	r0, r6
 800c9fa:	f000 f849 	bl	800ca90 <_isatty_r>
 800c9fe:	b128      	cbz	r0, 800ca0c <__smakebuf_r+0x70>
 800ca00:	89a3      	ldrh	r3, [r4, #12]
 800ca02:	f023 0303 	bic.w	r3, r3, #3
 800ca06:	f043 0301 	orr.w	r3, r3, #1
 800ca0a:	81a3      	strh	r3, [r4, #12]
 800ca0c:	89a3      	ldrh	r3, [r4, #12]
 800ca0e:	431d      	orrs	r5, r3
 800ca10:	81a5      	strh	r5, [r4, #12]
 800ca12:	e7cf      	b.n	800c9b4 <__smakebuf_r+0x18>

0800ca14 <memmove>:
 800ca14:	4288      	cmp	r0, r1
 800ca16:	b510      	push	{r4, lr}
 800ca18:	eb01 0402 	add.w	r4, r1, r2
 800ca1c:	d902      	bls.n	800ca24 <memmove+0x10>
 800ca1e:	4284      	cmp	r4, r0
 800ca20:	4623      	mov	r3, r4
 800ca22:	d807      	bhi.n	800ca34 <memmove+0x20>
 800ca24:	1e43      	subs	r3, r0, #1
 800ca26:	42a1      	cmp	r1, r4
 800ca28:	d008      	beq.n	800ca3c <memmove+0x28>
 800ca2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca32:	e7f8      	b.n	800ca26 <memmove+0x12>
 800ca34:	4402      	add	r2, r0
 800ca36:	4601      	mov	r1, r0
 800ca38:	428a      	cmp	r2, r1
 800ca3a:	d100      	bne.n	800ca3e <memmove+0x2a>
 800ca3c:	bd10      	pop	{r4, pc}
 800ca3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca46:	e7f7      	b.n	800ca38 <memmove+0x24>

0800ca48 <strncmp>:
 800ca48:	b510      	push	{r4, lr}
 800ca4a:	b16a      	cbz	r2, 800ca68 <strncmp+0x20>
 800ca4c:	3901      	subs	r1, #1
 800ca4e:	1884      	adds	r4, r0, r2
 800ca50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d103      	bne.n	800ca64 <strncmp+0x1c>
 800ca5c:	42a0      	cmp	r0, r4
 800ca5e:	d001      	beq.n	800ca64 <strncmp+0x1c>
 800ca60:	2a00      	cmp	r2, #0
 800ca62:	d1f5      	bne.n	800ca50 <strncmp+0x8>
 800ca64:	1ad0      	subs	r0, r2, r3
 800ca66:	bd10      	pop	{r4, pc}
 800ca68:	4610      	mov	r0, r2
 800ca6a:	e7fc      	b.n	800ca66 <strncmp+0x1e>

0800ca6c <_fstat_r>:
 800ca6c:	b538      	push	{r3, r4, r5, lr}
 800ca6e:	4d07      	ldr	r5, [pc, #28]	@ (800ca8c <_fstat_r+0x20>)
 800ca70:	2300      	movs	r3, #0
 800ca72:	4604      	mov	r4, r0
 800ca74:	4608      	mov	r0, r1
 800ca76:	4611      	mov	r1, r2
 800ca78:	602b      	str	r3, [r5, #0]
 800ca7a:	f7f4 ffdb 	bl	8001a34 <_fstat>
 800ca7e:	1c43      	adds	r3, r0, #1
 800ca80:	d102      	bne.n	800ca88 <_fstat_r+0x1c>
 800ca82:	682b      	ldr	r3, [r5, #0]
 800ca84:	b103      	cbz	r3, 800ca88 <_fstat_r+0x1c>
 800ca86:	6023      	str	r3, [r4, #0]
 800ca88:	bd38      	pop	{r3, r4, r5, pc}
 800ca8a:	bf00      	nop
 800ca8c:	20004744 	.word	0x20004744

0800ca90 <_isatty_r>:
 800ca90:	b538      	push	{r3, r4, r5, lr}
 800ca92:	4d06      	ldr	r5, [pc, #24]	@ (800caac <_isatty_r+0x1c>)
 800ca94:	2300      	movs	r3, #0
 800ca96:	4604      	mov	r4, r0
 800ca98:	4608      	mov	r0, r1
 800ca9a:	602b      	str	r3, [r5, #0]
 800ca9c:	f7f4 ffda 	bl	8001a54 <_isatty>
 800caa0:	1c43      	adds	r3, r0, #1
 800caa2:	d102      	bne.n	800caaa <_isatty_r+0x1a>
 800caa4:	682b      	ldr	r3, [r5, #0]
 800caa6:	b103      	cbz	r3, 800caaa <_isatty_r+0x1a>
 800caa8:	6023      	str	r3, [r4, #0]
 800caaa:	bd38      	pop	{r3, r4, r5, pc}
 800caac:	20004744 	.word	0x20004744

0800cab0 <_sbrk_r>:
 800cab0:	b538      	push	{r3, r4, r5, lr}
 800cab2:	4d06      	ldr	r5, [pc, #24]	@ (800cacc <_sbrk_r+0x1c>)
 800cab4:	2300      	movs	r3, #0
 800cab6:	4604      	mov	r4, r0
 800cab8:	4608      	mov	r0, r1
 800caba:	602b      	str	r3, [r5, #0]
 800cabc:	f7f4 ffe2 	bl	8001a84 <_sbrk>
 800cac0:	1c43      	adds	r3, r0, #1
 800cac2:	d102      	bne.n	800caca <_sbrk_r+0x1a>
 800cac4:	682b      	ldr	r3, [r5, #0]
 800cac6:	b103      	cbz	r3, 800caca <_sbrk_r+0x1a>
 800cac8:	6023      	str	r3, [r4, #0]
 800caca:	bd38      	pop	{r3, r4, r5, pc}
 800cacc:	20004744 	.word	0x20004744

0800cad0 <nan>:
 800cad0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cad8 <nan+0x8>
 800cad4:	4770      	bx	lr
 800cad6:	bf00      	nop
 800cad8:	00000000 	.word	0x00000000
 800cadc:	7ff80000 	.word	0x7ff80000

0800cae0 <__assert_func>:
 800cae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cae2:	4614      	mov	r4, r2
 800cae4:	461a      	mov	r2, r3
 800cae6:	4b09      	ldr	r3, [pc, #36]	@ (800cb0c <__assert_func+0x2c>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4605      	mov	r5, r0
 800caec:	68d8      	ldr	r0, [r3, #12]
 800caee:	b954      	cbnz	r4, 800cb06 <__assert_func+0x26>
 800caf0:	4b07      	ldr	r3, [pc, #28]	@ (800cb10 <__assert_func+0x30>)
 800caf2:	461c      	mov	r4, r3
 800caf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800caf8:	9100      	str	r1, [sp, #0]
 800cafa:	462b      	mov	r3, r5
 800cafc:	4905      	ldr	r1, [pc, #20]	@ (800cb14 <__assert_func+0x34>)
 800cafe:	f000 fba7 	bl	800d250 <fiprintf>
 800cb02:	f000 fbb7 	bl	800d274 <abort>
 800cb06:	4b04      	ldr	r3, [pc, #16]	@ (800cb18 <__assert_func+0x38>)
 800cb08:	e7f4      	b.n	800caf4 <__assert_func+0x14>
 800cb0a:	bf00      	nop
 800cb0c:	2000001c 	.word	0x2000001c
 800cb10:	0800d87d 	.word	0x0800d87d
 800cb14:	0800d84f 	.word	0x0800d84f
 800cb18:	0800d842 	.word	0x0800d842

0800cb1c <_calloc_r>:
 800cb1c:	b570      	push	{r4, r5, r6, lr}
 800cb1e:	fba1 5402 	umull	r5, r4, r1, r2
 800cb22:	b93c      	cbnz	r4, 800cb34 <_calloc_r+0x18>
 800cb24:	4629      	mov	r1, r5
 800cb26:	f7fe f80b 	bl	800ab40 <_malloc_r>
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	b928      	cbnz	r0, 800cb3a <_calloc_r+0x1e>
 800cb2e:	2600      	movs	r6, #0
 800cb30:	4630      	mov	r0, r6
 800cb32:	bd70      	pop	{r4, r5, r6, pc}
 800cb34:	220c      	movs	r2, #12
 800cb36:	6002      	str	r2, [r0, #0]
 800cb38:	e7f9      	b.n	800cb2e <_calloc_r+0x12>
 800cb3a:	462a      	mov	r2, r5
 800cb3c:	4621      	mov	r1, r4
 800cb3e:	f7fd f8a9 	bl	8009c94 <memset>
 800cb42:	e7f5      	b.n	800cb30 <_calloc_r+0x14>

0800cb44 <rshift>:
 800cb44:	6903      	ldr	r3, [r0, #16]
 800cb46:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cb4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb4e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cb52:	f100 0414 	add.w	r4, r0, #20
 800cb56:	dd45      	ble.n	800cbe4 <rshift+0xa0>
 800cb58:	f011 011f 	ands.w	r1, r1, #31
 800cb5c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cb60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cb64:	d10c      	bne.n	800cb80 <rshift+0x3c>
 800cb66:	f100 0710 	add.w	r7, r0, #16
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	42b1      	cmp	r1, r6
 800cb6e:	d334      	bcc.n	800cbda <rshift+0x96>
 800cb70:	1a9b      	subs	r3, r3, r2
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	1eea      	subs	r2, r5, #3
 800cb76:	4296      	cmp	r6, r2
 800cb78:	bf38      	it	cc
 800cb7a:	2300      	movcc	r3, #0
 800cb7c:	4423      	add	r3, r4
 800cb7e:	e015      	b.n	800cbac <rshift+0x68>
 800cb80:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cb84:	f1c1 0820 	rsb	r8, r1, #32
 800cb88:	40cf      	lsrs	r7, r1
 800cb8a:	f105 0e04 	add.w	lr, r5, #4
 800cb8e:	46a1      	mov	r9, r4
 800cb90:	4576      	cmp	r6, lr
 800cb92:	46f4      	mov	ip, lr
 800cb94:	d815      	bhi.n	800cbc2 <rshift+0x7e>
 800cb96:	1a9a      	subs	r2, r3, r2
 800cb98:	0092      	lsls	r2, r2, #2
 800cb9a:	3a04      	subs	r2, #4
 800cb9c:	3501      	adds	r5, #1
 800cb9e:	42ae      	cmp	r6, r5
 800cba0:	bf38      	it	cc
 800cba2:	2200      	movcc	r2, #0
 800cba4:	18a3      	adds	r3, r4, r2
 800cba6:	50a7      	str	r7, [r4, r2]
 800cba8:	b107      	cbz	r7, 800cbac <rshift+0x68>
 800cbaa:	3304      	adds	r3, #4
 800cbac:	1b1a      	subs	r2, r3, r4
 800cbae:	42a3      	cmp	r3, r4
 800cbb0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cbb4:	bf08      	it	eq
 800cbb6:	2300      	moveq	r3, #0
 800cbb8:	6102      	str	r2, [r0, #16]
 800cbba:	bf08      	it	eq
 800cbbc:	6143      	streq	r3, [r0, #20]
 800cbbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbc2:	f8dc c000 	ldr.w	ip, [ip]
 800cbc6:	fa0c fc08 	lsl.w	ip, ip, r8
 800cbca:	ea4c 0707 	orr.w	r7, ip, r7
 800cbce:	f849 7b04 	str.w	r7, [r9], #4
 800cbd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cbd6:	40cf      	lsrs	r7, r1
 800cbd8:	e7da      	b.n	800cb90 <rshift+0x4c>
 800cbda:	f851 cb04 	ldr.w	ip, [r1], #4
 800cbde:	f847 cf04 	str.w	ip, [r7, #4]!
 800cbe2:	e7c3      	b.n	800cb6c <rshift+0x28>
 800cbe4:	4623      	mov	r3, r4
 800cbe6:	e7e1      	b.n	800cbac <rshift+0x68>

0800cbe8 <__hexdig_fun>:
 800cbe8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cbec:	2b09      	cmp	r3, #9
 800cbee:	d802      	bhi.n	800cbf6 <__hexdig_fun+0xe>
 800cbf0:	3820      	subs	r0, #32
 800cbf2:	b2c0      	uxtb	r0, r0
 800cbf4:	4770      	bx	lr
 800cbf6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cbfa:	2b05      	cmp	r3, #5
 800cbfc:	d801      	bhi.n	800cc02 <__hexdig_fun+0x1a>
 800cbfe:	3847      	subs	r0, #71	@ 0x47
 800cc00:	e7f7      	b.n	800cbf2 <__hexdig_fun+0xa>
 800cc02:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cc06:	2b05      	cmp	r3, #5
 800cc08:	d801      	bhi.n	800cc0e <__hexdig_fun+0x26>
 800cc0a:	3827      	subs	r0, #39	@ 0x27
 800cc0c:	e7f1      	b.n	800cbf2 <__hexdig_fun+0xa>
 800cc0e:	2000      	movs	r0, #0
 800cc10:	4770      	bx	lr
	...

0800cc14 <__gethex>:
 800cc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc18:	b085      	sub	sp, #20
 800cc1a:	468a      	mov	sl, r1
 800cc1c:	9302      	str	r3, [sp, #8]
 800cc1e:	680b      	ldr	r3, [r1, #0]
 800cc20:	9001      	str	r0, [sp, #4]
 800cc22:	4690      	mov	r8, r2
 800cc24:	1c9c      	adds	r4, r3, #2
 800cc26:	46a1      	mov	r9, r4
 800cc28:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cc2c:	2830      	cmp	r0, #48	@ 0x30
 800cc2e:	d0fa      	beq.n	800cc26 <__gethex+0x12>
 800cc30:	eba9 0303 	sub.w	r3, r9, r3
 800cc34:	f1a3 0b02 	sub.w	fp, r3, #2
 800cc38:	f7ff ffd6 	bl	800cbe8 <__hexdig_fun>
 800cc3c:	4605      	mov	r5, r0
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d168      	bne.n	800cd14 <__gethex+0x100>
 800cc42:	49a0      	ldr	r1, [pc, #640]	@ (800cec4 <__gethex+0x2b0>)
 800cc44:	2201      	movs	r2, #1
 800cc46:	4648      	mov	r0, r9
 800cc48:	f7ff fefe 	bl	800ca48 <strncmp>
 800cc4c:	4607      	mov	r7, r0
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	d167      	bne.n	800cd22 <__gethex+0x10e>
 800cc52:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cc56:	4626      	mov	r6, r4
 800cc58:	f7ff ffc6 	bl	800cbe8 <__hexdig_fun>
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	d062      	beq.n	800cd26 <__gethex+0x112>
 800cc60:	4623      	mov	r3, r4
 800cc62:	7818      	ldrb	r0, [r3, #0]
 800cc64:	2830      	cmp	r0, #48	@ 0x30
 800cc66:	4699      	mov	r9, r3
 800cc68:	f103 0301 	add.w	r3, r3, #1
 800cc6c:	d0f9      	beq.n	800cc62 <__gethex+0x4e>
 800cc6e:	f7ff ffbb 	bl	800cbe8 <__hexdig_fun>
 800cc72:	fab0 f580 	clz	r5, r0
 800cc76:	096d      	lsrs	r5, r5, #5
 800cc78:	f04f 0b01 	mov.w	fp, #1
 800cc7c:	464a      	mov	r2, r9
 800cc7e:	4616      	mov	r6, r2
 800cc80:	3201      	adds	r2, #1
 800cc82:	7830      	ldrb	r0, [r6, #0]
 800cc84:	f7ff ffb0 	bl	800cbe8 <__hexdig_fun>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	d1f8      	bne.n	800cc7e <__gethex+0x6a>
 800cc8c:	498d      	ldr	r1, [pc, #564]	@ (800cec4 <__gethex+0x2b0>)
 800cc8e:	2201      	movs	r2, #1
 800cc90:	4630      	mov	r0, r6
 800cc92:	f7ff fed9 	bl	800ca48 <strncmp>
 800cc96:	2800      	cmp	r0, #0
 800cc98:	d13f      	bne.n	800cd1a <__gethex+0x106>
 800cc9a:	b944      	cbnz	r4, 800ccae <__gethex+0x9a>
 800cc9c:	1c74      	adds	r4, r6, #1
 800cc9e:	4622      	mov	r2, r4
 800cca0:	4616      	mov	r6, r2
 800cca2:	3201      	adds	r2, #1
 800cca4:	7830      	ldrb	r0, [r6, #0]
 800cca6:	f7ff ff9f 	bl	800cbe8 <__hexdig_fun>
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	d1f8      	bne.n	800cca0 <__gethex+0x8c>
 800ccae:	1ba4      	subs	r4, r4, r6
 800ccb0:	00a7      	lsls	r7, r4, #2
 800ccb2:	7833      	ldrb	r3, [r6, #0]
 800ccb4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ccb8:	2b50      	cmp	r3, #80	@ 0x50
 800ccba:	d13e      	bne.n	800cd3a <__gethex+0x126>
 800ccbc:	7873      	ldrb	r3, [r6, #1]
 800ccbe:	2b2b      	cmp	r3, #43	@ 0x2b
 800ccc0:	d033      	beq.n	800cd2a <__gethex+0x116>
 800ccc2:	2b2d      	cmp	r3, #45	@ 0x2d
 800ccc4:	d034      	beq.n	800cd30 <__gethex+0x11c>
 800ccc6:	1c71      	adds	r1, r6, #1
 800ccc8:	2400      	movs	r4, #0
 800ccca:	7808      	ldrb	r0, [r1, #0]
 800cccc:	f7ff ff8c 	bl	800cbe8 <__hexdig_fun>
 800ccd0:	1e43      	subs	r3, r0, #1
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	2b18      	cmp	r3, #24
 800ccd6:	d830      	bhi.n	800cd3a <__gethex+0x126>
 800ccd8:	f1a0 0210 	sub.w	r2, r0, #16
 800ccdc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cce0:	f7ff ff82 	bl	800cbe8 <__hexdig_fun>
 800cce4:	f100 3cff 	add.w	ip, r0, #4294967295
 800cce8:	fa5f fc8c 	uxtb.w	ip, ip
 800ccec:	f1bc 0f18 	cmp.w	ip, #24
 800ccf0:	f04f 030a 	mov.w	r3, #10
 800ccf4:	d91e      	bls.n	800cd34 <__gethex+0x120>
 800ccf6:	b104      	cbz	r4, 800ccfa <__gethex+0xe6>
 800ccf8:	4252      	negs	r2, r2
 800ccfa:	4417      	add	r7, r2
 800ccfc:	f8ca 1000 	str.w	r1, [sl]
 800cd00:	b1ed      	cbz	r5, 800cd3e <__gethex+0x12a>
 800cd02:	f1bb 0f00 	cmp.w	fp, #0
 800cd06:	bf0c      	ite	eq
 800cd08:	2506      	moveq	r5, #6
 800cd0a:	2500      	movne	r5, #0
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	b005      	add	sp, #20
 800cd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd14:	2500      	movs	r5, #0
 800cd16:	462c      	mov	r4, r5
 800cd18:	e7b0      	b.n	800cc7c <__gethex+0x68>
 800cd1a:	2c00      	cmp	r4, #0
 800cd1c:	d1c7      	bne.n	800ccae <__gethex+0x9a>
 800cd1e:	4627      	mov	r7, r4
 800cd20:	e7c7      	b.n	800ccb2 <__gethex+0x9e>
 800cd22:	464e      	mov	r6, r9
 800cd24:	462f      	mov	r7, r5
 800cd26:	2501      	movs	r5, #1
 800cd28:	e7c3      	b.n	800ccb2 <__gethex+0x9e>
 800cd2a:	2400      	movs	r4, #0
 800cd2c:	1cb1      	adds	r1, r6, #2
 800cd2e:	e7cc      	b.n	800ccca <__gethex+0xb6>
 800cd30:	2401      	movs	r4, #1
 800cd32:	e7fb      	b.n	800cd2c <__gethex+0x118>
 800cd34:	fb03 0002 	mla	r0, r3, r2, r0
 800cd38:	e7ce      	b.n	800ccd8 <__gethex+0xc4>
 800cd3a:	4631      	mov	r1, r6
 800cd3c:	e7de      	b.n	800ccfc <__gethex+0xe8>
 800cd3e:	eba6 0309 	sub.w	r3, r6, r9
 800cd42:	3b01      	subs	r3, #1
 800cd44:	4629      	mov	r1, r5
 800cd46:	2b07      	cmp	r3, #7
 800cd48:	dc0a      	bgt.n	800cd60 <__gethex+0x14c>
 800cd4a:	9801      	ldr	r0, [sp, #4]
 800cd4c:	f7fd ff84 	bl	800ac58 <_Balloc>
 800cd50:	4604      	mov	r4, r0
 800cd52:	b940      	cbnz	r0, 800cd66 <__gethex+0x152>
 800cd54:	4b5c      	ldr	r3, [pc, #368]	@ (800cec8 <__gethex+0x2b4>)
 800cd56:	4602      	mov	r2, r0
 800cd58:	21e4      	movs	r1, #228	@ 0xe4
 800cd5a:	485c      	ldr	r0, [pc, #368]	@ (800cecc <__gethex+0x2b8>)
 800cd5c:	f7ff fec0 	bl	800cae0 <__assert_func>
 800cd60:	3101      	adds	r1, #1
 800cd62:	105b      	asrs	r3, r3, #1
 800cd64:	e7ef      	b.n	800cd46 <__gethex+0x132>
 800cd66:	f100 0a14 	add.w	sl, r0, #20
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	4655      	mov	r5, sl
 800cd6e:	469b      	mov	fp, r3
 800cd70:	45b1      	cmp	r9, r6
 800cd72:	d337      	bcc.n	800cde4 <__gethex+0x1d0>
 800cd74:	f845 bb04 	str.w	fp, [r5], #4
 800cd78:	eba5 050a 	sub.w	r5, r5, sl
 800cd7c:	10ad      	asrs	r5, r5, #2
 800cd7e:	6125      	str	r5, [r4, #16]
 800cd80:	4658      	mov	r0, fp
 800cd82:	f7fe f85b 	bl	800ae3c <__hi0bits>
 800cd86:	016d      	lsls	r5, r5, #5
 800cd88:	f8d8 6000 	ldr.w	r6, [r8]
 800cd8c:	1a2d      	subs	r5, r5, r0
 800cd8e:	42b5      	cmp	r5, r6
 800cd90:	dd54      	ble.n	800ce3c <__gethex+0x228>
 800cd92:	1bad      	subs	r5, r5, r6
 800cd94:	4629      	mov	r1, r5
 800cd96:	4620      	mov	r0, r4
 800cd98:	f7fe fbef 	bl	800b57a <__any_on>
 800cd9c:	4681      	mov	r9, r0
 800cd9e:	b178      	cbz	r0, 800cdc0 <__gethex+0x1ac>
 800cda0:	1e6b      	subs	r3, r5, #1
 800cda2:	1159      	asrs	r1, r3, #5
 800cda4:	f003 021f 	and.w	r2, r3, #31
 800cda8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cdac:	f04f 0901 	mov.w	r9, #1
 800cdb0:	fa09 f202 	lsl.w	r2, r9, r2
 800cdb4:	420a      	tst	r2, r1
 800cdb6:	d003      	beq.n	800cdc0 <__gethex+0x1ac>
 800cdb8:	454b      	cmp	r3, r9
 800cdba:	dc36      	bgt.n	800ce2a <__gethex+0x216>
 800cdbc:	f04f 0902 	mov.w	r9, #2
 800cdc0:	4629      	mov	r1, r5
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	f7ff febe 	bl	800cb44 <rshift>
 800cdc8:	442f      	add	r7, r5
 800cdca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cdce:	42bb      	cmp	r3, r7
 800cdd0:	da42      	bge.n	800ce58 <__gethex+0x244>
 800cdd2:	9801      	ldr	r0, [sp, #4]
 800cdd4:	4621      	mov	r1, r4
 800cdd6:	f7fd ff7f 	bl	800acd8 <_Bfree>
 800cdda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cddc:	2300      	movs	r3, #0
 800cdde:	6013      	str	r3, [r2, #0]
 800cde0:	25a3      	movs	r5, #163	@ 0xa3
 800cde2:	e793      	b.n	800cd0c <__gethex+0xf8>
 800cde4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cde8:	2a2e      	cmp	r2, #46	@ 0x2e
 800cdea:	d012      	beq.n	800ce12 <__gethex+0x1fe>
 800cdec:	2b20      	cmp	r3, #32
 800cdee:	d104      	bne.n	800cdfa <__gethex+0x1e6>
 800cdf0:	f845 bb04 	str.w	fp, [r5], #4
 800cdf4:	f04f 0b00 	mov.w	fp, #0
 800cdf8:	465b      	mov	r3, fp
 800cdfa:	7830      	ldrb	r0, [r6, #0]
 800cdfc:	9303      	str	r3, [sp, #12]
 800cdfe:	f7ff fef3 	bl	800cbe8 <__hexdig_fun>
 800ce02:	9b03      	ldr	r3, [sp, #12]
 800ce04:	f000 000f 	and.w	r0, r0, #15
 800ce08:	4098      	lsls	r0, r3
 800ce0a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ce0e:	3304      	adds	r3, #4
 800ce10:	e7ae      	b.n	800cd70 <__gethex+0x15c>
 800ce12:	45b1      	cmp	r9, r6
 800ce14:	d8ea      	bhi.n	800cdec <__gethex+0x1d8>
 800ce16:	492b      	ldr	r1, [pc, #172]	@ (800cec4 <__gethex+0x2b0>)
 800ce18:	9303      	str	r3, [sp, #12]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	f7ff fe13 	bl	800ca48 <strncmp>
 800ce22:	9b03      	ldr	r3, [sp, #12]
 800ce24:	2800      	cmp	r0, #0
 800ce26:	d1e1      	bne.n	800cdec <__gethex+0x1d8>
 800ce28:	e7a2      	b.n	800cd70 <__gethex+0x15c>
 800ce2a:	1ea9      	subs	r1, r5, #2
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	f7fe fba4 	bl	800b57a <__any_on>
 800ce32:	2800      	cmp	r0, #0
 800ce34:	d0c2      	beq.n	800cdbc <__gethex+0x1a8>
 800ce36:	f04f 0903 	mov.w	r9, #3
 800ce3a:	e7c1      	b.n	800cdc0 <__gethex+0x1ac>
 800ce3c:	da09      	bge.n	800ce52 <__gethex+0x23e>
 800ce3e:	1b75      	subs	r5, r6, r5
 800ce40:	4621      	mov	r1, r4
 800ce42:	9801      	ldr	r0, [sp, #4]
 800ce44:	462a      	mov	r2, r5
 800ce46:	f7fe f95f 	bl	800b108 <__lshift>
 800ce4a:	1b7f      	subs	r7, r7, r5
 800ce4c:	4604      	mov	r4, r0
 800ce4e:	f100 0a14 	add.w	sl, r0, #20
 800ce52:	f04f 0900 	mov.w	r9, #0
 800ce56:	e7b8      	b.n	800cdca <__gethex+0x1b6>
 800ce58:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ce5c:	42bd      	cmp	r5, r7
 800ce5e:	dd6f      	ble.n	800cf40 <__gethex+0x32c>
 800ce60:	1bed      	subs	r5, r5, r7
 800ce62:	42ae      	cmp	r6, r5
 800ce64:	dc34      	bgt.n	800ced0 <__gethex+0x2bc>
 800ce66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce6a:	2b02      	cmp	r3, #2
 800ce6c:	d022      	beq.n	800ceb4 <__gethex+0x2a0>
 800ce6e:	2b03      	cmp	r3, #3
 800ce70:	d024      	beq.n	800cebc <__gethex+0x2a8>
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d115      	bne.n	800cea2 <__gethex+0x28e>
 800ce76:	42ae      	cmp	r6, r5
 800ce78:	d113      	bne.n	800cea2 <__gethex+0x28e>
 800ce7a:	2e01      	cmp	r6, #1
 800ce7c:	d10b      	bne.n	800ce96 <__gethex+0x282>
 800ce7e:	9a02      	ldr	r2, [sp, #8]
 800ce80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ce84:	6013      	str	r3, [r2, #0]
 800ce86:	2301      	movs	r3, #1
 800ce88:	6123      	str	r3, [r4, #16]
 800ce8a:	f8ca 3000 	str.w	r3, [sl]
 800ce8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce90:	2562      	movs	r5, #98	@ 0x62
 800ce92:	601c      	str	r4, [r3, #0]
 800ce94:	e73a      	b.n	800cd0c <__gethex+0xf8>
 800ce96:	1e71      	subs	r1, r6, #1
 800ce98:	4620      	mov	r0, r4
 800ce9a:	f7fe fb6e 	bl	800b57a <__any_on>
 800ce9e:	2800      	cmp	r0, #0
 800cea0:	d1ed      	bne.n	800ce7e <__gethex+0x26a>
 800cea2:	9801      	ldr	r0, [sp, #4]
 800cea4:	4621      	mov	r1, r4
 800cea6:	f7fd ff17 	bl	800acd8 <_Bfree>
 800ceaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ceac:	2300      	movs	r3, #0
 800ceae:	6013      	str	r3, [r2, #0]
 800ceb0:	2550      	movs	r5, #80	@ 0x50
 800ceb2:	e72b      	b.n	800cd0c <__gethex+0xf8>
 800ceb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d1f3      	bne.n	800cea2 <__gethex+0x28e>
 800ceba:	e7e0      	b.n	800ce7e <__gethex+0x26a>
 800cebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d1dd      	bne.n	800ce7e <__gethex+0x26a>
 800cec2:	e7ee      	b.n	800cea2 <__gethex+0x28e>
 800cec4:	0800d6d0 	.word	0x0800d6d0
 800cec8:	0800d569 	.word	0x0800d569
 800cecc:	0800d87e 	.word	0x0800d87e
 800ced0:	1e6f      	subs	r7, r5, #1
 800ced2:	f1b9 0f00 	cmp.w	r9, #0
 800ced6:	d130      	bne.n	800cf3a <__gethex+0x326>
 800ced8:	b127      	cbz	r7, 800cee4 <__gethex+0x2d0>
 800ceda:	4639      	mov	r1, r7
 800cedc:	4620      	mov	r0, r4
 800cede:	f7fe fb4c 	bl	800b57a <__any_on>
 800cee2:	4681      	mov	r9, r0
 800cee4:	117a      	asrs	r2, r7, #5
 800cee6:	2301      	movs	r3, #1
 800cee8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ceec:	f007 071f 	and.w	r7, r7, #31
 800cef0:	40bb      	lsls	r3, r7
 800cef2:	4213      	tst	r3, r2
 800cef4:	4629      	mov	r1, r5
 800cef6:	4620      	mov	r0, r4
 800cef8:	bf18      	it	ne
 800cefa:	f049 0902 	orrne.w	r9, r9, #2
 800cefe:	f7ff fe21 	bl	800cb44 <rshift>
 800cf02:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cf06:	1b76      	subs	r6, r6, r5
 800cf08:	2502      	movs	r5, #2
 800cf0a:	f1b9 0f00 	cmp.w	r9, #0
 800cf0e:	d047      	beq.n	800cfa0 <__gethex+0x38c>
 800cf10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cf14:	2b02      	cmp	r3, #2
 800cf16:	d015      	beq.n	800cf44 <__gethex+0x330>
 800cf18:	2b03      	cmp	r3, #3
 800cf1a:	d017      	beq.n	800cf4c <__gethex+0x338>
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d109      	bne.n	800cf34 <__gethex+0x320>
 800cf20:	f019 0f02 	tst.w	r9, #2
 800cf24:	d006      	beq.n	800cf34 <__gethex+0x320>
 800cf26:	f8da 3000 	ldr.w	r3, [sl]
 800cf2a:	ea49 0903 	orr.w	r9, r9, r3
 800cf2e:	f019 0f01 	tst.w	r9, #1
 800cf32:	d10e      	bne.n	800cf52 <__gethex+0x33e>
 800cf34:	f045 0510 	orr.w	r5, r5, #16
 800cf38:	e032      	b.n	800cfa0 <__gethex+0x38c>
 800cf3a:	f04f 0901 	mov.w	r9, #1
 800cf3e:	e7d1      	b.n	800cee4 <__gethex+0x2d0>
 800cf40:	2501      	movs	r5, #1
 800cf42:	e7e2      	b.n	800cf0a <__gethex+0x2f6>
 800cf44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf46:	f1c3 0301 	rsb	r3, r3, #1
 800cf4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cf4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d0f0      	beq.n	800cf34 <__gethex+0x320>
 800cf52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cf56:	f104 0314 	add.w	r3, r4, #20
 800cf5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cf5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cf62:	f04f 0c00 	mov.w	ip, #0
 800cf66:	4618      	mov	r0, r3
 800cf68:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cf70:	d01b      	beq.n	800cfaa <__gethex+0x396>
 800cf72:	3201      	adds	r2, #1
 800cf74:	6002      	str	r2, [r0, #0]
 800cf76:	2d02      	cmp	r5, #2
 800cf78:	f104 0314 	add.w	r3, r4, #20
 800cf7c:	d13c      	bne.n	800cff8 <__gethex+0x3e4>
 800cf7e:	f8d8 2000 	ldr.w	r2, [r8]
 800cf82:	3a01      	subs	r2, #1
 800cf84:	42b2      	cmp	r2, r6
 800cf86:	d109      	bne.n	800cf9c <__gethex+0x388>
 800cf88:	1171      	asrs	r1, r6, #5
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cf90:	f006 061f 	and.w	r6, r6, #31
 800cf94:	fa02 f606 	lsl.w	r6, r2, r6
 800cf98:	421e      	tst	r6, r3
 800cf9a:	d13a      	bne.n	800d012 <__gethex+0x3fe>
 800cf9c:	f045 0520 	orr.w	r5, r5, #32
 800cfa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfa2:	601c      	str	r4, [r3, #0]
 800cfa4:	9b02      	ldr	r3, [sp, #8]
 800cfa6:	601f      	str	r7, [r3, #0]
 800cfa8:	e6b0      	b.n	800cd0c <__gethex+0xf8>
 800cfaa:	4299      	cmp	r1, r3
 800cfac:	f843 cc04 	str.w	ip, [r3, #-4]
 800cfb0:	d8d9      	bhi.n	800cf66 <__gethex+0x352>
 800cfb2:	68a3      	ldr	r3, [r4, #8]
 800cfb4:	459b      	cmp	fp, r3
 800cfb6:	db17      	blt.n	800cfe8 <__gethex+0x3d4>
 800cfb8:	6861      	ldr	r1, [r4, #4]
 800cfba:	9801      	ldr	r0, [sp, #4]
 800cfbc:	3101      	adds	r1, #1
 800cfbe:	f7fd fe4b 	bl	800ac58 <_Balloc>
 800cfc2:	4681      	mov	r9, r0
 800cfc4:	b918      	cbnz	r0, 800cfce <__gethex+0x3ba>
 800cfc6:	4b1a      	ldr	r3, [pc, #104]	@ (800d030 <__gethex+0x41c>)
 800cfc8:	4602      	mov	r2, r0
 800cfca:	2184      	movs	r1, #132	@ 0x84
 800cfcc:	e6c5      	b.n	800cd5a <__gethex+0x146>
 800cfce:	6922      	ldr	r2, [r4, #16]
 800cfd0:	3202      	adds	r2, #2
 800cfd2:	f104 010c 	add.w	r1, r4, #12
 800cfd6:	0092      	lsls	r2, r2, #2
 800cfd8:	300c      	adds	r0, #12
 800cfda:	f7fc feda 	bl	8009d92 <memcpy>
 800cfde:	4621      	mov	r1, r4
 800cfe0:	9801      	ldr	r0, [sp, #4]
 800cfe2:	f7fd fe79 	bl	800acd8 <_Bfree>
 800cfe6:	464c      	mov	r4, r9
 800cfe8:	6923      	ldr	r3, [r4, #16]
 800cfea:	1c5a      	adds	r2, r3, #1
 800cfec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cff0:	6122      	str	r2, [r4, #16]
 800cff2:	2201      	movs	r2, #1
 800cff4:	615a      	str	r2, [r3, #20]
 800cff6:	e7be      	b.n	800cf76 <__gethex+0x362>
 800cff8:	6922      	ldr	r2, [r4, #16]
 800cffa:	455a      	cmp	r2, fp
 800cffc:	dd0b      	ble.n	800d016 <__gethex+0x402>
 800cffe:	2101      	movs	r1, #1
 800d000:	4620      	mov	r0, r4
 800d002:	f7ff fd9f 	bl	800cb44 <rshift>
 800d006:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d00a:	3701      	adds	r7, #1
 800d00c:	42bb      	cmp	r3, r7
 800d00e:	f6ff aee0 	blt.w	800cdd2 <__gethex+0x1be>
 800d012:	2501      	movs	r5, #1
 800d014:	e7c2      	b.n	800cf9c <__gethex+0x388>
 800d016:	f016 061f 	ands.w	r6, r6, #31
 800d01a:	d0fa      	beq.n	800d012 <__gethex+0x3fe>
 800d01c:	4453      	add	r3, sl
 800d01e:	f1c6 0620 	rsb	r6, r6, #32
 800d022:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d026:	f7fd ff09 	bl	800ae3c <__hi0bits>
 800d02a:	42b0      	cmp	r0, r6
 800d02c:	dbe7      	blt.n	800cffe <__gethex+0x3ea>
 800d02e:	e7f0      	b.n	800d012 <__gethex+0x3fe>
 800d030:	0800d569 	.word	0x0800d569

0800d034 <L_shift>:
 800d034:	f1c2 0208 	rsb	r2, r2, #8
 800d038:	0092      	lsls	r2, r2, #2
 800d03a:	b570      	push	{r4, r5, r6, lr}
 800d03c:	f1c2 0620 	rsb	r6, r2, #32
 800d040:	6843      	ldr	r3, [r0, #4]
 800d042:	6804      	ldr	r4, [r0, #0]
 800d044:	fa03 f506 	lsl.w	r5, r3, r6
 800d048:	432c      	orrs	r4, r5
 800d04a:	40d3      	lsrs	r3, r2
 800d04c:	6004      	str	r4, [r0, #0]
 800d04e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d052:	4288      	cmp	r0, r1
 800d054:	d3f4      	bcc.n	800d040 <L_shift+0xc>
 800d056:	bd70      	pop	{r4, r5, r6, pc}

0800d058 <__match>:
 800d058:	b530      	push	{r4, r5, lr}
 800d05a:	6803      	ldr	r3, [r0, #0]
 800d05c:	3301      	adds	r3, #1
 800d05e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d062:	b914      	cbnz	r4, 800d06a <__match+0x12>
 800d064:	6003      	str	r3, [r0, #0]
 800d066:	2001      	movs	r0, #1
 800d068:	bd30      	pop	{r4, r5, pc}
 800d06a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d06e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d072:	2d19      	cmp	r5, #25
 800d074:	bf98      	it	ls
 800d076:	3220      	addls	r2, #32
 800d078:	42a2      	cmp	r2, r4
 800d07a:	d0f0      	beq.n	800d05e <__match+0x6>
 800d07c:	2000      	movs	r0, #0
 800d07e:	e7f3      	b.n	800d068 <__match+0x10>

0800d080 <__hexnan>:
 800d080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d084:	680b      	ldr	r3, [r1, #0]
 800d086:	6801      	ldr	r1, [r0, #0]
 800d088:	115e      	asrs	r6, r3, #5
 800d08a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d08e:	f013 031f 	ands.w	r3, r3, #31
 800d092:	b087      	sub	sp, #28
 800d094:	bf18      	it	ne
 800d096:	3604      	addne	r6, #4
 800d098:	2500      	movs	r5, #0
 800d09a:	1f37      	subs	r7, r6, #4
 800d09c:	4682      	mov	sl, r0
 800d09e:	4690      	mov	r8, r2
 800d0a0:	9301      	str	r3, [sp, #4]
 800d0a2:	f846 5c04 	str.w	r5, [r6, #-4]
 800d0a6:	46b9      	mov	r9, r7
 800d0a8:	463c      	mov	r4, r7
 800d0aa:	9502      	str	r5, [sp, #8]
 800d0ac:	46ab      	mov	fp, r5
 800d0ae:	784a      	ldrb	r2, [r1, #1]
 800d0b0:	1c4b      	adds	r3, r1, #1
 800d0b2:	9303      	str	r3, [sp, #12]
 800d0b4:	b342      	cbz	r2, 800d108 <__hexnan+0x88>
 800d0b6:	4610      	mov	r0, r2
 800d0b8:	9105      	str	r1, [sp, #20]
 800d0ba:	9204      	str	r2, [sp, #16]
 800d0bc:	f7ff fd94 	bl	800cbe8 <__hexdig_fun>
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	d151      	bne.n	800d168 <__hexnan+0xe8>
 800d0c4:	9a04      	ldr	r2, [sp, #16]
 800d0c6:	9905      	ldr	r1, [sp, #20]
 800d0c8:	2a20      	cmp	r2, #32
 800d0ca:	d818      	bhi.n	800d0fe <__hexnan+0x7e>
 800d0cc:	9b02      	ldr	r3, [sp, #8]
 800d0ce:	459b      	cmp	fp, r3
 800d0d0:	dd13      	ble.n	800d0fa <__hexnan+0x7a>
 800d0d2:	454c      	cmp	r4, r9
 800d0d4:	d206      	bcs.n	800d0e4 <__hexnan+0x64>
 800d0d6:	2d07      	cmp	r5, #7
 800d0d8:	dc04      	bgt.n	800d0e4 <__hexnan+0x64>
 800d0da:	462a      	mov	r2, r5
 800d0dc:	4649      	mov	r1, r9
 800d0de:	4620      	mov	r0, r4
 800d0e0:	f7ff ffa8 	bl	800d034 <L_shift>
 800d0e4:	4544      	cmp	r4, r8
 800d0e6:	d952      	bls.n	800d18e <__hexnan+0x10e>
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	f1a4 0904 	sub.w	r9, r4, #4
 800d0ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800d0f2:	f8cd b008 	str.w	fp, [sp, #8]
 800d0f6:	464c      	mov	r4, r9
 800d0f8:	461d      	mov	r5, r3
 800d0fa:	9903      	ldr	r1, [sp, #12]
 800d0fc:	e7d7      	b.n	800d0ae <__hexnan+0x2e>
 800d0fe:	2a29      	cmp	r2, #41	@ 0x29
 800d100:	d157      	bne.n	800d1b2 <__hexnan+0x132>
 800d102:	3102      	adds	r1, #2
 800d104:	f8ca 1000 	str.w	r1, [sl]
 800d108:	f1bb 0f00 	cmp.w	fp, #0
 800d10c:	d051      	beq.n	800d1b2 <__hexnan+0x132>
 800d10e:	454c      	cmp	r4, r9
 800d110:	d206      	bcs.n	800d120 <__hexnan+0xa0>
 800d112:	2d07      	cmp	r5, #7
 800d114:	dc04      	bgt.n	800d120 <__hexnan+0xa0>
 800d116:	462a      	mov	r2, r5
 800d118:	4649      	mov	r1, r9
 800d11a:	4620      	mov	r0, r4
 800d11c:	f7ff ff8a 	bl	800d034 <L_shift>
 800d120:	4544      	cmp	r4, r8
 800d122:	d936      	bls.n	800d192 <__hexnan+0x112>
 800d124:	f1a8 0204 	sub.w	r2, r8, #4
 800d128:	4623      	mov	r3, r4
 800d12a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d12e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d132:	429f      	cmp	r7, r3
 800d134:	d2f9      	bcs.n	800d12a <__hexnan+0xaa>
 800d136:	1b3b      	subs	r3, r7, r4
 800d138:	f023 0303 	bic.w	r3, r3, #3
 800d13c:	3304      	adds	r3, #4
 800d13e:	3401      	adds	r4, #1
 800d140:	3e03      	subs	r6, #3
 800d142:	42b4      	cmp	r4, r6
 800d144:	bf88      	it	hi
 800d146:	2304      	movhi	r3, #4
 800d148:	4443      	add	r3, r8
 800d14a:	2200      	movs	r2, #0
 800d14c:	f843 2b04 	str.w	r2, [r3], #4
 800d150:	429f      	cmp	r7, r3
 800d152:	d2fb      	bcs.n	800d14c <__hexnan+0xcc>
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	b91b      	cbnz	r3, 800d160 <__hexnan+0xe0>
 800d158:	4547      	cmp	r7, r8
 800d15a:	d128      	bne.n	800d1ae <__hexnan+0x12e>
 800d15c:	2301      	movs	r3, #1
 800d15e:	603b      	str	r3, [r7, #0]
 800d160:	2005      	movs	r0, #5
 800d162:	b007      	add	sp, #28
 800d164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d168:	3501      	adds	r5, #1
 800d16a:	2d08      	cmp	r5, #8
 800d16c:	f10b 0b01 	add.w	fp, fp, #1
 800d170:	dd06      	ble.n	800d180 <__hexnan+0x100>
 800d172:	4544      	cmp	r4, r8
 800d174:	d9c1      	bls.n	800d0fa <__hexnan+0x7a>
 800d176:	2300      	movs	r3, #0
 800d178:	f844 3c04 	str.w	r3, [r4, #-4]
 800d17c:	2501      	movs	r5, #1
 800d17e:	3c04      	subs	r4, #4
 800d180:	6822      	ldr	r2, [r4, #0]
 800d182:	f000 000f 	and.w	r0, r0, #15
 800d186:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d18a:	6020      	str	r0, [r4, #0]
 800d18c:	e7b5      	b.n	800d0fa <__hexnan+0x7a>
 800d18e:	2508      	movs	r5, #8
 800d190:	e7b3      	b.n	800d0fa <__hexnan+0x7a>
 800d192:	9b01      	ldr	r3, [sp, #4]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d0dd      	beq.n	800d154 <__hexnan+0xd4>
 800d198:	f1c3 0320 	rsb	r3, r3, #32
 800d19c:	f04f 32ff 	mov.w	r2, #4294967295
 800d1a0:	40da      	lsrs	r2, r3
 800d1a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d1a6:	4013      	ands	r3, r2
 800d1a8:	f846 3c04 	str.w	r3, [r6, #-4]
 800d1ac:	e7d2      	b.n	800d154 <__hexnan+0xd4>
 800d1ae:	3f04      	subs	r7, #4
 800d1b0:	e7d0      	b.n	800d154 <__hexnan+0xd4>
 800d1b2:	2004      	movs	r0, #4
 800d1b4:	e7d5      	b.n	800d162 <__hexnan+0xe2>

0800d1b6 <__ascii_mbtowc>:
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	b901      	cbnz	r1, 800d1bc <__ascii_mbtowc+0x6>
 800d1ba:	a901      	add	r1, sp, #4
 800d1bc:	b142      	cbz	r2, 800d1d0 <__ascii_mbtowc+0x1a>
 800d1be:	b14b      	cbz	r3, 800d1d4 <__ascii_mbtowc+0x1e>
 800d1c0:	7813      	ldrb	r3, [r2, #0]
 800d1c2:	600b      	str	r3, [r1, #0]
 800d1c4:	7812      	ldrb	r2, [r2, #0]
 800d1c6:	1e10      	subs	r0, r2, #0
 800d1c8:	bf18      	it	ne
 800d1ca:	2001      	movne	r0, #1
 800d1cc:	b002      	add	sp, #8
 800d1ce:	4770      	bx	lr
 800d1d0:	4610      	mov	r0, r2
 800d1d2:	e7fb      	b.n	800d1cc <__ascii_mbtowc+0x16>
 800d1d4:	f06f 0001 	mvn.w	r0, #1
 800d1d8:	e7f8      	b.n	800d1cc <__ascii_mbtowc+0x16>

0800d1da <_realloc_r>:
 800d1da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1de:	4680      	mov	r8, r0
 800d1e0:	4615      	mov	r5, r2
 800d1e2:	460c      	mov	r4, r1
 800d1e4:	b921      	cbnz	r1, 800d1f0 <_realloc_r+0x16>
 800d1e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ea:	4611      	mov	r1, r2
 800d1ec:	f7fd bca8 	b.w	800ab40 <_malloc_r>
 800d1f0:	b92a      	cbnz	r2, 800d1fe <_realloc_r+0x24>
 800d1f2:	f7fd fc31 	bl	800aa58 <_free_r>
 800d1f6:	2400      	movs	r4, #0
 800d1f8:	4620      	mov	r0, r4
 800d1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1fe:	f000 f840 	bl	800d282 <_malloc_usable_size_r>
 800d202:	4285      	cmp	r5, r0
 800d204:	4606      	mov	r6, r0
 800d206:	d802      	bhi.n	800d20e <_realloc_r+0x34>
 800d208:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d20c:	d8f4      	bhi.n	800d1f8 <_realloc_r+0x1e>
 800d20e:	4629      	mov	r1, r5
 800d210:	4640      	mov	r0, r8
 800d212:	f7fd fc95 	bl	800ab40 <_malloc_r>
 800d216:	4607      	mov	r7, r0
 800d218:	2800      	cmp	r0, #0
 800d21a:	d0ec      	beq.n	800d1f6 <_realloc_r+0x1c>
 800d21c:	42b5      	cmp	r5, r6
 800d21e:	462a      	mov	r2, r5
 800d220:	4621      	mov	r1, r4
 800d222:	bf28      	it	cs
 800d224:	4632      	movcs	r2, r6
 800d226:	f7fc fdb4 	bl	8009d92 <memcpy>
 800d22a:	4621      	mov	r1, r4
 800d22c:	4640      	mov	r0, r8
 800d22e:	f7fd fc13 	bl	800aa58 <_free_r>
 800d232:	463c      	mov	r4, r7
 800d234:	e7e0      	b.n	800d1f8 <_realloc_r+0x1e>

0800d236 <__ascii_wctomb>:
 800d236:	4603      	mov	r3, r0
 800d238:	4608      	mov	r0, r1
 800d23a:	b141      	cbz	r1, 800d24e <__ascii_wctomb+0x18>
 800d23c:	2aff      	cmp	r2, #255	@ 0xff
 800d23e:	d904      	bls.n	800d24a <__ascii_wctomb+0x14>
 800d240:	228a      	movs	r2, #138	@ 0x8a
 800d242:	601a      	str	r2, [r3, #0]
 800d244:	f04f 30ff 	mov.w	r0, #4294967295
 800d248:	4770      	bx	lr
 800d24a:	700a      	strb	r2, [r1, #0]
 800d24c:	2001      	movs	r0, #1
 800d24e:	4770      	bx	lr

0800d250 <fiprintf>:
 800d250:	b40e      	push	{r1, r2, r3}
 800d252:	b503      	push	{r0, r1, lr}
 800d254:	4601      	mov	r1, r0
 800d256:	ab03      	add	r3, sp, #12
 800d258:	4805      	ldr	r0, [pc, #20]	@ (800d270 <fiprintf+0x20>)
 800d25a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d25e:	6800      	ldr	r0, [r0, #0]
 800d260:	9301      	str	r3, [sp, #4]
 800d262:	f7ff f9b1 	bl	800c5c8 <_vfiprintf_r>
 800d266:	b002      	add	sp, #8
 800d268:	f85d eb04 	ldr.w	lr, [sp], #4
 800d26c:	b003      	add	sp, #12
 800d26e:	4770      	bx	lr
 800d270:	2000001c 	.word	0x2000001c

0800d274 <abort>:
 800d274:	b508      	push	{r3, lr}
 800d276:	2006      	movs	r0, #6
 800d278:	f000 f834 	bl	800d2e4 <raise>
 800d27c:	2001      	movs	r0, #1
 800d27e:	f7f4 fb89 	bl	8001994 <_exit>

0800d282 <_malloc_usable_size_r>:
 800d282:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d286:	1f18      	subs	r0, r3, #4
 800d288:	2b00      	cmp	r3, #0
 800d28a:	bfbc      	itt	lt
 800d28c:	580b      	ldrlt	r3, [r1, r0]
 800d28e:	18c0      	addlt	r0, r0, r3
 800d290:	4770      	bx	lr

0800d292 <_raise_r>:
 800d292:	291f      	cmp	r1, #31
 800d294:	b538      	push	{r3, r4, r5, lr}
 800d296:	4605      	mov	r5, r0
 800d298:	460c      	mov	r4, r1
 800d29a:	d904      	bls.n	800d2a6 <_raise_r+0x14>
 800d29c:	2316      	movs	r3, #22
 800d29e:	6003      	str	r3, [r0, #0]
 800d2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a4:	bd38      	pop	{r3, r4, r5, pc}
 800d2a6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d2a8:	b112      	cbz	r2, 800d2b0 <_raise_r+0x1e>
 800d2aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d2ae:	b94b      	cbnz	r3, 800d2c4 <_raise_r+0x32>
 800d2b0:	4628      	mov	r0, r5
 800d2b2:	f000 f831 	bl	800d318 <_getpid_r>
 800d2b6:	4622      	mov	r2, r4
 800d2b8:	4601      	mov	r1, r0
 800d2ba:	4628      	mov	r0, r5
 800d2bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2c0:	f000 b818 	b.w	800d2f4 <_kill_r>
 800d2c4:	2b01      	cmp	r3, #1
 800d2c6:	d00a      	beq.n	800d2de <_raise_r+0x4c>
 800d2c8:	1c59      	adds	r1, r3, #1
 800d2ca:	d103      	bne.n	800d2d4 <_raise_r+0x42>
 800d2cc:	2316      	movs	r3, #22
 800d2ce:	6003      	str	r3, [r0, #0]
 800d2d0:	2001      	movs	r0, #1
 800d2d2:	e7e7      	b.n	800d2a4 <_raise_r+0x12>
 800d2d4:	2100      	movs	r1, #0
 800d2d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d2da:	4620      	mov	r0, r4
 800d2dc:	4798      	blx	r3
 800d2de:	2000      	movs	r0, #0
 800d2e0:	e7e0      	b.n	800d2a4 <_raise_r+0x12>
	...

0800d2e4 <raise>:
 800d2e4:	4b02      	ldr	r3, [pc, #8]	@ (800d2f0 <raise+0xc>)
 800d2e6:	4601      	mov	r1, r0
 800d2e8:	6818      	ldr	r0, [r3, #0]
 800d2ea:	f7ff bfd2 	b.w	800d292 <_raise_r>
 800d2ee:	bf00      	nop
 800d2f0:	2000001c 	.word	0x2000001c

0800d2f4 <_kill_r>:
 800d2f4:	b538      	push	{r3, r4, r5, lr}
 800d2f6:	4d07      	ldr	r5, [pc, #28]	@ (800d314 <_kill_r+0x20>)
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	4604      	mov	r4, r0
 800d2fc:	4608      	mov	r0, r1
 800d2fe:	4611      	mov	r1, r2
 800d300:	602b      	str	r3, [r5, #0]
 800d302:	f7f4 fb37 	bl	8001974 <_kill>
 800d306:	1c43      	adds	r3, r0, #1
 800d308:	d102      	bne.n	800d310 <_kill_r+0x1c>
 800d30a:	682b      	ldr	r3, [r5, #0]
 800d30c:	b103      	cbz	r3, 800d310 <_kill_r+0x1c>
 800d30e:	6023      	str	r3, [r4, #0]
 800d310:	bd38      	pop	{r3, r4, r5, pc}
 800d312:	bf00      	nop
 800d314:	20004744 	.word	0x20004744

0800d318 <_getpid_r>:
 800d318:	f7f4 bb24 	b.w	8001964 <_getpid>

0800d31c <_init>:
 800d31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d31e:	bf00      	nop
 800d320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d322:	bc08      	pop	{r3}
 800d324:	469e      	mov	lr, r3
 800d326:	4770      	bx	lr

0800d328 <_fini>:
 800d328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d32a:	bf00      	nop
 800d32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d32e:	bc08      	pop	{r3}
 800d330:	469e      	mov	lr, r3
 800d332:	4770      	bx	lr
