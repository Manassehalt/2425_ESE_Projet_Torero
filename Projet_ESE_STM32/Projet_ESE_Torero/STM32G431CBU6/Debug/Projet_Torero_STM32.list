
Projet_Torero_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d81c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800da00  0800da00  0000ea00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df88  0800df88  0000f1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800df88  0800df88  0000ef88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df90  0800df90  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df90  0800df90  0000ef90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800df94  0800df94  0000ef94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800df98  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e7c  200001d4  0800e16c  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001050  0800e16c  00010050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e216  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000426a  00000000  00000000  0002d41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b10  00000000  00000000  00031688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014f5  00000000  00000000  00033198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023768  00000000  00000000  0003468d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021049  00000000  00000000  00057df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7da8  00000000  00000000  00078e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00160be6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008948  00000000  00000000  00160c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009f  00000000  00000000  00169574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d9e4 	.word	0x0800d9e4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800d9e4 	.word	0x0800d9e4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f008 ff9f 	bl	8009f90 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001054:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800105a:	4b30      	ldr	r3, [pc, #192]	@ (800111c <MX_ADC1_Init+0xe8>)
 800105c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <MX_ADC1_Init+0xe8>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001074:	4b29      	ldr	r3, [pc, #164]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b28      	ldr	r3, [pc, #160]	@ (800111c <MX_ADC1_Init+0xe8>)
 800107c:	2204      	movs	r2, #4
 800107e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001088:	2200      	movs	r2, #0
 800108a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <MX_ADC1_Init+0xe8>)
 800108e:	2201      	movs	r2, #1
 8001090:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010bc:	4817      	ldr	r0, [pc, #92]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010be:	f002 f86f 	bl	80031a0 <HAL_ADC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010c8:	f000 fa50 	bl	800156c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d4:	4619      	mov	r1, r3
 80010d6:	4811      	ldr	r0, [pc, #68]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010d8:	f002 fdfc 	bl	8003cd4 <HAL_ADCEx_MultiModeConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010e2:	f000 fa43 	bl	800156c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_ADC1_Init+0xec>)
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ea:	2306      	movs	r3, #6
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f2:	237f      	movs	r3, #127	@ 0x7f
 80010f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f6:	2304      	movs	r3, #4
 80010f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001104:	f002 f9d0 	bl	80034a8 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800110e:	f000 fa2d 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3730      	adds	r7, #48	@ 0x30
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001f0 	.word	0x200001f0
 8001120:	32601000 	.word	0x32601000

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09a      	sub	sp, #104	@ 0x68
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	2244      	movs	r2, #68	@ 0x44
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f008 ff23 	bl	8009f90 <memset>
  if(adcHandle->Instance==ADC1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001152:	d133      	bne.n	80011bc <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001154:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001158:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800115a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800115e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4618      	mov	r0, r3
 8001166:	f004 f953 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001170:	f000 f9fc 	bl	800156c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 800117a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001190:	4a0c      	ldr	r2, [pc, #48]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 8001192:	f043 0302 	orr.w	r3, r3, #2
 8001196:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001198:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC1_IN15_AN_CB_G_Pin|ADC1_IN12_AN_CB_D_Pin;
 80011a4:	2303      	movs	r3, #3
 80011a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a8:	2303      	movs	r3, #3
 80011aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b4:	4619      	mov	r1, r3
 80011b6:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 80011b8:	f003 f9b2 	bl	8004520 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011bc:	bf00      	nop
 80011be:	3768      	adds	r7, #104	@ 0x68
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021000 	.word	0x40021000
 80011c8:	48000400 	.word	0x48000400

080011cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011d2:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_DMA_Init+0x50>)
 80011d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011d6:	4a11      	ldr	r2, [pc, #68]	@ (800121c <MX_DMA_Init+0x50>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_DMA_Init+0x50>)
 80011e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_DMA_Init+0x50>)
 80011ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011ee:	4a0b      	ldr	r2, [pc, #44]	@ (800121c <MX_DMA_Init+0x50>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_DMA_Init+0x50>)
 80011f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2105      	movs	r1, #5
 8001206:	200b      	movs	r0, #11
 8001208:	f002 fee3 	bl	8003fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800120c:	200b      	movs	r0, #11
 800120e:	f002 fefa 	bl	8004006 <HAL_NVIC_EnableIRQ>

}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000

08001220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	@ 0x28
 8001224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	4b50      	ldr	r3, [pc, #320]	@ (8001378 <MX_GPIO_Init+0x158>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	4a4f      	ldr	r2, [pc, #316]	@ (8001378 <MX_GPIO_Init+0x158>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001242:	4b4d      	ldr	r3, [pc, #308]	@ (8001378 <MX_GPIO_Init+0x158>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800124e:	4b4a      	ldr	r3, [pc, #296]	@ (8001378 <MX_GPIO_Init+0x158>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	4a49      	ldr	r2, [pc, #292]	@ (8001378 <MX_GPIO_Init+0x158>)
 8001254:	f043 0320 	orr.w	r3, r3, #32
 8001258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125a:	4b47      	ldr	r3, [pc, #284]	@ (8001378 <MX_GPIO_Init+0x158>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	f003 0320 	and.w	r3, r3, #32
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001266:	4b44      	ldr	r3, [pc, #272]	@ (8001378 <MX_GPIO_Init+0x158>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	4a43      	ldr	r2, [pc, #268]	@ (8001378 <MX_GPIO_Init+0x158>)
 800126c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001272:	4b41      	ldr	r3, [pc, #260]	@ (8001378 <MX_GPIO_Init+0x158>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b3e      	ldr	r3, [pc, #248]	@ (8001378 <MX_GPIO_Init+0x158>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	4a3d      	ldr	r2, [pc, #244]	@ (8001378 <MX_GPIO_Init+0x158>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128a:	4b3b      	ldr	r3, [pc, #236]	@ (8001378 <MX_GPIO_Init+0x158>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	4b38      	ldr	r3, [pc, #224]	@ (8001378 <MX_GPIO_Init+0x158>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	4a37      	ldr	r2, [pc, #220]	@ (8001378 <MX_GPIO_Init+0x158>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a2:	4b35      	ldr	r3, [pc, #212]	@ (8001378 <MX_GPIO_Init+0x158>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INT2_ACC_Pin|LED_SE_Pin|LED_SW_Pin|Status_LED_Pin
 80012ae:	2200      	movs	r2, #0
 80012b0:	f642 4150 	movw	r1, #11344	@ 0x2c50
 80012b4:	4831      	ldr	r0, [pc, #196]	@ (800137c <MX_GPIO_Init+0x15c>)
 80012b6:	f003 fab5 	bl	8004824 <HAL_GPIO_WritePin>
                          |Status_LED_debbug_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	2120      	movs	r1, #32
 80012be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c2:	f003 faaf 	bl	8004824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_NE_Pin|INT1_ACC_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f248 4180 	movw	r1, #33920	@ 0x8480
 80012cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d0:	f003 faa8 	bl	8004824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 80012d4:	2200      	movs	r2, #0
 80012d6:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 80012da:	4829      	ldr	r0, [pc, #164]	@ (8001380 <MX_GPIO_Init+0x160>)
 80012dc:	f003 faa2 	bl	8004824 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_S_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = INT2_ACC_Pin|LED_SE_Pin|LED_SW_Pin|Status_LED_Pin
 80012e0:	f642 4350 	movw	r3, #11344	@ 0x2c50
 80012e4:	617b      	str	r3, [r7, #20]
                          |Status_LED_debbug_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	4820      	ldr	r0, [pc, #128]	@ (800137c <MX_GPIO_Init+0x15c>)
 80012fa:	f003 f911 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80012fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	481c      	ldr	r0, [pc, #112]	@ (8001384 <MX_GPIO_Init+0x164>)
 8001314:	f003 f904 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_ACC_Pin|LED_NE_Pin|INT1_ACC_Pin|DEV_EN_LIDAR_Pin;
 8001318:	f248 43a0 	movw	r3, #33952	@ 0x84a0
 800131c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001334:	f003 f8f4 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 8001338:	f241 03f4 	movw	r3, #4340	@ 0x10f4
 800133c:	617b      	str	r3, [r7, #20]
                          |LED_E_Pin|LED_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	2301      	movs	r3, #1
 8001340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	4619      	mov	r1, r3
 8001350:	480b      	ldr	r0, [pc, #44]	@ (8001380 <MX_GPIO_Init+0x160>)
 8001352:	f003 f8e5 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT_Flash_Pin;
 8001356:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT_Flash_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	4805      	ldr	r0, [pc, #20]	@ (8001380 <MX_GPIO_Init+0x160>)
 800136c:	f003 f8d8 	bl	8004520 <HAL_GPIO_Init>

}
 8001370:	bf00      	nop
 8001372:	3728      	adds	r7, #40	@ 0x28
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40021000 	.word	0x40021000
 800137c:	48000800 	.word	0x48000800
 8001380:	48000400 	.word	0x48000400
 8001384:	48001800 	.word	0x48001800

08001388 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr){
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8001390:	1d39      	adds	r1, r7, #4
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	2201      	movs	r2, #1
 8001398:	4803      	ldr	r0, [pc, #12]	@ (80013a8 <__io_putchar+0x20>)
 800139a:	f006 f987 	bl	80076ac <HAL_UART_Transmit>
	return chr;
 800139e:	687b      	ldr	r3, [r7, #4]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000cc0 	.word	0x20000cc0

080013ac <print_buffer>:

void print_buffer(const char * Name, uint8_t *pData, uint16_t Size, int N_lines){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	4613      	mov	r3, r2
 80013ba:	80fb      	strh	r3, [r7, #6]
	printf("%s", Name);
 80013bc:	68f9      	ldr	r1, [r7, #12]
 80013be:	4819      	ldr	r0, [pc, #100]	@ (8001424 <print_buffer+0x78>)
 80013c0:	f008 fc4a 	bl	8009c58 <iprintf>
	if(N_lines >= (int) Size){
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	db13      	blt.n	80013f4 <print_buffer+0x48>
		for(int i = 0; i<Size; i++){
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	e00b      	b.n	80013ea <print_buffer+0x3e>
			printf("%d : %d\r\n", i, pData[i]);
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	4413      	add	r3, r2
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	6979      	ldr	r1, [r7, #20]
 80013de:	4812      	ldr	r0, [pc, #72]	@ (8001428 <print_buffer+0x7c>)
 80013e0:	f008 fc3a 	bl	8009c58 <iprintf>
		for(int i = 0; i<Size; i++){
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3301      	adds	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dbef      	blt.n	80013d2 <print_buffer+0x26>
	else{
		for(int i = 0; i<N_lines; i++){
			printf("%d : %d\r\n", i, pData[i]);
		}
	}
}
 80013f2:	e012      	b.n	800141a <print_buffer+0x6e>
		for(int i = 0; i<N_lines; i++){
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	e00b      	b.n	8001412 <print_buffer+0x66>
			printf("%d : %d\r\n", i, pData[i]);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	4413      	add	r3, r2
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	6939      	ldr	r1, [r7, #16]
 8001406:	4808      	ldr	r0, [pc, #32]	@ (8001428 <print_buffer+0x7c>)
 8001408:	f008 fc26 	bl	8009c58 <iprintf>
		for(int i = 0; i<N_lines; i++){
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	3301      	adds	r3, #1
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	dbef      	blt.n	80013fa <print_buffer+0x4e>
}
 800141a:	bf00      	nop
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	0800da00 	.word	0x0800da00
 8001428:	0800da04 	.word	0x0800da04

0800142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001430:	f001 fc4d 	bl	8002cce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001434:	f000 f85c 	bl	80014f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001438:	f7ff fef2 	bl	8001220 <MX_GPIO_Init>
  MX_DMA_Init();
 800143c:	f7ff fec6 	bl	80011cc <MX_DMA_Init>
  MX_ADC1_Init();
 8001440:	f7ff fdf8 	bl	8001034 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001444:	f000 f898 	bl	8001578 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001448:	f000 fb82 	bl	8001b50 <MX_TIM1_Init>
  MX_TIM2_Init();
 800144c:	f000 fc20 	bl	8001c90 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001450:	f000 fc82 	bl	8001d58 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001454:	f000 fcd6 	bl	8001e04 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001458:	f000 fe96 	bl	8002188 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800145c:	f000 fee0 	bl	8002220 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Start_Motors();
 8001460:	f000 fe7c 	bl	800215c <Start_Motors>
  ADXL343_Init();
 8001464:	f000 f9fe 	bl	8001864 <ADXL343_Init>

  LIDAR_Init(&hlidar);
 8001468:	481b      	ldr	r0, [pc, #108]	@ (80014d8 <main+0xac>)
 800146a:	f000 ffeb 	bl	8002444 <LIDAR_Init>
  HAL_Delay(500);
 800146e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001472:	f001 fc9d 	bl	8002db0 <HAL_Delay>
  LIDAR_Stop(&hlidar);
 8001476:	4818      	ldr	r0, [pc, #96]	@ (80014d8 <main+0xac>)
 8001478:	f001 f825 	bl	80024c6 <LIDAR_Stop>
  HAL_Delay(500);
 800147c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001480:	f001 fc96 	bl	8002db0 <HAL_Delay>
  LIDAR_Get_Health_Status(&hlidar);
 8001484:	4814      	ldr	r0, [pc, #80]	@ (80014d8 <main+0xac>)
 8001486:	f001 f8f1 	bl	800266c <LIDAR_Get_Health_Status>
  print_buffer("Health", hlidar.health_buff, HEALTH_BUFF_SIZE_LIDAR, HEALTH_BUFF_SIZE_LIDAR);
 800148a:	230a      	movs	r3, #10
 800148c:	220a      	movs	r2, #10
 800148e:	4913      	ldr	r1, [pc, #76]	@ (80014dc <main+0xb0>)
 8001490:	4813      	ldr	r0, [pc, #76]	@ (80014e0 <main+0xb4>)
 8001492:	f7ff ff8b 	bl	80013ac <print_buffer>
  HAL_Delay(500);
 8001496:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800149a:	f001 fc89 	bl	8002db0 <HAL_Delay>
  LIDAR_Get_Info(&hlidar);
 800149e:	480e      	ldr	r0, [pc, #56]	@ (80014d8 <main+0xac>)
 80014a0:	f001 f82e 	bl	8002500 <LIDAR_Get_Info>
  print_buffer("Info", hlidar.info_buff, INFO_BUFF_SIZE_LIDAR, INFO_BUFF_SIZE_LIDAR);
 80014a4:	231b      	movs	r3, #27
 80014a6:	221b      	movs	r2, #27
 80014a8:	490e      	ldr	r1, [pc, #56]	@ (80014e4 <main+0xb8>)
 80014aa:	480f      	ldr	r0, [pc, #60]	@ (80014e8 <main+0xbc>)
 80014ac:	f7ff ff7e 	bl	80013ac <print_buffer>
  LIDAR_Start(&hlidar);
 80014b0:	4809      	ldr	r0, [pc, #36]	@ (80014d8 <main+0xac>)
 80014b2:	f000 ffe3 	bl	800247c <LIDAR_Start>
  while(1){
	  LIDAR_get_point(&hlidar);
 80014b6:	4808      	ldr	r0, [pc, #32]	@ (80014d8 <main+0xac>)
 80014b8:	f001 fa6e 	bl	8002998 <LIDAR_get_point>
	  print_buffer("points", hlidar.process_frame->point_buff, POINT_BUFF_SIZE_LIDAR, 50);
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <main+0xac>)
 80014be:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 80014c2:	f503 618a 	add.w	r1, r3, #1104	@ 0x450
 80014c6:	2332      	movs	r3, #50	@ 0x32
 80014c8:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80014cc:	4807      	ldr	r0, [pc, #28]	@ (80014ec <main+0xc0>)
 80014ce:	f7ff ff6d 	bl	80013ac <print_buffer>
	  LIDAR_get_point(&hlidar);
 80014d2:	bf00      	nop
 80014d4:	e7ef      	b.n	80014b6 <main+0x8a>
 80014d6:	bf00      	nop
 80014d8:	2000025c 	.word	0x2000025c
 80014dc:	2000027b 	.word	0x2000027b
 80014e0:	0800da10 	.word	0x0800da10
 80014e4:	20000260 	.word	0x20000260
 80014e8:	0800da18 	.word	0x0800da18
 80014ec:	0800da20 	.word	0x0800da20

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b094      	sub	sp, #80	@ 0x50
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 0318 	add.w	r3, r7, #24
 80014fa:	2238      	movs	r2, #56	@ 0x38
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f008 fd46 	bl	8009f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001512:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001516:	f003 f99d 	bl	8004854 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800151a:	2301      	movs	r3, #1
 800151c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800151e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001522:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001524:	2300      	movs	r3, #0
 8001526:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001528:	f107 0318 	add.w	r3, r7, #24
 800152c:	4618      	mov	r0, r3
 800152e:	f003 fa45 	bl	80049bc <HAL_RCC_OscConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0x4c>
  {
    Error_Handler();
 8001538:	f000 f818 	bl	800156c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153c:	230f      	movs	r3, #15
 800153e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001540:	2302      	movs	r3, #2
 8001542:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f003 fd43 	bl	8004fe0 <HAL_RCC_ClockConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001560:	f000 f804 	bl	800156c <Error_Handler>
  }
}
 8001564:	bf00      	nop
 8001566:	3750      	adds	r7, #80	@ 0x50
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <Error_Handler+0x8>

08001578 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800157c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <MX_SPI2_Init+0x74>)
 800157e:	4a1c      	ldr	r2, [pc, #112]	@ (80015f0 <MX_SPI2_Init+0x78>)
 8001580:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001582:	4b1a      	ldr	r3, [pc, #104]	@ (80015ec <MX_SPI2_Init+0x74>)
 8001584:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001588:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800158a:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <MX_SPI2_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001590:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <MX_SPI2_Init+0x74>)
 8001592:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001596:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001598:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <MX_SPI2_Init+0x74>)
 800159a:	2202      	movs	r2, #2
 800159c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800159e:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <MX_SPI2_Init+0x74>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015a4:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <MX_SPI2_Init+0x74>)
 80015a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015aa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <MX_SPI2_Init+0x74>)
 80015ae:	2218      	movs	r2, #24
 80015b0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_SPI2_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <MX_SPI2_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <MX_SPI2_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <MX_SPI2_Init+0x74>)
 80015c6:	2207      	movs	r2, #7
 80015c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <MX_SPI2_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MX_SPI2_Init+0x74>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <MX_SPI2_Init+0x74>)
 80015d8:	f004 f90a 	bl	80057f0 <HAL_SPI_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015e2:	f7ff ffc3 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000b28 	.word	0x20000b28
 80015f0:	40003800 	.word	0x40003800

080015f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	@ 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a17      	ldr	r2, [pc, #92]	@ (8001670 <HAL_SPI_MspInit+0x7c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d128      	bne.n	8001668 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001616:	4b17      	ldr	r3, [pc, #92]	@ (8001674 <HAL_SPI_MspInit+0x80>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161a:	4a16      	ldr	r2, [pc, #88]	@ (8001674 <HAL_SPI_MspInit+0x80>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001620:	6593      	str	r3, [r2, #88]	@ 0x58
 8001622:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <HAL_SPI_MspInit+0x80>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <HAL_SPI_MspInit+0x80>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001632:	4a10      	ldr	r2, [pc, #64]	@ (8001674 <HAL_SPI_MspInit+0x80>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <HAL_SPI_MspInit+0x80>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_TO_SCLK_ACC_Pin|SPI2_MISO_TO_SDO_ACC_Pin|SPI2_MOSI_TO_SDI_ACC_Pin;
 8001646:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800164a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001658:	2305      	movs	r3, #5
 800165a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4805      	ldr	r0, [pc, #20]	@ (8001678 <HAL_SPI_MspInit+0x84>)
 8001664:	f002 ff5c 	bl	8004520 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001668:	bf00      	nop
 800166a:	3728      	adds	r7, #40	@ 0x28
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40003800 	.word	0x40003800
 8001674:	40021000 	.word	0x40021000
 8001678:	48000400 	.word	0x48000400

0800167c <SPI_Write>:
  /* USER CODE END SPI2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void SPI_Write(uint8_t reg, uint8_t value) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	460a      	mov	r2, r1
 8001686:	71fb      	strb	r3, [r7, #7]
 8001688:	4613      	mov	r3, r2
 800168a:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg | 0x40;
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001692:	b2db      	uxtb	r3, r3
 8001694:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8001696:	79bb      	ldrb	r3, [r7, #6]
 8001698:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	2120      	movs	r1, #32
 800169e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a2:	f003 f8bf 	bl	8004824 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
 80016a6:	f107 010c 	add.w	r1, r7, #12
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	2202      	movs	r2, #2
 80016b0:	4806      	ldr	r0, [pc, #24]	@ (80016cc <SPI_Write+0x50>)
 80016b2:	f004 f948 	bl	8005946 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 80016b6:	2201      	movs	r2, #1
 80016b8:	2120      	movs	r1, #32
 80016ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016be:	f003 f8b1 	bl	8004824 <HAL_GPIO_WritePin>
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000b28 	.word	0x20000b28

080016d0 <SPI_Read>:

uint8_t SPI_Read(uint8_t reg) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data = reg | 0x80;
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	73fb      	strb	r3, [r7, #15]
    uint8_t rx_data = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2120      	movs	r1, #32
 80016ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016f0:	f003 f898 	bl	8004824 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &tx_data, 1, HAL_MAX_DELAY);
 80016f4:	f107 010f 	add.w	r1, r7, #15
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295
 80016fc:	2201      	movs	r2, #1
 80016fe:	480b      	ldr	r0, [pc, #44]	@ (800172c <SPI_Read+0x5c>)
 8001700:	f004 f921 	bl	8005946 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, &rx_data, 1, HAL_MAX_DELAY);
 8001704:	f107 010e 	add.w	r1, r7, #14
 8001708:	f04f 33ff 	mov.w	r3, #4294967295
 800170c:	2201      	movs	r2, #1
 800170e:	4807      	ldr	r0, [pc, #28]	@ (800172c <SPI_Read+0x5c>)
 8001710:	f004 fa8e 	bl	8005c30 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 8001714:	2201      	movs	r2, #1
 8001716:	2120      	movs	r1, #32
 8001718:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800171c:	f003 f882 	bl	8004824 <HAL_GPIO_WritePin>

    return rx_data;
 8001720:	7bbb      	ldrb	r3, [r7, #14]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000b28 	.word	0x20000b28

08001730 <Read_Acceleration>:

void Read_Acceleration(void) {
 8001730:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001734:	b0a6      	sub	sp, #152	@ 0x98
 8001736:	af04      	add	r7, sp, #16
    uint8_t buffer[6];
    uint8_t reg = 0x32 | 0xC0;  // Commande de lecture multiple à partir de DATAX0
 8001738:	23f2      	movs	r3, #242	@ 0xf2
 800173a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

    HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2120      	movs	r1, #32
 8001742:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001746:	f003 f86d 	bl	8004824 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &reg, 1, HAL_MAX_DELAY);
 800174a:	f107 0167 	add.w	r1, r7, #103	@ 0x67
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
 8001752:	2201      	movs	r2, #1
 8001754:	483f      	ldr	r0, [pc, #252]	@ (8001854 <Read_Acceleration+0x124>)
 8001756:	f004 f8f6 	bl	8005946 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, buffer, 6, HAL_MAX_DELAY);
 800175a:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	2206      	movs	r2, #6
 8001764:	483b      	ldr	r0, [pc, #236]	@ (8001854 <Read_Acceleration+0x124>)
 8001766:	f004 fa63 	bl	8005c30 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(ADXL343_CS_GPIO, ADXL343_CS_PIN, GPIO_PIN_SET);
 800176a:	2201      	movs	r2, #1
 800176c:	2120      	movs	r1, #32
 800176e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001772:	f003 f857 	bl	8004824 <HAL_GPIO_WritePin>

    // Combinaison des octets pour obtenir des valeurs 16 bits signées
    int16_t x = (int16_t)((buffer[1] << 8) | buffer[0]);
 8001776:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	b21a      	sxth	r2, r3
 800177e:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8001782:	b21b      	sxth	r3, r3
 8001784:	4313      	orrs	r3, r2
 8001786:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    int16_t y = (int16_t)((buffer[3] << 8) | buffer[2]);
 800178a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	b21a      	sxth	r2, r3
 8001792:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001796:	b21b      	sxth	r3, r3
 8001798:	4313      	orrs	r3, r2
 800179a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
    int16_t z = (int16_t)((buffer[5] << 8) | buffer[4]);
 800179e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80017a2:	021b      	lsls	r3, r3, #8
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	4313      	orrs	r3, r2
 80017ae:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

    // Conversion en g (±2g, Full Resolution ou Fixed 10-bit)
    float scale = 3.9 / 1000.0;  // Sensibilité pour ±2g en g/LSB
 80017b2:	4b29      	ldr	r3, [pc, #164]	@ (8001858 <Read_Acceleration+0x128>)
 80017b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    float ax = x * scale;
 80017b6:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c2:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80017c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ca:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    float ay = y * scale;
 80017ce:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	@ 0x84
 80017d2:	ee07 3a90 	vmov	s15, r3
 80017d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017da:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80017de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    float az = z * scale;
 80017e6:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 80017ea:	ee07 3a90 	vmov	s15, r3
 80017ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f2:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80017f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fa:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

    // Transmission des résultats via UART
    char msg[100];
    sprintf(msg, "Ax: %.3f g, Ay: %.3f g, Az: %.3f g\r\n", ax, ay, az);
 80017fe:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001800:	f7fe feca 	bl	8000598 <__aeabi_f2d>
 8001804:	4680      	mov	r8, r0
 8001806:	4689      	mov	r9, r1
 8001808:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800180a:	f7fe fec5 	bl	8000598 <__aeabi_f2d>
 800180e:	4604      	mov	r4, r0
 8001810:	460d      	mov	r5, r1
 8001812:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001814:	f7fe fec0 	bl	8000598 <__aeabi_f2d>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4638      	mov	r0, r7
 800181e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001822:	e9cd 4500 	strd	r4, r5, [sp]
 8001826:	4642      	mov	r2, r8
 8001828:	464b      	mov	r3, r9
 800182a:	490c      	ldr	r1, [pc, #48]	@ (800185c <Read_Acceleration+0x12c>)
 800182c:	f008 fab8 	bl	8009da0 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001830:	463b      	mov	r3, r7
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fd44 	bl	80002c0 <strlen>
 8001838:	4603      	mov	r3, r0
 800183a:	b29a      	uxth	r2, r3
 800183c:	4639      	mov	r1, r7
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	4807      	ldr	r0, [pc, #28]	@ (8001860 <Read_Acceleration+0x130>)
 8001844:	f005 ff32 	bl	80076ac <HAL_UART_Transmit>
}
 8001848:	bf00      	nop
 800184a:	3788      	adds	r7, #136	@ 0x88
 800184c:	46bd      	mov	sp, r7
 800184e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001852:	bf00      	nop
 8001854:	20000b28 	.word	0x20000b28
 8001858:	3b7f9724 	.word	0x3b7f9724
 800185c:	0800da28 	.word	0x0800da28
 8001860:	20000cc0 	.word	0x20000cc0

08001864 <ADXL343_Init>:

void ADXL343_Init(void) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
    uint8_t devid = SPI_Read(0x00);  // Lire le registre DEVID (0x00)
 800186a:	2000      	movs	r0, #0
 800186c:	f7ff ff30 	bl	80016d0 <SPI_Read>
 8001870:	4603      	mov	r3, r0
 8001872:	73fb      	strb	r3, [r7, #15]

    if (devid == 0xE5) {
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	2be5      	cmp	r3, #229	@ 0xe5
 8001878:	d11f      	bne.n	80018ba <ADXL343_Init+0x56>
        // Le composant est détecté, procéder à l'initialisation
        SPI_Write(0x2C, 0x04);  // Configurer la bande passante à 1.56 Hz
 800187a:	2104      	movs	r1, #4
 800187c:	202c      	movs	r0, #44	@ 0x2c
 800187e:	f7ff fefd 	bl	800167c <SPI_Write>
        SPI_Write(0x2E, 0x80);  // Activer DATA_READY
 8001882:	2180      	movs	r1, #128	@ 0x80
 8001884:	202e      	movs	r0, #46	@ 0x2e
 8001886:	f7ff fef9 	bl	800167c <SPI_Write>
        SPI_Write(0x31, 0x08);  // DATA_FORMAT : FULL_RES = 1, RANGE = ±2g
 800188a:	2108      	movs	r1, #8
 800188c:	2031      	movs	r0, #49	@ 0x31
 800188e:	f7ff fef5 	bl	800167c <SPI_Write>
        SPI_Write(0x2D, 0x08);  // Activer le mode mesure
 8001892:	2108      	movs	r1, #8
 8001894:	202d      	movs	r0, #45	@ 0x2d
 8001896:	f7ff fef1 	bl	800167c <SPI_Write>
        Read_Acceleration();    // Lire les données pour effacer l'interruption
 800189a:	f7ff ff49 	bl	8001730 <Read_Acceleration>

        char *msg = "ADXL343 detecte et initialise !\r\n";
 800189e:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <ADXL343_Init+0x78>)
 80018a0:	607b      	str	r3, [r7, #4]
        HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7fe fd0c 	bl	80002c0 <strlen>
 80018a8:	4603      	mov	r3, r0
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	480b      	ldr	r0, [pc, #44]	@ (80018e0 <ADXL343_Init+0x7c>)
 80018b4:	f005 fefa 	bl	80076ac <HAL_UART_Transmit>
    } else {
        char *error_msg = "Erreur : ADXL343 non detecte !\r\n";
        HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
    }
}
 80018b8:	e00c      	b.n	80018d4 <ADXL343_Init+0x70>
        char *error_msg = "Erreur : ADXL343 non detecte !\r\n";
 80018ba:	4b0a      	ldr	r3, [pc, #40]	@ (80018e4 <ADXL343_Init+0x80>)
 80018bc:	60bb      	str	r3, [r7, #8]
        HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 80018be:	68b8      	ldr	r0, [r7, #8]
 80018c0:	f7fe fcfe 	bl	80002c0 <strlen>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	4804      	ldr	r0, [pc, #16]	@ (80018e0 <ADXL343_Init+0x7c>)
 80018d0:	f005 feec 	bl	80076ac <HAL_UART_Transmit>
}
 80018d4:	bf00      	nop
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	0800da50 	.word	0x0800da50
 80018e0:	20000cc0 	.word	0x20000cc0
 80018e4:	0800da74 	.word	0x0800da74

080018e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <HAL_MspInit+0x50>)
 80018f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f2:	4a11      	ldr	r2, [pc, #68]	@ (8001938 <HAL_MspInit+0x50>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80018fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <HAL_MspInit+0x50>)
 80018fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <HAL_MspInit+0x50>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190a:	4a0b      	ldr	r2, [pc, #44]	@ (8001938 <HAL_MspInit+0x50>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001910:	6593      	str	r3, [r2, #88]	@ 0x58
 8001912:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <HAL_MspInit+0x50>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	210f      	movs	r1, #15
 8001922:	f06f 0001 	mvn.w	r0, #1
 8001926:	f002 fb54 	bl	8003fd2 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800192a:	f003 f837 	bl	800499c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <NMI_Handler+0x4>

08001944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <HardFault_Handler+0x4>

0800194c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <MemManage_Handler+0x4>

08001954 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <UsageFault_Handler+0x4>

08001964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001976:	f001 f9fd 	bl	8002d74 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800197a:	f007 f9b3 	bl	8008ce4 <xTaskGetSchedulerState>
 800197e:	4603      	mov	r3, r0
 8001980:	2b01      	cmp	r3, #1
 8001982:	d001      	beq.n	8001988 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001984:	f007 fa18 	bl	8008db8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001990:	4802      	ldr	r0, [pc, #8]	@ (800199c <DMA1_Channel1_IRQHandler+0x10>)
 8001992:	f002 fc76 	bl	8004282 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000de8 	.word	0x20000de8

080019a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return 1;
 80019a4:	2301      	movs	r3, #1
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_kill>:

int _kill(int pid, int sig)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ba:	f008 fb3b 	bl	800a034 <__errno>
 80019be:	4603      	mov	r3, r0
 80019c0:	2216      	movs	r2, #22
 80019c2:	601a      	str	r2, [r3, #0]
  return -1;
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_exit>:

void _exit (int status)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019d8:	f04f 31ff 	mov.w	r1, #4294967295
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ffe7 	bl	80019b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019e2:	bf00      	nop
 80019e4:	e7fd      	b.n	80019e2 <_exit+0x12>

080019e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e00a      	b.n	8001a0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019f8:	f3af 8000 	nop.w
 80019fc:	4601      	mov	r1, r0
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	60ba      	str	r2, [r7, #8]
 8001a04:	b2ca      	uxtb	r2, r1
 8001a06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	dbf0      	blt.n	80019f8 <_read+0x12>
  }

  return len;
 8001a16:	687b      	ldr	r3, [r7, #4]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	e009      	b.n	8001a46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	60ba      	str	r2, [r7, #8]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fca4 	bl	8001388 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	3301      	adds	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	dbf1      	blt.n	8001a32 <_write+0x12>
  }
  return len;
 8001a4e:	687b      	ldr	r3, [r7, #4]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_close>:

int _close(int file)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a80:	605a      	str	r2, [r3, #4]
  return 0;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <_isatty>:

int _isatty(int file)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a98:	2301      	movs	r3, #1
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b085      	sub	sp, #20
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac8:	4a14      	ldr	r2, [pc, #80]	@ (8001b1c <_sbrk+0x5c>)
 8001aca:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <_sbrk+0x60>)
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad4:	4b13      	ldr	r3, [pc, #76]	@ (8001b24 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d102      	bne.n	8001ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001adc:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <_sbrk+0x64>)
 8001ade:	4a12      	ldr	r2, [pc, #72]	@ (8001b28 <_sbrk+0x68>)
 8001ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae2:	4b10      	ldr	r3, [pc, #64]	@ (8001b24 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d207      	bcs.n	8001b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af0:	f008 faa0 	bl	800a034 <__errno>
 8001af4:	4603      	mov	r3, r0
 8001af6:	220c      	movs	r2, #12
 8001af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295
 8001afe:	e009      	b.n	8001b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b00:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b06:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	4a05      	ldr	r2, [pc, #20]	@ (8001b24 <_sbrk+0x64>)
 8001b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20008000 	.word	0x20008000
 8001b20:	00000400 	.word	0x00000400
 8001b24:	20000b8c 	.word	0x20000b8c
 8001b28:	20001050 	.word	0x20001050

08001b2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <SystemInit+0x20>)
 8001b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b36:	4a05      	ldr	r2, [pc, #20]	@ (8001b4c <SystemInit+0x20>)
 8001b38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b098      	sub	sp, #96	@ 0x60
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b56:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	611a      	str	r2, [r3, #16]
 8001b72:	615a      	str	r2, [r3, #20]
 8001b74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	2234      	movs	r2, #52	@ 0x34
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f008 fa07 	bl	8009f90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b82:	4b41      	ldr	r3, [pc, #260]	@ (8001c88 <MX_TIM1_Init+0x138>)
 8001b84:	4a41      	ldr	r2, [pc, #260]	@ (8001c8c <MX_TIM1_Init+0x13c>)
 8001b86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b88:	4b3f      	ldr	r3, [pc, #252]	@ (8001c88 <MX_TIM1_Init+0x138>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c88 <MX_TIM1_Init+0x138>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b94:	4b3c      	ldr	r3, [pc, #240]	@ (8001c88 <MX_TIM1_Init+0x138>)
 8001b96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c88 <MX_TIM1_Init+0x138>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ba2:	4b39      	ldr	r3, [pc, #228]	@ (8001c88 <MX_TIM1_Init+0x138>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba8:	4b37      	ldr	r3, [pc, #220]	@ (8001c88 <MX_TIM1_Init+0x138>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bae:	4836      	ldr	r0, [pc, #216]	@ (8001c88 <MX_TIM1_Init+0x138>)
 8001bb0:	f004 fd54 	bl	800665c <HAL_TIM_PWM_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001bba:	f7ff fcd7 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bce:	4619      	mov	r1, r3
 8001bd0:	482d      	ldr	r0, [pc, #180]	@ (8001c88 <MX_TIM1_Init+0x138>)
 8001bd2:	f005 fc0d 	bl	80073f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001bdc:	f7ff fcc6 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be0:	2360      	movs	r3, #96	@ 0x60
 8001be2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be8:	2300      	movs	r3, #0
 8001bea:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bec:	2300      	movs	r3, #0
 8001bee:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bfc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c00:	2200      	movs	r2, #0
 8001c02:	4619      	mov	r1, r3
 8001c04:	4820      	ldr	r0, [pc, #128]	@ (8001c88 <MX_TIM1_Init+0x138>)
 8001c06:	f004 ff27 	bl	8006a58 <HAL_TIM_PWM_ConfigChannel>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c10:	f7ff fcac 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c18:	2204      	movs	r2, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	481a      	ldr	r0, [pc, #104]	@ (8001c88 <MX_TIM1_Init+0x138>)
 8001c1e:	f004 ff1b 	bl	8006a58 <HAL_TIM_PWM_ConfigChannel>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001c28:	f7ff fca0 	bl	800156c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	4619      	mov	r1, r3
 8001c68:	4807      	ldr	r0, [pc, #28]	@ (8001c88 <MX_TIM1_Init+0x138>)
 8001c6a:	f005 fc43 	bl	80074f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001c74:	f7ff fc7a 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c78:	4803      	ldr	r0, [pc, #12]	@ (8001c88 <MX_TIM1_Init+0x138>)
 8001c7a:	f000 f9ed 	bl	8002058 <HAL_TIM_MspPostInit>

}
 8001c7e:	bf00      	nop
 8001c80:	3760      	adds	r7, #96	@ 0x60
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000b90 	.word	0x20000b90
 8001c8c:	40012c00 	.word	0x40012c00

08001c90 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	@ 0x28
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
 8001cb0:	615a      	str	r2, [r3, #20]
 8001cb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cb4:	4b27      	ldr	r3, [pc, #156]	@ (8001d54 <MX_TIM2_Init+0xc4>)
 8001cb6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001cbc:	4b25      	ldr	r3, [pc, #148]	@ (8001d54 <MX_TIM2_Init+0xc4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc2:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <MX_TIM2_Init+0xc4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001cc8:	4b22      	ldr	r3, [pc, #136]	@ (8001d54 <MX_TIM2_Init+0xc4>)
 8001cca:	f04f 32ff 	mov.w	r2, #4294967295
 8001cce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd0:	4b20      	ldr	r3, [pc, #128]	@ (8001d54 <MX_TIM2_Init+0xc4>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d54 <MX_TIM2_Init+0xc4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cdc:	481d      	ldr	r0, [pc, #116]	@ (8001d54 <MX_TIM2_Init+0xc4>)
 8001cde:	f004 fcbd 	bl	800665c <HAL_TIM_PWM_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001ce8:	f7ff fc40 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4816      	ldr	r0, [pc, #88]	@ (8001d54 <MX_TIM2_Init+0xc4>)
 8001cfc:	f005 fb78 	bl	80073f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001d06:	f7ff fc31 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d0a:	2360      	movs	r3, #96	@ 0x60
 8001d0c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4619      	mov	r1, r3
 8001d20:	480c      	ldr	r0, [pc, #48]	@ (8001d54 <MX_TIM2_Init+0xc4>)
 8001d22:	f004 fe99 	bl	8006a58 <HAL_TIM_PWM_ConfigChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001d2c:	f7ff fc1e 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d30:	463b      	mov	r3, r7
 8001d32:	2204      	movs	r2, #4
 8001d34:	4619      	mov	r1, r3
 8001d36:	4807      	ldr	r0, [pc, #28]	@ (8001d54 <MX_TIM2_Init+0xc4>)
 8001d38:	f004 fe8e 	bl	8006a58 <HAL_TIM_PWM_ConfigChannel>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001d42:	f7ff fc13 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d46:	4803      	ldr	r0, [pc, #12]	@ (8001d54 <MX_TIM2_Init+0xc4>)
 8001d48:	f000 f986 	bl	8002058 <HAL_TIM_MspPostInit>

}
 8001d4c:	bf00      	nop
 8001d4e:	3728      	adds	r7, #40	@ 0x28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000bdc 	.word	0x20000bdc

08001d58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08c      	sub	sp, #48	@ 0x30
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d5e:	f107 030c 	add.w	r3, r7, #12
 8001d62:	2224      	movs	r2, #36	@ 0x24
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f008 f912 	bl	8009f90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6c:	463b      	mov	r3, r7
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d76:	4b21      	ldr	r3, [pc, #132]	@ (8001dfc <MX_TIM3_Init+0xa4>)
 8001d78:	4a21      	ldr	r2, [pc, #132]	@ (8001e00 <MX_TIM3_Init+0xa8>)
 8001d7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <MX_TIM3_Init+0xa4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d82:	4b1e      	ldr	r3, [pc, #120]	@ (8001dfc <MX_TIM3_Init+0xa4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d88:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <MX_TIM3_Init+0xa4>)
 8001d8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d90:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <MX_TIM3_Init+0xa4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d96:	4b19      	ldr	r3, [pc, #100]	@ (8001dfc <MX_TIM3_Init+0xa4>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001da0:	2300      	movs	r3, #0
 8001da2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001da4:	2301      	movs	r3, #1
 8001da6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001db0:	2300      	movs	r3, #0
 8001db2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001db4:	2301      	movs	r3, #1
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	480d      	ldr	r0, [pc, #52]	@ (8001dfc <MX_TIM3_Init+0xa4>)
 8001dc8:	f004 fda0 	bl	800690c <HAL_TIM_Encoder_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001dd2:	f7ff fbcb 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dde:	463b      	mov	r3, r7
 8001de0:	4619      	mov	r1, r3
 8001de2:	4806      	ldr	r0, [pc, #24]	@ (8001dfc <MX_TIM3_Init+0xa4>)
 8001de4:	f005 fb04 	bl	80073f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001dee:	f7ff fbbd 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001df2:	bf00      	nop
 8001df4:	3730      	adds	r7, #48	@ 0x30
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000c28 	.word	0x20000c28
 8001e00:	40000400 	.word	0x40000400

08001e04 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b094      	sub	sp, #80	@ 0x50
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e0e:	2224      	movs	r2, #36	@ 0x24
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f008 f8bc 	bl	8009f90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e18:	f107 0320 	add.w	r3, r7, #32
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
 8001e30:	611a      	str	r2, [r3, #16]
 8001e32:	615a      	str	r2, [r3, #20]
 8001e34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e36:	4b30      	ldr	r3, [pc, #192]	@ (8001ef8 <MX_TIM4_Init+0xf4>)
 8001e38:	4a30      	ldr	r2, [pc, #192]	@ (8001efc <MX_TIM4_Init+0xf8>)
 8001e3a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef8 <MX_TIM4_Init+0xf4>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e42:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef8 <MX_TIM4_Init+0xf4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e48:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef8 <MX_TIM4_Init+0xf4>)
 8001e4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e4e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e50:	4b29      	ldr	r3, [pc, #164]	@ (8001ef8 <MX_TIM4_Init+0xf4>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e56:	4b28      	ldr	r3, [pc, #160]	@ (8001ef8 <MX_TIM4_Init+0xf4>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e5c:	4826      	ldr	r0, [pc, #152]	@ (8001ef8 <MX_TIM4_Init+0xf4>)
 8001e5e:	f004 fbfd 	bl	800665c <HAL_TIM_PWM_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001e68:	f7ff fb80 	bl	800156c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e70:	2300      	movs	r3, #0
 8001e72:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e74:	2301      	movs	r3, #1
 8001e76:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC1Filter = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e80:	2300      	movs	r3, #0
 8001e82:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e84:	2301      	movs	r3, #1
 8001e86:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.IC2Filter = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001e90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e94:	4619      	mov	r1, r3
 8001e96:	4818      	ldr	r0, [pc, #96]	@ (8001ef8 <MX_TIM4_Init+0xf4>)
 8001e98:	f004 fd38 	bl	800690c <HAL_TIM_Encoder_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8001ea2:	f7ff fb63 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001eae:	f107 0320 	add.w	r3, r7, #32
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4810      	ldr	r0, [pc, #64]	@ (8001ef8 <MX_TIM4_Init+0xf4>)
 8001eb6:	f005 fa9b 	bl	80073f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8001ec0:	f7ff fb54 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec4:	2360      	movs	r3, #96	@ 0x60
 8001ec6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4807      	ldr	r0, [pc, #28]	@ (8001ef8 <MX_TIM4_Init+0xf4>)
 8001edc:	f004 fdbc 	bl	8006a58 <HAL_TIM_PWM_ConfigChannel>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8001ee6:	f7ff fb41 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001eea:	4803      	ldr	r0, [pc, #12]	@ (8001ef8 <MX_TIM4_Init+0xf4>)
 8001eec:	f000 f8b4 	bl	8002058 <HAL_TIM_MspPostInit>

}
 8001ef0:	bf00      	nop
 8001ef2:	3750      	adds	r7, #80	@ 0x50
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000c74 	.word	0x20000c74
 8001efc:	40000800 	.word	0x40000800

08001f00 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08c      	sub	sp, #48	@ 0x30
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a2a      	ldr	r2, [pc, #168]	@ (8001fc8 <HAL_TIM_PWM_MspInit+0xc8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d10c      	bne.n	8001f3c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f22:	4b2a      	ldr	r3, [pc, #168]	@ (8001fcc <HAL_TIM_PWM_MspInit+0xcc>)
 8001f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f26:	4a29      	ldr	r2, [pc, #164]	@ (8001fcc <HAL_TIM_PWM_MspInit+0xcc>)
 8001f28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f2e:	4b27      	ldr	r3, [pc, #156]	@ (8001fcc <HAL_TIM_PWM_MspInit+0xcc>)
 8001f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f36:	61bb      	str	r3, [r7, #24]
 8001f38:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001f3a:	e040      	b.n	8001fbe <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f44:	d10c      	bne.n	8001f60 <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f46:	4b21      	ldr	r3, [pc, #132]	@ (8001fcc <HAL_TIM_PWM_MspInit+0xcc>)
 8001f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4a:	4a20      	ldr	r2, [pc, #128]	@ (8001fcc <HAL_TIM_PWM_MspInit+0xcc>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f52:	4b1e      	ldr	r3, [pc, #120]	@ (8001fcc <HAL_TIM_PWM_MspInit+0xcc>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	697b      	ldr	r3, [r7, #20]
}
 8001f5e:	e02e      	b.n	8001fbe <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM4)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd0 <HAL_TIM_PWM_MspInit+0xd0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d129      	bne.n	8001fbe <HAL_TIM_PWM_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f6a:	4b18      	ldr	r3, [pc, #96]	@ (8001fcc <HAL_TIM_PWM_MspInit+0xcc>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6e:	4a17      	ldr	r2, [pc, #92]	@ (8001fcc <HAL_TIM_PWM_MspInit+0xcc>)
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f76:	4b15      	ldr	r3, [pc, #84]	@ (8001fcc <HAL_TIM_PWM_MspInit+0xcc>)
 8001f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	4b12      	ldr	r3, [pc, #72]	@ (8001fcc <HAL_TIM_PWM_MspInit+0xcc>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f86:	4a11      	ldr	r2, [pc, #68]	@ (8001fcc <HAL_TIM_PWM_MspInit+0xcc>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fcc <HAL_TIM_PWM_MspInit+0xcc>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f9a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001fac:	230a      	movs	r3, #10
 8001fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 031c 	add.w	r3, r7, #28
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fba:	f002 fab1 	bl	8004520 <HAL_GPIO_Init>
}
 8001fbe:	bf00      	nop
 8001fc0:	3730      	adds	r7, #48	@ 0x30
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40012c00 	.word	0x40012c00
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40000800 	.word	0x40000800

08001fd4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	@ 0x28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a17      	ldr	r2, [pc, #92]	@ (8002050 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d128      	bne.n	8002048 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ff6:	4b17      	ldr	r3, [pc, #92]	@ (8002054 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffa:	4a16      	ldr	r2, [pc, #88]	@ (8002054 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	6593      	str	r3, [r2, #88]	@ 0x58
 8002002:	4b14      	ldr	r3, [pc, #80]	@ (8002054 <HAL_TIM_Encoder_MspInit+0x80>)
 8002004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200e:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <HAL_TIM_Encoder_MspInit+0x80>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002012:	4a10      	ldr	r2, [pc, #64]	@ (8002054 <HAL_TIM_Encoder_MspInit+0x80>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800201a:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <HAL_TIM_Encoder_MspInit+0x80>)
 800201c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002026:	2350      	movs	r3, #80	@ 0x50
 8002028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002036:	2302      	movs	r3, #2
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	4619      	mov	r1, r3
 8002040:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002044:	f002 fa6c 	bl	8004520 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002048:	bf00      	nop
 800204a:	3728      	adds	r7, #40	@ 0x28
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40000400 	.word	0x40000400
 8002054:	40021000 	.word	0x40021000

08002058 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	@ 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a35      	ldr	r2, [pc, #212]	@ (800214c <HAL_TIM_MspPostInit+0xf4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d11e      	bne.n	80020b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207a:	4b35      	ldr	r3, [pc, #212]	@ (8002150 <HAL_TIM_MspPostInit+0xf8>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207e:	4a34      	ldr	r2, [pc, #208]	@ (8002150 <HAL_TIM_MspPostInit+0xf8>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002086:	4b32      	ldr	r3, [pc, #200]	@ (8002150 <HAL_TIM_MspPostInit+0xf8>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002092:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80020a4:	2306      	movs	r3, #6
 80020a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	4619      	mov	r1, r3
 80020ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020b2:	f002 fa35 	bl	8004520 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80020b6:	e044      	b.n	8002142 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020c0:	d11d      	bne.n	80020fe <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c2:	4b23      	ldr	r3, [pc, #140]	@ (8002150 <HAL_TIM_MspPostInit+0xf8>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c6:	4a22      	ldr	r2, [pc, #136]	@ (8002150 <HAL_TIM_MspPostInit+0xf8>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ce:	4b20      	ldr	r3, [pc, #128]	@ (8002150 <HAL_TIM_MspPostInit+0xf8>)
 80020d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020da:	2303      	movs	r3, #3
 80020dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020ea:	2301      	movs	r3, #1
 80020ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	4619      	mov	r1, r3
 80020f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020f8:	f002 fa12 	bl	8004520 <HAL_GPIO_Init>
}
 80020fc:	e021      	b.n	8002142 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM4)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a14      	ldr	r2, [pc, #80]	@ (8002154 <HAL_TIM_MspPostInit+0xfc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d11c      	bne.n	8002142 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002108:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <HAL_TIM_MspPostInit+0xf8>)
 800210a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210c:	4a10      	ldr	r2, [pc, #64]	@ (8002150 <HAL_TIM_MspPostInit+0xf8>)
 800210e:	f043 0302 	orr.w	r3, r3, #2
 8002112:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002114:	4b0e      	ldr	r3, [pc, #56]	@ (8002150 <HAL_TIM_MspPostInit+0xf8>)
 8002116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_CH4_M_SCTR_LIDAR_Pin;
 8002120:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002132:	2302      	movs	r3, #2
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM4_CH4_M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	4806      	ldr	r0, [pc, #24]	@ (8002158 <HAL_TIM_MspPostInit+0x100>)
 800213e:	f002 f9ef 	bl	8004520 <HAL_GPIO_Init>
}
 8002142:	bf00      	nop
 8002144:	3728      	adds	r7, #40	@ 0x28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40012c00 	.word	0x40012c00
 8002150:	40021000 	.word	0x40021000
 8002154:	40000800 	.word	0x40000800
 8002158:	48000400 	.word	0x48000400

0800215c <Start_Motors>:
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
    TIM1->CCR1 = 0;
    TIM1->CCR2 = 0;
}

void Start_Motors(void) {
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002160:	2100      	movs	r1, #0
 8002162:	4807      	ldr	r0, [pc, #28]	@ (8002180 <Start_Motors+0x24>)
 8002164:	f004 fad2 	bl	800670c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002168:	2104      	movs	r1, #4
 800216a:	4805      	ldr	r0, [pc, #20]	@ (8002180 <Start_Motors+0x24>)
 800216c:	f004 face 	bl	800670c <HAL_TIM_PWM_Start>
    TIM1->CCR1 = 0;
 8002170:	4b04      	ldr	r3, [pc, #16]	@ (8002184 <Start_Motors+0x28>)
 8002172:	2200      	movs	r2, #0
 8002174:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = 0;
 8002176:	4b03      	ldr	r3, [pc, #12]	@ (8002184 <Start_Motors+0x28>)
 8002178:	2200      	movs	r2, #0
 800217a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000b90 	.word	0x20000b90
 8002184:	40012c00 	.word	0x40012c00

08002188 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800218c:	4b22      	ldr	r3, [pc, #136]	@ (8002218 <MX_USART2_UART_Init+0x90>)
 800218e:	4a23      	ldr	r2, [pc, #140]	@ (800221c <MX_USART2_UART_Init+0x94>)
 8002190:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002192:	4b21      	ldr	r3, [pc, #132]	@ (8002218 <MX_USART2_UART_Init+0x90>)
 8002194:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002198:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800219a:	4b1f      	ldr	r3, [pc, #124]	@ (8002218 <MX_USART2_UART_Init+0x90>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002218 <MX_USART2_UART_Init+0x90>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002218 <MX_USART2_UART_Init+0x90>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <MX_USART2_UART_Init+0x90>)
 80021ae:	220c      	movs	r2, #12
 80021b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b2:	4b19      	ldr	r3, [pc, #100]	@ (8002218 <MX_USART2_UART_Init+0x90>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b8:	4b17      	ldr	r3, [pc, #92]	@ (8002218 <MX_USART2_UART_Init+0x90>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021be:	4b16      	ldr	r3, [pc, #88]	@ (8002218 <MX_USART2_UART_Init+0x90>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021c4:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <MX_USART2_UART_Init+0x90>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021ca:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <MX_USART2_UART_Init+0x90>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021d0:	4811      	ldr	r0, [pc, #68]	@ (8002218 <MX_USART2_UART_Init+0x90>)
 80021d2:	f005 fa1b 	bl	800760c <HAL_UART_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80021dc:	f7ff f9c6 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021e0:	2100      	movs	r1, #0
 80021e2:	480d      	ldr	r0, [pc, #52]	@ (8002218 <MX_USART2_UART_Init+0x90>)
 80021e4:	f006 fb2f 	bl	8008846 <HAL_UARTEx_SetTxFifoThreshold>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80021ee:	f7ff f9bd 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021f2:	2100      	movs	r1, #0
 80021f4:	4808      	ldr	r0, [pc, #32]	@ (8002218 <MX_USART2_UART_Init+0x90>)
 80021f6:	f006 fb64 	bl	80088c2 <HAL_UARTEx_SetRxFifoThreshold>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002200:	f7ff f9b4 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002204:	4804      	ldr	r0, [pc, #16]	@ (8002218 <MX_USART2_UART_Init+0x90>)
 8002206:	f006 fae5 	bl	80087d4 <HAL_UARTEx_DisableFifoMode>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002210:	f7ff f9ac 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000cc0 	.word	0x20000cc0
 800221c:	40004400 	.word	0x40004400

08002220 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002224:	4b22      	ldr	r3, [pc, #136]	@ (80022b0 <MX_USART3_UART_Init+0x90>)
 8002226:	4a23      	ldr	r2, [pc, #140]	@ (80022b4 <MX_USART3_UART_Init+0x94>)
 8002228:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800222a:	4b21      	ldr	r3, [pc, #132]	@ (80022b0 <MX_USART3_UART_Init+0x90>)
 800222c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002230:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002232:	4b1f      	ldr	r3, [pc, #124]	@ (80022b0 <MX_USART3_UART_Init+0x90>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002238:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <MX_USART3_UART_Init+0x90>)
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800223e:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <MX_USART3_UART_Init+0x90>)
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002244:	4b1a      	ldr	r3, [pc, #104]	@ (80022b0 <MX_USART3_UART_Init+0x90>)
 8002246:	220c      	movs	r2, #12
 8002248:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800224a:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <MX_USART3_UART_Init+0x90>)
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002250:	4b17      	ldr	r3, [pc, #92]	@ (80022b0 <MX_USART3_UART_Init+0x90>)
 8002252:	2200      	movs	r2, #0
 8002254:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002256:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <MX_USART3_UART_Init+0x90>)
 8002258:	2200      	movs	r2, #0
 800225a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800225c:	4b14      	ldr	r3, [pc, #80]	@ (80022b0 <MX_USART3_UART_Init+0x90>)
 800225e:	2200      	movs	r2, #0
 8002260:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002262:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <MX_USART3_UART_Init+0x90>)
 8002264:	2200      	movs	r2, #0
 8002266:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002268:	4811      	ldr	r0, [pc, #68]	@ (80022b0 <MX_USART3_UART_Init+0x90>)
 800226a:	f005 f9cf 	bl	800760c <HAL_UART_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002274:	f7ff f97a 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002278:	2100      	movs	r1, #0
 800227a:	480d      	ldr	r0, [pc, #52]	@ (80022b0 <MX_USART3_UART_Init+0x90>)
 800227c:	f006 fae3 	bl	8008846 <HAL_UARTEx_SetTxFifoThreshold>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002286:	f7ff f971 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800228a:	2100      	movs	r1, #0
 800228c:	4808      	ldr	r0, [pc, #32]	@ (80022b0 <MX_USART3_UART_Init+0x90>)
 800228e:	f006 fb18 	bl	80088c2 <HAL_UARTEx_SetRxFifoThreshold>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002298:	f7ff f968 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800229c:	4804      	ldr	r0, [pc, #16]	@ (80022b0 <MX_USART3_UART_Init+0x90>)
 800229e:	f006 fa99 	bl	80087d4 <HAL_UARTEx_DisableFifoMode>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80022a8:	f7ff f960 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000d54 	.word	0x20000d54
 80022b4:	40004800 	.word	0x40004800

080022b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b09c      	sub	sp, #112	@ 0x70
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022d0:	f107 0318 	add.w	r3, r7, #24
 80022d4:	2244      	movs	r2, #68	@ 0x44
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f007 fe59 	bl	8009f90 <memset>
  if(uartHandle->Instance==USART2)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a52      	ldr	r2, [pc, #328]	@ (800242c <HAL_UART_MspInit+0x174>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d137      	bne.n	8002358 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022e8:	2302      	movs	r3, #2
 80022ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022ec:	2300      	movs	r3, #0
 80022ee:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022f0:	f107 0318 	add.w	r3, r7, #24
 80022f4:	4618      	mov	r0, r3
 80022f6:	f003 f88b 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002300:	f7ff f934 	bl	800156c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002304:	4b4a      	ldr	r3, [pc, #296]	@ (8002430 <HAL_UART_MspInit+0x178>)
 8002306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002308:	4a49      	ldr	r2, [pc, #292]	@ (8002430 <HAL_UART_MspInit+0x178>)
 800230a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800230e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002310:	4b47      	ldr	r3, [pc, #284]	@ (8002430 <HAL_UART_MspInit+0x178>)
 8002312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231c:	4b44      	ldr	r3, [pc, #272]	@ (8002430 <HAL_UART_MspInit+0x178>)
 800231e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002320:	4a43      	ldr	r2, [pc, #268]	@ (8002430 <HAL_UART_MspInit+0x178>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002328:	4b41      	ldr	r3, [pc, #260]	@ (8002430 <HAL_UART_MspInit+0x178>)
 800232a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002334:	230c      	movs	r3, #12
 8002336:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002344:	2307      	movs	r3, #7
 8002346:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002348:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800234c:	4619      	mov	r1, r3
 800234e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002352:	f002 f8e5 	bl	8004520 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002356:	e065      	b.n	8002424 <HAL_UART_MspInit+0x16c>
  else if(uartHandle->Instance==USART3)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a35      	ldr	r2, [pc, #212]	@ (8002434 <HAL_UART_MspInit+0x17c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d160      	bne.n	8002424 <HAL_UART_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002362:	2304      	movs	r3, #4
 8002364:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800236a:	f107 0318 	add.w	r3, r7, #24
 800236e:	4618      	mov	r0, r3
 8002370:	f003 f84e 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800237a:	f7ff f8f7 	bl	800156c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800237e:	4b2c      	ldr	r3, [pc, #176]	@ (8002430 <HAL_UART_MspInit+0x178>)
 8002380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002382:	4a2b      	ldr	r2, [pc, #172]	@ (8002430 <HAL_UART_MspInit+0x178>)
 8002384:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002388:	6593      	str	r3, [r2, #88]	@ 0x58
 800238a:	4b29      	ldr	r3, [pc, #164]	@ (8002430 <HAL_UART_MspInit+0x178>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002396:	4b26      	ldr	r3, [pc, #152]	@ (8002430 <HAL_UART_MspInit+0x178>)
 8002398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800239a:	4a25      	ldr	r2, [pc, #148]	@ (8002430 <HAL_UART_MspInit+0x178>)
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023a2:	4b23      	ldr	r3, [pc, #140]	@ (8002430 <HAL_UART_MspInit+0x178>)
 80023a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_LIDAR_Pin|USART3_RX_LIDAR_Pin;
 80023ae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80023b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	2302      	movs	r3, #2
 80023b6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	2300      	movs	r3, #0
 80023be:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023c0:	2307      	movs	r3, #7
 80023c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80023c8:	4619      	mov	r1, r3
 80023ca:	481b      	ldr	r0, [pc, #108]	@ (8002438 <HAL_UART_MspInit+0x180>)
 80023cc:	f002 f8a8 	bl	8004520 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 80023d0:	4b1a      	ldr	r3, [pc, #104]	@ (800243c <HAL_UART_MspInit+0x184>)
 80023d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002440 <HAL_UART_MspInit+0x188>)
 80023d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80023d6:	4b19      	ldr	r3, [pc, #100]	@ (800243c <HAL_UART_MspInit+0x184>)
 80023d8:	221c      	movs	r2, #28
 80023da:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023dc:	4b17      	ldr	r3, [pc, #92]	@ (800243c <HAL_UART_MspInit+0x184>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023e2:	4b16      	ldr	r3, [pc, #88]	@ (800243c <HAL_UART_MspInit+0x184>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023e8:	4b14      	ldr	r3, [pc, #80]	@ (800243c <HAL_UART_MspInit+0x184>)
 80023ea:	2280      	movs	r2, #128	@ 0x80
 80023ec:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023ee:	4b13      	ldr	r3, [pc, #76]	@ (800243c <HAL_UART_MspInit+0x184>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023f4:	4b11      	ldr	r3, [pc, #68]	@ (800243c <HAL_UART_MspInit+0x184>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80023fa:	4b10      	ldr	r3, [pc, #64]	@ (800243c <HAL_UART_MspInit+0x184>)
 80023fc:	2220      	movs	r2, #32
 80023fe:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002400:	4b0e      	ldr	r3, [pc, #56]	@ (800243c <HAL_UART_MspInit+0x184>)
 8002402:	2200      	movs	r2, #0
 8002404:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002406:	480d      	ldr	r0, [pc, #52]	@ (800243c <HAL_UART_MspInit+0x184>)
 8002408:	f001 fe18 	bl	800403c <HAL_DMA_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_UART_MspInit+0x15e>
      Error_Handler();
 8002412:	f7ff f8ab 	bl	800156c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a08      	ldr	r2, [pc, #32]	@ (800243c <HAL_UART_MspInit+0x184>)
 800241a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800241e:	4a07      	ldr	r2, [pc, #28]	@ (800243c <HAL_UART_MspInit+0x184>)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002424:	bf00      	nop
 8002426:	3770      	adds	r7, #112	@ 0x70
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40004400 	.word	0x40004400
 8002430:	40021000 	.word	0x40021000
 8002434:	40004800 	.word	0x40004800
 8002438:	48000400 	.word	0x48000400
 800243c:	20000de8 	.word	0x20000de8
 8002440:	40020008 	.word	0x40020008

08002444 <LIDAR_Init>:

/*
 * @brief Initialization of the lidar
 * @param
 */
void LIDAR_Init(LIDAR_HandleTypeDef_t * hlidar){
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	hlidar->huart = &huart3;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a09      	ldr	r2, [pc, #36]	@ (8002474 <LIDAR_Init+0x30>)
 8002450:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, DEV_EN_LIDAR_Pin, GPIO_PIN_SET);
 8002452:	2201      	movs	r2, #1
 8002454:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002458:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800245c:	f002 f9e2 	bl	8004824 <HAL_GPIO_WritePin>
	// Enable M_EN lidar
	HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_SET);
 8002460:	2201      	movs	r2, #1
 8002462:	2104      	movs	r1, #4
 8002464:	4804      	ldr	r0, [pc, #16]	@ (8002478 <LIDAR_Init+0x34>)
 8002466:	f002 f9dd 	bl	8004824 <HAL_GPIO_WritePin>

}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000d54 	.word	0x20000d54
 8002478:	48000400 	.word	0x48000400

0800247c <LIDAR_Start>:

/*
 * @brief
 * @param
 */
HAL_StatusTypeDef LIDAR_Start(LIDAR_HandleTypeDef_t * hlidar){
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	uint8_t lidar_command[2] = {START_CMD_LIDAR, SCAN_CMD_LIDAR};
 8002484:	f246 03a5 	movw	r3, #24741	@ 0x60a5
 8002488:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_UART_Transmit(hlidar->huart, lidar_command, 2, 2000);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	f107 010c 	add.w	r1, r7, #12
 8002492:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002496:	2202      	movs	r2, #2
 8002498:	f005 f908 	bl	80076ac <HAL_UART_Transmit>
 800249c:	4603      	mov	r3, r0
 800249e:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK){
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10a      	bne.n	80024bc <LIDAR_Start+0x40>
		HAL_UART_Receive_DMA(hlidar->huart, hlidar->data_buff, DATA_BUFF_SIZE_LIDAR);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3329      	adds	r3, #41	@ 0x29
 80024ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024b2:	4619      	mov	r1, r3
 80024b4:	f005 fa50 	bl	8007958 <HAL_UART_Receive_DMA>
		return status;
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	e000      	b.n	80024be <LIDAR_Start+0x42>
	}
	else{
		return status;
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <LIDAR_Stop>:

/*
 * @brief
 * @param
 */
HAL_StatusTypeDef LIDAR_Stop(LIDAR_HandleTypeDef_t * hlidar){
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
	uint8_t lidar_command[2] = {START_CMD_LIDAR, STOP_CMD_LIDAR};
 80024ce:	f246 53a5 	movw	r3, #26021	@ 0x65a5
 80024d2:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_UART_Transmit(hlidar->huart, lidar_command, 2, 2000);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	f107 010c 	add.w	r1, r7, #12
 80024dc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80024e0:	2202      	movs	r2, #2
 80024e2:	f005 f8e3 	bl	80076ac <HAL_UART_Transmit>
 80024e6:	4603      	mov	r3, r0
 80024e8:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK){
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <LIDAR_Stop+0x2e>
		return status;
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	e000      	b.n	80024f6 <LIDAR_Stop+0x30>
	}
	else{
		return status;
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <LIDAR_Get_Info>:

/*
 * @brief
 * @param
 */
HAL_StatusTypeDef LIDAR_Get_Info(LIDAR_HandleTypeDef_t * hlidar){
 8002500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002502:	b09f      	sub	sp, #124	@ 0x7c
 8002504:	af10      	add	r7, sp, #64	@ 0x40
 8002506:	6278      	str	r0, [r7, #36]	@ 0x24
	uint8_t lidar_command[2] = {START_CMD_LIDAR, GET_INFO_CMD_LIDAR};
 8002508:	f249 03a5 	movw	r3, #37029	@ 0x90a5
 800250c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	LIDAR_DeviceInfo_t * device_info;
	HAL_StatusTypeDef status = HAL_UART_Transmit(hlidar->huart, lidar_command, 2, 2000);
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002516:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800251a:	2202      	movs	r2, #2
 800251c:	f005 f8c6 	bl	80076ac <HAL_UART_Transmit>
 8002520:	4603      	mov	r3, r0
 8002522:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if(status == HAL_OK){
 8002526:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800252a:	2b00      	cmp	r3, #0
 800252c:	f040 8093 	bne.w	8002656 <LIDAR_Get_Info+0x156>
		HAL_UART_Receive(hlidar->huart, hlidar->info_buff, INFO_BUFF_SIZE_LIDAR, 2000);
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002536:	1d19      	adds	r1, r3, #4
 8002538:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800253c:	221b      	movs	r2, #27
 800253e:	f005 f943 	bl	80077c8 <HAL_UART_Receive>
		device_info->start_sign = (hlidar->info_buff[0]<<8)|hlidar->info_buff[1];
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	791b      	ldrb	r3, [r3, #4]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	b21a      	sxth	r2, r3
 800254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254c:	795b      	ldrb	r3, [r3, #5]
 800254e:	b21b      	sxth	r3, r3
 8002550:	4313      	orrs	r3, r2
 8002552:	b21b      	sxth	r3, r3
 8002554:	b29a      	uxth	r2, r3
 8002556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002558:	801a      	strh	r2, [r3, #0]
		device_info->lenght = (hlidar->info_buff[2])|(hlidar->info_buff[3]<<8)|(hlidar->info_buff[4]<<16);
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	799b      	ldrb	r3, [r3, #6]
 800255e:	461a      	mov	r2, r3
 8002560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002562:	79db      	ldrb	r3, [r3, #7]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	431a      	orrs	r2, r3
 8002568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256a:	7a1b      	ldrb	r3, [r3, #8]
 800256c:	041b      	lsls	r3, r3, #16
 800256e:	4313      	orrs	r3, r2
 8002570:	461a      	mov	r2, r3
 8002572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002574:	605a      	str	r2, [r3, #4]
		device_info->mode = hlidar->info_buff[5];
 8002576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002578:	7a5a      	ldrb	r2, [r3, #9]
 800257a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800257c:	721a      	strb	r2, [r3, #8]
		device_info->type_code = hlidar->info_buff[6];
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	7a9a      	ldrb	r2, [r3, #10]
 8002582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002584:	725a      	strb	r2, [r3, #9]
		device_info->model = hlidar->info_buff[7];
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	7ada      	ldrb	r2, [r3, #11]
 800258a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258c:	729a      	strb	r2, [r3, #10]
		snprintf(device_info->firmware_version,6,"%d.%d",hlidar->info_buff[8],hlidar->info_buff[9]);
 800258e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002590:	f103 000b 	add.w	r0, r3, #11
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	7b1b      	ldrb	r3, [r3, #12]
 8002598:	461a      	mov	r2, r3
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	7b5b      	ldrb	r3, [r3, #13]
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	4613      	mov	r3, r2
 80025a2:	4a30      	ldr	r2, [pc, #192]	@ (8002664 <LIDAR_Get_Info+0x164>)
 80025a4:	2106      	movs	r1, #6
 80025a6:	f007 fbc7 	bl	8009d38 <sniprintf>
		device_info->hardware_version  = hlidar->info_buff[10];
 80025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ac:	7b9a      	ldrb	r2, [r3, #14]
 80025ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b0:	745a      	strb	r2, [r3, #17]
		snprintf(device_info->serial_number,17,"%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",hlidar->info_buff[11],hlidar->info_buff[12],hlidar->info_buff[13],hlidar->info_buff[14],hlidar->info_buff[15],hlidar->info_buff[16],hlidar->info_buff[17],hlidar->info_buff[18],hlidar->info_buff[19],hlidar->info_buff[20],hlidar->info_buff[21],hlidar->info_buff[22],hlidar->info_buff[23],hlidar->info_buff[24],hlidar->info_buff[25],hlidar->info_buff[26]);
 80025b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b4:	f103 0012 	add.w	r0, r3, #18
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	7bdb      	ldrb	r3, [r3, #15]
 80025bc:	469c      	mov	ip, r3
 80025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c0:	7c1b      	ldrb	r3, [r3, #16]
 80025c2:	461d      	mov	r5, r3
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	7c5b      	ldrb	r3, [r3, #17]
 80025c8:	461e      	mov	r6, r3
 80025ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025cc:	7c9b      	ldrb	r3, [r3, #18]
 80025ce:	623b      	str	r3, [r7, #32]
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	7cdb      	ldrb	r3, [r3, #19]
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	7d1b      	ldrb	r3, [r3, #20]
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	7d5b      	ldrb	r3, [r3, #21]
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	7d9b      	ldrb	r3, [r3, #22]
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ea:	7ddb      	ldrb	r3, [r3, #23]
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	7e1b      	ldrb	r3, [r3, #24]
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f6:	7e5b      	ldrb	r3, [r3, #25]
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fc:	7e9b      	ldrb	r3, [r3, #26]
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002602:	7edb      	ldrb	r3, [r3, #27]
 8002604:	461c      	mov	r4, r3
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	7f1b      	ldrb	r3, [r3, #28]
 800260a:	4619      	mov	r1, r3
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	7f5b      	ldrb	r3, [r3, #29]
 8002610:	461a      	mov	r2, r3
 8002612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002614:	7f9b      	ldrb	r3, [r3, #30]
 8002616:	930e      	str	r3, [sp, #56]	@ 0x38
 8002618:	920d      	str	r2, [sp, #52]	@ 0x34
 800261a:	910c      	str	r1, [sp, #48]	@ 0x30
 800261c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	920a      	str	r2, [sp, #40]	@ 0x28
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	9209      	str	r2, [sp, #36]	@ 0x24
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	9208      	str	r2, [sp, #32]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	9207      	str	r2, [sp, #28]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	9206      	str	r2, [sp, #24]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	9205      	str	r2, [sp, #20]
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	9204      	str	r2, [sp, #16]
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	9203      	str	r2, [sp, #12]
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	9302      	str	r3, [sp, #8]
 8002642:	9601      	str	r6, [sp, #4]
 8002644:	9500      	str	r5, [sp, #0]
 8002646:	4663      	mov	r3, ip
 8002648:	4a07      	ldr	r2, [pc, #28]	@ (8002668 <LIDAR_Get_Info+0x168>)
 800264a:	2111      	movs	r1, #17
 800264c:	f007 fb74 	bl	8009d38 <sniprintf>

		return status;
 8002650:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002654:	e001      	b.n	800265a <LIDAR_Get_Info+0x15a>
	}
	else{
		return status;
 8002656:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
	}
}
 800265a:	4618      	mov	r0, r3
 800265c:	373c      	adds	r7, #60	@ 0x3c
 800265e:	46bd      	mov	sp, r7
 8002660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002662:	bf00      	nop
 8002664:	0800da98 	.word	0x0800da98
 8002668:	0800daa0 	.word	0x0800daa0

0800266c <LIDAR_Get_Health_Status>:

/*
 * @brief
 * @param
 */
HAL_StatusTypeDef LIDAR_Get_Health_Status(LIDAR_HandleTypeDef_t * hlidar){
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	uint8_t lidar_command[2] = {START_CMD_LIDAR, GET_HEALTH_CMD_LIDAR};
 8002674:	f249 13a5 	movw	r3, #37285	@ 0x91a5
 8002678:	81bb      	strh	r3, [r7, #12]
	LIDAR_HealthStatus_t * health_status;
	HAL_StatusTypeDef status = HAL_UART_Transmit(hlidar->huart, lidar_command, 2, 2000);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	f107 010c 	add.w	r1, r7, #12
 8002682:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002686:	2202      	movs	r2, #2
 8002688:	f005 f810 	bl	80076ac <HAL_UART_Transmit>
 800268c:	4603      	mov	r3, r0
 800268e:	75fb      	strb	r3, [r7, #23]
	if(status == HAL_OK){
 8002690:	7dfb      	ldrb	r3, [r7, #23]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d146      	bne.n	8002724 <LIDAR_Get_Health_Status+0xb8>
		HAL_UART_Receive(hlidar->huart, hlidar->health_buff, HEALTH_BUFF_SIZE_LIDAR, 2000);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f103 011f 	add.w	r1, r3, #31
 80026a0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80026a4:	220a      	movs	r2, #10
 80026a6:	f005 f88f 	bl	80077c8 <HAL_UART_Receive>
		health_status->start_sign = (hlidar->health_buff[0]<<8)|hlidar->health_buff[1];
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	7fdb      	ldrb	r3, [r3, #31]
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	b21a      	sxth	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026b8:	b21b      	sxth	r3, r3
 80026ba:	4313      	orrs	r3, r2
 80026bc:	b21b      	sxth	r3, r3
 80026be:	b29a      	uxth	r2, r3
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	801a      	strh	r2, [r3, #0]
		health_status->lenght = (hlidar->health_buff[2])|(hlidar->health_buff[3]<<8)|(hlidar->health_buff[4]<<16);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80026ca:	461a      	mov	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80026dc:	041b      	lsls	r3, r3, #16
 80026de:	4313      	orrs	r3, r2
 80026e0:	461a      	mov	r2, r3
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	605a      	str	r2, [r3, #4]
		health_status->mode = hlidar->health_buff[5];
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	721a      	strb	r2, [r3, #8]
		health_status->type_code = hlidar->health_buff[6];
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	725a      	strb	r2, [r3, #9]
		health_status->status_code = hlidar->health_buff[7];
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	729a      	strb	r2, [r3, #10]
		health_status->error_code = hlidar->health_buff[8]|(hlidar->health_buff[9]<<8);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800270a:	b21a      	sxth	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	b21b      	sxth	r3, r3
 8002716:	4313      	orrs	r3, r2
 8002718:	b21b      	sxth	r3, r3
 800271a:	b29a      	uxth	r2, r3
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	819a      	strh	r2, [r3, #12]

		return status;
 8002720:	7dfb      	ldrb	r3, [r7, #23]
 8002722:	e000      	b.n	8002726 <LIDAR_Get_Health_Status+0xba>
	}
	else{
		return status;
 8002724:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <LIDAR_process_frame>:

/*
 * @brief
 * @param
 */
void LIDAR_process_frame(LIDAR_HandleTypeDef_t * hlidar) {
 8002730:	b5b0      	push	{r4, r5, r7, lr}
 8002732:	b08c      	sub	sp, #48	@ 0x30
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
    uint16_t Si;
    float Di;
    float Ai;
    float AngleFSA = (hlidar->process_frame->FSA >> 1) / 64.0; // Angle initial (en degrés)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800273e:	889b      	ldrh	r3, [r3, #4]
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	b29b      	uxth	r3, r3
 8002744:	4618      	mov	r0, r3
 8002746:	f7fd ff15 	bl	8000574 <__aeabi_i2d>
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	4b8e      	ldr	r3, [pc, #568]	@ (8002988 <LIDAR_process_frame+0x258>)
 8002750:	f7fe f8a4 	bl	800089c <__aeabi_ddiv>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	f7fe fa6c 	bl	8000c38 <__aeabi_d2f>
 8002760:	4603      	mov	r3, r0
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
    float AngleLSA = (hlidar->process_frame->LSA >> 1) / 64.0; // Angle final (en degrés)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800276a:	88db      	ldrh	r3, [r3, #6]
 800276c:	085b      	lsrs	r3, r3, #1
 800276e:	b29b      	uxth	r3, r3
 8002770:	4618      	mov	r0, r3
 8002772:	f7fd feff 	bl	8000574 <__aeabi_i2d>
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	4b83      	ldr	r3, [pc, #524]	@ (8002988 <LIDAR_process_frame+0x258>)
 800277c:	f7fe f88e 	bl	800089c <__aeabi_ddiv>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	f7fe fa56 	bl	8000c38 <__aeabi_d2f>
 800278c:	4603      	mov	r3, r0
 800278e:	623b      	str	r3, [r7, #32]
    float diffAngle = AngleLSA - AngleFSA; // Différence d'angle (en degrés)
 8002790:	ed97 7a08 	vldr	s14, [r7, #32]
 8002794:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800279c:	edc7 7a07 	vstr	s15, [r7, #28]
    int LSN = hlidar->process_frame->LSN;     // Nombre d'échantillons dans le paquet
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 80027a6:	78db      	ldrb	r3, [r3, #3]
 80027a8:	61bb      	str	r3, [r7, #24]
    int index;

    for (int i = 0; i < hlidar->process_frame->index / 2; i++) {
 80027aa:	2300      	movs	r3, #0
 80027ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027ae:	e0cc      	b.n	800294a <LIDAR_process_frame+0x21a>
        // Extraction des données de distance
        Si = hlidar->process_frame->frame_buff[2 * i] | (hlidar->process_frame->frame_buff[2 * i + 1] << 8);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8d3 2414 	ldr.w	r2, [r3, #1044]	@ 0x414
 80027b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	f893 33f3 	ldrb.w	r3, [r3, #1011]	@ 0x3f3
 80027c0:	b21a      	sxth	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f8d3 1414 	ldr.w	r1, [r3, #1044]	@ 0x414
 80027c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	3301      	adds	r3, #1
 80027ce:	440b      	add	r3, r1
 80027d0:	f893 33f3 	ldrb.w	r3, [r3, #1011]	@ 0x3f3
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	b21b      	sxth	r3, r3
 80027d8:	4313      	orrs	r3, r2
 80027da:	b21b      	sxth	r3, r3
 80027dc:	82fb      	strh	r3, [r7, #22]
        Di = Si / 4.0; // Distance en mm
 80027de:	8afb      	ldrh	r3, [r7, #22]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fd fec7 	bl	8000574 <__aeabi_i2d>
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	4b68      	ldr	r3, [pc, #416]	@ (800298c <LIDAR_process_frame+0x25c>)
 80027ec:	f7fe f856 	bl	800089c <__aeabi_ddiv>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4610      	mov	r0, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	f7fe fa1e 	bl	8000c38 <__aeabi_d2f>
 80027fc:	4603      	mov	r3, r0
 80027fe:	613b      	str	r3, [r7, #16]

        // Calcul de l'angle sans correction
        Ai = (diffAngle / (LSN - 1)) * i + AngleFSA;
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	3b01      	subs	r3, #1
 8002804:	ee07 3a90 	vmov	s15, r3
 8002808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800280c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800281e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002822:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800282a:	edc7 7a03 	vstr	s15, [r7, #12]

        // Correction de l'angle
        float AngCorrect = 0.0;
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (Di != 0) {
 8002834:	edd7 7a04 	vldr	s15, [r7, #16]
 8002838:	eef5 7a40 	vcmp.f32	s15, #0.0
 800283c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002840:	d03d      	beq.n	80028be <LIDAR_process_frame+0x18e>
            AngCorrect = atan(21.8 * (155.3 - Di) / (155.3 * Di)) * (180.0 / 3.141592653589793); // Conversion en degrés
 8002842:	6938      	ldr	r0, [r7, #16]
 8002844:	f7fd fea8 	bl	8000598 <__aeabi_f2d>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	a148      	add	r1, pc, #288	@ (adr r1, 8002970 <LIDAR_process_frame+0x240>)
 800284e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002852:	f7fd fd41 	bl	80002d8 <__aeabi_dsub>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	a346      	add	r3, pc, #280	@ (adr r3, 8002978 <LIDAR_process_frame+0x248>)
 8002860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002864:	f7fd fef0 	bl	8000648 <__aeabi_dmul>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4614      	mov	r4, r2
 800286e:	461d      	mov	r5, r3
 8002870:	6938      	ldr	r0, [r7, #16]
 8002872:	f7fd fe91 	bl	8000598 <__aeabi_f2d>
 8002876:	a33e      	add	r3, pc, #248	@ (adr r3, 8002970 <LIDAR_process_frame+0x240>)
 8002878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287c:	f7fd fee4 	bl	8000648 <__aeabi_dmul>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4620      	mov	r0, r4
 8002886:	4629      	mov	r1, r5
 8002888:	f7fe f808 	bl	800089c <__aeabi_ddiv>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	ec43 2b17 	vmov	d7, r2, r3
 8002894:	eeb0 0a47 	vmov.f32	s0, s14
 8002898:	eef0 0a67 	vmov.f32	s1, s15
 800289c:	f00a febc 	bl	800d618 <atan>
 80028a0:	ec51 0b10 	vmov	r0, r1, d0
 80028a4:	a336      	add	r3, pc, #216	@ (adr r3, 8002980 <LIDAR_process_frame+0x250>)
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	f7fd fecd 	bl	8000648 <__aeabi_dmul>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	f7fe f9bf 	bl	8000c38 <__aeabi_d2f>
 80028ba:	4603      	mov	r3, r0
 80028bc:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        Ai += AngCorrect;
 80028be:	ed97 7a03 	vldr	s14, [r7, #12]
 80028c2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80028c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ca:	edc7 7a03 	vstr	s15, [r7, #12]

        // Index du point dans le buffer circulaire
        index = (int)round(Ai);
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f7fd fe62 	bl	8000598 <__aeabi_f2d>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	ec43 2b10 	vmov	d0, r2, r3
 80028dc:	f00b f83c 	bl	800d958 <round>
 80028e0:	ec53 2b10 	vmov	r2, r3, d0
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	f7fe f95e 	bl	8000ba8 <__aeabi_d2iz>
 80028ec:	4603      	mov	r3, r0
 80028ee:	60bb      	str	r3, [r7, #8]

        // Filtrage des points trop proches ou trop loin
        if (Di > 1500 || Di < 40) {
 80028f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028f4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002990 <LIDAR_process_frame+0x260>
 80028f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002900:	dc08      	bgt.n	8002914 <LIDAR_process_frame+0x1e4>
 8002902:	edd7 7a04 	vldr	s15, [r7, #16]
 8002906:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8002994 <LIDAR_process_frame+0x264>
 800290a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800290e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002912:	d509      	bpl.n	8002928 <LIDAR_process_frame+0x1f8>
            hlidar->process_frame->point_buff[index] = 0;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	f502 728a 	add.w	r2, r2, #276	@ 0x114
 8002920:	2100      	movs	r1, #0
 8002922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002926:	e00d      	b.n	8002944 <LIDAR_process_frame+0x214>
        } else {
            hlidar->process_frame->point_buff[index] = (int)Di;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800292e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002932:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002936:	ee17 1a90 	vmov	r1, s15
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	f502 728a 	add.w	r2, r2, #276	@ 0x114
 8002940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < hlidar->process_frame->index / 2; i++) {
 8002944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002946:	3301      	adds	r3, #1
 8002948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8002950:	7a9b      	ldrb	r3, [r3, #10]
 8002952:	085b      	lsrs	r3, r3, #1
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800295a:	4293      	cmp	r3, r2
 800295c:	f6ff af28 	blt.w	80027b0 <LIDAR_process_frame+0x80>
        }
    }
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3730      	adds	r7, #48	@ 0x30
 8002966:	46bd      	mov	sp, r7
 8002968:	bdb0      	pop	{r4, r5, r7, pc}
 800296a:	bf00      	nop
 800296c:	f3af 8000 	nop.w
 8002970:	9999999a 	.word	0x9999999a
 8002974:	40636999 	.word	0x40636999
 8002978:	cccccccd 	.word	0xcccccccd
 800297c:	4035cccc 	.word	0x4035cccc
 8002980:	1a63c1f8 	.word	0x1a63c1f8
 8002984:	404ca5dc 	.word	0x404ca5dc
 8002988:	40500000 	.word	0x40500000
 800298c:	40100000 	.word	0x40100000
 8002990:	44bb8000 	.word	0x44bb8000
 8002994:	42200000 	.word	0x42200000

08002998 <LIDAR_get_point>:

/*
 * @brief
 * @param
 */
void LIDAR_get_point(LIDAR_HandleTypeDef_t *hlidar) {
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
    uint16_t frame_start = 0, frame_end = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	81fb      	strh	r3, [r7, #14]
 80029a4:	2300      	movs	r3, #0
 80029a6:	81bb      	strh	r3, [r7, #12]

    for (int i = 0; i < DATA_BUFF_SIZE_LIDAR; i++) {
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	e152      	b.n	8002c54 <LIDAR_get_point+0x2bc>
        // Réponse à la commande SCAN pour détecter le début des trames
        if (i == 0) {
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d145      	bne.n	8002a40 <LIDAR_get_point+0xa8>
            if ((hlidar->data_buff[i] == 0xA5) &&
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4413      	add	r3, r2
 80029ba:	3329      	adds	r3, #41	@ 0x29
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2ba5      	cmp	r3, #165	@ 0xa5
 80029c0:	d13e      	bne.n	8002a40 <LIDAR_get_point+0xa8>
                (hlidar->data_buff[i + 1] == 0x5A) &&
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	3301      	adds	r3, #1
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
            if ((hlidar->data_buff[i] == 0xA5) &&
 80029ce:	2b5a      	cmp	r3, #90	@ 0x5a
 80029d0:	d136      	bne.n	8002a40 <LIDAR_get_point+0xa8>
                (hlidar->data_buff[i + 2] == 0x05) &&
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	3302      	adds	r3, #2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
                (hlidar->data_buff[i + 1] == 0x5A) &&
 80029de:	2b05      	cmp	r3, #5
 80029e0:	d12e      	bne.n	8002a40 <LIDAR_get_point+0xa8>
                (hlidar->data_buff[i + 3] == 0x00) &&
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	3303      	adds	r3, #3
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
                (hlidar->data_buff[i + 2] == 0x05) &&
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d126      	bne.n	8002a40 <LIDAR_get_point+0xa8>
                (hlidar->data_buff[i + 4] == 0x00) &&
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	3304      	adds	r3, #4
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	4413      	add	r3, r2
 80029fa:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
                (hlidar->data_buff[i + 3] == 0x00) &&
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d11e      	bne.n	8002a40 <LIDAR_get_point+0xa8>
                (hlidar->data_buff[i + 5] == 0x40) &&
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	3305      	adds	r3, #5
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
                (hlidar->data_buff[i + 4] == 0x00) &&
 8002a0e:	2b40      	cmp	r3, #64	@ 0x40
 8002a10:	d116      	bne.n	8002a40 <LIDAR_get_point+0xa8>
                (hlidar->data_buff[i + 6] == 0x81)) {
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	3306      	adds	r3, #6
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
                (hlidar->data_buff[i + 5] == 0x40) &&
 8002a1e:	2b81      	cmp	r3, #129	@ 0x81
 8002a20:	d10e      	bne.n	8002a40 <LIDAR_get_point+0xa8>
                printf("Scan Command Reply\r\n");
 8002a22:	4895      	ldr	r0, [pc, #596]	@ (8002c78 <LIDAR_get_point+0x2e0>)
 8002a24:	f007 f980 	bl	8009d28 <puts>
                hlidar->process_frame->index = 0;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8002a2e:	2200      	movs	r2, #0
 8002a30:	729a      	strb	r2, [r3, #10]
                i = 6;
 8002a32:	2306      	movs	r3, #6
 8002a34:	60bb      	str	r3, [r7, #8]
                frame_start = 7;
 8002a36:	2307      	movs	r3, #7
 8002a38:	81fb      	strh	r3, [r7, #14]
                frame_end = frame_start + 4;
 8002a3a:	89fb      	ldrh	r3, [r7, #14]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	81bb      	strh	r3, [r7, #12]
            }
        }

        // Extraction des données des trames
        if (i == frame_start) {
 8002a40:	89fb      	ldrh	r3, [r7, #14]
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d109      	bne.n	8002a5c <LIDAR_get_point+0xc4>
            hlidar->process_frame->PH = hlidar->data_buff[i];
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3329      	adds	r3, #41	@ 0x29
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8002a58:	801a      	strh	r2, [r3, #0]
 8002a5a:	e0f8      	b.n	8002c4e <LIDAR_get_point+0x2b6>
        }
        else if (i == frame_start + 1) {
 8002a5c:	89fb      	ldrh	r3, [r7, #14]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d113      	bne.n	8002a8e <LIDAR_get_point+0xf6>
            hlidar->process_frame->PH |= (hlidar->data_buff[i] << 8);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	b21a      	sxth	r2, r3
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	440b      	add	r3, r1
 8002a76:	3329      	adds	r3, #41	@ 0x29
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	021b      	lsls	r3, r3, #8
 8002a7c:	b21b      	sxth	r3, r3
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	b21a      	sxth	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8002a88:	b292      	uxth	r2, r2
 8002a8a:	801a      	strh	r2, [r3, #0]
 8002a8c:	e0df      	b.n	8002c4e <LIDAR_get_point+0x2b6>
        }
        else if (i == frame_start + 2) {
 8002a8e:	89fb      	ldrh	r3, [r7, #14]
 8002a90:	3302      	adds	r3, #2
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d109      	bne.n	8002aac <LIDAR_get_point+0x114>
            hlidar->process_frame->CT = hlidar->data_buff[i];
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	440a      	add	r2, r1
 8002aa4:	3229      	adds	r2, #41	@ 0x29
 8002aa6:	7812      	ldrb	r2, [r2, #0]
 8002aa8:	709a      	strb	r2, [r3, #2]
 8002aaa:	e0d0      	b.n	8002c4e <LIDAR_get_point+0x2b6>
        }
        else if (i == frame_start + 3) {
 8002aac:	89fb      	ldrh	r3, [r7, #14]
 8002aae:	3303      	adds	r3, #3
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d115      	bne.n	8002ae2 <LIDAR_get_point+0x14a>
            frame_end = frame_start + 9 + 2 * hlidar->data_buff[i];
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4413      	add	r3, r2
 8002abc:	3329      	adds	r3, #41	@ 0x29
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	89fb      	ldrh	r3, [r7, #14]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	3309      	adds	r3, #9
 8002acc:	81bb      	strh	r3, [r7, #12]
            hlidar->process_frame->LSN = hlidar->data_buff[i];
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	440a      	add	r2, r1
 8002ada:	3229      	adds	r2, #41	@ 0x29
 8002adc:	7812      	ldrb	r2, [r2, #0]
 8002ade:	70da      	strb	r2, [r3, #3]
 8002ae0:	e0b5      	b.n	8002c4e <LIDAR_get_point+0x2b6>
        }
        else if (i == frame_start + 4) {
 8002ae2:	89fb      	ldrh	r3, [r7, #14]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d109      	bne.n	8002b00 <LIDAR_get_point+0x168>
            hlidar->process_frame->FSA = hlidar->data_buff[i];
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	4413      	add	r3, r2
 8002af2:	3329      	adds	r3, #41	@ 0x29
 8002af4:	781a      	ldrb	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8002afc:	809a      	strh	r2, [r3, #4]
 8002afe:	e0a6      	b.n	8002c4e <LIDAR_get_point+0x2b6>
        }
        else if (i == frame_start + 5) {
 8002b00:	89fb      	ldrh	r3, [r7, #14]
 8002b02:	3305      	adds	r3, #5
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d113      	bne.n	8002b32 <LIDAR_get_point+0x19a>
            hlidar->process_frame->FSA |= (hlidar->data_buff[i] << 8);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8002b10:	889b      	ldrh	r3, [r3, #4]
 8002b12:	b21a      	sxth	r2, r3
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	440b      	add	r3, r1
 8002b1a:	3329      	adds	r3, #41	@ 0x29
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	b21b      	sxth	r3, r3
 8002b22:	4313      	orrs	r3, r2
 8002b24:	b21a      	sxth	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8002b2c:	b292      	uxth	r2, r2
 8002b2e:	809a      	strh	r2, [r3, #4]
 8002b30:	e08d      	b.n	8002c4e <LIDAR_get_point+0x2b6>
        }
        else if (i == frame_start + 6) {
 8002b32:	89fb      	ldrh	r3, [r7, #14]
 8002b34:	3306      	adds	r3, #6
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d109      	bne.n	8002b50 <LIDAR_get_point+0x1b8>
            hlidar->process_frame->LSA = hlidar->data_buff[i];
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	4413      	add	r3, r2
 8002b42:	3329      	adds	r3, #41	@ 0x29
 8002b44:	781a      	ldrb	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8002b4c:	80da      	strh	r2, [r3, #6]
 8002b4e:	e07e      	b.n	8002c4e <LIDAR_get_point+0x2b6>
        }
        else if (i == frame_start + 7) {
 8002b50:	89fb      	ldrh	r3, [r7, #14]
 8002b52:	3307      	adds	r3, #7
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d113      	bne.n	8002b82 <LIDAR_get_point+0x1ea>
            hlidar->process_frame->LSA |= (hlidar->data_buff[i] << 8);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8002b60:	88db      	ldrh	r3, [r3, #6]
 8002b62:	b21a      	sxth	r2, r3
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	440b      	add	r3, r1
 8002b6a:	3329      	adds	r3, #41	@ 0x29
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	b21b      	sxth	r3, r3
 8002b72:	4313      	orrs	r3, r2
 8002b74:	b21a      	sxth	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8002b7c:	b292      	uxth	r2, r2
 8002b7e:	80da      	strh	r2, [r3, #6]
 8002b80:	e065      	b.n	8002c4e <LIDAR_get_point+0x2b6>
        }
        else if (i == frame_start + 8) {
 8002b82:	89fb      	ldrh	r3, [r7, #14]
 8002b84:	3308      	adds	r3, #8
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d109      	bne.n	8002ba0 <LIDAR_get_point+0x208>
            hlidar->process_frame->CS = hlidar->data_buff[i];
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	4413      	add	r3, r2
 8002b92:	3329      	adds	r3, #41	@ 0x29
 8002b94:	781a      	ldrb	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8002b9c:	811a      	strh	r2, [r3, #8]
 8002b9e:	e056      	b.n	8002c4e <LIDAR_get_point+0x2b6>
        }
        else if (i == frame_start + 9) {
 8002ba0:	89fb      	ldrh	r3, [r7, #14]
 8002ba2:	3309      	adds	r3, #9
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d113      	bne.n	8002bd2 <LIDAR_get_point+0x23a>
            hlidar->process_frame->CS |= (hlidar->data_buff[i] << 8);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8002bb0:	891b      	ldrh	r3, [r3, #8]
 8002bb2:	b21a      	sxth	r2, r3
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	440b      	add	r3, r1
 8002bba:	3329      	adds	r3, #41	@ 0x29
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	b21b      	sxth	r3, r3
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	b21a      	sxth	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8002bcc:	b292      	uxth	r2, r2
 8002bce:	811a      	strh	r2, [r3, #8]
 8002bd0:	e03d      	b.n	8002c4e <LIDAR_get_point+0x2b6>
        }
        else if (i == frame_end) {
 8002bd2:	89bb      	ldrh	r3, [r7, #12]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d126      	bne.n	8002c28 <LIDAR_get_point+0x290>
            hlidar->process_frame->frame_buff[hlidar->process_frame->index++] = hlidar->data_buff[i];
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f8d3 1414 	ldr.w	r1, [r3, #1044]	@ 0x414
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8002be6:	7a9a      	ldrb	r2, [r3, #10]
 8002be8:	1c50      	adds	r0, r2, #1
 8002bea:	b2c0      	uxtb	r0, r0
 8002bec:	7298      	strb	r0, [r3, #10]
 8002bee:	4610      	mov	r0, r2
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3329      	adds	r3, #41	@ 0x29
 8002bf8:	781a      	ldrb	r2, [r3, #0]
 8002bfa:	180b      	adds	r3, r1, r0
 8002bfc:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

            if (frame_end - frame_start > 11) {
 8002c00:	89ba      	ldrh	r2, [r7, #12]
 8002c02:	89fb      	ldrh	r3, [r7, #14]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b0b      	cmp	r3, #11
 8002c08:	dd02      	ble.n	8002c10 <LIDAR_get_point+0x278>
                // Traitement de la trame pour extraire les points
                LIDAR_process_frame(hlidar);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff fd90 	bl	8002730 <LIDAR_process_frame>
            }

            hlidar->process_frame->index = 0;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8002c16:	2200      	movs	r2, #0
 8002c18:	729a      	strb	r2, [r3, #10]
            frame_start = frame_end + 1;
 8002c1a:	89bb      	ldrh	r3, [r7, #12]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	81fb      	strh	r3, [r7, #14]
            frame_end = frame_start + 5;
 8002c20:	89fb      	ldrh	r3, [r7, #14]
 8002c22:	3305      	adds	r3, #5
 8002c24:	81bb      	strh	r3, [r7, #12]
 8002c26:	e012      	b.n	8002c4e <LIDAR_get_point+0x2b6>
        }
        else {
            hlidar->process_frame->frame_buff[hlidar->process_frame->index++] = hlidar->data_buff[i];
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f8d3 1414 	ldr.w	r1, [r3, #1044]	@ 0x414
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8002c34:	7a9a      	ldrb	r2, [r3, #10]
 8002c36:	1c50      	adds	r0, r2, #1
 8002c38:	b2c0      	uxtb	r0, r0
 8002c3a:	7298      	strb	r0, [r3, #10]
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4413      	add	r3, r2
 8002c44:	3329      	adds	r3, #41	@ 0x29
 8002c46:	781a      	ldrb	r2, [r3, #0]
 8002c48:	180b      	adds	r3, r1, r0
 8002c4a:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
    for (int i = 0; i < DATA_BUFF_SIZE_LIDAR; i++) {
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	3301      	adds	r3, #1
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c5a:	f6ff aea8 	blt.w	80029ae <LIDAR_get_point+0x16>
        }
    }

    // Gérer les indices circulaires pour les buffers
    frame_start = frame_start - DATA_BUFF_SIZE_LIDAR;
 8002c5e:	89fb      	ldrh	r3, [r7, #14]
 8002c60:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002c64:	81fb      	strh	r3, [r7, #14]
    frame_end = frame_end - DATA_BUFF_SIZE_LIDAR;
 8002c66:	89bb      	ldrh	r3, [r7, #12]
 8002c68:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002c6c:	81bb      	strh	r3, [r7, #12]
}
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	0800dac4 	.word	0x0800dac4

08002c7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c7c:	480d      	ldr	r0, [pc, #52]	@ (8002cb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c7e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c80:	f7fe ff54 	bl	8001b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c84:	480c      	ldr	r0, [pc, #48]	@ (8002cb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c86:	490d      	ldr	r1, [pc, #52]	@ (8002cbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c88:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc0 <LoopForever+0xe>)
  movs r3, #0
 8002c8a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002c8c:	e002      	b.n	8002c94 <LoopCopyDataInit>

08002c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c92:	3304      	adds	r3, #4

08002c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c98:	d3f9      	bcc.n	8002c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8002cc8 <LoopForever+0x16>)
  movs r3, #0
 8002c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca0:	e001      	b.n	8002ca6 <LoopFillZerobss>

08002ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca4:	3204      	adds	r2, #4

08002ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ca8:	d3fb      	bcc.n	8002ca2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002caa:	f007 f9c9 	bl	800a040 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cae:	f7fe fbbd 	bl	800142c <main>

08002cb2 <LoopForever>:

LoopForever:
    b LoopForever
 8002cb2:	e7fe      	b.n	8002cb2 <LoopForever>
  ldr   r0, =_estack
 8002cb4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cbc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002cc0:	0800df98 	.word	0x0800df98
  ldr r2, =_sbss
 8002cc4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002cc8:	20001050 	.word	0x20001050

08002ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ccc:	e7fe      	b.n	8002ccc <ADC1_2_IRQHandler>

08002cce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd8:	2003      	movs	r0, #3
 8002cda:	f001 f96f 	bl	8003fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cde:	200f      	movs	r0, #15
 8002ce0:	f000 f80e 	bl	8002d00 <HAL_InitTick>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	71fb      	strb	r3, [r7, #7]
 8002cee:	e001      	b.n	8002cf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cf0:	f7fe fdfa 	bl	80018e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cf4:	79fb      	ldrb	r3, [r7, #7]

}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d0c:	4b16      	ldr	r3, [pc, #88]	@ (8002d68 <HAL_InitTick+0x68>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d022      	beq.n	8002d5a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d14:	4b15      	ldr	r3, [pc, #84]	@ (8002d6c <HAL_InitTick+0x6c>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b13      	ldr	r3, [pc, #76]	@ (8002d68 <HAL_InitTick+0x68>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002d20:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f001 f97a 	bl	8004022 <HAL_SYSTICK_Config>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10f      	bne.n	8002d54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b0f      	cmp	r3, #15
 8002d38:	d809      	bhi.n	8002d4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d42:	f001 f946 	bl	8003fd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d46:	4a0a      	ldr	r2, [pc, #40]	@ (8002d70 <HAL_InitTick+0x70>)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	e007      	b.n	8002d5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
 8002d52:	e004      	b.n	8002d5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
 8002d58:	e001      	b.n	8002d5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000008 	.word	0x20000008
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	20000004 	.word	0x20000004

08002d74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d78:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <HAL_IncTick+0x1c>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <HAL_IncTick+0x20>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4413      	add	r3, r2
 8002d82:	4a03      	ldr	r2, [pc, #12]	@ (8002d90 <HAL_IncTick+0x1c>)
 8002d84:	6013      	str	r3, [r2, #0]
}
 8002d86:	bf00      	nop
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	20000e48 	.word	0x20000e48
 8002d94:	20000008 	.word	0x20000008

08002d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d9c:	4b03      	ldr	r3, [pc, #12]	@ (8002dac <HAL_GetTick+0x14>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20000e48 	.word	0x20000e48

08002db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002db8:	f7ff ffee 	bl	8002d98 <HAL_GetTick>
 8002dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc8:	d004      	beq.n	8002dd4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dca:	4b09      	ldr	r3, [pc, #36]	@ (8002df0 <HAL_Delay+0x40>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dd4:	bf00      	nop
 8002dd6:	f7ff ffdf 	bl	8002d98 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d8f7      	bhi.n	8002dd6 <HAL_Delay+0x26>
  {
  }
}
 8002de6:	bf00      	nop
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000008 	.word	0x20000008

08002df4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	609a      	str	r2, [r3, #8]
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	609a      	str	r2, [r3, #8]
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	3360      	adds	r3, #96	@ 0x60
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ea0 <LL_ADC_SetOffset+0x44>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e94:	bf00      	nop
 8002e96:	371c      	adds	r7, #28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	03fff000 	.word	0x03fff000

08002ea4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3360      	adds	r3, #96	@ 0x60
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	3360      	adds	r3, #96	@ 0x60
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b087      	sub	sp, #28
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	3360      	adds	r3, #96	@ 0x60
 8002f16:	461a      	mov	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002f30:	bf00      	nop
 8002f32:	371c      	adds	r7, #28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	3360      	adds	r3, #96	@ 0x60
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	431a      	orrs	r2, r3
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002f66:	bf00      	nop
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	615a      	str	r2, [r3, #20]
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3330      	adds	r3, #48	@ 0x30
 8002fa8:	461a      	mov	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	0a1b      	lsrs	r3, r3, #8
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	4413      	add	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f003 031f 	and.w	r3, r3, #31
 8002fc2:	211f      	movs	r1, #31
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	401a      	ands	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	0e9b      	lsrs	r3, r3, #26
 8002fd0:	f003 011f 	and.w	r1, r3, #31
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f003 031f 	and.w	r3, r3, #31
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002fe4:	bf00      	nop
 8002fe6:	371c      	adds	r7, #28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3314      	adds	r3, #20
 8003000:	461a      	mov	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	0e5b      	lsrs	r3, r3, #25
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	4413      	add	r3, r2
 800300e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	0d1b      	lsrs	r3, r3, #20
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	2107      	movs	r1, #7
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	401a      	ands	r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	0d1b      	lsrs	r3, r3, #20
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	fa01 f303 	lsl.w	r3, r1, r3
 8003034:	431a      	orrs	r2, r3
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003060:	43db      	mvns	r3, r3
 8003062:	401a      	ands	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f003 0318 	and.w	r3, r3, #24
 800306a:	4908      	ldr	r1, [pc, #32]	@ (800308c <LL_ADC_SetChannelSingleDiff+0x44>)
 800306c:	40d9      	lsrs	r1, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	400b      	ands	r3, r1
 8003072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003076:	431a      	orrs	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	0007ffff 	.word	0x0007ffff

08003090 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80030a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6093      	str	r3, [r2, #8]
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030c8:	d101      	bne.n	80030ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80030ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003114:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003118:	d101      	bne.n	800311e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <LL_ADC_IsEnabled+0x18>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <LL_ADC_IsEnabled+0x1a>
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b04      	cmp	r3, #4
 8003164:	d101      	bne.n	800316a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b08      	cmp	r3, #8
 800318a:	d101      	bne.n	8003190 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031a0:	b590      	push	{r4, r7, lr}
 80031a2:	b089      	sub	sp, #36	@ 0x24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e167      	b.n	800348a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d109      	bne.n	80031dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7fd ffab 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff ff67 	bl	80030b4 <LL_ADC_IsDeepPowerDownEnabled>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d004      	beq.n	80031f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff4d 	bl	8003090 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ff82 	bl	8003104 <LL_ADC_IsInternalRegulatorEnabled>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d115      	bne.n	8003232 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff ff66 	bl	80030dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003210:	4ba0      	ldr	r3, [pc, #640]	@ (8003494 <HAL_ADC_Init+0x2f4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	099b      	lsrs	r3, r3, #6
 8003216:	4aa0      	ldr	r2, [pc, #640]	@ (8003498 <HAL_ADC_Init+0x2f8>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	099b      	lsrs	r3, r3, #6
 800321e:	3301      	adds	r3, #1
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003224:	e002      	b.n	800322c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	3b01      	subs	r3, #1
 800322a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f9      	bne.n	8003226 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff ff64 	bl	8003104 <LL_ADC_IsInternalRegulatorEnabled>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10d      	bne.n	800325e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003246:	f043 0210 	orr.w	r2, r3, #16
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003252:	f043 0201 	orr.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff ff75 	bl	8003152 <LL_ADC_REG_IsConversionOngoing>
 8003268:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	2b00      	cmp	r3, #0
 8003274:	f040 8100 	bne.w	8003478 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2b00      	cmp	r3, #0
 800327c:	f040 80fc 	bne.w	8003478 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003284:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003288:	f043 0202 	orr.w	r2, r3, #2
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff ff49 	bl	800312c <LL_ADC_IsEnabled>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d111      	bne.n	80032c4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032a0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80032a4:	f7ff ff42 	bl	800312c <LL_ADC_IsEnabled>
 80032a8:	4604      	mov	r4, r0
 80032aa:	487c      	ldr	r0, [pc, #496]	@ (800349c <HAL_ADC_Init+0x2fc>)
 80032ac:	f7ff ff3e 	bl	800312c <LL_ADC_IsEnabled>
 80032b0:	4603      	mov	r3, r0
 80032b2:	4323      	orrs	r3, r4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d105      	bne.n	80032c4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	4619      	mov	r1, r3
 80032be:	4878      	ldr	r0, [pc, #480]	@ (80034a0 <HAL_ADC_Init+0x300>)
 80032c0:	f7ff fd98 	bl	8002df4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	7f5b      	ldrb	r3, [r3, #29]
 80032c8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032ce:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80032d4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80032da:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032e2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d106      	bne.n	8003300 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f6:	3b01      	subs	r3, #1
 80032f8:	045b      	lsls	r3, r3, #17
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d009      	beq.n	800331c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003314:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4313      	orrs	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	4b60      	ldr	r3, [pc, #384]	@ (80034a4 <HAL_ADC_Init+0x304>)
 8003324:	4013      	ands	r3, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	69b9      	ldr	r1, [r7, #24]
 800332c:	430b      	orrs	r3, r1
 800332e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff ff14 	bl	8003178 <LL_ADC_INJ_IsConversionOngoing>
 8003350:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d16d      	bne.n	8003434 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d16a      	bne.n	8003434 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003362:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800336a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800336c:	4313      	orrs	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800337a:	f023 0302 	bic.w	r3, r3, #2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	69b9      	ldr	r1, [r7, #24]
 8003384:	430b      	orrs	r3, r1
 8003386:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d017      	beq.n	80033c0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800339e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80033a8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80033ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6911      	ldr	r1, [r2, #16]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	430b      	orrs	r3, r1
 80033ba:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80033be:	e013      	b.n	80033e8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80033ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80033e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033e4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d118      	bne.n	8003424 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80033fc:	f023 0304 	bic.w	r3, r3, #4
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003408:	4311      	orrs	r1, r2
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800340e:	4311      	orrs	r1, r2
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003414:	430a      	orrs	r2, r1
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0201 	orr.w	r2, r2, #1
 8003420:	611a      	str	r2, [r3, #16]
 8003422:	e007      	b.n	8003434 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d10c      	bne.n	8003456 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003442:	f023 010f 	bic.w	r1, r3, #15
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	1e5a      	subs	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	631a      	str	r2, [r3, #48]	@ 0x30
 8003454:	e007      	b.n	8003466 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 020f 	bic.w	r2, r2, #15
 8003464:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800346a:	f023 0303 	bic.w	r3, r3, #3
 800346e:	f043 0201 	orr.w	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003476:	e007      	b.n	8003488 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347c:	f043 0210 	orr.w	r2, r3, #16
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003488:	7ffb      	ldrb	r3, [r7, #31]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3724      	adds	r7, #36	@ 0x24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd90      	pop	{r4, r7, pc}
 8003492:	bf00      	nop
 8003494:	20000000 	.word	0x20000000
 8003498:	053e2d63 	.word	0x053e2d63
 800349c:	50000100 	.word	0x50000100
 80034a0:	50000300 	.word	0x50000300
 80034a4:	fff04007 	.word	0xfff04007

080034a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b0b6      	sub	sp, #216	@ 0xd8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x22>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e3c8      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x7b4>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fe3b 	bl	8003152 <LL_ADC_REG_IsConversionOngoing>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f040 83ad 	bne.w	8003c3e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	461a      	mov	r2, r3
 80034f2:	f7ff fd51 	bl	8002f98 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fe29 	bl	8003152 <LL_ADC_REG_IsConversionOngoing>
 8003500:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fe35 	bl	8003178 <LL_ADC_INJ_IsConversionOngoing>
 800350e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003512:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003516:	2b00      	cmp	r3, #0
 8003518:	f040 81d9 	bne.w	80038ce <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800351c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003520:	2b00      	cmp	r3, #0
 8003522:	f040 81d4 	bne.w	80038ce <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800352e:	d10f      	bne.n	8003550 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2200      	movs	r2, #0
 800353a:	4619      	mov	r1, r3
 800353c:	f7ff fd58 	bl	8002ff0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff fd12 	bl	8002f72 <LL_ADC_SetSamplingTimeCommonConfig>
 800354e:	e00e      	b.n	800356e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	6819      	ldr	r1, [r3, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	461a      	mov	r2, r3
 800355e:	f7ff fd47 	bl	8002ff0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2100      	movs	r1, #0
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fd02 	bl	8002f72 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	695a      	ldr	r2, [r3, #20]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	08db      	lsrs	r3, r3, #3
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2b04      	cmp	r3, #4
 800358e:	d022      	beq.n	80035d6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6919      	ldr	r1, [r3, #16]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80035a0:	f7ff fc5c 	bl	8002e5c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	6919      	ldr	r1, [r3, #16]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	461a      	mov	r2, r3
 80035b2:	f7ff fca8 	bl	8002f06 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d102      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x124>
 80035c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035ca:	e000      	b.n	80035ce <HAL_ADC_ConfigChannel+0x126>
 80035cc:	2300      	movs	r3, #0
 80035ce:	461a      	mov	r2, r3
 80035d0:	f7ff fcb4 	bl	8002f3c <LL_ADC_SetOffsetSaturation>
 80035d4:	e17b      	b.n	80038ce <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2100      	movs	r1, #0
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fc61 	bl	8002ea4 <LL_ADC_GetOffsetChannel>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x15a>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2100      	movs	r1, #0
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff fc56 	bl	8002ea4 <LL_ADC_GetOffsetChannel>
 80035f8:	4603      	mov	r3, r0
 80035fa:	0e9b      	lsrs	r3, r3, #26
 80035fc:	f003 021f 	and.w	r2, r3, #31
 8003600:	e01e      	b.n	8003640 <HAL_ADC_ConfigChannel+0x198>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2100      	movs	r1, #0
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff fc4b 	bl	8002ea4 <LL_ADC_GetOffsetChannel>
 800360e:	4603      	mov	r3, r0
 8003610:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003620:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003624:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003628:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003630:	2320      	movs	r3, #32
 8003632:	e004      	b.n	800363e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003634:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003638:	fab3 f383 	clz	r3, r3
 800363c:	b2db      	uxtb	r3, r3
 800363e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003648:	2b00      	cmp	r3, #0
 800364a:	d105      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x1b0>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	0e9b      	lsrs	r3, r3, #26
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	e018      	b.n	800368a <HAL_ADC_ConfigChannel+0x1e2>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003660:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003664:	fa93 f3a3 	rbit	r3, r3
 8003668:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800366c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003670:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003674:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800367c:	2320      	movs	r3, #32
 800367e:	e004      	b.n	800368a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003680:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003684:	fab3 f383 	clz	r3, r3
 8003688:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800368a:	429a      	cmp	r2, r3
 800368c:	d106      	bne.n	800369c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2200      	movs	r2, #0
 8003694:	2100      	movs	r1, #0
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fc1a 	bl	8002ed0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2101      	movs	r1, #1
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fbfe 	bl	8002ea4 <LL_ADC_GetOffsetChannel>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10a      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x220>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2101      	movs	r1, #1
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fbf3 	bl	8002ea4 <LL_ADC_GetOffsetChannel>
 80036be:	4603      	mov	r3, r0
 80036c0:	0e9b      	lsrs	r3, r3, #26
 80036c2:	f003 021f 	and.w	r2, r3, #31
 80036c6:	e01e      	b.n	8003706 <HAL_ADC_ConfigChannel+0x25e>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2101      	movs	r1, #1
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fbe8 	bl	8002ea4 <LL_ADC_GetOffsetChannel>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80036e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80036ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80036f6:	2320      	movs	r3, #32
 80036f8:	e004      	b.n	8003704 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80036fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370e:	2b00      	cmp	r3, #0
 8003710:	d105      	bne.n	800371e <HAL_ADC_ConfigChannel+0x276>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	0e9b      	lsrs	r3, r3, #26
 8003718:	f003 031f 	and.w	r3, r3, #31
 800371c:	e018      	b.n	8003750 <HAL_ADC_ConfigChannel+0x2a8>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003732:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003736:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800373a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003742:	2320      	movs	r3, #32
 8003744:	e004      	b.n	8003750 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003746:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800374a:	fab3 f383 	clz	r3, r3
 800374e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003750:	429a      	cmp	r2, r3
 8003752:	d106      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2200      	movs	r2, #0
 800375a:	2101      	movs	r1, #1
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fbb7 	bl	8002ed0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2102      	movs	r1, #2
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff fb9b 	bl	8002ea4 <LL_ADC_GetOffsetChannel>
 800376e:	4603      	mov	r3, r0
 8003770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10a      	bne.n	800378e <HAL_ADC_ConfigChannel+0x2e6>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2102      	movs	r1, #2
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff fb90 	bl	8002ea4 <LL_ADC_GetOffsetChannel>
 8003784:	4603      	mov	r3, r0
 8003786:	0e9b      	lsrs	r3, r3, #26
 8003788:	f003 021f 	and.w	r2, r3, #31
 800378c:	e01e      	b.n	80037cc <HAL_ADC_ConfigChannel+0x324>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2102      	movs	r1, #2
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff fb85 	bl	8002ea4 <LL_ADC_GetOffsetChannel>
 800379a:	4603      	mov	r3, r0
 800379c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037a4:	fa93 f3a3 	rbit	r3, r3
 80037a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80037ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80037b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80037bc:	2320      	movs	r3, #32
 80037be:	e004      	b.n	80037ca <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80037c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80037c4:	fab3 f383 	clz	r3, r3
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d105      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x33c>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	0e9b      	lsrs	r3, r3, #26
 80037de:	f003 031f 	and.w	r3, r3, #31
 80037e2:	e016      	b.n	8003812 <HAL_ADC_ConfigChannel+0x36a>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037f0:	fa93 f3a3 	rbit	r3, r3
 80037f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80037f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80037fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003804:	2320      	movs	r3, #32
 8003806:	e004      	b.n	8003812 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003808:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800380c:	fab3 f383 	clz	r3, r3
 8003810:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003812:	429a      	cmp	r2, r3
 8003814:	d106      	bne.n	8003824 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2200      	movs	r2, #0
 800381c:	2102      	movs	r1, #2
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff fb56 	bl	8002ed0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2103      	movs	r1, #3
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff fb3a 	bl	8002ea4 <LL_ADC_GetOffsetChannel>
 8003830:	4603      	mov	r3, r0
 8003832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x3a8>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2103      	movs	r1, #3
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fb2f 	bl	8002ea4 <LL_ADC_GetOffsetChannel>
 8003846:	4603      	mov	r3, r0
 8003848:	0e9b      	lsrs	r3, r3, #26
 800384a:	f003 021f 	and.w	r2, r3, #31
 800384e:	e017      	b.n	8003880 <HAL_ADC_ConfigChannel+0x3d8>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2103      	movs	r1, #3
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fb24 	bl	8002ea4 <LL_ADC_GetOffsetChannel>
 800385c:	4603      	mov	r3, r0
 800385e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003860:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003862:	fa93 f3a3 	rbit	r3, r3
 8003866:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003868:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800386a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800386c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003872:	2320      	movs	r3, #32
 8003874:	e003      	b.n	800387e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003876:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003878:	fab3 f383 	clz	r3, r3
 800387c:	b2db      	uxtb	r3, r3
 800387e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003888:	2b00      	cmp	r3, #0
 800388a:	d105      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x3f0>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	0e9b      	lsrs	r3, r3, #26
 8003892:	f003 031f 	and.w	r3, r3, #31
 8003896:	e011      	b.n	80038bc <HAL_ADC_ConfigChannel+0x414>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038a0:	fa93 f3a3 	rbit	r3, r3
 80038a4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80038a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80038aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80038b0:	2320      	movs	r3, #32
 80038b2:	e003      	b.n	80038bc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80038b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038b6:	fab3 f383 	clz	r3, r3
 80038ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038bc:	429a      	cmp	r2, r3
 80038be:	d106      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2200      	movs	r2, #0
 80038c6:	2103      	movs	r1, #3
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fb01 	bl	8002ed0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fc2a 	bl	800312c <LL_ADC_IsEnabled>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f040 8140 	bne.w	8003b60 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	6819      	ldr	r1, [r3, #0]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	461a      	mov	r2, r3
 80038ee:	f7ff fbab 	bl	8003048 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	4a8f      	ldr	r2, [pc, #572]	@ (8003b34 <HAL_ADC_ConfigChannel+0x68c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	f040 8131 	bne.w	8003b60 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10b      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x47e>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	0e9b      	lsrs	r3, r3, #26
 8003914:	3301      	adds	r3, #1
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	2b09      	cmp	r3, #9
 800391c:	bf94      	ite	ls
 800391e:	2301      	movls	r3, #1
 8003920:	2300      	movhi	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	e019      	b.n	800395a <HAL_ADC_ConfigChannel+0x4b2>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800392e:	fa93 f3a3 	rbit	r3, r3
 8003932:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003934:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003936:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003938:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800393e:	2320      	movs	r3, #32
 8003940:	e003      	b.n	800394a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003942:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003944:	fab3 f383 	clz	r3, r3
 8003948:	b2db      	uxtb	r3, r3
 800394a:	3301      	adds	r3, #1
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	2b09      	cmp	r3, #9
 8003952:	bf94      	ite	ls
 8003954:	2301      	movls	r3, #1
 8003956:	2300      	movhi	r3, #0
 8003958:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800395a:	2b00      	cmp	r3, #0
 800395c:	d079      	beq.n	8003a52 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003966:	2b00      	cmp	r3, #0
 8003968:	d107      	bne.n	800397a <HAL_ADC_ConfigChannel+0x4d2>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	0e9b      	lsrs	r3, r3, #26
 8003970:	3301      	adds	r3, #1
 8003972:	069b      	lsls	r3, r3, #26
 8003974:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003978:	e015      	b.n	80039a6 <HAL_ADC_ConfigChannel+0x4fe>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003980:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003982:	fa93 f3a3 	rbit	r3, r3
 8003986:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800398a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800398c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003992:	2320      	movs	r3, #32
 8003994:	e003      	b.n	800399e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003998:	fab3 f383 	clz	r3, r3
 800399c:	b2db      	uxtb	r3, r3
 800399e:	3301      	adds	r3, #1
 80039a0:	069b      	lsls	r3, r3, #26
 80039a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d109      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x51e>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	0e9b      	lsrs	r3, r3, #26
 80039b8:	3301      	adds	r3, #1
 80039ba:	f003 031f 	and.w	r3, r3, #31
 80039be:	2101      	movs	r1, #1
 80039c0:	fa01 f303 	lsl.w	r3, r1, r3
 80039c4:	e017      	b.n	80039f6 <HAL_ADC_ConfigChannel+0x54e>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039ce:	fa93 f3a3 	rbit	r3, r3
 80039d2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80039d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80039d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80039de:	2320      	movs	r3, #32
 80039e0:	e003      	b.n	80039ea <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80039e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039e4:	fab3 f383 	clz	r3, r3
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	3301      	adds	r3, #1
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	2101      	movs	r1, #1
 80039f2:	fa01 f303 	lsl.w	r3, r1, r3
 80039f6:	ea42 0103 	orr.w	r1, r2, r3
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10a      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x574>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	0e9b      	lsrs	r3, r3, #26
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	f003 021f 	and.w	r2, r3, #31
 8003a12:	4613      	mov	r3, r2
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	4413      	add	r3, r2
 8003a18:	051b      	lsls	r3, r3, #20
 8003a1a:	e018      	b.n	8003a4e <HAL_ADC_ConfigChannel+0x5a6>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a24:	fa93 f3a3 	rbit	r3, r3
 8003a28:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003a34:	2320      	movs	r3, #32
 8003a36:	e003      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003a38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a3a:	fab3 f383 	clz	r3, r3
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	3301      	adds	r3, #1
 8003a42:	f003 021f 	and.w	r2, r3, #31
 8003a46:	4613      	mov	r3, r2
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	4413      	add	r3, r2
 8003a4c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a4e:	430b      	orrs	r3, r1
 8003a50:	e081      	b.n	8003b56 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d107      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x5c6>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	0e9b      	lsrs	r3, r3, #26
 8003a64:	3301      	adds	r3, #1
 8003a66:	069b      	lsls	r3, r3, #26
 8003a68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a6c:	e015      	b.n	8003a9a <HAL_ADC_ConfigChannel+0x5f2>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a76:	fa93 f3a3 	rbit	r3, r3
 8003a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003a86:	2320      	movs	r3, #32
 8003a88:	e003      	b.n	8003a92 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8c:	fab3 f383 	clz	r3, r3
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	3301      	adds	r3, #1
 8003a94:	069b      	lsls	r3, r3, #26
 8003a96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x612>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	0e9b      	lsrs	r3, r3, #26
 8003aac:	3301      	adds	r3, #1
 8003aae:	f003 031f 	and.w	r3, r3, #31
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab8:	e017      	b.n	8003aea <HAL_ADC_ConfigChannel+0x642>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	fa93 f3a3 	rbit	r3, r3
 8003ac6:	61fb      	str	r3, [r7, #28]
  return result;
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003ad2:	2320      	movs	r3, #32
 8003ad4:	e003      	b.n	8003ade <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad8:	fab3 f383 	clz	r3, r3
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	3301      	adds	r3, #1
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aea:	ea42 0103 	orr.w	r1, r2, r3
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10d      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x66e>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	0e9b      	lsrs	r3, r3, #26
 8003b00:	3301      	adds	r3, #1
 8003b02:	f003 021f 	and.w	r2, r3, #31
 8003b06:	4613      	mov	r3, r2
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3b1e      	subs	r3, #30
 8003b0e:	051b      	lsls	r3, r3, #20
 8003b10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b14:	e01e      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x6ac>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	fa93 f3a3 	rbit	r3, r3
 8003b22:	613b      	str	r3, [r7, #16]
  return result;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d104      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003b2e:	2320      	movs	r3, #32
 8003b30:	e006      	b.n	8003b40 <HAL_ADC_ConfigChannel+0x698>
 8003b32:	bf00      	nop
 8003b34:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	3301      	adds	r3, #1
 8003b42:	f003 021f 	and.w	r2, r3, #31
 8003b46:	4613      	mov	r3, r2
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3b1e      	subs	r3, #30
 8003b4e:	051b      	lsls	r3, r3, #20
 8003b50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b54:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	f7ff fa48 	bl	8002ff0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	4b3f      	ldr	r3, [pc, #252]	@ (8003c64 <HAL_ADC_ConfigChannel+0x7bc>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d071      	beq.n	8003c50 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b6c:	483e      	ldr	r0, [pc, #248]	@ (8003c68 <HAL_ADC_ConfigChannel+0x7c0>)
 8003b6e:	f7ff f967 	bl	8002e40 <LL_ADC_GetCommonPathInternalCh>
 8003b72:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a3c      	ldr	r2, [pc, #240]	@ (8003c6c <HAL_ADC_ConfigChannel+0x7c4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d004      	beq.n	8003b8a <HAL_ADC_ConfigChannel+0x6e2>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a3a      	ldr	r2, [pc, #232]	@ (8003c70 <HAL_ADC_ConfigChannel+0x7c8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d127      	bne.n	8003bda <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d121      	bne.n	8003bda <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b9e:	d157      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ba0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ba4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ba8:	4619      	mov	r1, r3
 8003baa:	482f      	ldr	r0, [pc, #188]	@ (8003c68 <HAL_ADC_ConfigChannel+0x7c0>)
 8003bac:	f7ff f935 	bl	8002e1a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bb0:	4b30      	ldr	r3, [pc, #192]	@ (8003c74 <HAL_ADC_ConfigChannel+0x7cc>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	099b      	lsrs	r3, r3, #6
 8003bb6:	4a30      	ldr	r2, [pc, #192]	@ (8003c78 <HAL_ADC_ConfigChannel+0x7d0>)
 8003bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbc:	099b      	lsrs	r3, r3, #6
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003bca:	e002      	b.n	8003bd2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f9      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bd8:	e03a      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a27      	ldr	r2, [pc, #156]	@ (8003c7c <HAL_ADC_ConfigChannel+0x7d4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d113      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003be4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003be8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10d      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a22      	ldr	r2, [pc, #136]	@ (8003c80 <HAL_ADC_ConfigChannel+0x7d8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d02a      	beq.n	8003c50 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003bfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c02:	4619      	mov	r1, r3
 8003c04:	4818      	ldr	r0, [pc, #96]	@ (8003c68 <HAL_ADC_ConfigChannel+0x7c0>)
 8003c06:	f7ff f908 	bl	8002e1a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c0a:	e021      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a1c      	ldr	r2, [pc, #112]	@ (8003c84 <HAL_ADC_ConfigChannel+0x7dc>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d11c      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d116      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a16      	ldr	r2, [pc, #88]	@ (8003c80 <HAL_ADC_ConfigChannel+0x7d8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d011      	beq.n	8003c50 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c34:	4619      	mov	r1, r3
 8003c36:	480c      	ldr	r0, [pc, #48]	@ (8003c68 <HAL_ADC_ConfigChannel+0x7c0>)
 8003c38:	f7ff f8ef 	bl	8002e1a <LL_ADC_SetCommonPathInternalCh>
 8003c3c:	e008      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c42:	f043 0220 	orr.w	r2, r3, #32
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c58:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	37d8      	adds	r7, #216	@ 0xd8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	80080000 	.word	0x80080000
 8003c68:	50000300 	.word	0x50000300
 8003c6c:	c3210000 	.word	0xc3210000
 8003c70:	90c00010 	.word	0x90c00010
 8003c74:	20000000 	.word	0x20000000
 8003c78:	053e2d63 	.word	0x053e2d63
 8003c7c:	c7520000 	.word	0xc7520000
 8003c80:	50000100 	.word	0x50000100
 8003c84:	cb840000 	.word	0xcb840000

08003c88 <LL_ADC_IsEnabled>:
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <LL_ADC_IsEnabled+0x18>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <LL_ADC_IsEnabled+0x1a>
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <LL_ADC_REG_IsConversionOngoing>:
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d101      	bne.n	8003cc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003cd4:	b590      	push	{r4, r7, lr}
 8003cd6:	b0a1      	sub	sp, #132	@ 0x84
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e08b      	b.n	8003e0a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d0a:	d102      	bne.n	8003d12 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d0c:	4b41      	ldr	r3, [pc, #260]	@ (8003e14 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003d0e:	60bb      	str	r3, [r7, #8]
 8003d10:	e001      	b.n	8003d16 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d12:	2300      	movs	r3, #0
 8003d14:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10b      	bne.n	8003d34 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d20:	f043 0220 	orr.w	r2, r3, #32
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e06a      	b.n	8003e0a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff ffb9 	bl	8003cae <LL_ADC_REG_IsConversionOngoing>
 8003d3c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff ffb3 	bl	8003cae <LL_ADC_REG_IsConversionOngoing>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d14c      	bne.n	8003de8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003d4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d149      	bne.n	8003de8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d54:	4b30      	ldr	r3, [pc, #192]	@ (8003e18 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003d56:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d028      	beq.n	8003db2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	6859      	ldr	r1, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003d72:	035b      	lsls	r3, r3, #13
 8003d74:	430b      	orrs	r3, r1
 8003d76:	431a      	orrs	r2, r3
 8003d78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d7a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d7c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003d80:	f7ff ff82 	bl	8003c88 <LL_ADC_IsEnabled>
 8003d84:	4604      	mov	r4, r0
 8003d86:	4823      	ldr	r0, [pc, #140]	@ (8003e14 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003d88:	f7ff ff7e 	bl	8003c88 <LL_ADC_IsEnabled>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	4323      	orrs	r3, r4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d133      	bne.n	8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d9c:	f023 030f 	bic.w	r3, r3, #15
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	6811      	ldr	r1, [r2, #0]
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	6892      	ldr	r2, [r2, #8]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	431a      	orrs	r2, r3
 8003dac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dae:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003db0:	e024      	b.n	8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003db2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003dba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dbc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dbe:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003dc2:	f7ff ff61 	bl	8003c88 <LL_ADC_IsEnabled>
 8003dc6:	4604      	mov	r4, r0
 8003dc8:	4812      	ldr	r0, [pc, #72]	@ (8003e14 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003dca:	f7ff ff5d 	bl	8003c88 <LL_ADC_IsEnabled>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	4323      	orrs	r3, r4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d112      	bne.n	8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003dd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003dde:	f023 030f 	bic.w	r3, r3, #15
 8003de2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003de4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003de6:	e009      	b.n	8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dec:	f043 0220 	orr.w	r2, r3, #32
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003dfa:	e000      	b.n	8003dfe <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003dfc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e06:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3784      	adds	r7, #132	@ 0x84
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd90      	pop	{r4, r7, pc}
 8003e12:	bf00      	nop
 8003e14:	50000100 	.word	0x50000100
 8003e18:	50000300 	.word	0x50000300

08003e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e60 <__NVIC_SetPriorityGrouping+0x44>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e38:	4013      	ands	r3, r2
 8003e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e4e:	4a04      	ldr	r2, [pc, #16]	@ (8003e60 <__NVIC_SetPriorityGrouping+0x44>)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	60d3      	str	r3, [r2, #12]
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	e000ed00 	.word	0xe000ed00

08003e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e68:	4b04      	ldr	r3, [pc, #16]	@ (8003e7c <__NVIC_GetPriorityGrouping+0x18>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	0a1b      	lsrs	r3, r3, #8
 8003e6e:	f003 0307 	and.w	r3, r3, #7
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	e000ed00 	.word	0xe000ed00

08003e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	db0b      	blt.n	8003eaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	f003 021f 	and.w	r2, r3, #31
 8003e98:	4907      	ldr	r1, [pc, #28]	@ (8003eb8 <__NVIC_EnableIRQ+0x38>)
 8003e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	2001      	movs	r0, #1
 8003ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	e000e100 	.word	0xe000e100

08003ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	6039      	str	r1, [r7, #0]
 8003ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	db0a      	blt.n	8003ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	490c      	ldr	r1, [pc, #48]	@ (8003f08 <__NVIC_SetPriority+0x4c>)
 8003ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eda:	0112      	lsls	r2, r2, #4
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	440b      	add	r3, r1
 8003ee0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ee4:	e00a      	b.n	8003efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	4908      	ldr	r1, [pc, #32]	@ (8003f0c <__NVIC_SetPriority+0x50>)
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	3b04      	subs	r3, #4
 8003ef4:	0112      	lsls	r2, r2, #4
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	440b      	add	r3, r1
 8003efa:	761a      	strb	r2, [r3, #24]
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	e000e100 	.word	0xe000e100
 8003f0c:	e000ed00 	.word	0xe000ed00

08003f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b089      	sub	sp, #36	@ 0x24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f1c3 0307 	rsb	r3, r3, #7
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	bf28      	it	cs
 8003f2e:	2304      	movcs	r3, #4
 8003f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	3304      	adds	r3, #4
 8003f36:	2b06      	cmp	r3, #6
 8003f38:	d902      	bls.n	8003f40 <NVIC_EncodePriority+0x30>
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	3b03      	subs	r3, #3
 8003f3e:	e000      	b.n	8003f42 <NVIC_EncodePriority+0x32>
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f44:	f04f 32ff 	mov.w	r2, #4294967295
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43da      	mvns	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	401a      	ands	r2, r3
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f58:	f04f 31ff 	mov.w	r1, #4294967295
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f62:	43d9      	mvns	r1, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f68:	4313      	orrs	r3, r2
         );
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3724      	adds	r7, #36	@ 0x24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f88:	d301      	bcc.n	8003f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e00f      	b.n	8003fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8003fb8 <SysTick_Config+0x40>)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f96:	210f      	movs	r1, #15
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9c:	f7ff ff8e 	bl	8003ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fa0:	4b05      	ldr	r3, [pc, #20]	@ (8003fb8 <SysTick_Config+0x40>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fa6:	4b04      	ldr	r3, [pc, #16]	@ (8003fb8 <SysTick_Config+0x40>)
 8003fa8:	2207      	movs	r2, #7
 8003faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	e000e010 	.word	0xe000e010

08003fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff ff29 	bl	8003e1c <__NVIC_SetPriorityGrouping>
}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b086      	sub	sp, #24
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	4603      	mov	r3, r0
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	607a      	str	r2, [r7, #4]
 8003fde:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fe0:	f7ff ff40 	bl	8003e64 <__NVIC_GetPriorityGrouping>
 8003fe4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	6978      	ldr	r0, [r7, #20]
 8003fec:	f7ff ff90 	bl	8003f10 <NVIC_EncodePriority>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff ff5f 	bl	8003ebc <__NVIC_SetPriority>
}
 8003ffe:	bf00      	nop
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b082      	sub	sp, #8
 800400a:	af00      	add	r7, sp, #0
 800400c:	4603      	mov	r3, r0
 800400e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff ff33 	bl	8003e80 <__NVIC_EnableIRQ>
}
 800401a:	bf00      	nop
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff ffa4 	bl	8003f78 <SysTick_Config>
 8004030:	4603      	mov	r3, r0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e08d      	b.n	800416a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	4b47      	ldr	r3, [pc, #284]	@ (8004174 <HAL_DMA_Init+0x138>)
 8004056:	429a      	cmp	r2, r3
 8004058:	d80f      	bhi.n	800407a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	4b45      	ldr	r3, [pc, #276]	@ (8004178 <HAL_DMA_Init+0x13c>)
 8004062:	4413      	add	r3, r2
 8004064:	4a45      	ldr	r2, [pc, #276]	@ (800417c <HAL_DMA_Init+0x140>)
 8004066:	fba2 2303 	umull	r2, r3, r2, r3
 800406a:	091b      	lsrs	r3, r3, #4
 800406c:	009a      	lsls	r2, r3, #2
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a42      	ldr	r2, [pc, #264]	@ (8004180 <HAL_DMA_Init+0x144>)
 8004076:	641a      	str	r2, [r3, #64]	@ 0x40
 8004078:	e00e      	b.n	8004098 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	4b40      	ldr	r3, [pc, #256]	@ (8004184 <HAL_DMA_Init+0x148>)
 8004082:	4413      	add	r3, r2
 8004084:	4a3d      	ldr	r2, [pc, #244]	@ (800417c <HAL_DMA_Init+0x140>)
 8004086:	fba2 2303 	umull	r2, r3, r2, r3
 800408a:	091b      	lsrs	r3, r3, #4
 800408c:	009a      	lsls	r2, r3, #2
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a3c      	ldr	r2, [pc, #240]	@ (8004188 <HAL_DMA_Init+0x14c>)
 8004096:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80040ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80040bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4313      	orrs	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f9b6 	bl	800445c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040f8:	d102      	bne.n	8004100 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004114:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d010      	beq.n	8004140 <HAL_DMA_Init+0x104>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b04      	cmp	r3, #4
 8004124:	d80c      	bhi.n	8004140 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f9d6 	bl	80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	e008      	b.n	8004152 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40020407 	.word	0x40020407
 8004178:	bffdfff8 	.word	0xbffdfff8
 800417c:	cccccccd 	.word	0xcccccccd
 8004180:	40020000 	.word	0x40020000
 8004184:	bffdfbf8 	.word	0xbffdfbf8
 8004188:	40020400 	.word	0x40020400

0800418c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_DMA_Start_IT+0x20>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e066      	b.n	800427a <HAL_DMA_Start_IT+0xee>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d155      	bne.n	800426c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0201 	bic.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f8fb 	bl	80043e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d008      	beq.n	8004204 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 020e 	orr.w	r2, r2, #14
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	e00f      	b.n	8004224 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0204 	bic.w	r2, r2, #4
 8004212:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 020a 	orr.w	r2, r2, #10
 8004222:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d007      	beq.n	8004242 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800423c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004240:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004246:	2b00      	cmp	r3, #0
 8004248:	d007      	beq.n	800425a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004254:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004258:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0201 	orr.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	e005      	b.n	8004278 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004274:	2302      	movs	r3, #2
 8004276:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004278:	7dfb      	ldrb	r3, [r7, #23]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	2204      	movs	r2, #4
 80042a4:	409a      	lsls	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d026      	beq.n	80042fc <HAL_DMA_IRQHandler+0x7a>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d021      	beq.n	80042fc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d107      	bne.n	80042d6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0204 	bic.w	r2, r2, #4
 80042d4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042da:	f003 021f 	and.w	r2, r3, #31
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e2:	2104      	movs	r1, #4
 80042e4:	fa01 f202 	lsl.w	r2, r1, r2
 80042e8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d071      	beq.n	80043d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80042fa:	e06c      	b.n	80043d6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	2202      	movs	r2, #2
 8004306:	409a      	lsls	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4013      	ands	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d02e      	beq.n	800436e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d029      	beq.n	800436e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10b      	bne.n	8004340 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 020a 	bic.w	r2, r2, #10
 8004336:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004344:	f003 021f 	and.w	r2, r3, #31
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	2102      	movs	r1, #2
 800434e:	fa01 f202 	lsl.w	r2, r1, r2
 8004352:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d038      	beq.n	80043d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800436c:	e033      	b.n	80043d6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	2208      	movs	r2, #8
 8004378:	409a      	lsls	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4013      	ands	r3, r2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d02a      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	d025      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 020e 	bic.w	r2, r2, #14
 800439a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a0:	f003 021f 	and.w	r2, r3, #31
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a8:	2101      	movs	r1, #1
 80043aa:	fa01 f202 	lsl.w	r2, r1, r2
 80043ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d004      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043d6:	bf00      	nop
 80043d8:	bf00      	nop
}
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043f6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d004      	beq.n	800440a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004408:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440e:	f003 021f 	and.w	r2, r3, #31
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004416:	2101      	movs	r1, #1
 8004418:	fa01 f202 	lsl.w	r2, r1, r2
 800441c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	2b10      	cmp	r3, #16
 800442c:	d108      	bne.n	8004440 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800443e:	e007      	b.n	8004450 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	60da      	str	r2, [r3, #12]
}
 8004450:	bf00      	nop
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	4b16      	ldr	r3, [pc, #88]	@ (80044c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800446c:	429a      	cmp	r2, r3
 800446e:	d802      	bhi.n	8004476 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004470:	4b15      	ldr	r3, [pc, #84]	@ (80044c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	e001      	b.n	800447a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004476:	4b15      	ldr	r3, [pc, #84]	@ (80044cc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004478:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	3b08      	subs	r3, #8
 8004486:	4a12      	ldr	r2, [pc, #72]	@ (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004488:	fba2 2303 	umull	r2, r3, r2, r3
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004494:	089b      	lsrs	r3, r3, #2
 8004496:	009a      	lsls	r2, r3, #2
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	4413      	add	r3, r2
 800449c:	461a      	mov	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a0b      	ldr	r2, [pc, #44]	@ (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80044a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f003 031f 	and.w	r3, r3, #31
 80044ae:	2201      	movs	r2, #1
 80044b0:	409a      	lsls	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80044b6:	bf00      	nop
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40020407 	.word	0x40020407
 80044c8:	40020800 	.word	0x40020800
 80044cc:	40020820 	.word	0x40020820
 80044d0:	cccccccd 	.word	0xcccccccd
 80044d4:	40020880 	.word	0x40020880

080044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	461a      	mov	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a08      	ldr	r2, [pc, #32]	@ (800451c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80044fa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	3b01      	subs	r3, #1
 8004500:	f003 031f 	and.w	r3, r3, #31
 8004504:	2201      	movs	r2, #1
 8004506:	409a      	lsls	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	1000823f 	.word	0x1000823f
 800451c:	40020940 	.word	0x40020940

08004520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800452e:	e15a      	b.n	80047e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	2101      	movs	r1, #1
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	fa01 f303 	lsl.w	r3, r1, r3
 800453c:	4013      	ands	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 814c 	beq.w	80047e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	2b01      	cmp	r3, #1
 8004552:	d005      	beq.n	8004560 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800455c:	2b02      	cmp	r3, #2
 800455e:	d130      	bne.n	80045c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	2203      	movs	r2, #3
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	43db      	mvns	r3, r3
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4013      	ands	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004596:	2201      	movs	r2, #1
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	f003 0201 	and.w	r2, r3, #1
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d017      	beq.n	80045fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	2203      	movs	r2, #3
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43db      	mvns	r3, r3
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4013      	ands	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d123      	bne.n	8004652 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	08da      	lsrs	r2, r3, #3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3208      	adds	r2, #8
 8004612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004616:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	220f      	movs	r2, #15
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43db      	mvns	r3, r3
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4013      	ands	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	08da      	lsrs	r2, r3, #3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3208      	adds	r2, #8
 800464c:	6939      	ldr	r1, [r7, #16]
 800464e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	2203      	movs	r2, #3
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4013      	ands	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f003 0203 	and.w	r2, r3, #3
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 80a6 	beq.w	80047e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004694:	4b5b      	ldr	r3, [pc, #364]	@ (8004804 <HAL_GPIO_Init+0x2e4>)
 8004696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004698:	4a5a      	ldr	r2, [pc, #360]	@ (8004804 <HAL_GPIO_Init+0x2e4>)
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	6613      	str	r3, [r2, #96]	@ 0x60
 80046a0:	4b58      	ldr	r3, [pc, #352]	@ (8004804 <HAL_GPIO_Init+0x2e4>)
 80046a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046ac:	4a56      	ldr	r2, [pc, #344]	@ (8004808 <HAL_GPIO_Init+0x2e8>)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	089b      	lsrs	r3, r3, #2
 80046b2:	3302      	adds	r3, #2
 80046b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f003 0303 	and.w	r3, r3, #3
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	220f      	movs	r2, #15
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	43db      	mvns	r3, r3
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4013      	ands	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80046d6:	d01f      	beq.n	8004718 <HAL_GPIO_Init+0x1f8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a4c      	ldr	r2, [pc, #304]	@ (800480c <HAL_GPIO_Init+0x2ec>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d019      	beq.n	8004714 <HAL_GPIO_Init+0x1f4>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a4b      	ldr	r2, [pc, #300]	@ (8004810 <HAL_GPIO_Init+0x2f0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d013      	beq.n	8004710 <HAL_GPIO_Init+0x1f0>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a4a      	ldr	r2, [pc, #296]	@ (8004814 <HAL_GPIO_Init+0x2f4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d00d      	beq.n	800470c <HAL_GPIO_Init+0x1ec>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a49      	ldr	r2, [pc, #292]	@ (8004818 <HAL_GPIO_Init+0x2f8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d007      	beq.n	8004708 <HAL_GPIO_Init+0x1e8>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a48      	ldr	r2, [pc, #288]	@ (800481c <HAL_GPIO_Init+0x2fc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d101      	bne.n	8004704 <HAL_GPIO_Init+0x1e4>
 8004700:	2305      	movs	r3, #5
 8004702:	e00a      	b.n	800471a <HAL_GPIO_Init+0x1fa>
 8004704:	2306      	movs	r3, #6
 8004706:	e008      	b.n	800471a <HAL_GPIO_Init+0x1fa>
 8004708:	2304      	movs	r3, #4
 800470a:	e006      	b.n	800471a <HAL_GPIO_Init+0x1fa>
 800470c:	2303      	movs	r3, #3
 800470e:	e004      	b.n	800471a <HAL_GPIO_Init+0x1fa>
 8004710:	2302      	movs	r3, #2
 8004712:	e002      	b.n	800471a <HAL_GPIO_Init+0x1fa>
 8004714:	2301      	movs	r3, #1
 8004716:	e000      	b.n	800471a <HAL_GPIO_Init+0x1fa>
 8004718:	2300      	movs	r3, #0
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	f002 0203 	and.w	r2, r2, #3
 8004720:	0092      	lsls	r2, r2, #2
 8004722:	4093      	lsls	r3, r2
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800472a:	4937      	ldr	r1, [pc, #220]	@ (8004808 <HAL_GPIO_Init+0x2e8>)
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	089b      	lsrs	r3, r3, #2
 8004730:	3302      	adds	r3, #2
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004738:	4b39      	ldr	r3, [pc, #228]	@ (8004820 <HAL_GPIO_Init+0x300>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	43db      	mvns	r3, r3
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4013      	ands	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800475c:	4a30      	ldr	r2, [pc, #192]	@ (8004820 <HAL_GPIO_Init+0x300>)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004762:	4b2f      	ldr	r3, [pc, #188]	@ (8004820 <HAL_GPIO_Init+0x300>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	43db      	mvns	r3, r3
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4013      	ands	r3, r2
 8004770:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004786:	4a26      	ldr	r2, [pc, #152]	@ (8004820 <HAL_GPIO_Init+0x300>)
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800478c:	4b24      	ldr	r3, [pc, #144]	@ (8004820 <HAL_GPIO_Init+0x300>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	43db      	mvns	r3, r3
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4013      	ands	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004820 <HAL_GPIO_Init+0x300>)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004820 <HAL_GPIO_Init+0x300>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	43db      	mvns	r3, r3
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4013      	ands	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047da:	4a11      	ldr	r2, [pc, #68]	@ (8004820 <HAL_GPIO_Init+0x300>)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	3301      	adds	r3, #1
 80047e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	fa22 f303 	lsr.w	r3, r2, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f47f ae9d 	bne.w	8004530 <HAL_GPIO_Init+0x10>
  }
}
 80047f6:	bf00      	nop
 80047f8:	bf00      	nop
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	40021000 	.word	0x40021000
 8004808:	40010000 	.word	0x40010000
 800480c:	48000400 	.word	0x48000400
 8004810:	48000800 	.word	0x48000800
 8004814:	48000c00 	.word	0x48000c00
 8004818:	48001000 	.word	0x48001000
 800481c:	48001400 	.word	0x48001400
 8004820:	40010400 	.word	0x40010400

08004824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	807b      	strh	r3, [r7, #2]
 8004830:	4613      	mov	r3, r2
 8004832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004834:	787b      	ldrb	r3, [r7, #1]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800483a:	887a      	ldrh	r2, [r7, #2]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004840:	e002      	b.n	8004848 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004842:	887a      	ldrh	r2, [r7, #2]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d141      	bne.n	80048e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004862:	4b4b      	ldr	r3, [pc, #300]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800486a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800486e:	d131      	bne.n	80048d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004870:	4b47      	ldr	r3, [pc, #284]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004876:	4a46      	ldr	r2, [pc, #280]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004878:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800487c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004880:	4b43      	ldr	r3, [pc, #268]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004888:	4a41      	ldr	r2, [pc, #260]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800488e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004890:	4b40      	ldr	r3, [pc, #256]	@ (8004994 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2232      	movs	r2, #50	@ 0x32
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	4a3f      	ldr	r2, [pc, #252]	@ (8004998 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800489c:	fba2 2303 	umull	r2, r3, r2, r3
 80048a0:	0c9b      	lsrs	r3, r3, #18
 80048a2:	3301      	adds	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048a6:	e002      	b.n	80048ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ae:	4b38      	ldr	r3, [pc, #224]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ba:	d102      	bne.n	80048c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f2      	bne.n	80048a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048c2:	4b33      	ldr	r3, [pc, #204]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ce:	d158      	bne.n	8004982 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e057      	b.n	8004984 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048d4:	4b2e      	ldr	r3, [pc, #184]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048da:	4a2d      	ldr	r2, [pc, #180]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80048e4:	e04d      	b.n	8004982 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048ec:	d141      	bne.n	8004972 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048ee:	4b28      	ldr	r3, [pc, #160]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048fa:	d131      	bne.n	8004960 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048fc:	4b24      	ldr	r3, [pc, #144]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004902:	4a23      	ldr	r2, [pc, #140]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004904:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004908:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800490c:	4b20      	ldr	r3, [pc, #128]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004914:	4a1e      	ldr	r2, [pc, #120]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004916:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800491a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800491c:	4b1d      	ldr	r3, [pc, #116]	@ (8004994 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2232      	movs	r2, #50	@ 0x32
 8004922:	fb02 f303 	mul.w	r3, r2, r3
 8004926:	4a1c      	ldr	r2, [pc, #112]	@ (8004998 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004928:	fba2 2303 	umull	r2, r3, r2, r3
 800492c:	0c9b      	lsrs	r3, r3, #18
 800492e:	3301      	adds	r3, #1
 8004930:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004932:	e002      	b.n	800493a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	3b01      	subs	r3, #1
 8004938:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800493a:	4b15      	ldr	r3, [pc, #84]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004946:	d102      	bne.n	800494e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f2      	bne.n	8004934 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800494e:	4b10      	ldr	r3, [pc, #64]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800495a:	d112      	bne.n	8004982 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e011      	b.n	8004984 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004960:	4b0b      	ldr	r3, [pc, #44]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004966:	4a0a      	ldr	r2, [pc, #40]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800496c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004970:	e007      	b.n	8004982 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004972:	4b07      	ldr	r3, [pc, #28]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800497a:	4a05      	ldr	r2, [pc, #20]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800497c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004980:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	40007000 	.word	0x40007000
 8004994:	20000000 	.word	0x20000000
 8004998:	431bde83 	.word	0x431bde83

0800499c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80049a0:	4b05      	ldr	r3, [pc, #20]	@ (80049b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	4a04      	ldr	r2, [pc, #16]	@ (80049b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049aa:	6093      	str	r3, [r2, #8]
}
 80049ac:	bf00      	nop
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40007000 	.word	0x40007000

080049bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e2fe      	b.n	8004fcc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d075      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049da:	4b97      	ldr	r3, [pc, #604]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 030c 	and.w	r3, r3, #12
 80049e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049e4:	4b94      	ldr	r3, [pc, #592]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f003 0303 	and.w	r3, r3, #3
 80049ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	2b0c      	cmp	r3, #12
 80049f2:	d102      	bne.n	80049fa <HAL_RCC_OscConfig+0x3e>
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d002      	beq.n	8004a00 <HAL_RCC_OscConfig+0x44>
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d10b      	bne.n	8004a18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a00:	4b8d      	ldr	r3, [pc, #564]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d05b      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x108>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d157      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e2d9      	b.n	8004fcc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a20:	d106      	bne.n	8004a30 <HAL_RCC_OscConfig+0x74>
 8004a22:	4b85      	ldr	r3, [pc, #532]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a84      	ldr	r2, [pc, #528]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	e01d      	b.n	8004a6c <HAL_RCC_OscConfig+0xb0>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a38:	d10c      	bne.n	8004a54 <HAL_RCC_OscConfig+0x98>
 8004a3a:	4b7f      	ldr	r3, [pc, #508]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a7e      	ldr	r2, [pc, #504]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	4b7c      	ldr	r3, [pc, #496]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a7b      	ldr	r2, [pc, #492]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	e00b      	b.n	8004a6c <HAL_RCC_OscConfig+0xb0>
 8004a54:	4b78      	ldr	r3, [pc, #480]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a77      	ldr	r2, [pc, #476]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	4b75      	ldr	r3, [pc, #468]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a74      	ldr	r2, [pc, #464]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004a66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d013      	beq.n	8004a9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a74:	f7fe f990 	bl	8002d98 <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a7c:	f7fe f98c 	bl	8002d98 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b64      	cmp	r3, #100	@ 0x64
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e29e      	b.n	8004fcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a8e:	4b6a      	ldr	r3, [pc, #424]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCC_OscConfig+0xc0>
 8004a9a:	e014      	b.n	8004ac6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9c:	f7fe f97c 	bl	8002d98 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa4:	f7fe f978 	bl	8002d98 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b64      	cmp	r3, #100	@ 0x64
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e28a      	b.n	8004fcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ab6:	4b60      	ldr	r3, [pc, #384]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1f0      	bne.n	8004aa4 <HAL_RCC_OscConfig+0xe8>
 8004ac2:	e000      	b.n	8004ac6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d075      	beq.n	8004bbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ad2:	4b59      	ldr	r3, [pc, #356]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 030c 	and.w	r3, r3, #12
 8004ada:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004adc:	4b56      	ldr	r3, [pc, #344]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	2b0c      	cmp	r3, #12
 8004aea:	d102      	bne.n	8004af2 <HAL_RCC_OscConfig+0x136>
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d002      	beq.n	8004af8 <HAL_RCC_OscConfig+0x13c>
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d11f      	bne.n	8004b38 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004af8:	4b4f      	ldr	r3, [pc, #316]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <HAL_RCC_OscConfig+0x154>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e25d      	b.n	8004fcc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b10:	4b49      	ldr	r3, [pc, #292]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	061b      	lsls	r3, r3, #24
 8004b1e:	4946      	ldr	r1, [pc, #280]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b24:	4b45      	ldr	r3, [pc, #276]	@ (8004c3c <HAL_RCC_OscConfig+0x280>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fe f8e9 	bl	8002d00 <HAL_InitTick>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d043      	beq.n	8004bbc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e249      	b.n	8004fcc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d023      	beq.n	8004b88 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b40:	4b3d      	ldr	r3, [pc, #244]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a3c      	ldr	r2, [pc, #240]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4c:	f7fe f924 	bl	8002d98 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b54:	f7fe f920 	bl	8002d98 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e232      	b.n	8004fcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b66:	4b34      	ldr	r3, [pc, #208]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f0      	beq.n	8004b54 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b72:	4b31      	ldr	r3, [pc, #196]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	061b      	lsls	r3, r3, #24
 8004b80:	492d      	ldr	r1, [pc, #180]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	604b      	str	r3, [r1, #4]
 8004b86:	e01a      	b.n	8004bbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b88:	4b2b      	ldr	r3, [pc, #172]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a2a      	ldr	r2, [pc, #168]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004b8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fe f900 	bl	8002d98 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b9c:	f7fe f8fc 	bl	8002d98 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e20e      	b.n	8004fcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bae:	4b22      	ldr	r3, [pc, #136]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0x1e0>
 8004bba:	e000      	b.n	8004bbe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bbc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d041      	beq.n	8004c4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d01c      	beq.n	8004c0c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bd2:	4b19      	ldr	r3, [pc, #100]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bd8:	4a17      	ldr	r2, [pc, #92]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004bda:	f043 0301 	orr.w	r3, r3, #1
 8004bde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be2:	f7fe f8d9 	bl	8002d98 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bea:	f7fe f8d5 	bl	8002d98 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e1e7      	b.n	8004fcc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0ef      	beq.n	8004bea <HAL_RCC_OscConfig+0x22e>
 8004c0a:	e020      	b.n	8004c4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c12:	4a09      	ldr	r2, [pc, #36]	@ (8004c38 <HAL_RCC_OscConfig+0x27c>)
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1c:	f7fe f8bc 	bl	8002d98 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c22:	e00d      	b.n	8004c40 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c24:	f7fe f8b8 	bl	8002d98 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d906      	bls.n	8004c40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e1ca      	b.n	8004fcc <HAL_RCC_OscConfig+0x610>
 8004c36:	bf00      	nop
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c40:	4b8c      	ldr	r3, [pc, #560]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1ea      	bne.n	8004c24 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 80a6 	beq.w	8004da8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c60:	4b84      	ldr	r3, [pc, #528]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_RCC_OscConfig+0x2b4>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <HAL_RCC_OscConfig+0x2b6>
 8004c70:	2300      	movs	r3, #0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00d      	beq.n	8004c92 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c76:	4b7f      	ldr	r3, [pc, #508]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c80:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c82:	4b7c      	ldr	r3, [pc, #496]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c92:	4b79      	ldr	r3, [pc, #484]	@ (8004e78 <HAL_RCC_OscConfig+0x4bc>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d118      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c9e:	4b76      	ldr	r3, [pc, #472]	@ (8004e78 <HAL_RCC_OscConfig+0x4bc>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a75      	ldr	r2, [pc, #468]	@ (8004e78 <HAL_RCC_OscConfig+0x4bc>)
 8004ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004caa:	f7fe f875 	bl	8002d98 <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb2:	f7fe f871 	bl	8002d98 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e183      	b.n	8004fcc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cc4:	4b6c      	ldr	r3, [pc, #432]	@ (8004e78 <HAL_RCC_OscConfig+0x4bc>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0f0      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d108      	bne.n	8004cea <HAL_RCC_OscConfig+0x32e>
 8004cd8:	4b66      	ldr	r3, [pc, #408]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cde:	4a65      	ldr	r2, [pc, #404]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004ce0:	f043 0301 	orr.w	r3, r3, #1
 8004ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ce8:	e024      	b.n	8004d34 <HAL_RCC_OscConfig+0x378>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2b05      	cmp	r3, #5
 8004cf0:	d110      	bne.n	8004d14 <HAL_RCC_OscConfig+0x358>
 8004cf2:	4b60      	ldr	r3, [pc, #384]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf8:	4a5e      	ldr	r2, [pc, #376]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004cfa:	f043 0304 	orr.w	r3, r3, #4
 8004cfe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d02:	4b5c      	ldr	r3, [pc, #368]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d08:	4a5a      	ldr	r2, [pc, #360]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004d0a:	f043 0301 	orr.w	r3, r3, #1
 8004d0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d12:	e00f      	b.n	8004d34 <HAL_RCC_OscConfig+0x378>
 8004d14:	4b57      	ldr	r3, [pc, #348]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1a:	4a56      	ldr	r2, [pc, #344]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d24:	4b53      	ldr	r3, [pc, #332]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2a:	4a52      	ldr	r2, [pc, #328]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004d2c:	f023 0304 	bic.w	r3, r3, #4
 8004d30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d016      	beq.n	8004d6a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3c:	f7fe f82c 	bl	8002d98 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d42:	e00a      	b.n	8004d5a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d44:	f7fe f828 	bl	8002d98 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e138      	b.n	8004fcc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d5a:	4b46      	ldr	r3, [pc, #280]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0ed      	beq.n	8004d44 <HAL_RCC_OscConfig+0x388>
 8004d68:	e015      	b.n	8004d96 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6a:	f7fe f815 	bl	8002d98 <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d70:	e00a      	b.n	8004d88 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d72:	f7fe f811 	bl	8002d98 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e121      	b.n	8004fcc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d88:	4b3a      	ldr	r3, [pc, #232]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1ed      	bne.n	8004d72 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d96:	7ffb      	ldrb	r3, [r7, #31]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d105      	bne.n	8004da8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d9c:	4b35      	ldr	r3, [pc, #212]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da0:	4a34      	ldr	r2, [pc, #208]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004da2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004da6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0320 	and.w	r3, r3, #32
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d03c      	beq.n	8004e2e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01c      	beq.n	8004df6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dc2:	4a2c      	ldr	r2, [pc, #176]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004dc4:	f043 0301 	orr.w	r3, r3, #1
 8004dc8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dcc:	f7fd ffe4 	bl	8002d98 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dd4:	f7fd ffe0 	bl	8002d98 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e0f2      	b.n	8004fcc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004de6:	4b23      	ldr	r3, [pc, #140]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004de8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0ef      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x418>
 8004df4:	e01b      	b.n	8004e2e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004df6:	4b1f      	ldr	r3, [pc, #124]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004df8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004dfe:	f023 0301 	bic.w	r3, r3, #1
 8004e02:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e06:	f7fd ffc7 	bl	8002d98 <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e0c:	e008      	b.n	8004e20 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e0e:	f7fd ffc3 	bl	8002d98 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e0d5      	b.n	8004fcc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e20:	4b14      	ldr	r3, [pc, #80]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004e22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1ef      	bne.n	8004e0e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 80c9 	beq.w	8004fca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e38:	4b0e      	ldr	r3, [pc, #56]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 030c 	and.w	r3, r3, #12
 8004e40:	2b0c      	cmp	r3, #12
 8004e42:	f000 8083 	beq.w	8004f4c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d15e      	bne.n	8004f0c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4e:	4b09      	ldr	r3, [pc, #36]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a08      	ldr	r2, [pc, #32]	@ (8004e74 <HAL_RCC_OscConfig+0x4b8>)
 8004e54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5a:	f7fd ff9d 	bl	8002d98 <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e60:	e00c      	b.n	8004e7c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e62:	f7fd ff99 	bl	8002d98 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d905      	bls.n	8004e7c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e0ab      	b.n	8004fcc <HAL_RCC_OscConfig+0x610>
 8004e74:	40021000 	.word	0x40021000
 8004e78:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e7c:	4b55      	ldr	r3, [pc, #340]	@ (8004fd4 <HAL_RCC_OscConfig+0x618>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1ec      	bne.n	8004e62 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e88:	4b52      	ldr	r3, [pc, #328]	@ (8004fd4 <HAL_RCC_OscConfig+0x618>)
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	4b52      	ldr	r3, [pc, #328]	@ (8004fd8 <HAL_RCC_OscConfig+0x61c>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6a11      	ldr	r1, [r2, #32]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e98:	3a01      	subs	r2, #1
 8004e9a:	0112      	lsls	r2, r2, #4
 8004e9c:	4311      	orrs	r1, r2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004ea2:	0212      	lsls	r2, r2, #8
 8004ea4:	4311      	orrs	r1, r2
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004eaa:	0852      	lsrs	r2, r2, #1
 8004eac:	3a01      	subs	r2, #1
 8004eae:	0552      	lsls	r2, r2, #21
 8004eb0:	4311      	orrs	r1, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004eb6:	0852      	lsrs	r2, r2, #1
 8004eb8:	3a01      	subs	r2, #1
 8004eba:	0652      	lsls	r2, r2, #25
 8004ebc:	4311      	orrs	r1, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ec2:	06d2      	lsls	r2, r2, #27
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	4943      	ldr	r1, [pc, #268]	@ (8004fd4 <HAL_RCC_OscConfig+0x618>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ecc:	4b41      	ldr	r3, [pc, #260]	@ (8004fd4 <HAL_RCC_OscConfig+0x618>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a40      	ldr	r2, [pc, #256]	@ (8004fd4 <HAL_RCC_OscConfig+0x618>)
 8004ed2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ed6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8004fd4 <HAL_RCC_OscConfig+0x618>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	4a3d      	ldr	r2, [pc, #244]	@ (8004fd4 <HAL_RCC_OscConfig+0x618>)
 8004ede:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ee2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee4:	f7fd ff58 	bl	8002d98 <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eec:	f7fd ff54 	bl	8002d98 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e066      	b.n	8004fcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004efe:	4b35      	ldr	r3, [pc, #212]	@ (8004fd4 <HAL_RCC_OscConfig+0x618>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0f0      	beq.n	8004eec <HAL_RCC_OscConfig+0x530>
 8004f0a:	e05e      	b.n	8004fca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f0c:	4b31      	ldr	r3, [pc, #196]	@ (8004fd4 <HAL_RCC_OscConfig+0x618>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a30      	ldr	r2, [pc, #192]	@ (8004fd4 <HAL_RCC_OscConfig+0x618>)
 8004f12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fd ff3e 	bl	8002d98 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f20:	f7fd ff3a 	bl	8002d98 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e04c      	b.n	8004fcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f32:	4b28      	ldr	r3, [pc, #160]	@ (8004fd4 <HAL_RCC_OscConfig+0x618>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f0      	bne.n	8004f20 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f3e:	4b25      	ldr	r3, [pc, #148]	@ (8004fd4 <HAL_RCC_OscConfig+0x618>)
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	4924      	ldr	r1, [pc, #144]	@ (8004fd4 <HAL_RCC_OscConfig+0x618>)
 8004f44:	4b25      	ldr	r3, [pc, #148]	@ (8004fdc <HAL_RCC_OscConfig+0x620>)
 8004f46:	4013      	ands	r3, r2
 8004f48:	60cb      	str	r3, [r1, #12]
 8004f4a:	e03e      	b.n	8004fca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e039      	b.n	8004fcc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f58:	4b1e      	ldr	r3, [pc, #120]	@ (8004fd4 <HAL_RCC_OscConfig+0x618>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f003 0203 	and.w	r2, r3, #3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d12c      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f76:	3b01      	subs	r3, #1
 8004f78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d123      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f88:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d11b      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f98:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d113      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa8:	085b      	lsrs	r3, r3, #1
 8004faa:	3b01      	subs	r3, #1
 8004fac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d109      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fbc:	085b      	lsrs	r3, r3, #1
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d001      	beq.n	8004fca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3720      	adds	r7, #32
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	019f800c 	.word	0x019f800c
 8004fdc:	feeefffc 	.word	0xfeeefffc

08004fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e11e      	b.n	8005236 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ff8:	4b91      	ldr	r3, [pc, #580]	@ (8005240 <HAL_RCC_ClockConfig+0x260>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d910      	bls.n	8005028 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005006:	4b8e      	ldr	r3, [pc, #568]	@ (8005240 <HAL_RCC_ClockConfig+0x260>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f023 020f 	bic.w	r2, r3, #15
 800500e:	498c      	ldr	r1, [pc, #560]	@ (8005240 <HAL_RCC_ClockConfig+0x260>)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	4313      	orrs	r3, r2
 8005014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005016:	4b8a      	ldr	r3, [pc, #552]	@ (8005240 <HAL_RCC_ClockConfig+0x260>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d001      	beq.n	8005028 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e106      	b.n	8005236 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d073      	beq.n	800511c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b03      	cmp	r3, #3
 800503a:	d129      	bne.n	8005090 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800503c:	4b81      	ldr	r3, [pc, #516]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e0f4      	b.n	8005236 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800504c:	f000 f99c 	bl	8005388 <RCC_GetSysClockFreqFromPLLSource>
 8005050:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	4a7c      	ldr	r2, [pc, #496]	@ (8005248 <HAL_RCC_ClockConfig+0x268>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d93f      	bls.n	80050da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800505a:	4b7a      	ldr	r3, [pc, #488]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d009      	beq.n	800507a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800506e:	2b00      	cmp	r3, #0
 8005070:	d033      	beq.n	80050da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005076:	2b00      	cmp	r3, #0
 8005078:	d12f      	bne.n	80050da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800507a:	4b72      	ldr	r3, [pc, #456]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005082:	4a70      	ldr	r2, [pc, #448]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 8005084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005088:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800508a:	2380      	movs	r3, #128	@ 0x80
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	e024      	b.n	80050da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2b02      	cmp	r3, #2
 8005096:	d107      	bne.n	80050a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005098:	4b6a      	ldr	r3, [pc, #424]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d109      	bne.n	80050b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e0c6      	b.n	8005236 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050a8:	4b66      	ldr	r3, [pc, #408]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0be      	b.n	8005236 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80050b8:	f000 f8ce 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 80050bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4a61      	ldr	r2, [pc, #388]	@ (8005248 <HAL_RCC_ClockConfig+0x268>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d909      	bls.n	80050da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050c6:	4b5f      	ldr	r3, [pc, #380]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050ce:	4a5d      	ldr	r2, [pc, #372]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 80050d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80050d6:	2380      	movs	r3, #128	@ 0x80
 80050d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050da:	4b5a      	ldr	r3, [pc, #360]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f023 0203 	bic.w	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	4957      	ldr	r1, [pc, #348]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ec:	f7fd fe54 	bl	8002d98 <HAL_GetTick>
 80050f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f2:	e00a      	b.n	800510a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f4:	f7fd fe50 	bl	8002d98 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e095      	b.n	8005236 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510a:	4b4e      	ldr	r3, [pc, #312]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 020c 	and.w	r2, r3, #12
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	429a      	cmp	r2, r3
 800511a:	d1eb      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d023      	beq.n	8005170 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005134:	4b43      	ldr	r3, [pc, #268]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	4a42      	ldr	r2, [pc, #264]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 800513a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800513e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800514c:	4b3d      	ldr	r3, [pc, #244]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005154:	4a3b      	ldr	r2, [pc, #236]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 8005156:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800515a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800515c:	4b39      	ldr	r3, [pc, #228]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	4936      	ldr	r1, [pc, #216]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 800516a:	4313      	orrs	r3, r2
 800516c:	608b      	str	r3, [r1, #8]
 800516e:	e008      	b.n	8005182 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2b80      	cmp	r3, #128	@ 0x80
 8005174:	d105      	bne.n	8005182 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005176:	4b33      	ldr	r3, [pc, #204]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	4a32      	ldr	r2, [pc, #200]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 800517c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005180:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005182:	4b2f      	ldr	r3, [pc, #188]	@ (8005240 <HAL_RCC_ClockConfig+0x260>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d21d      	bcs.n	80051cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005190:	4b2b      	ldr	r3, [pc, #172]	@ (8005240 <HAL_RCC_ClockConfig+0x260>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f023 020f 	bic.w	r2, r3, #15
 8005198:	4929      	ldr	r1, [pc, #164]	@ (8005240 <HAL_RCC_ClockConfig+0x260>)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	4313      	orrs	r3, r2
 800519e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051a0:	f7fd fdfa 	bl	8002d98 <HAL_GetTick>
 80051a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a6:	e00a      	b.n	80051be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051a8:	f7fd fdf6 	bl	8002d98 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e03b      	b.n	8005236 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051be:	4b20      	ldr	r3, [pc, #128]	@ (8005240 <HAL_RCC_ClockConfig+0x260>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d1ed      	bne.n	80051a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d008      	beq.n	80051ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4917      	ldr	r1, [pc, #92]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051f6:	4b13      	ldr	r3, [pc, #76]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	490f      	ldr	r1, [pc, #60]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 8005206:	4313      	orrs	r3, r2
 8005208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800520a:	f000 f825 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 800520e:	4602      	mov	r2, r0
 8005210:	4b0c      	ldr	r3, [pc, #48]	@ (8005244 <HAL_RCC_ClockConfig+0x264>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	091b      	lsrs	r3, r3, #4
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	490c      	ldr	r1, [pc, #48]	@ (800524c <HAL_RCC_ClockConfig+0x26c>)
 800521c:	5ccb      	ldrb	r3, [r1, r3]
 800521e:	f003 031f 	and.w	r3, r3, #31
 8005222:	fa22 f303 	lsr.w	r3, r2, r3
 8005226:	4a0a      	ldr	r2, [pc, #40]	@ (8005250 <HAL_RCC_ClockConfig+0x270>)
 8005228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800522a:	4b0a      	ldr	r3, [pc, #40]	@ (8005254 <HAL_RCC_ClockConfig+0x274>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4618      	mov	r0, r3
 8005230:	f7fd fd66 	bl	8002d00 <HAL_InitTick>
 8005234:	4603      	mov	r3, r0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	40022000 	.word	0x40022000
 8005244:	40021000 	.word	0x40021000
 8005248:	04c4b400 	.word	0x04c4b400
 800524c:	0800dad8 	.word	0x0800dad8
 8005250:	20000000 	.word	0x20000000
 8005254:	20000004 	.word	0x20000004

08005258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800525e:	4b2c      	ldr	r3, [pc, #176]	@ (8005310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f003 030c 	and.w	r3, r3, #12
 8005266:	2b04      	cmp	r3, #4
 8005268:	d102      	bne.n	8005270 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800526a:	4b2a      	ldr	r3, [pc, #168]	@ (8005314 <HAL_RCC_GetSysClockFreq+0xbc>)
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	e047      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005270:	4b27      	ldr	r3, [pc, #156]	@ (8005310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f003 030c 	and.w	r3, r3, #12
 8005278:	2b08      	cmp	r3, #8
 800527a:	d102      	bne.n	8005282 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800527c:	4b25      	ldr	r3, [pc, #148]	@ (8005314 <HAL_RCC_GetSysClockFreq+0xbc>)
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	e03e      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005282:	4b23      	ldr	r3, [pc, #140]	@ (8005310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 030c 	and.w	r3, r3, #12
 800528a:	2b0c      	cmp	r3, #12
 800528c:	d136      	bne.n	80052fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800528e:	4b20      	ldr	r3, [pc, #128]	@ (8005310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005298:	4b1d      	ldr	r3, [pc, #116]	@ (8005310 <HAL_RCC_GetSysClockFreq+0xb8>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	3301      	adds	r3, #1
 80052a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d10c      	bne.n	80052c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052ac:	4a19      	ldr	r2, [pc, #100]	@ (8005314 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b4:	4a16      	ldr	r2, [pc, #88]	@ (8005310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052b6:	68d2      	ldr	r2, [r2, #12]
 80052b8:	0a12      	lsrs	r2, r2, #8
 80052ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052be:	fb02 f303 	mul.w	r3, r2, r3
 80052c2:	617b      	str	r3, [r7, #20]
      break;
 80052c4:	e00c      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052c6:	4a13      	ldr	r2, [pc, #76]	@ (8005314 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ce:	4a10      	ldr	r2, [pc, #64]	@ (8005310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052d0:	68d2      	ldr	r2, [r2, #12]
 80052d2:	0a12      	lsrs	r2, r2, #8
 80052d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052d8:	fb02 f303 	mul.w	r3, r2, r3
 80052dc:	617b      	str	r3, [r7, #20]
      break;
 80052de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	0e5b      	lsrs	r3, r3, #25
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	3301      	adds	r3, #1
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f8:	613b      	str	r3, [r7, #16]
 80052fa:	e001      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005300:	693b      	ldr	r3, [r7, #16]
}
 8005302:	4618      	mov	r0, r3
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40021000 	.word	0x40021000
 8005314:	00f42400 	.word	0x00f42400

08005318 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800531c:	4b03      	ldr	r3, [pc, #12]	@ (800532c <HAL_RCC_GetHCLKFreq+0x14>)
 800531e:	681b      	ldr	r3, [r3, #0]
}
 8005320:	4618      	mov	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20000000 	.word	0x20000000

08005330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005334:	f7ff fff0 	bl	8005318 <HAL_RCC_GetHCLKFreq>
 8005338:	4602      	mov	r2, r0
 800533a:	4b06      	ldr	r3, [pc, #24]	@ (8005354 <HAL_RCC_GetPCLK1Freq+0x24>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	0a1b      	lsrs	r3, r3, #8
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	4904      	ldr	r1, [pc, #16]	@ (8005358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005346:	5ccb      	ldrb	r3, [r1, r3]
 8005348:	f003 031f 	and.w	r3, r3, #31
 800534c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005350:	4618      	mov	r0, r3
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40021000 	.word	0x40021000
 8005358:	0800dae8 	.word	0x0800dae8

0800535c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005360:	f7ff ffda 	bl	8005318 <HAL_RCC_GetHCLKFreq>
 8005364:	4602      	mov	r2, r0
 8005366:	4b06      	ldr	r3, [pc, #24]	@ (8005380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	0adb      	lsrs	r3, r3, #11
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	4904      	ldr	r1, [pc, #16]	@ (8005384 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005372:	5ccb      	ldrb	r3, [r1, r3]
 8005374:	f003 031f 	and.w	r3, r3, #31
 8005378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800537c:	4618      	mov	r0, r3
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40021000 	.word	0x40021000
 8005384:	0800dae8 	.word	0x0800dae8

08005388 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800538e:	4b1e      	ldr	r3, [pc, #120]	@ (8005408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005398:	4b1b      	ldr	r3, [pc, #108]	@ (8005408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	091b      	lsrs	r3, r3, #4
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	3301      	adds	r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d10c      	bne.n	80053c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053ac:	4a17      	ldr	r2, [pc, #92]	@ (800540c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b4:	4a14      	ldr	r2, [pc, #80]	@ (8005408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053b6:	68d2      	ldr	r2, [r2, #12]
 80053b8:	0a12      	lsrs	r2, r2, #8
 80053ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053be:	fb02 f303 	mul.w	r3, r2, r3
 80053c2:	617b      	str	r3, [r7, #20]
    break;
 80053c4:	e00c      	b.n	80053e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053c6:	4a11      	ldr	r2, [pc, #68]	@ (800540c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ce:	4a0e      	ldr	r2, [pc, #56]	@ (8005408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053d0:	68d2      	ldr	r2, [r2, #12]
 80053d2:	0a12      	lsrs	r2, r2, #8
 80053d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053d8:	fb02 f303 	mul.w	r3, r2, r3
 80053dc:	617b      	str	r3, [r7, #20]
    break;
 80053de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053e0:	4b09      	ldr	r3, [pc, #36]	@ (8005408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	0e5b      	lsrs	r3, r3, #25
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	3301      	adds	r3, #1
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80053fa:	687b      	ldr	r3, [r7, #4]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	371c      	adds	r7, #28
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	40021000 	.word	0x40021000
 800540c:	00f42400 	.word	0x00f42400

08005410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005418:	2300      	movs	r3, #0
 800541a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800541c:	2300      	movs	r3, #0
 800541e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 8098 	beq.w	800555e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800542e:	2300      	movs	r3, #0
 8005430:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005432:	4b43      	ldr	r3, [pc, #268]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10d      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800543e:	4b40      	ldr	r3, [pc, #256]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005442:	4a3f      	ldr	r2, [pc, #252]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005448:	6593      	str	r3, [r2, #88]	@ 0x58
 800544a:	4b3d      	ldr	r3, [pc, #244]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800544c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005452:	60bb      	str	r3, [r7, #8]
 8005454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005456:	2301      	movs	r3, #1
 8005458:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800545a:	4b3a      	ldr	r3, [pc, #232]	@ (8005544 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a39      	ldr	r2, [pc, #228]	@ (8005544 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005464:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005466:	f7fd fc97 	bl	8002d98 <HAL_GetTick>
 800546a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800546c:	e009      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800546e:	f7fd fc93 	bl	8002d98 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d902      	bls.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	74fb      	strb	r3, [r7, #19]
        break;
 8005480:	e005      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005482:	4b30      	ldr	r3, [pc, #192]	@ (8005544 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0ef      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800548e:	7cfb      	ldrb	r3, [r7, #19]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d159      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005494:	4b2a      	ldr	r3, [pc, #168]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800549a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800549e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d01e      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d019      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054b0:	4b23      	ldr	r3, [pc, #140]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054bc:	4b20      	ldr	r3, [pc, #128]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054dc:	4a18      	ldr	r2, [pc, #96]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d016      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ee:	f7fd fc53 	bl	8002d98 <HAL_GetTick>
 80054f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054f4:	e00b      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054f6:	f7fd fc4f 	bl	8002d98 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005504:	4293      	cmp	r3, r2
 8005506:	d902      	bls.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	74fb      	strb	r3, [r7, #19]
            break;
 800550c:	e006      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800550e:	4b0c      	ldr	r3, [pc, #48]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0ec      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800551c:	7cfb      	ldrb	r3, [r7, #19]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10b      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005522:	4b07      	ldr	r3, [pc, #28]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005528:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005530:	4903      	ldr	r1, [pc, #12]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005538:	e008      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800553a:	7cfb      	ldrb	r3, [r7, #19]
 800553c:	74bb      	strb	r3, [r7, #18]
 800553e:	e005      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005540:	40021000 	.word	0x40021000
 8005544:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005548:	7cfb      	ldrb	r3, [r7, #19]
 800554a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800554c:	7c7b      	ldrb	r3, [r7, #17]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d105      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005552:	4ba6      	ldr	r3, [pc, #664]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005556:	4aa5      	ldr	r2, [pc, #660]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005558:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800555c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800556a:	4ba0      	ldr	r3, [pc, #640]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005570:	f023 0203 	bic.w	r2, r3, #3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	499c      	ldr	r1, [pc, #624]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800558c:	4b97      	ldr	r3, [pc, #604]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800558e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005592:	f023 020c 	bic.w	r2, r3, #12
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	4994      	ldr	r1, [pc, #592]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055ae:	4b8f      	ldr	r3, [pc, #572]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	498b      	ldr	r1, [pc, #556]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0308 	and.w	r3, r3, #8
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055d0:	4b86      	ldr	r3, [pc, #536]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	4983      	ldr	r1, [pc, #524]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055f2:	4b7e      	ldr	r3, [pc, #504]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	497a      	ldr	r1, [pc, #488]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005602:	4313      	orrs	r3, r2
 8005604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005614:	4b75      	ldr	r3, [pc, #468]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	4972      	ldr	r1, [pc, #456]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005624:	4313      	orrs	r3, r2
 8005626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005636:	4b6d      	ldr	r3, [pc, #436]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	4969      	ldr	r1, [pc, #420]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00a      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005658:	4b64      	ldr	r3, [pc, #400]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800565e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	4961      	ldr	r1, [pc, #388]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800567a:	4b5c      	ldr	r3, [pc, #368]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800567c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005680:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005688:	4958      	ldr	r1, [pc, #352]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005698:	2b00      	cmp	r3, #0
 800569a:	d015      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800569c:	4b53      	ldr	r3, [pc, #332]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800569e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056aa:	4950      	ldr	r1, [pc, #320]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056ba:	d105      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056bc:	4b4b      	ldr	r3, [pc, #300]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	4a4a      	ldr	r2, [pc, #296]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056c6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d015      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056d4:	4b45      	ldr	r3, [pc, #276]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e2:	4942      	ldr	r1, [pc, #264]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056f2:	d105      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056f4:	4b3d      	ldr	r3, [pc, #244]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	4a3c      	ldr	r2, [pc, #240]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056fe:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d015      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800570c:	4b37      	ldr	r3, [pc, #220]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800570e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005712:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800571a:	4934      	ldr	r1, [pc, #208]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800571c:	4313      	orrs	r3, r2
 800571e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005726:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800572a:	d105      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800572c:	4b2f      	ldr	r3, [pc, #188]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	4a2e      	ldr	r2, [pc, #184]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005732:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005736:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d015      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005744:	4b29      	ldr	r3, [pc, #164]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005752:	4926      	ldr	r1, [pc, #152]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800575e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005762:	d105      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005764:	4b21      	ldr	r3, [pc, #132]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	4a20      	ldr	r2, [pc, #128]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800576a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800576e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d015      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800577c:	4b1b      	ldr	r3, [pc, #108]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800577e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005782:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578a:	4918      	ldr	r1, [pc, #96]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800578c:	4313      	orrs	r3, r2
 800578e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005796:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800579a:	d105      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800579c:	4b13      	ldr	r3, [pc, #76]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	4a12      	ldr	r2, [pc, #72]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d015      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057b4:	4b0d      	ldr	r3, [pc, #52]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c2:	490a      	ldr	r1, [pc, #40]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057d2:	d105      	bne.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057d4:	4b05      	ldr	r3, [pc, #20]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	4a04      	ldr	r2, [pc, #16]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80057e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3718      	adds	r7, #24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	40021000 	.word	0x40021000

080057f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e09d      	b.n	800593e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	2b00      	cmp	r3, #0
 8005808:	d108      	bne.n	800581c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005812:	d009      	beq.n	8005828 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	61da      	str	r2, [r3, #28]
 800581a:	e005      	b.n	8005828 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fb fed6 	bl	80015f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800585e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005868:	d902      	bls.n	8005870 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	e002      	b.n	8005876 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005870:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005874:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800587e:	d007      	beq.n	8005890 <HAL_SPI_Init+0xa0>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005888:	d002      	beq.n	8005890 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80058a0:	431a      	orrs	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d2:	ea42 0103 	orr.w	r1, r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058da:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	0c1b      	lsrs	r3, r3, #16
 80058ec:	f003 0204 	and.w	r2, r3, #4
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f4:	f003 0310 	and.w	r3, r3, #16
 80058f8:	431a      	orrs	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800590c:	ea42 0103 	orr.w	r1, r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69da      	ldr	r2, [r3, #28]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800592c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b088      	sub	sp, #32
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	603b      	str	r3, [r7, #0]
 8005952:	4613      	mov	r3, r2
 8005954:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_SPI_Transmit+0x22>
 8005964:	2302      	movs	r3, #2
 8005966:	e15f      	b.n	8005c28 <HAL_SPI_Transmit+0x2e2>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005970:	f7fd fa12 	bl	8002d98 <HAL_GetTick>
 8005974:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005976:	88fb      	ldrh	r3, [r7, #6]
 8005978:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b01      	cmp	r3, #1
 8005984:	d002      	beq.n	800598c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005986:	2302      	movs	r3, #2
 8005988:	77fb      	strb	r3, [r7, #31]
    goto error;
 800598a:	e148      	b.n	8005c1e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <HAL_SPI_Transmit+0x52>
 8005992:	88fb      	ldrh	r3, [r7, #6]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d102      	bne.n	800599e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800599c:	e13f      	b.n	8005c1e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2203      	movs	r2, #3
 80059a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	88fa      	ldrh	r2, [r7, #6]
 80059b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	88fa      	ldrh	r2, [r7, #6]
 80059bc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059e8:	d10f      	bne.n	8005a0a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a14:	2b40      	cmp	r3, #64	@ 0x40
 8005a16:	d007      	beq.n	8005a28 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a30:	d94f      	bls.n	8005ad2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <HAL_SPI_Transmit+0xfa>
 8005a3a:	8afb      	ldrh	r3, [r7, #22]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d142      	bne.n	8005ac6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a44:	881a      	ldrh	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a50:	1c9a      	adds	r2, r3, #2
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a64:	e02f      	b.n	8005ac6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d112      	bne.n	8005a9a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a78:	881a      	ldrh	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a84:	1c9a      	adds	r2, r3, #2
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a98:	e015      	b.n	8005ac6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a9a:	f7fd f97d 	bl	8002d98 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d803      	bhi.n	8005ab2 <HAL_SPI_Transmit+0x16c>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab0:	d102      	bne.n	8005ab8 <HAL_SPI_Transmit+0x172>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d106      	bne.n	8005ac6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005ac4:	e0ab      	b.n	8005c1e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1ca      	bne.n	8005a66 <HAL_SPI_Transmit+0x120>
 8005ad0:	e080      	b.n	8005bd4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <HAL_SPI_Transmit+0x19a>
 8005ada:	8afb      	ldrh	r3, [r7, #22]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d174      	bne.n	8005bca <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d912      	bls.n	8005b10 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aee:	881a      	ldrh	r2, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afa:	1c9a      	adds	r2, r3, #2
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	3b02      	subs	r3, #2
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b0e:	e05c      	b.n	8005bca <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	330c      	adds	r3, #12
 8005b1a:	7812      	ldrb	r2, [r2, #0]
 8005b1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005b36:	e048      	b.n	8005bca <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d12b      	bne.n	8005b9e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d912      	bls.n	8005b76 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b54:	881a      	ldrh	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b60:	1c9a      	adds	r2, r3, #2
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	3b02      	subs	r3, #2
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b74:	e029      	b.n	8005bca <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	330c      	adds	r3, #12
 8005b80:	7812      	ldrb	r2, [r2, #0]
 8005b82:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b9c:	e015      	b.n	8005bca <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b9e:	f7fd f8fb 	bl	8002d98 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d803      	bhi.n	8005bb6 <HAL_SPI_Transmit+0x270>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb4:	d102      	bne.n	8005bbc <HAL_SPI_Transmit+0x276>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d106      	bne.n	8005bca <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005bc8:	e029      	b.n	8005c1e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1b1      	bne.n	8005b38 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	6839      	ldr	r1, [r7, #0]
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 fcf9 	bl	80065d0 <SPI_EndRxTxTransaction>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2220      	movs	r2, #32
 8005be8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	613b      	str	r3, [r7, #16]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	613b      	str	r3, [r7, #16]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	613b      	str	r3, [r7, #16]
 8005c06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	77fb      	strb	r3, [r7, #31]
 8005c14:	e003      	b.n	8005c1e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005c26:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3720      	adds	r7, #32
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d002      	beq.n	8005c56 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005c50:	2302      	movs	r3, #2
 8005c52:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c54:	e11a      	b.n	8005e8c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c5e:	d112      	bne.n	8005c86 <HAL_SPI_Receive+0x56>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10e      	bne.n	8005c86 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2204      	movs	r2, #4
 8005c6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c70:	88fa      	ldrh	r2, [r7, #6]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	4613      	mov	r3, r2
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	68b9      	ldr	r1, [r7, #8]
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 f90e 	bl	8005e9e <HAL_SPI_TransmitReceive>
 8005c82:	4603      	mov	r3, r0
 8005c84:	e107      	b.n	8005e96 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_SPI_Receive+0x64>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e100      	b.n	8005e96 <HAL_SPI_Receive+0x266>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c9c:	f7fd f87c 	bl	8002d98 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <HAL_SPI_Receive+0x7e>
 8005ca8:	88fb      	ldrh	r3, [r7, #6]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d102      	bne.n	8005cb4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cb2:	e0eb      	b.n	8005e8c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2204      	movs	r2, #4
 8005cb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	88fa      	ldrh	r2, [r7, #6]
 8005ccc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	88fa      	ldrh	r2, [r7, #6]
 8005cd4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cfe:	d908      	bls.n	8005d12 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d0e:	605a      	str	r2, [r3, #4]
 8005d10:	e007      	b.n	8005d22 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d20:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d2a:	d10f      	bne.n	8005d4c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d4a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d56:	2b40      	cmp	r3, #64	@ 0x40
 8005d58:	d007      	beq.n	8005d6a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d68:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d72:	d86f      	bhi.n	8005e54 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d74:	e034      	b.n	8005de0 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d117      	bne.n	8005db4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f103 020c 	add.w	r2, r3, #12
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d90:	7812      	ldrb	r2, [r2, #0]
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005db2:	e015      	b.n	8005de0 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005db4:	f7fc fff0 	bl	8002d98 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d803      	bhi.n	8005dcc <HAL_SPI_Receive+0x19c>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dca:	d102      	bne.n	8005dd2 <HAL_SPI_Receive+0x1a2>
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d106      	bne.n	8005de0 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005dde:	e055      	b.n	8005e8c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1c4      	bne.n	8005d76 <HAL_SPI_Receive+0x146>
 8005dec:	e038      	b.n	8005e60 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d115      	bne.n	8005e28 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e06:	b292      	uxth	r2, r2
 8005e08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0e:	1c9a      	adds	r2, r3, #2
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005e26:	e015      	b.n	8005e54 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e28:	f7fc ffb6 	bl	8002d98 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d803      	bhi.n	8005e40 <HAL_SPI_Receive+0x210>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3e:	d102      	bne.n	8005e46 <HAL_SPI_Receive+0x216>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005e52:	e01b      	b.n	8005e8c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1c6      	bne.n	8005dee <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	6839      	ldr	r1, [r7, #0]
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 fb5b 	bl	8006520 <SPI_EndRxTransaction>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2220      	movs	r2, #32
 8005e74:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d002      	beq.n	8005e84 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	75fb      	strb	r3, [r7, #23]
 8005e82:	e003      	b.n	8005e8c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b08a      	sub	sp, #40	@ 0x28
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	60f8      	str	r0, [r7, #12]
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	607a      	str	r2, [r7, #4]
 8005eaa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005eac:	2301      	movs	r3, #1
 8005eae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d101      	bne.n	8005ec4 <HAL_SPI_TransmitReceive+0x26>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	e20a      	b.n	80062da <HAL_SPI_TransmitReceive+0x43c>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ecc:	f7fc ff64 	bl	8002d98 <HAL_GetTick>
 8005ed0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ed8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005ee0:	887b      	ldrh	r3, [r7, #2]
 8005ee2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005ee4:	887b      	ldrh	r3, [r7, #2]
 8005ee6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ee8:	7efb      	ldrb	r3, [r7, #27]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d00e      	beq.n	8005f0c <HAL_SPI_TransmitReceive+0x6e>
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ef4:	d106      	bne.n	8005f04 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d102      	bne.n	8005f04 <HAL_SPI_TransmitReceive+0x66>
 8005efe:	7efb      	ldrb	r3, [r7, #27]
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d003      	beq.n	8005f0c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005f04:	2302      	movs	r3, #2
 8005f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005f0a:	e1e0      	b.n	80062ce <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d005      	beq.n	8005f1e <HAL_SPI_TransmitReceive+0x80>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <HAL_SPI_TransmitReceive+0x80>
 8005f18:	887b      	ldrh	r3, [r7, #2]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d103      	bne.n	8005f26 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005f24:	e1d3      	b.n	80062ce <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d003      	beq.n	8005f3a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2205      	movs	r2, #5
 8005f36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	887a      	ldrh	r2, [r7, #2]
 8005f4a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	887a      	ldrh	r2, [r7, #2]
 8005f52:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	887a      	ldrh	r2, [r7, #2]
 8005f60:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	887a      	ldrh	r2, [r7, #2]
 8005f66:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f7c:	d802      	bhi.n	8005f84 <HAL_SPI_TransmitReceive+0xe6>
 8005f7e:	8a3b      	ldrh	r3, [r7, #16]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d908      	bls.n	8005f96 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f92:	605a      	str	r2, [r3, #4]
 8005f94:	e007      	b.n	8005fa6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005fa4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb0:	2b40      	cmp	r3, #64	@ 0x40
 8005fb2:	d007      	beq.n	8005fc4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005fcc:	f240 8081 	bls.w	80060d2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <HAL_SPI_TransmitReceive+0x140>
 8005fd8:	8a7b      	ldrh	r3, [r7, #18]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d16d      	bne.n	80060ba <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe2:	881a      	ldrh	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fee:	1c9a      	adds	r2, r3, #2
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006002:	e05a      	b.n	80060ba <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b02      	cmp	r3, #2
 8006010:	d11b      	bne.n	800604a <HAL_SPI_TransmitReceive+0x1ac>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006016:	b29b      	uxth	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	d016      	beq.n	800604a <HAL_SPI_TransmitReceive+0x1ac>
 800601c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601e:	2b01      	cmp	r3, #1
 8006020:	d113      	bne.n	800604a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006026:	881a      	ldrh	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006032:	1c9a      	adds	r2, r3, #2
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800603c:	b29b      	uxth	r3, r3
 800603e:	3b01      	subs	r3, #1
 8006040:	b29a      	uxth	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b01      	cmp	r3, #1
 8006056:	d11c      	bne.n	8006092 <HAL_SPI_TransmitReceive+0x1f4>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800605e:	b29b      	uxth	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d016      	beq.n	8006092 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606e:	b292      	uxth	r2, r2
 8006070:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006076:	1c9a      	adds	r2, r3, #2
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006082:	b29b      	uxth	r3, r3
 8006084:	3b01      	subs	r3, #1
 8006086:	b29a      	uxth	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800608e:	2301      	movs	r3, #1
 8006090:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006092:	f7fc fe81 	bl	8002d98 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800609e:	429a      	cmp	r2, r3
 80060a0:	d80b      	bhi.n	80060ba <HAL_SPI_TransmitReceive+0x21c>
 80060a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a8:	d007      	beq.n	80060ba <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80060b8:	e109      	b.n	80062ce <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d19f      	bne.n	8006004 <HAL_SPI_TransmitReceive+0x166>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d199      	bne.n	8006004 <HAL_SPI_TransmitReceive+0x166>
 80060d0:	e0e3      	b.n	800629a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <HAL_SPI_TransmitReceive+0x244>
 80060da:	8a7b      	ldrh	r3, [r7, #18]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	f040 80cf 	bne.w	8006280 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d912      	bls.n	8006112 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f0:	881a      	ldrh	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060fc:	1c9a      	adds	r2, r3, #2
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006106:	b29b      	uxth	r3, r3
 8006108:	3b02      	subs	r3, #2
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006110:	e0b6      	b.n	8006280 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	330c      	adds	r3, #12
 800611c:	7812      	ldrb	r2, [r2, #0]
 800611e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006138:	e0a2      	b.n	8006280 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b02      	cmp	r3, #2
 8006146:	d134      	bne.n	80061b2 <HAL_SPI_TransmitReceive+0x314>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800614c:	b29b      	uxth	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d02f      	beq.n	80061b2 <HAL_SPI_TransmitReceive+0x314>
 8006152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006154:	2b01      	cmp	r3, #1
 8006156:	d12c      	bne.n	80061b2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800615c:	b29b      	uxth	r3, r3
 800615e:	2b01      	cmp	r3, #1
 8006160:	d912      	bls.n	8006188 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006166:	881a      	ldrh	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006172:	1c9a      	adds	r2, r3, #2
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800617c:	b29b      	uxth	r3, r3
 800617e:	3b02      	subs	r3, #2
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006186:	e012      	b.n	80061ae <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	330c      	adds	r3, #12
 8006192:	7812      	ldrb	r2, [r2, #0]
 8006194:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d148      	bne.n	8006252 <HAL_SPI_TransmitReceive+0x3b4>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d042      	beq.n	8006252 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d923      	bls.n	8006220 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e2:	b292      	uxth	r2, r2
 80061e4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ea:	1c9a      	adds	r2, r3, #2
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	3b02      	subs	r3, #2
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b01      	cmp	r3, #1
 800620c:	d81f      	bhi.n	800624e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800621c:	605a      	str	r2, [r3, #4]
 800621e:	e016      	b.n	800624e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f103 020c 	add.w	r2, r3, #12
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622c:	7812      	ldrb	r2, [r2, #0]
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006236:	1c5a      	adds	r2, r3, #1
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800624e:	2301      	movs	r3, #1
 8006250:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006252:	f7fc fda1 	bl	8002d98 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800625e:	429a      	cmp	r2, r3
 8006260:	d803      	bhi.n	800626a <HAL_SPI_TransmitReceive+0x3cc>
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006268:	d102      	bne.n	8006270 <HAL_SPI_TransmitReceive+0x3d2>
 800626a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626c:	2b00      	cmp	r3, #0
 800626e:	d107      	bne.n	8006280 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800627e:	e026      	b.n	80062ce <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	f47f af57 	bne.w	800613a <HAL_SPI_TransmitReceive+0x29c>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006292:	b29b      	uxth	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	f47f af50 	bne.w	800613a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800629a:	69fa      	ldr	r2, [r7, #28]
 800629c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f996 	bl	80065d0 <SPI_EndRxTxTransaction>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2220      	movs	r2, #32
 80062b4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062c4:	e003      	b.n	80062ce <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80062d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3728      	adds	r7, #40	@ 0x28
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b088      	sub	sp, #32
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	603b      	str	r3, [r7, #0]
 80062f0:	4613      	mov	r3, r2
 80062f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062f4:	f7fc fd50 	bl	8002d98 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	4413      	add	r3, r2
 8006302:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006304:	f7fc fd48 	bl	8002d98 <HAL_GetTick>
 8006308:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800630a:	4b39      	ldr	r3, [pc, #228]	@ (80063f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	015b      	lsls	r3, r3, #5
 8006310:	0d1b      	lsrs	r3, r3, #20
 8006312:	69fa      	ldr	r2, [r7, #28]
 8006314:	fb02 f303 	mul.w	r3, r2, r3
 8006318:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800631a:	e054      	b.n	80063c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006322:	d050      	beq.n	80063c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006324:	f7fc fd38 	bl	8002d98 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	69fa      	ldr	r2, [r7, #28]
 8006330:	429a      	cmp	r2, r3
 8006332:	d902      	bls.n	800633a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d13d      	bne.n	80063b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006348:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006352:	d111      	bne.n	8006378 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800635c:	d004      	beq.n	8006368 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006366:	d107      	bne.n	8006378 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006376:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006380:	d10f      	bne.n	80063a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e017      	b.n	80063e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	4013      	ands	r3, r2
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	bf0c      	ite	eq
 80063d6:	2301      	moveq	r3, #1
 80063d8:	2300      	movne	r3, #0
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	461a      	mov	r2, r3
 80063de:	79fb      	ldrb	r3, [r7, #7]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d19b      	bne.n	800631c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3720      	adds	r7, #32
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	20000000 	.word	0x20000000

080063f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08a      	sub	sp, #40	@ 0x28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006406:	f7fc fcc7 	bl	8002d98 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640e:	1a9b      	subs	r3, r3, r2
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	4413      	add	r3, r2
 8006414:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006416:	f7fc fcbf 	bl	8002d98 <HAL_GetTick>
 800641a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	330c      	adds	r3, #12
 8006422:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006424:	4b3d      	ldr	r3, [pc, #244]	@ (800651c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	4613      	mov	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	00da      	lsls	r2, r3, #3
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	0d1b      	lsrs	r3, r3, #20
 8006434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006436:	fb02 f303 	mul.w	r3, r2, r3
 800643a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800643c:	e060      	b.n	8006500 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006444:	d107      	bne.n	8006456 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d104      	bne.n	8006456 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006454:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645c:	d050      	beq.n	8006500 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800645e:	f7fc fc9b 	bl	8002d98 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800646a:	429a      	cmp	r2, r3
 800646c:	d902      	bls.n	8006474 <SPI_WaitFifoStateUntilTimeout+0x80>
 800646e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006470:	2b00      	cmp	r3, #0
 8006472:	d13d      	bne.n	80064f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006482:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800648c:	d111      	bne.n	80064b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006496:	d004      	beq.n	80064a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064a0:	d107      	bne.n	80064b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064ba:	d10f      	bne.n	80064dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e010      	b.n	8006512 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	3b01      	subs	r3, #1
 80064fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	4013      	ands	r3, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	429a      	cmp	r2, r3
 800650e:	d196      	bne.n	800643e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3728      	adds	r7, #40	@ 0x28
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20000000 	.word	0x20000000

08006520 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af02      	add	r7, sp, #8
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006534:	d111      	bne.n	800655a <SPI_EndRxTransaction+0x3a>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800653e:	d004      	beq.n	800654a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006548:	d107      	bne.n	800655a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006558:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2200      	movs	r2, #0
 8006562:	2180      	movs	r1, #128	@ 0x80
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f7ff febd 	bl	80062e4 <SPI_WaitFlagStateUntilTimeout>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d007      	beq.n	8006580 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006574:	f043 0220 	orr.w	r2, r3, #32
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e023      	b.n	80065c8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006588:	d11d      	bne.n	80065c6 <SPI_EndRxTransaction+0xa6>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006592:	d004      	beq.n	800659e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800659c:	d113      	bne.n	80065c6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f7ff ff22 	bl	80063f4 <SPI_WaitFifoStateUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d007      	beq.n	80065c6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065ba:	f043 0220 	orr.w	r2, r3, #32
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e000      	b.n	80065c8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f7ff ff03 	bl	80063f4 <SPI_WaitFifoStateUntilTimeout>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d007      	beq.n	8006604 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065f8:	f043 0220 	orr.w	r2, r3, #32
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e027      	b.n	8006654 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2200      	movs	r2, #0
 800660c:	2180      	movs	r1, #128	@ 0x80
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f7ff fe68 	bl	80062e4 <SPI_WaitFlagStateUntilTimeout>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d007      	beq.n	800662a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800661e:	f043 0220 	orr.w	r2, r3, #32
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e014      	b.n	8006654 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2200      	movs	r2, #0
 8006632:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f7ff fedc 	bl	80063f4 <SPI_WaitFifoStateUntilTimeout>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d007      	beq.n	8006652 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006646:	f043 0220 	orr.w	r2, r3, #32
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e000      	b.n	8006654 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e049      	b.n	8006702 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d106      	bne.n	8006688 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fb fc3c 	bl	8001f00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3304      	adds	r3, #4
 8006698:	4619      	mov	r1, r3
 800669a:	4610      	mov	r0, r2
 800669c:	f000 faf0 	bl	8006c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
	...

0800670c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d109      	bne.n	8006730 <HAL_TIM_PWM_Start+0x24>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b01      	cmp	r3, #1
 8006726:	bf14      	ite	ne
 8006728:	2301      	movne	r3, #1
 800672a:	2300      	moveq	r3, #0
 800672c:	b2db      	uxtb	r3, r3
 800672e:	e03c      	b.n	80067aa <HAL_TIM_PWM_Start+0x9e>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b04      	cmp	r3, #4
 8006734:	d109      	bne.n	800674a <HAL_TIM_PWM_Start+0x3e>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b01      	cmp	r3, #1
 8006740:	bf14      	ite	ne
 8006742:	2301      	movne	r3, #1
 8006744:	2300      	moveq	r3, #0
 8006746:	b2db      	uxtb	r3, r3
 8006748:	e02f      	b.n	80067aa <HAL_TIM_PWM_Start+0x9e>
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b08      	cmp	r3, #8
 800674e:	d109      	bne.n	8006764 <HAL_TIM_PWM_Start+0x58>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b01      	cmp	r3, #1
 800675a:	bf14      	ite	ne
 800675c:	2301      	movne	r3, #1
 800675e:	2300      	moveq	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	e022      	b.n	80067aa <HAL_TIM_PWM_Start+0x9e>
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2b0c      	cmp	r3, #12
 8006768:	d109      	bne.n	800677e <HAL_TIM_PWM_Start+0x72>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b01      	cmp	r3, #1
 8006774:	bf14      	ite	ne
 8006776:	2301      	movne	r3, #1
 8006778:	2300      	moveq	r3, #0
 800677a:	b2db      	uxtb	r3, r3
 800677c:	e015      	b.n	80067aa <HAL_TIM_PWM_Start+0x9e>
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b10      	cmp	r3, #16
 8006782:	d109      	bne.n	8006798 <HAL_TIM_PWM_Start+0x8c>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b01      	cmp	r3, #1
 800678e:	bf14      	ite	ne
 8006790:	2301      	movne	r3, #1
 8006792:	2300      	moveq	r3, #0
 8006794:	b2db      	uxtb	r3, r3
 8006796:	e008      	b.n	80067aa <HAL_TIM_PWM_Start+0x9e>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	bf14      	ite	ne
 80067a4:	2301      	movne	r3, #1
 80067a6:	2300      	moveq	r3, #0
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e097      	b.n	80068e2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d104      	bne.n	80067c2 <HAL_TIM_PWM_Start+0xb6>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067c0:	e023      	b.n	800680a <HAL_TIM_PWM_Start+0xfe>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b04      	cmp	r3, #4
 80067c6:	d104      	bne.n	80067d2 <HAL_TIM_PWM_Start+0xc6>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067d0:	e01b      	b.n	800680a <HAL_TIM_PWM_Start+0xfe>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b08      	cmp	r3, #8
 80067d6:	d104      	bne.n	80067e2 <HAL_TIM_PWM_Start+0xd6>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067e0:	e013      	b.n	800680a <HAL_TIM_PWM_Start+0xfe>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b0c      	cmp	r3, #12
 80067e6:	d104      	bne.n	80067f2 <HAL_TIM_PWM_Start+0xe6>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067f0:	e00b      	b.n	800680a <HAL_TIM_PWM_Start+0xfe>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b10      	cmp	r3, #16
 80067f6:	d104      	bne.n	8006802 <HAL_TIM_PWM_Start+0xf6>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006800:	e003      	b.n	800680a <HAL_TIM_PWM_Start+0xfe>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2202      	movs	r2, #2
 8006806:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2201      	movs	r2, #1
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	4618      	mov	r0, r3
 8006814:	f000 fdc6 	bl	80073a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a33      	ldr	r2, [pc, #204]	@ (80068ec <HAL_TIM_PWM_Start+0x1e0>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d013      	beq.n	800684a <HAL_TIM_PWM_Start+0x13e>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a32      	ldr	r2, [pc, #200]	@ (80068f0 <HAL_TIM_PWM_Start+0x1e4>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d00e      	beq.n	800684a <HAL_TIM_PWM_Start+0x13e>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a30      	ldr	r2, [pc, #192]	@ (80068f4 <HAL_TIM_PWM_Start+0x1e8>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d009      	beq.n	800684a <HAL_TIM_PWM_Start+0x13e>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a2f      	ldr	r2, [pc, #188]	@ (80068f8 <HAL_TIM_PWM_Start+0x1ec>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d004      	beq.n	800684a <HAL_TIM_PWM_Start+0x13e>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a2d      	ldr	r2, [pc, #180]	@ (80068fc <HAL_TIM_PWM_Start+0x1f0>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d101      	bne.n	800684e <HAL_TIM_PWM_Start+0x142>
 800684a:	2301      	movs	r3, #1
 800684c:	e000      	b.n	8006850 <HAL_TIM_PWM_Start+0x144>
 800684e:	2300      	movs	r3, #0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d007      	beq.n	8006864 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006862:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a20      	ldr	r2, [pc, #128]	@ (80068ec <HAL_TIM_PWM_Start+0x1e0>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d018      	beq.n	80068a0 <HAL_TIM_PWM_Start+0x194>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006876:	d013      	beq.n	80068a0 <HAL_TIM_PWM_Start+0x194>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a20      	ldr	r2, [pc, #128]	@ (8006900 <HAL_TIM_PWM_Start+0x1f4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d00e      	beq.n	80068a0 <HAL_TIM_PWM_Start+0x194>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a1f      	ldr	r2, [pc, #124]	@ (8006904 <HAL_TIM_PWM_Start+0x1f8>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d009      	beq.n	80068a0 <HAL_TIM_PWM_Start+0x194>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a17      	ldr	r2, [pc, #92]	@ (80068f0 <HAL_TIM_PWM_Start+0x1e4>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d004      	beq.n	80068a0 <HAL_TIM_PWM_Start+0x194>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a16      	ldr	r2, [pc, #88]	@ (80068f4 <HAL_TIM_PWM_Start+0x1e8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d115      	bne.n	80068cc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689a      	ldr	r2, [r3, #8]
 80068a6:	4b18      	ldr	r3, [pc, #96]	@ (8006908 <HAL_TIM_PWM_Start+0x1fc>)
 80068a8:	4013      	ands	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b06      	cmp	r3, #6
 80068b0:	d015      	beq.n	80068de <HAL_TIM_PWM_Start+0x1d2>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068b8:	d011      	beq.n	80068de <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f042 0201 	orr.w	r2, r2, #1
 80068c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ca:	e008      	b.n	80068de <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 0201 	orr.w	r2, r2, #1
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	e000      	b.n	80068e0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	40012c00 	.word	0x40012c00
 80068f0:	40013400 	.word	0x40013400
 80068f4:	40014000 	.word	0x40014000
 80068f8:	40014400 	.word	0x40014400
 80068fc:	40014800 	.word	0x40014800
 8006900:	40000400 	.word	0x40000400
 8006904:	40000800 	.word	0x40000800
 8006908:	00010007 	.word	0x00010007

0800690c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e097      	b.n	8006a50 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d106      	bne.n	800693a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7fb fb4d 	bl	8001fd4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2202      	movs	r2, #2
 800693e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6812      	ldr	r2, [r2, #0]
 800694c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006950:	f023 0307 	bic.w	r3, r3, #7
 8006954:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3304      	adds	r3, #4
 800695e:	4619      	mov	r1, r3
 8006960:	4610      	mov	r0, r2
 8006962:	f000 f98d 	bl	8006c80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	4313      	orrs	r3, r2
 8006986:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800698e:	f023 0303 	bic.w	r3, r3, #3
 8006992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	4313      	orrs	r3, r2
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80069ac:	f023 030c 	bic.w	r3, r3, #12
 80069b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	021b      	lsls	r3, r3, #8
 80069c8:	4313      	orrs	r3, r2
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	011a      	lsls	r2, r3, #4
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	031b      	lsls	r3, r3, #12
 80069dc:	4313      	orrs	r3, r2
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80069ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80069f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	011b      	lsls	r3, r3, #4
 80069fe:	4313      	orrs	r3, r2
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d101      	bne.n	8006a76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a72:	2302      	movs	r3, #2
 8006a74:	e0ff      	b.n	8006c76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b14      	cmp	r3, #20
 8006a82:	f200 80f0 	bhi.w	8006c66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006a86:	a201      	add	r2, pc, #4	@ (adr r2, 8006a8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8c:	08006ae1 	.word	0x08006ae1
 8006a90:	08006c67 	.word	0x08006c67
 8006a94:	08006c67 	.word	0x08006c67
 8006a98:	08006c67 	.word	0x08006c67
 8006a9c:	08006b21 	.word	0x08006b21
 8006aa0:	08006c67 	.word	0x08006c67
 8006aa4:	08006c67 	.word	0x08006c67
 8006aa8:	08006c67 	.word	0x08006c67
 8006aac:	08006b63 	.word	0x08006b63
 8006ab0:	08006c67 	.word	0x08006c67
 8006ab4:	08006c67 	.word	0x08006c67
 8006ab8:	08006c67 	.word	0x08006c67
 8006abc:	08006ba3 	.word	0x08006ba3
 8006ac0:	08006c67 	.word	0x08006c67
 8006ac4:	08006c67 	.word	0x08006c67
 8006ac8:	08006c67 	.word	0x08006c67
 8006acc:	08006be5 	.word	0x08006be5
 8006ad0:	08006c67 	.word	0x08006c67
 8006ad4:	08006c67 	.word	0x08006c67
 8006ad8:	08006c67 	.word	0x08006c67
 8006adc:	08006c25 	.word	0x08006c25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68b9      	ldr	r1, [r7, #8]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 f966 	bl	8006db8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	699a      	ldr	r2, [r3, #24]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0208 	orr.w	r2, r2, #8
 8006afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	699a      	ldr	r2, [r3, #24]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0204 	bic.w	r2, r2, #4
 8006b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6999      	ldr	r1, [r3, #24]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	691a      	ldr	r2, [r3, #16]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	619a      	str	r2, [r3, #24]
      break;
 8006b1e:	e0a5      	b.n	8006c6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68b9      	ldr	r1, [r7, #8]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 f9d6 	bl	8006ed8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	699a      	ldr	r2, [r3, #24]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	699a      	ldr	r2, [r3, #24]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6999      	ldr	r1, [r3, #24]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	021a      	lsls	r2, r3, #8
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	619a      	str	r2, [r3, #24]
      break;
 8006b60:	e084      	b.n	8006c6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68b9      	ldr	r1, [r7, #8]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 fa3f 	bl	8006fec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	69da      	ldr	r2, [r3, #28]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f042 0208 	orr.w	r2, r2, #8
 8006b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	69da      	ldr	r2, [r3, #28]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 0204 	bic.w	r2, r2, #4
 8006b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	69d9      	ldr	r1, [r3, #28]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	691a      	ldr	r2, [r3, #16]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	61da      	str	r2, [r3, #28]
      break;
 8006ba0:	e064      	b.n	8006c6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68b9      	ldr	r1, [r7, #8]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 faa7 	bl	80070fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69da      	ldr	r2, [r3, #28]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	69da      	ldr	r2, [r3, #28]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69d9      	ldr	r1, [r3, #28]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	021a      	lsls	r2, r3, #8
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	61da      	str	r2, [r3, #28]
      break;
 8006be2:	e043      	b.n	8006c6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68b9      	ldr	r1, [r7, #8]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fb10 	bl	8007210 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0208 	orr.w	r2, r2, #8
 8006bfe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0204 	bic.w	r2, r2, #4
 8006c0e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	691a      	ldr	r2, [r3, #16]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006c22:	e023      	b.n	8006c6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 fb54 	bl	80072d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c3e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c4e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	021a      	lsls	r2, r3, #8
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006c64:	e002      	b.n	8006c6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	75fb      	strb	r3, [r7, #23]
      break;
 8006c6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop

08006c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a42      	ldr	r2, [pc, #264]	@ (8006d9c <TIM_Base_SetConfig+0x11c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00f      	beq.n	8006cb8 <TIM_Base_SetConfig+0x38>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c9e:	d00b      	beq.n	8006cb8 <TIM_Base_SetConfig+0x38>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a3f      	ldr	r2, [pc, #252]	@ (8006da0 <TIM_Base_SetConfig+0x120>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d007      	beq.n	8006cb8 <TIM_Base_SetConfig+0x38>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a3e      	ldr	r2, [pc, #248]	@ (8006da4 <TIM_Base_SetConfig+0x124>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d003      	beq.n	8006cb8 <TIM_Base_SetConfig+0x38>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a3d      	ldr	r2, [pc, #244]	@ (8006da8 <TIM_Base_SetConfig+0x128>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d108      	bne.n	8006cca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a33      	ldr	r2, [pc, #204]	@ (8006d9c <TIM_Base_SetConfig+0x11c>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d01b      	beq.n	8006d0a <TIM_Base_SetConfig+0x8a>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cd8:	d017      	beq.n	8006d0a <TIM_Base_SetConfig+0x8a>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a30      	ldr	r2, [pc, #192]	@ (8006da0 <TIM_Base_SetConfig+0x120>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d013      	beq.n	8006d0a <TIM_Base_SetConfig+0x8a>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a2f      	ldr	r2, [pc, #188]	@ (8006da4 <TIM_Base_SetConfig+0x124>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d00f      	beq.n	8006d0a <TIM_Base_SetConfig+0x8a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a2e      	ldr	r2, [pc, #184]	@ (8006da8 <TIM_Base_SetConfig+0x128>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00b      	beq.n	8006d0a <TIM_Base_SetConfig+0x8a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a2d      	ldr	r2, [pc, #180]	@ (8006dac <TIM_Base_SetConfig+0x12c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d007      	beq.n	8006d0a <TIM_Base_SetConfig+0x8a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a2c      	ldr	r2, [pc, #176]	@ (8006db0 <TIM_Base_SetConfig+0x130>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d003      	beq.n	8006d0a <TIM_Base_SetConfig+0x8a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a2b      	ldr	r2, [pc, #172]	@ (8006db4 <TIM_Base_SetConfig+0x134>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d108      	bne.n	8006d1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a16      	ldr	r2, [pc, #88]	@ (8006d9c <TIM_Base_SetConfig+0x11c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d00f      	beq.n	8006d68 <TIM_Base_SetConfig+0xe8>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a17      	ldr	r2, [pc, #92]	@ (8006da8 <TIM_Base_SetConfig+0x128>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00b      	beq.n	8006d68 <TIM_Base_SetConfig+0xe8>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a16      	ldr	r2, [pc, #88]	@ (8006dac <TIM_Base_SetConfig+0x12c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d007      	beq.n	8006d68 <TIM_Base_SetConfig+0xe8>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a15      	ldr	r2, [pc, #84]	@ (8006db0 <TIM_Base_SetConfig+0x130>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d003      	beq.n	8006d68 <TIM_Base_SetConfig+0xe8>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a14      	ldr	r2, [pc, #80]	@ (8006db4 <TIM_Base_SetConfig+0x134>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d103      	bne.n	8006d70 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d105      	bne.n	8006d8e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	f023 0201 	bic.w	r2, r3, #1
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	611a      	str	r2, [r3, #16]
  }
}
 8006d8e:	bf00      	nop
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40012c00 	.word	0x40012c00
 8006da0:	40000400 	.word	0x40000400
 8006da4:	40000800 	.word	0x40000800
 8006da8:	40013400 	.word	0x40013400
 8006dac:	40014000 	.word	0x40014000
 8006db0:	40014400 	.word	0x40014400
 8006db4:	40014800 	.word	0x40014800

08006db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	f023 0201 	bic.w	r2, r3, #1
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f023 0303 	bic.w	r3, r3, #3
 8006df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f023 0302 	bic.w	r3, r3, #2
 8006e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a2c      	ldr	r2, [pc, #176]	@ (8006ec4 <TIM_OC1_SetConfig+0x10c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00f      	beq.n	8006e38 <TIM_OC1_SetConfig+0x80>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a2b      	ldr	r2, [pc, #172]	@ (8006ec8 <TIM_OC1_SetConfig+0x110>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d00b      	beq.n	8006e38 <TIM_OC1_SetConfig+0x80>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a2a      	ldr	r2, [pc, #168]	@ (8006ecc <TIM_OC1_SetConfig+0x114>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d007      	beq.n	8006e38 <TIM_OC1_SetConfig+0x80>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a29      	ldr	r2, [pc, #164]	@ (8006ed0 <TIM_OC1_SetConfig+0x118>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d003      	beq.n	8006e38 <TIM_OC1_SetConfig+0x80>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a28      	ldr	r2, [pc, #160]	@ (8006ed4 <TIM_OC1_SetConfig+0x11c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d10c      	bne.n	8006e52 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f023 0308 	bic.w	r3, r3, #8
 8006e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f023 0304 	bic.w	r3, r3, #4
 8006e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a1b      	ldr	r2, [pc, #108]	@ (8006ec4 <TIM_OC1_SetConfig+0x10c>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00f      	beq.n	8006e7a <TIM_OC1_SetConfig+0xc2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a1a      	ldr	r2, [pc, #104]	@ (8006ec8 <TIM_OC1_SetConfig+0x110>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d00b      	beq.n	8006e7a <TIM_OC1_SetConfig+0xc2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a19      	ldr	r2, [pc, #100]	@ (8006ecc <TIM_OC1_SetConfig+0x114>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d007      	beq.n	8006e7a <TIM_OC1_SetConfig+0xc2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a18      	ldr	r2, [pc, #96]	@ (8006ed0 <TIM_OC1_SetConfig+0x118>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d003      	beq.n	8006e7a <TIM_OC1_SetConfig+0xc2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a17      	ldr	r2, [pc, #92]	@ (8006ed4 <TIM_OC1_SetConfig+0x11c>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d111      	bne.n	8006e9e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	621a      	str	r2, [r3, #32]
}
 8006eb8:	bf00      	nop
 8006eba:	371c      	adds	r7, #28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	40012c00 	.word	0x40012c00
 8006ec8:	40013400 	.word	0x40013400
 8006ecc:	40014000 	.word	0x40014000
 8006ed0:	40014400 	.word	0x40014400
 8006ed4:	40014800 	.word	0x40014800

08006ed8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	f023 0210 	bic.w	r2, r3, #16
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	021b      	lsls	r3, r3, #8
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f023 0320 	bic.w	r3, r3, #32
 8006f26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	011b      	lsls	r3, r3, #4
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a28      	ldr	r2, [pc, #160]	@ (8006fd8 <TIM_OC2_SetConfig+0x100>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d003      	beq.n	8006f44 <TIM_OC2_SetConfig+0x6c>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a27      	ldr	r2, [pc, #156]	@ (8006fdc <TIM_OC2_SetConfig+0x104>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d10d      	bne.n	8006f60 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a1d      	ldr	r2, [pc, #116]	@ (8006fd8 <TIM_OC2_SetConfig+0x100>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00f      	beq.n	8006f88 <TIM_OC2_SetConfig+0xb0>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8006fdc <TIM_OC2_SetConfig+0x104>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d00b      	beq.n	8006f88 <TIM_OC2_SetConfig+0xb0>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a1b      	ldr	r2, [pc, #108]	@ (8006fe0 <TIM_OC2_SetConfig+0x108>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d007      	beq.n	8006f88 <TIM_OC2_SetConfig+0xb0>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a1a      	ldr	r2, [pc, #104]	@ (8006fe4 <TIM_OC2_SetConfig+0x10c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d003      	beq.n	8006f88 <TIM_OC2_SetConfig+0xb0>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a19      	ldr	r2, [pc, #100]	@ (8006fe8 <TIM_OC2_SetConfig+0x110>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d113      	bne.n	8006fb0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	621a      	str	r2, [r3, #32]
}
 8006fca:	bf00      	nop
 8006fcc:	371c      	adds	r7, #28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	40012c00 	.word	0x40012c00
 8006fdc:	40013400 	.word	0x40013400
 8006fe0:	40014000 	.word	0x40014000
 8006fe4:	40014400 	.word	0x40014400
 8006fe8:	40014800 	.word	0x40014800

08006fec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800701a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800701e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0303 	bic.w	r3, r3, #3
 8007026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	021b      	lsls	r3, r3, #8
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	4313      	orrs	r3, r2
 8007044:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a27      	ldr	r2, [pc, #156]	@ (80070e8 <TIM_OC3_SetConfig+0xfc>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d003      	beq.n	8007056 <TIM_OC3_SetConfig+0x6a>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a26      	ldr	r2, [pc, #152]	@ (80070ec <TIM_OC3_SetConfig+0x100>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d10d      	bne.n	8007072 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800705c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	021b      	lsls	r3, r3, #8
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	4313      	orrs	r3, r2
 8007068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a1c      	ldr	r2, [pc, #112]	@ (80070e8 <TIM_OC3_SetConfig+0xfc>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d00f      	beq.n	800709a <TIM_OC3_SetConfig+0xae>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a1b      	ldr	r2, [pc, #108]	@ (80070ec <TIM_OC3_SetConfig+0x100>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d00b      	beq.n	800709a <TIM_OC3_SetConfig+0xae>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a1a      	ldr	r2, [pc, #104]	@ (80070f0 <TIM_OC3_SetConfig+0x104>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d007      	beq.n	800709a <TIM_OC3_SetConfig+0xae>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a19      	ldr	r2, [pc, #100]	@ (80070f4 <TIM_OC3_SetConfig+0x108>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d003      	beq.n	800709a <TIM_OC3_SetConfig+0xae>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a18      	ldr	r2, [pc, #96]	@ (80070f8 <TIM_OC3_SetConfig+0x10c>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d113      	bne.n	80070c2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	011b      	lsls	r3, r3, #4
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	621a      	str	r2, [r3, #32]
}
 80070dc:	bf00      	nop
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	40012c00 	.word	0x40012c00
 80070ec:	40013400 	.word	0x40013400
 80070f0:	40014000 	.word	0x40014000
 80070f4:	40014400 	.word	0x40014400
 80070f8:	40014800 	.word	0x40014800

080070fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800712a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800712e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	021b      	lsls	r3, r3, #8
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	4313      	orrs	r3, r2
 8007142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800714a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	031b      	lsls	r3, r3, #12
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	4313      	orrs	r3, r2
 8007156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a28      	ldr	r2, [pc, #160]	@ (80071fc <TIM_OC4_SetConfig+0x100>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d003      	beq.n	8007168 <TIM_OC4_SetConfig+0x6c>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a27      	ldr	r2, [pc, #156]	@ (8007200 <TIM_OC4_SetConfig+0x104>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d10d      	bne.n	8007184 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800716e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	031b      	lsls	r3, r3, #12
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	4313      	orrs	r3, r2
 800717a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007182:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a1d      	ldr	r2, [pc, #116]	@ (80071fc <TIM_OC4_SetConfig+0x100>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d00f      	beq.n	80071ac <TIM_OC4_SetConfig+0xb0>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a1c      	ldr	r2, [pc, #112]	@ (8007200 <TIM_OC4_SetConfig+0x104>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00b      	beq.n	80071ac <TIM_OC4_SetConfig+0xb0>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a1b      	ldr	r2, [pc, #108]	@ (8007204 <TIM_OC4_SetConfig+0x108>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d007      	beq.n	80071ac <TIM_OC4_SetConfig+0xb0>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a1a      	ldr	r2, [pc, #104]	@ (8007208 <TIM_OC4_SetConfig+0x10c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d003      	beq.n	80071ac <TIM_OC4_SetConfig+0xb0>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a19      	ldr	r2, [pc, #100]	@ (800720c <TIM_OC4_SetConfig+0x110>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d113      	bne.n	80071d4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071b2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071ba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	019b      	lsls	r3, r3, #6
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	019b      	lsls	r3, r3, #6
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	621a      	str	r2, [r3, #32]
}
 80071ee:	bf00      	nop
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	40012c00 	.word	0x40012c00
 8007200:	40013400 	.word	0x40013400
 8007204:	40014000 	.word	0x40014000
 8007208:	40014400 	.word	0x40014400
 800720c:	40014800 	.word	0x40014800

08007210 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800723e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	4313      	orrs	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007254:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	041b      	lsls	r3, r3, #16
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	4313      	orrs	r3, r2
 8007260:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a17      	ldr	r2, [pc, #92]	@ (80072c4 <TIM_OC5_SetConfig+0xb4>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00f      	beq.n	800728a <TIM_OC5_SetConfig+0x7a>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a16      	ldr	r2, [pc, #88]	@ (80072c8 <TIM_OC5_SetConfig+0xb8>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d00b      	beq.n	800728a <TIM_OC5_SetConfig+0x7a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a15      	ldr	r2, [pc, #84]	@ (80072cc <TIM_OC5_SetConfig+0xbc>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d007      	beq.n	800728a <TIM_OC5_SetConfig+0x7a>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a14      	ldr	r2, [pc, #80]	@ (80072d0 <TIM_OC5_SetConfig+0xc0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d003      	beq.n	800728a <TIM_OC5_SetConfig+0x7a>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a13      	ldr	r2, [pc, #76]	@ (80072d4 <TIM_OC5_SetConfig+0xc4>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d109      	bne.n	800729e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007290:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	021b      	lsls	r3, r3, #8
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	4313      	orrs	r3, r2
 800729c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	621a      	str	r2, [r3, #32]
}
 80072b8:	bf00      	nop
 80072ba:	371c      	adds	r7, #28
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	40012c00 	.word	0x40012c00
 80072c8:	40013400 	.word	0x40013400
 80072cc:	40014000 	.word	0x40014000
 80072d0:	40014400 	.word	0x40014400
 80072d4:	40014800 	.word	0x40014800

080072d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a1b      	ldr	r3, [r3, #32]
 80072ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007306:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800730a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	021b      	lsls	r3, r3, #8
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800731e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	051b      	lsls	r3, r3, #20
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	4313      	orrs	r3, r2
 800732a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a18      	ldr	r2, [pc, #96]	@ (8007390 <TIM_OC6_SetConfig+0xb8>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d00f      	beq.n	8007354 <TIM_OC6_SetConfig+0x7c>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a17      	ldr	r2, [pc, #92]	@ (8007394 <TIM_OC6_SetConfig+0xbc>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d00b      	beq.n	8007354 <TIM_OC6_SetConfig+0x7c>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a16      	ldr	r2, [pc, #88]	@ (8007398 <TIM_OC6_SetConfig+0xc0>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d007      	beq.n	8007354 <TIM_OC6_SetConfig+0x7c>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a15      	ldr	r2, [pc, #84]	@ (800739c <TIM_OC6_SetConfig+0xc4>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d003      	beq.n	8007354 <TIM_OC6_SetConfig+0x7c>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a14      	ldr	r2, [pc, #80]	@ (80073a0 <TIM_OC6_SetConfig+0xc8>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d109      	bne.n	8007368 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800735a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	029b      	lsls	r3, r3, #10
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	4313      	orrs	r3, r2
 8007366:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	621a      	str	r2, [r3, #32]
}
 8007382:	bf00      	nop
 8007384:	371c      	adds	r7, #28
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	40012c00 	.word	0x40012c00
 8007394:	40013400 	.word	0x40013400
 8007398:	40014000 	.word	0x40014000
 800739c:	40014400 	.word	0x40014400
 80073a0:	40014800 	.word	0x40014800

080073a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f003 031f 	and.w	r3, r3, #31
 80073b6:	2201      	movs	r2, #1
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6a1a      	ldr	r2, [r3, #32]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	43db      	mvns	r3, r3
 80073c6:	401a      	ands	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6a1a      	ldr	r2, [r3, #32]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f003 031f 	and.w	r3, r3, #31
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	fa01 f303 	lsl.w	r3, r1, r3
 80073dc:	431a      	orrs	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	621a      	str	r2, [r3, #32]
}
 80073e2:	bf00      	nop
 80073e4:	371c      	adds	r7, #28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
	...

080073f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007400:	2b01      	cmp	r3, #1
 8007402:	d101      	bne.n	8007408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007404:	2302      	movs	r3, #2
 8007406:	e065      	b.n	80074d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2202      	movs	r2, #2
 8007414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a2c      	ldr	r2, [pc, #176]	@ (80074e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d004      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a2b      	ldr	r2, [pc, #172]	@ (80074e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d108      	bne.n	800744e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007442:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	4313      	orrs	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007454:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007458:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	4313      	orrs	r3, r2
 8007462:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a1b      	ldr	r2, [pc, #108]	@ (80074e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d018      	beq.n	80074a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800747e:	d013      	beq.n	80074a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a18      	ldr	r2, [pc, #96]	@ (80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d00e      	beq.n	80074a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a17      	ldr	r2, [pc, #92]	@ (80074ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d009      	beq.n	80074a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a12      	ldr	r2, [pc, #72]	@ (80074e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d004      	beq.n	80074a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a13      	ldr	r2, [pc, #76]	@ (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d10c      	bne.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	40012c00 	.word	0x40012c00
 80074e4:	40013400 	.word	0x40013400
 80074e8:	40000400 	.word	0x40000400
 80074ec:	40000800 	.word	0x40000800
 80074f0:	40014000 	.word	0x40014000

080074f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80074fe:	2300      	movs	r3, #0
 8007500:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800750c:	2302      	movs	r3, #2
 800750e:	e073      	b.n	80075f8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	4313      	orrs	r3, r2
 8007532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	4313      	orrs	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4313      	orrs	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	4313      	orrs	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	4313      	orrs	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007576:	4313      	orrs	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	041b      	lsls	r3, r3, #16
 8007586:	4313      	orrs	r3, r2
 8007588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	69db      	ldr	r3, [r3, #28]
 8007594:	4313      	orrs	r3, r2
 8007596:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a19      	ldr	r2, [pc, #100]	@ (8007604 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d004      	beq.n	80075ac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a18      	ldr	r2, [pc, #96]	@ (8007608 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d11c      	bne.n	80075e6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b6:	051b      	lsls	r3, r3, #20
 80075b8:	4313      	orrs	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d4:	4313      	orrs	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e2:	4313      	orrs	r3, r2
 80075e4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	40012c00 	.word	0x40012c00
 8007608:	40013400 	.word	0x40013400

0800760c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e042      	b.n	80076a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007624:	2b00      	cmp	r3, #0
 8007626:	d106      	bne.n	8007636 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7fa fe41 	bl	80022b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2224      	movs	r2, #36	@ 0x24
 800763a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f022 0201 	bic.w	r2, r2, #1
 800764c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007652:	2b00      	cmp	r3, #0
 8007654:	d002      	beq.n	800765c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fcc0 	bl	8007fdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f9f1 	bl	8007a44 <UART_SetConfig>
 8007662:	4603      	mov	r3, r0
 8007664:	2b01      	cmp	r3, #1
 8007666:	d101      	bne.n	800766c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e01b      	b.n	80076a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800767a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689a      	ldr	r2, [r3, #8]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800768a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f042 0201 	orr.w	r2, r2, #1
 800769a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fd3f 	bl	8008120 <UART_CheckIdleState>
 80076a2:	4603      	mov	r3, r0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08a      	sub	sp, #40	@ 0x28
 80076b0:	af02      	add	r7, sp, #8
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	603b      	str	r3, [r7, #0]
 80076b8:	4613      	mov	r3, r2
 80076ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076c2:	2b20      	cmp	r3, #32
 80076c4:	d17b      	bne.n	80077be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d002      	beq.n	80076d2 <HAL_UART_Transmit+0x26>
 80076cc:	88fb      	ldrh	r3, [r7, #6]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e074      	b.n	80077c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2221      	movs	r2, #33	@ 0x21
 80076e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076e6:	f7fb fb57 	bl	8002d98 <HAL_GetTick>
 80076ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	88fa      	ldrh	r2, [r7, #6]
 80076f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	88fa      	ldrh	r2, [r7, #6]
 80076f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007704:	d108      	bne.n	8007718 <HAL_UART_Transmit+0x6c>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d104      	bne.n	8007718 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800770e:	2300      	movs	r3, #0
 8007710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	61bb      	str	r3, [r7, #24]
 8007716:	e003      	b.n	8007720 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800771c:	2300      	movs	r3, #0
 800771e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007720:	e030      	b.n	8007784 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2200      	movs	r2, #0
 800772a:	2180      	movs	r1, #128	@ 0x80
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 fda1 	bl	8008274 <UART_WaitOnFlagUntilTimeout>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d005      	beq.n	8007744 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2220      	movs	r2, #32
 800773c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e03d      	b.n	80077c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10b      	bne.n	8007762 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	881b      	ldrh	r3, [r3, #0]
 800774e:	461a      	mov	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007758:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	3302      	adds	r3, #2
 800775e:	61bb      	str	r3, [r7, #24]
 8007760:	e007      	b.n	8007772 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	781a      	ldrb	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	3301      	adds	r3, #1
 8007770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007778:	b29b      	uxth	r3, r3
 800777a:	3b01      	subs	r3, #1
 800777c:	b29a      	uxth	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800778a:	b29b      	uxth	r3, r3
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1c8      	bne.n	8007722 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	2200      	movs	r2, #0
 8007798:	2140      	movs	r1, #64	@ 0x40
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 fd6a 	bl	8008274 <UART_WaitOnFlagUntilTimeout>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d005      	beq.n	80077b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2220      	movs	r2, #32
 80077aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e006      	b.n	80077c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2220      	movs	r2, #32
 80077b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	e000      	b.n	80077c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80077be:	2302      	movs	r3, #2
  }
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3720      	adds	r7, #32
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08a      	sub	sp, #40	@ 0x28
 80077cc:	af02      	add	r7, sp, #8
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	603b      	str	r3, [r7, #0]
 80077d4:	4613      	mov	r3, r2
 80077d6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077de:	2b20      	cmp	r3, #32
 80077e0:	f040 80b5 	bne.w	800794e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <HAL_UART_Receive+0x28>
 80077ea:	88fb      	ldrh	r3, [r7, #6]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e0ad      	b.n	8007950 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2222      	movs	r2, #34	@ 0x22
 8007800:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800780a:	f7fb fac5 	bl	8002d98 <HAL_GetTick>
 800780e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	88fa      	ldrh	r2, [r7, #6]
 8007814:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	88fa      	ldrh	r2, [r7, #6]
 800781c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007828:	d10e      	bne.n	8007848 <HAL_UART_Receive+0x80>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d105      	bne.n	800783e <HAL_UART_Receive+0x76>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007838:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800783c:	e02d      	b.n	800789a <HAL_UART_Receive+0xd2>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	22ff      	movs	r2, #255	@ 0xff
 8007842:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007846:	e028      	b.n	800789a <HAL_UART_Receive+0xd2>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10d      	bne.n	800786c <HAL_UART_Receive+0xa4>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d104      	bne.n	8007862 <HAL_UART_Receive+0x9a>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	22ff      	movs	r2, #255	@ 0xff
 800785c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007860:	e01b      	b.n	800789a <HAL_UART_Receive+0xd2>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	227f      	movs	r2, #127	@ 0x7f
 8007866:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800786a:	e016      	b.n	800789a <HAL_UART_Receive+0xd2>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007874:	d10d      	bne.n	8007892 <HAL_UART_Receive+0xca>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d104      	bne.n	8007888 <HAL_UART_Receive+0xc0>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	227f      	movs	r2, #127	@ 0x7f
 8007882:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007886:	e008      	b.n	800789a <HAL_UART_Receive+0xd2>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	223f      	movs	r2, #63	@ 0x3f
 800788c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007890:	e003      	b.n	800789a <HAL_UART_Receive+0xd2>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80078a0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078aa:	d108      	bne.n	80078be <HAL_UART_Receive+0xf6>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d104      	bne.n	80078be <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80078b4:	2300      	movs	r3, #0
 80078b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	61bb      	str	r3, [r7, #24]
 80078bc:	e003      	b.n	80078c6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078c2:	2300      	movs	r3, #0
 80078c4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80078c6:	e036      	b.n	8007936 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2200      	movs	r2, #0
 80078d0:	2120      	movs	r1, #32
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f000 fcce 	bl	8008274 <UART_WaitOnFlagUntilTimeout>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d005      	beq.n	80078ea <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2220      	movs	r2, #32
 80078e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e032      	b.n	8007950 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10c      	bne.n	800790a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	8a7b      	ldrh	r3, [r7, #18]
 80078fa:	4013      	ands	r3, r2
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	3302      	adds	r3, #2
 8007906:	61bb      	str	r3, [r7, #24]
 8007908:	e00c      	b.n	8007924 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007910:	b2da      	uxtb	r2, r3
 8007912:	8a7b      	ldrh	r3, [r7, #18]
 8007914:	b2db      	uxtb	r3, r3
 8007916:	4013      	ands	r3, r2
 8007918:	b2da      	uxtb	r2, r3
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	3301      	adds	r3, #1
 8007922:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800792a:	b29b      	uxth	r3, r3
 800792c:	3b01      	subs	r3, #1
 800792e:	b29a      	uxth	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800793c:	b29b      	uxth	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1c2      	bne.n	80078c8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2220      	movs	r2, #32
 8007946:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	e000      	b.n	8007950 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800794e:	2302      	movs	r3, #2
  }
}
 8007950:	4618      	mov	r0, r3
 8007952:	3720      	adds	r7, #32
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08a      	sub	sp, #40	@ 0x28
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	4613      	mov	r3, r2
 8007964:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800796c:	2b20      	cmp	r3, #32
 800796e:	d137      	bne.n	80079e0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d002      	beq.n	800797c <HAL_UART_Receive_DMA+0x24>
 8007976:	88fb      	ldrh	r3, [r7, #6]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d101      	bne.n	8007980 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e030      	b.n	80079e2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a18      	ldr	r2, [pc, #96]	@ (80079ec <HAL_UART_Receive_DMA+0x94>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d01f      	beq.n	80079d0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d018      	beq.n	80079d0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	e853 3f00 	ldrex	r3, [r3]
 80079aa:	613b      	str	r3, [r7, #16]
   return(result);
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80079b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	461a      	mov	r2, r3
 80079ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079bc:	623b      	str	r3, [r7, #32]
 80079be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	69f9      	ldr	r1, [r7, #28]
 80079c2:	6a3a      	ldr	r2, [r7, #32]
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e6      	bne.n	800799e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80079d0:	88fb      	ldrh	r3, [r7, #6]
 80079d2:	461a      	mov	r2, r3
 80079d4:	68b9      	ldr	r1, [r7, #8]
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 fcba 	bl	8008350 <UART_Start_Receive_DMA>
 80079dc:	4603      	mov	r3, r0
 80079de:	e000      	b.n	80079e2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80079e0:	2302      	movs	r3, #2
  }
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3728      	adds	r7, #40	@ 0x28
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	40008000 	.word	0x40008000

080079f0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	460b      	mov	r3, r1
 8007a36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a48:	b08c      	sub	sp, #48	@ 0x30
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	689a      	ldr	r2, [r3, #8]
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	431a      	orrs	r2, r3
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	4bab      	ldr	r3, [pc, #684]	@ (8007d20 <UART_SetConfig+0x2dc>)
 8007a74:	4013      	ands	r3, r2
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	6812      	ldr	r2, [r2, #0]
 8007a7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a7c:	430b      	orrs	r3, r1
 8007a7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	68da      	ldr	r2, [r3, #12]
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4aa0      	ldr	r2, [pc, #640]	@ (8007d24 <UART_SetConfig+0x2e0>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d004      	beq.n	8007ab0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007aac:	4313      	orrs	r3, r2
 8007aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007aba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	6812      	ldr	r2, [r2, #0]
 8007ac2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ace:	f023 010f 	bic.w	r1, r3, #15
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a91      	ldr	r2, [pc, #580]	@ (8007d28 <UART_SetConfig+0x2e4>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d125      	bne.n	8007b34 <UART_SetConfig+0xf0>
 8007ae8:	4b90      	ldr	r3, [pc, #576]	@ (8007d2c <UART_SetConfig+0x2e8>)
 8007aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aee:	f003 0303 	and.w	r3, r3, #3
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	d81a      	bhi.n	8007b2c <UART_SetConfig+0xe8>
 8007af6:	a201      	add	r2, pc, #4	@ (adr r2, 8007afc <UART_SetConfig+0xb8>)
 8007af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afc:	08007b0d 	.word	0x08007b0d
 8007b00:	08007b1d 	.word	0x08007b1d
 8007b04:	08007b15 	.word	0x08007b15
 8007b08:	08007b25 	.word	0x08007b25
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b12:	e0d6      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007b14:	2302      	movs	r3, #2
 8007b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b1a:	e0d2      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007b1c:	2304      	movs	r3, #4
 8007b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b22:	e0ce      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007b24:	2308      	movs	r3, #8
 8007b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b2a:	e0ca      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007b2c:	2310      	movs	r3, #16
 8007b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b32:	e0c6      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a7d      	ldr	r2, [pc, #500]	@ (8007d30 <UART_SetConfig+0x2ec>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d138      	bne.n	8007bb0 <UART_SetConfig+0x16c>
 8007b3e:	4b7b      	ldr	r3, [pc, #492]	@ (8007d2c <UART_SetConfig+0x2e8>)
 8007b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b44:	f003 030c 	and.w	r3, r3, #12
 8007b48:	2b0c      	cmp	r3, #12
 8007b4a:	d82d      	bhi.n	8007ba8 <UART_SetConfig+0x164>
 8007b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b54 <UART_SetConfig+0x110>)
 8007b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b52:	bf00      	nop
 8007b54:	08007b89 	.word	0x08007b89
 8007b58:	08007ba9 	.word	0x08007ba9
 8007b5c:	08007ba9 	.word	0x08007ba9
 8007b60:	08007ba9 	.word	0x08007ba9
 8007b64:	08007b99 	.word	0x08007b99
 8007b68:	08007ba9 	.word	0x08007ba9
 8007b6c:	08007ba9 	.word	0x08007ba9
 8007b70:	08007ba9 	.word	0x08007ba9
 8007b74:	08007b91 	.word	0x08007b91
 8007b78:	08007ba9 	.word	0x08007ba9
 8007b7c:	08007ba9 	.word	0x08007ba9
 8007b80:	08007ba9 	.word	0x08007ba9
 8007b84:	08007ba1 	.word	0x08007ba1
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b8e:	e098      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007b90:	2302      	movs	r3, #2
 8007b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b96:	e094      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007b98:	2304      	movs	r3, #4
 8007b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b9e:	e090      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007ba0:	2308      	movs	r3, #8
 8007ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ba6:	e08c      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007ba8:	2310      	movs	r3, #16
 8007baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bae:	e088      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a5f      	ldr	r2, [pc, #380]	@ (8007d34 <UART_SetConfig+0x2f0>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d125      	bne.n	8007c06 <UART_SetConfig+0x1c2>
 8007bba:	4b5c      	ldr	r3, [pc, #368]	@ (8007d2c <UART_SetConfig+0x2e8>)
 8007bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bc0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007bc4:	2b30      	cmp	r3, #48	@ 0x30
 8007bc6:	d016      	beq.n	8007bf6 <UART_SetConfig+0x1b2>
 8007bc8:	2b30      	cmp	r3, #48	@ 0x30
 8007bca:	d818      	bhi.n	8007bfe <UART_SetConfig+0x1ba>
 8007bcc:	2b20      	cmp	r3, #32
 8007bce:	d00a      	beq.n	8007be6 <UART_SetConfig+0x1a2>
 8007bd0:	2b20      	cmp	r3, #32
 8007bd2:	d814      	bhi.n	8007bfe <UART_SetConfig+0x1ba>
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <UART_SetConfig+0x19a>
 8007bd8:	2b10      	cmp	r3, #16
 8007bda:	d008      	beq.n	8007bee <UART_SetConfig+0x1aa>
 8007bdc:	e00f      	b.n	8007bfe <UART_SetConfig+0x1ba>
 8007bde:	2300      	movs	r3, #0
 8007be0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007be4:	e06d      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007be6:	2302      	movs	r3, #2
 8007be8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bec:	e069      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007bee:	2304      	movs	r3, #4
 8007bf0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bf4:	e065      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007bf6:	2308      	movs	r3, #8
 8007bf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bfc:	e061      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007bfe:	2310      	movs	r3, #16
 8007c00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c04:	e05d      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a4b      	ldr	r2, [pc, #300]	@ (8007d38 <UART_SetConfig+0x2f4>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d125      	bne.n	8007c5c <UART_SetConfig+0x218>
 8007c10:	4b46      	ldr	r3, [pc, #280]	@ (8007d2c <UART_SetConfig+0x2e8>)
 8007c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007c1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c1c:	d016      	beq.n	8007c4c <UART_SetConfig+0x208>
 8007c1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c20:	d818      	bhi.n	8007c54 <UART_SetConfig+0x210>
 8007c22:	2b80      	cmp	r3, #128	@ 0x80
 8007c24:	d00a      	beq.n	8007c3c <UART_SetConfig+0x1f8>
 8007c26:	2b80      	cmp	r3, #128	@ 0x80
 8007c28:	d814      	bhi.n	8007c54 <UART_SetConfig+0x210>
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d002      	beq.n	8007c34 <UART_SetConfig+0x1f0>
 8007c2e:	2b40      	cmp	r3, #64	@ 0x40
 8007c30:	d008      	beq.n	8007c44 <UART_SetConfig+0x200>
 8007c32:	e00f      	b.n	8007c54 <UART_SetConfig+0x210>
 8007c34:	2300      	movs	r3, #0
 8007c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c3a:	e042      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c42:	e03e      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007c44:	2304      	movs	r3, #4
 8007c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c4a:	e03a      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007c4c:	2308      	movs	r3, #8
 8007c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c52:	e036      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007c54:	2310      	movs	r3, #16
 8007c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c5a:	e032      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a30      	ldr	r2, [pc, #192]	@ (8007d24 <UART_SetConfig+0x2e0>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d12a      	bne.n	8007cbc <UART_SetConfig+0x278>
 8007c66:	4b31      	ldr	r3, [pc, #196]	@ (8007d2c <UART_SetConfig+0x2e8>)
 8007c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007c70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c74:	d01a      	beq.n	8007cac <UART_SetConfig+0x268>
 8007c76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c7a:	d81b      	bhi.n	8007cb4 <UART_SetConfig+0x270>
 8007c7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c80:	d00c      	beq.n	8007c9c <UART_SetConfig+0x258>
 8007c82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c86:	d815      	bhi.n	8007cb4 <UART_SetConfig+0x270>
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d003      	beq.n	8007c94 <UART_SetConfig+0x250>
 8007c8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c90:	d008      	beq.n	8007ca4 <UART_SetConfig+0x260>
 8007c92:	e00f      	b.n	8007cb4 <UART_SetConfig+0x270>
 8007c94:	2300      	movs	r3, #0
 8007c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c9a:	e012      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ca2:	e00e      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007ca4:	2304      	movs	r3, #4
 8007ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007caa:	e00a      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007cac:	2308      	movs	r3, #8
 8007cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cb2:	e006      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007cb4:	2310      	movs	r3, #16
 8007cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cba:	e002      	b.n	8007cc2 <UART_SetConfig+0x27e>
 8007cbc:	2310      	movs	r3, #16
 8007cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a17      	ldr	r2, [pc, #92]	@ (8007d24 <UART_SetConfig+0x2e0>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	f040 80a8 	bne.w	8007e1e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007cce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007cd2:	2b08      	cmp	r3, #8
 8007cd4:	d834      	bhi.n	8007d40 <UART_SetConfig+0x2fc>
 8007cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cdc <UART_SetConfig+0x298>)
 8007cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cdc:	08007d01 	.word	0x08007d01
 8007ce0:	08007d41 	.word	0x08007d41
 8007ce4:	08007d09 	.word	0x08007d09
 8007ce8:	08007d41 	.word	0x08007d41
 8007cec:	08007d0f 	.word	0x08007d0f
 8007cf0:	08007d41 	.word	0x08007d41
 8007cf4:	08007d41 	.word	0x08007d41
 8007cf8:	08007d41 	.word	0x08007d41
 8007cfc:	08007d17 	.word	0x08007d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d00:	f7fd fb16 	bl	8005330 <HAL_RCC_GetPCLK1Freq>
 8007d04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d06:	e021      	b.n	8007d4c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d08:	4b0c      	ldr	r3, [pc, #48]	@ (8007d3c <UART_SetConfig+0x2f8>)
 8007d0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d0c:	e01e      	b.n	8007d4c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d0e:	f7fd faa3 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8007d12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d14:	e01a      	b.n	8007d4c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d1c:	e016      	b.n	8007d4c <UART_SetConfig+0x308>
 8007d1e:	bf00      	nop
 8007d20:	cfff69f3 	.word	0xcfff69f3
 8007d24:	40008000 	.word	0x40008000
 8007d28:	40013800 	.word	0x40013800
 8007d2c:	40021000 	.word	0x40021000
 8007d30:	40004400 	.word	0x40004400
 8007d34:	40004800 	.word	0x40004800
 8007d38:	40004c00 	.word	0x40004c00
 8007d3c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007d4a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 812a 	beq.w	8007fa8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d58:	4a9e      	ldr	r2, [pc, #632]	@ (8007fd4 <UART_SetConfig+0x590>)
 8007d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d62:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d66:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	005b      	lsls	r3, r3, #1
 8007d70:	4413      	add	r3, r2
 8007d72:	69ba      	ldr	r2, [r7, #24]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d305      	bcc.n	8007d84 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d903      	bls.n	8007d8c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d8a:	e10d      	b.n	8007fa8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8e:	2200      	movs	r2, #0
 8007d90:	60bb      	str	r3, [r7, #8]
 8007d92:	60fa      	str	r2, [r7, #12]
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d98:	4a8e      	ldr	r2, [pc, #568]	@ (8007fd4 <UART_SetConfig+0x590>)
 8007d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	2200      	movs	r2, #0
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	607a      	str	r2, [r7, #4]
 8007da6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007daa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007dae:	f7f8 ff93 	bl	8000cd8 <__aeabi_uldivmod>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4610      	mov	r0, r2
 8007db8:	4619      	mov	r1, r3
 8007dba:	f04f 0200 	mov.w	r2, #0
 8007dbe:	f04f 0300 	mov.w	r3, #0
 8007dc2:	020b      	lsls	r3, r1, #8
 8007dc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007dc8:	0202      	lsls	r2, r0, #8
 8007dca:	6979      	ldr	r1, [r7, #20]
 8007dcc:	6849      	ldr	r1, [r1, #4]
 8007dce:	0849      	lsrs	r1, r1, #1
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	460c      	mov	r4, r1
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	eb12 0804 	adds.w	r8, r2, r4
 8007dda:	eb43 0905 	adc.w	r9, r3, r5
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	469a      	mov	sl, r3
 8007de6:	4693      	mov	fp, r2
 8007de8:	4652      	mov	r2, sl
 8007dea:	465b      	mov	r3, fp
 8007dec:	4640      	mov	r0, r8
 8007dee:	4649      	mov	r1, r9
 8007df0:	f7f8 ff72 	bl	8000cd8 <__aeabi_uldivmod>
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	4613      	mov	r3, r2
 8007dfa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e02:	d308      	bcc.n	8007e16 <UART_SetConfig+0x3d2>
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e0a:	d204      	bcs.n	8007e16 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6a3a      	ldr	r2, [r7, #32]
 8007e12:	60da      	str	r2, [r3, #12]
 8007e14:	e0c8      	b.n	8007fa8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007e1c:	e0c4      	b.n	8007fa8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e26:	d167      	bne.n	8007ef8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007e28:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e2c:	2b08      	cmp	r3, #8
 8007e2e:	d828      	bhi.n	8007e82 <UART_SetConfig+0x43e>
 8007e30:	a201      	add	r2, pc, #4	@ (adr r2, 8007e38 <UART_SetConfig+0x3f4>)
 8007e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e36:	bf00      	nop
 8007e38:	08007e5d 	.word	0x08007e5d
 8007e3c:	08007e65 	.word	0x08007e65
 8007e40:	08007e6d 	.word	0x08007e6d
 8007e44:	08007e83 	.word	0x08007e83
 8007e48:	08007e73 	.word	0x08007e73
 8007e4c:	08007e83 	.word	0x08007e83
 8007e50:	08007e83 	.word	0x08007e83
 8007e54:	08007e83 	.word	0x08007e83
 8007e58:	08007e7b 	.word	0x08007e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e5c:	f7fd fa68 	bl	8005330 <HAL_RCC_GetPCLK1Freq>
 8007e60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e62:	e014      	b.n	8007e8e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e64:	f7fd fa7a 	bl	800535c <HAL_RCC_GetPCLK2Freq>
 8007e68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e6a:	e010      	b.n	8007e8e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e6c:	4b5a      	ldr	r3, [pc, #360]	@ (8007fd8 <UART_SetConfig+0x594>)
 8007e6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e70:	e00d      	b.n	8007e8e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e72:	f7fd f9f1 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8007e76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e78:	e009      	b.n	8007e8e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e80:	e005      	b.n	8007e8e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 8089 	beq.w	8007fa8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e9a:	4a4e      	ldr	r2, [pc, #312]	@ (8007fd4 <UART_SetConfig+0x590>)
 8007e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ea8:	005a      	lsls	r2, r3, #1
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	085b      	lsrs	r3, r3, #1
 8007eb0:	441a      	add	r2, r3
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	2b0f      	cmp	r3, #15
 8007ec0:	d916      	bls.n	8007ef0 <UART_SetConfig+0x4ac>
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ec8:	d212      	bcs.n	8007ef0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	f023 030f 	bic.w	r3, r3, #15
 8007ed2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ed4:	6a3b      	ldr	r3, [r7, #32]
 8007ed6:	085b      	lsrs	r3, r3, #1
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	f003 0307 	and.w	r3, r3, #7
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	8bfb      	ldrh	r3, [r7, #30]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	8bfa      	ldrh	r2, [r7, #30]
 8007eec:	60da      	str	r2, [r3, #12]
 8007eee:	e05b      	b.n	8007fa8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007ef6:	e057      	b.n	8007fa8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ef8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007efc:	2b08      	cmp	r3, #8
 8007efe:	d828      	bhi.n	8007f52 <UART_SetConfig+0x50e>
 8007f00:	a201      	add	r2, pc, #4	@ (adr r2, 8007f08 <UART_SetConfig+0x4c4>)
 8007f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f06:	bf00      	nop
 8007f08:	08007f2d 	.word	0x08007f2d
 8007f0c:	08007f35 	.word	0x08007f35
 8007f10:	08007f3d 	.word	0x08007f3d
 8007f14:	08007f53 	.word	0x08007f53
 8007f18:	08007f43 	.word	0x08007f43
 8007f1c:	08007f53 	.word	0x08007f53
 8007f20:	08007f53 	.word	0x08007f53
 8007f24:	08007f53 	.word	0x08007f53
 8007f28:	08007f4b 	.word	0x08007f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f2c:	f7fd fa00 	bl	8005330 <HAL_RCC_GetPCLK1Freq>
 8007f30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f32:	e014      	b.n	8007f5e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f34:	f7fd fa12 	bl	800535c <HAL_RCC_GetPCLK2Freq>
 8007f38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f3a:	e010      	b.n	8007f5e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f3c:	4b26      	ldr	r3, [pc, #152]	@ (8007fd8 <UART_SetConfig+0x594>)
 8007f3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f40:	e00d      	b.n	8007f5e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f42:	f7fd f989 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8007f46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f48:	e009      	b.n	8007f5e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f50:	e005      	b.n	8007f5e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007f5c:	bf00      	nop
    }

    if (pclk != 0U)
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d021      	beq.n	8007fa8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f68:	4a1a      	ldr	r2, [pc, #104]	@ (8007fd4 <UART_SetConfig+0x590>)
 8007f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f72:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	085b      	lsrs	r3, r3, #1
 8007f7c:	441a      	add	r2, r3
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	2b0f      	cmp	r3, #15
 8007f8c:	d909      	bls.n	8007fa2 <UART_SetConfig+0x55e>
 8007f8e:	6a3b      	ldr	r3, [r7, #32]
 8007f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f94:	d205      	bcs.n	8007fa2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	60da      	str	r2, [r3, #12]
 8007fa0:	e002      	b.n	8007fa8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007fc4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3730      	adds	r7, #48	@ 0x30
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fd2:	bf00      	nop
 8007fd4:	0800daf0 	.word	0x0800daf0
 8007fd8:	00f42400 	.word	0x00f42400

08007fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe8:	f003 0308 	and.w	r3, r3, #8
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00a      	beq.n	8008006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00a      	beq.n	8008028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800802c:	f003 0302 	and.w	r3, r3, #2
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00a      	beq.n	800804a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	430a      	orrs	r2, r1
 8008048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800804e:	f003 0304 	and.w	r3, r3, #4
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00a      	beq.n	800806c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	430a      	orrs	r2, r1
 800806a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008070:	f003 0310 	and.w	r3, r3, #16
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00a      	beq.n	800808e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008092:	f003 0320 	and.w	r3, r3, #32
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	430a      	orrs	r2, r1
 80080ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d01a      	beq.n	80080f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	430a      	orrs	r2, r1
 80080d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080da:	d10a      	bne.n	80080f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00a      	beq.n	8008114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	430a      	orrs	r2, r1
 8008112:	605a      	str	r2, [r3, #4]
  }
}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b098      	sub	sp, #96	@ 0x60
 8008124:	af02      	add	r7, sp, #8
 8008126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008130:	f7fa fe32 	bl	8002d98 <HAL_GetTick>
 8008134:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0308 	and.w	r3, r3, #8
 8008140:	2b08      	cmp	r3, #8
 8008142:	d12f      	bne.n	80081a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008144:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800814c:	2200      	movs	r2, #0
 800814e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f88e 	bl	8008274 <UART_WaitOnFlagUntilTimeout>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d022      	beq.n	80081a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008166:	e853 3f00 	ldrex	r3, [r3]
 800816a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800816c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800816e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008172:	653b      	str	r3, [r7, #80]	@ 0x50
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	461a      	mov	r2, r3
 800817a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800817c:	647b      	str	r3, [r7, #68]	@ 0x44
 800817e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008180:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008182:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008184:	e841 2300 	strex	r3, r2, [r1]
 8008188:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800818a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1e6      	bne.n	800815e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2220      	movs	r2, #32
 8008194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e063      	b.n	800826c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0304 	and.w	r3, r3, #4
 80081ae:	2b04      	cmp	r3, #4
 80081b0:	d149      	bne.n	8008246 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081ba:	2200      	movs	r2, #0
 80081bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f857 	bl	8008274 <UART_WaitOnFlagUntilTimeout>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d03c      	beq.n	8008246 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d4:	e853 3f00 	ldrex	r3, [r3]
 80081d8:	623b      	str	r3, [r7, #32]
   return(result);
 80081da:	6a3b      	ldr	r3, [r7, #32]
 80081dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	461a      	mov	r2, r3
 80081e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80081ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081f2:	e841 2300 	strex	r3, r2, [r1]
 80081f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1e6      	bne.n	80081cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	3308      	adds	r3, #8
 8008204:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	e853 3f00 	ldrex	r3, [r3]
 800820c:	60fb      	str	r3, [r7, #12]
   return(result);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f023 0301 	bic.w	r3, r3, #1
 8008214:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	3308      	adds	r3, #8
 800821c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800821e:	61fa      	str	r2, [r7, #28]
 8008220:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008222:	69b9      	ldr	r1, [r7, #24]
 8008224:	69fa      	ldr	r2, [r7, #28]
 8008226:	e841 2300 	strex	r3, r2, [r1]
 800822a:	617b      	str	r3, [r7, #20]
   return(result);
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1e5      	bne.n	80081fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2220      	movs	r2, #32
 8008236:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e012      	b.n	800826c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2220      	movs	r2, #32
 800824a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2220      	movs	r2, #32
 8008252:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3758      	adds	r7, #88	@ 0x58
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	603b      	str	r3, [r7, #0]
 8008280:	4613      	mov	r3, r2
 8008282:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008284:	e04f      	b.n	8008326 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828c:	d04b      	beq.n	8008326 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800828e:	f7fa fd83 	bl	8002d98 <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	429a      	cmp	r2, r3
 800829c:	d302      	bcc.n	80082a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e04e      	b.n	8008346 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 0304 	and.w	r3, r3, #4
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d037      	beq.n	8008326 <UART_WaitOnFlagUntilTimeout+0xb2>
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	2b80      	cmp	r3, #128	@ 0x80
 80082ba:	d034      	beq.n	8008326 <UART_WaitOnFlagUntilTimeout+0xb2>
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2b40      	cmp	r3, #64	@ 0x40
 80082c0:	d031      	beq.n	8008326 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	f003 0308 	and.w	r3, r3, #8
 80082cc:	2b08      	cmp	r3, #8
 80082ce:	d110      	bne.n	80082f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2208      	movs	r2, #8
 80082d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 f920 	bl	800851e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2208      	movs	r2, #8
 80082e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e029      	b.n	8008346 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	69db      	ldr	r3, [r3, #28]
 80082f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008300:	d111      	bne.n	8008326 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800830a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 f906 	bl	800851e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2220      	movs	r2, #32
 8008316:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e00f      	b.n	8008346 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	69da      	ldr	r2, [r3, #28]
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	4013      	ands	r3, r2
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	429a      	cmp	r2, r3
 8008334:	bf0c      	ite	eq
 8008336:	2301      	moveq	r3, #1
 8008338:	2300      	movne	r3, #0
 800833a:	b2db      	uxtb	r3, r3
 800833c:	461a      	mov	r2, r3
 800833e:	79fb      	ldrb	r3, [r7, #7]
 8008340:	429a      	cmp	r2, r3
 8008342:	d0a0      	beq.n	8008286 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
	...

08008350 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b096      	sub	sp, #88	@ 0x58
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	4613      	mov	r3, r2
 800835c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	88fa      	ldrh	r2, [r7, #6]
 8008368:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2222      	movs	r2, #34	@ 0x22
 8008378:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008382:	2b00      	cmp	r3, #0
 8008384:	d02d      	beq.n	80083e2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800838c:	4a40      	ldr	r2, [pc, #256]	@ (8008490 <UART_Start_Receive_DMA+0x140>)
 800838e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008396:	4a3f      	ldr	r2, [pc, #252]	@ (8008494 <UART_Start_Receive_DMA+0x144>)
 8008398:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083a0:	4a3d      	ldr	r2, [pc, #244]	@ (8008498 <UART_Start_Receive_DMA+0x148>)
 80083a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083aa:	2200      	movs	r2, #0
 80083ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3324      	adds	r3, #36	@ 0x24
 80083ba:	4619      	mov	r1, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083c0:	461a      	mov	r2, r3
 80083c2:	88fb      	ldrh	r3, [r7, #6]
 80083c4:	f7fb fee2 	bl	800418c <HAL_DMA_Start_IT>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d009      	beq.n	80083e2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2210      	movs	r2, #16
 80083d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2220      	movs	r2, #32
 80083da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e051      	b.n	8008486 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d018      	beq.n	800841c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083f2:	e853 3f00 	ldrex	r3, [r3]
 80083f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	461a      	mov	r2, r3
 8008406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008408:	64bb      	str	r3, [r7, #72]	@ 0x48
 800840a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800840e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008410:	e841 2300 	strex	r3, r2, [r1]
 8008414:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e6      	bne.n	80083ea <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3308      	adds	r3, #8
 8008422:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008426:	e853 3f00 	ldrex	r3, [r3]
 800842a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800842c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842e:	f043 0301 	orr.w	r3, r3, #1
 8008432:	653b      	str	r3, [r7, #80]	@ 0x50
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3308      	adds	r3, #8
 800843a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800843c:	637a      	str	r2, [r7, #52]	@ 0x34
 800843e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008440:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008442:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008444:	e841 2300 	strex	r3, r2, [r1]
 8008448:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800844a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1e5      	bne.n	800841c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	3308      	adds	r3, #8
 8008456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	e853 3f00 	ldrex	r3, [r3]
 800845e:	613b      	str	r3, [r7, #16]
   return(result);
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008466:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3308      	adds	r3, #8
 800846e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008470:	623a      	str	r2, [r7, #32]
 8008472:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008474:	69f9      	ldr	r1, [r7, #28]
 8008476:	6a3a      	ldr	r2, [r7, #32]
 8008478:	e841 2300 	strex	r3, r2, [r1]
 800847c:	61bb      	str	r3, [r7, #24]
   return(result);
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1e5      	bne.n	8008450 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3758      	adds	r7, #88	@ 0x58
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	080085eb 	.word	0x080085eb
 8008494:	08008717 	.word	0x08008717
 8008498:	08008755 	.word	0x08008755

0800849c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800849c:	b480      	push	{r7}
 800849e:	b08f      	sub	sp, #60	@ 0x3c
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084aa:	6a3b      	ldr	r3, [r7, #32]
 80084ac:	e853 3f00 	ldrex	r3, [r3]
 80084b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80084b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084c4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084ca:	e841 2300 	strex	r3, r2, [r1]
 80084ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1e6      	bne.n	80084a4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3308      	adds	r3, #8
 80084dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	e853 3f00 	ldrex	r3, [r3]
 80084e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80084ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3308      	adds	r3, #8
 80084f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084f6:	61ba      	str	r2, [r7, #24]
 80084f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	6979      	ldr	r1, [r7, #20]
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	e841 2300 	strex	r3, r2, [r1]
 8008502:	613b      	str	r3, [r7, #16]
   return(result);
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e5      	bne.n	80084d6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2220      	movs	r2, #32
 800850e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008512:	bf00      	nop
 8008514:	373c      	adds	r7, #60	@ 0x3c
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800851e:	b480      	push	{r7}
 8008520:	b095      	sub	sp, #84	@ 0x54
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800852e:	e853 3f00 	ldrex	r3, [r3]
 8008532:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008536:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800853a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	461a      	mov	r2, r3
 8008542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008544:	643b      	str	r3, [r7, #64]	@ 0x40
 8008546:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008548:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800854a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800854c:	e841 2300 	strex	r3, r2, [r1]
 8008550:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1e6      	bne.n	8008526 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3308      	adds	r3, #8
 800855e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008560:	6a3b      	ldr	r3, [r7, #32]
 8008562:	e853 3f00 	ldrex	r3, [r3]
 8008566:	61fb      	str	r3, [r7, #28]
   return(result);
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800856e:	f023 0301 	bic.w	r3, r3, #1
 8008572:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3308      	adds	r3, #8
 800857a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800857c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800857e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008580:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008584:	e841 2300 	strex	r3, r2, [r1]
 8008588:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800858a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1e3      	bne.n	8008558 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008594:	2b01      	cmp	r3, #1
 8008596:	d118      	bne.n	80085ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	f023 0310 	bic.w	r3, r3, #16
 80085ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	461a      	mov	r2, r3
 80085b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085b6:	61bb      	str	r3, [r7, #24]
 80085b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ba:	6979      	ldr	r1, [r7, #20]
 80085bc:	69ba      	ldr	r2, [r7, #24]
 80085be:	e841 2300 	strex	r3, r2, [r1]
 80085c2:	613b      	str	r3, [r7, #16]
   return(result);
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1e6      	bne.n	8008598 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80085de:	bf00      	nop
 80085e0:	3754      	adds	r7, #84	@ 0x54
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b09c      	sub	sp, #112	@ 0x70
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0320 	and.w	r3, r3, #32
 8008602:	2b00      	cmp	r3, #0
 8008604:	d171      	bne.n	80086ea <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008608:	2200      	movs	r2, #0
 800860a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800860e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008616:	e853 3f00 	ldrex	r3, [r3]
 800861a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800861c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800861e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008622:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	461a      	mov	r2, r3
 800862a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800862c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800862e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008630:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008632:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008634:	e841 2300 	strex	r3, r2, [r1]
 8008638:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800863a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1e6      	bne.n	800860e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3308      	adds	r3, #8
 8008646:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864a:	e853 3f00 	ldrex	r3, [r3]
 800864e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008652:	f023 0301 	bic.w	r3, r3, #1
 8008656:	667b      	str	r3, [r7, #100]	@ 0x64
 8008658:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3308      	adds	r3, #8
 800865e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008660:	647a      	str	r2, [r7, #68]	@ 0x44
 8008662:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008664:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008666:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008668:	e841 2300 	strex	r3, r2, [r1]
 800866c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800866e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e5      	bne.n	8008640 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008674:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	3308      	adds	r3, #8
 800867a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867e:	e853 3f00 	ldrex	r3, [r3]
 8008682:	623b      	str	r3, [r7, #32]
   return(result);
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800868a:	663b      	str	r3, [r7, #96]	@ 0x60
 800868c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3308      	adds	r3, #8
 8008692:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008694:	633a      	str	r2, [r7, #48]	@ 0x30
 8008696:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008698:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800869a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800869c:	e841 2300 	strex	r3, r2, [r1]
 80086a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1e5      	bne.n	8008674 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80086a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086aa:	2220      	movs	r2, #32
 80086ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d118      	bne.n	80086ea <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	e853 3f00 	ldrex	r3, [r3]
 80086c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f023 0310 	bic.w	r3, r3, #16
 80086cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80086ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086d6:	61fb      	str	r3, [r7, #28]
 80086d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086da:	69b9      	ldr	r1, [r7, #24]
 80086dc:	69fa      	ldr	r2, [r7, #28]
 80086de:	e841 2300 	strex	r3, r2, [r1]
 80086e2:	617b      	str	r3, [r7, #20]
   return(result);
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1e6      	bne.n	80086b8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086ec:	2200      	movs	r2, #0
 80086ee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d107      	bne.n	8008708 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80086fe:	4619      	mov	r1, r3
 8008700:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008702:	f7ff f993 	bl	8007a2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008706:	e002      	b.n	800870e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008708:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800870a:	f7ff f971 	bl	80079f0 <HAL_UART_RxCpltCallback>
}
 800870e:	bf00      	nop
 8008710:	3770      	adds	r7, #112	@ 0x70
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b084      	sub	sp, #16
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008722:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2201      	movs	r2, #1
 8008728:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800872e:	2b01      	cmp	r3, #1
 8008730:	d109      	bne.n	8008746 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008738:	085b      	lsrs	r3, r3, #1
 800873a:	b29b      	uxth	r3, r3
 800873c:	4619      	mov	r1, r3
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f7ff f974 	bl	8007a2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008744:	e002      	b.n	800874c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f7ff f95c 	bl	8007a04 <HAL_UART_RxHalfCpltCallback>
}
 800874c:	bf00      	nop
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008760:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008768:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008770:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800877c:	2b80      	cmp	r3, #128	@ 0x80
 800877e:	d109      	bne.n	8008794 <UART_DMAError+0x40>
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	2b21      	cmp	r3, #33	@ 0x21
 8008784:	d106      	bne.n	8008794 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	2200      	movs	r2, #0
 800878a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800878e:	6978      	ldr	r0, [r7, #20]
 8008790:	f7ff fe84 	bl	800849c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800879e:	2b40      	cmp	r3, #64	@ 0x40
 80087a0:	d109      	bne.n	80087b6 <UART_DMAError+0x62>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b22      	cmp	r3, #34	@ 0x22
 80087a6:	d106      	bne.n	80087b6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80087b0:	6978      	ldr	r0, [r7, #20]
 80087b2:	f7ff feb4 	bl	800851e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087bc:	f043 0210 	orr.w	r2, r3, #16
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087c6:	6978      	ldr	r0, [r7, #20]
 80087c8:	f7ff f926 	bl	8007a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087cc:	bf00      	nop
 80087ce:	3718      	adds	r7, #24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d101      	bne.n	80087ea <HAL_UARTEx_DisableFifoMode+0x16>
 80087e6:	2302      	movs	r3, #2
 80087e8:	e027      	b.n	800883a <HAL_UARTEx_DisableFifoMode+0x66>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2224      	movs	r2, #36	@ 0x24
 80087f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0201 	bic.w	r2, r2, #1
 8008810:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008818:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2220      	movs	r2, #32
 800882c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3714      	adds	r7, #20
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b084      	sub	sp, #16
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008856:	2b01      	cmp	r3, #1
 8008858:	d101      	bne.n	800885e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800885a:	2302      	movs	r3, #2
 800885c:	e02d      	b.n	80088ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2224      	movs	r2, #36	@ 0x24
 800886a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f022 0201 	bic.w	r2, r2, #1
 8008884:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	430a      	orrs	r2, r1
 8008898:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f850 	bl	8008940 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2220      	movs	r2, #32
 80088ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b084      	sub	sp, #16
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d101      	bne.n	80088da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088d6:	2302      	movs	r3, #2
 80088d8:	e02d      	b.n	8008936 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2224      	movs	r2, #36	@ 0x24
 80088e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f022 0201 	bic.w	r2, r2, #1
 8008900:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	683a      	ldr	r2, [r7, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f812 	bl	8008940 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2220      	movs	r2, #32
 8008928:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
	...

08008940 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800894c:	2b00      	cmp	r3, #0
 800894e:	d108      	bne.n	8008962 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008960:	e031      	b.n	80089c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008962:	2308      	movs	r3, #8
 8008964:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008966:	2308      	movs	r3, #8
 8008968:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	0e5b      	lsrs	r3, r3, #25
 8008972:	b2db      	uxtb	r3, r3
 8008974:	f003 0307 	and.w	r3, r3, #7
 8008978:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	0f5b      	lsrs	r3, r3, #29
 8008982:	b2db      	uxtb	r3, r3
 8008984:	f003 0307 	and.w	r3, r3, #7
 8008988:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800898a:	7bbb      	ldrb	r3, [r7, #14]
 800898c:	7b3a      	ldrb	r2, [r7, #12]
 800898e:	4911      	ldr	r1, [pc, #68]	@ (80089d4 <UARTEx_SetNbDataToProcess+0x94>)
 8008990:	5c8a      	ldrb	r2, [r1, r2]
 8008992:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008996:	7b3a      	ldrb	r2, [r7, #12]
 8008998:	490f      	ldr	r1, [pc, #60]	@ (80089d8 <UARTEx_SetNbDataToProcess+0x98>)
 800899a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800899c:	fb93 f3f2 	sdiv	r3, r3, r2
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	7b7a      	ldrb	r2, [r7, #13]
 80089ac:	4909      	ldr	r1, [pc, #36]	@ (80089d4 <UARTEx_SetNbDataToProcess+0x94>)
 80089ae:	5c8a      	ldrb	r2, [r1, r2]
 80089b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80089b4:	7b7a      	ldrb	r2, [r7, #13]
 80089b6:	4908      	ldr	r1, [pc, #32]	@ (80089d8 <UARTEx_SetNbDataToProcess+0x98>)
 80089b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80089be:	b29a      	uxth	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80089c6:	bf00      	nop
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	0800db08 	.word	0x0800db08
 80089d8:	0800db10 	.word	0x0800db10

080089dc <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	689a      	ldr	r2, [r3, #8]
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	683a      	ldr	r2, [r7, #0]
 8008a06:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	1c5a      	adds	r2, r3, #1
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	601a      	str	r2, [r3, #0]
}
 8008a18:	bf00      	nop
 8008a1a:	3714      	adds	r7, #20
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	6892      	ldr	r2, [r2, #8]
 8008a3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	6852      	ldr	r2, [r2, #4]
 8008a44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d103      	bne.n	8008a58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689a      	ldr	r2, [r3, #8]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	1e5a      	subs	r2, r3, #1
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a82:	4b4f      	ldr	r3, [pc, #316]	@ (8008bc0 <xTaskIncrementTick+0x148>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f040 808f 	bne.w	8008baa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a8c:	4b4d      	ldr	r3, [pc, #308]	@ (8008bc4 <xTaskIncrementTick+0x14c>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	3301      	adds	r3, #1
 8008a92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a94:	4a4b      	ldr	r2, [pc, #300]	@ (8008bc4 <xTaskIncrementTick+0x14c>)
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d121      	bne.n	8008ae4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008aa0:	4b49      	ldr	r3, [pc, #292]	@ (8008bc8 <xTaskIncrementTick+0x150>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00b      	beq.n	8008ac2 <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aae:	f383 8811 	msr	BASEPRI, r3
 8008ab2:	f3bf 8f6f 	isb	sy
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008abc:	bf00      	nop
 8008abe:	bf00      	nop
 8008ac0:	e7fd      	b.n	8008abe <xTaskIncrementTick+0x46>
 8008ac2:	4b41      	ldr	r3, [pc, #260]	@ (8008bc8 <xTaskIncrementTick+0x150>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	60fb      	str	r3, [r7, #12]
 8008ac8:	4b40      	ldr	r3, [pc, #256]	@ (8008bcc <xTaskIncrementTick+0x154>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a3e      	ldr	r2, [pc, #248]	@ (8008bc8 <xTaskIncrementTick+0x150>)
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	4a3e      	ldr	r2, [pc, #248]	@ (8008bcc <xTaskIncrementTick+0x154>)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6013      	str	r3, [r2, #0]
 8008ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8008bd0 <xTaskIncrementTick+0x158>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	3301      	adds	r3, #1
 8008adc:	4a3c      	ldr	r2, [pc, #240]	@ (8008bd0 <xTaskIncrementTick+0x158>)
 8008ade:	6013      	str	r3, [r2, #0]
 8008ae0:	f000 f8e0 	bl	8008ca4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8008bd4 <xTaskIncrementTick+0x15c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d348      	bcc.n	8008b80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aee:	4b36      	ldr	r3, [pc, #216]	@ (8008bc8 <xTaskIncrementTick+0x150>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d104      	bne.n	8008b02 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008af8:	4b36      	ldr	r3, [pc, #216]	@ (8008bd4 <xTaskIncrementTick+0x15c>)
 8008afa:	f04f 32ff 	mov.w	r2, #4294967295
 8008afe:	601a      	str	r2, [r3, #0]
					break;
 8008b00:	e03e      	b.n	8008b80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b02:	4b31      	ldr	r3, [pc, #196]	@ (8008bc8 <xTaskIncrementTick+0x150>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d203      	bcs.n	8008b22 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b1a:	4a2e      	ldr	r2, [pc, #184]	@ (8008bd4 <xTaskIncrementTick+0x15c>)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b20:	e02e      	b.n	8008b80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	3304      	adds	r3, #4
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7ff ff7c 	bl	8008a24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d004      	beq.n	8008b3e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	3318      	adds	r3, #24
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7ff ff73 	bl	8008a24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b42:	2201      	movs	r2, #1
 8008b44:	409a      	lsls	r2, r3
 8008b46:	4b24      	ldr	r3, [pc, #144]	@ (8008bd8 <xTaskIncrementTick+0x160>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	4a22      	ldr	r2, [pc, #136]	@ (8008bd8 <xTaskIncrementTick+0x160>)
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b54:	4613      	mov	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8008bdc <xTaskIncrementTick+0x164>)
 8008b5e:	441a      	add	r2, r3
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	3304      	adds	r3, #4
 8008b64:	4619      	mov	r1, r3
 8008b66:	4610      	mov	r0, r2
 8008b68:	f7ff ff38 	bl	80089dc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b70:	4b1b      	ldr	r3, [pc, #108]	@ (8008be0 <xTaskIncrementTick+0x168>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d3b9      	bcc.n	8008aee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b7e:	e7b6      	b.n	8008aee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b80:	4b17      	ldr	r3, [pc, #92]	@ (8008be0 <xTaskIncrementTick+0x168>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b86:	4915      	ldr	r1, [pc, #84]	@ (8008bdc <xTaskIncrementTick+0x164>)
 8008b88:	4613      	mov	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	440b      	add	r3, r1
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d901      	bls.n	8008b9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b9c:	4b11      	ldr	r3, [pc, #68]	@ (8008be4 <xTaskIncrementTick+0x16c>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d007      	beq.n	8008bb4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	617b      	str	r3, [r7, #20]
 8008ba8:	e004      	b.n	8008bb4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008baa:	4b0f      	ldr	r3, [pc, #60]	@ (8008be8 <xTaskIncrementTick+0x170>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8008be8 <xTaskIncrementTick+0x170>)
 8008bb2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008bb4:	697b      	ldr	r3, [r7, #20]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3718      	adds	r7, #24
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	20000f00 	.word	0x20000f00
 8008bc4:	20000ee4 	.word	0x20000ee4
 8008bc8:	20000edc 	.word	0x20000edc
 8008bcc:	20000ee0 	.word	0x20000ee0
 8008bd0:	20000ef8 	.word	0x20000ef8
 8008bd4:	20000efc 	.word	0x20000efc
 8008bd8:	20000ee8 	.word	0x20000ee8
 8008bdc:	20000e50 	.word	0x20000e50
 8008be0:	20000e4c 	.word	0x20000e4c
 8008be4:	20000ef4 	.word	0x20000ef4
 8008be8:	20000ef0 	.word	0x20000ef0

08008bec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008bec:	b480      	push	{r7}
 8008bee:	b087      	sub	sp, #28
 8008bf0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bf2:	4b27      	ldr	r3, [pc, #156]	@ (8008c90 <vTaskSwitchContext+0xa4>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008bfa:	4b26      	ldr	r3, [pc, #152]	@ (8008c94 <vTaskSwitchContext+0xa8>)
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c00:	e040      	b.n	8008c84 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008c02:	4b24      	ldr	r3, [pc, #144]	@ (8008c94 <vTaskSwitchContext+0xa8>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c08:	4b23      	ldr	r3, [pc, #140]	@ (8008c98 <vTaskSwitchContext+0xac>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	fab3 f383 	clz	r3, r3
 8008c14:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008c16:	7afb      	ldrb	r3, [r7, #11]
 8008c18:	f1c3 031f 	rsb	r3, r3, #31
 8008c1c:	617b      	str	r3, [r7, #20]
 8008c1e:	491f      	ldr	r1, [pc, #124]	@ (8008c9c <vTaskSwitchContext+0xb0>)
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	4613      	mov	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	440b      	add	r3, r1
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10b      	bne.n	8008c4a <vTaskSwitchContext+0x5e>
	__asm volatile
 8008c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	607b      	str	r3, [r7, #4]
}
 8008c44:	bf00      	nop
 8008c46:	bf00      	nop
 8008c48:	e7fd      	b.n	8008c46 <vTaskSwitchContext+0x5a>
 8008c4a:	697a      	ldr	r2, [r7, #20]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	4413      	add	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4a11      	ldr	r2, [pc, #68]	@ (8008c9c <vTaskSwitchContext+0xb0>)
 8008c56:	4413      	add	r3, r2
 8008c58:	613b      	str	r3, [r7, #16]
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	605a      	str	r2, [r3, #4]
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d104      	bne.n	8008c7a <vTaskSwitchContext+0x8e>
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	605a      	str	r2, [r3, #4]
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	4a07      	ldr	r2, [pc, #28]	@ (8008ca0 <vTaskSwitchContext+0xb4>)
 8008c82:	6013      	str	r3, [r2, #0]
}
 8008c84:	bf00      	nop
 8008c86:	371c      	adds	r7, #28
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	20000f00 	.word	0x20000f00
 8008c94:	20000ef4 	.word	0x20000ef4
 8008c98:	20000ee8 	.word	0x20000ee8
 8008c9c:	20000e50 	.word	0x20000e50
 8008ca0:	20000e4c 	.word	0x20000e4c

08008ca4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008caa:	4b0c      	ldr	r3, [pc, #48]	@ (8008cdc <prvResetNextTaskUnblockTime+0x38>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d104      	bne.n	8008cbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8008ce0 <prvResetNextTaskUnblockTime+0x3c>)
 8008cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008cbc:	e008      	b.n	8008cd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cbe:	4b07      	ldr	r3, [pc, #28]	@ (8008cdc <prvResetNextTaskUnblockTime+0x38>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	4a04      	ldr	r2, [pc, #16]	@ (8008ce0 <prvResetNextTaskUnblockTime+0x3c>)
 8008cce:	6013      	str	r3, [r2, #0]
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	20000edc 	.word	0x20000edc
 8008ce0:	20000efc 	.word	0x20000efc

08008ce4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008cea:	4b0b      	ldr	r3, [pc, #44]	@ (8008d18 <xTaskGetSchedulerState+0x34>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d102      	bne.n	8008cf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	607b      	str	r3, [r7, #4]
 8008cf6:	e008      	b.n	8008d0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cf8:	4b08      	ldr	r3, [pc, #32]	@ (8008d1c <xTaskGetSchedulerState+0x38>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d102      	bne.n	8008d06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d00:	2302      	movs	r3, #2
 8008d02:	607b      	str	r3, [r7, #4]
 8008d04:	e001      	b.n	8008d0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d06:	2300      	movs	r3, #0
 8008d08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d0a:	687b      	ldr	r3, [r7, #4]
	}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	20000eec 	.word	0x20000eec
 8008d1c:	20000f00 	.word	0x20000f00

08008d20 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d20:	4b07      	ldr	r3, [pc, #28]	@ (8008d40 <pxCurrentTCBConst2>)
 8008d22:	6819      	ldr	r1, [r3, #0]
 8008d24:	6808      	ldr	r0, [r1, #0]
 8008d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2a:	f380 8809 	msr	PSP, r0
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f04f 0000 	mov.w	r0, #0
 8008d36:	f380 8811 	msr	BASEPRI, r0
 8008d3a:	4770      	bx	lr
 8008d3c:	f3af 8000 	nop.w

08008d40 <pxCurrentTCBConst2>:
 8008d40:	20000e4c 	.word	0x20000e4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop
	...

08008d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d50:	f3ef 8009 	mrs	r0, PSP
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	4b15      	ldr	r3, [pc, #84]	@ (8008db0 <pxCurrentTCBConst>)
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	f01e 0f10 	tst.w	lr, #16
 8008d60:	bf08      	it	eq
 8008d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6a:	6010      	str	r0, [r2, #0]
 8008d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008d74:	f380 8811 	msr	BASEPRI, r0
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f7ff ff34 	bl	8008bec <vTaskSwitchContext>
 8008d84:	f04f 0000 	mov.w	r0, #0
 8008d88:	f380 8811 	msr	BASEPRI, r0
 8008d8c:	bc09      	pop	{r0, r3}
 8008d8e:	6819      	ldr	r1, [r3, #0]
 8008d90:	6808      	ldr	r0, [r1, #0]
 8008d92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d96:	f01e 0f10 	tst.w	lr, #16
 8008d9a:	bf08      	it	eq
 8008d9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008da0:	f380 8809 	msr	PSP, r0
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	f3af 8000 	nop.w

08008db0 <pxCurrentTCBConst>:
 8008db0:	20000e4c 	.word	0x20000e4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008db4:	bf00      	nop
 8008db6:	bf00      	nop

08008db8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8008dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	607b      	str	r3, [r7, #4]
}
 8008dd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008dd2:	f7ff fe51 	bl	8008a78 <xTaskIncrementTick>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d003      	beq.n	8008de4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008ddc:	4b06      	ldr	r3, [pc, #24]	@ (8008df8 <xPortSysTickHandler+0x40>)
 8008dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	2300      	movs	r3, #0
 8008de6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008dee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008df0:	bf00      	nop
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	e000ed04 	.word	0xe000ed04

08008dfc <__cvt>:
 8008dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e00:	ec57 6b10 	vmov	r6, r7, d0
 8008e04:	2f00      	cmp	r7, #0
 8008e06:	460c      	mov	r4, r1
 8008e08:	4619      	mov	r1, r3
 8008e0a:	463b      	mov	r3, r7
 8008e0c:	bfbb      	ittet	lt
 8008e0e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008e12:	461f      	movlt	r7, r3
 8008e14:	2300      	movge	r3, #0
 8008e16:	232d      	movlt	r3, #45	@ 0x2d
 8008e18:	700b      	strb	r3, [r1, #0]
 8008e1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e1c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008e20:	4691      	mov	r9, r2
 8008e22:	f023 0820 	bic.w	r8, r3, #32
 8008e26:	bfbc      	itt	lt
 8008e28:	4632      	movlt	r2, r6
 8008e2a:	4616      	movlt	r6, r2
 8008e2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e30:	d005      	beq.n	8008e3e <__cvt+0x42>
 8008e32:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008e36:	d100      	bne.n	8008e3a <__cvt+0x3e>
 8008e38:	3401      	adds	r4, #1
 8008e3a:	2102      	movs	r1, #2
 8008e3c:	e000      	b.n	8008e40 <__cvt+0x44>
 8008e3e:	2103      	movs	r1, #3
 8008e40:	ab03      	add	r3, sp, #12
 8008e42:	9301      	str	r3, [sp, #4]
 8008e44:	ab02      	add	r3, sp, #8
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	ec47 6b10 	vmov	d0, r6, r7
 8008e4c:	4653      	mov	r3, sl
 8008e4e:	4622      	mov	r2, r4
 8008e50:	f001 f9ba 	bl	800a1c8 <_dtoa_r>
 8008e54:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008e58:	4605      	mov	r5, r0
 8008e5a:	d119      	bne.n	8008e90 <__cvt+0x94>
 8008e5c:	f019 0f01 	tst.w	r9, #1
 8008e60:	d00e      	beq.n	8008e80 <__cvt+0x84>
 8008e62:	eb00 0904 	add.w	r9, r0, r4
 8008e66:	2200      	movs	r2, #0
 8008e68:	2300      	movs	r3, #0
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	4639      	mov	r1, r7
 8008e6e:	f7f7 fe53 	bl	8000b18 <__aeabi_dcmpeq>
 8008e72:	b108      	cbz	r0, 8008e78 <__cvt+0x7c>
 8008e74:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e78:	2230      	movs	r2, #48	@ 0x30
 8008e7a:	9b03      	ldr	r3, [sp, #12]
 8008e7c:	454b      	cmp	r3, r9
 8008e7e:	d31e      	bcc.n	8008ebe <__cvt+0xc2>
 8008e80:	9b03      	ldr	r3, [sp, #12]
 8008e82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e84:	1b5b      	subs	r3, r3, r5
 8008e86:	4628      	mov	r0, r5
 8008e88:	6013      	str	r3, [r2, #0]
 8008e8a:	b004      	add	sp, #16
 8008e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e94:	eb00 0904 	add.w	r9, r0, r4
 8008e98:	d1e5      	bne.n	8008e66 <__cvt+0x6a>
 8008e9a:	7803      	ldrb	r3, [r0, #0]
 8008e9c:	2b30      	cmp	r3, #48	@ 0x30
 8008e9e:	d10a      	bne.n	8008eb6 <__cvt+0xba>
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	4639      	mov	r1, r7
 8008ea8:	f7f7 fe36 	bl	8000b18 <__aeabi_dcmpeq>
 8008eac:	b918      	cbnz	r0, 8008eb6 <__cvt+0xba>
 8008eae:	f1c4 0401 	rsb	r4, r4, #1
 8008eb2:	f8ca 4000 	str.w	r4, [sl]
 8008eb6:	f8da 3000 	ldr.w	r3, [sl]
 8008eba:	4499      	add	r9, r3
 8008ebc:	e7d3      	b.n	8008e66 <__cvt+0x6a>
 8008ebe:	1c59      	adds	r1, r3, #1
 8008ec0:	9103      	str	r1, [sp, #12]
 8008ec2:	701a      	strb	r2, [r3, #0]
 8008ec4:	e7d9      	b.n	8008e7a <__cvt+0x7e>

08008ec6 <__exponent>:
 8008ec6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ec8:	2900      	cmp	r1, #0
 8008eca:	bfba      	itte	lt
 8008ecc:	4249      	neglt	r1, r1
 8008ece:	232d      	movlt	r3, #45	@ 0x2d
 8008ed0:	232b      	movge	r3, #43	@ 0x2b
 8008ed2:	2909      	cmp	r1, #9
 8008ed4:	7002      	strb	r2, [r0, #0]
 8008ed6:	7043      	strb	r3, [r0, #1]
 8008ed8:	dd29      	ble.n	8008f2e <__exponent+0x68>
 8008eda:	f10d 0307 	add.w	r3, sp, #7
 8008ede:	461d      	mov	r5, r3
 8008ee0:	270a      	movs	r7, #10
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	fbb1 f6f7 	udiv	r6, r1, r7
 8008ee8:	fb07 1416 	mls	r4, r7, r6, r1
 8008eec:	3430      	adds	r4, #48	@ 0x30
 8008eee:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008ef2:	460c      	mov	r4, r1
 8008ef4:	2c63      	cmp	r4, #99	@ 0x63
 8008ef6:	f103 33ff 	add.w	r3, r3, #4294967295
 8008efa:	4631      	mov	r1, r6
 8008efc:	dcf1      	bgt.n	8008ee2 <__exponent+0x1c>
 8008efe:	3130      	adds	r1, #48	@ 0x30
 8008f00:	1e94      	subs	r4, r2, #2
 8008f02:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008f06:	1c41      	adds	r1, r0, #1
 8008f08:	4623      	mov	r3, r4
 8008f0a:	42ab      	cmp	r3, r5
 8008f0c:	d30a      	bcc.n	8008f24 <__exponent+0x5e>
 8008f0e:	f10d 0309 	add.w	r3, sp, #9
 8008f12:	1a9b      	subs	r3, r3, r2
 8008f14:	42ac      	cmp	r4, r5
 8008f16:	bf88      	it	hi
 8008f18:	2300      	movhi	r3, #0
 8008f1a:	3302      	adds	r3, #2
 8008f1c:	4403      	add	r3, r0
 8008f1e:	1a18      	subs	r0, r3, r0
 8008f20:	b003      	add	sp, #12
 8008f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f24:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008f28:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008f2c:	e7ed      	b.n	8008f0a <__exponent+0x44>
 8008f2e:	2330      	movs	r3, #48	@ 0x30
 8008f30:	3130      	adds	r1, #48	@ 0x30
 8008f32:	7083      	strb	r3, [r0, #2]
 8008f34:	70c1      	strb	r1, [r0, #3]
 8008f36:	1d03      	adds	r3, r0, #4
 8008f38:	e7f1      	b.n	8008f1e <__exponent+0x58>
	...

08008f3c <_printf_float>:
 8008f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f40:	b08d      	sub	sp, #52	@ 0x34
 8008f42:	460c      	mov	r4, r1
 8008f44:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008f48:	4616      	mov	r6, r2
 8008f4a:	461f      	mov	r7, r3
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	f001 f827 	bl	8009fa0 <_localeconv_r>
 8008f52:	6803      	ldr	r3, [r0, #0]
 8008f54:	9304      	str	r3, [sp, #16]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7f7 f9b2 	bl	80002c0 <strlen>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f60:	f8d8 3000 	ldr.w	r3, [r8]
 8008f64:	9005      	str	r0, [sp, #20]
 8008f66:	3307      	adds	r3, #7
 8008f68:	f023 0307 	bic.w	r3, r3, #7
 8008f6c:	f103 0208 	add.w	r2, r3, #8
 8008f70:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008f74:	f8d4 b000 	ldr.w	fp, [r4]
 8008f78:	f8c8 2000 	str.w	r2, [r8]
 8008f7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f80:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008f84:	9307      	str	r3, [sp, #28]
 8008f86:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008f8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f92:	4b9c      	ldr	r3, [pc, #624]	@ (8009204 <_printf_float+0x2c8>)
 8008f94:	f04f 32ff 	mov.w	r2, #4294967295
 8008f98:	f7f7 fdf0 	bl	8000b7c <__aeabi_dcmpun>
 8008f9c:	bb70      	cbnz	r0, 8008ffc <_printf_float+0xc0>
 8008f9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fa2:	4b98      	ldr	r3, [pc, #608]	@ (8009204 <_printf_float+0x2c8>)
 8008fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa8:	f7f7 fdca 	bl	8000b40 <__aeabi_dcmple>
 8008fac:	bb30      	cbnz	r0, 8008ffc <_printf_float+0xc0>
 8008fae:	2200      	movs	r2, #0
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	4640      	mov	r0, r8
 8008fb4:	4649      	mov	r1, r9
 8008fb6:	f7f7 fdb9 	bl	8000b2c <__aeabi_dcmplt>
 8008fba:	b110      	cbz	r0, 8008fc2 <_printf_float+0x86>
 8008fbc:	232d      	movs	r3, #45	@ 0x2d
 8008fbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fc2:	4a91      	ldr	r2, [pc, #580]	@ (8009208 <_printf_float+0x2cc>)
 8008fc4:	4b91      	ldr	r3, [pc, #580]	@ (800920c <_printf_float+0x2d0>)
 8008fc6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008fca:	bf94      	ite	ls
 8008fcc:	4690      	movls	r8, r2
 8008fce:	4698      	movhi	r8, r3
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	6123      	str	r3, [r4, #16]
 8008fd4:	f02b 0304 	bic.w	r3, fp, #4
 8008fd8:	6023      	str	r3, [r4, #0]
 8008fda:	f04f 0900 	mov.w	r9, #0
 8008fde:	9700      	str	r7, [sp, #0]
 8008fe0:	4633      	mov	r3, r6
 8008fe2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	f000 f9d2 	bl	8009390 <_printf_common>
 8008fec:	3001      	adds	r0, #1
 8008fee:	f040 808d 	bne.w	800910c <_printf_float+0x1d0>
 8008ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff6:	b00d      	add	sp, #52	@ 0x34
 8008ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffc:	4642      	mov	r2, r8
 8008ffe:	464b      	mov	r3, r9
 8009000:	4640      	mov	r0, r8
 8009002:	4649      	mov	r1, r9
 8009004:	f7f7 fdba 	bl	8000b7c <__aeabi_dcmpun>
 8009008:	b140      	cbz	r0, 800901c <_printf_float+0xe0>
 800900a:	464b      	mov	r3, r9
 800900c:	2b00      	cmp	r3, #0
 800900e:	bfbc      	itt	lt
 8009010:	232d      	movlt	r3, #45	@ 0x2d
 8009012:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009016:	4a7e      	ldr	r2, [pc, #504]	@ (8009210 <_printf_float+0x2d4>)
 8009018:	4b7e      	ldr	r3, [pc, #504]	@ (8009214 <_printf_float+0x2d8>)
 800901a:	e7d4      	b.n	8008fc6 <_printf_float+0x8a>
 800901c:	6863      	ldr	r3, [r4, #4]
 800901e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009022:	9206      	str	r2, [sp, #24]
 8009024:	1c5a      	adds	r2, r3, #1
 8009026:	d13b      	bne.n	80090a0 <_printf_float+0x164>
 8009028:	2306      	movs	r3, #6
 800902a:	6063      	str	r3, [r4, #4]
 800902c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009030:	2300      	movs	r3, #0
 8009032:	6022      	str	r2, [r4, #0]
 8009034:	9303      	str	r3, [sp, #12]
 8009036:	ab0a      	add	r3, sp, #40	@ 0x28
 8009038:	e9cd a301 	strd	sl, r3, [sp, #4]
 800903c:	ab09      	add	r3, sp, #36	@ 0x24
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	6861      	ldr	r1, [r4, #4]
 8009042:	ec49 8b10 	vmov	d0, r8, r9
 8009046:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800904a:	4628      	mov	r0, r5
 800904c:	f7ff fed6 	bl	8008dfc <__cvt>
 8009050:	9b06      	ldr	r3, [sp, #24]
 8009052:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009054:	2b47      	cmp	r3, #71	@ 0x47
 8009056:	4680      	mov	r8, r0
 8009058:	d129      	bne.n	80090ae <_printf_float+0x172>
 800905a:	1cc8      	adds	r0, r1, #3
 800905c:	db02      	blt.n	8009064 <_printf_float+0x128>
 800905e:	6863      	ldr	r3, [r4, #4]
 8009060:	4299      	cmp	r1, r3
 8009062:	dd41      	ble.n	80090e8 <_printf_float+0x1ac>
 8009064:	f1aa 0a02 	sub.w	sl, sl, #2
 8009068:	fa5f fa8a 	uxtb.w	sl, sl
 800906c:	3901      	subs	r1, #1
 800906e:	4652      	mov	r2, sl
 8009070:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009074:	9109      	str	r1, [sp, #36]	@ 0x24
 8009076:	f7ff ff26 	bl	8008ec6 <__exponent>
 800907a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800907c:	1813      	adds	r3, r2, r0
 800907e:	2a01      	cmp	r2, #1
 8009080:	4681      	mov	r9, r0
 8009082:	6123      	str	r3, [r4, #16]
 8009084:	dc02      	bgt.n	800908c <_printf_float+0x150>
 8009086:	6822      	ldr	r2, [r4, #0]
 8009088:	07d2      	lsls	r2, r2, #31
 800908a:	d501      	bpl.n	8009090 <_printf_float+0x154>
 800908c:	3301      	adds	r3, #1
 800908e:	6123      	str	r3, [r4, #16]
 8009090:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009094:	2b00      	cmp	r3, #0
 8009096:	d0a2      	beq.n	8008fde <_printf_float+0xa2>
 8009098:	232d      	movs	r3, #45	@ 0x2d
 800909a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800909e:	e79e      	b.n	8008fde <_printf_float+0xa2>
 80090a0:	9a06      	ldr	r2, [sp, #24]
 80090a2:	2a47      	cmp	r2, #71	@ 0x47
 80090a4:	d1c2      	bne.n	800902c <_printf_float+0xf0>
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1c0      	bne.n	800902c <_printf_float+0xf0>
 80090aa:	2301      	movs	r3, #1
 80090ac:	e7bd      	b.n	800902a <_printf_float+0xee>
 80090ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80090b2:	d9db      	bls.n	800906c <_printf_float+0x130>
 80090b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80090b8:	d118      	bne.n	80090ec <_printf_float+0x1b0>
 80090ba:	2900      	cmp	r1, #0
 80090bc:	6863      	ldr	r3, [r4, #4]
 80090be:	dd0b      	ble.n	80090d8 <_printf_float+0x19c>
 80090c0:	6121      	str	r1, [r4, #16]
 80090c2:	b913      	cbnz	r3, 80090ca <_printf_float+0x18e>
 80090c4:	6822      	ldr	r2, [r4, #0]
 80090c6:	07d0      	lsls	r0, r2, #31
 80090c8:	d502      	bpl.n	80090d0 <_printf_float+0x194>
 80090ca:	3301      	adds	r3, #1
 80090cc:	440b      	add	r3, r1
 80090ce:	6123      	str	r3, [r4, #16]
 80090d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80090d2:	f04f 0900 	mov.w	r9, #0
 80090d6:	e7db      	b.n	8009090 <_printf_float+0x154>
 80090d8:	b913      	cbnz	r3, 80090e0 <_printf_float+0x1a4>
 80090da:	6822      	ldr	r2, [r4, #0]
 80090dc:	07d2      	lsls	r2, r2, #31
 80090de:	d501      	bpl.n	80090e4 <_printf_float+0x1a8>
 80090e0:	3302      	adds	r3, #2
 80090e2:	e7f4      	b.n	80090ce <_printf_float+0x192>
 80090e4:	2301      	movs	r3, #1
 80090e6:	e7f2      	b.n	80090ce <_printf_float+0x192>
 80090e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80090ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090ee:	4299      	cmp	r1, r3
 80090f0:	db05      	blt.n	80090fe <_printf_float+0x1c2>
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	6121      	str	r1, [r4, #16]
 80090f6:	07d8      	lsls	r0, r3, #31
 80090f8:	d5ea      	bpl.n	80090d0 <_printf_float+0x194>
 80090fa:	1c4b      	adds	r3, r1, #1
 80090fc:	e7e7      	b.n	80090ce <_printf_float+0x192>
 80090fe:	2900      	cmp	r1, #0
 8009100:	bfd4      	ite	le
 8009102:	f1c1 0202 	rsble	r2, r1, #2
 8009106:	2201      	movgt	r2, #1
 8009108:	4413      	add	r3, r2
 800910a:	e7e0      	b.n	80090ce <_printf_float+0x192>
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	055a      	lsls	r2, r3, #21
 8009110:	d407      	bmi.n	8009122 <_printf_float+0x1e6>
 8009112:	6923      	ldr	r3, [r4, #16]
 8009114:	4642      	mov	r2, r8
 8009116:	4631      	mov	r1, r6
 8009118:	4628      	mov	r0, r5
 800911a:	47b8      	blx	r7
 800911c:	3001      	adds	r0, #1
 800911e:	d12b      	bne.n	8009178 <_printf_float+0x23c>
 8009120:	e767      	b.n	8008ff2 <_printf_float+0xb6>
 8009122:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009126:	f240 80dd 	bls.w	80092e4 <_printf_float+0x3a8>
 800912a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800912e:	2200      	movs	r2, #0
 8009130:	2300      	movs	r3, #0
 8009132:	f7f7 fcf1 	bl	8000b18 <__aeabi_dcmpeq>
 8009136:	2800      	cmp	r0, #0
 8009138:	d033      	beq.n	80091a2 <_printf_float+0x266>
 800913a:	4a37      	ldr	r2, [pc, #220]	@ (8009218 <_printf_float+0x2dc>)
 800913c:	2301      	movs	r3, #1
 800913e:	4631      	mov	r1, r6
 8009140:	4628      	mov	r0, r5
 8009142:	47b8      	blx	r7
 8009144:	3001      	adds	r0, #1
 8009146:	f43f af54 	beq.w	8008ff2 <_printf_float+0xb6>
 800914a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800914e:	4543      	cmp	r3, r8
 8009150:	db02      	blt.n	8009158 <_printf_float+0x21c>
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	07d8      	lsls	r0, r3, #31
 8009156:	d50f      	bpl.n	8009178 <_printf_float+0x23c>
 8009158:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800915c:	4631      	mov	r1, r6
 800915e:	4628      	mov	r0, r5
 8009160:	47b8      	blx	r7
 8009162:	3001      	adds	r0, #1
 8009164:	f43f af45 	beq.w	8008ff2 <_printf_float+0xb6>
 8009168:	f04f 0900 	mov.w	r9, #0
 800916c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009170:	f104 0a1a 	add.w	sl, r4, #26
 8009174:	45c8      	cmp	r8, r9
 8009176:	dc09      	bgt.n	800918c <_printf_float+0x250>
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	079b      	lsls	r3, r3, #30
 800917c:	f100 8103 	bmi.w	8009386 <_printf_float+0x44a>
 8009180:	68e0      	ldr	r0, [r4, #12]
 8009182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009184:	4298      	cmp	r0, r3
 8009186:	bfb8      	it	lt
 8009188:	4618      	movlt	r0, r3
 800918a:	e734      	b.n	8008ff6 <_printf_float+0xba>
 800918c:	2301      	movs	r3, #1
 800918e:	4652      	mov	r2, sl
 8009190:	4631      	mov	r1, r6
 8009192:	4628      	mov	r0, r5
 8009194:	47b8      	blx	r7
 8009196:	3001      	adds	r0, #1
 8009198:	f43f af2b 	beq.w	8008ff2 <_printf_float+0xb6>
 800919c:	f109 0901 	add.w	r9, r9, #1
 80091a0:	e7e8      	b.n	8009174 <_printf_float+0x238>
 80091a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	dc39      	bgt.n	800921c <_printf_float+0x2e0>
 80091a8:	4a1b      	ldr	r2, [pc, #108]	@ (8009218 <_printf_float+0x2dc>)
 80091aa:	2301      	movs	r3, #1
 80091ac:	4631      	mov	r1, r6
 80091ae:	4628      	mov	r0, r5
 80091b0:	47b8      	blx	r7
 80091b2:	3001      	adds	r0, #1
 80091b4:	f43f af1d 	beq.w	8008ff2 <_printf_float+0xb6>
 80091b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80091bc:	ea59 0303 	orrs.w	r3, r9, r3
 80091c0:	d102      	bne.n	80091c8 <_printf_float+0x28c>
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	07d9      	lsls	r1, r3, #31
 80091c6:	d5d7      	bpl.n	8009178 <_printf_float+0x23c>
 80091c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091cc:	4631      	mov	r1, r6
 80091ce:	4628      	mov	r0, r5
 80091d0:	47b8      	blx	r7
 80091d2:	3001      	adds	r0, #1
 80091d4:	f43f af0d 	beq.w	8008ff2 <_printf_float+0xb6>
 80091d8:	f04f 0a00 	mov.w	sl, #0
 80091dc:	f104 0b1a 	add.w	fp, r4, #26
 80091e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091e2:	425b      	negs	r3, r3
 80091e4:	4553      	cmp	r3, sl
 80091e6:	dc01      	bgt.n	80091ec <_printf_float+0x2b0>
 80091e8:	464b      	mov	r3, r9
 80091ea:	e793      	b.n	8009114 <_printf_float+0x1d8>
 80091ec:	2301      	movs	r3, #1
 80091ee:	465a      	mov	r2, fp
 80091f0:	4631      	mov	r1, r6
 80091f2:	4628      	mov	r0, r5
 80091f4:	47b8      	blx	r7
 80091f6:	3001      	adds	r0, #1
 80091f8:	f43f aefb 	beq.w	8008ff2 <_printf_float+0xb6>
 80091fc:	f10a 0a01 	add.w	sl, sl, #1
 8009200:	e7ee      	b.n	80091e0 <_printf_float+0x2a4>
 8009202:	bf00      	nop
 8009204:	7fefffff 	.word	0x7fefffff
 8009208:	0800db18 	.word	0x0800db18
 800920c:	0800db1c 	.word	0x0800db1c
 8009210:	0800db20 	.word	0x0800db20
 8009214:	0800db24 	.word	0x0800db24
 8009218:	0800db28 	.word	0x0800db28
 800921c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800921e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009222:	4553      	cmp	r3, sl
 8009224:	bfa8      	it	ge
 8009226:	4653      	movge	r3, sl
 8009228:	2b00      	cmp	r3, #0
 800922a:	4699      	mov	r9, r3
 800922c:	dc36      	bgt.n	800929c <_printf_float+0x360>
 800922e:	f04f 0b00 	mov.w	fp, #0
 8009232:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009236:	f104 021a 	add.w	r2, r4, #26
 800923a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800923c:	9306      	str	r3, [sp, #24]
 800923e:	eba3 0309 	sub.w	r3, r3, r9
 8009242:	455b      	cmp	r3, fp
 8009244:	dc31      	bgt.n	80092aa <_printf_float+0x36e>
 8009246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009248:	459a      	cmp	sl, r3
 800924a:	dc3a      	bgt.n	80092c2 <_printf_float+0x386>
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	07da      	lsls	r2, r3, #31
 8009250:	d437      	bmi.n	80092c2 <_printf_float+0x386>
 8009252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009254:	ebaa 0903 	sub.w	r9, sl, r3
 8009258:	9b06      	ldr	r3, [sp, #24]
 800925a:	ebaa 0303 	sub.w	r3, sl, r3
 800925e:	4599      	cmp	r9, r3
 8009260:	bfa8      	it	ge
 8009262:	4699      	movge	r9, r3
 8009264:	f1b9 0f00 	cmp.w	r9, #0
 8009268:	dc33      	bgt.n	80092d2 <_printf_float+0x396>
 800926a:	f04f 0800 	mov.w	r8, #0
 800926e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009272:	f104 0b1a 	add.w	fp, r4, #26
 8009276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009278:	ebaa 0303 	sub.w	r3, sl, r3
 800927c:	eba3 0309 	sub.w	r3, r3, r9
 8009280:	4543      	cmp	r3, r8
 8009282:	f77f af79 	ble.w	8009178 <_printf_float+0x23c>
 8009286:	2301      	movs	r3, #1
 8009288:	465a      	mov	r2, fp
 800928a:	4631      	mov	r1, r6
 800928c:	4628      	mov	r0, r5
 800928e:	47b8      	blx	r7
 8009290:	3001      	adds	r0, #1
 8009292:	f43f aeae 	beq.w	8008ff2 <_printf_float+0xb6>
 8009296:	f108 0801 	add.w	r8, r8, #1
 800929a:	e7ec      	b.n	8009276 <_printf_float+0x33a>
 800929c:	4642      	mov	r2, r8
 800929e:	4631      	mov	r1, r6
 80092a0:	4628      	mov	r0, r5
 80092a2:	47b8      	blx	r7
 80092a4:	3001      	adds	r0, #1
 80092a6:	d1c2      	bne.n	800922e <_printf_float+0x2f2>
 80092a8:	e6a3      	b.n	8008ff2 <_printf_float+0xb6>
 80092aa:	2301      	movs	r3, #1
 80092ac:	4631      	mov	r1, r6
 80092ae:	4628      	mov	r0, r5
 80092b0:	9206      	str	r2, [sp, #24]
 80092b2:	47b8      	blx	r7
 80092b4:	3001      	adds	r0, #1
 80092b6:	f43f ae9c 	beq.w	8008ff2 <_printf_float+0xb6>
 80092ba:	9a06      	ldr	r2, [sp, #24]
 80092bc:	f10b 0b01 	add.w	fp, fp, #1
 80092c0:	e7bb      	b.n	800923a <_printf_float+0x2fe>
 80092c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092c6:	4631      	mov	r1, r6
 80092c8:	4628      	mov	r0, r5
 80092ca:	47b8      	blx	r7
 80092cc:	3001      	adds	r0, #1
 80092ce:	d1c0      	bne.n	8009252 <_printf_float+0x316>
 80092d0:	e68f      	b.n	8008ff2 <_printf_float+0xb6>
 80092d2:	9a06      	ldr	r2, [sp, #24]
 80092d4:	464b      	mov	r3, r9
 80092d6:	4442      	add	r2, r8
 80092d8:	4631      	mov	r1, r6
 80092da:	4628      	mov	r0, r5
 80092dc:	47b8      	blx	r7
 80092de:	3001      	adds	r0, #1
 80092e0:	d1c3      	bne.n	800926a <_printf_float+0x32e>
 80092e2:	e686      	b.n	8008ff2 <_printf_float+0xb6>
 80092e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80092e8:	f1ba 0f01 	cmp.w	sl, #1
 80092ec:	dc01      	bgt.n	80092f2 <_printf_float+0x3b6>
 80092ee:	07db      	lsls	r3, r3, #31
 80092f0:	d536      	bpl.n	8009360 <_printf_float+0x424>
 80092f2:	2301      	movs	r3, #1
 80092f4:	4642      	mov	r2, r8
 80092f6:	4631      	mov	r1, r6
 80092f8:	4628      	mov	r0, r5
 80092fa:	47b8      	blx	r7
 80092fc:	3001      	adds	r0, #1
 80092fe:	f43f ae78 	beq.w	8008ff2 <_printf_float+0xb6>
 8009302:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009306:	4631      	mov	r1, r6
 8009308:	4628      	mov	r0, r5
 800930a:	47b8      	blx	r7
 800930c:	3001      	adds	r0, #1
 800930e:	f43f ae70 	beq.w	8008ff2 <_printf_float+0xb6>
 8009312:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009316:	2200      	movs	r2, #0
 8009318:	2300      	movs	r3, #0
 800931a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800931e:	f7f7 fbfb 	bl	8000b18 <__aeabi_dcmpeq>
 8009322:	b9c0      	cbnz	r0, 8009356 <_printf_float+0x41a>
 8009324:	4653      	mov	r3, sl
 8009326:	f108 0201 	add.w	r2, r8, #1
 800932a:	4631      	mov	r1, r6
 800932c:	4628      	mov	r0, r5
 800932e:	47b8      	blx	r7
 8009330:	3001      	adds	r0, #1
 8009332:	d10c      	bne.n	800934e <_printf_float+0x412>
 8009334:	e65d      	b.n	8008ff2 <_printf_float+0xb6>
 8009336:	2301      	movs	r3, #1
 8009338:	465a      	mov	r2, fp
 800933a:	4631      	mov	r1, r6
 800933c:	4628      	mov	r0, r5
 800933e:	47b8      	blx	r7
 8009340:	3001      	adds	r0, #1
 8009342:	f43f ae56 	beq.w	8008ff2 <_printf_float+0xb6>
 8009346:	f108 0801 	add.w	r8, r8, #1
 800934a:	45d0      	cmp	r8, sl
 800934c:	dbf3      	blt.n	8009336 <_printf_float+0x3fa>
 800934e:	464b      	mov	r3, r9
 8009350:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009354:	e6df      	b.n	8009116 <_printf_float+0x1da>
 8009356:	f04f 0800 	mov.w	r8, #0
 800935a:	f104 0b1a 	add.w	fp, r4, #26
 800935e:	e7f4      	b.n	800934a <_printf_float+0x40e>
 8009360:	2301      	movs	r3, #1
 8009362:	4642      	mov	r2, r8
 8009364:	e7e1      	b.n	800932a <_printf_float+0x3ee>
 8009366:	2301      	movs	r3, #1
 8009368:	464a      	mov	r2, r9
 800936a:	4631      	mov	r1, r6
 800936c:	4628      	mov	r0, r5
 800936e:	47b8      	blx	r7
 8009370:	3001      	adds	r0, #1
 8009372:	f43f ae3e 	beq.w	8008ff2 <_printf_float+0xb6>
 8009376:	f108 0801 	add.w	r8, r8, #1
 800937a:	68e3      	ldr	r3, [r4, #12]
 800937c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800937e:	1a5b      	subs	r3, r3, r1
 8009380:	4543      	cmp	r3, r8
 8009382:	dcf0      	bgt.n	8009366 <_printf_float+0x42a>
 8009384:	e6fc      	b.n	8009180 <_printf_float+0x244>
 8009386:	f04f 0800 	mov.w	r8, #0
 800938a:	f104 0919 	add.w	r9, r4, #25
 800938e:	e7f4      	b.n	800937a <_printf_float+0x43e>

08009390 <_printf_common>:
 8009390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009394:	4616      	mov	r6, r2
 8009396:	4698      	mov	r8, r3
 8009398:	688a      	ldr	r2, [r1, #8]
 800939a:	690b      	ldr	r3, [r1, #16]
 800939c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093a0:	4293      	cmp	r3, r2
 80093a2:	bfb8      	it	lt
 80093a4:	4613      	movlt	r3, r2
 80093a6:	6033      	str	r3, [r6, #0]
 80093a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80093ac:	4607      	mov	r7, r0
 80093ae:	460c      	mov	r4, r1
 80093b0:	b10a      	cbz	r2, 80093b6 <_printf_common+0x26>
 80093b2:	3301      	adds	r3, #1
 80093b4:	6033      	str	r3, [r6, #0]
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	0699      	lsls	r1, r3, #26
 80093ba:	bf42      	ittt	mi
 80093bc:	6833      	ldrmi	r3, [r6, #0]
 80093be:	3302      	addmi	r3, #2
 80093c0:	6033      	strmi	r3, [r6, #0]
 80093c2:	6825      	ldr	r5, [r4, #0]
 80093c4:	f015 0506 	ands.w	r5, r5, #6
 80093c8:	d106      	bne.n	80093d8 <_printf_common+0x48>
 80093ca:	f104 0a19 	add.w	sl, r4, #25
 80093ce:	68e3      	ldr	r3, [r4, #12]
 80093d0:	6832      	ldr	r2, [r6, #0]
 80093d2:	1a9b      	subs	r3, r3, r2
 80093d4:	42ab      	cmp	r3, r5
 80093d6:	dc26      	bgt.n	8009426 <_printf_common+0x96>
 80093d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80093dc:	6822      	ldr	r2, [r4, #0]
 80093de:	3b00      	subs	r3, #0
 80093e0:	bf18      	it	ne
 80093e2:	2301      	movne	r3, #1
 80093e4:	0692      	lsls	r2, r2, #26
 80093e6:	d42b      	bmi.n	8009440 <_printf_common+0xb0>
 80093e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80093ec:	4641      	mov	r1, r8
 80093ee:	4638      	mov	r0, r7
 80093f0:	47c8      	blx	r9
 80093f2:	3001      	adds	r0, #1
 80093f4:	d01e      	beq.n	8009434 <_printf_common+0xa4>
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	6922      	ldr	r2, [r4, #16]
 80093fa:	f003 0306 	and.w	r3, r3, #6
 80093fe:	2b04      	cmp	r3, #4
 8009400:	bf02      	ittt	eq
 8009402:	68e5      	ldreq	r5, [r4, #12]
 8009404:	6833      	ldreq	r3, [r6, #0]
 8009406:	1aed      	subeq	r5, r5, r3
 8009408:	68a3      	ldr	r3, [r4, #8]
 800940a:	bf0c      	ite	eq
 800940c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009410:	2500      	movne	r5, #0
 8009412:	4293      	cmp	r3, r2
 8009414:	bfc4      	itt	gt
 8009416:	1a9b      	subgt	r3, r3, r2
 8009418:	18ed      	addgt	r5, r5, r3
 800941a:	2600      	movs	r6, #0
 800941c:	341a      	adds	r4, #26
 800941e:	42b5      	cmp	r5, r6
 8009420:	d11a      	bne.n	8009458 <_printf_common+0xc8>
 8009422:	2000      	movs	r0, #0
 8009424:	e008      	b.n	8009438 <_printf_common+0xa8>
 8009426:	2301      	movs	r3, #1
 8009428:	4652      	mov	r2, sl
 800942a:	4641      	mov	r1, r8
 800942c:	4638      	mov	r0, r7
 800942e:	47c8      	blx	r9
 8009430:	3001      	adds	r0, #1
 8009432:	d103      	bne.n	800943c <_printf_common+0xac>
 8009434:	f04f 30ff 	mov.w	r0, #4294967295
 8009438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800943c:	3501      	adds	r5, #1
 800943e:	e7c6      	b.n	80093ce <_printf_common+0x3e>
 8009440:	18e1      	adds	r1, r4, r3
 8009442:	1c5a      	adds	r2, r3, #1
 8009444:	2030      	movs	r0, #48	@ 0x30
 8009446:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800944a:	4422      	add	r2, r4
 800944c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009450:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009454:	3302      	adds	r3, #2
 8009456:	e7c7      	b.n	80093e8 <_printf_common+0x58>
 8009458:	2301      	movs	r3, #1
 800945a:	4622      	mov	r2, r4
 800945c:	4641      	mov	r1, r8
 800945e:	4638      	mov	r0, r7
 8009460:	47c8      	blx	r9
 8009462:	3001      	adds	r0, #1
 8009464:	d0e6      	beq.n	8009434 <_printf_common+0xa4>
 8009466:	3601      	adds	r6, #1
 8009468:	e7d9      	b.n	800941e <_printf_common+0x8e>
	...

0800946c <_printf_i>:
 800946c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009470:	7e0f      	ldrb	r7, [r1, #24]
 8009472:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009474:	2f78      	cmp	r7, #120	@ 0x78
 8009476:	4691      	mov	r9, r2
 8009478:	4680      	mov	r8, r0
 800947a:	460c      	mov	r4, r1
 800947c:	469a      	mov	sl, r3
 800947e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009482:	d807      	bhi.n	8009494 <_printf_i+0x28>
 8009484:	2f62      	cmp	r7, #98	@ 0x62
 8009486:	d80a      	bhi.n	800949e <_printf_i+0x32>
 8009488:	2f00      	cmp	r7, #0
 800948a:	f000 80d2 	beq.w	8009632 <_printf_i+0x1c6>
 800948e:	2f58      	cmp	r7, #88	@ 0x58
 8009490:	f000 80b9 	beq.w	8009606 <_printf_i+0x19a>
 8009494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009498:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800949c:	e03a      	b.n	8009514 <_printf_i+0xa8>
 800949e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80094a2:	2b15      	cmp	r3, #21
 80094a4:	d8f6      	bhi.n	8009494 <_printf_i+0x28>
 80094a6:	a101      	add	r1, pc, #4	@ (adr r1, 80094ac <_printf_i+0x40>)
 80094a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094ac:	08009505 	.word	0x08009505
 80094b0:	08009519 	.word	0x08009519
 80094b4:	08009495 	.word	0x08009495
 80094b8:	08009495 	.word	0x08009495
 80094bc:	08009495 	.word	0x08009495
 80094c0:	08009495 	.word	0x08009495
 80094c4:	08009519 	.word	0x08009519
 80094c8:	08009495 	.word	0x08009495
 80094cc:	08009495 	.word	0x08009495
 80094d0:	08009495 	.word	0x08009495
 80094d4:	08009495 	.word	0x08009495
 80094d8:	08009619 	.word	0x08009619
 80094dc:	08009543 	.word	0x08009543
 80094e0:	080095d3 	.word	0x080095d3
 80094e4:	08009495 	.word	0x08009495
 80094e8:	08009495 	.word	0x08009495
 80094ec:	0800963b 	.word	0x0800963b
 80094f0:	08009495 	.word	0x08009495
 80094f4:	08009543 	.word	0x08009543
 80094f8:	08009495 	.word	0x08009495
 80094fc:	08009495 	.word	0x08009495
 8009500:	080095db 	.word	0x080095db
 8009504:	6833      	ldr	r3, [r6, #0]
 8009506:	1d1a      	adds	r2, r3, #4
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	6032      	str	r2, [r6, #0]
 800950c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009510:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009514:	2301      	movs	r3, #1
 8009516:	e09d      	b.n	8009654 <_printf_i+0x1e8>
 8009518:	6833      	ldr	r3, [r6, #0]
 800951a:	6820      	ldr	r0, [r4, #0]
 800951c:	1d19      	adds	r1, r3, #4
 800951e:	6031      	str	r1, [r6, #0]
 8009520:	0606      	lsls	r6, r0, #24
 8009522:	d501      	bpl.n	8009528 <_printf_i+0xbc>
 8009524:	681d      	ldr	r5, [r3, #0]
 8009526:	e003      	b.n	8009530 <_printf_i+0xc4>
 8009528:	0645      	lsls	r5, r0, #25
 800952a:	d5fb      	bpl.n	8009524 <_printf_i+0xb8>
 800952c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009530:	2d00      	cmp	r5, #0
 8009532:	da03      	bge.n	800953c <_printf_i+0xd0>
 8009534:	232d      	movs	r3, #45	@ 0x2d
 8009536:	426d      	negs	r5, r5
 8009538:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800953c:	4859      	ldr	r0, [pc, #356]	@ (80096a4 <_printf_i+0x238>)
 800953e:	230a      	movs	r3, #10
 8009540:	e011      	b.n	8009566 <_printf_i+0xfa>
 8009542:	6821      	ldr	r1, [r4, #0]
 8009544:	6833      	ldr	r3, [r6, #0]
 8009546:	0608      	lsls	r0, r1, #24
 8009548:	f853 5b04 	ldr.w	r5, [r3], #4
 800954c:	d402      	bmi.n	8009554 <_printf_i+0xe8>
 800954e:	0649      	lsls	r1, r1, #25
 8009550:	bf48      	it	mi
 8009552:	b2ad      	uxthmi	r5, r5
 8009554:	2f6f      	cmp	r7, #111	@ 0x6f
 8009556:	4853      	ldr	r0, [pc, #332]	@ (80096a4 <_printf_i+0x238>)
 8009558:	6033      	str	r3, [r6, #0]
 800955a:	bf14      	ite	ne
 800955c:	230a      	movne	r3, #10
 800955e:	2308      	moveq	r3, #8
 8009560:	2100      	movs	r1, #0
 8009562:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009566:	6866      	ldr	r6, [r4, #4]
 8009568:	60a6      	str	r6, [r4, #8]
 800956a:	2e00      	cmp	r6, #0
 800956c:	bfa2      	ittt	ge
 800956e:	6821      	ldrge	r1, [r4, #0]
 8009570:	f021 0104 	bicge.w	r1, r1, #4
 8009574:	6021      	strge	r1, [r4, #0]
 8009576:	b90d      	cbnz	r5, 800957c <_printf_i+0x110>
 8009578:	2e00      	cmp	r6, #0
 800957a:	d04b      	beq.n	8009614 <_printf_i+0x1a8>
 800957c:	4616      	mov	r6, r2
 800957e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009582:	fb03 5711 	mls	r7, r3, r1, r5
 8009586:	5dc7      	ldrb	r7, [r0, r7]
 8009588:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800958c:	462f      	mov	r7, r5
 800958e:	42bb      	cmp	r3, r7
 8009590:	460d      	mov	r5, r1
 8009592:	d9f4      	bls.n	800957e <_printf_i+0x112>
 8009594:	2b08      	cmp	r3, #8
 8009596:	d10b      	bne.n	80095b0 <_printf_i+0x144>
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	07df      	lsls	r7, r3, #31
 800959c:	d508      	bpl.n	80095b0 <_printf_i+0x144>
 800959e:	6923      	ldr	r3, [r4, #16]
 80095a0:	6861      	ldr	r1, [r4, #4]
 80095a2:	4299      	cmp	r1, r3
 80095a4:	bfde      	ittt	le
 80095a6:	2330      	movle	r3, #48	@ 0x30
 80095a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80095b0:	1b92      	subs	r2, r2, r6
 80095b2:	6122      	str	r2, [r4, #16]
 80095b4:	f8cd a000 	str.w	sl, [sp]
 80095b8:	464b      	mov	r3, r9
 80095ba:	aa03      	add	r2, sp, #12
 80095bc:	4621      	mov	r1, r4
 80095be:	4640      	mov	r0, r8
 80095c0:	f7ff fee6 	bl	8009390 <_printf_common>
 80095c4:	3001      	adds	r0, #1
 80095c6:	d14a      	bne.n	800965e <_printf_i+0x1f2>
 80095c8:	f04f 30ff 	mov.w	r0, #4294967295
 80095cc:	b004      	add	sp, #16
 80095ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	f043 0320 	orr.w	r3, r3, #32
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	4833      	ldr	r0, [pc, #204]	@ (80096a8 <_printf_i+0x23c>)
 80095dc:	2778      	movs	r7, #120	@ 0x78
 80095de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	6831      	ldr	r1, [r6, #0]
 80095e6:	061f      	lsls	r7, r3, #24
 80095e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80095ec:	d402      	bmi.n	80095f4 <_printf_i+0x188>
 80095ee:	065f      	lsls	r7, r3, #25
 80095f0:	bf48      	it	mi
 80095f2:	b2ad      	uxthmi	r5, r5
 80095f4:	6031      	str	r1, [r6, #0]
 80095f6:	07d9      	lsls	r1, r3, #31
 80095f8:	bf44      	itt	mi
 80095fa:	f043 0320 	orrmi.w	r3, r3, #32
 80095fe:	6023      	strmi	r3, [r4, #0]
 8009600:	b11d      	cbz	r5, 800960a <_printf_i+0x19e>
 8009602:	2310      	movs	r3, #16
 8009604:	e7ac      	b.n	8009560 <_printf_i+0xf4>
 8009606:	4827      	ldr	r0, [pc, #156]	@ (80096a4 <_printf_i+0x238>)
 8009608:	e7e9      	b.n	80095de <_printf_i+0x172>
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	f023 0320 	bic.w	r3, r3, #32
 8009610:	6023      	str	r3, [r4, #0]
 8009612:	e7f6      	b.n	8009602 <_printf_i+0x196>
 8009614:	4616      	mov	r6, r2
 8009616:	e7bd      	b.n	8009594 <_printf_i+0x128>
 8009618:	6833      	ldr	r3, [r6, #0]
 800961a:	6825      	ldr	r5, [r4, #0]
 800961c:	6961      	ldr	r1, [r4, #20]
 800961e:	1d18      	adds	r0, r3, #4
 8009620:	6030      	str	r0, [r6, #0]
 8009622:	062e      	lsls	r6, r5, #24
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	d501      	bpl.n	800962c <_printf_i+0x1c0>
 8009628:	6019      	str	r1, [r3, #0]
 800962a:	e002      	b.n	8009632 <_printf_i+0x1c6>
 800962c:	0668      	lsls	r0, r5, #25
 800962e:	d5fb      	bpl.n	8009628 <_printf_i+0x1bc>
 8009630:	8019      	strh	r1, [r3, #0]
 8009632:	2300      	movs	r3, #0
 8009634:	6123      	str	r3, [r4, #16]
 8009636:	4616      	mov	r6, r2
 8009638:	e7bc      	b.n	80095b4 <_printf_i+0x148>
 800963a:	6833      	ldr	r3, [r6, #0]
 800963c:	1d1a      	adds	r2, r3, #4
 800963e:	6032      	str	r2, [r6, #0]
 8009640:	681e      	ldr	r6, [r3, #0]
 8009642:	6862      	ldr	r2, [r4, #4]
 8009644:	2100      	movs	r1, #0
 8009646:	4630      	mov	r0, r6
 8009648:	f7f6 fdea 	bl	8000220 <memchr>
 800964c:	b108      	cbz	r0, 8009652 <_printf_i+0x1e6>
 800964e:	1b80      	subs	r0, r0, r6
 8009650:	6060      	str	r0, [r4, #4]
 8009652:	6863      	ldr	r3, [r4, #4]
 8009654:	6123      	str	r3, [r4, #16]
 8009656:	2300      	movs	r3, #0
 8009658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800965c:	e7aa      	b.n	80095b4 <_printf_i+0x148>
 800965e:	6923      	ldr	r3, [r4, #16]
 8009660:	4632      	mov	r2, r6
 8009662:	4649      	mov	r1, r9
 8009664:	4640      	mov	r0, r8
 8009666:	47d0      	blx	sl
 8009668:	3001      	adds	r0, #1
 800966a:	d0ad      	beq.n	80095c8 <_printf_i+0x15c>
 800966c:	6823      	ldr	r3, [r4, #0]
 800966e:	079b      	lsls	r3, r3, #30
 8009670:	d413      	bmi.n	800969a <_printf_i+0x22e>
 8009672:	68e0      	ldr	r0, [r4, #12]
 8009674:	9b03      	ldr	r3, [sp, #12]
 8009676:	4298      	cmp	r0, r3
 8009678:	bfb8      	it	lt
 800967a:	4618      	movlt	r0, r3
 800967c:	e7a6      	b.n	80095cc <_printf_i+0x160>
 800967e:	2301      	movs	r3, #1
 8009680:	4632      	mov	r2, r6
 8009682:	4649      	mov	r1, r9
 8009684:	4640      	mov	r0, r8
 8009686:	47d0      	blx	sl
 8009688:	3001      	adds	r0, #1
 800968a:	d09d      	beq.n	80095c8 <_printf_i+0x15c>
 800968c:	3501      	adds	r5, #1
 800968e:	68e3      	ldr	r3, [r4, #12]
 8009690:	9903      	ldr	r1, [sp, #12]
 8009692:	1a5b      	subs	r3, r3, r1
 8009694:	42ab      	cmp	r3, r5
 8009696:	dcf2      	bgt.n	800967e <_printf_i+0x212>
 8009698:	e7eb      	b.n	8009672 <_printf_i+0x206>
 800969a:	2500      	movs	r5, #0
 800969c:	f104 0619 	add.w	r6, r4, #25
 80096a0:	e7f5      	b.n	800968e <_printf_i+0x222>
 80096a2:	bf00      	nop
 80096a4:	0800db2a 	.word	0x0800db2a
 80096a8:	0800db3b 	.word	0x0800db3b

080096ac <_scanf_float>:
 80096ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b0:	b087      	sub	sp, #28
 80096b2:	4617      	mov	r7, r2
 80096b4:	9303      	str	r3, [sp, #12]
 80096b6:	688b      	ldr	r3, [r1, #8]
 80096b8:	1e5a      	subs	r2, r3, #1
 80096ba:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80096be:	bf81      	itttt	hi
 80096c0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80096c4:	eb03 0b05 	addhi.w	fp, r3, r5
 80096c8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80096cc:	608b      	strhi	r3, [r1, #8]
 80096ce:	680b      	ldr	r3, [r1, #0]
 80096d0:	460a      	mov	r2, r1
 80096d2:	f04f 0500 	mov.w	r5, #0
 80096d6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80096da:	f842 3b1c 	str.w	r3, [r2], #28
 80096de:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80096e2:	4680      	mov	r8, r0
 80096e4:	460c      	mov	r4, r1
 80096e6:	bf98      	it	ls
 80096e8:	f04f 0b00 	movls.w	fp, #0
 80096ec:	9201      	str	r2, [sp, #4]
 80096ee:	4616      	mov	r6, r2
 80096f0:	46aa      	mov	sl, r5
 80096f2:	46a9      	mov	r9, r5
 80096f4:	9502      	str	r5, [sp, #8]
 80096f6:	68a2      	ldr	r2, [r4, #8]
 80096f8:	b152      	cbz	r2, 8009710 <_scanf_float+0x64>
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	2b4e      	cmp	r3, #78	@ 0x4e
 8009700:	d864      	bhi.n	80097cc <_scanf_float+0x120>
 8009702:	2b40      	cmp	r3, #64	@ 0x40
 8009704:	d83c      	bhi.n	8009780 <_scanf_float+0xd4>
 8009706:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800970a:	b2c8      	uxtb	r0, r1
 800970c:	280e      	cmp	r0, #14
 800970e:	d93a      	bls.n	8009786 <_scanf_float+0xda>
 8009710:	f1b9 0f00 	cmp.w	r9, #0
 8009714:	d003      	beq.n	800971e <_scanf_float+0x72>
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800971c:	6023      	str	r3, [r4, #0]
 800971e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009722:	f1ba 0f01 	cmp.w	sl, #1
 8009726:	f200 8117 	bhi.w	8009958 <_scanf_float+0x2ac>
 800972a:	9b01      	ldr	r3, [sp, #4]
 800972c:	429e      	cmp	r6, r3
 800972e:	f200 8108 	bhi.w	8009942 <_scanf_float+0x296>
 8009732:	2001      	movs	r0, #1
 8009734:	b007      	add	sp, #28
 8009736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800973a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800973e:	2a0d      	cmp	r2, #13
 8009740:	d8e6      	bhi.n	8009710 <_scanf_float+0x64>
 8009742:	a101      	add	r1, pc, #4	@ (adr r1, 8009748 <_scanf_float+0x9c>)
 8009744:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009748:	0800988f 	.word	0x0800988f
 800974c:	08009711 	.word	0x08009711
 8009750:	08009711 	.word	0x08009711
 8009754:	08009711 	.word	0x08009711
 8009758:	080098ef 	.word	0x080098ef
 800975c:	080098c7 	.word	0x080098c7
 8009760:	08009711 	.word	0x08009711
 8009764:	08009711 	.word	0x08009711
 8009768:	0800989d 	.word	0x0800989d
 800976c:	08009711 	.word	0x08009711
 8009770:	08009711 	.word	0x08009711
 8009774:	08009711 	.word	0x08009711
 8009778:	08009711 	.word	0x08009711
 800977c:	08009855 	.word	0x08009855
 8009780:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009784:	e7db      	b.n	800973e <_scanf_float+0x92>
 8009786:	290e      	cmp	r1, #14
 8009788:	d8c2      	bhi.n	8009710 <_scanf_float+0x64>
 800978a:	a001      	add	r0, pc, #4	@ (adr r0, 8009790 <_scanf_float+0xe4>)
 800978c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009790:	08009845 	.word	0x08009845
 8009794:	08009711 	.word	0x08009711
 8009798:	08009845 	.word	0x08009845
 800979c:	080098db 	.word	0x080098db
 80097a0:	08009711 	.word	0x08009711
 80097a4:	080097ed 	.word	0x080097ed
 80097a8:	0800982b 	.word	0x0800982b
 80097ac:	0800982b 	.word	0x0800982b
 80097b0:	0800982b 	.word	0x0800982b
 80097b4:	0800982b 	.word	0x0800982b
 80097b8:	0800982b 	.word	0x0800982b
 80097bc:	0800982b 	.word	0x0800982b
 80097c0:	0800982b 	.word	0x0800982b
 80097c4:	0800982b 	.word	0x0800982b
 80097c8:	0800982b 	.word	0x0800982b
 80097cc:	2b6e      	cmp	r3, #110	@ 0x6e
 80097ce:	d809      	bhi.n	80097e4 <_scanf_float+0x138>
 80097d0:	2b60      	cmp	r3, #96	@ 0x60
 80097d2:	d8b2      	bhi.n	800973a <_scanf_float+0x8e>
 80097d4:	2b54      	cmp	r3, #84	@ 0x54
 80097d6:	d07b      	beq.n	80098d0 <_scanf_float+0x224>
 80097d8:	2b59      	cmp	r3, #89	@ 0x59
 80097da:	d199      	bne.n	8009710 <_scanf_float+0x64>
 80097dc:	2d07      	cmp	r5, #7
 80097de:	d197      	bne.n	8009710 <_scanf_float+0x64>
 80097e0:	2508      	movs	r5, #8
 80097e2:	e02c      	b.n	800983e <_scanf_float+0x192>
 80097e4:	2b74      	cmp	r3, #116	@ 0x74
 80097e6:	d073      	beq.n	80098d0 <_scanf_float+0x224>
 80097e8:	2b79      	cmp	r3, #121	@ 0x79
 80097ea:	e7f6      	b.n	80097da <_scanf_float+0x12e>
 80097ec:	6821      	ldr	r1, [r4, #0]
 80097ee:	05c8      	lsls	r0, r1, #23
 80097f0:	d51b      	bpl.n	800982a <_scanf_float+0x17e>
 80097f2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80097f6:	6021      	str	r1, [r4, #0]
 80097f8:	f109 0901 	add.w	r9, r9, #1
 80097fc:	f1bb 0f00 	cmp.w	fp, #0
 8009800:	d003      	beq.n	800980a <_scanf_float+0x15e>
 8009802:	3201      	adds	r2, #1
 8009804:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009808:	60a2      	str	r2, [r4, #8]
 800980a:	68a3      	ldr	r3, [r4, #8]
 800980c:	3b01      	subs	r3, #1
 800980e:	60a3      	str	r3, [r4, #8]
 8009810:	6923      	ldr	r3, [r4, #16]
 8009812:	3301      	adds	r3, #1
 8009814:	6123      	str	r3, [r4, #16]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	3b01      	subs	r3, #1
 800981a:	2b00      	cmp	r3, #0
 800981c:	607b      	str	r3, [r7, #4]
 800981e:	f340 8087 	ble.w	8009930 <_scanf_float+0x284>
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	3301      	adds	r3, #1
 8009826:	603b      	str	r3, [r7, #0]
 8009828:	e765      	b.n	80096f6 <_scanf_float+0x4a>
 800982a:	eb1a 0105 	adds.w	r1, sl, r5
 800982e:	f47f af6f 	bne.w	8009710 <_scanf_float+0x64>
 8009832:	6822      	ldr	r2, [r4, #0]
 8009834:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009838:	6022      	str	r2, [r4, #0]
 800983a:	460d      	mov	r5, r1
 800983c:	468a      	mov	sl, r1
 800983e:	f806 3b01 	strb.w	r3, [r6], #1
 8009842:	e7e2      	b.n	800980a <_scanf_float+0x15e>
 8009844:	6822      	ldr	r2, [r4, #0]
 8009846:	0610      	lsls	r0, r2, #24
 8009848:	f57f af62 	bpl.w	8009710 <_scanf_float+0x64>
 800984c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009850:	6022      	str	r2, [r4, #0]
 8009852:	e7f4      	b.n	800983e <_scanf_float+0x192>
 8009854:	f1ba 0f00 	cmp.w	sl, #0
 8009858:	d10e      	bne.n	8009878 <_scanf_float+0x1cc>
 800985a:	f1b9 0f00 	cmp.w	r9, #0
 800985e:	d10e      	bne.n	800987e <_scanf_float+0x1d2>
 8009860:	6822      	ldr	r2, [r4, #0]
 8009862:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009866:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800986a:	d108      	bne.n	800987e <_scanf_float+0x1d2>
 800986c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009870:	6022      	str	r2, [r4, #0]
 8009872:	f04f 0a01 	mov.w	sl, #1
 8009876:	e7e2      	b.n	800983e <_scanf_float+0x192>
 8009878:	f1ba 0f02 	cmp.w	sl, #2
 800987c:	d055      	beq.n	800992a <_scanf_float+0x27e>
 800987e:	2d01      	cmp	r5, #1
 8009880:	d002      	beq.n	8009888 <_scanf_float+0x1dc>
 8009882:	2d04      	cmp	r5, #4
 8009884:	f47f af44 	bne.w	8009710 <_scanf_float+0x64>
 8009888:	3501      	adds	r5, #1
 800988a:	b2ed      	uxtb	r5, r5
 800988c:	e7d7      	b.n	800983e <_scanf_float+0x192>
 800988e:	f1ba 0f01 	cmp.w	sl, #1
 8009892:	f47f af3d 	bne.w	8009710 <_scanf_float+0x64>
 8009896:	f04f 0a02 	mov.w	sl, #2
 800989a:	e7d0      	b.n	800983e <_scanf_float+0x192>
 800989c:	b97d      	cbnz	r5, 80098be <_scanf_float+0x212>
 800989e:	f1b9 0f00 	cmp.w	r9, #0
 80098a2:	f47f af38 	bne.w	8009716 <_scanf_float+0x6a>
 80098a6:	6822      	ldr	r2, [r4, #0]
 80098a8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80098ac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80098b0:	f040 8108 	bne.w	8009ac4 <_scanf_float+0x418>
 80098b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80098b8:	6022      	str	r2, [r4, #0]
 80098ba:	2501      	movs	r5, #1
 80098bc:	e7bf      	b.n	800983e <_scanf_float+0x192>
 80098be:	2d03      	cmp	r5, #3
 80098c0:	d0e2      	beq.n	8009888 <_scanf_float+0x1dc>
 80098c2:	2d05      	cmp	r5, #5
 80098c4:	e7de      	b.n	8009884 <_scanf_float+0x1d8>
 80098c6:	2d02      	cmp	r5, #2
 80098c8:	f47f af22 	bne.w	8009710 <_scanf_float+0x64>
 80098cc:	2503      	movs	r5, #3
 80098ce:	e7b6      	b.n	800983e <_scanf_float+0x192>
 80098d0:	2d06      	cmp	r5, #6
 80098d2:	f47f af1d 	bne.w	8009710 <_scanf_float+0x64>
 80098d6:	2507      	movs	r5, #7
 80098d8:	e7b1      	b.n	800983e <_scanf_float+0x192>
 80098da:	6822      	ldr	r2, [r4, #0]
 80098dc:	0591      	lsls	r1, r2, #22
 80098de:	f57f af17 	bpl.w	8009710 <_scanf_float+0x64>
 80098e2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80098e6:	6022      	str	r2, [r4, #0]
 80098e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80098ec:	e7a7      	b.n	800983e <_scanf_float+0x192>
 80098ee:	6822      	ldr	r2, [r4, #0]
 80098f0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80098f4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80098f8:	d006      	beq.n	8009908 <_scanf_float+0x25c>
 80098fa:	0550      	lsls	r0, r2, #21
 80098fc:	f57f af08 	bpl.w	8009710 <_scanf_float+0x64>
 8009900:	f1b9 0f00 	cmp.w	r9, #0
 8009904:	f000 80de 	beq.w	8009ac4 <_scanf_float+0x418>
 8009908:	0591      	lsls	r1, r2, #22
 800990a:	bf58      	it	pl
 800990c:	9902      	ldrpl	r1, [sp, #8]
 800990e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009912:	bf58      	it	pl
 8009914:	eba9 0101 	subpl.w	r1, r9, r1
 8009918:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800991c:	bf58      	it	pl
 800991e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009922:	6022      	str	r2, [r4, #0]
 8009924:	f04f 0900 	mov.w	r9, #0
 8009928:	e789      	b.n	800983e <_scanf_float+0x192>
 800992a:	f04f 0a03 	mov.w	sl, #3
 800992e:	e786      	b.n	800983e <_scanf_float+0x192>
 8009930:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009934:	4639      	mov	r1, r7
 8009936:	4640      	mov	r0, r8
 8009938:	4798      	blx	r3
 800993a:	2800      	cmp	r0, #0
 800993c:	f43f aedb 	beq.w	80096f6 <_scanf_float+0x4a>
 8009940:	e6e6      	b.n	8009710 <_scanf_float+0x64>
 8009942:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009946:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800994a:	463a      	mov	r2, r7
 800994c:	4640      	mov	r0, r8
 800994e:	4798      	blx	r3
 8009950:	6923      	ldr	r3, [r4, #16]
 8009952:	3b01      	subs	r3, #1
 8009954:	6123      	str	r3, [r4, #16]
 8009956:	e6e8      	b.n	800972a <_scanf_float+0x7e>
 8009958:	1e6b      	subs	r3, r5, #1
 800995a:	2b06      	cmp	r3, #6
 800995c:	d824      	bhi.n	80099a8 <_scanf_float+0x2fc>
 800995e:	2d02      	cmp	r5, #2
 8009960:	d836      	bhi.n	80099d0 <_scanf_float+0x324>
 8009962:	9b01      	ldr	r3, [sp, #4]
 8009964:	429e      	cmp	r6, r3
 8009966:	f67f aee4 	bls.w	8009732 <_scanf_float+0x86>
 800996a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800996e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009972:	463a      	mov	r2, r7
 8009974:	4640      	mov	r0, r8
 8009976:	4798      	blx	r3
 8009978:	6923      	ldr	r3, [r4, #16]
 800997a:	3b01      	subs	r3, #1
 800997c:	6123      	str	r3, [r4, #16]
 800997e:	e7f0      	b.n	8009962 <_scanf_float+0x2b6>
 8009980:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009984:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009988:	463a      	mov	r2, r7
 800998a:	4640      	mov	r0, r8
 800998c:	4798      	blx	r3
 800998e:	6923      	ldr	r3, [r4, #16]
 8009990:	3b01      	subs	r3, #1
 8009992:	6123      	str	r3, [r4, #16]
 8009994:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009998:	fa5f fa8a 	uxtb.w	sl, sl
 800999c:	f1ba 0f02 	cmp.w	sl, #2
 80099a0:	d1ee      	bne.n	8009980 <_scanf_float+0x2d4>
 80099a2:	3d03      	subs	r5, #3
 80099a4:	b2ed      	uxtb	r5, r5
 80099a6:	1b76      	subs	r6, r6, r5
 80099a8:	6823      	ldr	r3, [r4, #0]
 80099aa:	05da      	lsls	r2, r3, #23
 80099ac:	d530      	bpl.n	8009a10 <_scanf_float+0x364>
 80099ae:	055b      	lsls	r3, r3, #21
 80099b0:	d511      	bpl.n	80099d6 <_scanf_float+0x32a>
 80099b2:	9b01      	ldr	r3, [sp, #4]
 80099b4:	429e      	cmp	r6, r3
 80099b6:	f67f aebc 	bls.w	8009732 <_scanf_float+0x86>
 80099ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099c2:	463a      	mov	r2, r7
 80099c4:	4640      	mov	r0, r8
 80099c6:	4798      	blx	r3
 80099c8:	6923      	ldr	r3, [r4, #16]
 80099ca:	3b01      	subs	r3, #1
 80099cc:	6123      	str	r3, [r4, #16]
 80099ce:	e7f0      	b.n	80099b2 <_scanf_float+0x306>
 80099d0:	46aa      	mov	sl, r5
 80099d2:	46b3      	mov	fp, r6
 80099d4:	e7de      	b.n	8009994 <_scanf_float+0x2e8>
 80099d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80099da:	6923      	ldr	r3, [r4, #16]
 80099dc:	2965      	cmp	r1, #101	@ 0x65
 80099de:	f103 33ff 	add.w	r3, r3, #4294967295
 80099e2:	f106 35ff 	add.w	r5, r6, #4294967295
 80099e6:	6123      	str	r3, [r4, #16]
 80099e8:	d00c      	beq.n	8009a04 <_scanf_float+0x358>
 80099ea:	2945      	cmp	r1, #69	@ 0x45
 80099ec:	d00a      	beq.n	8009a04 <_scanf_float+0x358>
 80099ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099f2:	463a      	mov	r2, r7
 80099f4:	4640      	mov	r0, r8
 80099f6:	4798      	blx	r3
 80099f8:	6923      	ldr	r3, [r4, #16]
 80099fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80099fe:	3b01      	subs	r3, #1
 8009a00:	1eb5      	subs	r5, r6, #2
 8009a02:	6123      	str	r3, [r4, #16]
 8009a04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a08:	463a      	mov	r2, r7
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	4798      	blx	r3
 8009a0e:	462e      	mov	r6, r5
 8009a10:	6822      	ldr	r2, [r4, #0]
 8009a12:	f012 0210 	ands.w	r2, r2, #16
 8009a16:	d001      	beq.n	8009a1c <_scanf_float+0x370>
 8009a18:	2000      	movs	r0, #0
 8009a1a:	e68b      	b.n	8009734 <_scanf_float+0x88>
 8009a1c:	7032      	strb	r2, [r6, #0]
 8009a1e:	6823      	ldr	r3, [r4, #0]
 8009a20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009a24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a28:	d11c      	bne.n	8009a64 <_scanf_float+0x3b8>
 8009a2a:	9b02      	ldr	r3, [sp, #8]
 8009a2c:	454b      	cmp	r3, r9
 8009a2e:	eba3 0209 	sub.w	r2, r3, r9
 8009a32:	d123      	bne.n	8009a7c <_scanf_float+0x3d0>
 8009a34:	9901      	ldr	r1, [sp, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	4640      	mov	r0, r8
 8009a3a:	f002 fd3d 	bl	800c4b8 <_strtod_r>
 8009a3e:	9b03      	ldr	r3, [sp, #12]
 8009a40:	6821      	ldr	r1, [r4, #0]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f011 0f02 	tst.w	r1, #2
 8009a48:	ec57 6b10 	vmov	r6, r7, d0
 8009a4c:	f103 0204 	add.w	r2, r3, #4
 8009a50:	d01f      	beq.n	8009a92 <_scanf_float+0x3e6>
 8009a52:	9903      	ldr	r1, [sp, #12]
 8009a54:	600a      	str	r2, [r1, #0]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	e9c3 6700 	strd	r6, r7, [r3]
 8009a5c:	68e3      	ldr	r3, [r4, #12]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	60e3      	str	r3, [r4, #12]
 8009a62:	e7d9      	b.n	8009a18 <_scanf_float+0x36c>
 8009a64:	9b04      	ldr	r3, [sp, #16]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d0e4      	beq.n	8009a34 <_scanf_float+0x388>
 8009a6a:	9905      	ldr	r1, [sp, #20]
 8009a6c:	230a      	movs	r3, #10
 8009a6e:	3101      	adds	r1, #1
 8009a70:	4640      	mov	r0, r8
 8009a72:	f002 fda1 	bl	800c5b8 <_strtol_r>
 8009a76:	9b04      	ldr	r3, [sp, #16]
 8009a78:	9e05      	ldr	r6, [sp, #20]
 8009a7a:	1ac2      	subs	r2, r0, r3
 8009a7c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009a80:	429e      	cmp	r6, r3
 8009a82:	bf28      	it	cs
 8009a84:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009a88:	4910      	ldr	r1, [pc, #64]	@ (8009acc <_scanf_float+0x420>)
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	f000 f988 	bl	8009da0 <siprintf>
 8009a90:	e7d0      	b.n	8009a34 <_scanf_float+0x388>
 8009a92:	f011 0f04 	tst.w	r1, #4
 8009a96:	9903      	ldr	r1, [sp, #12]
 8009a98:	600a      	str	r2, [r1, #0]
 8009a9a:	d1dc      	bne.n	8009a56 <_scanf_float+0x3aa>
 8009a9c:	681d      	ldr	r5, [r3, #0]
 8009a9e:	4632      	mov	r2, r6
 8009aa0:	463b      	mov	r3, r7
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	4639      	mov	r1, r7
 8009aa6:	f7f7 f869 	bl	8000b7c <__aeabi_dcmpun>
 8009aaa:	b128      	cbz	r0, 8009ab8 <_scanf_float+0x40c>
 8009aac:	4808      	ldr	r0, [pc, #32]	@ (8009ad0 <_scanf_float+0x424>)
 8009aae:	f000 fafd 	bl	800a0ac <nanf>
 8009ab2:	ed85 0a00 	vstr	s0, [r5]
 8009ab6:	e7d1      	b.n	8009a5c <_scanf_float+0x3b0>
 8009ab8:	4630      	mov	r0, r6
 8009aba:	4639      	mov	r1, r7
 8009abc:	f7f7 f8bc 	bl	8000c38 <__aeabi_d2f>
 8009ac0:	6028      	str	r0, [r5, #0]
 8009ac2:	e7cb      	b.n	8009a5c <_scanf_float+0x3b0>
 8009ac4:	f04f 0900 	mov.w	r9, #0
 8009ac8:	e629      	b.n	800971e <_scanf_float+0x72>
 8009aca:	bf00      	nop
 8009acc:	0800db4c 	.word	0x0800db4c
 8009ad0:	0800dee5 	.word	0x0800dee5

08009ad4 <std>:
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	b510      	push	{r4, lr}
 8009ad8:	4604      	mov	r4, r0
 8009ada:	e9c0 3300 	strd	r3, r3, [r0]
 8009ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ae2:	6083      	str	r3, [r0, #8]
 8009ae4:	8181      	strh	r1, [r0, #12]
 8009ae6:	6643      	str	r3, [r0, #100]	@ 0x64
 8009ae8:	81c2      	strh	r2, [r0, #14]
 8009aea:	6183      	str	r3, [r0, #24]
 8009aec:	4619      	mov	r1, r3
 8009aee:	2208      	movs	r2, #8
 8009af0:	305c      	adds	r0, #92	@ 0x5c
 8009af2:	f000 fa4d 	bl	8009f90 <memset>
 8009af6:	4b0d      	ldr	r3, [pc, #52]	@ (8009b2c <std+0x58>)
 8009af8:	6263      	str	r3, [r4, #36]	@ 0x24
 8009afa:	4b0d      	ldr	r3, [pc, #52]	@ (8009b30 <std+0x5c>)
 8009afc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009afe:	4b0d      	ldr	r3, [pc, #52]	@ (8009b34 <std+0x60>)
 8009b00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009b02:	4b0d      	ldr	r3, [pc, #52]	@ (8009b38 <std+0x64>)
 8009b04:	6323      	str	r3, [r4, #48]	@ 0x30
 8009b06:	4b0d      	ldr	r3, [pc, #52]	@ (8009b3c <std+0x68>)
 8009b08:	6224      	str	r4, [r4, #32]
 8009b0a:	429c      	cmp	r4, r3
 8009b0c:	d006      	beq.n	8009b1c <std+0x48>
 8009b0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009b12:	4294      	cmp	r4, r2
 8009b14:	d002      	beq.n	8009b1c <std+0x48>
 8009b16:	33d0      	adds	r3, #208	@ 0xd0
 8009b18:	429c      	cmp	r4, r3
 8009b1a:	d105      	bne.n	8009b28 <std+0x54>
 8009b1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b24:	f000 bab0 	b.w	800a088 <__retarget_lock_init_recursive>
 8009b28:	bd10      	pop	{r4, pc}
 8009b2a:	bf00      	nop
 8009b2c:	08009de1 	.word	0x08009de1
 8009b30:	08009e03 	.word	0x08009e03
 8009b34:	08009e3b 	.word	0x08009e3b
 8009b38:	08009e5f 	.word	0x08009e5f
 8009b3c:	20000f04 	.word	0x20000f04

08009b40 <stdio_exit_handler>:
 8009b40:	4a02      	ldr	r2, [pc, #8]	@ (8009b4c <stdio_exit_handler+0xc>)
 8009b42:	4903      	ldr	r1, [pc, #12]	@ (8009b50 <stdio_exit_handler+0x10>)
 8009b44:	4803      	ldr	r0, [pc, #12]	@ (8009b54 <stdio_exit_handler+0x14>)
 8009b46:	f000 b869 	b.w	8009c1c <_fwalk_sglue>
 8009b4a:	bf00      	nop
 8009b4c:	2000000c 	.word	0x2000000c
 8009b50:	0800cbf9 	.word	0x0800cbf9
 8009b54:	2000001c 	.word	0x2000001c

08009b58 <cleanup_stdio>:
 8009b58:	6841      	ldr	r1, [r0, #4]
 8009b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8009b8c <cleanup_stdio+0x34>)
 8009b5c:	4299      	cmp	r1, r3
 8009b5e:	b510      	push	{r4, lr}
 8009b60:	4604      	mov	r4, r0
 8009b62:	d001      	beq.n	8009b68 <cleanup_stdio+0x10>
 8009b64:	f003 f848 	bl	800cbf8 <_fflush_r>
 8009b68:	68a1      	ldr	r1, [r4, #8]
 8009b6a:	4b09      	ldr	r3, [pc, #36]	@ (8009b90 <cleanup_stdio+0x38>)
 8009b6c:	4299      	cmp	r1, r3
 8009b6e:	d002      	beq.n	8009b76 <cleanup_stdio+0x1e>
 8009b70:	4620      	mov	r0, r4
 8009b72:	f003 f841 	bl	800cbf8 <_fflush_r>
 8009b76:	68e1      	ldr	r1, [r4, #12]
 8009b78:	4b06      	ldr	r3, [pc, #24]	@ (8009b94 <cleanup_stdio+0x3c>)
 8009b7a:	4299      	cmp	r1, r3
 8009b7c:	d004      	beq.n	8009b88 <cleanup_stdio+0x30>
 8009b7e:	4620      	mov	r0, r4
 8009b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b84:	f003 b838 	b.w	800cbf8 <_fflush_r>
 8009b88:	bd10      	pop	{r4, pc}
 8009b8a:	bf00      	nop
 8009b8c:	20000f04 	.word	0x20000f04
 8009b90:	20000f6c 	.word	0x20000f6c
 8009b94:	20000fd4 	.word	0x20000fd4

08009b98 <global_stdio_init.part.0>:
 8009b98:	b510      	push	{r4, lr}
 8009b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8009bc8 <global_stdio_init.part.0+0x30>)
 8009b9c:	4c0b      	ldr	r4, [pc, #44]	@ (8009bcc <global_stdio_init.part.0+0x34>)
 8009b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8009bd0 <global_stdio_init.part.0+0x38>)
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	2104      	movs	r1, #4
 8009ba8:	f7ff ff94 	bl	8009ad4 <std>
 8009bac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	2109      	movs	r1, #9
 8009bb4:	f7ff ff8e 	bl	8009ad4 <std>
 8009bb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009bbc:	2202      	movs	r2, #2
 8009bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bc2:	2112      	movs	r1, #18
 8009bc4:	f7ff bf86 	b.w	8009ad4 <std>
 8009bc8:	2000103c 	.word	0x2000103c
 8009bcc:	20000f04 	.word	0x20000f04
 8009bd0:	08009b41 	.word	0x08009b41

08009bd4 <__sfp_lock_acquire>:
 8009bd4:	4801      	ldr	r0, [pc, #4]	@ (8009bdc <__sfp_lock_acquire+0x8>)
 8009bd6:	f000 ba58 	b.w	800a08a <__retarget_lock_acquire_recursive>
 8009bda:	bf00      	nop
 8009bdc:	20001045 	.word	0x20001045

08009be0 <__sfp_lock_release>:
 8009be0:	4801      	ldr	r0, [pc, #4]	@ (8009be8 <__sfp_lock_release+0x8>)
 8009be2:	f000 ba53 	b.w	800a08c <__retarget_lock_release_recursive>
 8009be6:	bf00      	nop
 8009be8:	20001045 	.word	0x20001045

08009bec <__sinit>:
 8009bec:	b510      	push	{r4, lr}
 8009bee:	4604      	mov	r4, r0
 8009bf0:	f7ff fff0 	bl	8009bd4 <__sfp_lock_acquire>
 8009bf4:	6a23      	ldr	r3, [r4, #32]
 8009bf6:	b11b      	cbz	r3, 8009c00 <__sinit+0x14>
 8009bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bfc:	f7ff bff0 	b.w	8009be0 <__sfp_lock_release>
 8009c00:	4b04      	ldr	r3, [pc, #16]	@ (8009c14 <__sinit+0x28>)
 8009c02:	6223      	str	r3, [r4, #32]
 8009c04:	4b04      	ldr	r3, [pc, #16]	@ (8009c18 <__sinit+0x2c>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1f5      	bne.n	8009bf8 <__sinit+0xc>
 8009c0c:	f7ff ffc4 	bl	8009b98 <global_stdio_init.part.0>
 8009c10:	e7f2      	b.n	8009bf8 <__sinit+0xc>
 8009c12:	bf00      	nop
 8009c14:	08009b59 	.word	0x08009b59
 8009c18:	2000103c 	.word	0x2000103c

08009c1c <_fwalk_sglue>:
 8009c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c20:	4607      	mov	r7, r0
 8009c22:	4688      	mov	r8, r1
 8009c24:	4614      	mov	r4, r2
 8009c26:	2600      	movs	r6, #0
 8009c28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c2c:	f1b9 0901 	subs.w	r9, r9, #1
 8009c30:	d505      	bpl.n	8009c3e <_fwalk_sglue+0x22>
 8009c32:	6824      	ldr	r4, [r4, #0]
 8009c34:	2c00      	cmp	r4, #0
 8009c36:	d1f7      	bne.n	8009c28 <_fwalk_sglue+0xc>
 8009c38:	4630      	mov	r0, r6
 8009c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c3e:	89ab      	ldrh	r3, [r5, #12]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d907      	bls.n	8009c54 <_fwalk_sglue+0x38>
 8009c44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c48:	3301      	adds	r3, #1
 8009c4a:	d003      	beq.n	8009c54 <_fwalk_sglue+0x38>
 8009c4c:	4629      	mov	r1, r5
 8009c4e:	4638      	mov	r0, r7
 8009c50:	47c0      	blx	r8
 8009c52:	4306      	orrs	r6, r0
 8009c54:	3568      	adds	r5, #104	@ 0x68
 8009c56:	e7e9      	b.n	8009c2c <_fwalk_sglue+0x10>

08009c58 <iprintf>:
 8009c58:	b40f      	push	{r0, r1, r2, r3}
 8009c5a:	b507      	push	{r0, r1, r2, lr}
 8009c5c:	4906      	ldr	r1, [pc, #24]	@ (8009c78 <iprintf+0x20>)
 8009c5e:	ab04      	add	r3, sp, #16
 8009c60:	6808      	ldr	r0, [r1, #0]
 8009c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c66:	6881      	ldr	r1, [r0, #8]
 8009c68:	9301      	str	r3, [sp, #4]
 8009c6a:	f002 fe29 	bl	800c8c0 <_vfiprintf_r>
 8009c6e:	b003      	add	sp, #12
 8009c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c74:	b004      	add	sp, #16
 8009c76:	4770      	bx	lr
 8009c78:	20000018 	.word	0x20000018

08009c7c <_puts_r>:
 8009c7c:	6a03      	ldr	r3, [r0, #32]
 8009c7e:	b570      	push	{r4, r5, r6, lr}
 8009c80:	6884      	ldr	r4, [r0, #8]
 8009c82:	4605      	mov	r5, r0
 8009c84:	460e      	mov	r6, r1
 8009c86:	b90b      	cbnz	r3, 8009c8c <_puts_r+0x10>
 8009c88:	f7ff ffb0 	bl	8009bec <__sinit>
 8009c8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c8e:	07db      	lsls	r3, r3, #31
 8009c90:	d405      	bmi.n	8009c9e <_puts_r+0x22>
 8009c92:	89a3      	ldrh	r3, [r4, #12]
 8009c94:	0598      	lsls	r0, r3, #22
 8009c96:	d402      	bmi.n	8009c9e <_puts_r+0x22>
 8009c98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c9a:	f000 f9f6 	bl	800a08a <__retarget_lock_acquire_recursive>
 8009c9e:	89a3      	ldrh	r3, [r4, #12]
 8009ca0:	0719      	lsls	r1, r3, #28
 8009ca2:	d502      	bpl.n	8009caa <_puts_r+0x2e>
 8009ca4:	6923      	ldr	r3, [r4, #16]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d135      	bne.n	8009d16 <_puts_r+0x9a>
 8009caa:	4621      	mov	r1, r4
 8009cac:	4628      	mov	r0, r5
 8009cae:	f000 f919 	bl	8009ee4 <__swsetup_r>
 8009cb2:	b380      	cbz	r0, 8009d16 <_puts_r+0x9a>
 8009cb4:	f04f 35ff 	mov.w	r5, #4294967295
 8009cb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009cba:	07da      	lsls	r2, r3, #31
 8009cbc:	d405      	bmi.n	8009cca <_puts_r+0x4e>
 8009cbe:	89a3      	ldrh	r3, [r4, #12]
 8009cc0:	059b      	lsls	r3, r3, #22
 8009cc2:	d402      	bmi.n	8009cca <_puts_r+0x4e>
 8009cc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cc6:	f000 f9e1 	bl	800a08c <__retarget_lock_release_recursive>
 8009cca:	4628      	mov	r0, r5
 8009ccc:	bd70      	pop	{r4, r5, r6, pc}
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	da04      	bge.n	8009cdc <_puts_r+0x60>
 8009cd2:	69a2      	ldr	r2, [r4, #24]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	dc17      	bgt.n	8009d08 <_puts_r+0x8c>
 8009cd8:	290a      	cmp	r1, #10
 8009cda:	d015      	beq.n	8009d08 <_puts_r+0x8c>
 8009cdc:	6823      	ldr	r3, [r4, #0]
 8009cde:	1c5a      	adds	r2, r3, #1
 8009ce0:	6022      	str	r2, [r4, #0]
 8009ce2:	7019      	strb	r1, [r3, #0]
 8009ce4:	68a3      	ldr	r3, [r4, #8]
 8009ce6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009cea:	3b01      	subs	r3, #1
 8009cec:	60a3      	str	r3, [r4, #8]
 8009cee:	2900      	cmp	r1, #0
 8009cf0:	d1ed      	bne.n	8009cce <_puts_r+0x52>
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	da11      	bge.n	8009d1a <_puts_r+0x9e>
 8009cf6:	4622      	mov	r2, r4
 8009cf8:	210a      	movs	r1, #10
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	f000 f8b3 	bl	8009e66 <__swbuf_r>
 8009d00:	3001      	adds	r0, #1
 8009d02:	d0d7      	beq.n	8009cb4 <_puts_r+0x38>
 8009d04:	250a      	movs	r5, #10
 8009d06:	e7d7      	b.n	8009cb8 <_puts_r+0x3c>
 8009d08:	4622      	mov	r2, r4
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	f000 f8ab 	bl	8009e66 <__swbuf_r>
 8009d10:	3001      	adds	r0, #1
 8009d12:	d1e7      	bne.n	8009ce4 <_puts_r+0x68>
 8009d14:	e7ce      	b.n	8009cb4 <_puts_r+0x38>
 8009d16:	3e01      	subs	r6, #1
 8009d18:	e7e4      	b.n	8009ce4 <_puts_r+0x68>
 8009d1a:	6823      	ldr	r3, [r4, #0]
 8009d1c:	1c5a      	adds	r2, r3, #1
 8009d1e:	6022      	str	r2, [r4, #0]
 8009d20:	220a      	movs	r2, #10
 8009d22:	701a      	strb	r2, [r3, #0]
 8009d24:	e7ee      	b.n	8009d04 <_puts_r+0x88>
	...

08009d28 <puts>:
 8009d28:	4b02      	ldr	r3, [pc, #8]	@ (8009d34 <puts+0xc>)
 8009d2a:	4601      	mov	r1, r0
 8009d2c:	6818      	ldr	r0, [r3, #0]
 8009d2e:	f7ff bfa5 	b.w	8009c7c <_puts_r>
 8009d32:	bf00      	nop
 8009d34:	20000018 	.word	0x20000018

08009d38 <sniprintf>:
 8009d38:	b40c      	push	{r2, r3}
 8009d3a:	b530      	push	{r4, r5, lr}
 8009d3c:	4b17      	ldr	r3, [pc, #92]	@ (8009d9c <sniprintf+0x64>)
 8009d3e:	1e0c      	subs	r4, r1, #0
 8009d40:	681d      	ldr	r5, [r3, #0]
 8009d42:	b09d      	sub	sp, #116	@ 0x74
 8009d44:	da08      	bge.n	8009d58 <sniprintf+0x20>
 8009d46:	238b      	movs	r3, #139	@ 0x8b
 8009d48:	602b      	str	r3, [r5, #0]
 8009d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d4e:	b01d      	add	sp, #116	@ 0x74
 8009d50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d54:	b002      	add	sp, #8
 8009d56:	4770      	bx	lr
 8009d58:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009d5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009d60:	bf14      	ite	ne
 8009d62:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009d66:	4623      	moveq	r3, r4
 8009d68:	9304      	str	r3, [sp, #16]
 8009d6a:	9307      	str	r3, [sp, #28]
 8009d6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009d70:	9002      	str	r0, [sp, #8]
 8009d72:	9006      	str	r0, [sp, #24]
 8009d74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009d78:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009d7a:	ab21      	add	r3, sp, #132	@ 0x84
 8009d7c:	a902      	add	r1, sp, #8
 8009d7e:	4628      	mov	r0, r5
 8009d80:	9301      	str	r3, [sp, #4]
 8009d82:	f002 fc77 	bl	800c674 <_svfiprintf_r>
 8009d86:	1c43      	adds	r3, r0, #1
 8009d88:	bfbc      	itt	lt
 8009d8a:	238b      	movlt	r3, #139	@ 0x8b
 8009d8c:	602b      	strlt	r3, [r5, #0]
 8009d8e:	2c00      	cmp	r4, #0
 8009d90:	d0dd      	beq.n	8009d4e <sniprintf+0x16>
 8009d92:	9b02      	ldr	r3, [sp, #8]
 8009d94:	2200      	movs	r2, #0
 8009d96:	701a      	strb	r2, [r3, #0]
 8009d98:	e7d9      	b.n	8009d4e <sniprintf+0x16>
 8009d9a:	bf00      	nop
 8009d9c:	20000018 	.word	0x20000018

08009da0 <siprintf>:
 8009da0:	b40e      	push	{r1, r2, r3}
 8009da2:	b500      	push	{lr}
 8009da4:	b09c      	sub	sp, #112	@ 0x70
 8009da6:	ab1d      	add	r3, sp, #116	@ 0x74
 8009da8:	9002      	str	r0, [sp, #8]
 8009daa:	9006      	str	r0, [sp, #24]
 8009dac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009db0:	4809      	ldr	r0, [pc, #36]	@ (8009dd8 <siprintf+0x38>)
 8009db2:	9107      	str	r1, [sp, #28]
 8009db4:	9104      	str	r1, [sp, #16]
 8009db6:	4909      	ldr	r1, [pc, #36]	@ (8009ddc <siprintf+0x3c>)
 8009db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dbc:	9105      	str	r1, [sp, #20]
 8009dbe:	6800      	ldr	r0, [r0, #0]
 8009dc0:	9301      	str	r3, [sp, #4]
 8009dc2:	a902      	add	r1, sp, #8
 8009dc4:	f002 fc56 	bl	800c674 <_svfiprintf_r>
 8009dc8:	9b02      	ldr	r3, [sp, #8]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	701a      	strb	r2, [r3, #0]
 8009dce:	b01c      	add	sp, #112	@ 0x70
 8009dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dd4:	b003      	add	sp, #12
 8009dd6:	4770      	bx	lr
 8009dd8:	20000018 	.word	0x20000018
 8009ddc:	ffff0208 	.word	0xffff0208

08009de0 <__sread>:
 8009de0:	b510      	push	{r4, lr}
 8009de2:	460c      	mov	r4, r1
 8009de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de8:	f000 f900 	bl	8009fec <_read_r>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	bfab      	itete	ge
 8009df0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009df2:	89a3      	ldrhlt	r3, [r4, #12]
 8009df4:	181b      	addge	r3, r3, r0
 8009df6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009dfa:	bfac      	ite	ge
 8009dfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009dfe:	81a3      	strhlt	r3, [r4, #12]
 8009e00:	bd10      	pop	{r4, pc}

08009e02 <__swrite>:
 8009e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e06:	461f      	mov	r7, r3
 8009e08:	898b      	ldrh	r3, [r1, #12]
 8009e0a:	05db      	lsls	r3, r3, #23
 8009e0c:	4605      	mov	r5, r0
 8009e0e:	460c      	mov	r4, r1
 8009e10:	4616      	mov	r6, r2
 8009e12:	d505      	bpl.n	8009e20 <__swrite+0x1e>
 8009e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e18:	2302      	movs	r3, #2
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f000 f8d4 	bl	8009fc8 <_lseek_r>
 8009e20:	89a3      	ldrh	r3, [r4, #12]
 8009e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e2a:	81a3      	strh	r3, [r4, #12]
 8009e2c:	4632      	mov	r2, r6
 8009e2e:	463b      	mov	r3, r7
 8009e30:	4628      	mov	r0, r5
 8009e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e36:	f000 b8eb 	b.w	800a010 <_write_r>

08009e3a <__sseek>:
 8009e3a:	b510      	push	{r4, lr}
 8009e3c:	460c      	mov	r4, r1
 8009e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e42:	f000 f8c1 	bl	8009fc8 <_lseek_r>
 8009e46:	1c43      	adds	r3, r0, #1
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	bf15      	itete	ne
 8009e4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e56:	81a3      	strheq	r3, [r4, #12]
 8009e58:	bf18      	it	ne
 8009e5a:	81a3      	strhne	r3, [r4, #12]
 8009e5c:	bd10      	pop	{r4, pc}

08009e5e <__sclose>:
 8009e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e62:	f000 b8a1 	b.w	8009fa8 <_close_r>

08009e66 <__swbuf_r>:
 8009e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e68:	460e      	mov	r6, r1
 8009e6a:	4614      	mov	r4, r2
 8009e6c:	4605      	mov	r5, r0
 8009e6e:	b118      	cbz	r0, 8009e78 <__swbuf_r+0x12>
 8009e70:	6a03      	ldr	r3, [r0, #32]
 8009e72:	b90b      	cbnz	r3, 8009e78 <__swbuf_r+0x12>
 8009e74:	f7ff feba 	bl	8009bec <__sinit>
 8009e78:	69a3      	ldr	r3, [r4, #24]
 8009e7a:	60a3      	str	r3, [r4, #8]
 8009e7c:	89a3      	ldrh	r3, [r4, #12]
 8009e7e:	071a      	lsls	r2, r3, #28
 8009e80:	d501      	bpl.n	8009e86 <__swbuf_r+0x20>
 8009e82:	6923      	ldr	r3, [r4, #16]
 8009e84:	b943      	cbnz	r3, 8009e98 <__swbuf_r+0x32>
 8009e86:	4621      	mov	r1, r4
 8009e88:	4628      	mov	r0, r5
 8009e8a:	f000 f82b 	bl	8009ee4 <__swsetup_r>
 8009e8e:	b118      	cbz	r0, 8009e98 <__swbuf_r+0x32>
 8009e90:	f04f 37ff 	mov.w	r7, #4294967295
 8009e94:	4638      	mov	r0, r7
 8009e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e98:	6823      	ldr	r3, [r4, #0]
 8009e9a:	6922      	ldr	r2, [r4, #16]
 8009e9c:	1a98      	subs	r0, r3, r2
 8009e9e:	6963      	ldr	r3, [r4, #20]
 8009ea0:	b2f6      	uxtb	r6, r6
 8009ea2:	4283      	cmp	r3, r0
 8009ea4:	4637      	mov	r7, r6
 8009ea6:	dc05      	bgt.n	8009eb4 <__swbuf_r+0x4e>
 8009ea8:	4621      	mov	r1, r4
 8009eaa:	4628      	mov	r0, r5
 8009eac:	f002 fea4 	bl	800cbf8 <_fflush_r>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d1ed      	bne.n	8009e90 <__swbuf_r+0x2a>
 8009eb4:	68a3      	ldr	r3, [r4, #8]
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	60a3      	str	r3, [r4, #8]
 8009eba:	6823      	ldr	r3, [r4, #0]
 8009ebc:	1c5a      	adds	r2, r3, #1
 8009ebe:	6022      	str	r2, [r4, #0]
 8009ec0:	701e      	strb	r6, [r3, #0]
 8009ec2:	6962      	ldr	r2, [r4, #20]
 8009ec4:	1c43      	adds	r3, r0, #1
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d004      	beq.n	8009ed4 <__swbuf_r+0x6e>
 8009eca:	89a3      	ldrh	r3, [r4, #12]
 8009ecc:	07db      	lsls	r3, r3, #31
 8009ece:	d5e1      	bpl.n	8009e94 <__swbuf_r+0x2e>
 8009ed0:	2e0a      	cmp	r6, #10
 8009ed2:	d1df      	bne.n	8009e94 <__swbuf_r+0x2e>
 8009ed4:	4621      	mov	r1, r4
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	f002 fe8e 	bl	800cbf8 <_fflush_r>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d0d9      	beq.n	8009e94 <__swbuf_r+0x2e>
 8009ee0:	e7d6      	b.n	8009e90 <__swbuf_r+0x2a>
	...

08009ee4 <__swsetup_r>:
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	4b29      	ldr	r3, [pc, #164]	@ (8009f8c <__swsetup_r+0xa8>)
 8009ee8:	4605      	mov	r5, r0
 8009eea:	6818      	ldr	r0, [r3, #0]
 8009eec:	460c      	mov	r4, r1
 8009eee:	b118      	cbz	r0, 8009ef8 <__swsetup_r+0x14>
 8009ef0:	6a03      	ldr	r3, [r0, #32]
 8009ef2:	b90b      	cbnz	r3, 8009ef8 <__swsetup_r+0x14>
 8009ef4:	f7ff fe7a 	bl	8009bec <__sinit>
 8009ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009efc:	0719      	lsls	r1, r3, #28
 8009efe:	d422      	bmi.n	8009f46 <__swsetup_r+0x62>
 8009f00:	06da      	lsls	r2, r3, #27
 8009f02:	d407      	bmi.n	8009f14 <__swsetup_r+0x30>
 8009f04:	2209      	movs	r2, #9
 8009f06:	602a      	str	r2, [r5, #0]
 8009f08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f0c:	81a3      	strh	r3, [r4, #12]
 8009f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f12:	e033      	b.n	8009f7c <__swsetup_r+0x98>
 8009f14:	0758      	lsls	r0, r3, #29
 8009f16:	d512      	bpl.n	8009f3e <__swsetup_r+0x5a>
 8009f18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f1a:	b141      	cbz	r1, 8009f2e <__swsetup_r+0x4a>
 8009f1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f20:	4299      	cmp	r1, r3
 8009f22:	d002      	beq.n	8009f2a <__swsetup_r+0x46>
 8009f24:	4628      	mov	r0, r5
 8009f26:	f000 ff13 	bl	800ad50 <_free_r>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f2e:	89a3      	ldrh	r3, [r4, #12]
 8009f30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f34:	81a3      	strh	r3, [r4, #12]
 8009f36:	2300      	movs	r3, #0
 8009f38:	6063      	str	r3, [r4, #4]
 8009f3a:	6923      	ldr	r3, [r4, #16]
 8009f3c:	6023      	str	r3, [r4, #0]
 8009f3e:	89a3      	ldrh	r3, [r4, #12]
 8009f40:	f043 0308 	orr.w	r3, r3, #8
 8009f44:	81a3      	strh	r3, [r4, #12]
 8009f46:	6923      	ldr	r3, [r4, #16]
 8009f48:	b94b      	cbnz	r3, 8009f5e <__swsetup_r+0x7a>
 8009f4a:	89a3      	ldrh	r3, [r4, #12]
 8009f4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f54:	d003      	beq.n	8009f5e <__swsetup_r+0x7a>
 8009f56:	4621      	mov	r1, r4
 8009f58:	4628      	mov	r0, r5
 8009f5a:	f002 fe9b 	bl	800cc94 <__smakebuf_r>
 8009f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f62:	f013 0201 	ands.w	r2, r3, #1
 8009f66:	d00a      	beq.n	8009f7e <__swsetup_r+0x9a>
 8009f68:	2200      	movs	r2, #0
 8009f6a:	60a2      	str	r2, [r4, #8]
 8009f6c:	6962      	ldr	r2, [r4, #20]
 8009f6e:	4252      	negs	r2, r2
 8009f70:	61a2      	str	r2, [r4, #24]
 8009f72:	6922      	ldr	r2, [r4, #16]
 8009f74:	b942      	cbnz	r2, 8009f88 <__swsetup_r+0xa4>
 8009f76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f7a:	d1c5      	bne.n	8009f08 <__swsetup_r+0x24>
 8009f7c:	bd38      	pop	{r3, r4, r5, pc}
 8009f7e:	0799      	lsls	r1, r3, #30
 8009f80:	bf58      	it	pl
 8009f82:	6962      	ldrpl	r2, [r4, #20]
 8009f84:	60a2      	str	r2, [r4, #8]
 8009f86:	e7f4      	b.n	8009f72 <__swsetup_r+0x8e>
 8009f88:	2000      	movs	r0, #0
 8009f8a:	e7f7      	b.n	8009f7c <__swsetup_r+0x98>
 8009f8c:	20000018 	.word	0x20000018

08009f90 <memset>:
 8009f90:	4402      	add	r2, r0
 8009f92:	4603      	mov	r3, r0
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d100      	bne.n	8009f9a <memset+0xa>
 8009f98:	4770      	bx	lr
 8009f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8009f9e:	e7f9      	b.n	8009f94 <memset+0x4>

08009fa0 <_localeconv_r>:
 8009fa0:	4800      	ldr	r0, [pc, #0]	@ (8009fa4 <_localeconv_r+0x4>)
 8009fa2:	4770      	bx	lr
 8009fa4:	20000158 	.word	0x20000158

08009fa8 <_close_r>:
 8009fa8:	b538      	push	{r3, r4, r5, lr}
 8009faa:	4d06      	ldr	r5, [pc, #24]	@ (8009fc4 <_close_r+0x1c>)
 8009fac:	2300      	movs	r3, #0
 8009fae:	4604      	mov	r4, r0
 8009fb0:	4608      	mov	r0, r1
 8009fb2:	602b      	str	r3, [r5, #0]
 8009fb4:	f7f7 fd50 	bl	8001a58 <_close>
 8009fb8:	1c43      	adds	r3, r0, #1
 8009fba:	d102      	bne.n	8009fc2 <_close_r+0x1a>
 8009fbc:	682b      	ldr	r3, [r5, #0]
 8009fbe:	b103      	cbz	r3, 8009fc2 <_close_r+0x1a>
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	bd38      	pop	{r3, r4, r5, pc}
 8009fc4:	20001040 	.word	0x20001040

08009fc8 <_lseek_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4d07      	ldr	r5, [pc, #28]	@ (8009fe8 <_lseek_r+0x20>)
 8009fcc:	4604      	mov	r4, r0
 8009fce:	4608      	mov	r0, r1
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	602a      	str	r2, [r5, #0]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	f7f7 fd65 	bl	8001aa6 <_lseek>
 8009fdc:	1c43      	adds	r3, r0, #1
 8009fde:	d102      	bne.n	8009fe6 <_lseek_r+0x1e>
 8009fe0:	682b      	ldr	r3, [r5, #0]
 8009fe2:	b103      	cbz	r3, 8009fe6 <_lseek_r+0x1e>
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}
 8009fe8:	20001040 	.word	0x20001040

08009fec <_read_r>:
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	4d07      	ldr	r5, [pc, #28]	@ (800a00c <_read_r+0x20>)
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	4608      	mov	r0, r1
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	602a      	str	r2, [r5, #0]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	f7f7 fcf3 	bl	80019e6 <_read>
 800a000:	1c43      	adds	r3, r0, #1
 800a002:	d102      	bne.n	800a00a <_read_r+0x1e>
 800a004:	682b      	ldr	r3, [r5, #0]
 800a006:	b103      	cbz	r3, 800a00a <_read_r+0x1e>
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	bd38      	pop	{r3, r4, r5, pc}
 800a00c:	20001040 	.word	0x20001040

0800a010 <_write_r>:
 800a010:	b538      	push	{r3, r4, r5, lr}
 800a012:	4d07      	ldr	r5, [pc, #28]	@ (800a030 <_write_r+0x20>)
 800a014:	4604      	mov	r4, r0
 800a016:	4608      	mov	r0, r1
 800a018:	4611      	mov	r1, r2
 800a01a:	2200      	movs	r2, #0
 800a01c:	602a      	str	r2, [r5, #0]
 800a01e:	461a      	mov	r2, r3
 800a020:	f7f7 fcfe 	bl	8001a20 <_write>
 800a024:	1c43      	adds	r3, r0, #1
 800a026:	d102      	bne.n	800a02e <_write_r+0x1e>
 800a028:	682b      	ldr	r3, [r5, #0]
 800a02a:	b103      	cbz	r3, 800a02e <_write_r+0x1e>
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	bd38      	pop	{r3, r4, r5, pc}
 800a030:	20001040 	.word	0x20001040

0800a034 <__errno>:
 800a034:	4b01      	ldr	r3, [pc, #4]	@ (800a03c <__errno+0x8>)
 800a036:	6818      	ldr	r0, [r3, #0]
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	20000018 	.word	0x20000018

0800a040 <__libc_init_array>:
 800a040:	b570      	push	{r4, r5, r6, lr}
 800a042:	4d0d      	ldr	r5, [pc, #52]	@ (800a078 <__libc_init_array+0x38>)
 800a044:	4c0d      	ldr	r4, [pc, #52]	@ (800a07c <__libc_init_array+0x3c>)
 800a046:	1b64      	subs	r4, r4, r5
 800a048:	10a4      	asrs	r4, r4, #2
 800a04a:	2600      	movs	r6, #0
 800a04c:	42a6      	cmp	r6, r4
 800a04e:	d109      	bne.n	800a064 <__libc_init_array+0x24>
 800a050:	4d0b      	ldr	r5, [pc, #44]	@ (800a080 <__libc_init_array+0x40>)
 800a052:	4c0c      	ldr	r4, [pc, #48]	@ (800a084 <__libc_init_array+0x44>)
 800a054:	f003 fcc6 	bl	800d9e4 <_init>
 800a058:	1b64      	subs	r4, r4, r5
 800a05a:	10a4      	asrs	r4, r4, #2
 800a05c:	2600      	movs	r6, #0
 800a05e:	42a6      	cmp	r6, r4
 800a060:	d105      	bne.n	800a06e <__libc_init_array+0x2e>
 800a062:	bd70      	pop	{r4, r5, r6, pc}
 800a064:	f855 3b04 	ldr.w	r3, [r5], #4
 800a068:	4798      	blx	r3
 800a06a:	3601      	adds	r6, #1
 800a06c:	e7ee      	b.n	800a04c <__libc_init_array+0xc>
 800a06e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a072:	4798      	blx	r3
 800a074:	3601      	adds	r6, #1
 800a076:	e7f2      	b.n	800a05e <__libc_init_array+0x1e>
 800a078:	0800df90 	.word	0x0800df90
 800a07c:	0800df90 	.word	0x0800df90
 800a080:	0800df90 	.word	0x0800df90
 800a084:	0800df94 	.word	0x0800df94

0800a088 <__retarget_lock_init_recursive>:
 800a088:	4770      	bx	lr

0800a08a <__retarget_lock_acquire_recursive>:
 800a08a:	4770      	bx	lr

0800a08c <__retarget_lock_release_recursive>:
 800a08c:	4770      	bx	lr

0800a08e <memcpy>:
 800a08e:	440a      	add	r2, r1
 800a090:	4291      	cmp	r1, r2
 800a092:	f100 33ff 	add.w	r3, r0, #4294967295
 800a096:	d100      	bne.n	800a09a <memcpy+0xc>
 800a098:	4770      	bx	lr
 800a09a:	b510      	push	{r4, lr}
 800a09c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0a4:	4291      	cmp	r1, r2
 800a0a6:	d1f9      	bne.n	800a09c <memcpy+0xe>
 800a0a8:	bd10      	pop	{r4, pc}
	...

0800a0ac <nanf>:
 800a0ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a0b4 <nanf+0x8>
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	7fc00000 	.word	0x7fc00000

0800a0b8 <quorem>:
 800a0b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0bc:	6903      	ldr	r3, [r0, #16]
 800a0be:	690c      	ldr	r4, [r1, #16]
 800a0c0:	42a3      	cmp	r3, r4
 800a0c2:	4607      	mov	r7, r0
 800a0c4:	db7e      	blt.n	800a1c4 <quorem+0x10c>
 800a0c6:	3c01      	subs	r4, #1
 800a0c8:	f101 0814 	add.w	r8, r1, #20
 800a0cc:	00a3      	lsls	r3, r4, #2
 800a0ce:	f100 0514 	add.w	r5, r0, #20
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0d8:	9301      	str	r3, [sp, #4]
 800a0da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a0de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0ea:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0ee:	d32e      	bcc.n	800a14e <quorem+0x96>
 800a0f0:	f04f 0a00 	mov.w	sl, #0
 800a0f4:	46c4      	mov	ip, r8
 800a0f6:	46ae      	mov	lr, r5
 800a0f8:	46d3      	mov	fp, sl
 800a0fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a0fe:	b298      	uxth	r0, r3
 800a100:	fb06 a000 	mla	r0, r6, r0, sl
 800a104:	0c02      	lsrs	r2, r0, #16
 800a106:	0c1b      	lsrs	r3, r3, #16
 800a108:	fb06 2303 	mla	r3, r6, r3, r2
 800a10c:	f8de 2000 	ldr.w	r2, [lr]
 800a110:	b280      	uxth	r0, r0
 800a112:	b292      	uxth	r2, r2
 800a114:	1a12      	subs	r2, r2, r0
 800a116:	445a      	add	r2, fp
 800a118:	f8de 0000 	ldr.w	r0, [lr]
 800a11c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a120:	b29b      	uxth	r3, r3
 800a122:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a126:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a12a:	b292      	uxth	r2, r2
 800a12c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a130:	45e1      	cmp	r9, ip
 800a132:	f84e 2b04 	str.w	r2, [lr], #4
 800a136:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a13a:	d2de      	bcs.n	800a0fa <quorem+0x42>
 800a13c:	9b00      	ldr	r3, [sp, #0]
 800a13e:	58eb      	ldr	r3, [r5, r3]
 800a140:	b92b      	cbnz	r3, 800a14e <quorem+0x96>
 800a142:	9b01      	ldr	r3, [sp, #4]
 800a144:	3b04      	subs	r3, #4
 800a146:	429d      	cmp	r5, r3
 800a148:	461a      	mov	r2, r3
 800a14a:	d32f      	bcc.n	800a1ac <quorem+0xf4>
 800a14c:	613c      	str	r4, [r7, #16]
 800a14e:	4638      	mov	r0, r7
 800a150:	f001 f9c2 	bl	800b4d8 <__mcmp>
 800a154:	2800      	cmp	r0, #0
 800a156:	db25      	blt.n	800a1a4 <quorem+0xec>
 800a158:	4629      	mov	r1, r5
 800a15a:	2000      	movs	r0, #0
 800a15c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a160:	f8d1 c000 	ldr.w	ip, [r1]
 800a164:	fa1f fe82 	uxth.w	lr, r2
 800a168:	fa1f f38c 	uxth.w	r3, ip
 800a16c:	eba3 030e 	sub.w	r3, r3, lr
 800a170:	4403      	add	r3, r0
 800a172:	0c12      	lsrs	r2, r2, #16
 800a174:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a178:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a182:	45c1      	cmp	r9, r8
 800a184:	f841 3b04 	str.w	r3, [r1], #4
 800a188:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a18c:	d2e6      	bcs.n	800a15c <quorem+0xa4>
 800a18e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a196:	b922      	cbnz	r2, 800a1a2 <quorem+0xea>
 800a198:	3b04      	subs	r3, #4
 800a19a:	429d      	cmp	r5, r3
 800a19c:	461a      	mov	r2, r3
 800a19e:	d30b      	bcc.n	800a1b8 <quorem+0x100>
 800a1a0:	613c      	str	r4, [r7, #16]
 800a1a2:	3601      	adds	r6, #1
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	b003      	add	sp, #12
 800a1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ac:	6812      	ldr	r2, [r2, #0]
 800a1ae:	3b04      	subs	r3, #4
 800a1b0:	2a00      	cmp	r2, #0
 800a1b2:	d1cb      	bne.n	800a14c <quorem+0x94>
 800a1b4:	3c01      	subs	r4, #1
 800a1b6:	e7c6      	b.n	800a146 <quorem+0x8e>
 800a1b8:	6812      	ldr	r2, [r2, #0]
 800a1ba:	3b04      	subs	r3, #4
 800a1bc:	2a00      	cmp	r2, #0
 800a1be:	d1ef      	bne.n	800a1a0 <quorem+0xe8>
 800a1c0:	3c01      	subs	r4, #1
 800a1c2:	e7ea      	b.n	800a19a <quorem+0xe2>
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	e7ee      	b.n	800a1a6 <quorem+0xee>

0800a1c8 <_dtoa_r>:
 800a1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1cc:	69c7      	ldr	r7, [r0, #28]
 800a1ce:	b099      	sub	sp, #100	@ 0x64
 800a1d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a1d4:	ec55 4b10 	vmov	r4, r5, d0
 800a1d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a1da:	9109      	str	r1, [sp, #36]	@ 0x24
 800a1dc:	4683      	mov	fp, r0
 800a1de:	920e      	str	r2, [sp, #56]	@ 0x38
 800a1e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a1e2:	b97f      	cbnz	r7, 800a204 <_dtoa_r+0x3c>
 800a1e4:	2010      	movs	r0, #16
 800a1e6:	f000 fdfd 	bl	800ade4 <malloc>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	f8cb 001c 	str.w	r0, [fp, #28]
 800a1f0:	b920      	cbnz	r0, 800a1fc <_dtoa_r+0x34>
 800a1f2:	4ba7      	ldr	r3, [pc, #668]	@ (800a490 <_dtoa_r+0x2c8>)
 800a1f4:	21ef      	movs	r1, #239	@ 0xef
 800a1f6:	48a7      	ldr	r0, [pc, #668]	@ (800a494 <_dtoa_r+0x2cc>)
 800a1f8:	f002 fdee 	bl	800cdd8 <__assert_func>
 800a1fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a200:	6007      	str	r7, [r0, #0]
 800a202:	60c7      	str	r7, [r0, #12]
 800a204:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a208:	6819      	ldr	r1, [r3, #0]
 800a20a:	b159      	cbz	r1, 800a224 <_dtoa_r+0x5c>
 800a20c:	685a      	ldr	r2, [r3, #4]
 800a20e:	604a      	str	r2, [r1, #4]
 800a210:	2301      	movs	r3, #1
 800a212:	4093      	lsls	r3, r2
 800a214:	608b      	str	r3, [r1, #8]
 800a216:	4658      	mov	r0, fp
 800a218:	f000 feda 	bl	800afd0 <_Bfree>
 800a21c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a220:	2200      	movs	r2, #0
 800a222:	601a      	str	r2, [r3, #0]
 800a224:	1e2b      	subs	r3, r5, #0
 800a226:	bfb9      	ittee	lt
 800a228:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a22c:	9303      	strlt	r3, [sp, #12]
 800a22e:	2300      	movge	r3, #0
 800a230:	6033      	strge	r3, [r6, #0]
 800a232:	9f03      	ldr	r7, [sp, #12]
 800a234:	4b98      	ldr	r3, [pc, #608]	@ (800a498 <_dtoa_r+0x2d0>)
 800a236:	bfbc      	itt	lt
 800a238:	2201      	movlt	r2, #1
 800a23a:	6032      	strlt	r2, [r6, #0]
 800a23c:	43bb      	bics	r3, r7
 800a23e:	d112      	bne.n	800a266 <_dtoa_r+0x9e>
 800a240:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a242:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a246:	6013      	str	r3, [r2, #0]
 800a248:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a24c:	4323      	orrs	r3, r4
 800a24e:	f000 854d 	beq.w	800acec <_dtoa_r+0xb24>
 800a252:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a254:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a4ac <_dtoa_r+0x2e4>
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 854f 	beq.w	800acfc <_dtoa_r+0xb34>
 800a25e:	f10a 0303 	add.w	r3, sl, #3
 800a262:	f000 bd49 	b.w	800acf8 <_dtoa_r+0xb30>
 800a266:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a26a:	2200      	movs	r2, #0
 800a26c:	ec51 0b17 	vmov	r0, r1, d7
 800a270:	2300      	movs	r3, #0
 800a272:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a276:	f7f6 fc4f 	bl	8000b18 <__aeabi_dcmpeq>
 800a27a:	4680      	mov	r8, r0
 800a27c:	b158      	cbz	r0, 800a296 <_dtoa_r+0xce>
 800a27e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a280:	2301      	movs	r3, #1
 800a282:	6013      	str	r3, [r2, #0]
 800a284:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a286:	b113      	cbz	r3, 800a28e <_dtoa_r+0xc6>
 800a288:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a28a:	4b84      	ldr	r3, [pc, #528]	@ (800a49c <_dtoa_r+0x2d4>)
 800a28c:	6013      	str	r3, [r2, #0]
 800a28e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a4b0 <_dtoa_r+0x2e8>
 800a292:	f000 bd33 	b.w	800acfc <_dtoa_r+0xb34>
 800a296:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a29a:	aa16      	add	r2, sp, #88	@ 0x58
 800a29c:	a917      	add	r1, sp, #92	@ 0x5c
 800a29e:	4658      	mov	r0, fp
 800a2a0:	f001 fa3a 	bl	800b718 <__d2b>
 800a2a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a2a8:	4681      	mov	r9, r0
 800a2aa:	2e00      	cmp	r6, #0
 800a2ac:	d077      	beq.n	800a39e <_dtoa_r+0x1d6>
 800a2ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a2b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a2b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a2c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a2c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	4b74      	ldr	r3, [pc, #464]	@ (800a4a0 <_dtoa_r+0x2d8>)
 800a2ce:	f7f6 f803 	bl	80002d8 <__aeabi_dsub>
 800a2d2:	a369      	add	r3, pc, #420	@ (adr r3, 800a478 <_dtoa_r+0x2b0>)
 800a2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d8:	f7f6 f9b6 	bl	8000648 <__aeabi_dmul>
 800a2dc:	a368      	add	r3, pc, #416	@ (adr r3, 800a480 <_dtoa_r+0x2b8>)
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	f7f5 fffb 	bl	80002dc <__adddf3>
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	460d      	mov	r5, r1
 800a2ec:	f7f6 f942 	bl	8000574 <__aeabi_i2d>
 800a2f0:	a365      	add	r3, pc, #404	@ (adr r3, 800a488 <_dtoa_r+0x2c0>)
 800a2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f6:	f7f6 f9a7 	bl	8000648 <__aeabi_dmul>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	4620      	mov	r0, r4
 800a300:	4629      	mov	r1, r5
 800a302:	f7f5 ffeb 	bl	80002dc <__adddf3>
 800a306:	4604      	mov	r4, r0
 800a308:	460d      	mov	r5, r1
 800a30a:	f7f6 fc4d 	bl	8000ba8 <__aeabi_d2iz>
 800a30e:	2200      	movs	r2, #0
 800a310:	4607      	mov	r7, r0
 800a312:	2300      	movs	r3, #0
 800a314:	4620      	mov	r0, r4
 800a316:	4629      	mov	r1, r5
 800a318:	f7f6 fc08 	bl	8000b2c <__aeabi_dcmplt>
 800a31c:	b140      	cbz	r0, 800a330 <_dtoa_r+0x168>
 800a31e:	4638      	mov	r0, r7
 800a320:	f7f6 f928 	bl	8000574 <__aeabi_i2d>
 800a324:	4622      	mov	r2, r4
 800a326:	462b      	mov	r3, r5
 800a328:	f7f6 fbf6 	bl	8000b18 <__aeabi_dcmpeq>
 800a32c:	b900      	cbnz	r0, 800a330 <_dtoa_r+0x168>
 800a32e:	3f01      	subs	r7, #1
 800a330:	2f16      	cmp	r7, #22
 800a332:	d851      	bhi.n	800a3d8 <_dtoa_r+0x210>
 800a334:	4b5b      	ldr	r3, [pc, #364]	@ (800a4a4 <_dtoa_r+0x2dc>)
 800a336:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a342:	f7f6 fbf3 	bl	8000b2c <__aeabi_dcmplt>
 800a346:	2800      	cmp	r0, #0
 800a348:	d048      	beq.n	800a3dc <_dtoa_r+0x214>
 800a34a:	3f01      	subs	r7, #1
 800a34c:	2300      	movs	r3, #0
 800a34e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a350:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a352:	1b9b      	subs	r3, r3, r6
 800a354:	1e5a      	subs	r2, r3, #1
 800a356:	bf44      	itt	mi
 800a358:	f1c3 0801 	rsbmi	r8, r3, #1
 800a35c:	2300      	movmi	r3, #0
 800a35e:	9208      	str	r2, [sp, #32]
 800a360:	bf54      	ite	pl
 800a362:	f04f 0800 	movpl.w	r8, #0
 800a366:	9308      	strmi	r3, [sp, #32]
 800a368:	2f00      	cmp	r7, #0
 800a36a:	db39      	blt.n	800a3e0 <_dtoa_r+0x218>
 800a36c:	9b08      	ldr	r3, [sp, #32]
 800a36e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a370:	443b      	add	r3, r7
 800a372:	9308      	str	r3, [sp, #32]
 800a374:	2300      	movs	r3, #0
 800a376:	930a      	str	r3, [sp, #40]	@ 0x28
 800a378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a37a:	2b09      	cmp	r3, #9
 800a37c:	d864      	bhi.n	800a448 <_dtoa_r+0x280>
 800a37e:	2b05      	cmp	r3, #5
 800a380:	bfc4      	itt	gt
 800a382:	3b04      	subgt	r3, #4
 800a384:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a388:	f1a3 0302 	sub.w	r3, r3, #2
 800a38c:	bfcc      	ite	gt
 800a38e:	2400      	movgt	r4, #0
 800a390:	2401      	movle	r4, #1
 800a392:	2b03      	cmp	r3, #3
 800a394:	d863      	bhi.n	800a45e <_dtoa_r+0x296>
 800a396:	e8df f003 	tbb	[pc, r3]
 800a39a:	372a      	.short	0x372a
 800a39c:	5535      	.short	0x5535
 800a39e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a3a2:	441e      	add	r6, r3
 800a3a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a3a8:	2b20      	cmp	r3, #32
 800a3aa:	bfc1      	itttt	gt
 800a3ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a3b0:	409f      	lslgt	r7, r3
 800a3b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a3b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a3ba:	bfd6      	itet	le
 800a3bc:	f1c3 0320 	rsble	r3, r3, #32
 800a3c0:	ea47 0003 	orrgt.w	r0, r7, r3
 800a3c4:	fa04 f003 	lslle.w	r0, r4, r3
 800a3c8:	f7f6 f8c4 	bl	8000554 <__aeabi_ui2d>
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a3d2:	3e01      	subs	r6, #1
 800a3d4:	9214      	str	r2, [sp, #80]	@ 0x50
 800a3d6:	e777      	b.n	800a2c8 <_dtoa_r+0x100>
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e7b8      	b.n	800a34e <_dtoa_r+0x186>
 800a3dc:	9012      	str	r0, [sp, #72]	@ 0x48
 800a3de:	e7b7      	b.n	800a350 <_dtoa_r+0x188>
 800a3e0:	427b      	negs	r3, r7
 800a3e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	eba8 0807 	sub.w	r8, r8, r7
 800a3ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a3ec:	e7c4      	b.n	800a378 <_dtoa_r+0x1b0>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	dc35      	bgt.n	800a464 <_dtoa_r+0x29c>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	9307      	str	r3, [sp, #28]
 800a3fe:	461a      	mov	r2, r3
 800a400:	920e      	str	r2, [sp, #56]	@ 0x38
 800a402:	e00b      	b.n	800a41c <_dtoa_r+0x254>
 800a404:	2301      	movs	r3, #1
 800a406:	e7f3      	b.n	800a3f0 <_dtoa_r+0x228>
 800a408:	2300      	movs	r3, #0
 800a40a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a40c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a40e:	18fb      	adds	r3, r7, r3
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	3301      	adds	r3, #1
 800a414:	2b01      	cmp	r3, #1
 800a416:	9307      	str	r3, [sp, #28]
 800a418:	bfb8      	it	lt
 800a41a:	2301      	movlt	r3, #1
 800a41c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a420:	2100      	movs	r1, #0
 800a422:	2204      	movs	r2, #4
 800a424:	f102 0514 	add.w	r5, r2, #20
 800a428:	429d      	cmp	r5, r3
 800a42a:	d91f      	bls.n	800a46c <_dtoa_r+0x2a4>
 800a42c:	6041      	str	r1, [r0, #4]
 800a42e:	4658      	mov	r0, fp
 800a430:	f000 fd8e 	bl	800af50 <_Balloc>
 800a434:	4682      	mov	sl, r0
 800a436:	2800      	cmp	r0, #0
 800a438:	d13c      	bne.n	800a4b4 <_dtoa_r+0x2ec>
 800a43a:	4b1b      	ldr	r3, [pc, #108]	@ (800a4a8 <_dtoa_r+0x2e0>)
 800a43c:	4602      	mov	r2, r0
 800a43e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a442:	e6d8      	b.n	800a1f6 <_dtoa_r+0x2e>
 800a444:	2301      	movs	r3, #1
 800a446:	e7e0      	b.n	800a40a <_dtoa_r+0x242>
 800a448:	2401      	movs	r4, #1
 800a44a:	2300      	movs	r3, #0
 800a44c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a44e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a450:	f04f 33ff 	mov.w	r3, #4294967295
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	9307      	str	r3, [sp, #28]
 800a458:	2200      	movs	r2, #0
 800a45a:	2312      	movs	r3, #18
 800a45c:	e7d0      	b.n	800a400 <_dtoa_r+0x238>
 800a45e:	2301      	movs	r3, #1
 800a460:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a462:	e7f5      	b.n	800a450 <_dtoa_r+0x288>
 800a464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	9307      	str	r3, [sp, #28]
 800a46a:	e7d7      	b.n	800a41c <_dtoa_r+0x254>
 800a46c:	3101      	adds	r1, #1
 800a46e:	0052      	lsls	r2, r2, #1
 800a470:	e7d8      	b.n	800a424 <_dtoa_r+0x25c>
 800a472:	bf00      	nop
 800a474:	f3af 8000 	nop.w
 800a478:	636f4361 	.word	0x636f4361
 800a47c:	3fd287a7 	.word	0x3fd287a7
 800a480:	8b60c8b3 	.word	0x8b60c8b3
 800a484:	3fc68a28 	.word	0x3fc68a28
 800a488:	509f79fb 	.word	0x509f79fb
 800a48c:	3fd34413 	.word	0x3fd34413
 800a490:	0800db5e 	.word	0x0800db5e
 800a494:	0800db75 	.word	0x0800db75
 800a498:	7ff00000 	.word	0x7ff00000
 800a49c:	0800db29 	.word	0x0800db29
 800a4a0:	3ff80000 	.word	0x3ff80000
 800a4a4:	0800dc70 	.word	0x0800dc70
 800a4a8:	0800dbcd 	.word	0x0800dbcd
 800a4ac:	0800db5a 	.word	0x0800db5a
 800a4b0:	0800db28 	.word	0x0800db28
 800a4b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a4b8:	6018      	str	r0, [r3, #0]
 800a4ba:	9b07      	ldr	r3, [sp, #28]
 800a4bc:	2b0e      	cmp	r3, #14
 800a4be:	f200 80a4 	bhi.w	800a60a <_dtoa_r+0x442>
 800a4c2:	2c00      	cmp	r4, #0
 800a4c4:	f000 80a1 	beq.w	800a60a <_dtoa_r+0x442>
 800a4c8:	2f00      	cmp	r7, #0
 800a4ca:	dd33      	ble.n	800a534 <_dtoa_r+0x36c>
 800a4cc:	4bad      	ldr	r3, [pc, #692]	@ (800a784 <_dtoa_r+0x5bc>)
 800a4ce:	f007 020f 	and.w	r2, r7, #15
 800a4d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4d6:	ed93 7b00 	vldr	d7, [r3]
 800a4da:	05f8      	lsls	r0, r7, #23
 800a4dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a4e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a4e4:	d516      	bpl.n	800a514 <_dtoa_r+0x34c>
 800a4e6:	4ba8      	ldr	r3, [pc, #672]	@ (800a788 <_dtoa_r+0x5c0>)
 800a4e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4f0:	f7f6 f9d4 	bl	800089c <__aeabi_ddiv>
 800a4f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4f8:	f004 040f 	and.w	r4, r4, #15
 800a4fc:	2603      	movs	r6, #3
 800a4fe:	4da2      	ldr	r5, [pc, #648]	@ (800a788 <_dtoa_r+0x5c0>)
 800a500:	b954      	cbnz	r4, 800a518 <_dtoa_r+0x350>
 800a502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a50a:	f7f6 f9c7 	bl	800089c <__aeabi_ddiv>
 800a50e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a512:	e028      	b.n	800a566 <_dtoa_r+0x39e>
 800a514:	2602      	movs	r6, #2
 800a516:	e7f2      	b.n	800a4fe <_dtoa_r+0x336>
 800a518:	07e1      	lsls	r1, r4, #31
 800a51a:	d508      	bpl.n	800a52e <_dtoa_r+0x366>
 800a51c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a520:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a524:	f7f6 f890 	bl	8000648 <__aeabi_dmul>
 800a528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a52c:	3601      	adds	r6, #1
 800a52e:	1064      	asrs	r4, r4, #1
 800a530:	3508      	adds	r5, #8
 800a532:	e7e5      	b.n	800a500 <_dtoa_r+0x338>
 800a534:	f000 80d2 	beq.w	800a6dc <_dtoa_r+0x514>
 800a538:	427c      	negs	r4, r7
 800a53a:	4b92      	ldr	r3, [pc, #584]	@ (800a784 <_dtoa_r+0x5bc>)
 800a53c:	4d92      	ldr	r5, [pc, #584]	@ (800a788 <_dtoa_r+0x5c0>)
 800a53e:	f004 020f 	and.w	r2, r4, #15
 800a542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a54e:	f7f6 f87b 	bl	8000648 <__aeabi_dmul>
 800a552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a556:	1124      	asrs	r4, r4, #4
 800a558:	2300      	movs	r3, #0
 800a55a:	2602      	movs	r6, #2
 800a55c:	2c00      	cmp	r4, #0
 800a55e:	f040 80b2 	bne.w	800a6c6 <_dtoa_r+0x4fe>
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1d3      	bne.n	800a50e <_dtoa_r+0x346>
 800a566:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a568:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 80b7 	beq.w	800a6e0 <_dtoa_r+0x518>
 800a572:	4b86      	ldr	r3, [pc, #536]	@ (800a78c <_dtoa_r+0x5c4>)
 800a574:	2200      	movs	r2, #0
 800a576:	4620      	mov	r0, r4
 800a578:	4629      	mov	r1, r5
 800a57a:	f7f6 fad7 	bl	8000b2c <__aeabi_dcmplt>
 800a57e:	2800      	cmp	r0, #0
 800a580:	f000 80ae 	beq.w	800a6e0 <_dtoa_r+0x518>
 800a584:	9b07      	ldr	r3, [sp, #28]
 800a586:	2b00      	cmp	r3, #0
 800a588:	f000 80aa 	beq.w	800a6e0 <_dtoa_r+0x518>
 800a58c:	9b00      	ldr	r3, [sp, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	dd37      	ble.n	800a602 <_dtoa_r+0x43a>
 800a592:	1e7b      	subs	r3, r7, #1
 800a594:	9304      	str	r3, [sp, #16]
 800a596:	4620      	mov	r0, r4
 800a598:	4b7d      	ldr	r3, [pc, #500]	@ (800a790 <_dtoa_r+0x5c8>)
 800a59a:	2200      	movs	r2, #0
 800a59c:	4629      	mov	r1, r5
 800a59e:	f7f6 f853 	bl	8000648 <__aeabi_dmul>
 800a5a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5a6:	9c00      	ldr	r4, [sp, #0]
 800a5a8:	3601      	adds	r6, #1
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	f7f5 ffe2 	bl	8000574 <__aeabi_i2d>
 800a5b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5b4:	f7f6 f848 	bl	8000648 <__aeabi_dmul>
 800a5b8:	4b76      	ldr	r3, [pc, #472]	@ (800a794 <_dtoa_r+0x5cc>)
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f7f5 fe8e 	bl	80002dc <__adddf3>
 800a5c0:	4605      	mov	r5, r0
 800a5c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a5c6:	2c00      	cmp	r4, #0
 800a5c8:	f040 808d 	bne.w	800a6e6 <_dtoa_r+0x51e>
 800a5cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5d0:	4b71      	ldr	r3, [pc, #452]	@ (800a798 <_dtoa_r+0x5d0>)
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f7f5 fe80 	bl	80002d8 <__aeabi_dsub>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	460b      	mov	r3, r1
 800a5dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5e0:	462a      	mov	r2, r5
 800a5e2:	4633      	mov	r3, r6
 800a5e4:	f7f6 fac0 	bl	8000b68 <__aeabi_dcmpgt>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	f040 828b 	bne.w	800ab04 <_dtoa_r+0x93c>
 800a5ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5f2:	462a      	mov	r2, r5
 800a5f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a5f8:	f7f6 fa98 	bl	8000b2c <__aeabi_dcmplt>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	f040 8128 	bne.w	800a852 <_dtoa_r+0x68a>
 800a602:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a606:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a60a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f2c0 815a 	blt.w	800a8c6 <_dtoa_r+0x6fe>
 800a612:	2f0e      	cmp	r7, #14
 800a614:	f300 8157 	bgt.w	800a8c6 <_dtoa_r+0x6fe>
 800a618:	4b5a      	ldr	r3, [pc, #360]	@ (800a784 <_dtoa_r+0x5bc>)
 800a61a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a61e:	ed93 7b00 	vldr	d7, [r3]
 800a622:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a624:	2b00      	cmp	r3, #0
 800a626:	ed8d 7b00 	vstr	d7, [sp]
 800a62a:	da03      	bge.n	800a634 <_dtoa_r+0x46c>
 800a62c:	9b07      	ldr	r3, [sp, #28]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	f340 8101 	ble.w	800a836 <_dtoa_r+0x66e>
 800a634:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a638:	4656      	mov	r6, sl
 800a63a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a63e:	4620      	mov	r0, r4
 800a640:	4629      	mov	r1, r5
 800a642:	f7f6 f92b 	bl	800089c <__aeabi_ddiv>
 800a646:	f7f6 faaf 	bl	8000ba8 <__aeabi_d2iz>
 800a64a:	4680      	mov	r8, r0
 800a64c:	f7f5 ff92 	bl	8000574 <__aeabi_i2d>
 800a650:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a654:	f7f5 fff8 	bl	8000648 <__aeabi_dmul>
 800a658:	4602      	mov	r2, r0
 800a65a:	460b      	mov	r3, r1
 800a65c:	4620      	mov	r0, r4
 800a65e:	4629      	mov	r1, r5
 800a660:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a664:	f7f5 fe38 	bl	80002d8 <__aeabi_dsub>
 800a668:	f806 4b01 	strb.w	r4, [r6], #1
 800a66c:	9d07      	ldr	r5, [sp, #28]
 800a66e:	eba6 040a 	sub.w	r4, r6, sl
 800a672:	42a5      	cmp	r5, r4
 800a674:	4602      	mov	r2, r0
 800a676:	460b      	mov	r3, r1
 800a678:	f040 8117 	bne.w	800a8aa <_dtoa_r+0x6e2>
 800a67c:	f7f5 fe2e 	bl	80002dc <__adddf3>
 800a680:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a684:	4604      	mov	r4, r0
 800a686:	460d      	mov	r5, r1
 800a688:	f7f6 fa6e 	bl	8000b68 <__aeabi_dcmpgt>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	f040 80f9 	bne.w	800a884 <_dtoa_r+0x6bc>
 800a692:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a696:	4620      	mov	r0, r4
 800a698:	4629      	mov	r1, r5
 800a69a:	f7f6 fa3d 	bl	8000b18 <__aeabi_dcmpeq>
 800a69e:	b118      	cbz	r0, 800a6a8 <_dtoa_r+0x4e0>
 800a6a0:	f018 0f01 	tst.w	r8, #1
 800a6a4:	f040 80ee 	bne.w	800a884 <_dtoa_r+0x6bc>
 800a6a8:	4649      	mov	r1, r9
 800a6aa:	4658      	mov	r0, fp
 800a6ac:	f000 fc90 	bl	800afd0 <_Bfree>
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	7033      	strb	r3, [r6, #0]
 800a6b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a6b6:	3701      	adds	r7, #1
 800a6b8:	601f      	str	r7, [r3, #0]
 800a6ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	f000 831d 	beq.w	800acfc <_dtoa_r+0xb34>
 800a6c2:	601e      	str	r6, [r3, #0]
 800a6c4:	e31a      	b.n	800acfc <_dtoa_r+0xb34>
 800a6c6:	07e2      	lsls	r2, r4, #31
 800a6c8:	d505      	bpl.n	800a6d6 <_dtoa_r+0x50e>
 800a6ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6ce:	f7f5 ffbb 	bl	8000648 <__aeabi_dmul>
 800a6d2:	3601      	adds	r6, #1
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	1064      	asrs	r4, r4, #1
 800a6d8:	3508      	adds	r5, #8
 800a6da:	e73f      	b.n	800a55c <_dtoa_r+0x394>
 800a6dc:	2602      	movs	r6, #2
 800a6de:	e742      	b.n	800a566 <_dtoa_r+0x39e>
 800a6e0:	9c07      	ldr	r4, [sp, #28]
 800a6e2:	9704      	str	r7, [sp, #16]
 800a6e4:	e761      	b.n	800a5aa <_dtoa_r+0x3e2>
 800a6e6:	4b27      	ldr	r3, [pc, #156]	@ (800a784 <_dtoa_r+0x5bc>)
 800a6e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a6ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a6f2:	4454      	add	r4, sl
 800a6f4:	2900      	cmp	r1, #0
 800a6f6:	d053      	beq.n	800a7a0 <_dtoa_r+0x5d8>
 800a6f8:	4928      	ldr	r1, [pc, #160]	@ (800a79c <_dtoa_r+0x5d4>)
 800a6fa:	2000      	movs	r0, #0
 800a6fc:	f7f6 f8ce 	bl	800089c <__aeabi_ddiv>
 800a700:	4633      	mov	r3, r6
 800a702:	462a      	mov	r2, r5
 800a704:	f7f5 fde8 	bl	80002d8 <__aeabi_dsub>
 800a708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a70c:	4656      	mov	r6, sl
 800a70e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a712:	f7f6 fa49 	bl	8000ba8 <__aeabi_d2iz>
 800a716:	4605      	mov	r5, r0
 800a718:	f7f5 ff2c 	bl	8000574 <__aeabi_i2d>
 800a71c:	4602      	mov	r2, r0
 800a71e:	460b      	mov	r3, r1
 800a720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a724:	f7f5 fdd8 	bl	80002d8 <__aeabi_dsub>
 800a728:	3530      	adds	r5, #48	@ 0x30
 800a72a:	4602      	mov	r2, r0
 800a72c:	460b      	mov	r3, r1
 800a72e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a732:	f806 5b01 	strb.w	r5, [r6], #1
 800a736:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a73a:	f7f6 f9f7 	bl	8000b2c <__aeabi_dcmplt>
 800a73e:	2800      	cmp	r0, #0
 800a740:	d171      	bne.n	800a826 <_dtoa_r+0x65e>
 800a742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a746:	4911      	ldr	r1, [pc, #68]	@ (800a78c <_dtoa_r+0x5c4>)
 800a748:	2000      	movs	r0, #0
 800a74a:	f7f5 fdc5 	bl	80002d8 <__aeabi_dsub>
 800a74e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a752:	f7f6 f9eb 	bl	8000b2c <__aeabi_dcmplt>
 800a756:	2800      	cmp	r0, #0
 800a758:	f040 8095 	bne.w	800a886 <_dtoa_r+0x6be>
 800a75c:	42a6      	cmp	r6, r4
 800a75e:	f43f af50 	beq.w	800a602 <_dtoa_r+0x43a>
 800a762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a766:	4b0a      	ldr	r3, [pc, #40]	@ (800a790 <_dtoa_r+0x5c8>)
 800a768:	2200      	movs	r2, #0
 800a76a:	f7f5 ff6d 	bl	8000648 <__aeabi_dmul>
 800a76e:	4b08      	ldr	r3, [pc, #32]	@ (800a790 <_dtoa_r+0x5c8>)
 800a770:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a774:	2200      	movs	r2, #0
 800a776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a77a:	f7f5 ff65 	bl	8000648 <__aeabi_dmul>
 800a77e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a782:	e7c4      	b.n	800a70e <_dtoa_r+0x546>
 800a784:	0800dc70 	.word	0x0800dc70
 800a788:	0800dc48 	.word	0x0800dc48
 800a78c:	3ff00000 	.word	0x3ff00000
 800a790:	40240000 	.word	0x40240000
 800a794:	401c0000 	.word	0x401c0000
 800a798:	40140000 	.word	0x40140000
 800a79c:	3fe00000 	.word	0x3fe00000
 800a7a0:	4631      	mov	r1, r6
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	f7f5 ff50 	bl	8000648 <__aeabi_dmul>
 800a7a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a7ac:	9415      	str	r4, [sp, #84]	@ 0x54
 800a7ae:	4656      	mov	r6, sl
 800a7b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7b4:	f7f6 f9f8 	bl	8000ba8 <__aeabi_d2iz>
 800a7b8:	4605      	mov	r5, r0
 800a7ba:	f7f5 fedb 	bl	8000574 <__aeabi_i2d>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7c6:	f7f5 fd87 	bl	80002d8 <__aeabi_dsub>
 800a7ca:	3530      	adds	r5, #48	@ 0x30
 800a7cc:	f806 5b01 	strb.w	r5, [r6], #1
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	42a6      	cmp	r6, r4
 800a7d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7da:	f04f 0200 	mov.w	r2, #0
 800a7de:	d124      	bne.n	800a82a <_dtoa_r+0x662>
 800a7e0:	4bac      	ldr	r3, [pc, #688]	@ (800aa94 <_dtoa_r+0x8cc>)
 800a7e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a7e6:	f7f5 fd79 	bl	80002dc <__adddf3>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7f2:	f7f6 f9b9 	bl	8000b68 <__aeabi_dcmpgt>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d145      	bne.n	800a886 <_dtoa_r+0x6be>
 800a7fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a7fe:	49a5      	ldr	r1, [pc, #660]	@ (800aa94 <_dtoa_r+0x8cc>)
 800a800:	2000      	movs	r0, #0
 800a802:	f7f5 fd69 	bl	80002d8 <__aeabi_dsub>
 800a806:	4602      	mov	r2, r0
 800a808:	460b      	mov	r3, r1
 800a80a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a80e:	f7f6 f98d 	bl	8000b2c <__aeabi_dcmplt>
 800a812:	2800      	cmp	r0, #0
 800a814:	f43f aef5 	beq.w	800a602 <_dtoa_r+0x43a>
 800a818:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a81a:	1e73      	subs	r3, r6, #1
 800a81c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a81e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a822:	2b30      	cmp	r3, #48	@ 0x30
 800a824:	d0f8      	beq.n	800a818 <_dtoa_r+0x650>
 800a826:	9f04      	ldr	r7, [sp, #16]
 800a828:	e73e      	b.n	800a6a8 <_dtoa_r+0x4e0>
 800a82a:	4b9b      	ldr	r3, [pc, #620]	@ (800aa98 <_dtoa_r+0x8d0>)
 800a82c:	f7f5 ff0c 	bl	8000648 <__aeabi_dmul>
 800a830:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a834:	e7bc      	b.n	800a7b0 <_dtoa_r+0x5e8>
 800a836:	d10c      	bne.n	800a852 <_dtoa_r+0x68a>
 800a838:	4b98      	ldr	r3, [pc, #608]	@ (800aa9c <_dtoa_r+0x8d4>)
 800a83a:	2200      	movs	r2, #0
 800a83c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a840:	f7f5 ff02 	bl	8000648 <__aeabi_dmul>
 800a844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a848:	f7f6 f984 	bl	8000b54 <__aeabi_dcmpge>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	f000 8157 	beq.w	800ab00 <_dtoa_r+0x938>
 800a852:	2400      	movs	r4, #0
 800a854:	4625      	mov	r5, r4
 800a856:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a858:	43db      	mvns	r3, r3
 800a85a:	9304      	str	r3, [sp, #16]
 800a85c:	4656      	mov	r6, sl
 800a85e:	2700      	movs	r7, #0
 800a860:	4621      	mov	r1, r4
 800a862:	4658      	mov	r0, fp
 800a864:	f000 fbb4 	bl	800afd0 <_Bfree>
 800a868:	2d00      	cmp	r5, #0
 800a86a:	d0dc      	beq.n	800a826 <_dtoa_r+0x65e>
 800a86c:	b12f      	cbz	r7, 800a87a <_dtoa_r+0x6b2>
 800a86e:	42af      	cmp	r7, r5
 800a870:	d003      	beq.n	800a87a <_dtoa_r+0x6b2>
 800a872:	4639      	mov	r1, r7
 800a874:	4658      	mov	r0, fp
 800a876:	f000 fbab 	bl	800afd0 <_Bfree>
 800a87a:	4629      	mov	r1, r5
 800a87c:	4658      	mov	r0, fp
 800a87e:	f000 fba7 	bl	800afd0 <_Bfree>
 800a882:	e7d0      	b.n	800a826 <_dtoa_r+0x65e>
 800a884:	9704      	str	r7, [sp, #16]
 800a886:	4633      	mov	r3, r6
 800a888:	461e      	mov	r6, r3
 800a88a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a88e:	2a39      	cmp	r2, #57	@ 0x39
 800a890:	d107      	bne.n	800a8a2 <_dtoa_r+0x6da>
 800a892:	459a      	cmp	sl, r3
 800a894:	d1f8      	bne.n	800a888 <_dtoa_r+0x6c0>
 800a896:	9a04      	ldr	r2, [sp, #16]
 800a898:	3201      	adds	r2, #1
 800a89a:	9204      	str	r2, [sp, #16]
 800a89c:	2230      	movs	r2, #48	@ 0x30
 800a89e:	f88a 2000 	strb.w	r2, [sl]
 800a8a2:	781a      	ldrb	r2, [r3, #0]
 800a8a4:	3201      	adds	r2, #1
 800a8a6:	701a      	strb	r2, [r3, #0]
 800a8a8:	e7bd      	b.n	800a826 <_dtoa_r+0x65e>
 800a8aa:	4b7b      	ldr	r3, [pc, #492]	@ (800aa98 <_dtoa_r+0x8d0>)
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f7f5 fecb 	bl	8000648 <__aeabi_dmul>
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	460d      	mov	r5, r1
 800a8ba:	f7f6 f92d 	bl	8000b18 <__aeabi_dcmpeq>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	f43f aebb 	beq.w	800a63a <_dtoa_r+0x472>
 800a8c4:	e6f0      	b.n	800a6a8 <_dtoa_r+0x4e0>
 800a8c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a8c8:	2a00      	cmp	r2, #0
 800a8ca:	f000 80db 	beq.w	800aa84 <_dtoa_r+0x8bc>
 800a8ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8d0:	2a01      	cmp	r2, #1
 800a8d2:	f300 80bf 	bgt.w	800aa54 <_dtoa_r+0x88c>
 800a8d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a8d8:	2a00      	cmp	r2, #0
 800a8da:	f000 80b7 	beq.w	800aa4c <_dtoa_r+0x884>
 800a8de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a8e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a8e4:	4646      	mov	r6, r8
 800a8e6:	9a08      	ldr	r2, [sp, #32]
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	441a      	add	r2, r3
 800a8ec:	4658      	mov	r0, fp
 800a8ee:	4498      	add	r8, r3
 800a8f0:	9208      	str	r2, [sp, #32]
 800a8f2:	f000 fc6b 	bl	800b1cc <__i2b>
 800a8f6:	4605      	mov	r5, r0
 800a8f8:	b15e      	cbz	r6, 800a912 <_dtoa_r+0x74a>
 800a8fa:	9b08      	ldr	r3, [sp, #32]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	dd08      	ble.n	800a912 <_dtoa_r+0x74a>
 800a900:	42b3      	cmp	r3, r6
 800a902:	9a08      	ldr	r2, [sp, #32]
 800a904:	bfa8      	it	ge
 800a906:	4633      	movge	r3, r6
 800a908:	eba8 0803 	sub.w	r8, r8, r3
 800a90c:	1af6      	subs	r6, r6, r3
 800a90e:	1ad3      	subs	r3, r2, r3
 800a910:	9308      	str	r3, [sp, #32]
 800a912:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a914:	b1f3      	cbz	r3, 800a954 <_dtoa_r+0x78c>
 800a916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f000 80b7 	beq.w	800aa8c <_dtoa_r+0x8c4>
 800a91e:	b18c      	cbz	r4, 800a944 <_dtoa_r+0x77c>
 800a920:	4629      	mov	r1, r5
 800a922:	4622      	mov	r2, r4
 800a924:	4658      	mov	r0, fp
 800a926:	f000 fd11 	bl	800b34c <__pow5mult>
 800a92a:	464a      	mov	r2, r9
 800a92c:	4601      	mov	r1, r0
 800a92e:	4605      	mov	r5, r0
 800a930:	4658      	mov	r0, fp
 800a932:	f000 fc61 	bl	800b1f8 <__multiply>
 800a936:	4649      	mov	r1, r9
 800a938:	9004      	str	r0, [sp, #16]
 800a93a:	4658      	mov	r0, fp
 800a93c:	f000 fb48 	bl	800afd0 <_Bfree>
 800a940:	9b04      	ldr	r3, [sp, #16]
 800a942:	4699      	mov	r9, r3
 800a944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a946:	1b1a      	subs	r2, r3, r4
 800a948:	d004      	beq.n	800a954 <_dtoa_r+0x78c>
 800a94a:	4649      	mov	r1, r9
 800a94c:	4658      	mov	r0, fp
 800a94e:	f000 fcfd 	bl	800b34c <__pow5mult>
 800a952:	4681      	mov	r9, r0
 800a954:	2101      	movs	r1, #1
 800a956:	4658      	mov	r0, fp
 800a958:	f000 fc38 	bl	800b1cc <__i2b>
 800a95c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a95e:	4604      	mov	r4, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	f000 81cf 	beq.w	800ad04 <_dtoa_r+0xb3c>
 800a966:	461a      	mov	r2, r3
 800a968:	4601      	mov	r1, r0
 800a96a:	4658      	mov	r0, fp
 800a96c:	f000 fcee 	bl	800b34c <__pow5mult>
 800a970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a972:	2b01      	cmp	r3, #1
 800a974:	4604      	mov	r4, r0
 800a976:	f300 8095 	bgt.w	800aaa4 <_dtoa_r+0x8dc>
 800a97a:	9b02      	ldr	r3, [sp, #8]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f040 8087 	bne.w	800aa90 <_dtoa_r+0x8c8>
 800a982:	9b03      	ldr	r3, [sp, #12]
 800a984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f040 8089 	bne.w	800aaa0 <_dtoa_r+0x8d8>
 800a98e:	9b03      	ldr	r3, [sp, #12]
 800a990:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a994:	0d1b      	lsrs	r3, r3, #20
 800a996:	051b      	lsls	r3, r3, #20
 800a998:	b12b      	cbz	r3, 800a9a6 <_dtoa_r+0x7de>
 800a99a:	9b08      	ldr	r3, [sp, #32]
 800a99c:	3301      	adds	r3, #1
 800a99e:	9308      	str	r3, [sp, #32]
 800a9a0:	f108 0801 	add.w	r8, r8, #1
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f000 81b0 	beq.w	800ad10 <_dtoa_r+0xb48>
 800a9b0:	6923      	ldr	r3, [r4, #16]
 800a9b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a9b6:	6918      	ldr	r0, [r3, #16]
 800a9b8:	f000 fbbc 	bl	800b134 <__hi0bits>
 800a9bc:	f1c0 0020 	rsb	r0, r0, #32
 800a9c0:	9b08      	ldr	r3, [sp, #32]
 800a9c2:	4418      	add	r0, r3
 800a9c4:	f010 001f 	ands.w	r0, r0, #31
 800a9c8:	d077      	beq.n	800aaba <_dtoa_r+0x8f2>
 800a9ca:	f1c0 0320 	rsb	r3, r0, #32
 800a9ce:	2b04      	cmp	r3, #4
 800a9d0:	dd6b      	ble.n	800aaaa <_dtoa_r+0x8e2>
 800a9d2:	9b08      	ldr	r3, [sp, #32]
 800a9d4:	f1c0 001c 	rsb	r0, r0, #28
 800a9d8:	4403      	add	r3, r0
 800a9da:	4480      	add	r8, r0
 800a9dc:	4406      	add	r6, r0
 800a9de:	9308      	str	r3, [sp, #32]
 800a9e0:	f1b8 0f00 	cmp.w	r8, #0
 800a9e4:	dd05      	ble.n	800a9f2 <_dtoa_r+0x82a>
 800a9e6:	4649      	mov	r1, r9
 800a9e8:	4642      	mov	r2, r8
 800a9ea:	4658      	mov	r0, fp
 800a9ec:	f000 fd08 	bl	800b400 <__lshift>
 800a9f0:	4681      	mov	r9, r0
 800a9f2:	9b08      	ldr	r3, [sp, #32]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	dd05      	ble.n	800aa04 <_dtoa_r+0x83c>
 800a9f8:	4621      	mov	r1, r4
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	4658      	mov	r0, fp
 800a9fe:	f000 fcff 	bl	800b400 <__lshift>
 800aa02:	4604      	mov	r4, r0
 800aa04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d059      	beq.n	800aabe <_dtoa_r+0x8f6>
 800aa0a:	4621      	mov	r1, r4
 800aa0c:	4648      	mov	r0, r9
 800aa0e:	f000 fd63 	bl	800b4d8 <__mcmp>
 800aa12:	2800      	cmp	r0, #0
 800aa14:	da53      	bge.n	800aabe <_dtoa_r+0x8f6>
 800aa16:	1e7b      	subs	r3, r7, #1
 800aa18:	9304      	str	r3, [sp, #16]
 800aa1a:	4649      	mov	r1, r9
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	220a      	movs	r2, #10
 800aa20:	4658      	mov	r0, fp
 800aa22:	f000 faf7 	bl	800b014 <__multadd>
 800aa26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa28:	4681      	mov	r9, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f000 8172 	beq.w	800ad14 <_dtoa_r+0xb4c>
 800aa30:	2300      	movs	r3, #0
 800aa32:	4629      	mov	r1, r5
 800aa34:	220a      	movs	r2, #10
 800aa36:	4658      	mov	r0, fp
 800aa38:	f000 faec 	bl	800b014 <__multadd>
 800aa3c:	9b00      	ldr	r3, [sp, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	4605      	mov	r5, r0
 800aa42:	dc67      	bgt.n	800ab14 <_dtoa_r+0x94c>
 800aa44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa46:	2b02      	cmp	r3, #2
 800aa48:	dc41      	bgt.n	800aace <_dtoa_r+0x906>
 800aa4a:	e063      	b.n	800ab14 <_dtoa_r+0x94c>
 800aa4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aa4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aa52:	e746      	b.n	800a8e2 <_dtoa_r+0x71a>
 800aa54:	9b07      	ldr	r3, [sp, #28]
 800aa56:	1e5c      	subs	r4, r3, #1
 800aa58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa5a:	42a3      	cmp	r3, r4
 800aa5c:	bfbf      	itttt	lt
 800aa5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800aa60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800aa62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800aa64:	1ae3      	sublt	r3, r4, r3
 800aa66:	bfb4      	ite	lt
 800aa68:	18d2      	addlt	r2, r2, r3
 800aa6a:	1b1c      	subge	r4, r3, r4
 800aa6c:	9b07      	ldr	r3, [sp, #28]
 800aa6e:	bfbc      	itt	lt
 800aa70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800aa72:	2400      	movlt	r4, #0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	bfb5      	itete	lt
 800aa78:	eba8 0603 	sublt.w	r6, r8, r3
 800aa7c:	9b07      	ldrge	r3, [sp, #28]
 800aa7e:	2300      	movlt	r3, #0
 800aa80:	4646      	movge	r6, r8
 800aa82:	e730      	b.n	800a8e6 <_dtoa_r+0x71e>
 800aa84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aa86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800aa88:	4646      	mov	r6, r8
 800aa8a:	e735      	b.n	800a8f8 <_dtoa_r+0x730>
 800aa8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa8e:	e75c      	b.n	800a94a <_dtoa_r+0x782>
 800aa90:	2300      	movs	r3, #0
 800aa92:	e788      	b.n	800a9a6 <_dtoa_r+0x7de>
 800aa94:	3fe00000 	.word	0x3fe00000
 800aa98:	40240000 	.word	0x40240000
 800aa9c:	40140000 	.word	0x40140000
 800aaa0:	9b02      	ldr	r3, [sp, #8]
 800aaa2:	e780      	b.n	800a9a6 <_dtoa_r+0x7de>
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800aaa8:	e782      	b.n	800a9b0 <_dtoa_r+0x7e8>
 800aaaa:	d099      	beq.n	800a9e0 <_dtoa_r+0x818>
 800aaac:	9a08      	ldr	r2, [sp, #32]
 800aaae:	331c      	adds	r3, #28
 800aab0:	441a      	add	r2, r3
 800aab2:	4498      	add	r8, r3
 800aab4:	441e      	add	r6, r3
 800aab6:	9208      	str	r2, [sp, #32]
 800aab8:	e792      	b.n	800a9e0 <_dtoa_r+0x818>
 800aaba:	4603      	mov	r3, r0
 800aabc:	e7f6      	b.n	800aaac <_dtoa_r+0x8e4>
 800aabe:	9b07      	ldr	r3, [sp, #28]
 800aac0:	9704      	str	r7, [sp, #16]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	dc20      	bgt.n	800ab08 <_dtoa_r+0x940>
 800aac6:	9300      	str	r3, [sp, #0]
 800aac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	dd1e      	ble.n	800ab0c <_dtoa_r+0x944>
 800aace:	9b00      	ldr	r3, [sp, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f47f aec0 	bne.w	800a856 <_dtoa_r+0x68e>
 800aad6:	4621      	mov	r1, r4
 800aad8:	2205      	movs	r2, #5
 800aada:	4658      	mov	r0, fp
 800aadc:	f000 fa9a 	bl	800b014 <__multadd>
 800aae0:	4601      	mov	r1, r0
 800aae2:	4604      	mov	r4, r0
 800aae4:	4648      	mov	r0, r9
 800aae6:	f000 fcf7 	bl	800b4d8 <__mcmp>
 800aaea:	2800      	cmp	r0, #0
 800aaec:	f77f aeb3 	ble.w	800a856 <_dtoa_r+0x68e>
 800aaf0:	4656      	mov	r6, sl
 800aaf2:	2331      	movs	r3, #49	@ 0x31
 800aaf4:	f806 3b01 	strb.w	r3, [r6], #1
 800aaf8:	9b04      	ldr	r3, [sp, #16]
 800aafa:	3301      	adds	r3, #1
 800aafc:	9304      	str	r3, [sp, #16]
 800aafe:	e6ae      	b.n	800a85e <_dtoa_r+0x696>
 800ab00:	9c07      	ldr	r4, [sp, #28]
 800ab02:	9704      	str	r7, [sp, #16]
 800ab04:	4625      	mov	r5, r4
 800ab06:	e7f3      	b.n	800aaf0 <_dtoa_r+0x928>
 800ab08:	9b07      	ldr	r3, [sp, #28]
 800ab0a:	9300      	str	r3, [sp, #0]
 800ab0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	f000 8104 	beq.w	800ad1c <_dtoa_r+0xb54>
 800ab14:	2e00      	cmp	r6, #0
 800ab16:	dd05      	ble.n	800ab24 <_dtoa_r+0x95c>
 800ab18:	4629      	mov	r1, r5
 800ab1a:	4632      	mov	r2, r6
 800ab1c:	4658      	mov	r0, fp
 800ab1e:	f000 fc6f 	bl	800b400 <__lshift>
 800ab22:	4605      	mov	r5, r0
 800ab24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d05a      	beq.n	800abe0 <_dtoa_r+0xa18>
 800ab2a:	6869      	ldr	r1, [r5, #4]
 800ab2c:	4658      	mov	r0, fp
 800ab2e:	f000 fa0f 	bl	800af50 <_Balloc>
 800ab32:	4606      	mov	r6, r0
 800ab34:	b928      	cbnz	r0, 800ab42 <_dtoa_r+0x97a>
 800ab36:	4b84      	ldr	r3, [pc, #528]	@ (800ad48 <_dtoa_r+0xb80>)
 800ab38:	4602      	mov	r2, r0
 800ab3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ab3e:	f7ff bb5a 	b.w	800a1f6 <_dtoa_r+0x2e>
 800ab42:	692a      	ldr	r2, [r5, #16]
 800ab44:	3202      	adds	r2, #2
 800ab46:	0092      	lsls	r2, r2, #2
 800ab48:	f105 010c 	add.w	r1, r5, #12
 800ab4c:	300c      	adds	r0, #12
 800ab4e:	f7ff fa9e 	bl	800a08e <memcpy>
 800ab52:	2201      	movs	r2, #1
 800ab54:	4631      	mov	r1, r6
 800ab56:	4658      	mov	r0, fp
 800ab58:	f000 fc52 	bl	800b400 <__lshift>
 800ab5c:	f10a 0301 	add.w	r3, sl, #1
 800ab60:	9307      	str	r3, [sp, #28]
 800ab62:	9b00      	ldr	r3, [sp, #0]
 800ab64:	4453      	add	r3, sl
 800ab66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab68:	9b02      	ldr	r3, [sp, #8]
 800ab6a:	f003 0301 	and.w	r3, r3, #1
 800ab6e:	462f      	mov	r7, r5
 800ab70:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab72:	4605      	mov	r5, r0
 800ab74:	9b07      	ldr	r3, [sp, #28]
 800ab76:	4621      	mov	r1, r4
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	4648      	mov	r0, r9
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	f7ff fa9b 	bl	800a0b8 <quorem>
 800ab82:	4639      	mov	r1, r7
 800ab84:	9002      	str	r0, [sp, #8]
 800ab86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ab8a:	4648      	mov	r0, r9
 800ab8c:	f000 fca4 	bl	800b4d8 <__mcmp>
 800ab90:	462a      	mov	r2, r5
 800ab92:	9008      	str	r0, [sp, #32]
 800ab94:	4621      	mov	r1, r4
 800ab96:	4658      	mov	r0, fp
 800ab98:	f000 fcba 	bl	800b510 <__mdiff>
 800ab9c:	68c2      	ldr	r2, [r0, #12]
 800ab9e:	4606      	mov	r6, r0
 800aba0:	bb02      	cbnz	r2, 800abe4 <_dtoa_r+0xa1c>
 800aba2:	4601      	mov	r1, r0
 800aba4:	4648      	mov	r0, r9
 800aba6:	f000 fc97 	bl	800b4d8 <__mcmp>
 800abaa:	4602      	mov	r2, r0
 800abac:	4631      	mov	r1, r6
 800abae:	4658      	mov	r0, fp
 800abb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800abb2:	f000 fa0d 	bl	800afd0 <_Bfree>
 800abb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abba:	9e07      	ldr	r6, [sp, #28]
 800abbc:	ea43 0102 	orr.w	r1, r3, r2
 800abc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abc2:	4319      	orrs	r1, r3
 800abc4:	d110      	bne.n	800abe8 <_dtoa_r+0xa20>
 800abc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800abca:	d029      	beq.n	800ac20 <_dtoa_r+0xa58>
 800abcc:	9b08      	ldr	r3, [sp, #32]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	dd02      	ble.n	800abd8 <_dtoa_r+0xa10>
 800abd2:	9b02      	ldr	r3, [sp, #8]
 800abd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800abd8:	9b00      	ldr	r3, [sp, #0]
 800abda:	f883 8000 	strb.w	r8, [r3]
 800abde:	e63f      	b.n	800a860 <_dtoa_r+0x698>
 800abe0:	4628      	mov	r0, r5
 800abe2:	e7bb      	b.n	800ab5c <_dtoa_r+0x994>
 800abe4:	2201      	movs	r2, #1
 800abe6:	e7e1      	b.n	800abac <_dtoa_r+0x9e4>
 800abe8:	9b08      	ldr	r3, [sp, #32]
 800abea:	2b00      	cmp	r3, #0
 800abec:	db04      	blt.n	800abf8 <_dtoa_r+0xa30>
 800abee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800abf0:	430b      	orrs	r3, r1
 800abf2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800abf4:	430b      	orrs	r3, r1
 800abf6:	d120      	bne.n	800ac3a <_dtoa_r+0xa72>
 800abf8:	2a00      	cmp	r2, #0
 800abfa:	dded      	ble.n	800abd8 <_dtoa_r+0xa10>
 800abfc:	4649      	mov	r1, r9
 800abfe:	2201      	movs	r2, #1
 800ac00:	4658      	mov	r0, fp
 800ac02:	f000 fbfd 	bl	800b400 <__lshift>
 800ac06:	4621      	mov	r1, r4
 800ac08:	4681      	mov	r9, r0
 800ac0a:	f000 fc65 	bl	800b4d8 <__mcmp>
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	dc03      	bgt.n	800ac1a <_dtoa_r+0xa52>
 800ac12:	d1e1      	bne.n	800abd8 <_dtoa_r+0xa10>
 800ac14:	f018 0f01 	tst.w	r8, #1
 800ac18:	d0de      	beq.n	800abd8 <_dtoa_r+0xa10>
 800ac1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac1e:	d1d8      	bne.n	800abd2 <_dtoa_r+0xa0a>
 800ac20:	9a00      	ldr	r2, [sp, #0]
 800ac22:	2339      	movs	r3, #57	@ 0x39
 800ac24:	7013      	strb	r3, [r2, #0]
 800ac26:	4633      	mov	r3, r6
 800ac28:	461e      	mov	r6, r3
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ac30:	2a39      	cmp	r2, #57	@ 0x39
 800ac32:	d052      	beq.n	800acda <_dtoa_r+0xb12>
 800ac34:	3201      	adds	r2, #1
 800ac36:	701a      	strb	r2, [r3, #0]
 800ac38:	e612      	b.n	800a860 <_dtoa_r+0x698>
 800ac3a:	2a00      	cmp	r2, #0
 800ac3c:	dd07      	ble.n	800ac4e <_dtoa_r+0xa86>
 800ac3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac42:	d0ed      	beq.n	800ac20 <_dtoa_r+0xa58>
 800ac44:	9a00      	ldr	r2, [sp, #0]
 800ac46:	f108 0301 	add.w	r3, r8, #1
 800ac4a:	7013      	strb	r3, [r2, #0]
 800ac4c:	e608      	b.n	800a860 <_dtoa_r+0x698>
 800ac4e:	9b07      	ldr	r3, [sp, #28]
 800ac50:	9a07      	ldr	r2, [sp, #28]
 800ac52:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ac56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d028      	beq.n	800acae <_dtoa_r+0xae6>
 800ac5c:	4649      	mov	r1, r9
 800ac5e:	2300      	movs	r3, #0
 800ac60:	220a      	movs	r2, #10
 800ac62:	4658      	mov	r0, fp
 800ac64:	f000 f9d6 	bl	800b014 <__multadd>
 800ac68:	42af      	cmp	r7, r5
 800ac6a:	4681      	mov	r9, r0
 800ac6c:	f04f 0300 	mov.w	r3, #0
 800ac70:	f04f 020a 	mov.w	r2, #10
 800ac74:	4639      	mov	r1, r7
 800ac76:	4658      	mov	r0, fp
 800ac78:	d107      	bne.n	800ac8a <_dtoa_r+0xac2>
 800ac7a:	f000 f9cb 	bl	800b014 <__multadd>
 800ac7e:	4607      	mov	r7, r0
 800ac80:	4605      	mov	r5, r0
 800ac82:	9b07      	ldr	r3, [sp, #28]
 800ac84:	3301      	adds	r3, #1
 800ac86:	9307      	str	r3, [sp, #28]
 800ac88:	e774      	b.n	800ab74 <_dtoa_r+0x9ac>
 800ac8a:	f000 f9c3 	bl	800b014 <__multadd>
 800ac8e:	4629      	mov	r1, r5
 800ac90:	4607      	mov	r7, r0
 800ac92:	2300      	movs	r3, #0
 800ac94:	220a      	movs	r2, #10
 800ac96:	4658      	mov	r0, fp
 800ac98:	f000 f9bc 	bl	800b014 <__multadd>
 800ac9c:	4605      	mov	r5, r0
 800ac9e:	e7f0      	b.n	800ac82 <_dtoa_r+0xaba>
 800aca0:	9b00      	ldr	r3, [sp, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	bfcc      	ite	gt
 800aca6:	461e      	movgt	r6, r3
 800aca8:	2601      	movle	r6, #1
 800acaa:	4456      	add	r6, sl
 800acac:	2700      	movs	r7, #0
 800acae:	4649      	mov	r1, r9
 800acb0:	2201      	movs	r2, #1
 800acb2:	4658      	mov	r0, fp
 800acb4:	f000 fba4 	bl	800b400 <__lshift>
 800acb8:	4621      	mov	r1, r4
 800acba:	4681      	mov	r9, r0
 800acbc:	f000 fc0c 	bl	800b4d8 <__mcmp>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	dcb0      	bgt.n	800ac26 <_dtoa_r+0xa5e>
 800acc4:	d102      	bne.n	800accc <_dtoa_r+0xb04>
 800acc6:	f018 0f01 	tst.w	r8, #1
 800acca:	d1ac      	bne.n	800ac26 <_dtoa_r+0xa5e>
 800accc:	4633      	mov	r3, r6
 800acce:	461e      	mov	r6, r3
 800acd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acd4:	2a30      	cmp	r2, #48	@ 0x30
 800acd6:	d0fa      	beq.n	800acce <_dtoa_r+0xb06>
 800acd8:	e5c2      	b.n	800a860 <_dtoa_r+0x698>
 800acda:	459a      	cmp	sl, r3
 800acdc:	d1a4      	bne.n	800ac28 <_dtoa_r+0xa60>
 800acde:	9b04      	ldr	r3, [sp, #16]
 800ace0:	3301      	adds	r3, #1
 800ace2:	9304      	str	r3, [sp, #16]
 800ace4:	2331      	movs	r3, #49	@ 0x31
 800ace6:	f88a 3000 	strb.w	r3, [sl]
 800acea:	e5b9      	b.n	800a860 <_dtoa_r+0x698>
 800acec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800acee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ad4c <_dtoa_r+0xb84>
 800acf2:	b11b      	cbz	r3, 800acfc <_dtoa_r+0xb34>
 800acf4:	f10a 0308 	add.w	r3, sl, #8
 800acf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800acfa:	6013      	str	r3, [r2, #0]
 800acfc:	4650      	mov	r0, sl
 800acfe:	b019      	add	sp, #100	@ 0x64
 800ad00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	f77f ae37 	ble.w	800a97a <_dtoa_r+0x7b2>
 800ad0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad10:	2001      	movs	r0, #1
 800ad12:	e655      	b.n	800a9c0 <_dtoa_r+0x7f8>
 800ad14:	9b00      	ldr	r3, [sp, #0]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	f77f aed6 	ble.w	800aac8 <_dtoa_r+0x900>
 800ad1c:	4656      	mov	r6, sl
 800ad1e:	4621      	mov	r1, r4
 800ad20:	4648      	mov	r0, r9
 800ad22:	f7ff f9c9 	bl	800a0b8 <quorem>
 800ad26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ad2a:	f806 8b01 	strb.w	r8, [r6], #1
 800ad2e:	9b00      	ldr	r3, [sp, #0]
 800ad30:	eba6 020a 	sub.w	r2, r6, sl
 800ad34:	4293      	cmp	r3, r2
 800ad36:	ddb3      	ble.n	800aca0 <_dtoa_r+0xad8>
 800ad38:	4649      	mov	r1, r9
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	220a      	movs	r2, #10
 800ad3e:	4658      	mov	r0, fp
 800ad40:	f000 f968 	bl	800b014 <__multadd>
 800ad44:	4681      	mov	r9, r0
 800ad46:	e7ea      	b.n	800ad1e <_dtoa_r+0xb56>
 800ad48:	0800dbcd 	.word	0x0800dbcd
 800ad4c:	0800db51 	.word	0x0800db51

0800ad50 <_free_r>:
 800ad50:	b538      	push	{r3, r4, r5, lr}
 800ad52:	4605      	mov	r5, r0
 800ad54:	2900      	cmp	r1, #0
 800ad56:	d041      	beq.n	800addc <_free_r+0x8c>
 800ad58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad5c:	1f0c      	subs	r4, r1, #4
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	bfb8      	it	lt
 800ad62:	18e4      	addlt	r4, r4, r3
 800ad64:	f000 f8e8 	bl	800af38 <__malloc_lock>
 800ad68:	4a1d      	ldr	r2, [pc, #116]	@ (800ade0 <_free_r+0x90>)
 800ad6a:	6813      	ldr	r3, [r2, #0]
 800ad6c:	b933      	cbnz	r3, 800ad7c <_free_r+0x2c>
 800ad6e:	6063      	str	r3, [r4, #4]
 800ad70:	6014      	str	r4, [r2, #0]
 800ad72:	4628      	mov	r0, r5
 800ad74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad78:	f000 b8e4 	b.w	800af44 <__malloc_unlock>
 800ad7c:	42a3      	cmp	r3, r4
 800ad7e:	d908      	bls.n	800ad92 <_free_r+0x42>
 800ad80:	6820      	ldr	r0, [r4, #0]
 800ad82:	1821      	adds	r1, r4, r0
 800ad84:	428b      	cmp	r3, r1
 800ad86:	bf01      	itttt	eq
 800ad88:	6819      	ldreq	r1, [r3, #0]
 800ad8a:	685b      	ldreq	r3, [r3, #4]
 800ad8c:	1809      	addeq	r1, r1, r0
 800ad8e:	6021      	streq	r1, [r4, #0]
 800ad90:	e7ed      	b.n	800ad6e <_free_r+0x1e>
 800ad92:	461a      	mov	r2, r3
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	b10b      	cbz	r3, 800ad9c <_free_r+0x4c>
 800ad98:	42a3      	cmp	r3, r4
 800ad9a:	d9fa      	bls.n	800ad92 <_free_r+0x42>
 800ad9c:	6811      	ldr	r1, [r2, #0]
 800ad9e:	1850      	adds	r0, r2, r1
 800ada0:	42a0      	cmp	r0, r4
 800ada2:	d10b      	bne.n	800adbc <_free_r+0x6c>
 800ada4:	6820      	ldr	r0, [r4, #0]
 800ada6:	4401      	add	r1, r0
 800ada8:	1850      	adds	r0, r2, r1
 800adaa:	4283      	cmp	r3, r0
 800adac:	6011      	str	r1, [r2, #0]
 800adae:	d1e0      	bne.n	800ad72 <_free_r+0x22>
 800adb0:	6818      	ldr	r0, [r3, #0]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	6053      	str	r3, [r2, #4]
 800adb6:	4408      	add	r0, r1
 800adb8:	6010      	str	r0, [r2, #0]
 800adba:	e7da      	b.n	800ad72 <_free_r+0x22>
 800adbc:	d902      	bls.n	800adc4 <_free_r+0x74>
 800adbe:	230c      	movs	r3, #12
 800adc0:	602b      	str	r3, [r5, #0]
 800adc2:	e7d6      	b.n	800ad72 <_free_r+0x22>
 800adc4:	6820      	ldr	r0, [r4, #0]
 800adc6:	1821      	adds	r1, r4, r0
 800adc8:	428b      	cmp	r3, r1
 800adca:	bf04      	itt	eq
 800adcc:	6819      	ldreq	r1, [r3, #0]
 800adce:	685b      	ldreq	r3, [r3, #4]
 800add0:	6063      	str	r3, [r4, #4]
 800add2:	bf04      	itt	eq
 800add4:	1809      	addeq	r1, r1, r0
 800add6:	6021      	streq	r1, [r4, #0]
 800add8:	6054      	str	r4, [r2, #4]
 800adda:	e7ca      	b.n	800ad72 <_free_r+0x22>
 800addc:	bd38      	pop	{r3, r4, r5, pc}
 800adde:	bf00      	nop
 800ade0:	2000104c 	.word	0x2000104c

0800ade4 <malloc>:
 800ade4:	4b02      	ldr	r3, [pc, #8]	@ (800adf0 <malloc+0xc>)
 800ade6:	4601      	mov	r1, r0
 800ade8:	6818      	ldr	r0, [r3, #0]
 800adea:	f000 b825 	b.w	800ae38 <_malloc_r>
 800adee:	bf00      	nop
 800adf0:	20000018 	.word	0x20000018

0800adf4 <sbrk_aligned>:
 800adf4:	b570      	push	{r4, r5, r6, lr}
 800adf6:	4e0f      	ldr	r6, [pc, #60]	@ (800ae34 <sbrk_aligned+0x40>)
 800adf8:	460c      	mov	r4, r1
 800adfa:	6831      	ldr	r1, [r6, #0]
 800adfc:	4605      	mov	r5, r0
 800adfe:	b911      	cbnz	r1, 800ae06 <sbrk_aligned+0x12>
 800ae00:	f001 ffd2 	bl	800cda8 <_sbrk_r>
 800ae04:	6030      	str	r0, [r6, #0]
 800ae06:	4621      	mov	r1, r4
 800ae08:	4628      	mov	r0, r5
 800ae0a:	f001 ffcd 	bl	800cda8 <_sbrk_r>
 800ae0e:	1c43      	adds	r3, r0, #1
 800ae10:	d103      	bne.n	800ae1a <sbrk_aligned+0x26>
 800ae12:	f04f 34ff 	mov.w	r4, #4294967295
 800ae16:	4620      	mov	r0, r4
 800ae18:	bd70      	pop	{r4, r5, r6, pc}
 800ae1a:	1cc4      	adds	r4, r0, #3
 800ae1c:	f024 0403 	bic.w	r4, r4, #3
 800ae20:	42a0      	cmp	r0, r4
 800ae22:	d0f8      	beq.n	800ae16 <sbrk_aligned+0x22>
 800ae24:	1a21      	subs	r1, r4, r0
 800ae26:	4628      	mov	r0, r5
 800ae28:	f001 ffbe 	bl	800cda8 <_sbrk_r>
 800ae2c:	3001      	adds	r0, #1
 800ae2e:	d1f2      	bne.n	800ae16 <sbrk_aligned+0x22>
 800ae30:	e7ef      	b.n	800ae12 <sbrk_aligned+0x1e>
 800ae32:	bf00      	nop
 800ae34:	20001048 	.word	0x20001048

0800ae38 <_malloc_r>:
 800ae38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae3c:	1ccd      	adds	r5, r1, #3
 800ae3e:	f025 0503 	bic.w	r5, r5, #3
 800ae42:	3508      	adds	r5, #8
 800ae44:	2d0c      	cmp	r5, #12
 800ae46:	bf38      	it	cc
 800ae48:	250c      	movcc	r5, #12
 800ae4a:	2d00      	cmp	r5, #0
 800ae4c:	4606      	mov	r6, r0
 800ae4e:	db01      	blt.n	800ae54 <_malloc_r+0x1c>
 800ae50:	42a9      	cmp	r1, r5
 800ae52:	d904      	bls.n	800ae5e <_malloc_r+0x26>
 800ae54:	230c      	movs	r3, #12
 800ae56:	6033      	str	r3, [r6, #0]
 800ae58:	2000      	movs	r0, #0
 800ae5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af34 <_malloc_r+0xfc>
 800ae62:	f000 f869 	bl	800af38 <__malloc_lock>
 800ae66:	f8d8 3000 	ldr.w	r3, [r8]
 800ae6a:	461c      	mov	r4, r3
 800ae6c:	bb44      	cbnz	r4, 800aec0 <_malloc_r+0x88>
 800ae6e:	4629      	mov	r1, r5
 800ae70:	4630      	mov	r0, r6
 800ae72:	f7ff ffbf 	bl	800adf4 <sbrk_aligned>
 800ae76:	1c43      	adds	r3, r0, #1
 800ae78:	4604      	mov	r4, r0
 800ae7a:	d158      	bne.n	800af2e <_malloc_r+0xf6>
 800ae7c:	f8d8 4000 	ldr.w	r4, [r8]
 800ae80:	4627      	mov	r7, r4
 800ae82:	2f00      	cmp	r7, #0
 800ae84:	d143      	bne.n	800af0e <_malloc_r+0xd6>
 800ae86:	2c00      	cmp	r4, #0
 800ae88:	d04b      	beq.n	800af22 <_malloc_r+0xea>
 800ae8a:	6823      	ldr	r3, [r4, #0]
 800ae8c:	4639      	mov	r1, r7
 800ae8e:	4630      	mov	r0, r6
 800ae90:	eb04 0903 	add.w	r9, r4, r3
 800ae94:	f001 ff88 	bl	800cda8 <_sbrk_r>
 800ae98:	4581      	cmp	r9, r0
 800ae9a:	d142      	bne.n	800af22 <_malloc_r+0xea>
 800ae9c:	6821      	ldr	r1, [r4, #0]
 800ae9e:	1a6d      	subs	r5, r5, r1
 800aea0:	4629      	mov	r1, r5
 800aea2:	4630      	mov	r0, r6
 800aea4:	f7ff ffa6 	bl	800adf4 <sbrk_aligned>
 800aea8:	3001      	adds	r0, #1
 800aeaa:	d03a      	beq.n	800af22 <_malloc_r+0xea>
 800aeac:	6823      	ldr	r3, [r4, #0]
 800aeae:	442b      	add	r3, r5
 800aeb0:	6023      	str	r3, [r4, #0]
 800aeb2:	f8d8 3000 	ldr.w	r3, [r8]
 800aeb6:	685a      	ldr	r2, [r3, #4]
 800aeb8:	bb62      	cbnz	r2, 800af14 <_malloc_r+0xdc>
 800aeba:	f8c8 7000 	str.w	r7, [r8]
 800aebe:	e00f      	b.n	800aee0 <_malloc_r+0xa8>
 800aec0:	6822      	ldr	r2, [r4, #0]
 800aec2:	1b52      	subs	r2, r2, r5
 800aec4:	d420      	bmi.n	800af08 <_malloc_r+0xd0>
 800aec6:	2a0b      	cmp	r2, #11
 800aec8:	d917      	bls.n	800aefa <_malloc_r+0xc2>
 800aeca:	1961      	adds	r1, r4, r5
 800aecc:	42a3      	cmp	r3, r4
 800aece:	6025      	str	r5, [r4, #0]
 800aed0:	bf18      	it	ne
 800aed2:	6059      	strne	r1, [r3, #4]
 800aed4:	6863      	ldr	r3, [r4, #4]
 800aed6:	bf08      	it	eq
 800aed8:	f8c8 1000 	streq.w	r1, [r8]
 800aedc:	5162      	str	r2, [r4, r5]
 800aede:	604b      	str	r3, [r1, #4]
 800aee0:	4630      	mov	r0, r6
 800aee2:	f000 f82f 	bl	800af44 <__malloc_unlock>
 800aee6:	f104 000b 	add.w	r0, r4, #11
 800aeea:	1d23      	adds	r3, r4, #4
 800aeec:	f020 0007 	bic.w	r0, r0, #7
 800aef0:	1ac2      	subs	r2, r0, r3
 800aef2:	bf1c      	itt	ne
 800aef4:	1a1b      	subne	r3, r3, r0
 800aef6:	50a3      	strne	r3, [r4, r2]
 800aef8:	e7af      	b.n	800ae5a <_malloc_r+0x22>
 800aefa:	6862      	ldr	r2, [r4, #4]
 800aefc:	42a3      	cmp	r3, r4
 800aefe:	bf0c      	ite	eq
 800af00:	f8c8 2000 	streq.w	r2, [r8]
 800af04:	605a      	strne	r2, [r3, #4]
 800af06:	e7eb      	b.n	800aee0 <_malloc_r+0xa8>
 800af08:	4623      	mov	r3, r4
 800af0a:	6864      	ldr	r4, [r4, #4]
 800af0c:	e7ae      	b.n	800ae6c <_malloc_r+0x34>
 800af0e:	463c      	mov	r4, r7
 800af10:	687f      	ldr	r7, [r7, #4]
 800af12:	e7b6      	b.n	800ae82 <_malloc_r+0x4a>
 800af14:	461a      	mov	r2, r3
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	42a3      	cmp	r3, r4
 800af1a:	d1fb      	bne.n	800af14 <_malloc_r+0xdc>
 800af1c:	2300      	movs	r3, #0
 800af1e:	6053      	str	r3, [r2, #4]
 800af20:	e7de      	b.n	800aee0 <_malloc_r+0xa8>
 800af22:	230c      	movs	r3, #12
 800af24:	6033      	str	r3, [r6, #0]
 800af26:	4630      	mov	r0, r6
 800af28:	f000 f80c 	bl	800af44 <__malloc_unlock>
 800af2c:	e794      	b.n	800ae58 <_malloc_r+0x20>
 800af2e:	6005      	str	r5, [r0, #0]
 800af30:	e7d6      	b.n	800aee0 <_malloc_r+0xa8>
 800af32:	bf00      	nop
 800af34:	2000104c 	.word	0x2000104c

0800af38 <__malloc_lock>:
 800af38:	4801      	ldr	r0, [pc, #4]	@ (800af40 <__malloc_lock+0x8>)
 800af3a:	f7ff b8a6 	b.w	800a08a <__retarget_lock_acquire_recursive>
 800af3e:	bf00      	nop
 800af40:	20001044 	.word	0x20001044

0800af44 <__malloc_unlock>:
 800af44:	4801      	ldr	r0, [pc, #4]	@ (800af4c <__malloc_unlock+0x8>)
 800af46:	f7ff b8a1 	b.w	800a08c <__retarget_lock_release_recursive>
 800af4a:	bf00      	nop
 800af4c:	20001044 	.word	0x20001044

0800af50 <_Balloc>:
 800af50:	b570      	push	{r4, r5, r6, lr}
 800af52:	69c6      	ldr	r6, [r0, #28]
 800af54:	4604      	mov	r4, r0
 800af56:	460d      	mov	r5, r1
 800af58:	b976      	cbnz	r6, 800af78 <_Balloc+0x28>
 800af5a:	2010      	movs	r0, #16
 800af5c:	f7ff ff42 	bl	800ade4 <malloc>
 800af60:	4602      	mov	r2, r0
 800af62:	61e0      	str	r0, [r4, #28]
 800af64:	b920      	cbnz	r0, 800af70 <_Balloc+0x20>
 800af66:	4b18      	ldr	r3, [pc, #96]	@ (800afc8 <_Balloc+0x78>)
 800af68:	4818      	ldr	r0, [pc, #96]	@ (800afcc <_Balloc+0x7c>)
 800af6a:	216b      	movs	r1, #107	@ 0x6b
 800af6c:	f001 ff34 	bl	800cdd8 <__assert_func>
 800af70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af74:	6006      	str	r6, [r0, #0]
 800af76:	60c6      	str	r6, [r0, #12]
 800af78:	69e6      	ldr	r6, [r4, #28]
 800af7a:	68f3      	ldr	r3, [r6, #12]
 800af7c:	b183      	cbz	r3, 800afa0 <_Balloc+0x50>
 800af7e:	69e3      	ldr	r3, [r4, #28]
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af86:	b9b8      	cbnz	r0, 800afb8 <_Balloc+0x68>
 800af88:	2101      	movs	r1, #1
 800af8a:	fa01 f605 	lsl.w	r6, r1, r5
 800af8e:	1d72      	adds	r2, r6, #5
 800af90:	0092      	lsls	r2, r2, #2
 800af92:	4620      	mov	r0, r4
 800af94:	f001 ff3e 	bl	800ce14 <_calloc_r>
 800af98:	b160      	cbz	r0, 800afb4 <_Balloc+0x64>
 800af9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af9e:	e00e      	b.n	800afbe <_Balloc+0x6e>
 800afa0:	2221      	movs	r2, #33	@ 0x21
 800afa2:	2104      	movs	r1, #4
 800afa4:	4620      	mov	r0, r4
 800afa6:	f001 ff35 	bl	800ce14 <_calloc_r>
 800afaa:	69e3      	ldr	r3, [r4, #28]
 800afac:	60f0      	str	r0, [r6, #12]
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1e4      	bne.n	800af7e <_Balloc+0x2e>
 800afb4:	2000      	movs	r0, #0
 800afb6:	bd70      	pop	{r4, r5, r6, pc}
 800afb8:	6802      	ldr	r2, [r0, #0]
 800afba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afbe:	2300      	movs	r3, #0
 800afc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afc4:	e7f7      	b.n	800afb6 <_Balloc+0x66>
 800afc6:	bf00      	nop
 800afc8:	0800db5e 	.word	0x0800db5e
 800afcc:	0800dbde 	.word	0x0800dbde

0800afd0 <_Bfree>:
 800afd0:	b570      	push	{r4, r5, r6, lr}
 800afd2:	69c6      	ldr	r6, [r0, #28]
 800afd4:	4605      	mov	r5, r0
 800afd6:	460c      	mov	r4, r1
 800afd8:	b976      	cbnz	r6, 800aff8 <_Bfree+0x28>
 800afda:	2010      	movs	r0, #16
 800afdc:	f7ff ff02 	bl	800ade4 <malloc>
 800afe0:	4602      	mov	r2, r0
 800afe2:	61e8      	str	r0, [r5, #28]
 800afe4:	b920      	cbnz	r0, 800aff0 <_Bfree+0x20>
 800afe6:	4b09      	ldr	r3, [pc, #36]	@ (800b00c <_Bfree+0x3c>)
 800afe8:	4809      	ldr	r0, [pc, #36]	@ (800b010 <_Bfree+0x40>)
 800afea:	218f      	movs	r1, #143	@ 0x8f
 800afec:	f001 fef4 	bl	800cdd8 <__assert_func>
 800aff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aff4:	6006      	str	r6, [r0, #0]
 800aff6:	60c6      	str	r6, [r0, #12]
 800aff8:	b13c      	cbz	r4, 800b00a <_Bfree+0x3a>
 800affa:	69eb      	ldr	r3, [r5, #28]
 800affc:	6862      	ldr	r2, [r4, #4]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b004:	6021      	str	r1, [r4, #0]
 800b006:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b00a:	bd70      	pop	{r4, r5, r6, pc}
 800b00c:	0800db5e 	.word	0x0800db5e
 800b010:	0800dbde 	.word	0x0800dbde

0800b014 <__multadd>:
 800b014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b018:	690d      	ldr	r5, [r1, #16]
 800b01a:	4607      	mov	r7, r0
 800b01c:	460c      	mov	r4, r1
 800b01e:	461e      	mov	r6, r3
 800b020:	f101 0c14 	add.w	ip, r1, #20
 800b024:	2000      	movs	r0, #0
 800b026:	f8dc 3000 	ldr.w	r3, [ip]
 800b02a:	b299      	uxth	r1, r3
 800b02c:	fb02 6101 	mla	r1, r2, r1, r6
 800b030:	0c1e      	lsrs	r6, r3, #16
 800b032:	0c0b      	lsrs	r3, r1, #16
 800b034:	fb02 3306 	mla	r3, r2, r6, r3
 800b038:	b289      	uxth	r1, r1
 800b03a:	3001      	adds	r0, #1
 800b03c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b040:	4285      	cmp	r5, r0
 800b042:	f84c 1b04 	str.w	r1, [ip], #4
 800b046:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b04a:	dcec      	bgt.n	800b026 <__multadd+0x12>
 800b04c:	b30e      	cbz	r6, 800b092 <__multadd+0x7e>
 800b04e:	68a3      	ldr	r3, [r4, #8]
 800b050:	42ab      	cmp	r3, r5
 800b052:	dc19      	bgt.n	800b088 <__multadd+0x74>
 800b054:	6861      	ldr	r1, [r4, #4]
 800b056:	4638      	mov	r0, r7
 800b058:	3101      	adds	r1, #1
 800b05a:	f7ff ff79 	bl	800af50 <_Balloc>
 800b05e:	4680      	mov	r8, r0
 800b060:	b928      	cbnz	r0, 800b06e <__multadd+0x5a>
 800b062:	4602      	mov	r2, r0
 800b064:	4b0c      	ldr	r3, [pc, #48]	@ (800b098 <__multadd+0x84>)
 800b066:	480d      	ldr	r0, [pc, #52]	@ (800b09c <__multadd+0x88>)
 800b068:	21ba      	movs	r1, #186	@ 0xba
 800b06a:	f001 feb5 	bl	800cdd8 <__assert_func>
 800b06e:	6922      	ldr	r2, [r4, #16]
 800b070:	3202      	adds	r2, #2
 800b072:	f104 010c 	add.w	r1, r4, #12
 800b076:	0092      	lsls	r2, r2, #2
 800b078:	300c      	adds	r0, #12
 800b07a:	f7ff f808 	bl	800a08e <memcpy>
 800b07e:	4621      	mov	r1, r4
 800b080:	4638      	mov	r0, r7
 800b082:	f7ff ffa5 	bl	800afd0 <_Bfree>
 800b086:	4644      	mov	r4, r8
 800b088:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b08c:	3501      	adds	r5, #1
 800b08e:	615e      	str	r6, [r3, #20]
 800b090:	6125      	str	r5, [r4, #16]
 800b092:	4620      	mov	r0, r4
 800b094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b098:	0800dbcd 	.word	0x0800dbcd
 800b09c:	0800dbde 	.word	0x0800dbde

0800b0a0 <__s2b>:
 800b0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0a4:	460c      	mov	r4, r1
 800b0a6:	4615      	mov	r5, r2
 800b0a8:	461f      	mov	r7, r3
 800b0aa:	2209      	movs	r2, #9
 800b0ac:	3308      	adds	r3, #8
 800b0ae:	4606      	mov	r6, r0
 800b0b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	db09      	blt.n	800b0d0 <__s2b+0x30>
 800b0bc:	4630      	mov	r0, r6
 800b0be:	f7ff ff47 	bl	800af50 <_Balloc>
 800b0c2:	b940      	cbnz	r0, 800b0d6 <__s2b+0x36>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	4b19      	ldr	r3, [pc, #100]	@ (800b12c <__s2b+0x8c>)
 800b0c8:	4819      	ldr	r0, [pc, #100]	@ (800b130 <__s2b+0x90>)
 800b0ca:	21d3      	movs	r1, #211	@ 0xd3
 800b0cc:	f001 fe84 	bl	800cdd8 <__assert_func>
 800b0d0:	0052      	lsls	r2, r2, #1
 800b0d2:	3101      	adds	r1, #1
 800b0d4:	e7f0      	b.n	800b0b8 <__s2b+0x18>
 800b0d6:	9b08      	ldr	r3, [sp, #32]
 800b0d8:	6143      	str	r3, [r0, #20]
 800b0da:	2d09      	cmp	r5, #9
 800b0dc:	f04f 0301 	mov.w	r3, #1
 800b0e0:	6103      	str	r3, [r0, #16]
 800b0e2:	dd16      	ble.n	800b112 <__s2b+0x72>
 800b0e4:	f104 0909 	add.w	r9, r4, #9
 800b0e8:	46c8      	mov	r8, r9
 800b0ea:	442c      	add	r4, r5
 800b0ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b0f0:	4601      	mov	r1, r0
 800b0f2:	3b30      	subs	r3, #48	@ 0x30
 800b0f4:	220a      	movs	r2, #10
 800b0f6:	4630      	mov	r0, r6
 800b0f8:	f7ff ff8c 	bl	800b014 <__multadd>
 800b0fc:	45a0      	cmp	r8, r4
 800b0fe:	d1f5      	bne.n	800b0ec <__s2b+0x4c>
 800b100:	f1a5 0408 	sub.w	r4, r5, #8
 800b104:	444c      	add	r4, r9
 800b106:	1b2d      	subs	r5, r5, r4
 800b108:	1963      	adds	r3, r4, r5
 800b10a:	42bb      	cmp	r3, r7
 800b10c:	db04      	blt.n	800b118 <__s2b+0x78>
 800b10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b112:	340a      	adds	r4, #10
 800b114:	2509      	movs	r5, #9
 800b116:	e7f6      	b.n	800b106 <__s2b+0x66>
 800b118:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b11c:	4601      	mov	r1, r0
 800b11e:	3b30      	subs	r3, #48	@ 0x30
 800b120:	220a      	movs	r2, #10
 800b122:	4630      	mov	r0, r6
 800b124:	f7ff ff76 	bl	800b014 <__multadd>
 800b128:	e7ee      	b.n	800b108 <__s2b+0x68>
 800b12a:	bf00      	nop
 800b12c:	0800dbcd 	.word	0x0800dbcd
 800b130:	0800dbde 	.word	0x0800dbde

0800b134 <__hi0bits>:
 800b134:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b138:	4603      	mov	r3, r0
 800b13a:	bf36      	itet	cc
 800b13c:	0403      	lslcc	r3, r0, #16
 800b13e:	2000      	movcs	r0, #0
 800b140:	2010      	movcc	r0, #16
 800b142:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b146:	bf3c      	itt	cc
 800b148:	021b      	lslcc	r3, r3, #8
 800b14a:	3008      	addcc	r0, #8
 800b14c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b150:	bf3c      	itt	cc
 800b152:	011b      	lslcc	r3, r3, #4
 800b154:	3004      	addcc	r0, #4
 800b156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b15a:	bf3c      	itt	cc
 800b15c:	009b      	lslcc	r3, r3, #2
 800b15e:	3002      	addcc	r0, #2
 800b160:	2b00      	cmp	r3, #0
 800b162:	db05      	blt.n	800b170 <__hi0bits+0x3c>
 800b164:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b168:	f100 0001 	add.w	r0, r0, #1
 800b16c:	bf08      	it	eq
 800b16e:	2020      	moveq	r0, #32
 800b170:	4770      	bx	lr

0800b172 <__lo0bits>:
 800b172:	6803      	ldr	r3, [r0, #0]
 800b174:	4602      	mov	r2, r0
 800b176:	f013 0007 	ands.w	r0, r3, #7
 800b17a:	d00b      	beq.n	800b194 <__lo0bits+0x22>
 800b17c:	07d9      	lsls	r1, r3, #31
 800b17e:	d421      	bmi.n	800b1c4 <__lo0bits+0x52>
 800b180:	0798      	lsls	r0, r3, #30
 800b182:	bf49      	itett	mi
 800b184:	085b      	lsrmi	r3, r3, #1
 800b186:	089b      	lsrpl	r3, r3, #2
 800b188:	2001      	movmi	r0, #1
 800b18a:	6013      	strmi	r3, [r2, #0]
 800b18c:	bf5c      	itt	pl
 800b18e:	6013      	strpl	r3, [r2, #0]
 800b190:	2002      	movpl	r0, #2
 800b192:	4770      	bx	lr
 800b194:	b299      	uxth	r1, r3
 800b196:	b909      	cbnz	r1, 800b19c <__lo0bits+0x2a>
 800b198:	0c1b      	lsrs	r3, r3, #16
 800b19a:	2010      	movs	r0, #16
 800b19c:	b2d9      	uxtb	r1, r3
 800b19e:	b909      	cbnz	r1, 800b1a4 <__lo0bits+0x32>
 800b1a0:	3008      	adds	r0, #8
 800b1a2:	0a1b      	lsrs	r3, r3, #8
 800b1a4:	0719      	lsls	r1, r3, #28
 800b1a6:	bf04      	itt	eq
 800b1a8:	091b      	lsreq	r3, r3, #4
 800b1aa:	3004      	addeq	r0, #4
 800b1ac:	0799      	lsls	r1, r3, #30
 800b1ae:	bf04      	itt	eq
 800b1b0:	089b      	lsreq	r3, r3, #2
 800b1b2:	3002      	addeq	r0, #2
 800b1b4:	07d9      	lsls	r1, r3, #31
 800b1b6:	d403      	bmi.n	800b1c0 <__lo0bits+0x4e>
 800b1b8:	085b      	lsrs	r3, r3, #1
 800b1ba:	f100 0001 	add.w	r0, r0, #1
 800b1be:	d003      	beq.n	800b1c8 <__lo0bits+0x56>
 800b1c0:	6013      	str	r3, [r2, #0]
 800b1c2:	4770      	bx	lr
 800b1c4:	2000      	movs	r0, #0
 800b1c6:	4770      	bx	lr
 800b1c8:	2020      	movs	r0, #32
 800b1ca:	4770      	bx	lr

0800b1cc <__i2b>:
 800b1cc:	b510      	push	{r4, lr}
 800b1ce:	460c      	mov	r4, r1
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	f7ff febd 	bl	800af50 <_Balloc>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	b928      	cbnz	r0, 800b1e6 <__i2b+0x1a>
 800b1da:	4b05      	ldr	r3, [pc, #20]	@ (800b1f0 <__i2b+0x24>)
 800b1dc:	4805      	ldr	r0, [pc, #20]	@ (800b1f4 <__i2b+0x28>)
 800b1de:	f240 1145 	movw	r1, #325	@ 0x145
 800b1e2:	f001 fdf9 	bl	800cdd8 <__assert_func>
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	6144      	str	r4, [r0, #20]
 800b1ea:	6103      	str	r3, [r0, #16]
 800b1ec:	bd10      	pop	{r4, pc}
 800b1ee:	bf00      	nop
 800b1f0:	0800dbcd 	.word	0x0800dbcd
 800b1f4:	0800dbde 	.word	0x0800dbde

0800b1f8 <__multiply>:
 800b1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fc:	4614      	mov	r4, r2
 800b1fe:	690a      	ldr	r2, [r1, #16]
 800b200:	6923      	ldr	r3, [r4, #16]
 800b202:	429a      	cmp	r2, r3
 800b204:	bfa8      	it	ge
 800b206:	4623      	movge	r3, r4
 800b208:	460f      	mov	r7, r1
 800b20a:	bfa4      	itt	ge
 800b20c:	460c      	movge	r4, r1
 800b20e:	461f      	movge	r7, r3
 800b210:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b214:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b218:	68a3      	ldr	r3, [r4, #8]
 800b21a:	6861      	ldr	r1, [r4, #4]
 800b21c:	eb0a 0609 	add.w	r6, sl, r9
 800b220:	42b3      	cmp	r3, r6
 800b222:	b085      	sub	sp, #20
 800b224:	bfb8      	it	lt
 800b226:	3101      	addlt	r1, #1
 800b228:	f7ff fe92 	bl	800af50 <_Balloc>
 800b22c:	b930      	cbnz	r0, 800b23c <__multiply+0x44>
 800b22e:	4602      	mov	r2, r0
 800b230:	4b44      	ldr	r3, [pc, #272]	@ (800b344 <__multiply+0x14c>)
 800b232:	4845      	ldr	r0, [pc, #276]	@ (800b348 <__multiply+0x150>)
 800b234:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b238:	f001 fdce 	bl	800cdd8 <__assert_func>
 800b23c:	f100 0514 	add.w	r5, r0, #20
 800b240:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b244:	462b      	mov	r3, r5
 800b246:	2200      	movs	r2, #0
 800b248:	4543      	cmp	r3, r8
 800b24a:	d321      	bcc.n	800b290 <__multiply+0x98>
 800b24c:	f107 0114 	add.w	r1, r7, #20
 800b250:	f104 0214 	add.w	r2, r4, #20
 800b254:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b258:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b25c:	9302      	str	r3, [sp, #8]
 800b25e:	1b13      	subs	r3, r2, r4
 800b260:	3b15      	subs	r3, #21
 800b262:	f023 0303 	bic.w	r3, r3, #3
 800b266:	3304      	adds	r3, #4
 800b268:	f104 0715 	add.w	r7, r4, #21
 800b26c:	42ba      	cmp	r2, r7
 800b26e:	bf38      	it	cc
 800b270:	2304      	movcc	r3, #4
 800b272:	9301      	str	r3, [sp, #4]
 800b274:	9b02      	ldr	r3, [sp, #8]
 800b276:	9103      	str	r1, [sp, #12]
 800b278:	428b      	cmp	r3, r1
 800b27a:	d80c      	bhi.n	800b296 <__multiply+0x9e>
 800b27c:	2e00      	cmp	r6, #0
 800b27e:	dd03      	ble.n	800b288 <__multiply+0x90>
 800b280:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b284:	2b00      	cmp	r3, #0
 800b286:	d05b      	beq.n	800b340 <__multiply+0x148>
 800b288:	6106      	str	r6, [r0, #16]
 800b28a:	b005      	add	sp, #20
 800b28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b290:	f843 2b04 	str.w	r2, [r3], #4
 800b294:	e7d8      	b.n	800b248 <__multiply+0x50>
 800b296:	f8b1 a000 	ldrh.w	sl, [r1]
 800b29a:	f1ba 0f00 	cmp.w	sl, #0
 800b29e:	d024      	beq.n	800b2ea <__multiply+0xf2>
 800b2a0:	f104 0e14 	add.w	lr, r4, #20
 800b2a4:	46a9      	mov	r9, r5
 800b2a6:	f04f 0c00 	mov.w	ip, #0
 800b2aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b2ae:	f8d9 3000 	ldr.w	r3, [r9]
 800b2b2:	fa1f fb87 	uxth.w	fp, r7
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	fb0a 330b 	mla	r3, sl, fp, r3
 800b2bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b2c0:	f8d9 7000 	ldr.w	r7, [r9]
 800b2c4:	4463      	add	r3, ip
 800b2c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b2ca:	fb0a c70b 	mla	r7, sl, fp, ip
 800b2ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b2d8:	4572      	cmp	r2, lr
 800b2da:	f849 3b04 	str.w	r3, [r9], #4
 800b2de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b2e2:	d8e2      	bhi.n	800b2aa <__multiply+0xb2>
 800b2e4:	9b01      	ldr	r3, [sp, #4]
 800b2e6:	f845 c003 	str.w	ip, [r5, r3]
 800b2ea:	9b03      	ldr	r3, [sp, #12]
 800b2ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b2f0:	3104      	adds	r1, #4
 800b2f2:	f1b9 0f00 	cmp.w	r9, #0
 800b2f6:	d021      	beq.n	800b33c <__multiply+0x144>
 800b2f8:	682b      	ldr	r3, [r5, #0]
 800b2fa:	f104 0c14 	add.w	ip, r4, #20
 800b2fe:	46ae      	mov	lr, r5
 800b300:	f04f 0a00 	mov.w	sl, #0
 800b304:	f8bc b000 	ldrh.w	fp, [ip]
 800b308:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b30c:	fb09 770b 	mla	r7, r9, fp, r7
 800b310:	4457      	add	r7, sl
 800b312:	b29b      	uxth	r3, r3
 800b314:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b318:	f84e 3b04 	str.w	r3, [lr], #4
 800b31c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b320:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b324:	f8be 3000 	ldrh.w	r3, [lr]
 800b328:	fb09 330a 	mla	r3, r9, sl, r3
 800b32c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b330:	4562      	cmp	r2, ip
 800b332:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b336:	d8e5      	bhi.n	800b304 <__multiply+0x10c>
 800b338:	9f01      	ldr	r7, [sp, #4]
 800b33a:	51eb      	str	r3, [r5, r7]
 800b33c:	3504      	adds	r5, #4
 800b33e:	e799      	b.n	800b274 <__multiply+0x7c>
 800b340:	3e01      	subs	r6, #1
 800b342:	e79b      	b.n	800b27c <__multiply+0x84>
 800b344:	0800dbcd 	.word	0x0800dbcd
 800b348:	0800dbde 	.word	0x0800dbde

0800b34c <__pow5mult>:
 800b34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b350:	4615      	mov	r5, r2
 800b352:	f012 0203 	ands.w	r2, r2, #3
 800b356:	4607      	mov	r7, r0
 800b358:	460e      	mov	r6, r1
 800b35a:	d007      	beq.n	800b36c <__pow5mult+0x20>
 800b35c:	4c25      	ldr	r4, [pc, #148]	@ (800b3f4 <__pow5mult+0xa8>)
 800b35e:	3a01      	subs	r2, #1
 800b360:	2300      	movs	r3, #0
 800b362:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b366:	f7ff fe55 	bl	800b014 <__multadd>
 800b36a:	4606      	mov	r6, r0
 800b36c:	10ad      	asrs	r5, r5, #2
 800b36e:	d03d      	beq.n	800b3ec <__pow5mult+0xa0>
 800b370:	69fc      	ldr	r4, [r7, #28]
 800b372:	b97c      	cbnz	r4, 800b394 <__pow5mult+0x48>
 800b374:	2010      	movs	r0, #16
 800b376:	f7ff fd35 	bl	800ade4 <malloc>
 800b37a:	4602      	mov	r2, r0
 800b37c:	61f8      	str	r0, [r7, #28]
 800b37e:	b928      	cbnz	r0, 800b38c <__pow5mult+0x40>
 800b380:	4b1d      	ldr	r3, [pc, #116]	@ (800b3f8 <__pow5mult+0xac>)
 800b382:	481e      	ldr	r0, [pc, #120]	@ (800b3fc <__pow5mult+0xb0>)
 800b384:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b388:	f001 fd26 	bl	800cdd8 <__assert_func>
 800b38c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b390:	6004      	str	r4, [r0, #0]
 800b392:	60c4      	str	r4, [r0, #12]
 800b394:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b39c:	b94c      	cbnz	r4, 800b3b2 <__pow5mult+0x66>
 800b39e:	f240 2171 	movw	r1, #625	@ 0x271
 800b3a2:	4638      	mov	r0, r7
 800b3a4:	f7ff ff12 	bl	800b1cc <__i2b>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	6003      	str	r3, [r0, #0]
 800b3b2:	f04f 0900 	mov.w	r9, #0
 800b3b6:	07eb      	lsls	r3, r5, #31
 800b3b8:	d50a      	bpl.n	800b3d0 <__pow5mult+0x84>
 800b3ba:	4631      	mov	r1, r6
 800b3bc:	4622      	mov	r2, r4
 800b3be:	4638      	mov	r0, r7
 800b3c0:	f7ff ff1a 	bl	800b1f8 <__multiply>
 800b3c4:	4631      	mov	r1, r6
 800b3c6:	4680      	mov	r8, r0
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	f7ff fe01 	bl	800afd0 <_Bfree>
 800b3ce:	4646      	mov	r6, r8
 800b3d0:	106d      	asrs	r5, r5, #1
 800b3d2:	d00b      	beq.n	800b3ec <__pow5mult+0xa0>
 800b3d4:	6820      	ldr	r0, [r4, #0]
 800b3d6:	b938      	cbnz	r0, 800b3e8 <__pow5mult+0x9c>
 800b3d8:	4622      	mov	r2, r4
 800b3da:	4621      	mov	r1, r4
 800b3dc:	4638      	mov	r0, r7
 800b3de:	f7ff ff0b 	bl	800b1f8 <__multiply>
 800b3e2:	6020      	str	r0, [r4, #0]
 800b3e4:	f8c0 9000 	str.w	r9, [r0]
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	e7e4      	b.n	800b3b6 <__pow5mult+0x6a>
 800b3ec:	4630      	mov	r0, r6
 800b3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3f2:	bf00      	nop
 800b3f4:	0800dc38 	.word	0x0800dc38
 800b3f8:	0800db5e 	.word	0x0800db5e
 800b3fc:	0800dbde 	.word	0x0800dbde

0800b400 <__lshift>:
 800b400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b404:	460c      	mov	r4, r1
 800b406:	6849      	ldr	r1, [r1, #4]
 800b408:	6923      	ldr	r3, [r4, #16]
 800b40a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b40e:	68a3      	ldr	r3, [r4, #8]
 800b410:	4607      	mov	r7, r0
 800b412:	4691      	mov	r9, r2
 800b414:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b418:	f108 0601 	add.w	r6, r8, #1
 800b41c:	42b3      	cmp	r3, r6
 800b41e:	db0b      	blt.n	800b438 <__lshift+0x38>
 800b420:	4638      	mov	r0, r7
 800b422:	f7ff fd95 	bl	800af50 <_Balloc>
 800b426:	4605      	mov	r5, r0
 800b428:	b948      	cbnz	r0, 800b43e <__lshift+0x3e>
 800b42a:	4602      	mov	r2, r0
 800b42c:	4b28      	ldr	r3, [pc, #160]	@ (800b4d0 <__lshift+0xd0>)
 800b42e:	4829      	ldr	r0, [pc, #164]	@ (800b4d4 <__lshift+0xd4>)
 800b430:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b434:	f001 fcd0 	bl	800cdd8 <__assert_func>
 800b438:	3101      	adds	r1, #1
 800b43a:	005b      	lsls	r3, r3, #1
 800b43c:	e7ee      	b.n	800b41c <__lshift+0x1c>
 800b43e:	2300      	movs	r3, #0
 800b440:	f100 0114 	add.w	r1, r0, #20
 800b444:	f100 0210 	add.w	r2, r0, #16
 800b448:	4618      	mov	r0, r3
 800b44a:	4553      	cmp	r3, sl
 800b44c:	db33      	blt.n	800b4b6 <__lshift+0xb6>
 800b44e:	6920      	ldr	r0, [r4, #16]
 800b450:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b454:	f104 0314 	add.w	r3, r4, #20
 800b458:	f019 091f 	ands.w	r9, r9, #31
 800b45c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b460:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b464:	d02b      	beq.n	800b4be <__lshift+0xbe>
 800b466:	f1c9 0e20 	rsb	lr, r9, #32
 800b46a:	468a      	mov	sl, r1
 800b46c:	2200      	movs	r2, #0
 800b46e:	6818      	ldr	r0, [r3, #0]
 800b470:	fa00 f009 	lsl.w	r0, r0, r9
 800b474:	4310      	orrs	r0, r2
 800b476:	f84a 0b04 	str.w	r0, [sl], #4
 800b47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b47e:	459c      	cmp	ip, r3
 800b480:	fa22 f20e 	lsr.w	r2, r2, lr
 800b484:	d8f3      	bhi.n	800b46e <__lshift+0x6e>
 800b486:	ebac 0304 	sub.w	r3, ip, r4
 800b48a:	3b15      	subs	r3, #21
 800b48c:	f023 0303 	bic.w	r3, r3, #3
 800b490:	3304      	adds	r3, #4
 800b492:	f104 0015 	add.w	r0, r4, #21
 800b496:	4584      	cmp	ip, r0
 800b498:	bf38      	it	cc
 800b49a:	2304      	movcc	r3, #4
 800b49c:	50ca      	str	r2, [r1, r3]
 800b49e:	b10a      	cbz	r2, 800b4a4 <__lshift+0xa4>
 800b4a0:	f108 0602 	add.w	r6, r8, #2
 800b4a4:	3e01      	subs	r6, #1
 800b4a6:	4638      	mov	r0, r7
 800b4a8:	612e      	str	r6, [r5, #16]
 800b4aa:	4621      	mov	r1, r4
 800b4ac:	f7ff fd90 	bl	800afd0 <_Bfree>
 800b4b0:	4628      	mov	r0, r5
 800b4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	e7c5      	b.n	800b44a <__lshift+0x4a>
 800b4be:	3904      	subs	r1, #4
 800b4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4c8:	459c      	cmp	ip, r3
 800b4ca:	d8f9      	bhi.n	800b4c0 <__lshift+0xc0>
 800b4cc:	e7ea      	b.n	800b4a4 <__lshift+0xa4>
 800b4ce:	bf00      	nop
 800b4d0:	0800dbcd 	.word	0x0800dbcd
 800b4d4:	0800dbde 	.word	0x0800dbde

0800b4d8 <__mcmp>:
 800b4d8:	690a      	ldr	r2, [r1, #16]
 800b4da:	4603      	mov	r3, r0
 800b4dc:	6900      	ldr	r0, [r0, #16]
 800b4de:	1a80      	subs	r0, r0, r2
 800b4e0:	b530      	push	{r4, r5, lr}
 800b4e2:	d10e      	bne.n	800b502 <__mcmp+0x2a>
 800b4e4:	3314      	adds	r3, #20
 800b4e6:	3114      	adds	r1, #20
 800b4e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b4ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b4f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b4f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b4f8:	4295      	cmp	r5, r2
 800b4fa:	d003      	beq.n	800b504 <__mcmp+0x2c>
 800b4fc:	d205      	bcs.n	800b50a <__mcmp+0x32>
 800b4fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b502:	bd30      	pop	{r4, r5, pc}
 800b504:	42a3      	cmp	r3, r4
 800b506:	d3f3      	bcc.n	800b4f0 <__mcmp+0x18>
 800b508:	e7fb      	b.n	800b502 <__mcmp+0x2a>
 800b50a:	2001      	movs	r0, #1
 800b50c:	e7f9      	b.n	800b502 <__mcmp+0x2a>
	...

0800b510 <__mdiff>:
 800b510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b514:	4689      	mov	r9, r1
 800b516:	4606      	mov	r6, r0
 800b518:	4611      	mov	r1, r2
 800b51a:	4648      	mov	r0, r9
 800b51c:	4614      	mov	r4, r2
 800b51e:	f7ff ffdb 	bl	800b4d8 <__mcmp>
 800b522:	1e05      	subs	r5, r0, #0
 800b524:	d112      	bne.n	800b54c <__mdiff+0x3c>
 800b526:	4629      	mov	r1, r5
 800b528:	4630      	mov	r0, r6
 800b52a:	f7ff fd11 	bl	800af50 <_Balloc>
 800b52e:	4602      	mov	r2, r0
 800b530:	b928      	cbnz	r0, 800b53e <__mdiff+0x2e>
 800b532:	4b3f      	ldr	r3, [pc, #252]	@ (800b630 <__mdiff+0x120>)
 800b534:	f240 2137 	movw	r1, #567	@ 0x237
 800b538:	483e      	ldr	r0, [pc, #248]	@ (800b634 <__mdiff+0x124>)
 800b53a:	f001 fc4d 	bl	800cdd8 <__assert_func>
 800b53e:	2301      	movs	r3, #1
 800b540:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b544:	4610      	mov	r0, r2
 800b546:	b003      	add	sp, #12
 800b548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b54c:	bfbc      	itt	lt
 800b54e:	464b      	movlt	r3, r9
 800b550:	46a1      	movlt	r9, r4
 800b552:	4630      	mov	r0, r6
 800b554:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b558:	bfba      	itte	lt
 800b55a:	461c      	movlt	r4, r3
 800b55c:	2501      	movlt	r5, #1
 800b55e:	2500      	movge	r5, #0
 800b560:	f7ff fcf6 	bl	800af50 <_Balloc>
 800b564:	4602      	mov	r2, r0
 800b566:	b918      	cbnz	r0, 800b570 <__mdiff+0x60>
 800b568:	4b31      	ldr	r3, [pc, #196]	@ (800b630 <__mdiff+0x120>)
 800b56a:	f240 2145 	movw	r1, #581	@ 0x245
 800b56e:	e7e3      	b.n	800b538 <__mdiff+0x28>
 800b570:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b574:	6926      	ldr	r6, [r4, #16]
 800b576:	60c5      	str	r5, [r0, #12]
 800b578:	f109 0310 	add.w	r3, r9, #16
 800b57c:	f109 0514 	add.w	r5, r9, #20
 800b580:	f104 0e14 	add.w	lr, r4, #20
 800b584:	f100 0b14 	add.w	fp, r0, #20
 800b588:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b58c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b590:	9301      	str	r3, [sp, #4]
 800b592:	46d9      	mov	r9, fp
 800b594:	f04f 0c00 	mov.w	ip, #0
 800b598:	9b01      	ldr	r3, [sp, #4]
 800b59a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b59e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b5a2:	9301      	str	r3, [sp, #4]
 800b5a4:	fa1f f38a 	uxth.w	r3, sl
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	b283      	uxth	r3, r0
 800b5ac:	1acb      	subs	r3, r1, r3
 800b5ae:	0c00      	lsrs	r0, r0, #16
 800b5b0:	4463      	add	r3, ip
 800b5b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b5b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b5c0:	4576      	cmp	r6, lr
 800b5c2:	f849 3b04 	str.w	r3, [r9], #4
 800b5c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b5ca:	d8e5      	bhi.n	800b598 <__mdiff+0x88>
 800b5cc:	1b33      	subs	r3, r6, r4
 800b5ce:	3b15      	subs	r3, #21
 800b5d0:	f023 0303 	bic.w	r3, r3, #3
 800b5d4:	3415      	adds	r4, #21
 800b5d6:	3304      	adds	r3, #4
 800b5d8:	42a6      	cmp	r6, r4
 800b5da:	bf38      	it	cc
 800b5dc:	2304      	movcc	r3, #4
 800b5de:	441d      	add	r5, r3
 800b5e0:	445b      	add	r3, fp
 800b5e2:	461e      	mov	r6, r3
 800b5e4:	462c      	mov	r4, r5
 800b5e6:	4544      	cmp	r4, r8
 800b5e8:	d30e      	bcc.n	800b608 <__mdiff+0xf8>
 800b5ea:	f108 0103 	add.w	r1, r8, #3
 800b5ee:	1b49      	subs	r1, r1, r5
 800b5f0:	f021 0103 	bic.w	r1, r1, #3
 800b5f4:	3d03      	subs	r5, #3
 800b5f6:	45a8      	cmp	r8, r5
 800b5f8:	bf38      	it	cc
 800b5fa:	2100      	movcc	r1, #0
 800b5fc:	440b      	add	r3, r1
 800b5fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b602:	b191      	cbz	r1, 800b62a <__mdiff+0x11a>
 800b604:	6117      	str	r7, [r2, #16]
 800b606:	e79d      	b.n	800b544 <__mdiff+0x34>
 800b608:	f854 1b04 	ldr.w	r1, [r4], #4
 800b60c:	46e6      	mov	lr, ip
 800b60e:	0c08      	lsrs	r0, r1, #16
 800b610:	fa1c fc81 	uxtah	ip, ip, r1
 800b614:	4471      	add	r1, lr
 800b616:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b61a:	b289      	uxth	r1, r1
 800b61c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b620:	f846 1b04 	str.w	r1, [r6], #4
 800b624:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b628:	e7dd      	b.n	800b5e6 <__mdiff+0xd6>
 800b62a:	3f01      	subs	r7, #1
 800b62c:	e7e7      	b.n	800b5fe <__mdiff+0xee>
 800b62e:	bf00      	nop
 800b630:	0800dbcd 	.word	0x0800dbcd
 800b634:	0800dbde 	.word	0x0800dbde

0800b638 <__ulp>:
 800b638:	b082      	sub	sp, #8
 800b63a:	ed8d 0b00 	vstr	d0, [sp]
 800b63e:	9a01      	ldr	r2, [sp, #4]
 800b640:	4b0f      	ldr	r3, [pc, #60]	@ (800b680 <__ulp+0x48>)
 800b642:	4013      	ands	r3, r2
 800b644:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b648:	2b00      	cmp	r3, #0
 800b64a:	dc08      	bgt.n	800b65e <__ulp+0x26>
 800b64c:	425b      	negs	r3, r3
 800b64e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b652:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b656:	da04      	bge.n	800b662 <__ulp+0x2a>
 800b658:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b65c:	4113      	asrs	r3, r2
 800b65e:	2200      	movs	r2, #0
 800b660:	e008      	b.n	800b674 <__ulp+0x3c>
 800b662:	f1a2 0314 	sub.w	r3, r2, #20
 800b666:	2b1e      	cmp	r3, #30
 800b668:	bfda      	itte	le
 800b66a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b66e:	40da      	lsrle	r2, r3
 800b670:	2201      	movgt	r2, #1
 800b672:	2300      	movs	r3, #0
 800b674:	4619      	mov	r1, r3
 800b676:	4610      	mov	r0, r2
 800b678:	ec41 0b10 	vmov	d0, r0, r1
 800b67c:	b002      	add	sp, #8
 800b67e:	4770      	bx	lr
 800b680:	7ff00000 	.word	0x7ff00000

0800b684 <__b2d>:
 800b684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b688:	6906      	ldr	r6, [r0, #16]
 800b68a:	f100 0814 	add.w	r8, r0, #20
 800b68e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b692:	1f37      	subs	r7, r6, #4
 800b694:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b698:	4610      	mov	r0, r2
 800b69a:	f7ff fd4b 	bl	800b134 <__hi0bits>
 800b69e:	f1c0 0320 	rsb	r3, r0, #32
 800b6a2:	280a      	cmp	r0, #10
 800b6a4:	600b      	str	r3, [r1, #0]
 800b6a6:	491b      	ldr	r1, [pc, #108]	@ (800b714 <__b2d+0x90>)
 800b6a8:	dc15      	bgt.n	800b6d6 <__b2d+0x52>
 800b6aa:	f1c0 0c0b 	rsb	ip, r0, #11
 800b6ae:	fa22 f30c 	lsr.w	r3, r2, ip
 800b6b2:	45b8      	cmp	r8, r7
 800b6b4:	ea43 0501 	orr.w	r5, r3, r1
 800b6b8:	bf34      	ite	cc
 800b6ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b6be:	2300      	movcs	r3, #0
 800b6c0:	3015      	adds	r0, #21
 800b6c2:	fa02 f000 	lsl.w	r0, r2, r0
 800b6c6:	fa23 f30c 	lsr.w	r3, r3, ip
 800b6ca:	4303      	orrs	r3, r0
 800b6cc:	461c      	mov	r4, r3
 800b6ce:	ec45 4b10 	vmov	d0, r4, r5
 800b6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6d6:	45b8      	cmp	r8, r7
 800b6d8:	bf3a      	itte	cc
 800b6da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b6de:	f1a6 0708 	subcc.w	r7, r6, #8
 800b6e2:	2300      	movcs	r3, #0
 800b6e4:	380b      	subs	r0, #11
 800b6e6:	d012      	beq.n	800b70e <__b2d+0x8a>
 800b6e8:	f1c0 0120 	rsb	r1, r0, #32
 800b6ec:	fa23 f401 	lsr.w	r4, r3, r1
 800b6f0:	4082      	lsls	r2, r0
 800b6f2:	4322      	orrs	r2, r4
 800b6f4:	4547      	cmp	r7, r8
 800b6f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b6fa:	bf8c      	ite	hi
 800b6fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b700:	2200      	movls	r2, #0
 800b702:	4083      	lsls	r3, r0
 800b704:	40ca      	lsrs	r2, r1
 800b706:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b70a:	4313      	orrs	r3, r2
 800b70c:	e7de      	b.n	800b6cc <__b2d+0x48>
 800b70e:	ea42 0501 	orr.w	r5, r2, r1
 800b712:	e7db      	b.n	800b6cc <__b2d+0x48>
 800b714:	3ff00000 	.word	0x3ff00000

0800b718 <__d2b>:
 800b718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b71c:	460f      	mov	r7, r1
 800b71e:	2101      	movs	r1, #1
 800b720:	ec59 8b10 	vmov	r8, r9, d0
 800b724:	4616      	mov	r6, r2
 800b726:	f7ff fc13 	bl	800af50 <_Balloc>
 800b72a:	4604      	mov	r4, r0
 800b72c:	b930      	cbnz	r0, 800b73c <__d2b+0x24>
 800b72e:	4602      	mov	r2, r0
 800b730:	4b23      	ldr	r3, [pc, #140]	@ (800b7c0 <__d2b+0xa8>)
 800b732:	4824      	ldr	r0, [pc, #144]	@ (800b7c4 <__d2b+0xac>)
 800b734:	f240 310f 	movw	r1, #783	@ 0x30f
 800b738:	f001 fb4e 	bl	800cdd8 <__assert_func>
 800b73c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b740:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b744:	b10d      	cbz	r5, 800b74a <__d2b+0x32>
 800b746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b74a:	9301      	str	r3, [sp, #4]
 800b74c:	f1b8 0300 	subs.w	r3, r8, #0
 800b750:	d023      	beq.n	800b79a <__d2b+0x82>
 800b752:	4668      	mov	r0, sp
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	f7ff fd0c 	bl	800b172 <__lo0bits>
 800b75a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b75e:	b1d0      	cbz	r0, 800b796 <__d2b+0x7e>
 800b760:	f1c0 0320 	rsb	r3, r0, #32
 800b764:	fa02 f303 	lsl.w	r3, r2, r3
 800b768:	430b      	orrs	r3, r1
 800b76a:	40c2      	lsrs	r2, r0
 800b76c:	6163      	str	r3, [r4, #20]
 800b76e:	9201      	str	r2, [sp, #4]
 800b770:	9b01      	ldr	r3, [sp, #4]
 800b772:	61a3      	str	r3, [r4, #24]
 800b774:	2b00      	cmp	r3, #0
 800b776:	bf0c      	ite	eq
 800b778:	2201      	moveq	r2, #1
 800b77a:	2202      	movne	r2, #2
 800b77c:	6122      	str	r2, [r4, #16]
 800b77e:	b1a5      	cbz	r5, 800b7aa <__d2b+0x92>
 800b780:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b784:	4405      	add	r5, r0
 800b786:	603d      	str	r5, [r7, #0]
 800b788:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b78c:	6030      	str	r0, [r6, #0]
 800b78e:	4620      	mov	r0, r4
 800b790:	b003      	add	sp, #12
 800b792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b796:	6161      	str	r1, [r4, #20]
 800b798:	e7ea      	b.n	800b770 <__d2b+0x58>
 800b79a:	a801      	add	r0, sp, #4
 800b79c:	f7ff fce9 	bl	800b172 <__lo0bits>
 800b7a0:	9b01      	ldr	r3, [sp, #4]
 800b7a2:	6163      	str	r3, [r4, #20]
 800b7a4:	3020      	adds	r0, #32
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	e7e8      	b.n	800b77c <__d2b+0x64>
 800b7aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b7ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b7b2:	6038      	str	r0, [r7, #0]
 800b7b4:	6918      	ldr	r0, [r3, #16]
 800b7b6:	f7ff fcbd 	bl	800b134 <__hi0bits>
 800b7ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b7be:	e7e5      	b.n	800b78c <__d2b+0x74>
 800b7c0:	0800dbcd 	.word	0x0800dbcd
 800b7c4:	0800dbde 	.word	0x0800dbde

0800b7c8 <__ratio>:
 800b7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7cc:	b085      	sub	sp, #20
 800b7ce:	e9cd 1000 	strd	r1, r0, [sp]
 800b7d2:	a902      	add	r1, sp, #8
 800b7d4:	f7ff ff56 	bl	800b684 <__b2d>
 800b7d8:	9800      	ldr	r0, [sp, #0]
 800b7da:	a903      	add	r1, sp, #12
 800b7dc:	ec55 4b10 	vmov	r4, r5, d0
 800b7e0:	f7ff ff50 	bl	800b684 <__b2d>
 800b7e4:	9b01      	ldr	r3, [sp, #4]
 800b7e6:	6919      	ldr	r1, [r3, #16]
 800b7e8:	9b00      	ldr	r3, [sp, #0]
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	1ac9      	subs	r1, r1, r3
 800b7ee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b7f2:	1a9b      	subs	r3, r3, r2
 800b7f4:	ec5b ab10 	vmov	sl, fp, d0
 800b7f8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	bfce      	itee	gt
 800b800:	462a      	movgt	r2, r5
 800b802:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b806:	465a      	movle	r2, fp
 800b808:	462f      	mov	r7, r5
 800b80a:	46d9      	mov	r9, fp
 800b80c:	bfcc      	ite	gt
 800b80e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b812:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b816:	464b      	mov	r3, r9
 800b818:	4652      	mov	r2, sl
 800b81a:	4620      	mov	r0, r4
 800b81c:	4639      	mov	r1, r7
 800b81e:	f7f5 f83d 	bl	800089c <__aeabi_ddiv>
 800b822:	ec41 0b10 	vmov	d0, r0, r1
 800b826:	b005      	add	sp, #20
 800b828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b82c <__copybits>:
 800b82c:	3901      	subs	r1, #1
 800b82e:	b570      	push	{r4, r5, r6, lr}
 800b830:	1149      	asrs	r1, r1, #5
 800b832:	6914      	ldr	r4, [r2, #16]
 800b834:	3101      	adds	r1, #1
 800b836:	f102 0314 	add.w	r3, r2, #20
 800b83a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b83e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b842:	1f05      	subs	r5, r0, #4
 800b844:	42a3      	cmp	r3, r4
 800b846:	d30c      	bcc.n	800b862 <__copybits+0x36>
 800b848:	1aa3      	subs	r3, r4, r2
 800b84a:	3b11      	subs	r3, #17
 800b84c:	f023 0303 	bic.w	r3, r3, #3
 800b850:	3211      	adds	r2, #17
 800b852:	42a2      	cmp	r2, r4
 800b854:	bf88      	it	hi
 800b856:	2300      	movhi	r3, #0
 800b858:	4418      	add	r0, r3
 800b85a:	2300      	movs	r3, #0
 800b85c:	4288      	cmp	r0, r1
 800b85e:	d305      	bcc.n	800b86c <__copybits+0x40>
 800b860:	bd70      	pop	{r4, r5, r6, pc}
 800b862:	f853 6b04 	ldr.w	r6, [r3], #4
 800b866:	f845 6f04 	str.w	r6, [r5, #4]!
 800b86a:	e7eb      	b.n	800b844 <__copybits+0x18>
 800b86c:	f840 3b04 	str.w	r3, [r0], #4
 800b870:	e7f4      	b.n	800b85c <__copybits+0x30>

0800b872 <__any_on>:
 800b872:	f100 0214 	add.w	r2, r0, #20
 800b876:	6900      	ldr	r0, [r0, #16]
 800b878:	114b      	asrs	r3, r1, #5
 800b87a:	4298      	cmp	r0, r3
 800b87c:	b510      	push	{r4, lr}
 800b87e:	db11      	blt.n	800b8a4 <__any_on+0x32>
 800b880:	dd0a      	ble.n	800b898 <__any_on+0x26>
 800b882:	f011 011f 	ands.w	r1, r1, #31
 800b886:	d007      	beq.n	800b898 <__any_on+0x26>
 800b888:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b88c:	fa24 f001 	lsr.w	r0, r4, r1
 800b890:	fa00 f101 	lsl.w	r1, r0, r1
 800b894:	428c      	cmp	r4, r1
 800b896:	d10b      	bne.n	800b8b0 <__any_on+0x3e>
 800b898:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d803      	bhi.n	800b8a8 <__any_on+0x36>
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	bd10      	pop	{r4, pc}
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	e7f7      	b.n	800b898 <__any_on+0x26>
 800b8a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b8ac:	2900      	cmp	r1, #0
 800b8ae:	d0f5      	beq.n	800b89c <__any_on+0x2a>
 800b8b0:	2001      	movs	r0, #1
 800b8b2:	e7f6      	b.n	800b8a2 <__any_on+0x30>

0800b8b4 <sulp>:
 800b8b4:	b570      	push	{r4, r5, r6, lr}
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	460d      	mov	r5, r1
 800b8ba:	ec45 4b10 	vmov	d0, r4, r5
 800b8be:	4616      	mov	r6, r2
 800b8c0:	f7ff feba 	bl	800b638 <__ulp>
 800b8c4:	ec51 0b10 	vmov	r0, r1, d0
 800b8c8:	b17e      	cbz	r6, 800b8ea <sulp+0x36>
 800b8ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b8ce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	dd09      	ble.n	800b8ea <sulp+0x36>
 800b8d6:	051b      	lsls	r3, r3, #20
 800b8d8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b8dc:	2400      	movs	r4, #0
 800b8de:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b8e2:	4622      	mov	r2, r4
 800b8e4:	462b      	mov	r3, r5
 800b8e6:	f7f4 feaf 	bl	8000648 <__aeabi_dmul>
 800b8ea:	ec41 0b10 	vmov	d0, r0, r1
 800b8ee:	bd70      	pop	{r4, r5, r6, pc}

0800b8f0 <_strtod_l>:
 800b8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f4:	b09f      	sub	sp, #124	@ 0x7c
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	921a      	str	r2, [sp, #104]	@ 0x68
 800b8fe:	9005      	str	r0, [sp, #20]
 800b900:	f04f 0a00 	mov.w	sl, #0
 800b904:	f04f 0b00 	mov.w	fp, #0
 800b908:	460a      	mov	r2, r1
 800b90a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b90c:	7811      	ldrb	r1, [r2, #0]
 800b90e:	292b      	cmp	r1, #43	@ 0x2b
 800b910:	d04a      	beq.n	800b9a8 <_strtod_l+0xb8>
 800b912:	d838      	bhi.n	800b986 <_strtod_l+0x96>
 800b914:	290d      	cmp	r1, #13
 800b916:	d832      	bhi.n	800b97e <_strtod_l+0x8e>
 800b918:	2908      	cmp	r1, #8
 800b91a:	d832      	bhi.n	800b982 <_strtod_l+0x92>
 800b91c:	2900      	cmp	r1, #0
 800b91e:	d03b      	beq.n	800b998 <_strtod_l+0xa8>
 800b920:	2200      	movs	r2, #0
 800b922:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b924:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b926:	782a      	ldrb	r2, [r5, #0]
 800b928:	2a30      	cmp	r2, #48	@ 0x30
 800b92a:	f040 80b3 	bne.w	800ba94 <_strtod_l+0x1a4>
 800b92e:	786a      	ldrb	r2, [r5, #1]
 800b930:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b934:	2a58      	cmp	r2, #88	@ 0x58
 800b936:	d16e      	bne.n	800ba16 <_strtod_l+0x126>
 800b938:	9302      	str	r3, [sp, #8]
 800b93a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b93c:	9301      	str	r3, [sp, #4]
 800b93e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b940:	9300      	str	r3, [sp, #0]
 800b942:	4a8e      	ldr	r2, [pc, #568]	@ (800bb7c <_strtod_l+0x28c>)
 800b944:	9805      	ldr	r0, [sp, #20]
 800b946:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b948:	a919      	add	r1, sp, #100	@ 0x64
 800b94a:	f001 fadf 	bl	800cf0c <__gethex>
 800b94e:	f010 060f 	ands.w	r6, r0, #15
 800b952:	4604      	mov	r4, r0
 800b954:	d005      	beq.n	800b962 <_strtod_l+0x72>
 800b956:	2e06      	cmp	r6, #6
 800b958:	d128      	bne.n	800b9ac <_strtod_l+0xbc>
 800b95a:	3501      	adds	r5, #1
 800b95c:	2300      	movs	r3, #0
 800b95e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b960:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b962:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b964:	2b00      	cmp	r3, #0
 800b966:	f040 858e 	bne.w	800c486 <_strtod_l+0xb96>
 800b96a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b96c:	b1cb      	cbz	r3, 800b9a2 <_strtod_l+0xb2>
 800b96e:	4652      	mov	r2, sl
 800b970:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b974:	ec43 2b10 	vmov	d0, r2, r3
 800b978:	b01f      	add	sp, #124	@ 0x7c
 800b97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b97e:	2920      	cmp	r1, #32
 800b980:	d1ce      	bne.n	800b920 <_strtod_l+0x30>
 800b982:	3201      	adds	r2, #1
 800b984:	e7c1      	b.n	800b90a <_strtod_l+0x1a>
 800b986:	292d      	cmp	r1, #45	@ 0x2d
 800b988:	d1ca      	bne.n	800b920 <_strtod_l+0x30>
 800b98a:	2101      	movs	r1, #1
 800b98c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b98e:	1c51      	adds	r1, r2, #1
 800b990:	9119      	str	r1, [sp, #100]	@ 0x64
 800b992:	7852      	ldrb	r2, [r2, #1]
 800b994:	2a00      	cmp	r2, #0
 800b996:	d1c5      	bne.n	800b924 <_strtod_l+0x34>
 800b998:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b99a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	f040 8570 	bne.w	800c482 <_strtod_l+0xb92>
 800b9a2:	4652      	mov	r2, sl
 800b9a4:	465b      	mov	r3, fp
 800b9a6:	e7e5      	b.n	800b974 <_strtod_l+0x84>
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	e7ef      	b.n	800b98c <_strtod_l+0x9c>
 800b9ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b9ae:	b13a      	cbz	r2, 800b9c0 <_strtod_l+0xd0>
 800b9b0:	2135      	movs	r1, #53	@ 0x35
 800b9b2:	a81c      	add	r0, sp, #112	@ 0x70
 800b9b4:	f7ff ff3a 	bl	800b82c <__copybits>
 800b9b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b9ba:	9805      	ldr	r0, [sp, #20]
 800b9bc:	f7ff fb08 	bl	800afd0 <_Bfree>
 800b9c0:	3e01      	subs	r6, #1
 800b9c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b9c4:	2e04      	cmp	r6, #4
 800b9c6:	d806      	bhi.n	800b9d6 <_strtod_l+0xe6>
 800b9c8:	e8df f006 	tbb	[pc, r6]
 800b9cc:	201d0314 	.word	0x201d0314
 800b9d0:	14          	.byte	0x14
 800b9d1:	00          	.byte	0x00
 800b9d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b9d6:	05e1      	lsls	r1, r4, #23
 800b9d8:	bf48      	it	mi
 800b9da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b9de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b9e2:	0d1b      	lsrs	r3, r3, #20
 800b9e4:	051b      	lsls	r3, r3, #20
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d1bb      	bne.n	800b962 <_strtod_l+0x72>
 800b9ea:	f7fe fb23 	bl	800a034 <__errno>
 800b9ee:	2322      	movs	r3, #34	@ 0x22
 800b9f0:	6003      	str	r3, [r0, #0]
 800b9f2:	e7b6      	b.n	800b962 <_strtod_l+0x72>
 800b9f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b9f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b9fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ba00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ba04:	e7e7      	b.n	800b9d6 <_strtod_l+0xe6>
 800ba06:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800bb84 <_strtod_l+0x294>
 800ba0a:	e7e4      	b.n	800b9d6 <_strtod_l+0xe6>
 800ba0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ba10:	f04f 3aff 	mov.w	sl, #4294967295
 800ba14:	e7df      	b.n	800b9d6 <_strtod_l+0xe6>
 800ba16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba18:	1c5a      	adds	r2, r3, #1
 800ba1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba1c:	785b      	ldrb	r3, [r3, #1]
 800ba1e:	2b30      	cmp	r3, #48	@ 0x30
 800ba20:	d0f9      	beq.n	800ba16 <_strtod_l+0x126>
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d09d      	beq.n	800b962 <_strtod_l+0x72>
 800ba26:	2301      	movs	r3, #1
 800ba28:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba2c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba2e:	2300      	movs	r3, #0
 800ba30:	9308      	str	r3, [sp, #32]
 800ba32:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba34:	461f      	mov	r7, r3
 800ba36:	220a      	movs	r2, #10
 800ba38:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ba3a:	7805      	ldrb	r5, [r0, #0]
 800ba3c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ba40:	b2d9      	uxtb	r1, r3
 800ba42:	2909      	cmp	r1, #9
 800ba44:	d928      	bls.n	800ba98 <_strtod_l+0x1a8>
 800ba46:	494e      	ldr	r1, [pc, #312]	@ (800bb80 <_strtod_l+0x290>)
 800ba48:	2201      	movs	r2, #1
 800ba4a:	f001 f979 	bl	800cd40 <strncmp>
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	d032      	beq.n	800bab8 <_strtod_l+0x1c8>
 800ba52:	2000      	movs	r0, #0
 800ba54:	462a      	mov	r2, r5
 800ba56:	4681      	mov	r9, r0
 800ba58:	463d      	mov	r5, r7
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2a65      	cmp	r2, #101	@ 0x65
 800ba5e:	d001      	beq.n	800ba64 <_strtod_l+0x174>
 800ba60:	2a45      	cmp	r2, #69	@ 0x45
 800ba62:	d114      	bne.n	800ba8e <_strtod_l+0x19e>
 800ba64:	b91d      	cbnz	r5, 800ba6e <_strtod_l+0x17e>
 800ba66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba68:	4302      	orrs	r2, r0
 800ba6a:	d095      	beq.n	800b998 <_strtod_l+0xa8>
 800ba6c:	2500      	movs	r5, #0
 800ba6e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ba70:	1c62      	adds	r2, r4, #1
 800ba72:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba74:	7862      	ldrb	r2, [r4, #1]
 800ba76:	2a2b      	cmp	r2, #43	@ 0x2b
 800ba78:	d077      	beq.n	800bb6a <_strtod_l+0x27a>
 800ba7a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ba7c:	d07b      	beq.n	800bb76 <_strtod_l+0x286>
 800ba7e:	f04f 0c00 	mov.w	ip, #0
 800ba82:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ba86:	2909      	cmp	r1, #9
 800ba88:	f240 8082 	bls.w	800bb90 <_strtod_l+0x2a0>
 800ba8c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ba8e:	f04f 0800 	mov.w	r8, #0
 800ba92:	e0a2      	b.n	800bbda <_strtod_l+0x2ea>
 800ba94:	2300      	movs	r3, #0
 800ba96:	e7c7      	b.n	800ba28 <_strtod_l+0x138>
 800ba98:	2f08      	cmp	r7, #8
 800ba9a:	bfd5      	itete	le
 800ba9c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ba9e:	9908      	ldrgt	r1, [sp, #32]
 800baa0:	fb02 3301 	mlale	r3, r2, r1, r3
 800baa4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800baa8:	f100 0001 	add.w	r0, r0, #1
 800baac:	bfd4      	ite	le
 800baae:	930a      	strle	r3, [sp, #40]	@ 0x28
 800bab0:	9308      	strgt	r3, [sp, #32]
 800bab2:	3701      	adds	r7, #1
 800bab4:	9019      	str	r0, [sp, #100]	@ 0x64
 800bab6:	e7bf      	b.n	800ba38 <_strtod_l+0x148>
 800bab8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800baba:	1c5a      	adds	r2, r3, #1
 800babc:	9219      	str	r2, [sp, #100]	@ 0x64
 800babe:	785a      	ldrb	r2, [r3, #1]
 800bac0:	b37f      	cbz	r7, 800bb22 <_strtod_l+0x232>
 800bac2:	4681      	mov	r9, r0
 800bac4:	463d      	mov	r5, r7
 800bac6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800baca:	2b09      	cmp	r3, #9
 800bacc:	d912      	bls.n	800baf4 <_strtod_l+0x204>
 800bace:	2301      	movs	r3, #1
 800bad0:	e7c4      	b.n	800ba5c <_strtod_l+0x16c>
 800bad2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bad4:	1c5a      	adds	r2, r3, #1
 800bad6:	9219      	str	r2, [sp, #100]	@ 0x64
 800bad8:	785a      	ldrb	r2, [r3, #1]
 800bada:	3001      	adds	r0, #1
 800badc:	2a30      	cmp	r2, #48	@ 0x30
 800bade:	d0f8      	beq.n	800bad2 <_strtod_l+0x1e2>
 800bae0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800bae4:	2b08      	cmp	r3, #8
 800bae6:	f200 84d3 	bhi.w	800c490 <_strtod_l+0xba0>
 800baea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800baec:	930c      	str	r3, [sp, #48]	@ 0x30
 800baee:	4681      	mov	r9, r0
 800baf0:	2000      	movs	r0, #0
 800baf2:	4605      	mov	r5, r0
 800baf4:	3a30      	subs	r2, #48	@ 0x30
 800baf6:	f100 0301 	add.w	r3, r0, #1
 800bafa:	d02a      	beq.n	800bb52 <_strtod_l+0x262>
 800bafc:	4499      	add	r9, r3
 800bafe:	eb00 0c05 	add.w	ip, r0, r5
 800bb02:	462b      	mov	r3, r5
 800bb04:	210a      	movs	r1, #10
 800bb06:	4563      	cmp	r3, ip
 800bb08:	d10d      	bne.n	800bb26 <_strtod_l+0x236>
 800bb0a:	1c69      	adds	r1, r5, #1
 800bb0c:	4401      	add	r1, r0
 800bb0e:	4428      	add	r0, r5
 800bb10:	2808      	cmp	r0, #8
 800bb12:	dc16      	bgt.n	800bb42 <_strtod_l+0x252>
 800bb14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bb16:	230a      	movs	r3, #10
 800bb18:	fb03 2300 	mla	r3, r3, r0, r2
 800bb1c:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb1e:	2300      	movs	r3, #0
 800bb20:	e018      	b.n	800bb54 <_strtod_l+0x264>
 800bb22:	4638      	mov	r0, r7
 800bb24:	e7da      	b.n	800badc <_strtod_l+0x1ec>
 800bb26:	2b08      	cmp	r3, #8
 800bb28:	f103 0301 	add.w	r3, r3, #1
 800bb2c:	dc03      	bgt.n	800bb36 <_strtod_l+0x246>
 800bb2e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bb30:	434e      	muls	r6, r1
 800bb32:	960a      	str	r6, [sp, #40]	@ 0x28
 800bb34:	e7e7      	b.n	800bb06 <_strtod_l+0x216>
 800bb36:	2b10      	cmp	r3, #16
 800bb38:	bfde      	ittt	le
 800bb3a:	9e08      	ldrle	r6, [sp, #32]
 800bb3c:	434e      	mulle	r6, r1
 800bb3e:	9608      	strle	r6, [sp, #32]
 800bb40:	e7e1      	b.n	800bb06 <_strtod_l+0x216>
 800bb42:	280f      	cmp	r0, #15
 800bb44:	dceb      	bgt.n	800bb1e <_strtod_l+0x22e>
 800bb46:	9808      	ldr	r0, [sp, #32]
 800bb48:	230a      	movs	r3, #10
 800bb4a:	fb03 2300 	mla	r3, r3, r0, r2
 800bb4e:	9308      	str	r3, [sp, #32]
 800bb50:	e7e5      	b.n	800bb1e <_strtod_l+0x22e>
 800bb52:	4629      	mov	r1, r5
 800bb54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bb56:	1c50      	adds	r0, r2, #1
 800bb58:	9019      	str	r0, [sp, #100]	@ 0x64
 800bb5a:	7852      	ldrb	r2, [r2, #1]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	460d      	mov	r5, r1
 800bb60:	e7b1      	b.n	800bac6 <_strtod_l+0x1d6>
 800bb62:	f04f 0900 	mov.w	r9, #0
 800bb66:	2301      	movs	r3, #1
 800bb68:	e77d      	b.n	800ba66 <_strtod_l+0x176>
 800bb6a:	f04f 0c00 	mov.w	ip, #0
 800bb6e:	1ca2      	adds	r2, r4, #2
 800bb70:	9219      	str	r2, [sp, #100]	@ 0x64
 800bb72:	78a2      	ldrb	r2, [r4, #2]
 800bb74:	e785      	b.n	800ba82 <_strtod_l+0x192>
 800bb76:	f04f 0c01 	mov.w	ip, #1
 800bb7a:	e7f8      	b.n	800bb6e <_strtod_l+0x27e>
 800bb7c:	0800dd50 	.word	0x0800dd50
 800bb80:	0800dd38 	.word	0x0800dd38
 800bb84:	7ff00000 	.word	0x7ff00000
 800bb88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bb8a:	1c51      	adds	r1, r2, #1
 800bb8c:	9119      	str	r1, [sp, #100]	@ 0x64
 800bb8e:	7852      	ldrb	r2, [r2, #1]
 800bb90:	2a30      	cmp	r2, #48	@ 0x30
 800bb92:	d0f9      	beq.n	800bb88 <_strtod_l+0x298>
 800bb94:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bb98:	2908      	cmp	r1, #8
 800bb9a:	f63f af78 	bhi.w	800ba8e <_strtod_l+0x19e>
 800bb9e:	3a30      	subs	r2, #48	@ 0x30
 800bba0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bba2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bba4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bba6:	f04f 080a 	mov.w	r8, #10
 800bbaa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bbac:	1c56      	adds	r6, r2, #1
 800bbae:	9619      	str	r6, [sp, #100]	@ 0x64
 800bbb0:	7852      	ldrb	r2, [r2, #1]
 800bbb2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bbb6:	f1be 0f09 	cmp.w	lr, #9
 800bbba:	d939      	bls.n	800bc30 <_strtod_l+0x340>
 800bbbc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bbbe:	1a76      	subs	r6, r6, r1
 800bbc0:	2e08      	cmp	r6, #8
 800bbc2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bbc6:	dc03      	bgt.n	800bbd0 <_strtod_l+0x2e0>
 800bbc8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bbca:	4588      	cmp	r8, r1
 800bbcc:	bfa8      	it	ge
 800bbce:	4688      	movge	r8, r1
 800bbd0:	f1bc 0f00 	cmp.w	ip, #0
 800bbd4:	d001      	beq.n	800bbda <_strtod_l+0x2ea>
 800bbd6:	f1c8 0800 	rsb	r8, r8, #0
 800bbda:	2d00      	cmp	r5, #0
 800bbdc:	d14e      	bne.n	800bc7c <_strtod_l+0x38c>
 800bbde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbe0:	4308      	orrs	r0, r1
 800bbe2:	f47f aebe 	bne.w	800b962 <_strtod_l+0x72>
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	f47f aed6 	bne.w	800b998 <_strtod_l+0xa8>
 800bbec:	2a69      	cmp	r2, #105	@ 0x69
 800bbee:	d028      	beq.n	800bc42 <_strtod_l+0x352>
 800bbf0:	dc25      	bgt.n	800bc3e <_strtod_l+0x34e>
 800bbf2:	2a49      	cmp	r2, #73	@ 0x49
 800bbf4:	d025      	beq.n	800bc42 <_strtod_l+0x352>
 800bbf6:	2a4e      	cmp	r2, #78	@ 0x4e
 800bbf8:	f47f aece 	bne.w	800b998 <_strtod_l+0xa8>
 800bbfc:	499b      	ldr	r1, [pc, #620]	@ (800be6c <_strtod_l+0x57c>)
 800bbfe:	a819      	add	r0, sp, #100	@ 0x64
 800bc00:	f001 fba6 	bl	800d350 <__match>
 800bc04:	2800      	cmp	r0, #0
 800bc06:	f43f aec7 	beq.w	800b998 <_strtod_l+0xa8>
 800bc0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	2b28      	cmp	r3, #40	@ 0x28
 800bc10:	d12e      	bne.n	800bc70 <_strtod_l+0x380>
 800bc12:	4997      	ldr	r1, [pc, #604]	@ (800be70 <_strtod_l+0x580>)
 800bc14:	aa1c      	add	r2, sp, #112	@ 0x70
 800bc16:	a819      	add	r0, sp, #100	@ 0x64
 800bc18:	f001 fbae 	bl	800d378 <__hexnan>
 800bc1c:	2805      	cmp	r0, #5
 800bc1e:	d127      	bne.n	800bc70 <_strtod_l+0x380>
 800bc20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bc22:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bc26:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bc2a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bc2e:	e698      	b.n	800b962 <_strtod_l+0x72>
 800bc30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bc32:	fb08 2101 	mla	r1, r8, r1, r2
 800bc36:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bc3a:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc3c:	e7b5      	b.n	800bbaa <_strtod_l+0x2ba>
 800bc3e:	2a6e      	cmp	r2, #110	@ 0x6e
 800bc40:	e7da      	b.n	800bbf8 <_strtod_l+0x308>
 800bc42:	498c      	ldr	r1, [pc, #560]	@ (800be74 <_strtod_l+0x584>)
 800bc44:	a819      	add	r0, sp, #100	@ 0x64
 800bc46:	f001 fb83 	bl	800d350 <__match>
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	f43f aea4 	beq.w	800b998 <_strtod_l+0xa8>
 800bc50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc52:	4989      	ldr	r1, [pc, #548]	@ (800be78 <_strtod_l+0x588>)
 800bc54:	3b01      	subs	r3, #1
 800bc56:	a819      	add	r0, sp, #100	@ 0x64
 800bc58:	9319      	str	r3, [sp, #100]	@ 0x64
 800bc5a:	f001 fb79 	bl	800d350 <__match>
 800bc5e:	b910      	cbnz	r0, 800bc66 <_strtod_l+0x376>
 800bc60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc62:	3301      	adds	r3, #1
 800bc64:	9319      	str	r3, [sp, #100]	@ 0x64
 800bc66:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800be88 <_strtod_l+0x598>
 800bc6a:	f04f 0a00 	mov.w	sl, #0
 800bc6e:	e678      	b.n	800b962 <_strtod_l+0x72>
 800bc70:	4882      	ldr	r0, [pc, #520]	@ (800be7c <_strtod_l+0x58c>)
 800bc72:	f001 f8a9 	bl	800cdc8 <nan>
 800bc76:	ec5b ab10 	vmov	sl, fp, d0
 800bc7a:	e672      	b.n	800b962 <_strtod_l+0x72>
 800bc7c:	eba8 0309 	sub.w	r3, r8, r9
 800bc80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bc82:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc84:	2f00      	cmp	r7, #0
 800bc86:	bf08      	it	eq
 800bc88:	462f      	moveq	r7, r5
 800bc8a:	2d10      	cmp	r5, #16
 800bc8c:	462c      	mov	r4, r5
 800bc8e:	bfa8      	it	ge
 800bc90:	2410      	movge	r4, #16
 800bc92:	f7f4 fc5f 	bl	8000554 <__aeabi_ui2d>
 800bc96:	2d09      	cmp	r5, #9
 800bc98:	4682      	mov	sl, r0
 800bc9a:	468b      	mov	fp, r1
 800bc9c:	dc13      	bgt.n	800bcc6 <_strtod_l+0x3d6>
 800bc9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	f43f ae5e 	beq.w	800b962 <_strtod_l+0x72>
 800bca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bca8:	dd78      	ble.n	800bd9c <_strtod_l+0x4ac>
 800bcaa:	2b16      	cmp	r3, #22
 800bcac:	dc5f      	bgt.n	800bd6e <_strtod_l+0x47e>
 800bcae:	4974      	ldr	r1, [pc, #464]	@ (800be80 <_strtod_l+0x590>)
 800bcb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bcb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcb8:	4652      	mov	r2, sl
 800bcba:	465b      	mov	r3, fp
 800bcbc:	f7f4 fcc4 	bl	8000648 <__aeabi_dmul>
 800bcc0:	4682      	mov	sl, r0
 800bcc2:	468b      	mov	fp, r1
 800bcc4:	e64d      	b.n	800b962 <_strtod_l+0x72>
 800bcc6:	4b6e      	ldr	r3, [pc, #440]	@ (800be80 <_strtod_l+0x590>)
 800bcc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bccc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bcd0:	f7f4 fcba 	bl	8000648 <__aeabi_dmul>
 800bcd4:	4682      	mov	sl, r0
 800bcd6:	9808      	ldr	r0, [sp, #32]
 800bcd8:	468b      	mov	fp, r1
 800bcda:	f7f4 fc3b 	bl	8000554 <__aeabi_ui2d>
 800bcde:	4602      	mov	r2, r0
 800bce0:	460b      	mov	r3, r1
 800bce2:	4650      	mov	r0, sl
 800bce4:	4659      	mov	r1, fp
 800bce6:	f7f4 faf9 	bl	80002dc <__adddf3>
 800bcea:	2d0f      	cmp	r5, #15
 800bcec:	4682      	mov	sl, r0
 800bcee:	468b      	mov	fp, r1
 800bcf0:	ddd5      	ble.n	800bc9e <_strtod_l+0x3ae>
 800bcf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcf4:	1b2c      	subs	r4, r5, r4
 800bcf6:	441c      	add	r4, r3
 800bcf8:	2c00      	cmp	r4, #0
 800bcfa:	f340 8096 	ble.w	800be2a <_strtod_l+0x53a>
 800bcfe:	f014 030f 	ands.w	r3, r4, #15
 800bd02:	d00a      	beq.n	800bd1a <_strtod_l+0x42a>
 800bd04:	495e      	ldr	r1, [pc, #376]	@ (800be80 <_strtod_l+0x590>)
 800bd06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd0a:	4652      	mov	r2, sl
 800bd0c:	465b      	mov	r3, fp
 800bd0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd12:	f7f4 fc99 	bl	8000648 <__aeabi_dmul>
 800bd16:	4682      	mov	sl, r0
 800bd18:	468b      	mov	fp, r1
 800bd1a:	f034 040f 	bics.w	r4, r4, #15
 800bd1e:	d073      	beq.n	800be08 <_strtod_l+0x518>
 800bd20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bd24:	dd48      	ble.n	800bdb8 <_strtod_l+0x4c8>
 800bd26:	2400      	movs	r4, #0
 800bd28:	46a0      	mov	r8, r4
 800bd2a:	940a      	str	r4, [sp, #40]	@ 0x28
 800bd2c:	46a1      	mov	r9, r4
 800bd2e:	9a05      	ldr	r2, [sp, #20]
 800bd30:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800be88 <_strtod_l+0x598>
 800bd34:	2322      	movs	r3, #34	@ 0x22
 800bd36:	6013      	str	r3, [r2, #0]
 800bd38:	f04f 0a00 	mov.w	sl, #0
 800bd3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	f43f ae0f 	beq.w	800b962 <_strtod_l+0x72>
 800bd44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd46:	9805      	ldr	r0, [sp, #20]
 800bd48:	f7ff f942 	bl	800afd0 <_Bfree>
 800bd4c:	9805      	ldr	r0, [sp, #20]
 800bd4e:	4649      	mov	r1, r9
 800bd50:	f7ff f93e 	bl	800afd0 <_Bfree>
 800bd54:	9805      	ldr	r0, [sp, #20]
 800bd56:	4641      	mov	r1, r8
 800bd58:	f7ff f93a 	bl	800afd0 <_Bfree>
 800bd5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd5e:	9805      	ldr	r0, [sp, #20]
 800bd60:	f7ff f936 	bl	800afd0 <_Bfree>
 800bd64:	9805      	ldr	r0, [sp, #20]
 800bd66:	4621      	mov	r1, r4
 800bd68:	f7ff f932 	bl	800afd0 <_Bfree>
 800bd6c:	e5f9      	b.n	800b962 <_strtod_l+0x72>
 800bd6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bd74:	4293      	cmp	r3, r2
 800bd76:	dbbc      	blt.n	800bcf2 <_strtod_l+0x402>
 800bd78:	4c41      	ldr	r4, [pc, #260]	@ (800be80 <_strtod_l+0x590>)
 800bd7a:	f1c5 050f 	rsb	r5, r5, #15
 800bd7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bd82:	4652      	mov	r2, sl
 800bd84:	465b      	mov	r3, fp
 800bd86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd8a:	f7f4 fc5d 	bl	8000648 <__aeabi_dmul>
 800bd8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd90:	1b5d      	subs	r5, r3, r5
 800bd92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bd96:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bd9a:	e78f      	b.n	800bcbc <_strtod_l+0x3cc>
 800bd9c:	3316      	adds	r3, #22
 800bd9e:	dba8      	blt.n	800bcf2 <_strtod_l+0x402>
 800bda0:	4b37      	ldr	r3, [pc, #220]	@ (800be80 <_strtod_l+0x590>)
 800bda2:	eba9 0808 	sub.w	r8, r9, r8
 800bda6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bdaa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bdae:	4650      	mov	r0, sl
 800bdb0:	4659      	mov	r1, fp
 800bdb2:	f7f4 fd73 	bl	800089c <__aeabi_ddiv>
 800bdb6:	e783      	b.n	800bcc0 <_strtod_l+0x3d0>
 800bdb8:	4b32      	ldr	r3, [pc, #200]	@ (800be84 <_strtod_l+0x594>)
 800bdba:	9308      	str	r3, [sp, #32]
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	1124      	asrs	r4, r4, #4
 800bdc0:	4650      	mov	r0, sl
 800bdc2:	4659      	mov	r1, fp
 800bdc4:	461e      	mov	r6, r3
 800bdc6:	2c01      	cmp	r4, #1
 800bdc8:	dc21      	bgt.n	800be0e <_strtod_l+0x51e>
 800bdca:	b10b      	cbz	r3, 800bdd0 <_strtod_l+0x4e0>
 800bdcc:	4682      	mov	sl, r0
 800bdce:	468b      	mov	fp, r1
 800bdd0:	492c      	ldr	r1, [pc, #176]	@ (800be84 <_strtod_l+0x594>)
 800bdd2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bdd6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bdda:	4652      	mov	r2, sl
 800bddc:	465b      	mov	r3, fp
 800bdde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bde2:	f7f4 fc31 	bl	8000648 <__aeabi_dmul>
 800bde6:	4b28      	ldr	r3, [pc, #160]	@ (800be88 <_strtod_l+0x598>)
 800bde8:	460a      	mov	r2, r1
 800bdea:	400b      	ands	r3, r1
 800bdec:	4927      	ldr	r1, [pc, #156]	@ (800be8c <_strtod_l+0x59c>)
 800bdee:	428b      	cmp	r3, r1
 800bdf0:	4682      	mov	sl, r0
 800bdf2:	d898      	bhi.n	800bd26 <_strtod_l+0x436>
 800bdf4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bdf8:	428b      	cmp	r3, r1
 800bdfa:	bf86      	itte	hi
 800bdfc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800be90 <_strtod_l+0x5a0>
 800be00:	f04f 3aff 	movhi.w	sl, #4294967295
 800be04:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800be08:	2300      	movs	r3, #0
 800be0a:	9308      	str	r3, [sp, #32]
 800be0c:	e07a      	b.n	800bf04 <_strtod_l+0x614>
 800be0e:	07e2      	lsls	r2, r4, #31
 800be10:	d505      	bpl.n	800be1e <_strtod_l+0x52e>
 800be12:	9b08      	ldr	r3, [sp, #32]
 800be14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be18:	f7f4 fc16 	bl	8000648 <__aeabi_dmul>
 800be1c:	2301      	movs	r3, #1
 800be1e:	9a08      	ldr	r2, [sp, #32]
 800be20:	3208      	adds	r2, #8
 800be22:	3601      	adds	r6, #1
 800be24:	1064      	asrs	r4, r4, #1
 800be26:	9208      	str	r2, [sp, #32]
 800be28:	e7cd      	b.n	800bdc6 <_strtod_l+0x4d6>
 800be2a:	d0ed      	beq.n	800be08 <_strtod_l+0x518>
 800be2c:	4264      	negs	r4, r4
 800be2e:	f014 020f 	ands.w	r2, r4, #15
 800be32:	d00a      	beq.n	800be4a <_strtod_l+0x55a>
 800be34:	4b12      	ldr	r3, [pc, #72]	@ (800be80 <_strtod_l+0x590>)
 800be36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be3a:	4650      	mov	r0, sl
 800be3c:	4659      	mov	r1, fp
 800be3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be42:	f7f4 fd2b 	bl	800089c <__aeabi_ddiv>
 800be46:	4682      	mov	sl, r0
 800be48:	468b      	mov	fp, r1
 800be4a:	1124      	asrs	r4, r4, #4
 800be4c:	d0dc      	beq.n	800be08 <_strtod_l+0x518>
 800be4e:	2c1f      	cmp	r4, #31
 800be50:	dd20      	ble.n	800be94 <_strtod_l+0x5a4>
 800be52:	2400      	movs	r4, #0
 800be54:	46a0      	mov	r8, r4
 800be56:	940a      	str	r4, [sp, #40]	@ 0x28
 800be58:	46a1      	mov	r9, r4
 800be5a:	9a05      	ldr	r2, [sp, #20]
 800be5c:	2322      	movs	r3, #34	@ 0x22
 800be5e:	f04f 0a00 	mov.w	sl, #0
 800be62:	f04f 0b00 	mov.w	fp, #0
 800be66:	6013      	str	r3, [r2, #0]
 800be68:	e768      	b.n	800bd3c <_strtod_l+0x44c>
 800be6a:	bf00      	nop
 800be6c:	0800db25 	.word	0x0800db25
 800be70:	0800dd3c 	.word	0x0800dd3c
 800be74:	0800db1d 	.word	0x0800db1d
 800be78:	0800db54 	.word	0x0800db54
 800be7c:	0800dee5 	.word	0x0800dee5
 800be80:	0800dc70 	.word	0x0800dc70
 800be84:	0800dc48 	.word	0x0800dc48
 800be88:	7ff00000 	.word	0x7ff00000
 800be8c:	7ca00000 	.word	0x7ca00000
 800be90:	7fefffff 	.word	0x7fefffff
 800be94:	f014 0310 	ands.w	r3, r4, #16
 800be98:	bf18      	it	ne
 800be9a:	236a      	movne	r3, #106	@ 0x6a
 800be9c:	4ea9      	ldr	r6, [pc, #676]	@ (800c144 <_strtod_l+0x854>)
 800be9e:	9308      	str	r3, [sp, #32]
 800bea0:	4650      	mov	r0, sl
 800bea2:	4659      	mov	r1, fp
 800bea4:	2300      	movs	r3, #0
 800bea6:	07e2      	lsls	r2, r4, #31
 800bea8:	d504      	bpl.n	800beb4 <_strtod_l+0x5c4>
 800beaa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800beae:	f7f4 fbcb 	bl	8000648 <__aeabi_dmul>
 800beb2:	2301      	movs	r3, #1
 800beb4:	1064      	asrs	r4, r4, #1
 800beb6:	f106 0608 	add.w	r6, r6, #8
 800beba:	d1f4      	bne.n	800bea6 <_strtod_l+0x5b6>
 800bebc:	b10b      	cbz	r3, 800bec2 <_strtod_l+0x5d2>
 800bebe:	4682      	mov	sl, r0
 800bec0:	468b      	mov	fp, r1
 800bec2:	9b08      	ldr	r3, [sp, #32]
 800bec4:	b1b3      	cbz	r3, 800bef4 <_strtod_l+0x604>
 800bec6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800beca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bece:	2b00      	cmp	r3, #0
 800bed0:	4659      	mov	r1, fp
 800bed2:	dd0f      	ble.n	800bef4 <_strtod_l+0x604>
 800bed4:	2b1f      	cmp	r3, #31
 800bed6:	dd55      	ble.n	800bf84 <_strtod_l+0x694>
 800bed8:	2b34      	cmp	r3, #52	@ 0x34
 800beda:	bfde      	ittt	le
 800bedc:	f04f 33ff 	movle.w	r3, #4294967295
 800bee0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bee4:	4093      	lslle	r3, r2
 800bee6:	f04f 0a00 	mov.w	sl, #0
 800beea:	bfcc      	ite	gt
 800beec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bef0:	ea03 0b01 	andle.w	fp, r3, r1
 800bef4:	2200      	movs	r2, #0
 800bef6:	2300      	movs	r3, #0
 800bef8:	4650      	mov	r0, sl
 800befa:	4659      	mov	r1, fp
 800befc:	f7f4 fe0c 	bl	8000b18 <__aeabi_dcmpeq>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	d1a6      	bne.n	800be52 <_strtod_l+0x562>
 800bf04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf06:	9300      	str	r3, [sp, #0]
 800bf08:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bf0a:	9805      	ldr	r0, [sp, #20]
 800bf0c:	462b      	mov	r3, r5
 800bf0e:	463a      	mov	r2, r7
 800bf10:	f7ff f8c6 	bl	800b0a0 <__s2b>
 800bf14:	900a      	str	r0, [sp, #40]	@ 0x28
 800bf16:	2800      	cmp	r0, #0
 800bf18:	f43f af05 	beq.w	800bd26 <_strtod_l+0x436>
 800bf1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf1e:	2a00      	cmp	r2, #0
 800bf20:	eba9 0308 	sub.w	r3, r9, r8
 800bf24:	bfa8      	it	ge
 800bf26:	2300      	movge	r3, #0
 800bf28:	9312      	str	r3, [sp, #72]	@ 0x48
 800bf2a:	2400      	movs	r4, #0
 800bf2c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bf30:	9316      	str	r3, [sp, #88]	@ 0x58
 800bf32:	46a0      	mov	r8, r4
 800bf34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf36:	9805      	ldr	r0, [sp, #20]
 800bf38:	6859      	ldr	r1, [r3, #4]
 800bf3a:	f7ff f809 	bl	800af50 <_Balloc>
 800bf3e:	4681      	mov	r9, r0
 800bf40:	2800      	cmp	r0, #0
 800bf42:	f43f aef4 	beq.w	800bd2e <_strtod_l+0x43e>
 800bf46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf48:	691a      	ldr	r2, [r3, #16]
 800bf4a:	3202      	adds	r2, #2
 800bf4c:	f103 010c 	add.w	r1, r3, #12
 800bf50:	0092      	lsls	r2, r2, #2
 800bf52:	300c      	adds	r0, #12
 800bf54:	f7fe f89b 	bl	800a08e <memcpy>
 800bf58:	ec4b ab10 	vmov	d0, sl, fp
 800bf5c:	9805      	ldr	r0, [sp, #20]
 800bf5e:	aa1c      	add	r2, sp, #112	@ 0x70
 800bf60:	a91b      	add	r1, sp, #108	@ 0x6c
 800bf62:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bf66:	f7ff fbd7 	bl	800b718 <__d2b>
 800bf6a:	901a      	str	r0, [sp, #104]	@ 0x68
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	f43f aede 	beq.w	800bd2e <_strtod_l+0x43e>
 800bf72:	9805      	ldr	r0, [sp, #20]
 800bf74:	2101      	movs	r1, #1
 800bf76:	f7ff f929 	bl	800b1cc <__i2b>
 800bf7a:	4680      	mov	r8, r0
 800bf7c:	b948      	cbnz	r0, 800bf92 <_strtod_l+0x6a2>
 800bf7e:	f04f 0800 	mov.w	r8, #0
 800bf82:	e6d4      	b.n	800bd2e <_strtod_l+0x43e>
 800bf84:	f04f 32ff 	mov.w	r2, #4294967295
 800bf88:	fa02 f303 	lsl.w	r3, r2, r3
 800bf8c:	ea03 0a0a 	and.w	sl, r3, sl
 800bf90:	e7b0      	b.n	800bef4 <_strtod_l+0x604>
 800bf92:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bf94:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bf96:	2d00      	cmp	r5, #0
 800bf98:	bfab      	itete	ge
 800bf9a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bf9c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bf9e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bfa0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bfa2:	bfac      	ite	ge
 800bfa4:	18ef      	addge	r7, r5, r3
 800bfa6:	1b5e      	sublt	r6, r3, r5
 800bfa8:	9b08      	ldr	r3, [sp, #32]
 800bfaa:	1aed      	subs	r5, r5, r3
 800bfac:	4415      	add	r5, r2
 800bfae:	4b66      	ldr	r3, [pc, #408]	@ (800c148 <_strtod_l+0x858>)
 800bfb0:	3d01      	subs	r5, #1
 800bfb2:	429d      	cmp	r5, r3
 800bfb4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bfb8:	da50      	bge.n	800c05c <_strtod_l+0x76c>
 800bfba:	1b5b      	subs	r3, r3, r5
 800bfbc:	2b1f      	cmp	r3, #31
 800bfbe:	eba2 0203 	sub.w	r2, r2, r3
 800bfc2:	f04f 0101 	mov.w	r1, #1
 800bfc6:	dc3d      	bgt.n	800c044 <_strtod_l+0x754>
 800bfc8:	fa01 f303 	lsl.w	r3, r1, r3
 800bfcc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bfce:	2300      	movs	r3, #0
 800bfd0:	9310      	str	r3, [sp, #64]	@ 0x40
 800bfd2:	18bd      	adds	r5, r7, r2
 800bfd4:	9b08      	ldr	r3, [sp, #32]
 800bfd6:	42af      	cmp	r7, r5
 800bfd8:	4416      	add	r6, r2
 800bfda:	441e      	add	r6, r3
 800bfdc:	463b      	mov	r3, r7
 800bfde:	bfa8      	it	ge
 800bfe0:	462b      	movge	r3, r5
 800bfe2:	42b3      	cmp	r3, r6
 800bfe4:	bfa8      	it	ge
 800bfe6:	4633      	movge	r3, r6
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	bfc2      	ittt	gt
 800bfec:	1aed      	subgt	r5, r5, r3
 800bfee:	1af6      	subgt	r6, r6, r3
 800bff0:	1aff      	subgt	r7, r7, r3
 800bff2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	dd16      	ble.n	800c026 <_strtod_l+0x736>
 800bff8:	4641      	mov	r1, r8
 800bffa:	9805      	ldr	r0, [sp, #20]
 800bffc:	461a      	mov	r2, r3
 800bffe:	f7ff f9a5 	bl	800b34c <__pow5mult>
 800c002:	4680      	mov	r8, r0
 800c004:	2800      	cmp	r0, #0
 800c006:	d0ba      	beq.n	800bf7e <_strtod_l+0x68e>
 800c008:	4601      	mov	r1, r0
 800c00a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c00c:	9805      	ldr	r0, [sp, #20]
 800c00e:	f7ff f8f3 	bl	800b1f8 <__multiply>
 800c012:	900e      	str	r0, [sp, #56]	@ 0x38
 800c014:	2800      	cmp	r0, #0
 800c016:	f43f ae8a 	beq.w	800bd2e <_strtod_l+0x43e>
 800c01a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c01c:	9805      	ldr	r0, [sp, #20]
 800c01e:	f7fe ffd7 	bl	800afd0 <_Bfree>
 800c022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c024:	931a      	str	r3, [sp, #104]	@ 0x68
 800c026:	2d00      	cmp	r5, #0
 800c028:	dc1d      	bgt.n	800c066 <_strtod_l+0x776>
 800c02a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	dd23      	ble.n	800c078 <_strtod_l+0x788>
 800c030:	4649      	mov	r1, r9
 800c032:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c034:	9805      	ldr	r0, [sp, #20]
 800c036:	f7ff f989 	bl	800b34c <__pow5mult>
 800c03a:	4681      	mov	r9, r0
 800c03c:	b9e0      	cbnz	r0, 800c078 <_strtod_l+0x788>
 800c03e:	f04f 0900 	mov.w	r9, #0
 800c042:	e674      	b.n	800bd2e <_strtod_l+0x43e>
 800c044:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c048:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c04c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c050:	35e2      	adds	r5, #226	@ 0xe2
 800c052:	fa01 f305 	lsl.w	r3, r1, r5
 800c056:	9310      	str	r3, [sp, #64]	@ 0x40
 800c058:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c05a:	e7ba      	b.n	800bfd2 <_strtod_l+0x6e2>
 800c05c:	2300      	movs	r3, #0
 800c05e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c060:	2301      	movs	r3, #1
 800c062:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c064:	e7b5      	b.n	800bfd2 <_strtod_l+0x6e2>
 800c066:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c068:	9805      	ldr	r0, [sp, #20]
 800c06a:	462a      	mov	r2, r5
 800c06c:	f7ff f9c8 	bl	800b400 <__lshift>
 800c070:	901a      	str	r0, [sp, #104]	@ 0x68
 800c072:	2800      	cmp	r0, #0
 800c074:	d1d9      	bne.n	800c02a <_strtod_l+0x73a>
 800c076:	e65a      	b.n	800bd2e <_strtod_l+0x43e>
 800c078:	2e00      	cmp	r6, #0
 800c07a:	dd07      	ble.n	800c08c <_strtod_l+0x79c>
 800c07c:	4649      	mov	r1, r9
 800c07e:	9805      	ldr	r0, [sp, #20]
 800c080:	4632      	mov	r2, r6
 800c082:	f7ff f9bd 	bl	800b400 <__lshift>
 800c086:	4681      	mov	r9, r0
 800c088:	2800      	cmp	r0, #0
 800c08a:	d0d8      	beq.n	800c03e <_strtod_l+0x74e>
 800c08c:	2f00      	cmp	r7, #0
 800c08e:	dd08      	ble.n	800c0a2 <_strtod_l+0x7b2>
 800c090:	4641      	mov	r1, r8
 800c092:	9805      	ldr	r0, [sp, #20]
 800c094:	463a      	mov	r2, r7
 800c096:	f7ff f9b3 	bl	800b400 <__lshift>
 800c09a:	4680      	mov	r8, r0
 800c09c:	2800      	cmp	r0, #0
 800c09e:	f43f ae46 	beq.w	800bd2e <_strtod_l+0x43e>
 800c0a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c0a4:	9805      	ldr	r0, [sp, #20]
 800c0a6:	464a      	mov	r2, r9
 800c0a8:	f7ff fa32 	bl	800b510 <__mdiff>
 800c0ac:	4604      	mov	r4, r0
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	f43f ae3d 	beq.w	800bd2e <_strtod_l+0x43e>
 800c0b4:	68c3      	ldr	r3, [r0, #12]
 800c0b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	60c3      	str	r3, [r0, #12]
 800c0bc:	4641      	mov	r1, r8
 800c0be:	f7ff fa0b 	bl	800b4d8 <__mcmp>
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	da46      	bge.n	800c154 <_strtod_l+0x864>
 800c0c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0c8:	ea53 030a 	orrs.w	r3, r3, sl
 800c0cc:	d16c      	bne.n	800c1a8 <_strtod_l+0x8b8>
 800c0ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d168      	bne.n	800c1a8 <_strtod_l+0x8b8>
 800c0d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c0da:	0d1b      	lsrs	r3, r3, #20
 800c0dc:	051b      	lsls	r3, r3, #20
 800c0de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c0e2:	d961      	bls.n	800c1a8 <_strtod_l+0x8b8>
 800c0e4:	6963      	ldr	r3, [r4, #20]
 800c0e6:	b913      	cbnz	r3, 800c0ee <_strtod_l+0x7fe>
 800c0e8:	6923      	ldr	r3, [r4, #16]
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	dd5c      	ble.n	800c1a8 <_strtod_l+0x8b8>
 800c0ee:	4621      	mov	r1, r4
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	9805      	ldr	r0, [sp, #20]
 800c0f4:	f7ff f984 	bl	800b400 <__lshift>
 800c0f8:	4641      	mov	r1, r8
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	f7ff f9ec 	bl	800b4d8 <__mcmp>
 800c100:	2800      	cmp	r0, #0
 800c102:	dd51      	ble.n	800c1a8 <_strtod_l+0x8b8>
 800c104:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c108:	9a08      	ldr	r2, [sp, #32]
 800c10a:	0d1b      	lsrs	r3, r3, #20
 800c10c:	051b      	lsls	r3, r3, #20
 800c10e:	2a00      	cmp	r2, #0
 800c110:	d06b      	beq.n	800c1ea <_strtod_l+0x8fa>
 800c112:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c116:	d868      	bhi.n	800c1ea <_strtod_l+0x8fa>
 800c118:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c11c:	f67f ae9d 	bls.w	800be5a <_strtod_l+0x56a>
 800c120:	4b0a      	ldr	r3, [pc, #40]	@ (800c14c <_strtod_l+0x85c>)
 800c122:	4650      	mov	r0, sl
 800c124:	4659      	mov	r1, fp
 800c126:	2200      	movs	r2, #0
 800c128:	f7f4 fa8e 	bl	8000648 <__aeabi_dmul>
 800c12c:	4b08      	ldr	r3, [pc, #32]	@ (800c150 <_strtod_l+0x860>)
 800c12e:	400b      	ands	r3, r1
 800c130:	4682      	mov	sl, r0
 800c132:	468b      	mov	fp, r1
 800c134:	2b00      	cmp	r3, #0
 800c136:	f47f ae05 	bne.w	800bd44 <_strtod_l+0x454>
 800c13a:	9a05      	ldr	r2, [sp, #20]
 800c13c:	2322      	movs	r3, #34	@ 0x22
 800c13e:	6013      	str	r3, [r2, #0]
 800c140:	e600      	b.n	800bd44 <_strtod_l+0x454>
 800c142:	bf00      	nop
 800c144:	0800dd68 	.word	0x0800dd68
 800c148:	fffffc02 	.word	0xfffffc02
 800c14c:	39500000 	.word	0x39500000
 800c150:	7ff00000 	.word	0x7ff00000
 800c154:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c158:	d165      	bne.n	800c226 <_strtod_l+0x936>
 800c15a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c15c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c160:	b35a      	cbz	r2, 800c1ba <_strtod_l+0x8ca>
 800c162:	4a9f      	ldr	r2, [pc, #636]	@ (800c3e0 <_strtod_l+0xaf0>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d12b      	bne.n	800c1c0 <_strtod_l+0x8d0>
 800c168:	9b08      	ldr	r3, [sp, #32]
 800c16a:	4651      	mov	r1, sl
 800c16c:	b303      	cbz	r3, 800c1b0 <_strtod_l+0x8c0>
 800c16e:	4b9d      	ldr	r3, [pc, #628]	@ (800c3e4 <_strtod_l+0xaf4>)
 800c170:	465a      	mov	r2, fp
 800c172:	4013      	ands	r3, r2
 800c174:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c178:	f04f 32ff 	mov.w	r2, #4294967295
 800c17c:	d81b      	bhi.n	800c1b6 <_strtod_l+0x8c6>
 800c17e:	0d1b      	lsrs	r3, r3, #20
 800c180:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c184:	fa02 f303 	lsl.w	r3, r2, r3
 800c188:	4299      	cmp	r1, r3
 800c18a:	d119      	bne.n	800c1c0 <_strtod_l+0x8d0>
 800c18c:	4b96      	ldr	r3, [pc, #600]	@ (800c3e8 <_strtod_l+0xaf8>)
 800c18e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c190:	429a      	cmp	r2, r3
 800c192:	d102      	bne.n	800c19a <_strtod_l+0x8aa>
 800c194:	3101      	adds	r1, #1
 800c196:	f43f adca 	beq.w	800bd2e <_strtod_l+0x43e>
 800c19a:	4b92      	ldr	r3, [pc, #584]	@ (800c3e4 <_strtod_l+0xaf4>)
 800c19c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c19e:	401a      	ands	r2, r3
 800c1a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c1a4:	f04f 0a00 	mov.w	sl, #0
 800c1a8:	9b08      	ldr	r3, [sp, #32]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d1b8      	bne.n	800c120 <_strtod_l+0x830>
 800c1ae:	e5c9      	b.n	800bd44 <_strtod_l+0x454>
 800c1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1b4:	e7e8      	b.n	800c188 <_strtod_l+0x898>
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	e7e6      	b.n	800c188 <_strtod_l+0x898>
 800c1ba:	ea53 030a 	orrs.w	r3, r3, sl
 800c1be:	d0a1      	beq.n	800c104 <_strtod_l+0x814>
 800c1c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c1c2:	b1db      	cbz	r3, 800c1fc <_strtod_l+0x90c>
 800c1c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1c6:	4213      	tst	r3, r2
 800c1c8:	d0ee      	beq.n	800c1a8 <_strtod_l+0x8b8>
 800c1ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1cc:	9a08      	ldr	r2, [sp, #32]
 800c1ce:	4650      	mov	r0, sl
 800c1d0:	4659      	mov	r1, fp
 800c1d2:	b1bb      	cbz	r3, 800c204 <_strtod_l+0x914>
 800c1d4:	f7ff fb6e 	bl	800b8b4 <sulp>
 800c1d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1dc:	ec53 2b10 	vmov	r2, r3, d0
 800c1e0:	f7f4 f87c 	bl	80002dc <__adddf3>
 800c1e4:	4682      	mov	sl, r0
 800c1e6:	468b      	mov	fp, r1
 800c1e8:	e7de      	b.n	800c1a8 <_strtod_l+0x8b8>
 800c1ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c1ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c1f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c1f6:	f04f 3aff 	mov.w	sl, #4294967295
 800c1fa:	e7d5      	b.n	800c1a8 <_strtod_l+0x8b8>
 800c1fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c1fe:	ea13 0f0a 	tst.w	r3, sl
 800c202:	e7e1      	b.n	800c1c8 <_strtod_l+0x8d8>
 800c204:	f7ff fb56 	bl	800b8b4 <sulp>
 800c208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c20c:	ec53 2b10 	vmov	r2, r3, d0
 800c210:	f7f4 f862 	bl	80002d8 <__aeabi_dsub>
 800c214:	2200      	movs	r2, #0
 800c216:	2300      	movs	r3, #0
 800c218:	4682      	mov	sl, r0
 800c21a:	468b      	mov	fp, r1
 800c21c:	f7f4 fc7c 	bl	8000b18 <__aeabi_dcmpeq>
 800c220:	2800      	cmp	r0, #0
 800c222:	d0c1      	beq.n	800c1a8 <_strtod_l+0x8b8>
 800c224:	e619      	b.n	800be5a <_strtod_l+0x56a>
 800c226:	4641      	mov	r1, r8
 800c228:	4620      	mov	r0, r4
 800c22a:	f7ff facd 	bl	800b7c8 <__ratio>
 800c22e:	ec57 6b10 	vmov	r6, r7, d0
 800c232:	2200      	movs	r2, #0
 800c234:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c238:	4630      	mov	r0, r6
 800c23a:	4639      	mov	r1, r7
 800c23c:	f7f4 fc80 	bl	8000b40 <__aeabi_dcmple>
 800c240:	2800      	cmp	r0, #0
 800c242:	d06f      	beq.n	800c324 <_strtod_l+0xa34>
 800c244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c246:	2b00      	cmp	r3, #0
 800c248:	d17a      	bne.n	800c340 <_strtod_l+0xa50>
 800c24a:	f1ba 0f00 	cmp.w	sl, #0
 800c24e:	d158      	bne.n	800c302 <_strtod_l+0xa12>
 800c250:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c252:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c256:	2b00      	cmp	r3, #0
 800c258:	d15a      	bne.n	800c310 <_strtod_l+0xa20>
 800c25a:	4b64      	ldr	r3, [pc, #400]	@ (800c3ec <_strtod_l+0xafc>)
 800c25c:	2200      	movs	r2, #0
 800c25e:	4630      	mov	r0, r6
 800c260:	4639      	mov	r1, r7
 800c262:	f7f4 fc63 	bl	8000b2c <__aeabi_dcmplt>
 800c266:	2800      	cmp	r0, #0
 800c268:	d159      	bne.n	800c31e <_strtod_l+0xa2e>
 800c26a:	4630      	mov	r0, r6
 800c26c:	4639      	mov	r1, r7
 800c26e:	4b60      	ldr	r3, [pc, #384]	@ (800c3f0 <_strtod_l+0xb00>)
 800c270:	2200      	movs	r2, #0
 800c272:	f7f4 f9e9 	bl	8000648 <__aeabi_dmul>
 800c276:	4606      	mov	r6, r0
 800c278:	460f      	mov	r7, r1
 800c27a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c27e:	9606      	str	r6, [sp, #24]
 800c280:	9307      	str	r3, [sp, #28]
 800c282:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c286:	4d57      	ldr	r5, [pc, #348]	@ (800c3e4 <_strtod_l+0xaf4>)
 800c288:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c28c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c28e:	401d      	ands	r5, r3
 800c290:	4b58      	ldr	r3, [pc, #352]	@ (800c3f4 <_strtod_l+0xb04>)
 800c292:	429d      	cmp	r5, r3
 800c294:	f040 80b2 	bne.w	800c3fc <_strtod_l+0xb0c>
 800c298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c29a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c29e:	ec4b ab10 	vmov	d0, sl, fp
 800c2a2:	f7ff f9c9 	bl	800b638 <__ulp>
 800c2a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2aa:	ec51 0b10 	vmov	r0, r1, d0
 800c2ae:	f7f4 f9cb 	bl	8000648 <__aeabi_dmul>
 800c2b2:	4652      	mov	r2, sl
 800c2b4:	465b      	mov	r3, fp
 800c2b6:	f7f4 f811 	bl	80002dc <__adddf3>
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	4949      	ldr	r1, [pc, #292]	@ (800c3e4 <_strtod_l+0xaf4>)
 800c2be:	4a4e      	ldr	r2, [pc, #312]	@ (800c3f8 <_strtod_l+0xb08>)
 800c2c0:	4019      	ands	r1, r3
 800c2c2:	4291      	cmp	r1, r2
 800c2c4:	4682      	mov	sl, r0
 800c2c6:	d942      	bls.n	800c34e <_strtod_l+0xa5e>
 800c2c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c2ca:	4b47      	ldr	r3, [pc, #284]	@ (800c3e8 <_strtod_l+0xaf8>)
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d103      	bne.n	800c2d8 <_strtod_l+0x9e8>
 800c2d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	f43f ad2b 	beq.w	800bd2e <_strtod_l+0x43e>
 800c2d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c3e8 <_strtod_l+0xaf8>
 800c2dc:	f04f 3aff 	mov.w	sl, #4294967295
 800c2e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c2e2:	9805      	ldr	r0, [sp, #20]
 800c2e4:	f7fe fe74 	bl	800afd0 <_Bfree>
 800c2e8:	9805      	ldr	r0, [sp, #20]
 800c2ea:	4649      	mov	r1, r9
 800c2ec:	f7fe fe70 	bl	800afd0 <_Bfree>
 800c2f0:	9805      	ldr	r0, [sp, #20]
 800c2f2:	4641      	mov	r1, r8
 800c2f4:	f7fe fe6c 	bl	800afd0 <_Bfree>
 800c2f8:	9805      	ldr	r0, [sp, #20]
 800c2fa:	4621      	mov	r1, r4
 800c2fc:	f7fe fe68 	bl	800afd0 <_Bfree>
 800c300:	e618      	b.n	800bf34 <_strtod_l+0x644>
 800c302:	f1ba 0f01 	cmp.w	sl, #1
 800c306:	d103      	bne.n	800c310 <_strtod_l+0xa20>
 800c308:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f43f ada5 	beq.w	800be5a <_strtod_l+0x56a>
 800c310:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c3c0 <_strtod_l+0xad0>
 800c314:	4f35      	ldr	r7, [pc, #212]	@ (800c3ec <_strtod_l+0xafc>)
 800c316:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c31a:	2600      	movs	r6, #0
 800c31c:	e7b1      	b.n	800c282 <_strtod_l+0x992>
 800c31e:	4f34      	ldr	r7, [pc, #208]	@ (800c3f0 <_strtod_l+0xb00>)
 800c320:	2600      	movs	r6, #0
 800c322:	e7aa      	b.n	800c27a <_strtod_l+0x98a>
 800c324:	4b32      	ldr	r3, [pc, #200]	@ (800c3f0 <_strtod_l+0xb00>)
 800c326:	4630      	mov	r0, r6
 800c328:	4639      	mov	r1, r7
 800c32a:	2200      	movs	r2, #0
 800c32c:	f7f4 f98c 	bl	8000648 <__aeabi_dmul>
 800c330:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c332:	4606      	mov	r6, r0
 800c334:	460f      	mov	r7, r1
 800c336:	2b00      	cmp	r3, #0
 800c338:	d09f      	beq.n	800c27a <_strtod_l+0x98a>
 800c33a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c33e:	e7a0      	b.n	800c282 <_strtod_l+0x992>
 800c340:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c3c8 <_strtod_l+0xad8>
 800c344:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c348:	ec57 6b17 	vmov	r6, r7, d7
 800c34c:	e799      	b.n	800c282 <_strtod_l+0x992>
 800c34e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c352:	9b08      	ldr	r3, [sp, #32]
 800c354:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d1c1      	bne.n	800c2e0 <_strtod_l+0x9f0>
 800c35c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c360:	0d1b      	lsrs	r3, r3, #20
 800c362:	051b      	lsls	r3, r3, #20
 800c364:	429d      	cmp	r5, r3
 800c366:	d1bb      	bne.n	800c2e0 <_strtod_l+0x9f0>
 800c368:	4630      	mov	r0, r6
 800c36a:	4639      	mov	r1, r7
 800c36c:	f7f4 fccc 	bl	8000d08 <__aeabi_d2lz>
 800c370:	f7f4 f93c 	bl	80005ec <__aeabi_l2d>
 800c374:	4602      	mov	r2, r0
 800c376:	460b      	mov	r3, r1
 800c378:	4630      	mov	r0, r6
 800c37a:	4639      	mov	r1, r7
 800c37c:	f7f3 ffac 	bl	80002d8 <__aeabi_dsub>
 800c380:	460b      	mov	r3, r1
 800c382:	4602      	mov	r2, r0
 800c384:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c388:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c38c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c38e:	ea46 060a 	orr.w	r6, r6, sl
 800c392:	431e      	orrs	r6, r3
 800c394:	d06f      	beq.n	800c476 <_strtod_l+0xb86>
 800c396:	a30e      	add	r3, pc, #56	@ (adr r3, 800c3d0 <_strtod_l+0xae0>)
 800c398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39c:	f7f4 fbc6 	bl	8000b2c <__aeabi_dcmplt>
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	f47f accf 	bne.w	800bd44 <_strtod_l+0x454>
 800c3a6:	a30c      	add	r3, pc, #48	@ (adr r3, 800c3d8 <_strtod_l+0xae8>)
 800c3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3b0:	f7f4 fbda 	bl	8000b68 <__aeabi_dcmpgt>
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	d093      	beq.n	800c2e0 <_strtod_l+0x9f0>
 800c3b8:	e4c4      	b.n	800bd44 <_strtod_l+0x454>
 800c3ba:	bf00      	nop
 800c3bc:	f3af 8000 	nop.w
 800c3c0:	00000000 	.word	0x00000000
 800c3c4:	bff00000 	.word	0xbff00000
 800c3c8:	00000000 	.word	0x00000000
 800c3cc:	3ff00000 	.word	0x3ff00000
 800c3d0:	94a03595 	.word	0x94a03595
 800c3d4:	3fdfffff 	.word	0x3fdfffff
 800c3d8:	35afe535 	.word	0x35afe535
 800c3dc:	3fe00000 	.word	0x3fe00000
 800c3e0:	000fffff 	.word	0x000fffff
 800c3e4:	7ff00000 	.word	0x7ff00000
 800c3e8:	7fefffff 	.word	0x7fefffff
 800c3ec:	3ff00000 	.word	0x3ff00000
 800c3f0:	3fe00000 	.word	0x3fe00000
 800c3f4:	7fe00000 	.word	0x7fe00000
 800c3f8:	7c9fffff 	.word	0x7c9fffff
 800c3fc:	9b08      	ldr	r3, [sp, #32]
 800c3fe:	b323      	cbz	r3, 800c44a <_strtod_l+0xb5a>
 800c400:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c404:	d821      	bhi.n	800c44a <_strtod_l+0xb5a>
 800c406:	a328      	add	r3, pc, #160	@ (adr r3, 800c4a8 <_strtod_l+0xbb8>)
 800c408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40c:	4630      	mov	r0, r6
 800c40e:	4639      	mov	r1, r7
 800c410:	f7f4 fb96 	bl	8000b40 <__aeabi_dcmple>
 800c414:	b1a0      	cbz	r0, 800c440 <_strtod_l+0xb50>
 800c416:	4639      	mov	r1, r7
 800c418:	4630      	mov	r0, r6
 800c41a:	f7f4 fbed 	bl	8000bf8 <__aeabi_d2uiz>
 800c41e:	2801      	cmp	r0, #1
 800c420:	bf38      	it	cc
 800c422:	2001      	movcc	r0, #1
 800c424:	f7f4 f896 	bl	8000554 <__aeabi_ui2d>
 800c428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c42a:	4606      	mov	r6, r0
 800c42c:	460f      	mov	r7, r1
 800c42e:	b9fb      	cbnz	r3, 800c470 <_strtod_l+0xb80>
 800c430:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c434:	9014      	str	r0, [sp, #80]	@ 0x50
 800c436:	9315      	str	r3, [sp, #84]	@ 0x54
 800c438:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c43c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c440:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c442:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c446:	1b5b      	subs	r3, r3, r5
 800c448:	9311      	str	r3, [sp, #68]	@ 0x44
 800c44a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c44e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c452:	f7ff f8f1 	bl	800b638 <__ulp>
 800c456:	4650      	mov	r0, sl
 800c458:	ec53 2b10 	vmov	r2, r3, d0
 800c45c:	4659      	mov	r1, fp
 800c45e:	f7f4 f8f3 	bl	8000648 <__aeabi_dmul>
 800c462:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c466:	f7f3 ff39 	bl	80002dc <__adddf3>
 800c46a:	4682      	mov	sl, r0
 800c46c:	468b      	mov	fp, r1
 800c46e:	e770      	b.n	800c352 <_strtod_l+0xa62>
 800c470:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c474:	e7e0      	b.n	800c438 <_strtod_l+0xb48>
 800c476:	a30e      	add	r3, pc, #56	@ (adr r3, 800c4b0 <_strtod_l+0xbc0>)
 800c478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47c:	f7f4 fb56 	bl	8000b2c <__aeabi_dcmplt>
 800c480:	e798      	b.n	800c3b4 <_strtod_l+0xac4>
 800c482:	2300      	movs	r3, #0
 800c484:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c486:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c488:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c48a:	6013      	str	r3, [r2, #0]
 800c48c:	f7ff ba6d 	b.w	800b96a <_strtod_l+0x7a>
 800c490:	2a65      	cmp	r2, #101	@ 0x65
 800c492:	f43f ab66 	beq.w	800bb62 <_strtod_l+0x272>
 800c496:	2a45      	cmp	r2, #69	@ 0x45
 800c498:	f43f ab63 	beq.w	800bb62 <_strtod_l+0x272>
 800c49c:	2301      	movs	r3, #1
 800c49e:	f7ff bb9e 	b.w	800bbde <_strtod_l+0x2ee>
 800c4a2:	bf00      	nop
 800c4a4:	f3af 8000 	nop.w
 800c4a8:	ffc00000 	.word	0xffc00000
 800c4ac:	41dfffff 	.word	0x41dfffff
 800c4b0:	94a03595 	.word	0x94a03595
 800c4b4:	3fcfffff 	.word	0x3fcfffff

0800c4b8 <_strtod_r>:
 800c4b8:	4b01      	ldr	r3, [pc, #4]	@ (800c4c0 <_strtod_r+0x8>)
 800c4ba:	f7ff ba19 	b.w	800b8f0 <_strtod_l>
 800c4be:	bf00      	nop
 800c4c0:	20000068 	.word	0x20000068

0800c4c4 <_strtol_l.constprop.0>:
 800c4c4:	2b24      	cmp	r3, #36	@ 0x24
 800c4c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4ca:	4686      	mov	lr, r0
 800c4cc:	4690      	mov	r8, r2
 800c4ce:	d801      	bhi.n	800c4d4 <_strtol_l.constprop.0+0x10>
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d106      	bne.n	800c4e2 <_strtol_l.constprop.0+0x1e>
 800c4d4:	f7fd fdae 	bl	800a034 <__errno>
 800c4d8:	2316      	movs	r3, #22
 800c4da:	6003      	str	r3, [r0, #0]
 800c4dc:	2000      	movs	r0, #0
 800c4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4e2:	4834      	ldr	r0, [pc, #208]	@ (800c5b4 <_strtol_l.constprop.0+0xf0>)
 800c4e4:	460d      	mov	r5, r1
 800c4e6:	462a      	mov	r2, r5
 800c4e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4ec:	5d06      	ldrb	r6, [r0, r4]
 800c4ee:	f016 0608 	ands.w	r6, r6, #8
 800c4f2:	d1f8      	bne.n	800c4e6 <_strtol_l.constprop.0+0x22>
 800c4f4:	2c2d      	cmp	r4, #45	@ 0x2d
 800c4f6:	d12d      	bne.n	800c554 <_strtol_l.constprop.0+0x90>
 800c4f8:	782c      	ldrb	r4, [r5, #0]
 800c4fa:	2601      	movs	r6, #1
 800c4fc:	1c95      	adds	r5, r2, #2
 800c4fe:	f033 0210 	bics.w	r2, r3, #16
 800c502:	d109      	bne.n	800c518 <_strtol_l.constprop.0+0x54>
 800c504:	2c30      	cmp	r4, #48	@ 0x30
 800c506:	d12a      	bne.n	800c55e <_strtol_l.constprop.0+0x9a>
 800c508:	782a      	ldrb	r2, [r5, #0]
 800c50a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c50e:	2a58      	cmp	r2, #88	@ 0x58
 800c510:	d125      	bne.n	800c55e <_strtol_l.constprop.0+0x9a>
 800c512:	786c      	ldrb	r4, [r5, #1]
 800c514:	2310      	movs	r3, #16
 800c516:	3502      	adds	r5, #2
 800c518:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c51c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c520:	2200      	movs	r2, #0
 800c522:	fbbc f9f3 	udiv	r9, ip, r3
 800c526:	4610      	mov	r0, r2
 800c528:	fb03 ca19 	mls	sl, r3, r9, ip
 800c52c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c530:	2f09      	cmp	r7, #9
 800c532:	d81b      	bhi.n	800c56c <_strtol_l.constprop.0+0xa8>
 800c534:	463c      	mov	r4, r7
 800c536:	42a3      	cmp	r3, r4
 800c538:	dd27      	ble.n	800c58a <_strtol_l.constprop.0+0xc6>
 800c53a:	1c57      	adds	r7, r2, #1
 800c53c:	d007      	beq.n	800c54e <_strtol_l.constprop.0+0x8a>
 800c53e:	4581      	cmp	r9, r0
 800c540:	d320      	bcc.n	800c584 <_strtol_l.constprop.0+0xc0>
 800c542:	d101      	bne.n	800c548 <_strtol_l.constprop.0+0x84>
 800c544:	45a2      	cmp	sl, r4
 800c546:	db1d      	blt.n	800c584 <_strtol_l.constprop.0+0xc0>
 800c548:	fb00 4003 	mla	r0, r0, r3, r4
 800c54c:	2201      	movs	r2, #1
 800c54e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c552:	e7eb      	b.n	800c52c <_strtol_l.constprop.0+0x68>
 800c554:	2c2b      	cmp	r4, #43	@ 0x2b
 800c556:	bf04      	itt	eq
 800c558:	782c      	ldrbeq	r4, [r5, #0]
 800c55a:	1c95      	addeq	r5, r2, #2
 800c55c:	e7cf      	b.n	800c4fe <_strtol_l.constprop.0+0x3a>
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d1da      	bne.n	800c518 <_strtol_l.constprop.0+0x54>
 800c562:	2c30      	cmp	r4, #48	@ 0x30
 800c564:	bf0c      	ite	eq
 800c566:	2308      	moveq	r3, #8
 800c568:	230a      	movne	r3, #10
 800c56a:	e7d5      	b.n	800c518 <_strtol_l.constprop.0+0x54>
 800c56c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c570:	2f19      	cmp	r7, #25
 800c572:	d801      	bhi.n	800c578 <_strtol_l.constprop.0+0xb4>
 800c574:	3c37      	subs	r4, #55	@ 0x37
 800c576:	e7de      	b.n	800c536 <_strtol_l.constprop.0+0x72>
 800c578:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c57c:	2f19      	cmp	r7, #25
 800c57e:	d804      	bhi.n	800c58a <_strtol_l.constprop.0+0xc6>
 800c580:	3c57      	subs	r4, #87	@ 0x57
 800c582:	e7d8      	b.n	800c536 <_strtol_l.constprop.0+0x72>
 800c584:	f04f 32ff 	mov.w	r2, #4294967295
 800c588:	e7e1      	b.n	800c54e <_strtol_l.constprop.0+0x8a>
 800c58a:	1c53      	adds	r3, r2, #1
 800c58c:	d108      	bne.n	800c5a0 <_strtol_l.constprop.0+0xdc>
 800c58e:	2322      	movs	r3, #34	@ 0x22
 800c590:	f8ce 3000 	str.w	r3, [lr]
 800c594:	4660      	mov	r0, ip
 800c596:	f1b8 0f00 	cmp.w	r8, #0
 800c59a:	d0a0      	beq.n	800c4de <_strtol_l.constprop.0+0x1a>
 800c59c:	1e69      	subs	r1, r5, #1
 800c59e:	e006      	b.n	800c5ae <_strtol_l.constprop.0+0xea>
 800c5a0:	b106      	cbz	r6, 800c5a4 <_strtol_l.constprop.0+0xe0>
 800c5a2:	4240      	negs	r0, r0
 800c5a4:	f1b8 0f00 	cmp.w	r8, #0
 800c5a8:	d099      	beq.n	800c4de <_strtol_l.constprop.0+0x1a>
 800c5aa:	2a00      	cmp	r2, #0
 800c5ac:	d1f6      	bne.n	800c59c <_strtol_l.constprop.0+0xd8>
 800c5ae:	f8c8 1000 	str.w	r1, [r8]
 800c5b2:	e794      	b.n	800c4de <_strtol_l.constprop.0+0x1a>
 800c5b4:	0800dd91 	.word	0x0800dd91

0800c5b8 <_strtol_r>:
 800c5b8:	f7ff bf84 	b.w	800c4c4 <_strtol_l.constprop.0>

0800c5bc <__ssputs_r>:
 800c5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5c0:	688e      	ldr	r6, [r1, #8]
 800c5c2:	461f      	mov	r7, r3
 800c5c4:	42be      	cmp	r6, r7
 800c5c6:	680b      	ldr	r3, [r1, #0]
 800c5c8:	4682      	mov	sl, r0
 800c5ca:	460c      	mov	r4, r1
 800c5cc:	4690      	mov	r8, r2
 800c5ce:	d82d      	bhi.n	800c62c <__ssputs_r+0x70>
 800c5d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c5d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c5d8:	d026      	beq.n	800c628 <__ssputs_r+0x6c>
 800c5da:	6965      	ldr	r5, [r4, #20]
 800c5dc:	6909      	ldr	r1, [r1, #16]
 800c5de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5e2:	eba3 0901 	sub.w	r9, r3, r1
 800c5e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5ea:	1c7b      	adds	r3, r7, #1
 800c5ec:	444b      	add	r3, r9
 800c5ee:	106d      	asrs	r5, r5, #1
 800c5f0:	429d      	cmp	r5, r3
 800c5f2:	bf38      	it	cc
 800c5f4:	461d      	movcc	r5, r3
 800c5f6:	0553      	lsls	r3, r2, #21
 800c5f8:	d527      	bpl.n	800c64a <__ssputs_r+0x8e>
 800c5fa:	4629      	mov	r1, r5
 800c5fc:	f7fe fc1c 	bl	800ae38 <_malloc_r>
 800c600:	4606      	mov	r6, r0
 800c602:	b360      	cbz	r0, 800c65e <__ssputs_r+0xa2>
 800c604:	6921      	ldr	r1, [r4, #16]
 800c606:	464a      	mov	r2, r9
 800c608:	f7fd fd41 	bl	800a08e <memcpy>
 800c60c:	89a3      	ldrh	r3, [r4, #12]
 800c60e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c616:	81a3      	strh	r3, [r4, #12]
 800c618:	6126      	str	r6, [r4, #16]
 800c61a:	6165      	str	r5, [r4, #20]
 800c61c:	444e      	add	r6, r9
 800c61e:	eba5 0509 	sub.w	r5, r5, r9
 800c622:	6026      	str	r6, [r4, #0]
 800c624:	60a5      	str	r5, [r4, #8]
 800c626:	463e      	mov	r6, r7
 800c628:	42be      	cmp	r6, r7
 800c62a:	d900      	bls.n	800c62e <__ssputs_r+0x72>
 800c62c:	463e      	mov	r6, r7
 800c62e:	6820      	ldr	r0, [r4, #0]
 800c630:	4632      	mov	r2, r6
 800c632:	4641      	mov	r1, r8
 800c634:	f000 fb6a 	bl	800cd0c <memmove>
 800c638:	68a3      	ldr	r3, [r4, #8]
 800c63a:	1b9b      	subs	r3, r3, r6
 800c63c:	60a3      	str	r3, [r4, #8]
 800c63e:	6823      	ldr	r3, [r4, #0]
 800c640:	4433      	add	r3, r6
 800c642:	6023      	str	r3, [r4, #0]
 800c644:	2000      	movs	r0, #0
 800c646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c64a:	462a      	mov	r2, r5
 800c64c:	f000 ff41 	bl	800d4d2 <_realloc_r>
 800c650:	4606      	mov	r6, r0
 800c652:	2800      	cmp	r0, #0
 800c654:	d1e0      	bne.n	800c618 <__ssputs_r+0x5c>
 800c656:	6921      	ldr	r1, [r4, #16]
 800c658:	4650      	mov	r0, sl
 800c65a:	f7fe fb79 	bl	800ad50 <_free_r>
 800c65e:	230c      	movs	r3, #12
 800c660:	f8ca 3000 	str.w	r3, [sl]
 800c664:	89a3      	ldrh	r3, [r4, #12]
 800c666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c66a:	81a3      	strh	r3, [r4, #12]
 800c66c:	f04f 30ff 	mov.w	r0, #4294967295
 800c670:	e7e9      	b.n	800c646 <__ssputs_r+0x8a>
	...

0800c674 <_svfiprintf_r>:
 800c674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c678:	4698      	mov	r8, r3
 800c67a:	898b      	ldrh	r3, [r1, #12]
 800c67c:	061b      	lsls	r3, r3, #24
 800c67e:	b09d      	sub	sp, #116	@ 0x74
 800c680:	4607      	mov	r7, r0
 800c682:	460d      	mov	r5, r1
 800c684:	4614      	mov	r4, r2
 800c686:	d510      	bpl.n	800c6aa <_svfiprintf_r+0x36>
 800c688:	690b      	ldr	r3, [r1, #16]
 800c68a:	b973      	cbnz	r3, 800c6aa <_svfiprintf_r+0x36>
 800c68c:	2140      	movs	r1, #64	@ 0x40
 800c68e:	f7fe fbd3 	bl	800ae38 <_malloc_r>
 800c692:	6028      	str	r0, [r5, #0]
 800c694:	6128      	str	r0, [r5, #16]
 800c696:	b930      	cbnz	r0, 800c6a6 <_svfiprintf_r+0x32>
 800c698:	230c      	movs	r3, #12
 800c69a:	603b      	str	r3, [r7, #0]
 800c69c:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a0:	b01d      	add	sp, #116	@ 0x74
 800c6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6a6:	2340      	movs	r3, #64	@ 0x40
 800c6a8:	616b      	str	r3, [r5, #20]
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6ae:	2320      	movs	r3, #32
 800c6b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c6b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6b8:	2330      	movs	r3, #48	@ 0x30
 800c6ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c858 <_svfiprintf_r+0x1e4>
 800c6be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c6c2:	f04f 0901 	mov.w	r9, #1
 800c6c6:	4623      	mov	r3, r4
 800c6c8:	469a      	mov	sl, r3
 800c6ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6ce:	b10a      	cbz	r2, 800c6d4 <_svfiprintf_r+0x60>
 800c6d0:	2a25      	cmp	r2, #37	@ 0x25
 800c6d2:	d1f9      	bne.n	800c6c8 <_svfiprintf_r+0x54>
 800c6d4:	ebba 0b04 	subs.w	fp, sl, r4
 800c6d8:	d00b      	beq.n	800c6f2 <_svfiprintf_r+0x7e>
 800c6da:	465b      	mov	r3, fp
 800c6dc:	4622      	mov	r2, r4
 800c6de:	4629      	mov	r1, r5
 800c6e0:	4638      	mov	r0, r7
 800c6e2:	f7ff ff6b 	bl	800c5bc <__ssputs_r>
 800c6e6:	3001      	adds	r0, #1
 800c6e8:	f000 80a7 	beq.w	800c83a <_svfiprintf_r+0x1c6>
 800c6ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6ee:	445a      	add	r2, fp
 800c6f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f000 809f 	beq.w	800c83a <_svfiprintf_r+0x1c6>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c706:	f10a 0a01 	add.w	sl, sl, #1
 800c70a:	9304      	str	r3, [sp, #16]
 800c70c:	9307      	str	r3, [sp, #28]
 800c70e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c712:	931a      	str	r3, [sp, #104]	@ 0x68
 800c714:	4654      	mov	r4, sl
 800c716:	2205      	movs	r2, #5
 800c718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c71c:	484e      	ldr	r0, [pc, #312]	@ (800c858 <_svfiprintf_r+0x1e4>)
 800c71e:	f7f3 fd7f 	bl	8000220 <memchr>
 800c722:	9a04      	ldr	r2, [sp, #16]
 800c724:	b9d8      	cbnz	r0, 800c75e <_svfiprintf_r+0xea>
 800c726:	06d0      	lsls	r0, r2, #27
 800c728:	bf44      	itt	mi
 800c72a:	2320      	movmi	r3, #32
 800c72c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c730:	0711      	lsls	r1, r2, #28
 800c732:	bf44      	itt	mi
 800c734:	232b      	movmi	r3, #43	@ 0x2b
 800c736:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c73a:	f89a 3000 	ldrb.w	r3, [sl]
 800c73e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c740:	d015      	beq.n	800c76e <_svfiprintf_r+0xfa>
 800c742:	9a07      	ldr	r2, [sp, #28]
 800c744:	4654      	mov	r4, sl
 800c746:	2000      	movs	r0, #0
 800c748:	f04f 0c0a 	mov.w	ip, #10
 800c74c:	4621      	mov	r1, r4
 800c74e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c752:	3b30      	subs	r3, #48	@ 0x30
 800c754:	2b09      	cmp	r3, #9
 800c756:	d94b      	bls.n	800c7f0 <_svfiprintf_r+0x17c>
 800c758:	b1b0      	cbz	r0, 800c788 <_svfiprintf_r+0x114>
 800c75a:	9207      	str	r2, [sp, #28]
 800c75c:	e014      	b.n	800c788 <_svfiprintf_r+0x114>
 800c75e:	eba0 0308 	sub.w	r3, r0, r8
 800c762:	fa09 f303 	lsl.w	r3, r9, r3
 800c766:	4313      	orrs	r3, r2
 800c768:	9304      	str	r3, [sp, #16]
 800c76a:	46a2      	mov	sl, r4
 800c76c:	e7d2      	b.n	800c714 <_svfiprintf_r+0xa0>
 800c76e:	9b03      	ldr	r3, [sp, #12]
 800c770:	1d19      	adds	r1, r3, #4
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	9103      	str	r1, [sp, #12]
 800c776:	2b00      	cmp	r3, #0
 800c778:	bfbb      	ittet	lt
 800c77a:	425b      	neglt	r3, r3
 800c77c:	f042 0202 	orrlt.w	r2, r2, #2
 800c780:	9307      	strge	r3, [sp, #28]
 800c782:	9307      	strlt	r3, [sp, #28]
 800c784:	bfb8      	it	lt
 800c786:	9204      	strlt	r2, [sp, #16]
 800c788:	7823      	ldrb	r3, [r4, #0]
 800c78a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c78c:	d10a      	bne.n	800c7a4 <_svfiprintf_r+0x130>
 800c78e:	7863      	ldrb	r3, [r4, #1]
 800c790:	2b2a      	cmp	r3, #42	@ 0x2a
 800c792:	d132      	bne.n	800c7fa <_svfiprintf_r+0x186>
 800c794:	9b03      	ldr	r3, [sp, #12]
 800c796:	1d1a      	adds	r2, r3, #4
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	9203      	str	r2, [sp, #12]
 800c79c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c7a0:	3402      	adds	r4, #2
 800c7a2:	9305      	str	r3, [sp, #20]
 800c7a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c868 <_svfiprintf_r+0x1f4>
 800c7a8:	7821      	ldrb	r1, [r4, #0]
 800c7aa:	2203      	movs	r2, #3
 800c7ac:	4650      	mov	r0, sl
 800c7ae:	f7f3 fd37 	bl	8000220 <memchr>
 800c7b2:	b138      	cbz	r0, 800c7c4 <_svfiprintf_r+0x150>
 800c7b4:	9b04      	ldr	r3, [sp, #16]
 800c7b6:	eba0 000a 	sub.w	r0, r0, sl
 800c7ba:	2240      	movs	r2, #64	@ 0x40
 800c7bc:	4082      	lsls	r2, r0
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	3401      	adds	r4, #1
 800c7c2:	9304      	str	r3, [sp, #16]
 800c7c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7c8:	4824      	ldr	r0, [pc, #144]	@ (800c85c <_svfiprintf_r+0x1e8>)
 800c7ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c7ce:	2206      	movs	r2, #6
 800c7d0:	f7f3 fd26 	bl	8000220 <memchr>
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	d036      	beq.n	800c846 <_svfiprintf_r+0x1d2>
 800c7d8:	4b21      	ldr	r3, [pc, #132]	@ (800c860 <_svfiprintf_r+0x1ec>)
 800c7da:	bb1b      	cbnz	r3, 800c824 <_svfiprintf_r+0x1b0>
 800c7dc:	9b03      	ldr	r3, [sp, #12]
 800c7de:	3307      	adds	r3, #7
 800c7e0:	f023 0307 	bic.w	r3, r3, #7
 800c7e4:	3308      	adds	r3, #8
 800c7e6:	9303      	str	r3, [sp, #12]
 800c7e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7ea:	4433      	add	r3, r6
 800c7ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7ee:	e76a      	b.n	800c6c6 <_svfiprintf_r+0x52>
 800c7f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7f4:	460c      	mov	r4, r1
 800c7f6:	2001      	movs	r0, #1
 800c7f8:	e7a8      	b.n	800c74c <_svfiprintf_r+0xd8>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	3401      	adds	r4, #1
 800c7fe:	9305      	str	r3, [sp, #20]
 800c800:	4619      	mov	r1, r3
 800c802:	f04f 0c0a 	mov.w	ip, #10
 800c806:	4620      	mov	r0, r4
 800c808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c80c:	3a30      	subs	r2, #48	@ 0x30
 800c80e:	2a09      	cmp	r2, #9
 800c810:	d903      	bls.n	800c81a <_svfiprintf_r+0x1a6>
 800c812:	2b00      	cmp	r3, #0
 800c814:	d0c6      	beq.n	800c7a4 <_svfiprintf_r+0x130>
 800c816:	9105      	str	r1, [sp, #20]
 800c818:	e7c4      	b.n	800c7a4 <_svfiprintf_r+0x130>
 800c81a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c81e:	4604      	mov	r4, r0
 800c820:	2301      	movs	r3, #1
 800c822:	e7f0      	b.n	800c806 <_svfiprintf_r+0x192>
 800c824:	ab03      	add	r3, sp, #12
 800c826:	9300      	str	r3, [sp, #0]
 800c828:	462a      	mov	r2, r5
 800c82a:	4b0e      	ldr	r3, [pc, #56]	@ (800c864 <_svfiprintf_r+0x1f0>)
 800c82c:	a904      	add	r1, sp, #16
 800c82e:	4638      	mov	r0, r7
 800c830:	f7fc fb84 	bl	8008f3c <_printf_float>
 800c834:	1c42      	adds	r2, r0, #1
 800c836:	4606      	mov	r6, r0
 800c838:	d1d6      	bne.n	800c7e8 <_svfiprintf_r+0x174>
 800c83a:	89ab      	ldrh	r3, [r5, #12]
 800c83c:	065b      	lsls	r3, r3, #25
 800c83e:	f53f af2d 	bmi.w	800c69c <_svfiprintf_r+0x28>
 800c842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c844:	e72c      	b.n	800c6a0 <_svfiprintf_r+0x2c>
 800c846:	ab03      	add	r3, sp, #12
 800c848:	9300      	str	r3, [sp, #0]
 800c84a:	462a      	mov	r2, r5
 800c84c:	4b05      	ldr	r3, [pc, #20]	@ (800c864 <_svfiprintf_r+0x1f0>)
 800c84e:	a904      	add	r1, sp, #16
 800c850:	4638      	mov	r0, r7
 800c852:	f7fc fe0b 	bl	800946c <_printf_i>
 800c856:	e7ed      	b.n	800c834 <_svfiprintf_r+0x1c0>
 800c858:	0800de91 	.word	0x0800de91
 800c85c:	0800de9b 	.word	0x0800de9b
 800c860:	08008f3d 	.word	0x08008f3d
 800c864:	0800c5bd 	.word	0x0800c5bd
 800c868:	0800de97 	.word	0x0800de97

0800c86c <__sfputc_r>:
 800c86c:	6893      	ldr	r3, [r2, #8]
 800c86e:	3b01      	subs	r3, #1
 800c870:	2b00      	cmp	r3, #0
 800c872:	b410      	push	{r4}
 800c874:	6093      	str	r3, [r2, #8]
 800c876:	da08      	bge.n	800c88a <__sfputc_r+0x1e>
 800c878:	6994      	ldr	r4, [r2, #24]
 800c87a:	42a3      	cmp	r3, r4
 800c87c:	db01      	blt.n	800c882 <__sfputc_r+0x16>
 800c87e:	290a      	cmp	r1, #10
 800c880:	d103      	bne.n	800c88a <__sfputc_r+0x1e>
 800c882:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c886:	f7fd baee 	b.w	8009e66 <__swbuf_r>
 800c88a:	6813      	ldr	r3, [r2, #0]
 800c88c:	1c58      	adds	r0, r3, #1
 800c88e:	6010      	str	r0, [r2, #0]
 800c890:	7019      	strb	r1, [r3, #0]
 800c892:	4608      	mov	r0, r1
 800c894:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c898:	4770      	bx	lr

0800c89a <__sfputs_r>:
 800c89a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c89c:	4606      	mov	r6, r0
 800c89e:	460f      	mov	r7, r1
 800c8a0:	4614      	mov	r4, r2
 800c8a2:	18d5      	adds	r5, r2, r3
 800c8a4:	42ac      	cmp	r4, r5
 800c8a6:	d101      	bne.n	800c8ac <__sfputs_r+0x12>
 800c8a8:	2000      	movs	r0, #0
 800c8aa:	e007      	b.n	800c8bc <__sfputs_r+0x22>
 800c8ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8b0:	463a      	mov	r2, r7
 800c8b2:	4630      	mov	r0, r6
 800c8b4:	f7ff ffda 	bl	800c86c <__sfputc_r>
 800c8b8:	1c43      	adds	r3, r0, #1
 800c8ba:	d1f3      	bne.n	800c8a4 <__sfputs_r+0xa>
 800c8bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c8c0 <_vfiprintf_r>:
 800c8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c4:	460d      	mov	r5, r1
 800c8c6:	b09d      	sub	sp, #116	@ 0x74
 800c8c8:	4614      	mov	r4, r2
 800c8ca:	4698      	mov	r8, r3
 800c8cc:	4606      	mov	r6, r0
 800c8ce:	b118      	cbz	r0, 800c8d8 <_vfiprintf_r+0x18>
 800c8d0:	6a03      	ldr	r3, [r0, #32]
 800c8d2:	b90b      	cbnz	r3, 800c8d8 <_vfiprintf_r+0x18>
 800c8d4:	f7fd f98a 	bl	8009bec <__sinit>
 800c8d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c8da:	07d9      	lsls	r1, r3, #31
 800c8dc:	d405      	bmi.n	800c8ea <_vfiprintf_r+0x2a>
 800c8de:	89ab      	ldrh	r3, [r5, #12]
 800c8e0:	059a      	lsls	r2, r3, #22
 800c8e2:	d402      	bmi.n	800c8ea <_vfiprintf_r+0x2a>
 800c8e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c8e6:	f7fd fbd0 	bl	800a08a <__retarget_lock_acquire_recursive>
 800c8ea:	89ab      	ldrh	r3, [r5, #12]
 800c8ec:	071b      	lsls	r3, r3, #28
 800c8ee:	d501      	bpl.n	800c8f4 <_vfiprintf_r+0x34>
 800c8f0:	692b      	ldr	r3, [r5, #16]
 800c8f2:	b99b      	cbnz	r3, 800c91c <_vfiprintf_r+0x5c>
 800c8f4:	4629      	mov	r1, r5
 800c8f6:	4630      	mov	r0, r6
 800c8f8:	f7fd faf4 	bl	8009ee4 <__swsetup_r>
 800c8fc:	b170      	cbz	r0, 800c91c <_vfiprintf_r+0x5c>
 800c8fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c900:	07dc      	lsls	r4, r3, #31
 800c902:	d504      	bpl.n	800c90e <_vfiprintf_r+0x4e>
 800c904:	f04f 30ff 	mov.w	r0, #4294967295
 800c908:	b01d      	add	sp, #116	@ 0x74
 800c90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c90e:	89ab      	ldrh	r3, [r5, #12]
 800c910:	0598      	lsls	r0, r3, #22
 800c912:	d4f7      	bmi.n	800c904 <_vfiprintf_r+0x44>
 800c914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c916:	f7fd fbb9 	bl	800a08c <__retarget_lock_release_recursive>
 800c91a:	e7f3      	b.n	800c904 <_vfiprintf_r+0x44>
 800c91c:	2300      	movs	r3, #0
 800c91e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c920:	2320      	movs	r3, #32
 800c922:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c926:	f8cd 800c 	str.w	r8, [sp, #12]
 800c92a:	2330      	movs	r3, #48	@ 0x30
 800c92c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cadc <_vfiprintf_r+0x21c>
 800c930:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c934:	f04f 0901 	mov.w	r9, #1
 800c938:	4623      	mov	r3, r4
 800c93a:	469a      	mov	sl, r3
 800c93c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c940:	b10a      	cbz	r2, 800c946 <_vfiprintf_r+0x86>
 800c942:	2a25      	cmp	r2, #37	@ 0x25
 800c944:	d1f9      	bne.n	800c93a <_vfiprintf_r+0x7a>
 800c946:	ebba 0b04 	subs.w	fp, sl, r4
 800c94a:	d00b      	beq.n	800c964 <_vfiprintf_r+0xa4>
 800c94c:	465b      	mov	r3, fp
 800c94e:	4622      	mov	r2, r4
 800c950:	4629      	mov	r1, r5
 800c952:	4630      	mov	r0, r6
 800c954:	f7ff ffa1 	bl	800c89a <__sfputs_r>
 800c958:	3001      	adds	r0, #1
 800c95a:	f000 80a7 	beq.w	800caac <_vfiprintf_r+0x1ec>
 800c95e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c960:	445a      	add	r2, fp
 800c962:	9209      	str	r2, [sp, #36]	@ 0x24
 800c964:	f89a 3000 	ldrb.w	r3, [sl]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	f000 809f 	beq.w	800caac <_vfiprintf_r+0x1ec>
 800c96e:	2300      	movs	r3, #0
 800c970:	f04f 32ff 	mov.w	r2, #4294967295
 800c974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c978:	f10a 0a01 	add.w	sl, sl, #1
 800c97c:	9304      	str	r3, [sp, #16]
 800c97e:	9307      	str	r3, [sp, #28]
 800c980:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c984:	931a      	str	r3, [sp, #104]	@ 0x68
 800c986:	4654      	mov	r4, sl
 800c988:	2205      	movs	r2, #5
 800c98a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c98e:	4853      	ldr	r0, [pc, #332]	@ (800cadc <_vfiprintf_r+0x21c>)
 800c990:	f7f3 fc46 	bl	8000220 <memchr>
 800c994:	9a04      	ldr	r2, [sp, #16]
 800c996:	b9d8      	cbnz	r0, 800c9d0 <_vfiprintf_r+0x110>
 800c998:	06d1      	lsls	r1, r2, #27
 800c99a:	bf44      	itt	mi
 800c99c:	2320      	movmi	r3, #32
 800c99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9a2:	0713      	lsls	r3, r2, #28
 800c9a4:	bf44      	itt	mi
 800c9a6:	232b      	movmi	r3, #43	@ 0x2b
 800c9a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9ac:	f89a 3000 	ldrb.w	r3, [sl]
 800c9b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9b2:	d015      	beq.n	800c9e0 <_vfiprintf_r+0x120>
 800c9b4:	9a07      	ldr	r2, [sp, #28]
 800c9b6:	4654      	mov	r4, sl
 800c9b8:	2000      	movs	r0, #0
 800c9ba:	f04f 0c0a 	mov.w	ip, #10
 800c9be:	4621      	mov	r1, r4
 800c9c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9c4:	3b30      	subs	r3, #48	@ 0x30
 800c9c6:	2b09      	cmp	r3, #9
 800c9c8:	d94b      	bls.n	800ca62 <_vfiprintf_r+0x1a2>
 800c9ca:	b1b0      	cbz	r0, 800c9fa <_vfiprintf_r+0x13a>
 800c9cc:	9207      	str	r2, [sp, #28]
 800c9ce:	e014      	b.n	800c9fa <_vfiprintf_r+0x13a>
 800c9d0:	eba0 0308 	sub.w	r3, r0, r8
 800c9d4:	fa09 f303 	lsl.w	r3, r9, r3
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	9304      	str	r3, [sp, #16]
 800c9dc:	46a2      	mov	sl, r4
 800c9de:	e7d2      	b.n	800c986 <_vfiprintf_r+0xc6>
 800c9e0:	9b03      	ldr	r3, [sp, #12]
 800c9e2:	1d19      	adds	r1, r3, #4
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	9103      	str	r1, [sp, #12]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	bfbb      	ittet	lt
 800c9ec:	425b      	neglt	r3, r3
 800c9ee:	f042 0202 	orrlt.w	r2, r2, #2
 800c9f2:	9307      	strge	r3, [sp, #28]
 800c9f4:	9307      	strlt	r3, [sp, #28]
 800c9f6:	bfb8      	it	lt
 800c9f8:	9204      	strlt	r2, [sp, #16]
 800c9fa:	7823      	ldrb	r3, [r4, #0]
 800c9fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c9fe:	d10a      	bne.n	800ca16 <_vfiprintf_r+0x156>
 800ca00:	7863      	ldrb	r3, [r4, #1]
 800ca02:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca04:	d132      	bne.n	800ca6c <_vfiprintf_r+0x1ac>
 800ca06:	9b03      	ldr	r3, [sp, #12]
 800ca08:	1d1a      	adds	r2, r3, #4
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	9203      	str	r2, [sp, #12]
 800ca0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca12:	3402      	adds	r4, #2
 800ca14:	9305      	str	r3, [sp, #20]
 800ca16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800caec <_vfiprintf_r+0x22c>
 800ca1a:	7821      	ldrb	r1, [r4, #0]
 800ca1c:	2203      	movs	r2, #3
 800ca1e:	4650      	mov	r0, sl
 800ca20:	f7f3 fbfe 	bl	8000220 <memchr>
 800ca24:	b138      	cbz	r0, 800ca36 <_vfiprintf_r+0x176>
 800ca26:	9b04      	ldr	r3, [sp, #16]
 800ca28:	eba0 000a 	sub.w	r0, r0, sl
 800ca2c:	2240      	movs	r2, #64	@ 0x40
 800ca2e:	4082      	lsls	r2, r0
 800ca30:	4313      	orrs	r3, r2
 800ca32:	3401      	adds	r4, #1
 800ca34:	9304      	str	r3, [sp, #16]
 800ca36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca3a:	4829      	ldr	r0, [pc, #164]	@ (800cae0 <_vfiprintf_r+0x220>)
 800ca3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ca40:	2206      	movs	r2, #6
 800ca42:	f7f3 fbed 	bl	8000220 <memchr>
 800ca46:	2800      	cmp	r0, #0
 800ca48:	d03f      	beq.n	800caca <_vfiprintf_r+0x20a>
 800ca4a:	4b26      	ldr	r3, [pc, #152]	@ (800cae4 <_vfiprintf_r+0x224>)
 800ca4c:	bb1b      	cbnz	r3, 800ca96 <_vfiprintf_r+0x1d6>
 800ca4e:	9b03      	ldr	r3, [sp, #12]
 800ca50:	3307      	adds	r3, #7
 800ca52:	f023 0307 	bic.w	r3, r3, #7
 800ca56:	3308      	adds	r3, #8
 800ca58:	9303      	str	r3, [sp, #12]
 800ca5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca5c:	443b      	add	r3, r7
 800ca5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca60:	e76a      	b.n	800c938 <_vfiprintf_r+0x78>
 800ca62:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca66:	460c      	mov	r4, r1
 800ca68:	2001      	movs	r0, #1
 800ca6a:	e7a8      	b.n	800c9be <_vfiprintf_r+0xfe>
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	3401      	adds	r4, #1
 800ca70:	9305      	str	r3, [sp, #20]
 800ca72:	4619      	mov	r1, r3
 800ca74:	f04f 0c0a 	mov.w	ip, #10
 800ca78:	4620      	mov	r0, r4
 800ca7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca7e:	3a30      	subs	r2, #48	@ 0x30
 800ca80:	2a09      	cmp	r2, #9
 800ca82:	d903      	bls.n	800ca8c <_vfiprintf_r+0x1cc>
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d0c6      	beq.n	800ca16 <_vfiprintf_r+0x156>
 800ca88:	9105      	str	r1, [sp, #20]
 800ca8a:	e7c4      	b.n	800ca16 <_vfiprintf_r+0x156>
 800ca8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca90:	4604      	mov	r4, r0
 800ca92:	2301      	movs	r3, #1
 800ca94:	e7f0      	b.n	800ca78 <_vfiprintf_r+0x1b8>
 800ca96:	ab03      	add	r3, sp, #12
 800ca98:	9300      	str	r3, [sp, #0]
 800ca9a:	462a      	mov	r2, r5
 800ca9c:	4b12      	ldr	r3, [pc, #72]	@ (800cae8 <_vfiprintf_r+0x228>)
 800ca9e:	a904      	add	r1, sp, #16
 800caa0:	4630      	mov	r0, r6
 800caa2:	f7fc fa4b 	bl	8008f3c <_printf_float>
 800caa6:	4607      	mov	r7, r0
 800caa8:	1c78      	adds	r0, r7, #1
 800caaa:	d1d6      	bne.n	800ca5a <_vfiprintf_r+0x19a>
 800caac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800caae:	07d9      	lsls	r1, r3, #31
 800cab0:	d405      	bmi.n	800cabe <_vfiprintf_r+0x1fe>
 800cab2:	89ab      	ldrh	r3, [r5, #12]
 800cab4:	059a      	lsls	r2, r3, #22
 800cab6:	d402      	bmi.n	800cabe <_vfiprintf_r+0x1fe>
 800cab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800caba:	f7fd fae7 	bl	800a08c <__retarget_lock_release_recursive>
 800cabe:	89ab      	ldrh	r3, [r5, #12]
 800cac0:	065b      	lsls	r3, r3, #25
 800cac2:	f53f af1f 	bmi.w	800c904 <_vfiprintf_r+0x44>
 800cac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cac8:	e71e      	b.n	800c908 <_vfiprintf_r+0x48>
 800caca:	ab03      	add	r3, sp, #12
 800cacc:	9300      	str	r3, [sp, #0]
 800cace:	462a      	mov	r2, r5
 800cad0:	4b05      	ldr	r3, [pc, #20]	@ (800cae8 <_vfiprintf_r+0x228>)
 800cad2:	a904      	add	r1, sp, #16
 800cad4:	4630      	mov	r0, r6
 800cad6:	f7fc fcc9 	bl	800946c <_printf_i>
 800cada:	e7e4      	b.n	800caa6 <_vfiprintf_r+0x1e6>
 800cadc:	0800de91 	.word	0x0800de91
 800cae0:	0800de9b 	.word	0x0800de9b
 800cae4:	08008f3d 	.word	0x08008f3d
 800cae8:	0800c89b 	.word	0x0800c89b
 800caec:	0800de97 	.word	0x0800de97

0800caf0 <__sflush_r>:
 800caf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800caf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caf8:	0716      	lsls	r6, r2, #28
 800cafa:	4605      	mov	r5, r0
 800cafc:	460c      	mov	r4, r1
 800cafe:	d454      	bmi.n	800cbaa <__sflush_r+0xba>
 800cb00:	684b      	ldr	r3, [r1, #4]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	dc02      	bgt.n	800cb0c <__sflush_r+0x1c>
 800cb06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	dd48      	ble.n	800cb9e <__sflush_r+0xae>
 800cb0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb0e:	2e00      	cmp	r6, #0
 800cb10:	d045      	beq.n	800cb9e <__sflush_r+0xae>
 800cb12:	2300      	movs	r3, #0
 800cb14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cb18:	682f      	ldr	r7, [r5, #0]
 800cb1a:	6a21      	ldr	r1, [r4, #32]
 800cb1c:	602b      	str	r3, [r5, #0]
 800cb1e:	d030      	beq.n	800cb82 <__sflush_r+0x92>
 800cb20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cb22:	89a3      	ldrh	r3, [r4, #12]
 800cb24:	0759      	lsls	r1, r3, #29
 800cb26:	d505      	bpl.n	800cb34 <__sflush_r+0x44>
 800cb28:	6863      	ldr	r3, [r4, #4]
 800cb2a:	1ad2      	subs	r2, r2, r3
 800cb2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb2e:	b10b      	cbz	r3, 800cb34 <__sflush_r+0x44>
 800cb30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cb32:	1ad2      	subs	r2, r2, r3
 800cb34:	2300      	movs	r3, #0
 800cb36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb38:	6a21      	ldr	r1, [r4, #32]
 800cb3a:	4628      	mov	r0, r5
 800cb3c:	47b0      	blx	r6
 800cb3e:	1c43      	adds	r3, r0, #1
 800cb40:	89a3      	ldrh	r3, [r4, #12]
 800cb42:	d106      	bne.n	800cb52 <__sflush_r+0x62>
 800cb44:	6829      	ldr	r1, [r5, #0]
 800cb46:	291d      	cmp	r1, #29
 800cb48:	d82b      	bhi.n	800cba2 <__sflush_r+0xb2>
 800cb4a:	4a2a      	ldr	r2, [pc, #168]	@ (800cbf4 <__sflush_r+0x104>)
 800cb4c:	410a      	asrs	r2, r1
 800cb4e:	07d6      	lsls	r6, r2, #31
 800cb50:	d427      	bmi.n	800cba2 <__sflush_r+0xb2>
 800cb52:	2200      	movs	r2, #0
 800cb54:	6062      	str	r2, [r4, #4]
 800cb56:	04d9      	lsls	r1, r3, #19
 800cb58:	6922      	ldr	r2, [r4, #16]
 800cb5a:	6022      	str	r2, [r4, #0]
 800cb5c:	d504      	bpl.n	800cb68 <__sflush_r+0x78>
 800cb5e:	1c42      	adds	r2, r0, #1
 800cb60:	d101      	bne.n	800cb66 <__sflush_r+0x76>
 800cb62:	682b      	ldr	r3, [r5, #0]
 800cb64:	b903      	cbnz	r3, 800cb68 <__sflush_r+0x78>
 800cb66:	6560      	str	r0, [r4, #84]	@ 0x54
 800cb68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb6a:	602f      	str	r7, [r5, #0]
 800cb6c:	b1b9      	cbz	r1, 800cb9e <__sflush_r+0xae>
 800cb6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb72:	4299      	cmp	r1, r3
 800cb74:	d002      	beq.n	800cb7c <__sflush_r+0x8c>
 800cb76:	4628      	mov	r0, r5
 800cb78:	f7fe f8ea 	bl	800ad50 <_free_r>
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb80:	e00d      	b.n	800cb9e <__sflush_r+0xae>
 800cb82:	2301      	movs	r3, #1
 800cb84:	4628      	mov	r0, r5
 800cb86:	47b0      	blx	r6
 800cb88:	4602      	mov	r2, r0
 800cb8a:	1c50      	adds	r0, r2, #1
 800cb8c:	d1c9      	bne.n	800cb22 <__sflush_r+0x32>
 800cb8e:	682b      	ldr	r3, [r5, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d0c6      	beq.n	800cb22 <__sflush_r+0x32>
 800cb94:	2b1d      	cmp	r3, #29
 800cb96:	d001      	beq.n	800cb9c <__sflush_r+0xac>
 800cb98:	2b16      	cmp	r3, #22
 800cb9a:	d11e      	bne.n	800cbda <__sflush_r+0xea>
 800cb9c:	602f      	str	r7, [r5, #0]
 800cb9e:	2000      	movs	r0, #0
 800cba0:	e022      	b.n	800cbe8 <__sflush_r+0xf8>
 800cba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cba6:	b21b      	sxth	r3, r3
 800cba8:	e01b      	b.n	800cbe2 <__sflush_r+0xf2>
 800cbaa:	690f      	ldr	r7, [r1, #16]
 800cbac:	2f00      	cmp	r7, #0
 800cbae:	d0f6      	beq.n	800cb9e <__sflush_r+0xae>
 800cbb0:	0793      	lsls	r3, r2, #30
 800cbb2:	680e      	ldr	r6, [r1, #0]
 800cbb4:	bf08      	it	eq
 800cbb6:	694b      	ldreq	r3, [r1, #20]
 800cbb8:	600f      	str	r7, [r1, #0]
 800cbba:	bf18      	it	ne
 800cbbc:	2300      	movne	r3, #0
 800cbbe:	eba6 0807 	sub.w	r8, r6, r7
 800cbc2:	608b      	str	r3, [r1, #8]
 800cbc4:	f1b8 0f00 	cmp.w	r8, #0
 800cbc8:	dde9      	ble.n	800cb9e <__sflush_r+0xae>
 800cbca:	6a21      	ldr	r1, [r4, #32]
 800cbcc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cbce:	4643      	mov	r3, r8
 800cbd0:	463a      	mov	r2, r7
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	47b0      	blx	r6
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	dc08      	bgt.n	800cbec <__sflush_r+0xfc>
 800cbda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbe2:	81a3      	strh	r3, [r4, #12]
 800cbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbec:	4407      	add	r7, r0
 800cbee:	eba8 0800 	sub.w	r8, r8, r0
 800cbf2:	e7e7      	b.n	800cbc4 <__sflush_r+0xd4>
 800cbf4:	dfbffffe 	.word	0xdfbffffe

0800cbf8 <_fflush_r>:
 800cbf8:	b538      	push	{r3, r4, r5, lr}
 800cbfa:	690b      	ldr	r3, [r1, #16]
 800cbfc:	4605      	mov	r5, r0
 800cbfe:	460c      	mov	r4, r1
 800cc00:	b913      	cbnz	r3, 800cc08 <_fflush_r+0x10>
 800cc02:	2500      	movs	r5, #0
 800cc04:	4628      	mov	r0, r5
 800cc06:	bd38      	pop	{r3, r4, r5, pc}
 800cc08:	b118      	cbz	r0, 800cc12 <_fflush_r+0x1a>
 800cc0a:	6a03      	ldr	r3, [r0, #32]
 800cc0c:	b90b      	cbnz	r3, 800cc12 <_fflush_r+0x1a>
 800cc0e:	f7fc ffed 	bl	8009bec <__sinit>
 800cc12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d0f3      	beq.n	800cc02 <_fflush_r+0xa>
 800cc1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cc1c:	07d0      	lsls	r0, r2, #31
 800cc1e:	d404      	bmi.n	800cc2a <_fflush_r+0x32>
 800cc20:	0599      	lsls	r1, r3, #22
 800cc22:	d402      	bmi.n	800cc2a <_fflush_r+0x32>
 800cc24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc26:	f7fd fa30 	bl	800a08a <__retarget_lock_acquire_recursive>
 800cc2a:	4628      	mov	r0, r5
 800cc2c:	4621      	mov	r1, r4
 800cc2e:	f7ff ff5f 	bl	800caf0 <__sflush_r>
 800cc32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc34:	07da      	lsls	r2, r3, #31
 800cc36:	4605      	mov	r5, r0
 800cc38:	d4e4      	bmi.n	800cc04 <_fflush_r+0xc>
 800cc3a:	89a3      	ldrh	r3, [r4, #12]
 800cc3c:	059b      	lsls	r3, r3, #22
 800cc3e:	d4e1      	bmi.n	800cc04 <_fflush_r+0xc>
 800cc40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc42:	f7fd fa23 	bl	800a08c <__retarget_lock_release_recursive>
 800cc46:	e7dd      	b.n	800cc04 <_fflush_r+0xc>

0800cc48 <__swhatbuf_r>:
 800cc48:	b570      	push	{r4, r5, r6, lr}
 800cc4a:	460c      	mov	r4, r1
 800cc4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc50:	2900      	cmp	r1, #0
 800cc52:	b096      	sub	sp, #88	@ 0x58
 800cc54:	4615      	mov	r5, r2
 800cc56:	461e      	mov	r6, r3
 800cc58:	da0d      	bge.n	800cc76 <__swhatbuf_r+0x2e>
 800cc5a:	89a3      	ldrh	r3, [r4, #12]
 800cc5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cc60:	f04f 0100 	mov.w	r1, #0
 800cc64:	bf14      	ite	ne
 800cc66:	2340      	movne	r3, #64	@ 0x40
 800cc68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cc6c:	2000      	movs	r0, #0
 800cc6e:	6031      	str	r1, [r6, #0]
 800cc70:	602b      	str	r3, [r5, #0]
 800cc72:	b016      	add	sp, #88	@ 0x58
 800cc74:	bd70      	pop	{r4, r5, r6, pc}
 800cc76:	466a      	mov	r2, sp
 800cc78:	f000 f874 	bl	800cd64 <_fstat_r>
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	dbec      	blt.n	800cc5a <__swhatbuf_r+0x12>
 800cc80:	9901      	ldr	r1, [sp, #4]
 800cc82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cc86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cc8a:	4259      	negs	r1, r3
 800cc8c:	4159      	adcs	r1, r3
 800cc8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc92:	e7eb      	b.n	800cc6c <__swhatbuf_r+0x24>

0800cc94 <__smakebuf_r>:
 800cc94:	898b      	ldrh	r3, [r1, #12]
 800cc96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc98:	079d      	lsls	r5, r3, #30
 800cc9a:	4606      	mov	r6, r0
 800cc9c:	460c      	mov	r4, r1
 800cc9e:	d507      	bpl.n	800ccb0 <__smakebuf_r+0x1c>
 800cca0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cca4:	6023      	str	r3, [r4, #0]
 800cca6:	6123      	str	r3, [r4, #16]
 800cca8:	2301      	movs	r3, #1
 800ccaa:	6163      	str	r3, [r4, #20]
 800ccac:	b003      	add	sp, #12
 800ccae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccb0:	ab01      	add	r3, sp, #4
 800ccb2:	466a      	mov	r2, sp
 800ccb4:	f7ff ffc8 	bl	800cc48 <__swhatbuf_r>
 800ccb8:	9f00      	ldr	r7, [sp, #0]
 800ccba:	4605      	mov	r5, r0
 800ccbc:	4639      	mov	r1, r7
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	f7fe f8ba 	bl	800ae38 <_malloc_r>
 800ccc4:	b948      	cbnz	r0, 800ccda <__smakebuf_r+0x46>
 800ccc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccca:	059a      	lsls	r2, r3, #22
 800cccc:	d4ee      	bmi.n	800ccac <__smakebuf_r+0x18>
 800ccce:	f023 0303 	bic.w	r3, r3, #3
 800ccd2:	f043 0302 	orr.w	r3, r3, #2
 800ccd6:	81a3      	strh	r3, [r4, #12]
 800ccd8:	e7e2      	b.n	800cca0 <__smakebuf_r+0xc>
 800ccda:	89a3      	ldrh	r3, [r4, #12]
 800ccdc:	6020      	str	r0, [r4, #0]
 800ccde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cce2:	81a3      	strh	r3, [r4, #12]
 800cce4:	9b01      	ldr	r3, [sp, #4]
 800cce6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ccea:	b15b      	cbz	r3, 800cd04 <__smakebuf_r+0x70>
 800ccec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	f000 f849 	bl	800cd88 <_isatty_r>
 800ccf6:	b128      	cbz	r0, 800cd04 <__smakebuf_r+0x70>
 800ccf8:	89a3      	ldrh	r3, [r4, #12]
 800ccfa:	f023 0303 	bic.w	r3, r3, #3
 800ccfe:	f043 0301 	orr.w	r3, r3, #1
 800cd02:	81a3      	strh	r3, [r4, #12]
 800cd04:	89a3      	ldrh	r3, [r4, #12]
 800cd06:	431d      	orrs	r5, r3
 800cd08:	81a5      	strh	r5, [r4, #12]
 800cd0a:	e7cf      	b.n	800ccac <__smakebuf_r+0x18>

0800cd0c <memmove>:
 800cd0c:	4288      	cmp	r0, r1
 800cd0e:	b510      	push	{r4, lr}
 800cd10:	eb01 0402 	add.w	r4, r1, r2
 800cd14:	d902      	bls.n	800cd1c <memmove+0x10>
 800cd16:	4284      	cmp	r4, r0
 800cd18:	4623      	mov	r3, r4
 800cd1a:	d807      	bhi.n	800cd2c <memmove+0x20>
 800cd1c:	1e43      	subs	r3, r0, #1
 800cd1e:	42a1      	cmp	r1, r4
 800cd20:	d008      	beq.n	800cd34 <memmove+0x28>
 800cd22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd2a:	e7f8      	b.n	800cd1e <memmove+0x12>
 800cd2c:	4402      	add	r2, r0
 800cd2e:	4601      	mov	r1, r0
 800cd30:	428a      	cmp	r2, r1
 800cd32:	d100      	bne.n	800cd36 <memmove+0x2a>
 800cd34:	bd10      	pop	{r4, pc}
 800cd36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd3e:	e7f7      	b.n	800cd30 <memmove+0x24>

0800cd40 <strncmp>:
 800cd40:	b510      	push	{r4, lr}
 800cd42:	b16a      	cbz	r2, 800cd60 <strncmp+0x20>
 800cd44:	3901      	subs	r1, #1
 800cd46:	1884      	adds	r4, r0, r2
 800cd48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd4c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d103      	bne.n	800cd5c <strncmp+0x1c>
 800cd54:	42a0      	cmp	r0, r4
 800cd56:	d001      	beq.n	800cd5c <strncmp+0x1c>
 800cd58:	2a00      	cmp	r2, #0
 800cd5a:	d1f5      	bne.n	800cd48 <strncmp+0x8>
 800cd5c:	1ad0      	subs	r0, r2, r3
 800cd5e:	bd10      	pop	{r4, pc}
 800cd60:	4610      	mov	r0, r2
 800cd62:	e7fc      	b.n	800cd5e <strncmp+0x1e>

0800cd64 <_fstat_r>:
 800cd64:	b538      	push	{r3, r4, r5, lr}
 800cd66:	4d07      	ldr	r5, [pc, #28]	@ (800cd84 <_fstat_r+0x20>)
 800cd68:	2300      	movs	r3, #0
 800cd6a:	4604      	mov	r4, r0
 800cd6c:	4608      	mov	r0, r1
 800cd6e:	4611      	mov	r1, r2
 800cd70:	602b      	str	r3, [r5, #0]
 800cd72:	f7f4 fe7d 	bl	8001a70 <_fstat>
 800cd76:	1c43      	adds	r3, r0, #1
 800cd78:	d102      	bne.n	800cd80 <_fstat_r+0x1c>
 800cd7a:	682b      	ldr	r3, [r5, #0]
 800cd7c:	b103      	cbz	r3, 800cd80 <_fstat_r+0x1c>
 800cd7e:	6023      	str	r3, [r4, #0]
 800cd80:	bd38      	pop	{r3, r4, r5, pc}
 800cd82:	bf00      	nop
 800cd84:	20001040 	.word	0x20001040

0800cd88 <_isatty_r>:
 800cd88:	b538      	push	{r3, r4, r5, lr}
 800cd8a:	4d06      	ldr	r5, [pc, #24]	@ (800cda4 <_isatty_r+0x1c>)
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	4604      	mov	r4, r0
 800cd90:	4608      	mov	r0, r1
 800cd92:	602b      	str	r3, [r5, #0]
 800cd94:	f7f4 fe7c 	bl	8001a90 <_isatty>
 800cd98:	1c43      	adds	r3, r0, #1
 800cd9a:	d102      	bne.n	800cda2 <_isatty_r+0x1a>
 800cd9c:	682b      	ldr	r3, [r5, #0]
 800cd9e:	b103      	cbz	r3, 800cda2 <_isatty_r+0x1a>
 800cda0:	6023      	str	r3, [r4, #0]
 800cda2:	bd38      	pop	{r3, r4, r5, pc}
 800cda4:	20001040 	.word	0x20001040

0800cda8 <_sbrk_r>:
 800cda8:	b538      	push	{r3, r4, r5, lr}
 800cdaa:	4d06      	ldr	r5, [pc, #24]	@ (800cdc4 <_sbrk_r+0x1c>)
 800cdac:	2300      	movs	r3, #0
 800cdae:	4604      	mov	r4, r0
 800cdb0:	4608      	mov	r0, r1
 800cdb2:	602b      	str	r3, [r5, #0]
 800cdb4:	f7f4 fe84 	bl	8001ac0 <_sbrk>
 800cdb8:	1c43      	adds	r3, r0, #1
 800cdba:	d102      	bne.n	800cdc2 <_sbrk_r+0x1a>
 800cdbc:	682b      	ldr	r3, [r5, #0]
 800cdbe:	b103      	cbz	r3, 800cdc2 <_sbrk_r+0x1a>
 800cdc0:	6023      	str	r3, [r4, #0]
 800cdc2:	bd38      	pop	{r3, r4, r5, pc}
 800cdc4:	20001040 	.word	0x20001040

0800cdc8 <nan>:
 800cdc8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cdd0 <nan+0x8>
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop
 800cdd0:	00000000 	.word	0x00000000
 800cdd4:	7ff80000 	.word	0x7ff80000

0800cdd8 <__assert_func>:
 800cdd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cdda:	4614      	mov	r4, r2
 800cddc:	461a      	mov	r2, r3
 800cdde:	4b09      	ldr	r3, [pc, #36]	@ (800ce04 <__assert_func+0x2c>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4605      	mov	r5, r0
 800cde4:	68d8      	ldr	r0, [r3, #12]
 800cde6:	b954      	cbnz	r4, 800cdfe <__assert_func+0x26>
 800cde8:	4b07      	ldr	r3, [pc, #28]	@ (800ce08 <__assert_func+0x30>)
 800cdea:	461c      	mov	r4, r3
 800cdec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cdf0:	9100      	str	r1, [sp, #0]
 800cdf2:	462b      	mov	r3, r5
 800cdf4:	4905      	ldr	r1, [pc, #20]	@ (800ce0c <__assert_func+0x34>)
 800cdf6:	f000 fba7 	bl	800d548 <fiprintf>
 800cdfa:	f000 fbb7 	bl	800d56c <abort>
 800cdfe:	4b04      	ldr	r3, [pc, #16]	@ (800ce10 <__assert_func+0x38>)
 800ce00:	e7f4      	b.n	800cdec <__assert_func+0x14>
 800ce02:	bf00      	nop
 800ce04:	20000018 	.word	0x20000018
 800ce08:	0800dee5 	.word	0x0800dee5
 800ce0c:	0800deb7 	.word	0x0800deb7
 800ce10:	0800deaa 	.word	0x0800deaa

0800ce14 <_calloc_r>:
 800ce14:	b570      	push	{r4, r5, r6, lr}
 800ce16:	fba1 5402 	umull	r5, r4, r1, r2
 800ce1a:	b93c      	cbnz	r4, 800ce2c <_calloc_r+0x18>
 800ce1c:	4629      	mov	r1, r5
 800ce1e:	f7fe f80b 	bl	800ae38 <_malloc_r>
 800ce22:	4606      	mov	r6, r0
 800ce24:	b928      	cbnz	r0, 800ce32 <_calloc_r+0x1e>
 800ce26:	2600      	movs	r6, #0
 800ce28:	4630      	mov	r0, r6
 800ce2a:	bd70      	pop	{r4, r5, r6, pc}
 800ce2c:	220c      	movs	r2, #12
 800ce2e:	6002      	str	r2, [r0, #0]
 800ce30:	e7f9      	b.n	800ce26 <_calloc_r+0x12>
 800ce32:	462a      	mov	r2, r5
 800ce34:	4621      	mov	r1, r4
 800ce36:	f7fd f8ab 	bl	8009f90 <memset>
 800ce3a:	e7f5      	b.n	800ce28 <_calloc_r+0x14>

0800ce3c <rshift>:
 800ce3c:	6903      	ldr	r3, [r0, #16]
 800ce3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ce42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce46:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ce4a:	f100 0414 	add.w	r4, r0, #20
 800ce4e:	dd45      	ble.n	800cedc <rshift+0xa0>
 800ce50:	f011 011f 	ands.w	r1, r1, #31
 800ce54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ce58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ce5c:	d10c      	bne.n	800ce78 <rshift+0x3c>
 800ce5e:	f100 0710 	add.w	r7, r0, #16
 800ce62:	4629      	mov	r1, r5
 800ce64:	42b1      	cmp	r1, r6
 800ce66:	d334      	bcc.n	800ced2 <rshift+0x96>
 800ce68:	1a9b      	subs	r3, r3, r2
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	1eea      	subs	r2, r5, #3
 800ce6e:	4296      	cmp	r6, r2
 800ce70:	bf38      	it	cc
 800ce72:	2300      	movcc	r3, #0
 800ce74:	4423      	add	r3, r4
 800ce76:	e015      	b.n	800cea4 <rshift+0x68>
 800ce78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ce7c:	f1c1 0820 	rsb	r8, r1, #32
 800ce80:	40cf      	lsrs	r7, r1
 800ce82:	f105 0e04 	add.w	lr, r5, #4
 800ce86:	46a1      	mov	r9, r4
 800ce88:	4576      	cmp	r6, lr
 800ce8a:	46f4      	mov	ip, lr
 800ce8c:	d815      	bhi.n	800ceba <rshift+0x7e>
 800ce8e:	1a9a      	subs	r2, r3, r2
 800ce90:	0092      	lsls	r2, r2, #2
 800ce92:	3a04      	subs	r2, #4
 800ce94:	3501      	adds	r5, #1
 800ce96:	42ae      	cmp	r6, r5
 800ce98:	bf38      	it	cc
 800ce9a:	2200      	movcc	r2, #0
 800ce9c:	18a3      	adds	r3, r4, r2
 800ce9e:	50a7      	str	r7, [r4, r2]
 800cea0:	b107      	cbz	r7, 800cea4 <rshift+0x68>
 800cea2:	3304      	adds	r3, #4
 800cea4:	1b1a      	subs	r2, r3, r4
 800cea6:	42a3      	cmp	r3, r4
 800cea8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ceac:	bf08      	it	eq
 800ceae:	2300      	moveq	r3, #0
 800ceb0:	6102      	str	r2, [r0, #16]
 800ceb2:	bf08      	it	eq
 800ceb4:	6143      	streq	r3, [r0, #20]
 800ceb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ceba:	f8dc c000 	ldr.w	ip, [ip]
 800cebe:	fa0c fc08 	lsl.w	ip, ip, r8
 800cec2:	ea4c 0707 	orr.w	r7, ip, r7
 800cec6:	f849 7b04 	str.w	r7, [r9], #4
 800ceca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cece:	40cf      	lsrs	r7, r1
 800ced0:	e7da      	b.n	800ce88 <rshift+0x4c>
 800ced2:	f851 cb04 	ldr.w	ip, [r1], #4
 800ced6:	f847 cf04 	str.w	ip, [r7, #4]!
 800ceda:	e7c3      	b.n	800ce64 <rshift+0x28>
 800cedc:	4623      	mov	r3, r4
 800cede:	e7e1      	b.n	800cea4 <rshift+0x68>

0800cee0 <__hexdig_fun>:
 800cee0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cee4:	2b09      	cmp	r3, #9
 800cee6:	d802      	bhi.n	800ceee <__hexdig_fun+0xe>
 800cee8:	3820      	subs	r0, #32
 800ceea:	b2c0      	uxtb	r0, r0
 800ceec:	4770      	bx	lr
 800ceee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cef2:	2b05      	cmp	r3, #5
 800cef4:	d801      	bhi.n	800cefa <__hexdig_fun+0x1a>
 800cef6:	3847      	subs	r0, #71	@ 0x47
 800cef8:	e7f7      	b.n	800ceea <__hexdig_fun+0xa>
 800cefa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cefe:	2b05      	cmp	r3, #5
 800cf00:	d801      	bhi.n	800cf06 <__hexdig_fun+0x26>
 800cf02:	3827      	subs	r0, #39	@ 0x27
 800cf04:	e7f1      	b.n	800ceea <__hexdig_fun+0xa>
 800cf06:	2000      	movs	r0, #0
 800cf08:	4770      	bx	lr
	...

0800cf0c <__gethex>:
 800cf0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf10:	b085      	sub	sp, #20
 800cf12:	468a      	mov	sl, r1
 800cf14:	9302      	str	r3, [sp, #8]
 800cf16:	680b      	ldr	r3, [r1, #0]
 800cf18:	9001      	str	r0, [sp, #4]
 800cf1a:	4690      	mov	r8, r2
 800cf1c:	1c9c      	adds	r4, r3, #2
 800cf1e:	46a1      	mov	r9, r4
 800cf20:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cf24:	2830      	cmp	r0, #48	@ 0x30
 800cf26:	d0fa      	beq.n	800cf1e <__gethex+0x12>
 800cf28:	eba9 0303 	sub.w	r3, r9, r3
 800cf2c:	f1a3 0b02 	sub.w	fp, r3, #2
 800cf30:	f7ff ffd6 	bl	800cee0 <__hexdig_fun>
 800cf34:	4605      	mov	r5, r0
 800cf36:	2800      	cmp	r0, #0
 800cf38:	d168      	bne.n	800d00c <__gethex+0x100>
 800cf3a:	49a0      	ldr	r1, [pc, #640]	@ (800d1bc <__gethex+0x2b0>)
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	4648      	mov	r0, r9
 800cf40:	f7ff fefe 	bl	800cd40 <strncmp>
 800cf44:	4607      	mov	r7, r0
 800cf46:	2800      	cmp	r0, #0
 800cf48:	d167      	bne.n	800d01a <__gethex+0x10e>
 800cf4a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cf4e:	4626      	mov	r6, r4
 800cf50:	f7ff ffc6 	bl	800cee0 <__hexdig_fun>
 800cf54:	2800      	cmp	r0, #0
 800cf56:	d062      	beq.n	800d01e <__gethex+0x112>
 800cf58:	4623      	mov	r3, r4
 800cf5a:	7818      	ldrb	r0, [r3, #0]
 800cf5c:	2830      	cmp	r0, #48	@ 0x30
 800cf5e:	4699      	mov	r9, r3
 800cf60:	f103 0301 	add.w	r3, r3, #1
 800cf64:	d0f9      	beq.n	800cf5a <__gethex+0x4e>
 800cf66:	f7ff ffbb 	bl	800cee0 <__hexdig_fun>
 800cf6a:	fab0 f580 	clz	r5, r0
 800cf6e:	096d      	lsrs	r5, r5, #5
 800cf70:	f04f 0b01 	mov.w	fp, #1
 800cf74:	464a      	mov	r2, r9
 800cf76:	4616      	mov	r6, r2
 800cf78:	3201      	adds	r2, #1
 800cf7a:	7830      	ldrb	r0, [r6, #0]
 800cf7c:	f7ff ffb0 	bl	800cee0 <__hexdig_fun>
 800cf80:	2800      	cmp	r0, #0
 800cf82:	d1f8      	bne.n	800cf76 <__gethex+0x6a>
 800cf84:	498d      	ldr	r1, [pc, #564]	@ (800d1bc <__gethex+0x2b0>)
 800cf86:	2201      	movs	r2, #1
 800cf88:	4630      	mov	r0, r6
 800cf8a:	f7ff fed9 	bl	800cd40 <strncmp>
 800cf8e:	2800      	cmp	r0, #0
 800cf90:	d13f      	bne.n	800d012 <__gethex+0x106>
 800cf92:	b944      	cbnz	r4, 800cfa6 <__gethex+0x9a>
 800cf94:	1c74      	adds	r4, r6, #1
 800cf96:	4622      	mov	r2, r4
 800cf98:	4616      	mov	r6, r2
 800cf9a:	3201      	adds	r2, #1
 800cf9c:	7830      	ldrb	r0, [r6, #0]
 800cf9e:	f7ff ff9f 	bl	800cee0 <__hexdig_fun>
 800cfa2:	2800      	cmp	r0, #0
 800cfa4:	d1f8      	bne.n	800cf98 <__gethex+0x8c>
 800cfa6:	1ba4      	subs	r4, r4, r6
 800cfa8:	00a7      	lsls	r7, r4, #2
 800cfaa:	7833      	ldrb	r3, [r6, #0]
 800cfac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cfb0:	2b50      	cmp	r3, #80	@ 0x50
 800cfb2:	d13e      	bne.n	800d032 <__gethex+0x126>
 800cfb4:	7873      	ldrb	r3, [r6, #1]
 800cfb6:	2b2b      	cmp	r3, #43	@ 0x2b
 800cfb8:	d033      	beq.n	800d022 <__gethex+0x116>
 800cfba:	2b2d      	cmp	r3, #45	@ 0x2d
 800cfbc:	d034      	beq.n	800d028 <__gethex+0x11c>
 800cfbe:	1c71      	adds	r1, r6, #1
 800cfc0:	2400      	movs	r4, #0
 800cfc2:	7808      	ldrb	r0, [r1, #0]
 800cfc4:	f7ff ff8c 	bl	800cee0 <__hexdig_fun>
 800cfc8:	1e43      	subs	r3, r0, #1
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	2b18      	cmp	r3, #24
 800cfce:	d830      	bhi.n	800d032 <__gethex+0x126>
 800cfd0:	f1a0 0210 	sub.w	r2, r0, #16
 800cfd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cfd8:	f7ff ff82 	bl	800cee0 <__hexdig_fun>
 800cfdc:	f100 3cff 	add.w	ip, r0, #4294967295
 800cfe0:	fa5f fc8c 	uxtb.w	ip, ip
 800cfe4:	f1bc 0f18 	cmp.w	ip, #24
 800cfe8:	f04f 030a 	mov.w	r3, #10
 800cfec:	d91e      	bls.n	800d02c <__gethex+0x120>
 800cfee:	b104      	cbz	r4, 800cff2 <__gethex+0xe6>
 800cff0:	4252      	negs	r2, r2
 800cff2:	4417      	add	r7, r2
 800cff4:	f8ca 1000 	str.w	r1, [sl]
 800cff8:	b1ed      	cbz	r5, 800d036 <__gethex+0x12a>
 800cffa:	f1bb 0f00 	cmp.w	fp, #0
 800cffe:	bf0c      	ite	eq
 800d000:	2506      	moveq	r5, #6
 800d002:	2500      	movne	r5, #0
 800d004:	4628      	mov	r0, r5
 800d006:	b005      	add	sp, #20
 800d008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d00c:	2500      	movs	r5, #0
 800d00e:	462c      	mov	r4, r5
 800d010:	e7b0      	b.n	800cf74 <__gethex+0x68>
 800d012:	2c00      	cmp	r4, #0
 800d014:	d1c7      	bne.n	800cfa6 <__gethex+0x9a>
 800d016:	4627      	mov	r7, r4
 800d018:	e7c7      	b.n	800cfaa <__gethex+0x9e>
 800d01a:	464e      	mov	r6, r9
 800d01c:	462f      	mov	r7, r5
 800d01e:	2501      	movs	r5, #1
 800d020:	e7c3      	b.n	800cfaa <__gethex+0x9e>
 800d022:	2400      	movs	r4, #0
 800d024:	1cb1      	adds	r1, r6, #2
 800d026:	e7cc      	b.n	800cfc2 <__gethex+0xb6>
 800d028:	2401      	movs	r4, #1
 800d02a:	e7fb      	b.n	800d024 <__gethex+0x118>
 800d02c:	fb03 0002 	mla	r0, r3, r2, r0
 800d030:	e7ce      	b.n	800cfd0 <__gethex+0xc4>
 800d032:	4631      	mov	r1, r6
 800d034:	e7de      	b.n	800cff4 <__gethex+0xe8>
 800d036:	eba6 0309 	sub.w	r3, r6, r9
 800d03a:	3b01      	subs	r3, #1
 800d03c:	4629      	mov	r1, r5
 800d03e:	2b07      	cmp	r3, #7
 800d040:	dc0a      	bgt.n	800d058 <__gethex+0x14c>
 800d042:	9801      	ldr	r0, [sp, #4]
 800d044:	f7fd ff84 	bl	800af50 <_Balloc>
 800d048:	4604      	mov	r4, r0
 800d04a:	b940      	cbnz	r0, 800d05e <__gethex+0x152>
 800d04c:	4b5c      	ldr	r3, [pc, #368]	@ (800d1c0 <__gethex+0x2b4>)
 800d04e:	4602      	mov	r2, r0
 800d050:	21e4      	movs	r1, #228	@ 0xe4
 800d052:	485c      	ldr	r0, [pc, #368]	@ (800d1c4 <__gethex+0x2b8>)
 800d054:	f7ff fec0 	bl	800cdd8 <__assert_func>
 800d058:	3101      	adds	r1, #1
 800d05a:	105b      	asrs	r3, r3, #1
 800d05c:	e7ef      	b.n	800d03e <__gethex+0x132>
 800d05e:	f100 0a14 	add.w	sl, r0, #20
 800d062:	2300      	movs	r3, #0
 800d064:	4655      	mov	r5, sl
 800d066:	469b      	mov	fp, r3
 800d068:	45b1      	cmp	r9, r6
 800d06a:	d337      	bcc.n	800d0dc <__gethex+0x1d0>
 800d06c:	f845 bb04 	str.w	fp, [r5], #4
 800d070:	eba5 050a 	sub.w	r5, r5, sl
 800d074:	10ad      	asrs	r5, r5, #2
 800d076:	6125      	str	r5, [r4, #16]
 800d078:	4658      	mov	r0, fp
 800d07a:	f7fe f85b 	bl	800b134 <__hi0bits>
 800d07e:	016d      	lsls	r5, r5, #5
 800d080:	f8d8 6000 	ldr.w	r6, [r8]
 800d084:	1a2d      	subs	r5, r5, r0
 800d086:	42b5      	cmp	r5, r6
 800d088:	dd54      	ble.n	800d134 <__gethex+0x228>
 800d08a:	1bad      	subs	r5, r5, r6
 800d08c:	4629      	mov	r1, r5
 800d08e:	4620      	mov	r0, r4
 800d090:	f7fe fbef 	bl	800b872 <__any_on>
 800d094:	4681      	mov	r9, r0
 800d096:	b178      	cbz	r0, 800d0b8 <__gethex+0x1ac>
 800d098:	1e6b      	subs	r3, r5, #1
 800d09a:	1159      	asrs	r1, r3, #5
 800d09c:	f003 021f 	and.w	r2, r3, #31
 800d0a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d0a4:	f04f 0901 	mov.w	r9, #1
 800d0a8:	fa09 f202 	lsl.w	r2, r9, r2
 800d0ac:	420a      	tst	r2, r1
 800d0ae:	d003      	beq.n	800d0b8 <__gethex+0x1ac>
 800d0b0:	454b      	cmp	r3, r9
 800d0b2:	dc36      	bgt.n	800d122 <__gethex+0x216>
 800d0b4:	f04f 0902 	mov.w	r9, #2
 800d0b8:	4629      	mov	r1, r5
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	f7ff febe 	bl	800ce3c <rshift>
 800d0c0:	442f      	add	r7, r5
 800d0c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d0c6:	42bb      	cmp	r3, r7
 800d0c8:	da42      	bge.n	800d150 <__gethex+0x244>
 800d0ca:	9801      	ldr	r0, [sp, #4]
 800d0cc:	4621      	mov	r1, r4
 800d0ce:	f7fd ff7f 	bl	800afd0 <_Bfree>
 800d0d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	6013      	str	r3, [r2, #0]
 800d0d8:	25a3      	movs	r5, #163	@ 0xa3
 800d0da:	e793      	b.n	800d004 <__gethex+0xf8>
 800d0dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d0e0:	2a2e      	cmp	r2, #46	@ 0x2e
 800d0e2:	d012      	beq.n	800d10a <__gethex+0x1fe>
 800d0e4:	2b20      	cmp	r3, #32
 800d0e6:	d104      	bne.n	800d0f2 <__gethex+0x1e6>
 800d0e8:	f845 bb04 	str.w	fp, [r5], #4
 800d0ec:	f04f 0b00 	mov.w	fp, #0
 800d0f0:	465b      	mov	r3, fp
 800d0f2:	7830      	ldrb	r0, [r6, #0]
 800d0f4:	9303      	str	r3, [sp, #12]
 800d0f6:	f7ff fef3 	bl	800cee0 <__hexdig_fun>
 800d0fa:	9b03      	ldr	r3, [sp, #12]
 800d0fc:	f000 000f 	and.w	r0, r0, #15
 800d100:	4098      	lsls	r0, r3
 800d102:	ea4b 0b00 	orr.w	fp, fp, r0
 800d106:	3304      	adds	r3, #4
 800d108:	e7ae      	b.n	800d068 <__gethex+0x15c>
 800d10a:	45b1      	cmp	r9, r6
 800d10c:	d8ea      	bhi.n	800d0e4 <__gethex+0x1d8>
 800d10e:	492b      	ldr	r1, [pc, #172]	@ (800d1bc <__gethex+0x2b0>)
 800d110:	9303      	str	r3, [sp, #12]
 800d112:	2201      	movs	r2, #1
 800d114:	4630      	mov	r0, r6
 800d116:	f7ff fe13 	bl	800cd40 <strncmp>
 800d11a:	9b03      	ldr	r3, [sp, #12]
 800d11c:	2800      	cmp	r0, #0
 800d11e:	d1e1      	bne.n	800d0e4 <__gethex+0x1d8>
 800d120:	e7a2      	b.n	800d068 <__gethex+0x15c>
 800d122:	1ea9      	subs	r1, r5, #2
 800d124:	4620      	mov	r0, r4
 800d126:	f7fe fba4 	bl	800b872 <__any_on>
 800d12a:	2800      	cmp	r0, #0
 800d12c:	d0c2      	beq.n	800d0b4 <__gethex+0x1a8>
 800d12e:	f04f 0903 	mov.w	r9, #3
 800d132:	e7c1      	b.n	800d0b8 <__gethex+0x1ac>
 800d134:	da09      	bge.n	800d14a <__gethex+0x23e>
 800d136:	1b75      	subs	r5, r6, r5
 800d138:	4621      	mov	r1, r4
 800d13a:	9801      	ldr	r0, [sp, #4]
 800d13c:	462a      	mov	r2, r5
 800d13e:	f7fe f95f 	bl	800b400 <__lshift>
 800d142:	1b7f      	subs	r7, r7, r5
 800d144:	4604      	mov	r4, r0
 800d146:	f100 0a14 	add.w	sl, r0, #20
 800d14a:	f04f 0900 	mov.w	r9, #0
 800d14e:	e7b8      	b.n	800d0c2 <__gethex+0x1b6>
 800d150:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d154:	42bd      	cmp	r5, r7
 800d156:	dd6f      	ble.n	800d238 <__gethex+0x32c>
 800d158:	1bed      	subs	r5, r5, r7
 800d15a:	42ae      	cmp	r6, r5
 800d15c:	dc34      	bgt.n	800d1c8 <__gethex+0x2bc>
 800d15e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d162:	2b02      	cmp	r3, #2
 800d164:	d022      	beq.n	800d1ac <__gethex+0x2a0>
 800d166:	2b03      	cmp	r3, #3
 800d168:	d024      	beq.n	800d1b4 <__gethex+0x2a8>
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d115      	bne.n	800d19a <__gethex+0x28e>
 800d16e:	42ae      	cmp	r6, r5
 800d170:	d113      	bne.n	800d19a <__gethex+0x28e>
 800d172:	2e01      	cmp	r6, #1
 800d174:	d10b      	bne.n	800d18e <__gethex+0x282>
 800d176:	9a02      	ldr	r2, [sp, #8]
 800d178:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d17c:	6013      	str	r3, [r2, #0]
 800d17e:	2301      	movs	r3, #1
 800d180:	6123      	str	r3, [r4, #16]
 800d182:	f8ca 3000 	str.w	r3, [sl]
 800d186:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d188:	2562      	movs	r5, #98	@ 0x62
 800d18a:	601c      	str	r4, [r3, #0]
 800d18c:	e73a      	b.n	800d004 <__gethex+0xf8>
 800d18e:	1e71      	subs	r1, r6, #1
 800d190:	4620      	mov	r0, r4
 800d192:	f7fe fb6e 	bl	800b872 <__any_on>
 800d196:	2800      	cmp	r0, #0
 800d198:	d1ed      	bne.n	800d176 <__gethex+0x26a>
 800d19a:	9801      	ldr	r0, [sp, #4]
 800d19c:	4621      	mov	r1, r4
 800d19e:	f7fd ff17 	bl	800afd0 <_Bfree>
 800d1a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	6013      	str	r3, [r2, #0]
 800d1a8:	2550      	movs	r5, #80	@ 0x50
 800d1aa:	e72b      	b.n	800d004 <__gethex+0xf8>
 800d1ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d1f3      	bne.n	800d19a <__gethex+0x28e>
 800d1b2:	e7e0      	b.n	800d176 <__gethex+0x26a>
 800d1b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d1dd      	bne.n	800d176 <__gethex+0x26a>
 800d1ba:	e7ee      	b.n	800d19a <__gethex+0x28e>
 800d1bc:	0800dd38 	.word	0x0800dd38
 800d1c0:	0800dbcd 	.word	0x0800dbcd
 800d1c4:	0800dee6 	.word	0x0800dee6
 800d1c8:	1e6f      	subs	r7, r5, #1
 800d1ca:	f1b9 0f00 	cmp.w	r9, #0
 800d1ce:	d130      	bne.n	800d232 <__gethex+0x326>
 800d1d0:	b127      	cbz	r7, 800d1dc <__gethex+0x2d0>
 800d1d2:	4639      	mov	r1, r7
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	f7fe fb4c 	bl	800b872 <__any_on>
 800d1da:	4681      	mov	r9, r0
 800d1dc:	117a      	asrs	r2, r7, #5
 800d1de:	2301      	movs	r3, #1
 800d1e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d1e4:	f007 071f 	and.w	r7, r7, #31
 800d1e8:	40bb      	lsls	r3, r7
 800d1ea:	4213      	tst	r3, r2
 800d1ec:	4629      	mov	r1, r5
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	bf18      	it	ne
 800d1f2:	f049 0902 	orrne.w	r9, r9, #2
 800d1f6:	f7ff fe21 	bl	800ce3c <rshift>
 800d1fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d1fe:	1b76      	subs	r6, r6, r5
 800d200:	2502      	movs	r5, #2
 800d202:	f1b9 0f00 	cmp.w	r9, #0
 800d206:	d047      	beq.n	800d298 <__gethex+0x38c>
 800d208:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d20c:	2b02      	cmp	r3, #2
 800d20e:	d015      	beq.n	800d23c <__gethex+0x330>
 800d210:	2b03      	cmp	r3, #3
 800d212:	d017      	beq.n	800d244 <__gethex+0x338>
 800d214:	2b01      	cmp	r3, #1
 800d216:	d109      	bne.n	800d22c <__gethex+0x320>
 800d218:	f019 0f02 	tst.w	r9, #2
 800d21c:	d006      	beq.n	800d22c <__gethex+0x320>
 800d21e:	f8da 3000 	ldr.w	r3, [sl]
 800d222:	ea49 0903 	orr.w	r9, r9, r3
 800d226:	f019 0f01 	tst.w	r9, #1
 800d22a:	d10e      	bne.n	800d24a <__gethex+0x33e>
 800d22c:	f045 0510 	orr.w	r5, r5, #16
 800d230:	e032      	b.n	800d298 <__gethex+0x38c>
 800d232:	f04f 0901 	mov.w	r9, #1
 800d236:	e7d1      	b.n	800d1dc <__gethex+0x2d0>
 800d238:	2501      	movs	r5, #1
 800d23a:	e7e2      	b.n	800d202 <__gethex+0x2f6>
 800d23c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d23e:	f1c3 0301 	rsb	r3, r3, #1
 800d242:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d246:	2b00      	cmp	r3, #0
 800d248:	d0f0      	beq.n	800d22c <__gethex+0x320>
 800d24a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d24e:	f104 0314 	add.w	r3, r4, #20
 800d252:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d256:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d25a:	f04f 0c00 	mov.w	ip, #0
 800d25e:	4618      	mov	r0, r3
 800d260:	f853 2b04 	ldr.w	r2, [r3], #4
 800d264:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d268:	d01b      	beq.n	800d2a2 <__gethex+0x396>
 800d26a:	3201      	adds	r2, #1
 800d26c:	6002      	str	r2, [r0, #0]
 800d26e:	2d02      	cmp	r5, #2
 800d270:	f104 0314 	add.w	r3, r4, #20
 800d274:	d13c      	bne.n	800d2f0 <__gethex+0x3e4>
 800d276:	f8d8 2000 	ldr.w	r2, [r8]
 800d27a:	3a01      	subs	r2, #1
 800d27c:	42b2      	cmp	r2, r6
 800d27e:	d109      	bne.n	800d294 <__gethex+0x388>
 800d280:	1171      	asrs	r1, r6, #5
 800d282:	2201      	movs	r2, #1
 800d284:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d288:	f006 061f 	and.w	r6, r6, #31
 800d28c:	fa02 f606 	lsl.w	r6, r2, r6
 800d290:	421e      	tst	r6, r3
 800d292:	d13a      	bne.n	800d30a <__gethex+0x3fe>
 800d294:	f045 0520 	orr.w	r5, r5, #32
 800d298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d29a:	601c      	str	r4, [r3, #0]
 800d29c:	9b02      	ldr	r3, [sp, #8]
 800d29e:	601f      	str	r7, [r3, #0]
 800d2a0:	e6b0      	b.n	800d004 <__gethex+0xf8>
 800d2a2:	4299      	cmp	r1, r3
 800d2a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800d2a8:	d8d9      	bhi.n	800d25e <__gethex+0x352>
 800d2aa:	68a3      	ldr	r3, [r4, #8]
 800d2ac:	459b      	cmp	fp, r3
 800d2ae:	db17      	blt.n	800d2e0 <__gethex+0x3d4>
 800d2b0:	6861      	ldr	r1, [r4, #4]
 800d2b2:	9801      	ldr	r0, [sp, #4]
 800d2b4:	3101      	adds	r1, #1
 800d2b6:	f7fd fe4b 	bl	800af50 <_Balloc>
 800d2ba:	4681      	mov	r9, r0
 800d2bc:	b918      	cbnz	r0, 800d2c6 <__gethex+0x3ba>
 800d2be:	4b1a      	ldr	r3, [pc, #104]	@ (800d328 <__gethex+0x41c>)
 800d2c0:	4602      	mov	r2, r0
 800d2c2:	2184      	movs	r1, #132	@ 0x84
 800d2c4:	e6c5      	b.n	800d052 <__gethex+0x146>
 800d2c6:	6922      	ldr	r2, [r4, #16]
 800d2c8:	3202      	adds	r2, #2
 800d2ca:	f104 010c 	add.w	r1, r4, #12
 800d2ce:	0092      	lsls	r2, r2, #2
 800d2d0:	300c      	adds	r0, #12
 800d2d2:	f7fc fedc 	bl	800a08e <memcpy>
 800d2d6:	4621      	mov	r1, r4
 800d2d8:	9801      	ldr	r0, [sp, #4]
 800d2da:	f7fd fe79 	bl	800afd0 <_Bfree>
 800d2de:	464c      	mov	r4, r9
 800d2e0:	6923      	ldr	r3, [r4, #16]
 800d2e2:	1c5a      	adds	r2, r3, #1
 800d2e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d2e8:	6122      	str	r2, [r4, #16]
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	615a      	str	r2, [r3, #20]
 800d2ee:	e7be      	b.n	800d26e <__gethex+0x362>
 800d2f0:	6922      	ldr	r2, [r4, #16]
 800d2f2:	455a      	cmp	r2, fp
 800d2f4:	dd0b      	ble.n	800d30e <__gethex+0x402>
 800d2f6:	2101      	movs	r1, #1
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	f7ff fd9f 	bl	800ce3c <rshift>
 800d2fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d302:	3701      	adds	r7, #1
 800d304:	42bb      	cmp	r3, r7
 800d306:	f6ff aee0 	blt.w	800d0ca <__gethex+0x1be>
 800d30a:	2501      	movs	r5, #1
 800d30c:	e7c2      	b.n	800d294 <__gethex+0x388>
 800d30e:	f016 061f 	ands.w	r6, r6, #31
 800d312:	d0fa      	beq.n	800d30a <__gethex+0x3fe>
 800d314:	4453      	add	r3, sl
 800d316:	f1c6 0620 	rsb	r6, r6, #32
 800d31a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d31e:	f7fd ff09 	bl	800b134 <__hi0bits>
 800d322:	42b0      	cmp	r0, r6
 800d324:	dbe7      	blt.n	800d2f6 <__gethex+0x3ea>
 800d326:	e7f0      	b.n	800d30a <__gethex+0x3fe>
 800d328:	0800dbcd 	.word	0x0800dbcd

0800d32c <L_shift>:
 800d32c:	f1c2 0208 	rsb	r2, r2, #8
 800d330:	0092      	lsls	r2, r2, #2
 800d332:	b570      	push	{r4, r5, r6, lr}
 800d334:	f1c2 0620 	rsb	r6, r2, #32
 800d338:	6843      	ldr	r3, [r0, #4]
 800d33a:	6804      	ldr	r4, [r0, #0]
 800d33c:	fa03 f506 	lsl.w	r5, r3, r6
 800d340:	432c      	orrs	r4, r5
 800d342:	40d3      	lsrs	r3, r2
 800d344:	6004      	str	r4, [r0, #0]
 800d346:	f840 3f04 	str.w	r3, [r0, #4]!
 800d34a:	4288      	cmp	r0, r1
 800d34c:	d3f4      	bcc.n	800d338 <L_shift+0xc>
 800d34e:	bd70      	pop	{r4, r5, r6, pc}

0800d350 <__match>:
 800d350:	b530      	push	{r4, r5, lr}
 800d352:	6803      	ldr	r3, [r0, #0]
 800d354:	3301      	adds	r3, #1
 800d356:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d35a:	b914      	cbnz	r4, 800d362 <__match+0x12>
 800d35c:	6003      	str	r3, [r0, #0]
 800d35e:	2001      	movs	r0, #1
 800d360:	bd30      	pop	{r4, r5, pc}
 800d362:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d366:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d36a:	2d19      	cmp	r5, #25
 800d36c:	bf98      	it	ls
 800d36e:	3220      	addls	r2, #32
 800d370:	42a2      	cmp	r2, r4
 800d372:	d0f0      	beq.n	800d356 <__match+0x6>
 800d374:	2000      	movs	r0, #0
 800d376:	e7f3      	b.n	800d360 <__match+0x10>

0800d378 <__hexnan>:
 800d378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37c:	680b      	ldr	r3, [r1, #0]
 800d37e:	6801      	ldr	r1, [r0, #0]
 800d380:	115e      	asrs	r6, r3, #5
 800d382:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d386:	f013 031f 	ands.w	r3, r3, #31
 800d38a:	b087      	sub	sp, #28
 800d38c:	bf18      	it	ne
 800d38e:	3604      	addne	r6, #4
 800d390:	2500      	movs	r5, #0
 800d392:	1f37      	subs	r7, r6, #4
 800d394:	4682      	mov	sl, r0
 800d396:	4690      	mov	r8, r2
 800d398:	9301      	str	r3, [sp, #4]
 800d39a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d39e:	46b9      	mov	r9, r7
 800d3a0:	463c      	mov	r4, r7
 800d3a2:	9502      	str	r5, [sp, #8]
 800d3a4:	46ab      	mov	fp, r5
 800d3a6:	784a      	ldrb	r2, [r1, #1]
 800d3a8:	1c4b      	adds	r3, r1, #1
 800d3aa:	9303      	str	r3, [sp, #12]
 800d3ac:	b342      	cbz	r2, 800d400 <__hexnan+0x88>
 800d3ae:	4610      	mov	r0, r2
 800d3b0:	9105      	str	r1, [sp, #20]
 800d3b2:	9204      	str	r2, [sp, #16]
 800d3b4:	f7ff fd94 	bl	800cee0 <__hexdig_fun>
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	d151      	bne.n	800d460 <__hexnan+0xe8>
 800d3bc:	9a04      	ldr	r2, [sp, #16]
 800d3be:	9905      	ldr	r1, [sp, #20]
 800d3c0:	2a20      	cmp	r2, #32
 800d3c2:	d818      	bhi.n	800d3f6 <__hexnan+0x7e>
 800d3c4:	9b02      	ldr	r3, [sp, #8]
 800d3c6:	459b      	cmp	fp, r3
 800d3c8:	dd13      	ble.n	800d3f2 <__hexnan+0x7a>
 800d3ca:	454c      	cmp	r4, r9
 800d3cc:	d206      	bcs.n	800d3dc <__hexnan+0x64>
 800d3ce:	2d07      	cmp	r5, #7
 800d3d0:	dc04      	bgt.n	800d3dc <__hexnan+0x64>
 800d3d2:	462a      	mov	r2, r5
 800d3d4:	4649      	mov	r1, r9
 800d3d6:	4620      	mov	r0, r4
 800d3d8:	f7ff ffa8 	bl	800d32c <L_shift>
 800d3dc:	4544      	cmp	r4, r8
 800d3de:	d952      	bls.n	800d486 <__hexnan+0x10e>
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	f1a4 0904 	sub.w	r9, r4, #4
 800d3e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3ea:	f8cd b008 	str.w	fp, [sp, #8]
 800d3ee:	464c      	mov	r4, r9
 800d3f0:	461d      	mov	r5, r3
 800d3f2:	9903      	ldr	r1, [sp, #12]
 800d3f4:	e7d7      	b.n	800d3a6 <__hexnan+0x2e>
 800d3f6:	2a29      	cmp	r2, #41	@ 0x29
 800d3f8:	d157      	bne.n	800d4aa <__hexnan+0x132>
 800d3fa:	3102      	adds	r1, #2
 800d3fc:	f8ca 1000 	str.w	r1, [sl]
 800d400:	f1bb 0f00 	cmp.w	fp, #0
 800d404:	d051      	beq.n	800d4aa <__hexnan+0x132>
 800d406:	454c      	cmp	r4, r9
 800d408:	d206      	bcs.n	800d418 <__hexnan+0xa0>
 800d40a:	2d07      	cmp	r5, #7
 800d40c:	dc04      	bgt.n	800d418 <__hexnan+0xa0>
 800d40e:	462a      	mov	r2, r5
 800d410:	4649      	mov	r1, r9
 800d412:	4620      	mov	r0, r4
 800d414:	f7ff ff8a 	bl	800d32c <L_shift>
 800d418:	4544      	cmp	r4, r8
 800d41a:	d936      	bls.n	800d48a <__hexnan+0x112>
 800d41c:	f1a8 0204 	sub.w	r2, r8, #4
 800d420:	4623      	mov	r3, r4
 800d422:	f853 1b04 	ldr.w	r1, [r3], #4
 800d426:	f842 1f04 	str.w	r1, [r2, #4]!
 800d42a:	429f      	cmp	r7, r3
 800d42c:	d2f9      	bcs.n	800d422 <__hexnan+0xaa>
 800d42e:	1b3b      	subs	r3, r7, r4
 800d430:	f023 0303 	bic.w	r3, r3, #3
 800d434:	3304      	adds	r3, #4
 800d436:	3401      	adds	r4, #1
 800d438:	3e03      	subs	r6, #3
 800d43a:	42b4      	cmp	r4, r6
 800d43c:	bf88      	it	hi
 800d43e:	2304      	movhi	r3, #4
 800d440:	4443      	add	r3, r8
 800d442:	2200      	movs	r2, #0
 800d444:	f843 2b04 	str.w	r2, [r3], #4
 800d448:	429f      	cmp	r7, r3
 800d44a:	d2fb      	bcs.n	800d444 <__hexnan+0xcc>
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	b91b      	cbnz	r3, 800d458 <__hexnan+0xe0>
 800d450:	4547      	cmp	r7, r8
 800d452:	d128      	bne.n	800d4a6 <__hexnan+0x12e>
 800d454:	2301      	movs	r3, #1
 800d456:	603b      	str	r3, [r7, #0]
 800d458:	2005      	movs	r0, #5
 800d45a:	b007      	add	sp, #28
 800d45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d460:	3501      	adds	r5, #1
 800d462:	2d08      	cmp	r5, #8
 800d464:	f10b 0b01 	add.w	fp, fp, #1
 800d468:	dd06      	ble.n	800d478 <__hexnan+0x100>
 800d46a:	4544      	cmp	r4, r8
 800d46c:	d9c1      	bls.n	800d3f2 <__hexnan+0x7a>
 800d46e:	2300      	movs	r3, #0
 800d470:	f844 3c04 	str.w	r3, [r4, #-4]
 800d474:	2501      	movs	r5, #1
 800d476:	3c04      	subs	r4, #4
 800d478:	6822      	ldr	r2, [r4, #0]
 800d47a:	f000 000f 	and.w	r0, r0, #15
 800d47e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d482:	6020      	str	r0, [r4, #0]
 800d484:	e7b5      	b.n	800d3f2 <__hexnan+0x7a>
 800d486:	2508      	movs	r5, #8
 800d488:	e7b3      	b.n	800d3f2 <__hexnan+0x7a>
 800d48a:	9b01      	ldr	r3, [sp, #4]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d0dd      	beq.n	800d44c <__hexnan+0xd4>
 800d490:	f1c3 0320 	rsb	r3, r3, #32
 800d494:	f04f 32ff 	mov.w	r2, #4294967295
 800d498:	40da      	lsrs	r2, r3
 800d49a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d49e:	4013      	ands	r3, r2
 800d4a0:	f846 3c04 	str.w	r3, [r6, #-4]
 800d4a4:	e7d2      	b.n	800d44c <__hexnan+0xd4>
 800d4a6:	3f04      	subs	r7, #4
 800d4a8:	e7d0      	b.n	800d44c <__hexnan+0xd4>
 800d4aa:	2004      	movs	r0, #4
 800d4ac:	e7d5      	b.n	800d45a <__hexnan+0xe2>

0800d4ae <__ascii_mbtowc>:
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	b901      	cbnz	r1, 800d4b4 <__ascii_mbtowc+0x6>
 800d4b2:	a901      	add	r1, sp, #4
 800d4b4:	b142      	cbz	r2, 800d4c8 <__ascii_mbtowc+0x1a>
 800d4b6:	b14b      	cbz	r3, 800d4cc <__ascii_mbtowc+0x1e>
 800d4b8:	7813      	ldrb	r3, [r2, #0]
 800d4ba:	600b      	str	r3, [r1, #0]
 800d4bc:	7812      	ldrb	r2, [r2, #0]
 800d4be:	1e10      	subs	r0, r2, #0
 800d4c0:	bf18      	it	ne
 800d4c2:	2001      	movne	r0, #1
 800d4c4:	b002      	add	sp, #8
 800d4c6:	4770      	bx	lr
 800d4c8:	4610      	mov	r0, r2
 800d4ca:	e7fb      	b.n	800d4c4 <__ascii_mbtowc+0x16>
 800d4cc:	f06f 0001 	mvn.w	r0, #1
 800d4d0:	e7f8      	b.n	800d4c4 <__ascii_mbtowc+0x16>

0800d4d2 <_realloc_r>:
 800d4d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d6:	4680      	mov	r8, r0
 800d4d8:	4615      	mov	r5, r2
 800d4da:	460c      	mov	r4, r1
 800d4dc:	b921      	cbnz	r1, 800d4e8 <_realloc_r+0x16>
 800d4de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4e2:	4611      	mov	r1, r2
 800d4e4:	f7fd bca8 	b.w	800ae38 <_malloc_r>
 800d4e8:	b92a      	cbnz	r2, 800d4f6 <_realloc_r+0x24>
 800d4ea:	f7fd fc31 	bl	800ad50 <_free_r>
 800d4ee:	2400      	movs	r4, #0
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4f6:	f000 f840 	bl	800d57a <_malloc_usable_size_r>
 800d4fa:	4285      	cmp	r5, r0
 800d4fc:	4606      	mov	r6, r0
 800d4fe:	d802      	bhi.n	800d506 <_realloc_r+0x34>
 800d500:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d504:	d8f4      	bhi.n	800d4f0 <_realloc_r+0x1e>
 800d506:	4629      	mov	r1, r5
 800d508:	4640      	mov	r0, r8
 800d50a:	f7fd fc95 	bl	800ae38 <_malloc_r>
 800d50e:	4607      	mov	r7, r0
 800d510:	2800      	cmp	r0, #0
 800d512:	d0ec      	beq.n	800d4ee <_realloc_r+0x1c>
 800d514:	42b5      	cmp	r5, r6
 800d516:	462a      	mov	r2, r5
 800d518:	4621      	mov	r1, r4
 800d51a:	bf28      	it	cs
 800d51c:	4632      	movcs	r2, r6
 800d51e:	f7fc fdb6 	bl	800a08e <memcpy>
 800d522:	4621      	mov	r1, r4
 800d524:	4640      	mov	r0, r8
 800d526:	f7fd fc13 	bl	800ad50 <_free_r>
 800d52a:	463c      	mov	r4, r7
 800d52c:	e7e0      	b.n	800d4f0 <_realloc_r+0x1e>

0800d52e <__ascii_wctomb>:
 800d52e:	4603      	mov	r3, r0
 800d530:	4608      	mov	r0, r1
 800d532:	b141      	cbz	r1, 800d546 <__ascii_wctomb+0x18>
 800d534:	2aff      	cmp	r2, #255	@ 0xff
 800d536:	d904      	bls.n	800d542 <__ascii_wctomb+0x14>
 800d538:	228a      	movs	r2, #138	@ 0x8a
 800d53a:	601a      	str	r2, [r3, #0]
 800d53c:	f04f 30ff 	mov.w	r0, #4294967295
 800d540:	4770      	bx	lr
 800d542:	700a      	strb	r2, [r1, #0]
 800d544:	2001      	movs	r0, #1
 800d546:	4770      	bx	lr

0800d548 <fiprintf>:
 800d548:	b40e      	push	{r1, r2, r3}
 800d54a:	b503      	push	{r0, r1, lr}
 800d54c:	4601      	mov	r1, r0
 800d54e:	ab03      	add	r3, sp, #12
 800d550:	4805      	ldr	r0, [pc, #20]	@ (800d568 <fiprintf+0x20>)
 800d552:	f853 2b04 	ldr.w	r2, [r3], #4
 800d556:	6800      	ldr	r0, [r0, #0]
 800d558:	9301      	str	r3, [sp, #4]
 800d55a:	f7ff f9b1 	bl	800c8c0 <_vfiprintf_r>
 800d55e:	b002      	add	sp, #8
 800d560:	f85d eb04 	ldr.w	lr, [sp], #4
 800d564:	b003      	add	sp, #12
 800d566:	4770      	bx	lr
 800d568:	20000018 	.word	0x20000018

0800d56c <abort>:
 800d56c:	b508      	push	{r3, lr}
 800d56e:	2006      	movs	r0, #6
 800d570:	f000 f834 	bl	800d5dc <raise>
 800d574:	2001      	movs	r0, #1
 800d576:	f7f4 fa2b 	bl	80019d0 <_exit>

0800d57a <_malloc_usable_size_r>:
 800d57a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d57e:	1f18      	subs	r0, r3, #4
 800d580:	2b00      	cmp	r3, #0
 800d582:	bfbc      	itt	lt
 800d584:	580b      	ldrlt	r3, [r1, r0]
 800d586:	18c0      	addlt	r0, r0, r3
 800d588:	4770      	bx	lr

0800d58a <_raise_r>:
 800d58a:	291f      	cmp	r1, #31
 800d58c:	b538      	push	{r3, r4, r5, lr}
 800d58e:	4605      	mov	r5, r0
 800d590:	460c      	mov	r4, r1
 800d592:	d904      	bls.n	800d59e <_raise_r+0x14>
 800d594:	2316      	movs	r3, #22
 800d596:	6003      	str	r3, [r0, #0]
 800d598:	f04f 30ff 	mov.w	r0, #4294967295
 800d59c:	bd38      	pop	{r3, r4, r5, pc}
 800d59e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d5a0:	b112      	cbz	r2, 800d5a8 <_raise_r+0x1e>
 800d5a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5a6:	b94b      	cbnz	r3, 800d5bc <_raise_r+0x32>
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	f000 f831 	bl	800d610 <_getpid_r>
 800d5ae:	4622      	mov	r2, r4
 800d5b0:	4601      	mov	r1, r0
 800d5b2:	4628      	mov	r0, r5
 800d5b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5b8:	f000 b818 	b.w	800d5ec <_kill_r>
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d00a      	beq.n	800d5d6 <_raise_r+0x4c>
 800d5c0:	1c59      	adds	r1, r3, #1
 800d5c2:	d103      	bne.n	800d5cc <_raise_r+0x42>
 800d5c4:	2316      	movs	r3, #22
 800d5c6:	6003      	str	r3, [r0, #0]
 800d5c8:	2001      	movs	r0, #1
 800d5ca:	e7e7      	b.n	800d59c <_raise_r+0x12>
 800d5cc:	2100      	movs	r1, #0
 800d5ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	4798      	blx	r3
 800d5d6:	2000      	movs	r0, #0
 800d5d8:	e7e0      	b.n	800d59c <_raise_r+0x12>
	...

0800d5dc <raise>:
 800d5dc:	4b02      	ldr	r3, [pc, #8]	@ (800d5e8 <raise+0xc>)
 800d5de:	4601      	mov	r1, r0
 800d5e0:	6818      	ldr	r0, [r3, #0]
 800d5e2:	f7ff bfd2 	b.w	800d58a <_raise_r>
 800d5e6:	bf00      	nop
 800d5e8:	20000018 	.word	0x20000018

0800d5ec <_kill_r>:
 800d5ec:	b538      	push	{r3, r4, r5, lr}
 800d5ee:	4d07      	ldr	r5, [pc, #28]	@ (800d60c <_kill_r+0x20>)
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	4604      	mov	r4, r0
 800d5f4:	4608      	mov	r0, r1
 800d5f6:	4611      	mov	r1, r2
 800d5f8:	602b      	str	r3, [r5, #0]
 800d5fa:	f7f4 f9d9 	bl	80019b0 <_kill>
 800d5fe:	1c43      	adds	r3, r0, #1
 800d600:	d102      	bne.n	800d608 <_kill_r+0x1c>
 800d602:	682b      	ldr	r3, [r5, #0]
 800d604:	b103      	cbz	r3, 800d608 <_kill_r+0x1c>
 800d606:	6023      	str	r3, [r4, #0]
 800d608:	bd38      	pop	{r3, r4, r5, pc}
 800d60a:	bf00      	nop
 800d60c:	20001040 	.word	0x20001040

0800d610 <_getpid_r>:
 800d610:	f7f4 b9c6 	b.w	80019a0 <_getpid>
 800d614:	0000      	movs	r0, r0
	...

0800d618 <atan>:
 800d618:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d61c:	ec55 4b10 	vmov	r4, r5, d0
 800d620:	4bbf      	ldr	r3, [pc, #764]	@ (800d920 <atan+0x308>)
 800d622:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d626:	429e      	cmp	r6, r3
 800d628:	46ab      	mov	fp, r5
 800d62a:	d918      	bls.n	800d65e <atan+0x46>
 800d62c:	4bbd      	ldr	r3, [pc, #756]	@ (800d924 <atan+0x30c>)
 800d62e:	429e      	cmp	r6, r3
 800d630:	d801      	bhi.n	800d636 <atan+0x1e>
 800d632:	d109      	bne.n	800d648 <atan+0x30>
 800d634:	b144      	cbz	r4, 800d648 <atan+0x30>
 800d636:	4622      	mov	r2, r4
 800d638:	462b      	mov	r3, r5
 800d63a:	4620      	mov	r0, r4
 800d63c:	4629      	mov	r1, r5
 800d63e:	f7f2 fe4d 	bl	80002dc <__adddf3>
 800d642:	4604      	mov	r4, r0
 800d644:	460d      	mov	r5, r1
 800d646:	e006      	b.n	800d656 <atan+0x3e>
 800d648:	f1bb 0f00 	cmp.w	fp, #0
 800d64c:	f340 812b 	ble.w	800d8a6 <atan+0x28e>
 800d650:	a597      	add	r5, pc, #604	@ (adr r5, 800d8b0 <atan+0x298>)
 800d652:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d656:	ec45 4b10 	vmov	d0, r4, r5
 800d65a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d65e:	4bb2      	ldr	r3, [pc, #712]	@ (800d928 <atan+0x310>)
 800d660:	429e      	cmp	r6, r3
 800d662:	d813      	bhi.n	800d68c <atan+0x74>
 800d664:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800d668:	429e      	cmp	r6, r3
 800d66a:	d80c      	bhi.n	800d686 <atan+0x6e>
 800d66c:	a392      	add	r3, pc, #584	@ (adr r3, 800d8b8 <atan+0x2a0>)
 800d66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d672:	4620      	mov	r0, r4
 800d674:	4629      	mov	r1, r5
 800d676:	f7f2 fe31 	bl	80002dc <__adddf3>
 800d67a:	4bac      	ldr	r3, [pc, #688]	@ (800d92c <atan+0x314>)
 800d67c:	2200      	movs	r2, #0
 800d67e:	f7f3 fa73 	bl	8000b68 <__aeabi_dcmpgt>
 800d682:	2800      	cmp	r0, #0
 800d684:	d1e7      	bne.n	800d656 <atan+0x3e>
 800d686:	f04f 3aff 	mov.w	sl, #4294967295
 800d68a:	e029      	b.n	800d6e0 <atan+0xc8>
 800d68c:	f000 f95c 	bl	800d948 <fabs>
 800d690:	4ba7      	ldr	r3, [pc, #668]	@ (800d930 <atan+0x318>)
 800d692:	429e      	cmp	r6, r3
 800d694:	ec55 4b10 	vmov	r4, r5, d0
 800d698:	f200 80bc 	bhi.w	800d814 <atan+0x1fc>
 800d69c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800d6a0:	429e      	cmp	r6, r3
 800d6a2:	f200 809e 	bhi.w	800d7e2 <atan+0x1ca>
 800d6a6:	4622      	mov	r2, r4
 800d6a8:	462b      	mov	r3, r5
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	4629      	mov	r1, r5
 800d6ae:	f7f2 fe15 	bl	80002dc <__adddf3>
 800d6b2:	4b9e      	ldr	r3, [pc, #632]	@ (800d92c <atan+0x314>)
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	f7f2 fe0f 	bl	80002d8 <__aeabi_dsub>
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	4606      	mov	r6, r0
 800d6be:	460f      	mov	r7, r1
 800d6c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	4629      	mov	r1, r5
 800d6c8:	f7f2 fe08 	bl	80002dc <__adddf3>
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	460b      	mov	r3, r1
 800d6d0:	4630      	mov	r0, r6
 800d6d2:	4639      	mov	r1, r7
 800d6d4:	f7f3 f8e2 	bl	800089c <__aeabi_ddiv>
 800d6d8:	f04f 0a00 	mov.w	sl, #0
 800d6dc:	4604      	mov	r4, r0
 800d6de:	460d      	mov	r5, r1
 800d6e0:	4622      	mov	r2, r4
 800d6e2:	462b      	mov	r3, r5
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	4629      	mov	r1, r5
 800d6e8:	f7f2 ffae 	bl	8000648 <__aeabi_dmul>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	460b      	mov	r3, r1
 800d6f0:	4680      	mov	r8, r0
 800d6f2:	4689      	mov	r9, r1
 800d6f4:	f7f2 ffa8 	bl	8000648 <__aeabi_dmul>
 800d6f8:	a371      	add	r3, pc, #452	@ (adr r3, 800d8c0 <atan+0x2a8>)
 800d6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fe:	4606      	mov	r6, r0
 800d700:	460f      	mov	r7, r1
 800d702:	f7f2 ffa1 	bl	8000648 <__aeabi_dmul>
 800d706:	a370      	add	r3, pc, #448	@ (adr r3, 800d8c8 <atan+0x2b0>)
 800d708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70c:	f7f2 fde6 	bl	80002dc <__adddf3>
 800d710:	4632      	mov	r2, r6
 800d712:	463b      	mov	r3, r7
 800d714:	f7f2 ff98 	bl	8000648 <__aeabi_dmul>
 800d718:	a36d      	add	r3, pc, #436	@ (adr r3, 800d8d0 <atan+0x2b8>)
 800d71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71e:	f7f2 fddd 	bl	80002dc <__adddf3>
 800d722:	4632      	mov	r2, r6
 800d724:	463b      	mov	r3, r7
 800d726:	f7f2 ff8f 	bl	8000648 <__aeabi_dmul>
 800d72a:	a36b      	add	r3, pc, #428	@ (adr r3, 800d8d8 <atan+0x2c0>)
 800d72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d730:	f7f2 fdd4 	bl	80002dc <__adddf3>
 800d734:	4632      	mov	r2, r6
 800d736:	463b      	mov	r3, r7
 800d738:	f7f2 ff86 	bl	8000648 <__aeabi_dmul>
 800d73c:	a368      	add	r3, pc, #416	@ (adr r3, 800d8e0 <atan+0x2c8>)
 800d73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d742:	f7f2 fdcb 	bl	80002dc <__adddf3>
 800d746:	4632      	mov	r2, r6
 800d748:	463b      	mov	r3, r7
 800d74a:	f7f2 ff7d 	bl	8000648 <__aeabi_dmul>
 800d74e:	a366      	add	r3, pc, #408	@ (adr r3, 800d8e8 <atan+0x2d0>)
 800d750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d754:	f7f2 fdc2 	bl	80002dc <__adddf3>
 800d758:	4642      	mov	r2, r8
 800d75a:	464b      	mov	r3, r9
 800d75c:	f7f2 ff74 	bl	8000648 <__aeabi_dmul>
 800d760:	a363      	add	r3, pc, #396	@ (adr r3, 800d8f0 <atan+0x2d8>)
 800d762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d766:	4680      	mov	r8, r0
 800d768:	4689      	mov	r9, r1
 800d76a:	4630      	mov	r0, r6
 800d76c:	4639      	mov	r1, r7
 800d76e:	f7f2 ff6b 	bl	8000648 <__aeabi_dmul>
 800d772:	a361      	add	r3, pc, #388	@ (adr r3, 800d8f8 <atan+0x2e0>)
 800d774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d778:	f7f2 fdae 	bl	80002d8 <__aeabi_dsub>
 800d77c:	4632      	mov	r2, r6
 800d77e:	463b      	mov	r3, r7
 800d780:	f7f2 ff62 	bl	8000648 <__aeabi_dmul>
 800d784:	a35e      	add	r3, pc, #376	@ (adr r3, 800d900 <atan+0x2e8>)
 800d786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78a:	f7f2 fda5 	bl	80002d8 <__aeabi_dsub>
 800d78e:	4632      	mov	r2, r6
 800d790:	463b      	mov	r3, r7
 800d792:	f7f2 ff59 	bl	8000648 <__aeabi_dmul>
 800d796:	a35c      	add	r3, pc, #368	@ (adr r3, 800d908 <atan+0x2f0>)
 800d798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79c:	f7f2 fd9c 	bl	80002d8 <__aeabi_dsub>
 800d7a0:	4632      	mov	r2, r6
 800d7a2:	463b      	mov	r3, r7
 800d7a4:	f7f2 ff50 	bl	8000648 <__aeabi_dmul>
 800d7a8:	a359      	add	r3, pc, #356	@ (adr r3, 800d910 <atan+0x2f8>)
 800d7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ae:	f7f2 fd93 	bl	80002d8 <__aeabi_dsub>
 800d7b2:	4632      	mov	r2, r6
 800d7b4:	463b      	mov	r3, r7
 800d7b6:	f7f2 ff47 	bl	8000648 <__aeabi_dmul>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	460b      	mov	r3, r1
 800d7be:	4640      	mov	r0, r8
 800d7c0:	4649      	mov	r1, r9
 800d7c2:	f7f2 fd8b 	bl	80002dc <__adddf3>
 800d7c6:	4622      	mov	r2, r4
 800d7c8:	462b      	mov	r3, r5
 800d7ca:	f7f2 ff3d 	bl	8000648 <__aeabi_dmul>
 800d7ce:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d7d2:	4602      	mov	r2, r0
 800d7d4:	460b      	mov	r3, r1
 800d7d6:	d148      	bne.n	800d86a <atan+0x252>
 800d7d8:	4620      	mov	r0, r4
 800d7da:	4629      	mov	r1, r5
 800d7dc:	f7f2 fd7c 	bl	80002d8 <__aeabi_dsub>
 800d7e0:	e72f      	b.n	800d642 <atan+0x2a>
 800d7e2:	4b52      	ldr	r3, [pc, #328]	@ (800d92c <atan+0x314>)
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	4629      	mov	r1, r5
 800d7ea:	f7f2 fd75 	bl	80002d8 <__aeabi_dsub>
 800d7ee:	4b4f      	ldr	r3, [pc, #316]	@ (800d92c <atan+0x314>)
 800d7f0:	4606      	mov	r6, r0
 800d7f2:	460f      	mov	r7, r1
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	4620      	mov	r0, r4
 800d7f8:	4629      	mov	r1, r5
 800d7fa:	f7f2 fd6f 	bl	80002dc <__adddf3>
 800d7fe:	4602      	mov	r2, r0
 800d800:	460b      	mov	r3, r1
 800d802:	4630      	mov	r0, r6
 800d804:	4639      	mov	r1, r7
 800d806:	f7f3 f849 	bl	800089c <__aeabi_ddiv>
 800d80a:	f04f 0a01 	mov.w	sl, #1
 800d80e:	4604      	mov	r4, r0
 800d810:	460d      	mov	r5, r1
 800d812:	e765      	b.n	800d6e0 <atan+0xc8>
 800d814:	4b47      	ldr	r3, [pc, #284]	@ (800d934 <atan+0x31c>)
 800d816:	429e      	cmp	r6, r3
 800d818:	d21c      	bcs.n	800d854 <atan+0x23c>
 800d81a:	4b47      	ldr	r3, [pc, #284]	@ (800d938 <atan+0x320>)
 800d81c:	2200      	movs	r2, #0
 800d81e:	4620      	mov	r0, r4
 800d820:	4629      	mov	r1, r5
 800d822:	f7f2 fd59 	bl	80002d8 <__aeabi_dsub>
 800d826:	4b44      	ldr	r3, [pc, #272]	@ (800d938 <atan+0x320>)
 800d828:	4606      	mov	r6, r0
 800d82a:	460f      	mov	r7, r1
 800d82c:	2200      	movs	r2, #0
 800d82e:	4620      	mov	r0, r4
 800d830:	4629      	mov	r1, r5
 800d832:	f7f2 ff09 	bl	8000648 <__aeabi_dmul>
 800d836:	4b3d      	ldr	r3, [pc, #244]	@ (800d92c <atan+0x314>)
 800d838:	2200      	movs	r2, #0
 800d83a:	f7f2 fd4f 	bl	80002dc <__adddf3>
 800d83e:	4602      	mov	r2, r0
 800d840:	460b      	mov	r3, r1
 800d842:	4630      	mov	r0, r6
 800d844:	4639      	mov	r1, r7
 800d846:	f7f3 f829 	bl	800089c <__aeabi_ddiv>
 800d84a:	f04f 0a02 	mov.w	sl, #2
 800d84e:	4604      	mov	r4, r0
 800d850:	460d      	mov	r5, r1
 800d852:	e745      	b.n	800d6e0 <atan+0xc8>
 800d854:	4622      	mov	r2, r4
 800d856:	462b      	mov	r3, r5
 800d858:	4938      	ldr	r1, [pc, #224]	@ (800d93c <atan+0x324>)
 800d85a:	2000      	movs	r0, #0
 800d85c:	f7f3 f81e 	bl	800089c <__aeabi_ddiv>
 800d860:	f04f 0a03 	mov.w	sl, #3
 800d864:	4604      	mov	r4, r0
 800d866:	460d      	mov	r5, r1
 800d868:	e73a      	b.n	800d6e0 <atan+0xc8>
 800d86a:	4b35      	ldr	r3, [pc, #212]	@ (800d940 <atan+0x328>)
 800d86c:	4e35      	ldr	r6, [pc, #212]	@ (800d944 <atan+0x32c>)
 800d86e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d876:	f7f2 fd2f 	bl	80002d8 <__aeabi_dsub>
 800d87a:	4622      	mov	r2, r4
 800d87c:	462b      	mov	r3, r5
 800d87e:	f7f2 fd2b 	bl	80002d8 <__aeabi_dsub>
 800d882:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d886:	4602      	mov	r2, r0
 800d888:	460b      	mov	r3, r1
 800d88a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d88e:	f7f2 fd23 	bl	80002d8 <__aeabi_dsub>
 800d892:	f1bb 0f00 	cmp.w	fp, #0
 800d896:	4604      	mov	r4, r0
 800d898:	460d      	mov	r5, r1
 800d89a:	f6bf aedc 	bge.w	800d656 <atan+0x3e>
 800d89e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d8a2:	461d      	mov	r5, r3
 800d8a4:	e6d7      	b.n	800d656 <atan+0x3e>
 800d8a6:	a51c      	add	r5, pc, #112	@ (adr r5, 800d918 <atan+0x300>)
 800d8a8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d8ac:	e6d3      	b.n	800d656 <atan+0x3e>
 800d8ae:	bf00      	nop
 800d8b0:	54442d18 	.word	0x54442d18
 800d8b4:	3ff921fb 	.word	0x3ff921fb
 800d8b8:	8800759c 	.word	0x8800759c
 800d8bc:	7e37e43c 	.word	0x7e37e43c
 800d8c0:	e322da11 	.word	0xe322da11
 800d8c4:	3f90ad3a 	.word	0x3f90ad3a
 800d8c8:	24760deb 	.word	0x24760deb
 800d8cc:	3fa97b4b 	.word	0x3fa97b4b
 800d8d0:	a0d03d51 	.word	0xa0d03d51
 800d8d4:	3fb10d66 	.word	0x3fb10d66
 800d8d8:	c54c206e 	.word	0xc54c206e
 800d8dc:	3fb745cd 	.word	0x3fb745cd
 800d8e0:	920083ff 	.word	0x920083ff
 800d8e4:	3fc24924 	.word	0x3fc24924
 800d8e8:	5555550d 	.word	0x5555550d
 800d8ec:	3fd55555 	.word	0x3fd55555
 800d8f0:	2c6a6c2f 	.word	0x2c6a6c2f
 800d8f4:	bfa2b444 	.word	0xbfa2b444
 800d8f8:	52defd9a 	.word	0x52defd9a
 800d8fc:	3fadde2d 	.word	0x3fadde2d
 800d900:	af749a6d 	.word	0xaf749a6d
 800d904:	3fb3b0f2 	.word	0x3fb3b0f2
 800d908:	fe231671 	.word	0xfe231671
 800d90c:	3fbc71c6 	.word	0x3fbc71c6
 800d910:	9998ebc4 	.word	0x9998ebc4
 800d914:	3fc99999 	.word	0x3fc99999
 800d918:	54442d18 	.word	0x54442d18
 800d91c:	bff921fb 	.word	0xbff921fb
 800d920:	440fffff 	.word	0x440fffff
 800d924:	7ff00000 	.word	0x7ff00000
 800d928:	3fdbffff 	.word	0x3fdbffff
 800d92c:	3ff00000 	.word	0x3ff00000
 800d930:	3ff2ffff 	.word	0x3ff2ffff
 800d934:	40038000 	.word	0x40038000
 800d938:	3ff80000 	.word	0x3ff80000
 800d93c:	bff00000 	.word	0xbff00000
 800d940:	0800df48 	.word	0x0800df48
 800d944:	0800df68 	.word	0x0800df68

0800d948 <fabs>:
 800d948:	ec51 0b10 	vmov	r0, r1, d0
 800d94c:	4602      	mov	r2, r0
 800d94e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d952:	ec43 2b10 	vmov	d0, r2, r3
 800d956:	4770      	bx	lr

0800d958 <round>:
 800d958:	ec51 0b10 	vmov	r0, r1, d0
 800d95c:	b570      	push	{r4, r5, r6, lr}
 800d95e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800d962:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800d966:	2a13      	cmp	r2, #19
 800d968:	460b      	mov	r3, r1
 800d96a:	4605      	mov	r5, r0
 800d96c:	dc1b      	bgt.n	800d9a6 <round+0x4e>
 800d96e:	2a00      	cmp	r2, #0
 800d970:	da0b      	bge.n	800d98a <round+0x32>
 800d972:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800d976:	3201      	adds	r2, #1
 800d978:	bf04      	itt	eq
 800d97a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800d97e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800d982:	2200      	movs	r2, #0
 800d984:	4619      	mov	r1, r3
 800d986:	4610      	mov	r0, r2
 800d988:	e015      	b.n	800d9b6 <round+0x5e>
 800d98a:	4c15      	ldr	r4, [pc, #84]	@ (800d9e0 <round+0x88>)
 800d98c:	4114      	asrs	r4, r2
 800d98e:	ea04 0601 	and.w	r6, r4, r1
 800d992:	4306      	orrs	r6, r0
 800d994:	d00f      	beq.n	800d9b6 <round+0x5e>
 800d996:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800d99a:	fa41 f202 	asr.w	r2, r1, r2
 800d99e:	4413      	add	r3, r2
 800d9a0:	ea23 0304 	bic.w	r3, r3, r4
 800d9a4:	e7ed      	b.n	800d982 <round+0x2a>
 800d9a6:	2a33      	cmp	r2, #51	@ 0x33
 800d9a8:	dd08      	ble.n	800d9bc <round+0x64>
 800d9aa:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800d9ae:	d102      	bne.n	800d9b6 <round+0x5e>
 800d9b0:	4602      	mov	r2, r0
 800d9b2:	f7f2 fc93 	bl	80002dc <__adddf3>
 800d9b6:	ec41 0b10 	vmov	d0, r0, r1
 800d9ba:	bd70      	pop	{r4, r5, r6, pc}
 800d9bc:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800d9c0:	f04f 34ff 	mov.w	r4, #4294967295
 800d9c4:	40f4      	lsrs	r4, r6
 800d9c6:	4204      	tst	r4, r0
 800d9c8:	d0f5      	beq.n	800d9b6 <round+0x5e>
 800d9ca:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	408a      	lsls	r2, r1
 800d9d2:	1952      	adds	r2, r2, r5
 800d9d4:	bf28      	it	cs
 800d9d6:	3301      	addcs	r3, #1
 800d9d8:	ea22 0204 	bic.w	r2, r2, r4
 800d9dc:	e7d2      	b.n	800d984 <round+0x2c>
 800d9de:	bf00      	nop
 800d9e0:	000fffff 	.word	0x000fffff

0800d9e4 <_init>:
 800d9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9e6:	bf00      	nop
 800d9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9ea:	bc08      	pop	{r3}
 800d9ec:	469e      	mov	lr, r3
 800d9ee:	4770      	bx	lr

0800d9f0 <_fini>:
 800d9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9f2:	bf00      	nop
 800d9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9f6:	bc08      	pop	{r3}
 800d9f8:	469e      	mov	lr, r3
 800d9fa:	4770      	bx	lr
