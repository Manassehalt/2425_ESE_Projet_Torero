
Projet_Torero_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab0c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800acf0  0800acf0  0000bcf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b160  0800b160  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b160  0800b160  0000c160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b168  0800b168  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b168  0800b168  0000c168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b16c  0800b16c  0000c16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b170  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  200001d4  0800b344  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  0800b344  0000d670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a4c  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003439  00000000  00000000  00026c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  0002a090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001241  00000000  00000000  0002b818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225f5  00000000  00000000  0002ca59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bfc9  00000000  00000000  0004f04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfa98  00000000  00000000  0006b017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014aaaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079c0  00000000  00000000  0014aaf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  001524b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800acd4 	.word	0x0800acd4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800acd4 	.word	0x0800acd4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f006 fa6c 	bl	800752a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001054:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800105a:	4b30      	ldr	r3, [pc, #192]	@ (800111c <MX_ADC1_Init+0xe8>)
 800105c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <MX_ADC1_Init+0xe8>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001074:	4b29      	ldr	r3, [pc, #164]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b28      	ldr	r3, [pc, #160]	@ (800111c <MX_ADC1_Init+0xe8>)
 800107c:	2204      	movs	r2, #4
 800107e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001088:	2200      	movs	r2, #0
 800108a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <MX_ADC1_Init+0xe8>)
 800108e:	2201      	movs	r2, #1
 8001090:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010bc:	4817      	ldr	r0, [pc, #92]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010be:	f001 facb 	bl	8002658 <HAL_ADC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010c8:	f000 f9a8 	bl	800141c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d4:	4619      	mov	r1, r3
 80010d6:	4811      	ldr	r0, [pc, #68]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010d8:	f002 f858 	bl	800318c <HAL_ADCEx_MultiModeConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010e2:	f000 f99b 	bl	800141c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_ADC1_Init+0xec>)
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ea:	2306      	movs	r3, #6
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f2:	237f      	movs	r3, #127	@ 0x7f
 80010f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f6:	2304      	movs	r3, #4
 80010f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001104:	f001 fc2c 	bl	8002960 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800110e:	f000 f985 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3730      	adds	r7, #48	@ 0x30
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001f0 	.word	0x200001f0
 8001120:	32601000 	.word	0x32601000

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09a      	sub	sp, #104	@ 0x68
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	2244      	movs	r2, #68	@ 0x44
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f006 f9f0 	bl	800752a <memset>
  if(adcHandle->Instance==ADC1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001152:	d133      	bne.n	80011bc <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001154:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001158:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800115a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800115e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4618      	mov	r0, r3
 8001166:	f003 f911 	bl	800438c <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001170:	f000 f954 	bl	800141c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 800117a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001190:	4a0c      	ldr	r2, [pc, #48]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 8001192:	f043 0302 	orr.w	r3, r3, #2
 8001196:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001198:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_ADC_MspInit+0xa0>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC1_IN15_AN_CB_G_Pin|ADC1_IN12_AN_CB_D_Pin;
 80011a4:	2303      	movs	r3, #3
 80011a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a8:	2303      	movs	r3, #3
 80011aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b4:	4619      	mov	r1, r3
 80011b6:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 80011b8:	f002 f970 	bl	800349c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011bc:	bf00      	nop
 80011be:	3768      	adds	r7, #104	@ 0x68
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021000 	.word	0x40021000
 80011c8:	48000400 	.word	0x48000400

080011cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	@ 0x28
 80011d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	4b4d      	ldr	r3, [pc, #308]	@ (8001318 <MX_GPIO_Init+0x14c>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	4a4c      	ldr	r2, [pc, #304]	@ (8001318 <MX_GPIO_Init+0x14c>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001318 <MX_GPIO_Init+0x14c>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011fa:	4b47      	ldr	r3, [pc, #284]	@ (8001318 <MX_GPIO_Init+0x14c>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	4a46      	ldr	r2, [pc, #280]	@ (8001318 <MX_GPIO_Init+0x14c>)
 8001200:	f043 0320 	orr.w	r3, r3, #32
 8001204:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001206:	4b44      	ldr	r3, [pc, #272]	@ (8001318 <MX_GPIO_Init+0x14c>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	f003 0320 	and.w	r3, r3, #32
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001212:	4b41      	ldr	r3, [pc, #260]	@ (8001318 <MX_GPIO_Init+0x14c>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	4a40      	ldr	r2, [pc, #256]	@ (8001318 <MX_GPIO_Init+0x14c>)
 8001218:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800121c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800121e:	4b3e      	ldr	r3, [pc, #248]	@ (8001318 <MX_GPIO_Init+0x14c>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	4b3b      	ldr	r3, [pc, #236]	@ (8001318 <MX_GPIO_Init+0x14c>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	4a3a      	ldr	r2, [pc, #232]	@ (8001318 <MX_GPIO_Init+0x14c>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001236:	4b38      	ldr	r3, [pc, #224]	@ (8001318 <MX_GPIO_Init+0x14c>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	4b35      	ldr	r3, [pc, #212]	@ (8001318 <MX_GPIO_Init+0x14c>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	4a34      	ldr	r2, [pc, #208]	@ (8001318 <MX_GPIO_Init+0x14c>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124e:	4b32      	ldr	r3, [pc, #200]	@ (8001318 <MX_GPIO_Init+0x14c>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INT2_ACC_Pin|LED_SE_Pin|LED_SW_Pin|Status_LED_Pin
 800125a:	2200      	movs	r2, #0
 800125c:	f642 4150 	movw	r1, #11344	@ 0x2c50
 8001260:	482e      	ldr	r0, [pc, #184]	@ (800131c <MX_GPIO_Init+0x150>)
 8001262:	f002 fa9d 	bl	80037a0 <HAL_GPIO_WritePin>
                          |Status_LED_debbug_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_ACC_Pin|LED_NE_Pin|INT1_ACC_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	f248 41a0 	movw	r1, #33952	@ 0x84a0
 800126c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001270:	f002 fa96 	bl	80037a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 8001274:	2200      	movs	r2, #0
 8001276:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 800127a:	4829      	ldr	r0, [pc, #164]	@ (8001320 <MX_GPIO_Init+0x154>)
 800127c:	f002 fa90 	bl	80037a0 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_S_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = INT2_ACC_Pin|LED_SE_Pin|LED_SW_Pin|Status_LED_Pin
 8001280:	f642 4350 	movw	r3, #11344	@ 0x2c50
 8001284:	617b      	str	r3, [r7, #20]
                          |Status_LED_debbug_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4820      	ldr	r0, [pc, #128]	@ (800131c <MX_GPIO_Init+0x150>)
 800129a:	f002 f8ff 	bl	800349c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 800129e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	481c      	ldr	r0, [pc, #112]	@ (8001324 <MX_GPIO_Init+0x158>)
 80012b4:	f002 f8f2 	bl	800349c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_ACC_Pin|LED_NE_Pin|INT1_ACC_Pin|DEV_EN_LIDAR_Pin;
 80012b8:	f248 43a0 	movw	r3, #33952	@ 0x84a0
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d4:	f002 f8e2 	bl	800349c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin|LED_NW_Pin|LED_W_Pin|LED_N_Pin
 80012d8:	f241 03f4 	movw	r3, #4340	@ 0x10f4
 80012dc:	617b      	str	r3, [r7, #20]
                          |LED_E_Pin|LED_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	480b      	ldr	r0, [pc, #44]	@ (8001320 <MX_GPIO_Init+0x154>)
 80012f2:	f002 f8d3 	bl	800349c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT_Flash_Pin;
 80012f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT_Flash_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4805      	ldr	r0, [pc, #20]	@ (8001320 <MX_GPIO_Init+0x154>)
 800130c:	f002 f8c6 	bl	800349c <HAL_GPIO_Init>

}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	@ 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40021000 	.word	0x40021000
 800131c:	48000800 	.word	0x48000800
 8001320:	48000400 	.word	0x48000400
 8001324:	48001800 	.word	0x48001800

08001328 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr){
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8001330:	1d39      	adds	r1, r7, #4
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	2201      	movs	r2, #1
 8001338:	4803      	ldr	r0, [pc, #12]	@ (8001348 <__io_putchar+0x20>)
 800133a:	f004 fae9 	bl	8005910 <HAL_UART_Transmit>
	return chr;
 800133e:	687b      	ldr	r3, [r7, #4]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200003f8 	.word	0x200003f8

0800134c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001350:	f000 ff19 	bl	8002186 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001354:	f000 f824 	bl	80013a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001358:	f7ff ff38 	bl	80011cc <MX_GPIO_Init>
  MX_ADC1_Init();
 800135c:	f7ff fe6a 	bl	8001034 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001360:	f000 f862 	bl	8001428 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001364:	f000 fa0e 	bl	8001784 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001368:	f000 faac 	bl	80018c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800136c:	f000 fb0e 	bl	800198c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001370:	f000 fb62 	bl	8001a38 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001374:	f000 fdae 	bl	8001ed4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001378:	f000 fdf8 	bl	8001f6c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Start_Motors();
 800137c:	f000 fd08 	bl	8001d90 <Start_Motors>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Motor_SetSpeed(20);
 8001380:	2014      	movs	r0, #20
 8001382:	f000 fd1b 	bl	8001dbc <Motor_SetSpeed>
	  HAL_Delay(10000);
 8001386:	f242 7010 	movw	r0, #10000	@ 0x2710
 800138a:	f000 ff6d 	bl	8002268 <HAL_Delay>
	  Motor_SetSpeed(100);
 800138e:	2064      	movs	r0, #100	@ 0x64
 8001390:	f000 fd14 	bl	8001dbc <Motor_SetSpeed>
	  HAL_Delay(10000);
 8001394:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001398:	f000 ff66 	bl	8002268 <HAL_Delay>
  {
 800139c:	bf00      	nop
 800139e:	e7ef      	b.n	8001380 <main+0x34>

080013a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b094      	sub	sp, #80	@ 0x50
 80013a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a6:	f107 0318 	add.w	r3, r7, #24
 80013aa:	2238      	movs	r2, #56	@ 0x38
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f006 f8bb 	bl	800752a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013c6:	f002 fa03 	bl	80037d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ca:	2301      	movs	r3, #1
 80013cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d8:	f107 0318 	add.w	r3, r7, #24
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 faab 	bl	8003938 <HAL_RCC_OscConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x4c>
  {
    Error_Handler();
 80013e8:	f000 f818 	bl	800141c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ec:	230f      	movs	r3, #15
 80013ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80013f0:	2302      	movs	r3, #2
 80013f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fda9 	bl	8003f5c <HAL_RCC_ClockConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001410:	f000 f804 	bl	800141c <Error_Handler>
  }
}
 8001414:	bf00      	nop
 8001416:	3750      	adds	r7, #80	@ 0x50
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
}
 8001422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <Error_Handler+0x8>

08001428 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800142c:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <MX_SPI2_Init+0x74>)
 800142e:	4a1c      	ldr	r2, [pc, #112]	@ (80014a0 <MX_SPI2_Init+0x78>)
 8001430:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001432:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <MX_SPI2_Init+0x74>)
 8001434:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001438:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800143a:	4b18      	ldr	r3, [pc, #96]	@ (800149c <MX_SPI2_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001440:	4b16      	ldr	r3, [pc, #88]	@ (800149c <MX_SPI2_Init+0x74>)
 8001442:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001446:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001448:	4b14      	ldr	r3, [pc, #80]	@ (800149c <MX_SPI2_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800144e:	4b13      	ldr	r3, [pc, #76]	@ (800149c <MX_SPI2_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <MX_SPI2_Init+0x74>)
 8001456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800145a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800145c:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <MX_SPI2_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <MX_SPI2_Init+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <MX_SPI2_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800146e:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <MX_SPI2_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <MX_SPI2_Init+0x74>)
 8001476:	2207      	movs	r2, #7
 8001478:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <MX_SPI2_Init+0x74>)
 800147c:	2200      	movs	r2, #0
 800147e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <MX_SPI2_Init+0x74>)
 8001482:	2208      	movs	r2, #8
 8001484:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_SPI2_Init+0x74>)
 8001488:	f003 f970 	bl	800476c <HAL_SPI_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001492:	f7ff ffc3 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000025c 	.word	0x2000025c
 80014a0:	40003800 	.word	0x40003800

080014a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a17      	ldr	r2, [pc, #92]	@ (8001520 <HAL_SPI_MspInit+0x7c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d128      	bne.n	8001518 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014c6:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <HAL_SPI_MspInit+0x80>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ca:	4a16      	ldr	r2, [pc, #88]	@ (8001524 <HAL_SPI_MspInit+0x80>)
 80014cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014d2:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <HAL_SPI_MspInit+0x80>)
 80014d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <HAL_SPI_MspInit+0x80>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	4a10      	ldr	r2, [pc, #64]	@ (8001524 <HAL_SPI_MspInit+0x80>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <HAL_SPI_MspInit+0x80>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_TO_SCLK_ACC_Pin|SPI2_MISO_TO_SDO_ACC_Pin|SPI2_MOSI_TO_SDI_ACC_Pin;
 80014f6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80014fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001508:	2305      	movs	r3, #5
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4805      	ldr	r0, [pc, #20]	@ (8001528 <HAL_SPI_MspInit+0x84>)
 8001514:	f001 ffc2 	bl	800349c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001518:	bf00      	nop
 800151a:	3728      	adds	r7, #40	@ 0x28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40003800 	.word	0x40003800
 8001524:	40021000 	.word	0x40021000
 8001528:	48000400 	.word	0x48000400

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	4b0f      	ldr	r3, [pc, #60]	@ (8001570 <HAL_MspInit+0x44>)
 8001534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001536:	4a0e      	ldr	r2, [pc, #56]	@ (8001570 <HAL_MspInit+0x44>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6613      	str	r3, [r2, #96]	@ 0x60
 800153e:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <HAL_MspInit+0x44>)
 8001540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <HAL_MspInit+0x44>)
 800154c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154e:	4a08      	ldr	r2, [pc, #32]	@ (8001570 <HAL_MspInit+0x44>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001554:	6593      	str	r3, [r2, #88]	@ 0x58
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <HAL_MspInit+0x44>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001562:	f002 f9d9 	bl	8003918 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <NMI_Handler+0x4>

0800157c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <HardFault_Handler+0x4>

08001584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <MemManage_Handler+0x4>

0800158c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <BusFault_Handler+0x4>

08001594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <UsageFault_Handler+0x4>

0800159c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ca:	f000 fe2f 	bl	800222c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  return 1;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <_kill>:

int _kill(int pid, int sig)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ec:	f005 fff0 	bl	80075d0 <__errno>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2216      	movs	r2, #22
 80015f4:	601a      	str	r2, [r3, #0]
  return -1;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <_exit>:

void _exit (int status)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800160a:	f04f 31ff 	mov.w	r1, #4294967295
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ffe7 	bl	80015e2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <_exit+0x12>

08001618 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	e00a      	b.n	8001640 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800162a:	f3af 8000 	nop.w
 800162e:	4601      	mov	r1, r0
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	60ba      	str	r2, [r7, #8]
 8001636:	b2ca      	uxtb	r2, r1
 8001638:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3301      	adds	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	429a      	cmp	r2, r3
 8001646:	dbf0      	blt.n	800162a <_read+0x12>
  }

  return len;
 8001648:	687b      	ldr	r3, [r7, #4]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	e009      	b.n	8001678 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	60ba      	str	r2, [r7, #8]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fe5b 	bl	8001328 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	3301      	adds	r3, #1
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	429a      	cmp	r2, r3
 800167e:	dbf1      	blt.n	8001664 <_write+0x12>
  }
  return len;
 8001680:	687b      	ldr	r3, [r7, #4]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <_close>:

int _close(int file)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016b2:	605a      	str	r2, [r3, #4]
  return 0;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <_isatty>:

int _isatty(int file)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016fc:	4a14      	ldr	r2, [pc, #80]	@ (8001750 <_sbrk+0x5c>)
 80016fe:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <_sbrk+0x60>)
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001708:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001710:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <_sbrk+0x64>)
 8001712:	4a12      	ldr	r2, [pc, #72]	@ (800175c <_sbrk+0x68>)
 8001714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001716:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	429a      	cmp	r2, r3
 8001722:	d207      	bcs.n	8001734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001724:	f005 ff54 	bl	80075d0 <__errno>
 8001728:	4603      	mov	r3, r0
 800172a:	220c      	movs	r2, #12
 800172c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	e009      	b.n	8001748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800173a:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	4a05      	ldr	r2, [pc, #20]	@ (8001758 <_sbrk+0x64>)
 8001744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20008000 	.word	0x20008000
 8001754:	00000400 	.word	0x00000400
 8001758:	200002c0 	.word	0x200002c0
 800175c:	20000670 	.word	0x20000670

08001760 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <SystemInit+0x20>)
 8001766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800176a:	4a05      	ldr	r2, [pc, #20]	@ (8001780 <SystemInit+0x20>)
 800176c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001770:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b098      	sub	sp, #96	@ 0x60
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001796:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]
 80017a6:	615a      	str	r2, [r3, #20]
 80017a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2234      	movs	r2, #52	@ 0x34
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f005 feba 	bl	800752a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017b6:	4b41      	ldr	r3, [pc, #260]	@ (80018bc <MX_TIM1_Init+0x138>)
 80017b8:	4a41      	ldr	r2, [pc, #260]	@ (80018c0 <MX_TIM1_Init+0x13c>)
 80017ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017bc:	4b3f      	ldr	r3, [pc, #252]	@ (80018bc <MX_TIM1_Init+0x138>)
 80017be:	2200      	movs	r2, #0
 80017c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c2:	4b3e      	ldr	r3, [pc, #248]	@ (80018bc <MX_TIM1_Init+0x138>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017c8:	4b3c      	ldr	r3, [pc, #240]	@ (80018bc <MX_TIM1_Init+0x138>)
 80017ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d0:	4b3a      	ldr	r3, [pc, #232]	@ (80018bc <MX_TIM1_Init+0x138>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017d6:	4b39      	ldr	r3, [pc, #228]	@ (80018bc <MX_TIM1_Init+0x138>)
 80017d8:	2200      	movs	r2, #0
 80017da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017dc:	4b37      	ldr	r3, [pc, #220]	@ (80018bc <MX_TIM1_Init+0x138>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017e2:	4836      	ldr	r0, [pc, #216]	@ (80018bc <MX_TIM1_Init+0x138>)
 80017e4:	f003 f86d 	bl	80048c2 <HAL_TIM_PWM_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80017ee:	f7ff fe15 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001802:	4619      	mov	r1, r3
 8001804:	482d      	ldr	r0, [pc, #180]	@ (80018bc <MX_TIM1_Init+0x138>)
 8001806:	f003 ff25 	bl	8005654 <HAL_TIMEx_MasterConfigSynchronization>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001810:	f7ff fe04 	bl	800141c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001814:	2360      	movs	r3, #96	@ 0x60
 8001816:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800181c:	2300      	movs	r3, #0
 800181e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001820:	2300      	movs	r3, #0
 8001822:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001828:	2300      	movs	r3, #0
 800182a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800182c:	2300      	movs	r3, #0
 800182e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001830:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001834:	2200      	movs	r2, #0
 8001836:	4619      	mov	r1, r3
 8001838:	4820      	ldr	r0, [pc, #128]	@ (80018bc <MX_TIM1_Init+0x138>)
 800183a:	f003 fa3f 	bl	8004cbc <HAL_TIM_PWM_ConfigChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001844:	f7ff fdea 	bl	800141c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001848:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800184c:	2204      	movs	r2, #4
 800184e:	4619      	mov	r1, r3
 8001850:	481a      	ldr	r0, [pc, #104]	@ (80018bc <MX_TIM1_Init+0x138>)
 8001852:	f003 fa33 	bl	8004cbc <HAL_TIM_PWM_ConfigChannel>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800185c:	f7ff fdde 	bl	800141c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001874:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001878:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001886:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800188a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001890:	2300      	movs	r3, #0
 8001892:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	4619      	mov	r1, r3
 800189c:	4807      	ldr	r0, [pc, #28]	@ (80018bc <MX_TIM1_Init+0x138>)
 800189e:	f003 ff5b 	bl	8005758 <HAL_TIMEx_ConfigBreakDeadTime>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80018a8:	f7ff fdb8 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018ac:	4803      	ldr	r0, [pc, #12]	@ (80018bc <MX_TIM1_Init+0x138>)
 80018ae:	f000 f9ed 	bl	8001c8c <HAL_TIM_MspPostInit>

}
 80018b2:	bf00      	nop
 80018b4:	3760      	adds	r7, #96	@ 0x60
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200002c4 	.word	0x200002c4
 80018c0:	40012c00 	.word	0x40012c00

080018c4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	@ 0x28
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d6:	463b      	mov	r3, r7
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
 80018e4:	615a      	str	r2, [r3, #20]
 80018e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018e8:	4b27      	ldr	r3, [pc, #156]	@ (8001988 <MX_TIM2_Init+0xc4>)
 80018ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018f0:	4b25      	ldr	r3, [pc, #148]	@ (8001988 <MX_TIM2_Init+0xc4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f6:	4b24      	ldr	r3, [pc, #144]	@ (8001988 <MX_TIM2_Init+0xc4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80018fc:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <MX_TIM2_Init+0xc4>)
 80018fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001902:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001904:	4b20      	ldr	r3, [pc, #128]	@ (8001988 <MX_TIM2_Init+0xc4>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190a:	4b1f      	ldr	r3, [pc, #124]	@ (8001988 <MX_TIM2_Init+0xc4>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001910:	481d      	ldr	r0, [pc, #116]	@ (8001988 <MX_TIM2_Init+0xc4>)
 8001912:	f002 ffd6 	bl	80048c2 <HAL_TIM_PWM_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800191c:	f7ff fd7e 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	4619      	mov	r1, r3
 800192e:	4816      	ldr	r0, [pc, #88]	@ (8001988 <MX_TIM2_Init+0xc4>)
 8001930:	f003 fe90 	bl	8005654 <HAL_TIMEx_MasterConfigSynchronization>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800193a:	f7ff fd6f 	bl	800141c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800193e:	2360      	movs	r3, #96	@ 0x60
 8001940:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800194e:	463b      	mov	r3, r7
 8001950:	2200      	movs	r2, #0
 8001952:	4619      	mov	r1, r3
 8001954:	480c      	ldr	r0, [pc, #48]	@ (8001988 <MX_TIM2_Init+0xc4>)
 8001956:	f003 f9b1 	bl	8004cbc <HAL_TIM_PWM_ConfigChannel>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001960:	f7ff fd5c 	bl	800141c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001964:	463b      	mov	r3, r7
 8001966:	2204      	movs	r2, #4
 8001968:	4619      	mov	r1, r3
 800196a:	4807      	ldr	r0, [pc, #28]	@ (8001988 <MX_TIM2_Init+0xc4>)
 800196c:	f003 f9a6 	bl	8004cbc <HAL_TIM_PWM_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001976:	f7ff fd51 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800197a:	4803      	ldr	r0, [pc, #12]	@ (8001988 <MX_TIM2_Init+0xc4>)
 800197c:	f000 f986 	bl	8001c8c <HAL_TIM_MspPostInit>

}
 8001980:	bf00      	nop
 8001982:	3728      	adds	r7, #40	@ 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000310 	.word	0x20000310

0800198c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	@ 0x30
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001992:	f107 030c 	add.w	r3, r7, #12
 8001996:	2224      	movs	r2, #36	@ 0x24
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f005 fdc5 	bl	800752a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a0:	463b      	mov	r3, r7
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019aa:	4b21      	ldr	r3, [pc, #132]	@ (8001a30 <MX_TIM3_Init+0xa4>)
 80019ac:	4a21      	ldr	r2, [pc, #132]	@ (8001a34 <MX_TIM3_Init+0xa8>)
 80019ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a30 <MX_TIM3_Init+0xa4>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a30 <MX_TIM3_Init+0xa4>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a30 <MX_TIM3_Init+0xa4>)
 80019be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a30 <MX_TIM3_Init+0xa4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ca:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <MX_TIM3_Init+0xa4>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80019d0:	2301      	movs	r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019d8:	2301      	movs	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019e8:	2301      	movs	r3, #1
 80019ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	4619      	mov	r1, r3
 80019fa:	480d      	ldr	r0, [pc, #52]	@ (8001a30 <MX_TIM3_Init+0xa4>)
 80019fc:	f003 f8b8 	bl	8004b70 <HAL_TIM_Encoder_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001a06:	f7ff fd09 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a12:	463b      	mov	r3, r7
 8001a14:	4619      	mov	r1, r3
 8001a16:	4806      	ldr	r0, [pc, #24]	@ (8001a30 <MX_TIM3_Init+0xa4>)
 8001a18:	f003 fe1c 	bl	8005654 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001a22:	f7ff fcfb 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	3730      	adds	r7, #48	@ 0x30
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	2000035c 	.word	0x2000035c
 8001a34:	40000400 	.word	0x40000400

08001a38 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b094      	sub	sp, #80	@ 0x50
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a42:	2224      	movs	r2, #36	@ 0x24
 8001a44:	2100      	movs	r1, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f005 fd6f 	bl	800752a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4c:	f107 0320 	add.w	r3, r7, #32
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	615a      	str	r2, [r3, #20]
 8001a68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a6a:	4b30      	ldr	r3, [pc, #192]	@ (8001b2c <MX_TIM4_Init+0xf4>)
 8001a6c:	4a30      	ldr	r2, [pc, #192]	@ (8001b30 <MX_TIM4_Init+0xf8>)
 8001a6e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a70:	4b2e      	ldr	r3, [pc, #184]	@ (8001b2c <MX_TIM4_Init+0xf4>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a76:	4b2d      	ldr	r3, [pc, #180]	@ (8001b2c <MX_TIM4_Init+0xf4>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b2c <MX_TIM4_Init+0xf4>)
 8001a7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a82:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a84:	4b29      	ldr	r3, [pc, #164]	@ (8001b2c <MX_TIM4_Init+0xf4>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8a:	4b28      	ldr	r3, [pc, #160]	@ (8001b2c <MX_TIM4_Init+0xf4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a90:	4826      	ldr	r0, [pc, #152]	@ (8001b2c <MX_TIM4_Init+0xf4>)
 8001a92:	f002 ff16 	bl	80048c2 <HAL_TIM_PWM_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001a9c:	f7ff fcbe 	bl	800141c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC1Filter = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.IC2Filter = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ac4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4818      	ldr	r0, [pc, #96]	@ (8001b2c <MX_TIM4_Init+0xf4>)
 8001acc:	f003 f850 	bl	8004b70 <HAL_TIM_Encoder_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8001ad6:	f7ff fca1 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ae2:	f107 0320 	add.w	r3, r7, #32
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4810      	ldr	r0, [pc, #64]	@ (8001b2c <MX_TIM4_Init+0xf4>)
 8001aea:	f003 fdb3 	bl	8005654 <HAL_TIMEx_MasterConfigSynchronization>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8001af4:	f7ff fc92 	bl	800141c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af8:	2360      	movs	r3, #96	@ 0x60
 8001afa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4807      	ldr	r0, [pc, #28]	@ (8001b2c <MX_TIM4_Init+0xf4>)
 8001b10:	f003 f8d4 	bl	8004cbc <HAL_TIM_PWM_ConfigChannel>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8001b1a:	f7ff fc7f 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b1e:	4803      	ldr	r0, [pc, #12]	@ (8001b2c <MX_TIM4_Init+0xf4>)
 8001b20:	f000 f8b4 	bl	8001c8c <HAL_TIM_MspPostInit>

}
 8001b24:	bf00      	nop
 8001b26:	3750      	adds	r7, #80	@ 0x50
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200003a8 	.word	0x200003a8
 8001b30:	40000800 	.word	0x40000800

08001b34 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	@ 0x30
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a2a      	ldr	r2, [pc, #168]	@ (8001bfc <HAL_TIM_PWM_MspInit+0xc8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d10c      	bne.n	8001b70 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b56:	4b2a      	ldr	r3, [pc, #168]	@ (8001c00 <HAL_TIM_PWM_MspInit+0xcc>)
 8001b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b5a:	4a29      	ldr	r2, [pc, #164]	@ (8001c00 <HAL_TIM_PWM_MspInit+0xcc>)
 8001b5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b60:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b62:	4b27      	ldr	r3, [pc, #156]	@ (8001c00 <HAL_TIM_PWM_MspInit+0xcc>)
 8001b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b6a:	61bb      	str	r3, [r7, #24]
 8001b6c:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b6e:	e040      	b.n	8001bf2 <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b78:	d10c      	bne.n	8001b94 <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b7a:	4b21      	ldr	r3, [pc, #132]	@ (8001c00 <HAL_TIM_PWM_MspInit+0xcc>)
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7e:	4a20      	ldr	r2, [pc, #128]	@ (8001c00 <HAL_TIM_PWM_MspInit+0xcc>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b86:	4b1e      	ldr	r3, [pc, #120]	@ (8001c00 <HAL_TIM_PWM_MspInit+0xcc>)
 8001b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697b      	ldr	r3, [r7, #20]
}
 8001b92:	e02e      	b.n	8001bf2 <HAL_TIM_PWM_MspInit+0xbe>
  else if(tim_pwmHandle->Instance==TIM4)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a1a      	ldr	r2, [pc, #104]	@ (8001c04 <HAL_TIM_PWM_MspInit+0xd0>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d129      	bne.n	8001bf2 <HAL_TIM_PWM_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b9e:	4b18      	ldr	r3, [pc, #96]	@ (8001c00 <HAL_TIM_PWM_MspInit+0xcc>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba2:	4a17      	ldr	r2, [pc, #92]	@ (8001c00 <HAL_TIM_PWM_MspInit+0xcc>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001baa:	4b15      	ldr	r3, [pc, #84]	@ (8001c00 <HAL_TIM_PWM_MspInit+0xcc>)
 8001bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	4b12      	ldr	r3, [pc, #72]	@ (8001c00 <HAL_TIM_PWM_MspInit+0xcc>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bba:	4a11      	ldr	r2, [pc, #68]	@ (8001c00 <HAL_TIM_PWM_MspInit+0xcc>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c00 <HAL_TIM_PWM_MspInit+0xcc>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001bce:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001be0:	230a      	movs	r3, #10
 8001be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	4619      	mov	r1, r3
 8001bea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bee:	f001 fc55 	bl	800349c <HAL_GPIO_Init>
}
 8001bf2:	bf00      	nop
 8001bf4:	3730      	adds	r7, #48	@ 0x30
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40012c00 	.word	0x40012c00
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40000800 	.word	0x40000800

08001c08 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a17      	ldr	r2, [pc, #92]	@ (8001c84 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d128      	bne.n	8001c7c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c2a:	4b17      	ldr	r3, [pc, #92]	@ (8001c88 <HAL_TIM_Encoder_MspInit+0x80>)
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2e:	4a16      	ldr	r2, [pc, #88]	@ (8001c88 <HAL_TIM_Encoder_MspInit+0x80>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c36:	4b14      	ldr	r3, [pc, #80]	@ (8001c88 <HAL_TIM_Encoder_MspInit+0x80>)
 8001c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	4b11      	ldr	r3, [pc, #68]	@ (8001c88 <HAL_TIM_Encoder_MspInit+0x80>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c46:	4a10      	ldr	r2, [pc, #64]	@ (8001c88 <HAL_TIM_Encoder_MspInit+0x80>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c88 <HAL_TIM_Encoder_MspInit+0x80>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001c5a:	2350      	movs	r3, #80	@ 0x50
 8001c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c78:	f001 fc10 	bl	800349c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	3728      	adds	r7, #40	@ 0x28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40000400 	.word	0x40000400
 8001c88:	40021000 	.word	0x40021000

08001c8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	@ 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a35      	ldr	r2, [pc, #212]	@ (8001d80 <HAL_TIM_MspPostInit+0xf4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d11e      	bne.n	8001cec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	4b35      	ldr	r3, [pc, #212]	@ (8001d84 <HAL_TIM_MspPostInit+0xf8>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb2:	4a34      	ldr	r2, [pc, #208]	@ (8001d84 <HAL_TIM_MspPostInit+0xf8>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cba:	4b32      	ldr	r3, [pc, #200]	@ (8001d84 <HAL_TIM_MspPostInit+0xf8>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cc6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001cd8:	2306      	movs	r3, #6
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ce6:	f001 fbd9 	bl	800349c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001cea:	e044      	b.n	8001d76 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cf4:	d11d      	bne.n	8001d32 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <HAL_TIM_MspPostInit+0xf8>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfa:	4a22      	ldr	r2, [pc, #136]	@ (8001d84 <HAL_TIM_MspPostInit+0xf8>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d02:	4b20      	ldr	r3, [pc, #128]	@ (8001d84 <HAL_TIM_MspPostInit+0xf8>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	4619      	mov	r1, r3
 8001d28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d2c:	f001 fbb6 	bl	800349c <HAL_GPIO_Init>
}
 8001d30:	e021      	b.n	8001d76 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM4)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a14      	ldr	r2, [pc, #80]	@ (8001d88 <HAL_TIM_MspPostInit+0xfc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d11c      	bne.n	8001d76 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3c:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <HAL_TIM_MspPostInit+0xf8>)
 8001d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d40:	4a10      	ldr	r2, [pc, #64]	@ (8001d84 <HAL_TIM_MspPostInit+0xf8>)
 8001d42:	f043 0302 	orr.w	r3, r3, #2
 8001d46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d48:	4b0e      	ldr	r3, [pc, #56]	@ (8001d84 <HAL_TIM_MspPostInit+0xf8>)
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_CH4_M_SCTR_LIDAR_Pin;
 8001d54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d66:	2302      	movs	r3, #2
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM4_CH4_M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4806      	ldr	r0, [pc, #24]	@ (8001d8c <HAL_TIM_MspPostInit+0x100>)
 8001d72:	f001 fb93 	bl	800349c <HAL_GPIO_Init>
}
 8001d76:	bf00      	nop
 8001d78:	3728      	adds	r7, #40	@ 0x28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40012c00 	.word	0x40012c00
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40000800 	.word	0x40000800
 8001d8c:	48000400 	.word	0x48000400

08001d90 <Start_Motors>:
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
    TIM1->CCR1 = 0;
    TIM1->CCR2 = 0;
}

void Start_Motors(void) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d94:	2100      	movs	r1, #0
 8001d96:	4807      	ldr	r0, [pc, #28]	@ (8001db4 <Start_Motors+0x24>)
 8001d98:	f002 fdea 	bl	8004970 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001d9c:	2104      	movs	r1, #4
 8001d9e:	4805      	ldr	r0, [pc, #20]	@ (8001db4 <Start_Motors+0x24>)
 8001da0:	f002 fde6 	bl	8004970 <HAL_TIM_PWM_Start>
    TIM1->CCR1 = 0;
 8001da4:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <Start_Motors+0x28>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = 0;
 8001daa:	4b03      	ldr	r3, [pc, #12]	@ (8001db8 <Start_Motors+0x28>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200002c4 	.word	0x200002c4
 8001db8:	40012c00 	.word	0x40012c00

08001dbc <Motor_SetSpeed>:

void Reset_Encoder(TIM_HandleTypeDef *htim) {
    __HAL_TIM_SET_COUNTER(htim, 0);    // Réinitialiser le compteur
}

void Motor_SetSpeed(int percentage) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
    static int currentSpeed = 0;  // Maintenir la vitesse actuelle
    int step = (percentage > currentSpeed) ? 1 : -1; // Déterminer le pas (incrément ou décrément)
 8001dc4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ec4 <Motor_SetSpeed+0x108>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	dd01      	ble.n	8001dd2 <Motor_SetSpeed+0x16>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e001      	b.n	8001dd6 <Motor_SetSpeed+0x1a>
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd6:	60fb      	str	r3, [r7, #12]

    // Limiter la cible au pourcentage maximal autorisé
    if (percentage > 100) percentage = 100;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b64      	cmp	r3, #100	@ 0x64
 8001ddc:	dd01      	ble.n	8001de2 <Motor_SetSpeed+0x26>
 8001dde:	2364      	movs	r3, #100	@ 0x64
 8001de0:	607b      	str	r3, [r7, #4]
    if (percentage < -100) percentage = -100;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001de8:	da61      	bge.n	8001eae <Motor_SetSpeed+0xf2>
 8001dea:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001dee:	607b      	str	r3, [r7, #4]

    // Effectuer un ramp-up ou ramp-down jusqu'à la vitesse cible
    while (currentSpeed != percentage) {
 8001df0:	e05d      	b.n	8001eae <Motor_SetSpeed+0xf2>
        currentSpeed += step;
 8001df2:	4b34      	ldr	r3, [pc, #208]	@ (8001ec4 <Motor_SetSpeed+0x108>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4413      	add	r3, r2
 8001dfa:	4a32      	ldr	r2, [pc, #200]	@ (8001ec4 <Motor_SetSpeed+0x108>)
 8001dfc:	6013      	str	r3, [r2, #0]

        if (currentSpeed > 0) {
 8001dfe:	4b31      	ldr	r3, [pc, #196]	@ (8001ec4 <Motor_SetSpeed+0x108>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	dd1c      	ble.n	8001e40 <Motor_SetSpeed+0x84>
            // Motor Forward
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); // Stop Reverse
 8001e06:	2200      	movs	r2, #0
 8001e08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e10:	f001 fcc6 	bl	80037a0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);   // Start Forward
 8001e14:	2201      	movs	r2, #1
 8001e16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e1e:	f001 fcbf 	bl	80037a0 <HAL_GPIO_WritePin>
            TIM1->CCR1 = (8499 * currentSpeed) / 100;             // Ajuster le rapport cyclique sur CCR1
 8001e22:	4b28      	ldr	r3, [pc, #160]	@ (8001ec4 <Motor_SetSpeed+0x108>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f242 1233 	movw	r2, #8499	@ 0x2133
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	4a26      	ldr	r2, [pc, #152]	@ (8001ec8 <Motor_SetSpeed+0x10c>)
 8001e30:	fb82 1203 	smull	r1, r2, r2, r3
 8001e34:	1152      	asrs	r2, r2, #5
 8001e36:	17db      	asrs	r3, r3, #31
 8001e38:	1ad2      	subs	r2, r2, r3
 8001e3a:	4b24      	ldr	r3, [pc, #144]	@ (8001ecc <Motor_SetSpeed+0x110>)
 8001e3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e3e:	e033      	b.n	8001ea8 <Motor_SetSpeed+0xec>
        } else if (currentSpeed < 0) {
 8001e40:	4b20      	ldr	r3, [pc, #128]	@ (8001ec4 <Motor_SetSpeed+0x108>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	da1b      	bge.n	8001e80 <Motor_SetSpeed+0xc4>
            // Motor Reverse
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // Stop Forward
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e52:	f001 fca5 	bl	80037a0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);   // Start Reverse
 8001e56:	2201      	movs	r2, #1
 8001e58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e60:	f001 fc9e 	bl	80037a0 <HAL_GPIO_WritePin>
            TIM1->CCR2 = (8499 * -currentSpeed) / 100;            // Ajuster le rapport cyclique sur CCR2
 8001e64:	4b17      	ldr	r3, [pc, #92]	@ (8001ec4 <Motor_SetSpeed+0x108>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a19      	ldr	r2, [pc, #100]	@ (8001ed0 <Motor_SetSpeed+0x114>)
 8001e6a:	fb02 f303 	mul.w	r3, r2, r3
 8001e6e:	4a16      	ldr	r2, [pc, #88]	@ (8001ec8 <Motor_SetSpeed+0x10c>)
 8001e70:	fb82 1203 	smull	r1, r2, r2, r3
 8001e74:	1152      	asrs	r2, r2, #5
 8001e76:	17db      	asrs	r3, r3, #31
 8001e78:	1ad2      	subs	r2, r2, r3
 8001e7a:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <Motor_SetSpeed+0x110>)
 8001e7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e7e:	e013      	b.n	8001ea8 <Motor_SetSpeed+0xec>
        } else {
            // Stop both directions
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001e80:	2200      	movs	r2, #0
 8001e82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e8a:	f001 fc89 	bl	80037a0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e98:	f001 fc82 	bl	80037a0 <HAL_GPIO_WritePin>
            TIM1->CCR1 = 0;  // Désactiver Forward
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <Motor_SetSpeed+0x110>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	635a      	str	r2, [r3, #52]	@ 0x34
            TIM1->CCR2 = 0;  // Désactiver Reverse
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <Motor_SetSpeed+0x110>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	639a      	str	r2, [r3, #56]	@ 0x38
        }

        // Délai pour un changement progressif
        HAL_Delay(10);
 8001ea8:	200a      	movs	r0, #10
 8001eaa:	f000 f9dd 	bl	8002268 <HAL_Delay>
    while (currentSpeed != percentage) {
 8001eae:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <Motor_SetSpeed+0x108>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d19c      	bne.n	8001df2 <Motor_SetSpeed+0x36>
    }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200003f4 	.word	0x200003f4
 8001ec8:	51eb851f 	.word	0x51eb851f
 8001ecc:	40012c00 	.word	0x40012c00
 8001ed0:	ffffdecd 	.word	0xffffdecd

08001ed4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ed8:	4b22      	ldr	r3, [pc, #136]	@ (8001f64 <MX_USART2_UART_Init+0x90>)
 8001eda:	4a23      	ldr	r2, [pc, #140]	@ (8001f68 <MX_USART2_UART_Init+0x94>)
 8001edc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ede:	4b21      	ldr	r3, [pc, #132]	@ (8001f64 <MX_USART2_UART_Init+0x90>)
 8001ee0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ee4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f64 <MX_USART2_UART_Init+0x90>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001eec:	4b1d      	ldr	r3, [pc, #116]	@ (8001f64 <MX_USART2_UART_Init+0x90>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f64 <MX_USART2_UART_Init+0x90>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f64 <MX_USART2_UART_Init+0x90>)
 8001efa:	220c      	movs	r2, #12
 8001efc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efe:	4b19      	ldr	r3, [pc, #100]	@ (8001f64 <MX_USART2_UART_Init+0x90>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f04:	4b17      	ldr	r3, [pc, #92]	@ (8001f64 <MX_USART2_UART_Init+0x90>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f0a:	4b16      	ldr	r3, [pc, #88]	@ (8001f64 <MX_USART2_UART_Init+0x90>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f10:	4b14      	ldr	r3, [pc, #80]	@ (8001f64 <MX_USART2_UART_Init+0x90>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f16:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <MX_USART2_UART_Init+0x90>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f1c:	4811      	ldr	r0, [pc, #68]	@ (8001f64 <MX_USART2_UART_Init+0x90>)
 8001f1e:	f003 fca7 	bl	8005870 <HAL_UART_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001f28:	f7ff fa78 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	480d      	ldr	r0, [pc, #52]	@ (8001f64 <MX_USART2_UART_Init+0x90>)
 8001f30:	f004 faa0 	bl	8006474 <HAL_UARTEx_SetTxFifoThreshold>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001f3a:	f7ff fa6f 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4808      	ldr	r0, [pc, #32]	@ (8001f64 <MX_USART2_UART_Init+0x90>)
 8001f42:	f004 fad5 	bl	80064f0 <HAL_UARTEx_SetRxFifoThreshold>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f4c:	f7ff fa66 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f50:	4804      	ldr	r0, [pc, #16]	@ (8001f64 <MX_USART2_UART_Init+0x90>)
 8001f52:	f004 fa56 	bl	8006402 <HAL_UARTEx_DisableFifoMode>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f5c:	f7ff fa5e 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200003f8 	.word	0x200003f8
 8001f68:	40004400 	.word	0x40004400

08001f6c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f70:	4b22      	ldr	r3, [pc, #136]	@ (8001ffc <MX_USART3_UART_Init+0x90>)
 8001f72:	4a23      	ldr	r2, [pc, #140]	@ (8002000 <MX_USART3_UART_Init+0x94>)
 8001f74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f76:	4b21      	ldr	r3, [pc, #132]	@ (8001ffc <MX_USART3_UART_Init+0x90>)
 8001f78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ffc <MX_USART3_UART_Init+0x90>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f84:	4b1d      	ldr	r3, [pc, #116]	@ (8001ffc <MX_USART3_UART_Init+0x90>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ffc <MX_USART3_UART_Init+0x90>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f90:	4b1a      	ldr	r3, [pc, #104]	@ (8001ffc <MX_USART3_UART_Init+0x90>)
 8001f92:	220c      	movs	r2, #12
 8001f94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f96:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <MX_USART3_UART_Init+0x90>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f9c:	4b17      	ldr	r3, [pc, #92]	@ (8001ffc <MX_USART3_UART_Init+0x90>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fa2:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <MX_USART3_UART_Init+0x90>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fa8:	4b14      	ldr	r3, [pc, #80]	@ (8001ffc <MX_USART3_UART_Init+0x90>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fae:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <MX_USART3_UART_Init+0x90>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fb4:	4811      	ldr	r0, [pc, #68]	@ (8001ffc <MX_USART3_UART_Init+0x90>)
 8001fb6:	f003 fc5b 	bl	8005870 <HAL_UART_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001fc0:	f7ff fa2c 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	480d      	ldr	r0, [pc, #52]	@ (8001ffc <MX_USART3_UART_Init+0x90>)
 8001fc8:	f004 fa54 	bl	8006474 <HAL_UARTEx_SetTxFifoThreshold>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001fd2:	f7ff fa23 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4808      	ldr	r0, [pc, #32]	@ (8001ffc <MX_USART3_UART_Init+0x90>)
 8001fda:	f004 fa89 	bl	80064f0 <HAL_UARTEx_SetRxFifoThreshold>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001fe4:	f7ff fa1a 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001fe8:	4804      	ldr	r0, [pc, #16]	@ (8001ffc <MX_USART3_UART_Init+0x90>)
 8001fea:	f004 fa0a 	bl	8006402 <HAL_UARTEx_DisableFifoMode>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ff4:	f7ff fa12 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	2000048c 	.word	0x2000048c
 8002000:	40004800 	.word	0x40004800

08002004 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b09c      	sub	sp, #112	@ 0x70
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800201c:	f107 0318 	add.w	r3, r7, #24
 8002020:	2244      	movs	r2, #68	@ 0x44
 8002022:	2100      	movs	r1, #0
 8002024:	4618      	mov	r0, r3
 8002026:	f005 fa80 	bl	800752a <memset>
  if(uartHandle->Instance==USART2)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a3d      	ldr	r2, [pc, #244]	@ (8002124 <HAL_UART_MspInit+0x120>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d137      	bne.n	80020a4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002034:	2302      	movs	r3, #2
 8002036:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002038:	2300      	movs	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800203c:	f107 0318 	add.w	r3, r7, #24
 8002040:	4618      	mov	r0, r3
 8002042:	f002 f9a3 	bl	800438c <HAL_RCCEx_PeriphCLKConfig>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800204c:	f7ff f9e6 	bl	800141c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002050:	4b35      	ldr	r3, [pc, #212]	@ (8002128 <HAL_UART_MspInit+0x124>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002054:	4a34      	ldr	r2, [pc, #208]	@ (8002128 <HAL_UART_MspInit+0x124>)
 8002056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800205a:	6593      	str	r3, [r2, #88]	@ 0x58
 800205c:	4b32      	ldr	r3, [pc, #200]	@ (8002128 <HAL_UART_MspInit+0x124>)
 800205e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002068:	4b2f      	ldr	r3, [pc, #188]	@ (8002128 <HAL_UART_MspInit+0x124>)
 800206a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206c:	4a2e      	ldr	r2, [pc, #184]	@ (8002128 <HAL_UART_MspInit+0x124>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002074:	4b2c      	ldr	r3, [pc, #176]	@ (8002128 <HAL_UART_MspInit+0x124>)
 8002076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002080:	230c      	movs	r3, #12
 8002082:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002090:	2307      	movs	r3, #7
 8002092:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002094:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002098:	4619      	mov	r1, r3
 800209a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800209e:	f001 f9fd 	bl	800349c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80020a2:	e03b      	b.n	800211c <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a20      	ldr	r2, [pc, #128]	@ (800212c <HAL_UART_MspInit+0x128>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d136      	bne.n	800211c <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020ae:	2304      	movs	r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020b6:	f107 0318 	add.w	r3, r7, #24
 80020ba:	4618      	mov	r0, r3
 80020bc:	f002 f966 	bl	800438c <HAL_RCCEx_PeriphCLKConfig>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80020c6:	f7ff f9a9 	bl	800141c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020ca:	4b17      	ldr	r3, [pc, #92]	@ (8002128 <HAL_UART_MspInit+0x124>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ce:	4a16      	ldr	r2, [pc, #88]	@ (8002128 <HAL_UART_MspInit+0x124>)
 80020d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80020d6:	4b14      	ldr	r3, [pc, #80]	@ (8002128 <HAL_UART_MspInit+0x124>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e2:	4b11      	ldr	r3, [pc, #68]	@ (8002128 <HAL_UART_MspInit+0x124>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e6:	4a10      	ldr	r2, [pc, #64]	@ (8002128 <HAL_UART_MspInit+0x124>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002128 <HAL_UART_MspInit+0x124>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_LIDAR_Pin|USART3_RX_LIDAR_Pin;
 80020fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80020fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2300      	movs	r3, #0
 800210a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800210c:	2307      	movs	r3, #7
 800210e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002110:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002114:	4619      	mov	r1, r3
 8002116:	4806      	ldr	r0, [pc, #24]	@ (8002130 <HAL_UART_MspInit+0x12c>)
 8002118:	f001 f9c0 	bl	800349c <HAL_GPIO_Init>
}
 800211c:	bf00      	nop
 800211e:	3770      	adds	r7, #112	@ 0x70
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40004400 	.word	0x40004400
 8002128:	40021000 	.word	0x40021000
 800212c:	40004800 	.word	0x40004800
 8002130:	48000400 	.word	0x48000400

08002134 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002134:	480d      	ldr	r0, [pc, #52]	@ (800216c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002136:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002138:	f7ff fb12 	bl	8001760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800213c:	480c      	ldr	r0, [pc, #48]	@ (8002170 <LoopForever+0x6>)
  ldr r1, =_edata
 800213e:	490d      	ldr	r1, [pc, #52]	@ (8002174 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002140:	4a0d      	ldr	r2, [pc, #52]	@ (8002178 <LoopForever+0xe>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002144:	e002      	b.n	800214c <LoopCopyDataInit>

08002146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214a:	3304      	adds	r3, #4

0800214c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800214c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800214e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002150:	d3f9      	bcc.n	8002146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002152:	4a0a      	ldr	r2, [pc, #40]	@ (800217c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002154:	4c0a      	ldr	r4, [pc, #40]	@ (8002180 <LoopForever+0x16>)
  movs r3, #0
 8002156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002158:	e001      	b.n	800215e <LoopFillZerobss>

0800215a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800215c:	3204      	adds	r2, #4

0800215e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800215e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002160:	d3fb      	bcc.n	800215a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002162:	f005 fa3b 	bl	80075dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002166:	f7ff f8f1 	bl	800134c <main>

0800216a <LoopForever>:

LoopForever:
    b LoopForever
 800216a:	e7fe      	b.n	800216a <LoopForever>
  ldr   r0, =_estack
 800216c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002174:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002178:	0800b170 	.word	0x0800b170
  ldr r2, =_sbss
 800217c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002180:	20000670 	.word	0x20000670

08002184 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002184:	e7fe      	b.n	8002184 <ADC1_2_IRQHandler>

08002186 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002190:	2003      	movs	r0, #3
 8002192:	f001 f951 	bl	8003438 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002196:	200f      	movs	r0, #15
 8002198:	f000 f80e 	bl	80021b8 <HAL_InitTick>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	71fb      	strb	r3, [r7, #7]
 80021a6:	e001      	b.n	80021ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021a8:	f7ff f9c0 	bl	800152c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021ac:	79fb      	ldrb	r3, [r7, #7]

}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80021c4:	4b16      	ldr	r3, [pc, #88]	@ (8002220 <HAL_InitTick+0x68>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d022      	beq.n	8002212 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80021cc:	4b15      	ldr	r3, [pc, #84]	@ (8002224 <HAL_InitTick+0x6c>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <HAL_InitTick+0x68>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e0:	4618      	mov	r0, r3
 80021e2:	f001 f94e 	bl	8003482 <HAL_SYSTICK_Config>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10f      	bne.n	800220c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b0f      	cmp	r3, #15
 80021f0:	d809      	bhi.n	8002206 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f2:	2200      	movs	r2, #0
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	f04f 30ff 	mov.w	r0, #4294967295
 80021fa:	f001 f928 	bl	800344e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002228 <HAL_InitTick+0x70>)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	e007      	b.n	8002216 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
 800220a:	e004      	b.n	8002216 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	e001      	b.n	8002216 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000008 	.word	0x20000008
 8002224:	20000000 	.word	0x20000000
 8002228:	20000004 	.word	0x20000004

0800222c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002230:	4b05      	ldr	r3, [pc, #20]	@ (8002248 <HAL_IncTick+0x1c>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b05      	ldr	r3, [pc, #20]	@ (800224c <HAL_IncTick+0x20>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4413      	add	r3, r2
 800223a:	4a03      	ldr	r2, [pc, #12]	@ (8002248 <HAL_IncTick+0x1c>)
 800223c:	6013      	str	r3, [r2, #0]
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	20000520 	.word	0x20000520
 800224c:	20000008 	.word	0x20000008

08002250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return uwTick;
 8002254:	4b03      	ldr	r3, [pc, #12]	@ (8002264 <HAL_GetTick+0x14>)
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000520 	.word	0x20000520

08002268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002270:	f7ff ffee 	bl	8002250 <HAL_GetTick>
 8002274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d004      	beq.n	800228c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002282:	4b09      	ldr	r3, [pc, #36]	@ (80022a8 <HAL_Delay+0x40>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4413      	add	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800228c:	bf00      	nop
 800228e:	f7ff ffdf 	bl	8002250 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	429a      	cmp	r2, r3
 800229c:	d8f7      	bhi.n	800228e <HAL_Delay+0x26>
  {
  }
}
 800229e:	bf00      	nop
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000008 	.word	0x20000008

080022ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	609a      	str	r2, [r3, #8]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	609a      	str	r2, [r3, #8]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3360      	adds	r3, #96	@ 0x60
 8002326:	461a      	mov	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <LL_ADC_SetOffset+0x44>)
 8002336:	4013      	ands	r3, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	4313      	orrs	r3, r2
 8002344:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800234c:	bf00      	nop
 800234e:	371c      	adds	r7, #28
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	03fff000 	.word	0x03fff000

0800235c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3360      	adds	r3, #96	@ 0x60
 800236a:	461a      	mov	r2, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3360      	adds	r3, #96	@ 0x60
 8002398:	461a      	mov	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	431a      	orrs	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023b2:	bf00      	nop
 80023b4:	371c      	adds	r7, #28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80023be:	b480      	push	{r7}
 80023c0:	b087      	sub	sp, #28
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	3360      	adds	r3, #96	@ 0x60
 80023ce:	461a      	mov	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80023e8:	bf00      	nop
 80023ea:	371c      	adds	r7, #28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	3360      	adds	r3, #96	@ 0x60
 8002404:	461a      	mov	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	431a      	orrs	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	615a      	str	r2, [r3, #20]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3330      	adds	r3, #48	@ 0x30
 8002460:	461a      	mov	r2, r3
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	0a1b      	lsrs	r3, r3, #8
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	4413      	add	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f003 031f 	and.w	r3, r3, #31
 800247a:	211f      	movs	r1, #31
 800247c:	fa01 f303 	lsl.w	r3, r1, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	401a      	ands	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	0e9b      	lsrs	r3, r3, #26
 8002488:	f003 011f 	and.w	r1, r3, #31
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	431a      	orrs	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800249c:	bf00      	nop
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	3314      	adds	r3, #20
 80024b8:	461a      	mov	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	0e5b      	lsrs	r3, r3, #25
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	4413      	add	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	0d1b      	lsrs	r3, r3, #20
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	2107      	movs	r1, #7
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	401a      	ands	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	0d1b      	lsrs	r3, r3, #20
 80024e2:	f003 031f 	and.w	r3, r3, #31
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ec:	431a      	orrs	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024f2:	bf00      	nop
 80024f4:	371c      	adds	r7, #28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002518:	43db      	mvns	r3, r3
 800251a:	401a      	ands	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f003 0318 	and.w	r3, r3, #24
 8002522:	4908      	ldr	r1, [pc, #32]	@ (8002544 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002524:	40d9      	lsrs	r1, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	400b      	ands	r3, r1
 800252a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252e:	431a      	orrs	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	0007ffff 	.word	0x0007ffff

08002548 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002558:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6093      	str	r3, [r2, #8]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800257c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002580:	d101      	bne.n	8002586 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80025a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025d0:	d101      	bne.n	80025d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <LL_ADC_IsEnabled+0x18>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <LL_ADC_IsEnabled+0x1a>
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b04      	cmp	r3, #4
 800261c:	d101      	bne.n	8002622 <LL_ADC_REG_IsConversionOngoing+0x18>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b08      	cmp	r3, #8
 8002642:	d101      	bne.n	8002648 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b089      	sub	sp, #36	@ 0x24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e167      	b.n	8002942 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267c:	2b00      	cmp	r3, #0
 800267e:	d109      	bne.n	8002694 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7fe fd4f 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff67 	bl	800256c <LL_ADC_IsDeepPowerDownEnabled>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d004      	beq.n	80026ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff4d 	bl	8002548 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff ff82 	bl	80025bc <LL_ADC_IsInternalRegulatorEnabled>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d115      	bne.n	80026ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ff66 	bl	8002594 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026c8:	4ba0      	ldr	r3, [pc, #640]	@ (800294c <HAL_ADC_Init+0x2f4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	099b      	lsrs	r3, r3, #6
 80026ce:	4aa0      	ldr	r2, [pc, #640]	@ (8002950 <HAL_ADC_Init+0x2f8>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	099b      	lsrs	r3, r3, #6
 80026d6:	3301      	adds	r3, #1
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026dc:	e002      	b.n	80026e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f9      	bne.n	80026de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff ff64 	bl	80025bc <LL_ADC_IsInternalRegulatorEnabled>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10d      	bne.n	8002716 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fe:	f043 0210 	orr.w	r2, r3, #16
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800270a:	f043 0201 	orr.w	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff75 	bl	800260a <LL_ADC_REG_IsConversionOngoing>
 8002720:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b00      	cmp	r3, #0
 800272c:	f040 8100 	bne.w	8002930 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f040 80fc 	bne.w	8002930 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002740:	f043 0202 	orr.w	r2, r3, #2
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff49 	bl	80025e4 <LL_ADC_IsEnabled>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d111      	bne.n	800277c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002758:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800275c:	f7ff ff42 	bl	80025e4 <LL_ADC_IsEnabled>
 8002760:	4604      	mov	r4, r0
 8002762:	487c      	ldr	r0, [pc, #496]	@ (8002954 <HAL_ADC_Init+0x2fc>)
 8002764:	f7ff ff3e 	bl	80025e4 <LL_ADC_IsEnabled>
 8002768:	4603      	mov	r3, r0
 800276a:	4323      	orrs	r3, r4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4619      	mov	r1, r3
 8002776:	4878      	ldr	r0, [pc, #480]	@ (8002958 <HAL_ADC_Init+0x300>)
 8002778:	f7ff fd98 	bl	80022ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	7f5b      	ldrb	r3, [r3, #29]
 8002780:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002786:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800278c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002792:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800279a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d106      	bne.n	80027b8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ae:	3b01      	subs	r3, #1
 80027b0:	045b      	lsls	r3, r3, #17
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d009      	beq.n	80027d4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027cc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	4b60      	ldr	r3, [pc, #384]	@ (800295c <HAL_ADC_Init+0x304>)
 80027dc:	4013      	ands	r3, r2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	69b9      	ldr	r1, [r7, #24]
 80027e4:	430b      	orrs	r3, r1
 80027e6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ff14 	bl	8002630 <LL_ADC_INJ_IsConversionOngoing>
 8002808:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d16d      	bne.n	80028ec <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d16a      	bne.n	80028ec <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800281a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002822:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002832:	f023 0302 	bic.w	r3, r3, #2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	69b9      	ldr	r1, [r7, #24]
 800283c:	430b      	orrs	r3, r1
 800283e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d017      	beq.n	8002878 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002856:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002860:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002864:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6911      	ldr	r1, [r2, #16]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	430b      	orrs	r3, r1
 8002872:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002876:	e013      	b.n	80028a0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002886:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002898:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800289c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d118      	bne.n	80028dc <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80028b4:	f023 0304 	bic.w	r3, r3, #4
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028c0:	4311      	orrs	r1, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80028c6:	4311      	orrs	r1, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028cc:	430a      	orrs	r2, r1
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0201 	orr.w	r2, r2, #1
 80028d8:	611a      	str	r2, [r3, #16]
 80028da:	e007      	b.n	80028ec <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691a      	ldr	r2, [r3, #16]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d10c      	bne.n	800290e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	f023 010f 	bic.w	r1, r3, #15
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	1e5a      	subs	r2, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	631a      	str	r2, [r3, #48]	@ 0x30
 800290c:	e007      	b.n	800291e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 020f 	bic.w	r2, r2, #15
 800291c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002922:	f023 0303 	bic.w	r3, r3, #3
 8002926:	f043 0201 	orr.w	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800292e:	e007      	b.n	8002940 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002934:	f043 0210 	orr.w	r2, r3, #16
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002940:	7ffb      	ldrb	r3, [r7, #31]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3724      	adds	r7, #36	@ 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd90      	pop	{r4, r7, pc}
 800294a:	bf00      	nop
 800294c:	20000000 	.word	0x20000000
 8002950:	053e2d63 	.word	0x053e2d63
 8002954:	50000100 	.word	0x50000100
 8002958:	50000300 	.word	0x50000300
 800295c:	fff04007 	.word	0xfff04007

08002960 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b0b6      	sub	sp, #216	@ 0xd8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x22>
 800297e:	2302      	movs	r3, #2
 8002980:	e3c8      	b.n	8003114 <HAL_ADC_ConfigChannel+0x7b4>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fe3b 	bl	800260a <LL_ADC_REG_IsConversionOngoing>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	f040 83ad 	bne.w	80030f6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	461a      	mov	r2, r3
 80029aa:	f7ff fd51 	bl	8002450 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fe29 	bl	800260a <LL_ADC_REG_IsConversionOngoing>
 80029b8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fe35 	bl	8002630 <LL_ADC_INJ_IsConversionOngoing>
 80029c6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f040 81d9 	bne.w	8002d86 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f040 81d4 	bne.w	8002d86 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029e6:	d10f      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2200      	movs	r2, #0
 80029f2:	4619      	mov	r1, r3
 80029f4:	f7ff fd58 	bl	80024a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fd12 	bl	800242a <LL_ADC_SetSamplingTimeCommonConfig>
 8002a06:	e00e      	b.n	8002a26 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	461a      	mov	r2, r3
 8002a16:	f7ff fd47 	bl	80024a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fd02 	bl	800242a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	695a      	ldr	r2, [r3, #20]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	08db      	lsrs	r3, r3, #3
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d022      	beq.n	8002a8e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	6919      	ldr	r1, [r3, #16]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a58:	f7ff fc5c 	bl	8002314 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	6919      	ldr	r1, [r3, #16]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	f7ff fca8 	bl	80023be <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d102      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x124>
 8002a7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a82:	e000      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x126>
 8002a84:	2300      	movs	r3, #0
 8002a86:	461a      	mov	r2, r3
 8002a88:	f7ff fcb4 	bl	80023f4 <LL_ADC_SetOffsetSaturation>
 8002a8c:	e17b      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2100      	movs	r1, #0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fc61 	bl	800235c <LL_ADC_GetOffsetChannel>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10a      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x15a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fc56 	bl	800235c <LL_ADC_GetOffsetChannel>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	0e9b      	lsrs	r3, r3, #26
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	e01e      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x198>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fc4b 	bl	800235c <LL_ADC_GetOffsetChannel>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ad8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002adc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ae0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	e004      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002aec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d105      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x1b0>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	0e9b      	lsrs	r3, r3, #26
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	e018      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x1e2>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002b24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002b2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002b34:	2320      	movs	r3, #32
 8002b36:	e004      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002b38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b3c:	fab3 f383 	clz	r3, r3
 8002b40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d106      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fc1a 	bl	8002388 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2101      	movs	r1, #1
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fbfe 	bl	800235c <LL_ADC_GetOffsetChannel>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10a      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x220>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2101      	movs	r1, #1
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fbf3 	bl	800235c <LL_ADC_GetOffsetChannel>
 8002b76:	4603      	mov	r3, r0
 8002b78:	0e9b      	lsrs	r3, r3, #26
 8002b7a:	f003 021f 	and.w	r2, r3, #31
 8002b7e:	e01e      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x25e>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2101      	movs	r1, #1
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fbe8 	bl	800235c <LL_ADC_GetOffsetChannel>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002b9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ba2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002ba6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002bae:	2320      	movs	r3, #32
 8002bb0:	e004      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002bb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d105      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x276>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	0e9b      	lsrs	r3, r3, #26
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	e018      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x2a8>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002bea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002bf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	e004      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002bfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d106      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2200      	movs	r2, #0
 8002c12:	2101      	movs	r1, #1
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fbb7 	bl	8002388 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2102      	movs	r1, #2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fb9b 	bl	800235c <LL_ADC_GetOffsetChannel>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x2e6>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2102      	movs	r1, #2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fb90 	bl	800235c <LL_ADC_GetOffsetChannel>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	0e9b      	lsrs	r3, r3, #26
 8002c40:	f003 021f 	and.w	r2, r3, #31
 8002c44:	e01e      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x324>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2102      	movs	r1, #2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fb85 	bl	800235c <LL_ADC_GetOffsetChannel>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002c6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002c74:	2320      	movs	r3, #32
 8002c76:	e004      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002c78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c7c:	fab3 f383 	clz	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x33c>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	0e9b      	lsrs	r3, r3, #26
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	e016      	b.n	8002cca <HAL_ADC_ConfigChannel+0x36a>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002cae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002cb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002cbc:	2320      	movs	r3, #32
 8002cbe:	e004      	b.n	8002cca <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002cc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cc4:	fab3 f383 	clz	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d106      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2102      	movs	r1, #2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fb56 	bl	8002388 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2103      	movs	r1, #3
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff fb3a 	bl	800235c <LL_ADC_GetOffsetChannel>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10a      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x3a8>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2103      	movs	r1, #3
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff fb2f 	bl	800235c <LL_ADC_GetOffsetChannel>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	0e9b      	lsrs	r3, r3, #26
 8002d02:	f003 021f 	and.w	r2, r3, #31
 8002d06:	e017      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x3d8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2103      	movs	r1, #3
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fb24 	bl	800235c <LL_ADC_GetOffsetChannel>
 8002d14:	4603      	mov	r3, r0
 8002d16:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002d20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d22:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002d24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002d2a:	2320      	movs	r3, #32
 8002d2c:	e003      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002d2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d30:	fab3 f383 	clz	r3, r3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d105      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x3f0>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	0e9b      	lsrs	r3, r3, #26
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	e011      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x414>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002d5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d60:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002d62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002d68:	2320      	movs	r3, #32
 8002d6a:	e003      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002d6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d106      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2103      	movs	r1, #3
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fb01 	bl	8002388 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fc2a 	bl	80025e4 <LL_ADC_IsEnabled>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f040 8140 	bne.w	8003018 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	6819      	ldr	r1, [r3, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	461a      	mov	r2, r3
 8002da6:	f7ff fbab 	bl	8002500 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	4a8f      	ldr	r2, [pc, #572]	@ (8002fec <HAL_ADC_ConfigChannel+0x68c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	f040 8131 	bne.w	8003018 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10b      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x47e>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	0e9b      	lsrs	r3, r3, #26
 8002dcc:	3301      	adds	r3, #1
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	2b09      	cmp	r3, #9
 8002dd4:	bf94      	ite	ls
 8002dd6:	2301      	movls	r3, #1
 8002dd8:	2300      	movhi	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	e019      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x4b2>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002dec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dee:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002df0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002df6:	2320      	movs	r3, #32
 8002df8:	e003      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002dfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dfc:	fab3 f383 	clz	r3, r3
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	2b09      	cmp	r3, #9
 8002e0a:	bf94      	ite	ls
 8002e0c:	2301      	movls	r3, #1
 8002e0e:	2300      	movhi	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d079      	beq.n	8002f0a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d107      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x4d2>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	0e9b      	lsrs	r3, r3, #26
 8002e28:	3301      	adds	r3, #1
 8002e2a:	069b      	lsls	r3, r3, #26
 8002e2c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e30:	e015      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x4fe>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e3a:	fa93 f3a3 	rbit	r3, r3
 8002e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e42:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002e4a:	2320      	movs	r3, #32
 8002e4c:	e003      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e50:	fab3 f383 	clz	r3, r3
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	3301      	adds	r3, #1
 8002e58:	069b      	lsls	r3, r3, #26
 8002e5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x51e>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	0e9b      	lsrs	r3, r3, #26
 8002e70:	3301      	adds	r3, #1
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	2101      	movs	r1, #1
 8002e78:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7c:	e017      	b.n	8002eae <HAL_ADC_ConfigChannel+0x54e>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002e8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002e90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002e96:	2320      	movs	r3, #32
 8002e98:	e003      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002e9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e9c:	fab3 f383 	clz	r3, r3
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	ea42 0103 	orr.w	r1, r2, r3
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10a      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x574>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	0e9b      	lsrs	r3, r3, #26
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f003 021f 	and.w	r2, r3, #31
 8002eca:	4613      	mov	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	4413      	add	r3, r2
 8002ed0:	051b      	lsls	r3, r3, #20
 8002ed2:	e018      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x5a6>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002edc:	fa93 f3a3 	rbit	r3, r3
 8002ee0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002eec:	2320      	movs	r3, #32
 8002eee:	e003      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ef2:	fab3 f383 	clz	r3, r3
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	3301      	adds	r3, #1
 8002efa:	f003 021f 	and.w	r2, r3, #31
 8002efe:	4613      	mov	r3, r2
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	4413      	add	r3, r2
 8002f04:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f06:	430b      	orrs	r3, r1
 8002f08:	e081      	b.n	800300e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d107      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x5c6>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	0e9b      	lsrs	r3, r3, #26
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	069b      	lsls	r3, r3, #26
 8002f20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f24:	e015      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x5f2>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f36:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002f3e:	2320      	movs	r3, #32
 8002f40:	e003      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	069b      	lsls	r3, r3, #26
 8002f4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x612>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	0e9b      	lsrs	r3, r3, #26
 8002f64:	3301      	adds	r3, #1
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f70:	e017      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x642>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	61fb      	str	r3, [r7, #28]
  return result;
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002f8a:	2320      	movs	r3, #32
 8002f8c:	e003      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	fab3 f383 	clz	r3, r3
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa2:	ea42 0103 	orr.w	r1, r2, r3
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10d      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x66e>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	0e9b      	lsrs	r3, r3, #26
 8002fb8:	3301      	adds	r3, #1
 8002fba:	f003 021f 	and.w	r2, r3, #31
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3b1e      	subs	r3, #30
 8002fc6:	051b      	lsls	r3, r3, #20
 8002fc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fcc:	e01e      	b.n	800300c <HAL_ADC_ConfigChannel+0x6ac>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	613b      	str	r3, [r7, #16]
  return result;
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d104      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002fe6:	2320      	movs	r3, #32
 8002fe8:	e006      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x698>
 8002fea:	bf00      	nop
 8002fec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f003 021f 	and.w	r2, r3, #31
 8002ffe:	4613      	mov	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4413      	add	r3, r2
 8003004:	3b1e      	subs	r3, #30
 8003006:	051b      	lsls	r3, r3, #20
 8003008:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800300c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003012:	4619      	mov	r1, r3
 8003014:	f7ff fa48 	bl	80024a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b3f      	ldr	r3, [pc, #252]	@ (800311c <HAL_ADC_ConfigChannel+0x7bc>)
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d071      	beq.n	8003108 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003024:	483e      	ldr	r0, [pc, #248]	@ (8003120 <HAL_ADC_ConfigChannel+0x7c0>)
 8003026:	f7ff f967 	bl	80022f8 <LL_ADC_GetCommonPathInternalCh>
 800302a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a3c      	ldr	r2, [pc, #240]	@ (8003124 <HAL_ADC_ConfigChannel+0x7c4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d004      	beq.n	8003042 <HAL_ADC_ConfigChannel+0x6e2>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a3a      	ldr	r2, [pc, #232]	@ (8003128 <HAL_ADC_ConfigChannel+0x7c8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d127      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003042:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003046:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d121      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003056:	d157      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003058:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800305c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003060:	4619      	mov	r1, r3
 8003062:	482f      	ldr	r0, [pc, #188]	@ (8003120 <HAL_ADC_ConfigChannel+0x7c0>)
 8003064:	f7ff f935 	bl	80022d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003068:	4b30      	ldr	r3, [pc, #192]	@ (800312c <HAL_ADC_ConfigChannel+0x7cc>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	099b      	lsrs	r3, r3, #6
 800306e:	4a30      	ldr	r2, [pc, #192]	@ (8003130 <HAL_ADC_ConfigChannel+0x7d0>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	099b      	lsrs	r3, r3, #6
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	4613      	mov	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003082:	e002      	b.n	800308a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3b01      	subs	r3, #1
 8003088:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f9      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003090:	e03a      	b.n	8003108 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a27      	ldr	r2, [pc, #156]	@ (8003134 <HAL_ADC_ConfigChannel+0x7d4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d113      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800309c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10d      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a22      	ldr	r2, [pc, #136]	@ (8003138 <HAL_ADC_ConfigChannel+0x7d8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d02a      	beq.n	8003108 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030ba:	4619      	mov	r1, r3
 80030bc:	4818      	ldr	r0, [pc, #96]	@ (8003120 <HAL_ADC_ConfigChannel+0x7c0>)
 80030be:	f7ff f908 	bl	80022d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030c2:	e021      	b.n	8003108 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1c      	ldr	r2, [pc, #112]	@ (800313c <HAL_ADC_ConfigChannel+0x7dc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d11c      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d116      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a16      	ldr	r2, [pc, #88]	@ (8003138 <HAL_ADC_ConfigChannel+0x7d8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d011      	beq.n	8003108 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030ec:	4619      	mov	r1, r3
 80030ee:	480c      	ldr	r0, [pc, #48]	@ (8003120 <HAL_ADC_ConfigChannel+0x7c0>)
 80030f0:	f7ff f8ef 	bl	80022d2 <LL_ADC_SetCommonPathInternalCh>
 80030f4:	e008      	b.n	8003108 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fa:	f043 0220 	orr.w	r2, r3, #32
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003110:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003114:	4618      	mov	r0, r3
 8003116:	37d8      	adds	r7, #216	@ 0xd8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	80080000 	.word	0x80080000
 8003120:	50000300 	.word	0x50000300
 8003124:	c3210000 	.word	0xc3210000
 8003128:	90c00010 	.word	0x90c00010
 800312c:	20000000 	.word	0x20000000
 8003130:	053e2d63 	.word	0x053e2d63
 8003134:	c7520000 	.word	0xc7520000
 8003138:	50000100 	.word	0x50000100
 800313c:	cb840000 	.word	0xcb840000

08003140 <LL_ADC_IsEnabled>:
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <LL_ADC_IsEnabled+0x18>
 8003154:	2301      	movs	r3, #1
 8003156:	e000      	b.n	800315a <LL_ADC_IsEnabled+0x1a>
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <LL_ADC_REG_IsConversionOngoing>:
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b04      	cmp	r3, #4
 8003178:	d101      	bne.n	800317e <LL_ADC_REG_IsConversionOngoing+0x18>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	b0a1      	sub	sp, #132	@ 0x84
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e08b      	b.n	80032c2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80031b2:	2300      	movs	r3, #0
 80031b4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80031b6:	2300      	movs	r3, #0
 80031b8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031c2:	d102      	bne.n	80031ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80031c4:	4b41      	ldr	r3, [pc, #260]	@ (80032cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	e001      	b.n	80031ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80031ca:	2300      	movs	r3, #0
 80031cc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10b      	bne.n	80031ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e06a      	b.n	80032c2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff ffb9 	bl	8003166 <LL_ADC_REG_IsConversionOngoing>
 80031f4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ffb3 	bl	8003166 <LL_ADC_REG_IsConversionOngoing>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d14c      	bne.n	80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003206:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003208:	2b00      	cmp	r3, #0
 800320a:	d149      	bne.n	80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800320c:	4b30      	ldr	r3, [pc, #192]	@ (80032d0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800320e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d028      	beq.n	800326a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003218:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	6859      	ldr	r1, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800322a:	035b      	lsls	r3, r3, #13
 800322c:	430b      	orrs	r3, r1
 800322e:	431a      	orrs	r2, r3
 8003230:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003232:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003234:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003238:	f7ff ff82 	bl	8003140 <LL_ADC_IsEnabled>
 800323c:	4604      	mov	r4, r0
 800323e:	4823      	ldr	r0, [pc, #140]	@ (80032cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003240:	f7ff ff7e 	bl	8003140 <LL_ADC_IsEnabled>
 8003244:	4603      	mov	r3, r0
 8003246:	4323      	orrs	r3, r4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d133      	bne.n	80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800324c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003254:	f023 030f 	bic.w	r3, r3, #15
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	6811      	ldr	r1, [r2, #0]
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	6892      	ldr	r2, [r2, #8]
 8003260:	430a      	orrs	r2, r1
 8003262:	431a      	orrs	r2, r3
 8003264:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003266:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003268:	e024      	b.n	80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800326a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003272:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003274:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003276:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800327a:	f7ff ff61 	bl	8003140 <LL_ADC_IsEnabled>
 800327e:	4604      	mov	r4, r0
 8003280:	4812      	ldr	r0, [pc, #72]	@ (80032cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003282:	f7ff ff5d 	bl	8003140 <LL_ADC_IsEnabled>
 8003286:	4603      	mov	r3, r0
 8003288:	4323      	orrs	r3, r4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d112      	bne.n	80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800328e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003296:	f023 030f 	bic.w	r3, r3, #15
 800329a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800329c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800329e:	e009      	b.n	80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a4:	f043 0220 	orr.w	r2, r3, #32
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80032b2:	e000      	b.n	80032b6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80032be:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3784      	adds	r7, #132	@ 0x84
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd90      	pop	{r4, r7, pc}
 80032ca:	bf00      	nop
 80032cc:	50000100 	.word	0x50000100
 80032d0:	50000300 	.word	0x50000300

080032d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003318 <__NVIC_SetPriorityGrouping+0x44>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032f0:	4013      	ands	r3, r2
 80032f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003306:	4a04      	ldr	r2, [pc, #16]	@ (8003318 <__NVIC_SetPriorityGrouping+0x44>)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	60d3      	str	r3, [r2, #12]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003320:	4b04      	ldr	r3, [pc, #16]	@ (8003334 <__NVIC_GetPriorityGrouping+0x18>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	0a1b      	lsrs	r3, r3, #8
 8003326:	f003 0307 	and.w	r3, r3, #7
}
 800332a:	4618      	mov	r0, r3
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000ed00 	.word	0xe000ed00

08003338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	6039      	str	r1, [r7, #0]
 8003342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003348:	2b00      	cmp	r3, #0
 800334a:	db0a      	blt.n	8003362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	b2da      	uxtb	r2, r3
 8003350:	490c      	ldr	r1, [pc, #48]	@ (8003384 <__NVIC_SetPriority+0x4c>)
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	0112      	lsls	r2, r2, #4
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	440b      	add	r3, r1
 800335c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003360:	e00a      	b.n	8003378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	4908      	ldr	r1, [pc, #32]	@ (8003388 <__NVIC_SetPriority+0x50>)
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	3b04      	subs	r3, #4
 8003370:	0112      	lsls	r2, r2, #4
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	440b      	add	r3, r1
 8003376:	761a      	strb	r2, [r3, #24]
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000e100 	.word	0xe000e100
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800338c:	b480      	push	{r7}
 800338e:	b089      	sub	sp, #36	@ 0x24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f1c3 0307 	rsb	r3, r3, #7
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	bf28      	it	cs
 80033aa:	2304      	movcs	r3, #4
 80033ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3304      	adds	r3, #4
 80033b2:	2b06      	cmp	r3, #6
 80033b4:	d902      	bls.n	80033bc <NVIC_EncodePriority+0x30>
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3b03      	subs	r3, #3
 80033ba:	e000      	b.n	80033be <NVIC_EncodePriority+0x32>
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c0:	f04f 32ff 	mov.w	r2, #4294967295
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43da      	mvns	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	401a      	ands	r2, r3
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d4:	f04f 31ff 	mov.w	r1, #4294967295
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	fa01 f303 	lsl.w	r3, r1, r3
 80033de:	43d9      	mvns	r1, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e4:	4313      	orrs	r3, r2
         );
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3724      	adds	r7, #36	@ 0x24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3b01      	subs	r3, #1
 8003400:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003404:	d301      	bcc.n	800340a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003406:	2301      	movs	r3, #1
 8003408:	e00f      	b.n	800342a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800340a:	4a0a      	ldr	r2, [pc, #40]	@ (8003434 <SysTick_Config+0x40>)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003412:	210f      	movs	r1, #15
 8003414:	f04f 30ff 	mov.w	r0, #4294967295
 8003418:	f7ff ff8e 	bl	8003338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800341c:	4b05      	ldr	r3, [pc, #20]	@ (8003434 <SysTick_Config+0x40>)
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003422:	4b04      	ldr	r3, [pc, #16]	@ (8003434 <SysTick_Config+0x40>)
 8003424:	2207      	movs	r2, #7
 8003426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	e000e010 	.word	0xe000e010

08003438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ff47 	bl	80032d4 <__NVIC_SetPriorityGrouping>
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b086      	sub	sp, #24
 8003452:	af00      	add	r7, sp, #0
 8003454:	4603      	mov	r3, r0
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800345c:	f7ff ff5e 	bl	800331c <__NVIC_GetPriorityGrouping>
 8003460:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	6978      	ldr	r0, [r7, #20]
 8003468:	f7ff ff90 	bl	800338c <NVIC_EncodePriority>
 800346c:	4602      	mov	r2, r0
 800346e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ff5f 	bl	8003338 <__NVIC_SetPriority>
}
 800347a:	bf00      	nop
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff ffb2 	bl	80033f4 <SysTick_Config>
 8003490:	4603      	mov	r3, r0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034aa:	e15a      	b.n	8003762 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	2101      	movs	r1, #1
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	fa01 f303 	lsl.w	r3, r1, r3
 80034b8:	4013      	ands	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 814c 	beq.w	800375c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d005      	beq.n	80034dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d130      	bne.n	800353e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	2203      	movs	r2, #3
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003512:	2201      	movs	r2, #1
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43db      	mvns	r3, r3
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4013      	ands	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	091b      	lsrs	r3, r3, #4
 8003528:	f003 0201 	and.w	r2, r3, #1
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	2b03      	cmp	r3, #3
 8003548:	d017      	beq.n	800357a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	2203      	movs	r2, #3
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4013      	ands	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d123      	bne.n	80035ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	08da      	lsrs	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3208      	adds	r2, #8
 800358e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003592:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	220f      	movs	r2, #15
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	43db      	mvns	r3, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4013      	ands	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	08da      	lsrs	r2, r3, #3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3208      	adds	r2, #8
 80035c8:	6939      	ldr	r1, [r7, #16]
 80035ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	2203      	movs	r2, #3
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4013      	ands	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 0203 	and.w	r2, r3, #3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80a6 	beq.w	800375c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003610:	4b5b      	ldr	r3, [pc, #364]	@ (8003780 <HAL_GPIO_Init+0x2e4>)
 8003612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003614:	4a5a      	ldr	r2, [pc, #360]	@ (8003780 <HAL_GPIO_Init+0x2e4>)
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	6613      	str	r3, [r2, #96]	@ 0x60
 800361c:	4b58      	ldr	r3, [pc, #352]	@ (8003780 <HAL_GPIO_Init+0x2e4>)
 800361e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003628:	4a56      	ldr	r2, [pc, #344]	@ (8003784 <HAL_GPIO_Init+0x2e8>)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	089b      	lsrs	r3, r3, #2
 800362e:	3302      	adds	r3, #2
 8003630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003634:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	220f      	movs	r2, #15
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4013      	ands	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003652:	d01f      	beq.n	8003694 <HAL_GPIO_Init+0x1f8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a4c      	ldr	r2, [pc, #304]	@ (8003788 <HAL_GPIO_Init+0x2ec>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d019      	beq.n	8003690 <HAL_GPIO_Init+0x1f4>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a4b      	ldr	r2, [pc, #300]	@ (800378c <HAL_GPIO_Init+0x2f0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d013      	beq.n	800368c <HAL_GPIO_Init+0x1f0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a4a      	ldr	r2, [pc, #296]	@ (8003790 <HAL_GPIO_Init+0x2f4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00d      	beq.n	8003688 <HAL_GPIO_Init+0x1ec>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a49      	ldr	r2, [pc, #292]	@ (8003794 <HAL_GPIO_Init+0x2f8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d007      	beq.n	8003684 <HAL_GPIO_Init+0x1e8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a48      	ldr	r2, [pc, #288]	@ (8003798 <HAL_GPIO_Init+0x2fc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d101      	bne.n	8003680 <HAL_GPIO_Init+0x1e4>
 800367c:	2305      	movs	r3, #5
 800367e:	e00a      	b.n	8003696 <HAL_GPIO_Init+0x1fa>
 8003680:	2306      	movs	r3, #6
 8003682:	e008      	b.n	8003696 <HAL_GPIO_Init+0x1fa>
 8003684:	2304      	movs	r3, #4
 8003686:	e006      	b.n	8003696 <HAL_GPIO_Init+0x1fa>
 8003688:	2303      	movs	r3, #3
 800368a:	e004      	b.n	8003696 <HAL_GPIO_Init+0x1fa>
 800368c:	2302      	movs	r3, #2
 800368e:	e002      	b.n	8003696 <HAL_GPIO_Init+0x1fa>
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <HAL_GPIO_Init+0x1fa>
 8003694:	2300      	movs	r3, #0
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	f002 0203 	and.w	r2, r2, #3
 800369c:	0092      	lsls	r2, r2, #2
 800369e:	4093      	lsls	r3, r2
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036a6:	4937      	ldr	r1, [pc, #220]	@ (8003784 <HAL_GPIO_Init+0x2e8>)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	089b      	lsrs	r3, r3, #2
 80036ac:	3302      	adds	r3, #2
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036b4:	4b39      	ldr	r3, [pc, #228]	@ (800379c <HAL_GPIO_Init+0x300>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	43db      	mvns	r3, r3
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036d8:	4a30      	ldr	r2, [pc, #192]	@ (800379c <HAL_GPIO_Init+0x300>)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036de:	4b2f      	ldr	r3, [pc, #188]	@ (800379c <HAL_GPIO_Init+0x300>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003702:	4a26      	ldr	r2, [pc, #152]	@ (800379c <HAL_GPIO_Init+0x300>)
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003708:	4b24      	ldr	r3, [pc, #144]	@ (800379c <HAL_GPIO_Init+0x300>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	43db      	mvns	r3, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4013      	ands	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800372c:	4a1b      	ldr	r2, [pc, #108]	@ (800379c <HAL_GPIO_Init+0x300>)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003732:	4b1a      	ldr	r3, [pc, #104]	@ (800379c <HAL_GPIO_Init+0x300>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	43db      	mvns	r3, r3
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4013      	ands	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003756:	4a11      	ldr	r2, [pc, #68]	@ (800379c <HAL_GPIO_Init+0x300>)
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	3301      	adds	r3, #1
 8003760:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	fa22 f303 	lsr.w	r3, r2, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	f47f ae9d 	bne.w	80034ac <HAL_GPIO_Init+0x10>
  }
}
 8003772:	bf00      	nop
 8003774:	bf00      	nop
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	40021000 	.word	0x40021000
 8003784:	40010000 	.word	0x40010000
 8003788:	48000400 	.word	0x48000400
 800378c:	48000800 	.word	0x48000800
 8003790:	48000c00 	.word	0x48000c00
 8003794:	48001000 	.word	0x48001000
 8003798:	48001400 	.word	0x48001400
 800379c:	40010400 	.word	0x40010400

080037a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	807b      	strh	r3, [r7, #2]
 80037ac:	4613      	mov	r3, r2
 80037ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037b0:	787b      	ldrb	r3, [r7, #1]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037b6:	887a      	ldrh	r2, [r7, #2]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037bc:	e002      	b.n	80037c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037be:	887a      	ldrh	r2, [r7, #2]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d141      	bne.n	8003862 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037de:	4b4b      	ldr	r3, [pc, #300]	@ (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ea:	d131      	bne.n	8003850 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037ec:	4b47      	ldr	r3, [pc, #284]	@ (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037f2:	4a46      	ldr	r2, [pc, #280]	@ (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037fc:	4b43      	ldr	r3, [pc, #268]	@ (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003804:	4a41      	ldr	r2, [pc, #260]	@ (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003806:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800380a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800380c:	4b40      	ldr	r3, [pc, #256]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2232      	movs	r2, #50	@ 0x32
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	4a3f      	ldr	r2, [pc, #252]	@ (8003914 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003818:	fba2 2303 	umull	r2, r3, r2, r3
 800381c:	0c9b      	lsrs	r3, r3, #18
 800381e:	3301      	adds	r3, #1
 8003820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003822:	e002      	b.n	800382a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	3b01      	subs	r3, #1
 8003828:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800382a:	4b38      	ldr	r3, [pc, #224]	@ (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003836:	d102      	bne.n	800383e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f2      	bne.n	8003824 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800383e:	4b33      	ldr	r3, [pc, #204]	@ (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800384a:	d158      	bne.n	80038fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e057      	b.n	8003900 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003850:	4b2e      	ldr	r3, [pc, #184]	@ (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003856:	4a2d      	ldr	r2, [pc, #180]	@ (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003858:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800385c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003860:	e04d      	b.n	80038fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003868:	d141      	bne.n	80038ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800386a:	4b28      	ldr	r3, [pc, #160]	@ (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003876:	d131      	bne.n	80038dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003878:	4b24      	ldr	r3, [pc, #144]	@ (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800387e:	4a23      	ldr	r2, [pc, #140]	@ (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003884:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003888:	4b20      	ldr	r3, [pc, #128]	@ (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003890:	4a1e      	ldr	r2, [pc, #120]	@ (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003892:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003896:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003898:	4b1d      	ldr	r3, [pc, #116]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2232      	movs	r2, #50	@ 0x32
 800389e:	fb02 f303 	mul.w	r3, r2, r3
 80038a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003914 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	0c9b      	lsrs	r3, r3, #18
 80038aa:	3301      	adds	r3, #1
 80038ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038ae:	e002      	b.n	80038b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038b6:	4b15      	ldr	r3, [pc, #84]	@ (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c2:	d102      	bne.n	80038ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f2      	bne.n	80038b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038ca:	4b10      	ldr	r3, [pc, #64]	@ (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038d6:	d112      	bne.n	80038fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e011      	b.n	8003900 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038dc:	4b0b      	ldr	r3, [pc, #44]	@ (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038e2:	4a0a      	ldr	r2, [pc, #40]	@ (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80038ec:	e007      	b.n	80038fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038ee:	4b07      	ldr	r3, [pc, #28]	@ (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038f6:	4a05      	ldr	r2, [pc, #20]	@ (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	40007000 	.word	0x40007000
 8003910:	20000000 	.word	0x20000000
 8003914:	431bde83 	.word	0x431bde83

08003918 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800391c:	4b05      	ldr	r3, [pc, #20]	@ (8003934 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4a04      	ldr	r2, [pc, #16]	@ (8003934 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003922:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003926:	6093      	str	r3, [r2, #8]
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40007000 	.word	0x40007000

08003938 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e2fe      	b.n	8003f48 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d075      	beq.n	8003a42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003956:	4b97      	ldr	r3, [pc, #604]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003960:	4b94      	ldr	r3, [pc, #592]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b0c      	cmp	r3, #12
 800396e:	d102      	bne.n	8003976 <HAL_RCC_OscConfig+0x3e>
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2b03      	cmp	r3, #3
 8003974:	d002      	beq.n	800397c <HAL_RCC_OscConfig+0x44>
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	2b08      	cmp	r3, #8
 800397a:	d10b      	bne.n	8003994 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397c:	4b8d      	ldr	r3, [pc, #564]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d05b      	beq.n	8003a40 <HAL_RCC_OscConfig+0x108>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d157      	bne.n	8003a40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e2d9      	b.n	8003f48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800399c:	d106      	bne.n	80039ac <HAL_RCC_OscConfig+0x74>
 800399e:	4b85      	ldr	r3, [pc, #532]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a84      	ldr	r2, [pc, #528]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 80039a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	e01d      	b.n	80039e8 <HAL_RCC_OscConfig+0xb0>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039b4:	d10c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x98>
 80039b6:	4b7f      	ldr	r3, [pc, #508]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a7e      	ldr	r2, [pc, #504]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 80039bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	4b7c      	ldr	r3, [pc, #496]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a7b      	ldr	r2, [pc, #492]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e00b      	b.n	80039e8 <HAL_RCC_OscConfig+0xb0>
 80039d0:	4b78      	ldr	r3, [pc, #480]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a77      	ldr	r2, [pc, #476]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 80039d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	4b75      	ldr	r3, [pc, #468]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a74      	ldr	r2, [pc, #464]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 80039e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d013      	beq.n	8003a18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fe fc2e 	bl	8002250 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f8:	f7fe fc2a 	bl	8002250 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	@ 0x64
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e29e      	b.n	8003f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a0a:	4b6a      	ldr	r3, [pc, #424]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCC_OscConfig+0xc0>
 8003a16:	e014      	b.n	8003a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a18:	f7fe fc1a 	bl	8002250 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a20:	f7fe fc16 	bl	8002250 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	@ 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e28a      	b.n	8003f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a32:	4b60      	ldr	r3, [pc, #384]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0xe8>
 8003a3e:	e000      	b.n	8003a42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d075      	beq.n	8003b3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a4e:	4b59      	ldr	r3, [pc, #356]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 030c 	and.w	r3, r3, #12
 8003a56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a58:	4b56      	ldr	r3, [pc, #344]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0303 	and.w	r3, r3, #3
 8003a60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	2b0c      	cmp	r3, #12
 8003a66:	d102      	bne.n	8003a6e <HAL_RCC_OscConfig+0x136>
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d002      	beq.n	8003a74 <HAL_RCC_OscConfig+0x13c>
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d11f      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a74:	4b4f      	ldr	r3, [pc, #316]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_RCC_OscConfig+0x154>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e25d      	b.n	8003f48 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a8c:	4b49      	ldr	r3, [pc, #292]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	061b      	lsls	r3, r3, #24
 8003a9a:	4946      	ldr	r1, [pc, #280]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003aa0:	4b45      	ldr	r3, [pc, #276]	@ (8003bb8 <HAL_RCC_OscConfig+0x280>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fe fb87 	bl	80021b8 <HAL_InitTick>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d043      	beq.n	8003b38 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e249      	b.n	8003f48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d023      	beq.n	8003b04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003abc:	4b3d      	ldr	r3, [pc, #244]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a3c      	ldr	r2, [pc, #240]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003ac2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fe fbc2 	bl	8002250 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad0:	f7fe fbbe 	bl	8002250 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e232      	b.n	8003f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ae2:	4b34      	ldr	r3, [pc, #208]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aee:	4b31      	ldr	r3, [pc, #196]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	061b      	lsls	r3, r3, #24
 8003afc:	492d      	ldr	r1, [pc, #180]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	604b      	str	r3, [r1, #4]
 8003b02:	e01a      	b.n	8003b3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b04:	4b2b      	ldr	r3, [pc, #172]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a2a      	ldr	r2, [pc, #168]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003b0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b10:	f7fe fb9e 	bl	8002250 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b18:	f7fe fb9a 	bl	8002250 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e20e      	b.n	8003f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b2a:	4b22      	ldr	r3, [pc, #136]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f0      	bne.n	8003b18 <HAL_RCC_OscConfig+0x1e0>
 8003b36:	e000      	b.n	8003b3a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d041      	beq.n	8003bca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01c      	beq.n	8003b88 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b4e:	4b19      	ldr	r3, [pc, #100]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b54:	4a17      	ldr	r2, [pc, #92]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5e:	f7fe fb77 	bl	8002250 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b66:	f7fe fb73 	bl	8002250 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e1e7      	b.n	8003f48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b78:	4b0e      	ldr	r3, [pc, #56]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0ef      	beq.n	8003b66 <HAL_RCC_OscConfig+0x22e>
 8003b86:	e020      	b.n	8003bca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b88:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b8e:	4a09      	ldr	r2, [pc, #36]	@ (8003bb4 <HAL_RCC_OscConfig+0x27c>)
 8003b90:	f023 0301 	bic.w	r3, r3, #1
 8003b94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7fe fb5a 	bl	8002250 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b9e:	e00d      	b.n	8003bbc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba0:	f7fe fb56 	bl	8002250 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d906      	bls.n	8003bbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e1ca      	b.n	8003f48 <HAL_RCC_OscConfig+0x610>
 8003bb2:	bf00      	nop
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bbc:	4b8c      	ldr	r3, [pc, #560]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1ea      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 80a6 	beq.w	8003d24 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bdc:	4b84      	ldr	r3, [pc, #528]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_RCC_OscConfig+0x2b4>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <HAL_RCC_OscConfig+0x2b6>
 8003bec:	2300      	movs	r3, #0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00d      	beq.n	8003c0e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf2:	4b7f      	ldr	r3, [pc, #508]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf6:	4a7e      	ldr	r2, [pc, #504]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bfe:	4b7c      	ldr	r3, [pc, #496]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c0e:	4b79      	ldr	r3, [pc, #484]	@ (8003df4 <HAL_RCC_OscConfig+0x4bc>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d118      	bne.n	8003c4c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c1a:	4b76      	ldr	r3, [pc, #472]	@ (8003df4 <HAL_RCC_OscConfig+0x4bc>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a75      	ldr	r2, [pc, #468]	@ (8003df4 <HAL_RCC_OscConfig+0x4bc>)
 8003c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c26:	f7fe fb13 	bl	8002250 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2e:	f7fe fb0f 	bl	8002250 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e183      	b.n	8003f48 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c40:	4b6c      	ldr	r3, [pc, #432]	@ (8003df4 <HAL_RCC_OscConfig+0x4bc>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d108      	bne.n	8003c66 <HAL_RCC_OscConfig+0x32e>
 8003c54:	4b66      	ldr	r3, [pc, #408]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5a:	4a65      	ldr	r2, [pc, #404]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c64:	e024      	b.n	8003cb0 <HAL_RCC_OscConfig+0x378>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b05      	cmp	r3, #5
 8003c6c:	d110      	bne.n	8003c90 <HAL_RCC_OscConfig+0x358>
 8003c6e:	4b60      	ldr	r3, [pc, #384]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c74:	4a5e      	ldr	r2, [pc, #376]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003c76:	f043 0304 	orr.w	r3, r3, #4
 8003c7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c7e:	4b5c      	ldr	r3, [pc, #368]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c84:	4a5a      	ldr	r2, [pc, #360]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c8e:	e00f      	b.n	8003cb0 <HAL_RCC_OscConfig+0x378>
 8003c90:	4b57      	ldr	r3, [pc, #348]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c96:	4a56      	ldr	r2, [pc, #344]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003c98:	f023 0301 	bic.w	r3, r3, #1
 8003c9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ca0:	4b53      	ldr	r3, [pc, #332]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca6:	4a52      	ldr	r2, [pc, #328]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003ca8:	f023 0304 	bic.w	r3, r3, #4
 8003cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d016      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb8:	f7fe faca 	bl	8002250 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7fe fac6 	bl	8002250 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e138      	b.n	8003f48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cd6:	4b46      	ldr	r3, [pc, #280]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0ed      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x388>
 8003ce4:	e015      	b.n	8003d12 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce6:	f7fe fab3 	bl	8002250 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cec:	e00a      	b.n	8003d04 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cee:	f7fe faaf 	bl	8002250 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e121      	b.n	8003f48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d04:	4b3a      	ldr	r3, [pc, #232]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1ed      	bne.n	8003cee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d12:	7ffb      	ldrb	r3, [r7, #31]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d105      	bne.n	8003d24 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d18:	4b35      	ldr	r3, [pc, #212]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1c:	4a34      	ldr	r2, [pc, #208]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003d1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d22:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d03c      	beq.n	8003daa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01c      	beq.n	8003d72 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d38:	4b2d      	ldr	r3, [pc, #180]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d3e:	4a2c      	ldr	r2, [pc, #176]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d48:	f7fe fa82 	bl	8002250 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d50:	f7fe fa7e 	bl	8002250 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e0f2      	b.n	8003f48 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d62:	4b23      	ldr	r3, [pc, #140]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003d64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0ef      	beq.n	8003d50 <HAL_RCC_OscConfig+0x418>
 8003d70:	e01b      	b.n	8003daa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d72:	4b1f      	ldr	r3, [pc, #124]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003d74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d78:	4a1d      	ldr	r2, [pc, #116]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d82:	f7fe fa65 	bl	8002250 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d8a:	f7fe fa61 	bl	8002250 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e0d5      	b.n	8003f48 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d9c:	4b14      	ldr	r3, [pc, #80]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1ef      	bne.n	8003d8a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 80c9 	beq.w	8003f46 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003db4:	4b0e      	ldr	r3, [pc, #56]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	2b0c      	cmp	r3, #12
 8003dbe:	f000 8083 	beq.w	8003ec8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d15e      	bne.n	8003e88 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dca:	4b09      	ldr	r3, [pc, #36]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a08      	ldr	r2, [pc, #32]	@ (8003df0 <HAL_RCC_OscConfig+0x4b8>)
 8003dd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd6:	f7fe fa3b 	bl	8002250 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ddc:	e00c      	b.n	8003df8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dde:	f7fe fa37 	bl	8002250 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d905      	bls.n	8003df8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e0ab      	b.n	8003f48 <HAL_RCC_OscConfig+0x610>
 8003df0:	40021000 	.word	0x40021000
 8003df4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df8:	4b55      	ldr	r3, [pc, #340]	@ (8003f50 <HAL_RCC_OscConfig+0x618>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1ec      	bne.n	8003dde <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e04:	4b52      	ldr	r3, [pc, #328]	@ (8003f50 <HAL_RCC_OscConfig+0x618>)
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	4b52      	ldr	r3, [pc, #328]	@ (8003f54 <HAL_RCC_OscConfig+0x61c>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6a11      	ldr	r1, [r2, #32]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e14:	3a01      	subs	r2, #1
 8003e16:	0112      	lsls	r2, r2, #4
 8003e18:	4311      	orrs	r1, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003e1e:	0212      	lsls	r2, r2, #8
 8003e20:	4311      	orrs	r1, r2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e26:	0852      	lsrs	r2, r2, #1
 8003e28:	3a01      	subs	r2, #1
 8003e2a:	0552      	lsls	r2, r2, #21
 8003e2c:	4311      	orrs	r1, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e32:	0852      	lsrs	r2, r2, #1
 8003e34:	3a01      	subs	r2, #1
 8003e36:	0652      	lsls	r2, r2, #25
 8003e38:	4311      	orrs	r1, r2
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e3e:	06d2      	lsls	r2, r2, #27
 8003e40:	430a      	orrs	r2, r1
 8003e42:	4943      	ldr	r1, [pc, #268]	@ (8003f50 <HAL_RCC_OscConfig+0x618>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e48:	4b41      	ldr	r3, [pc, #260]	@ (8003f50 <HAL_RCC_OscConfig+0x618>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a40      	ldr	r2, [pc, #256]	@ (8003f50 <HAL_RCC_OscConfig+0x618>)
 8003e4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e52:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e54:	4b3e      	ldr	r3, [pc, #248]	@ (8003f50 <HAL_RCC_OscConfig+0x618>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	4a3d      	ldr	r2, [pc, #244]	@ (8003f50 <HAL_RCC_OscConfig+0x618>)
 8003e5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fe f9f6 	bl	8002250 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e68:	f7fe f9f2 	bl	8002250 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e066      	b.n	8003f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e7a:	4b35      	ldr	r3, [pc, #212]	@ (8003f50 <HAL_RCC_OscConfig+0x618>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0f0      	beq.n	8003e68 <HAL_RCC_OscConfig+0x530>
 8003e86:	e05e      	b.n	8003f46 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e88:	4b31      	ldr	r3, [pc, #196]	@ (8003f50 <HAL_RCC_OscConfig+0x618>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a30      	ldr	r2, [pc, #192]	@ (8003f50 <HAL_RCC_OscConfig+0x618>)
 8003e8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fe f9dc 	bl	8002250 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fe f9d8 	bl	8002250 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e04c      	b.n	8003f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eae:	4b28      	ldr	r3, [pc, #160]	@ (8003f50 <HAL_RCC_OscConfig+0x618>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003eba:	4b25      	ldr	r3, [pc, #148]	@ (8003f50 <HAL_RCC_OscConfig+0x618>)
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	4924      	ldr	r1, [pc, #144]	@ (8003f50 <HAL_RCC_OscConfig+0x618>)
 8003ec0:	4b25      	ldr	r3, [pc, #148]	@ (8003f58 <HAL_RCC_OscConfig+0x620>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	60cb      	str	r3, [r1, #12]
 8003ec6:	e03e      	b.n	8003f46 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e039      	b.n	8003f48 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f50 <HAL_RCC_OscConfig+0x618>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f003 0203 	and.w	r2, r3, #3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d12c      	bne.n	8003f42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d123      	bne.n	8003f42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d11b      	bne.n	8003f42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d113      	bne.n	8003f42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f24:	085b      	lsrs	r3, r3, #1
 8003f26:	3b01      	subs	r3, #1
 8003f28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d109      	bne.n	8003f42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f38:	085b      	lsrs	r3, r3, #1
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d001      	beq.n	8003f46 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3720      	adds	r7, #32
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40021000 	.word	0x40021000
 8003f54:	019f800c 	.word	0x019f800c
 8003f58:	feeefffc 	.word	0xfeeefffc

08003f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e11e      	b.n	80041b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f74:	4b91      	ldr	r3, [pc, #580]	@ (80041bc <HAL_RCC_ClockConfig+0x260>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 030f 	and.w	r3, r3, #15
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d910      	bls.n	8003fa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f82:	4b8e      	ldr	r3, [pc, #568]	@ (80041bc <HAL_RCC_ClockConfig+0x260>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 020f 	bic.w	r2, r3, #15
 8003f8a:	498c      	ldr	r1, [pc, #560]	@ (80041bc <HAL_RCC_ClockConfig+0x260>)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f92:	4b8a      	ldr	r3, [pc, #552]	@ (80041bc <HAL_RCC_ClockConfig+0x260>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e106      	b.n	80041b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d073      	beq.n	8004098 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d129      	bne.n	800400c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fb8:	4b81      	ldr	r3, [pc, #516]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0f4      	b.n	80041b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003fc8:	f000 f99c 	bl	8004304 <RCC_GetSysClockFreqFromPLLSource>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4a7c      	ldr	r2, [pc, #496]	@ (80041c4 <HAL_RCC_ClockConfig+0x268>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d93f      	bls.n	8004056 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fd6:	4b7a      	ldr	r3, [pc, #488]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d033      	beq.n	8004056 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d12f      	bne.n	8004056 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ff6:	4b72      	ldr	r3, [pc, #456]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ffe:	4a70      	ldr	r2, [pc, #448]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 8004000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004004:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004006:	2380      	movs	r3, #128	@ 0x80
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	e024      	b.n	8004056 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d107      	bne.n	8004024 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004014:	4b6a      	ldr	r3, [pc, #424]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d109      	bne.n	8004034 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0c6      	b.n	80041b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004024:	4b66      	ldr	r3, [pc, #408]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0be      	b.n	80041b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004034:	f000 f8ce 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 8004038:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4a61      	ldr	r2, [pc, #388]	@ (80041c4 <HAL_RCC_ClockConfig+0x268>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d909      	bls.n	8004056 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004042:	4b5f      	ldr	r3, [pc, #380]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800404a:	4a5d      	ldr	r2, [pc, #372]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 800404c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004050:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004052:	2380      	movs	r3, #128	@ 0x80
 8004054:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004056:	4b5a      	ldr	r3, [pc, #360]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f023 0203 	bic.w	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4957      	ldr	r1, [pc, #348]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 8004064:	4313      	orrs	r3, r2
 8004066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004068:	f7fe f8f2 	bl	8002250 <HAL_GetTick>
 800406c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406e:	e00a      	b.n	8004086 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004070:	f7fe f8ee 	bl	8002250 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e095      	b.n	80041b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004086:	4b4e      	ldr	r3, [pc, #312]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 020c 	and.w	r2, r3, #12
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	429a      	cmp	r2, r3
 8004096:	d1eb      	bne.n	8004070 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d023      	beq.n	80040ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b0:	4b43      	ldr	r3, [pc, #268]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4a42      	ldr	r2, [pc, #264]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 80040b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80040ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d007      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80040c8:	4b3d      	ldr	r3, [pc, #244]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80040d0:	4a3b      	ldr	r2, [pc, #236]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 80040d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80040d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d8:	4b39      	ldr	r3, [pc, #228]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4936      	ldr	r1, [pc, #216]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	608b      	str	r3, [r1, #8]
 80040ea:	e008      	b.n	80040fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2b80      	cmp	r3, #128	@ 0x80
 80040f0:	d105      	bne.n	80040fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80040f2:	4b33      	ldr	r3, [pc, #204]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	4a32      	ldr	r2, [pc, #200]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 80040f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040fe:	4b2f      	ldr	r3, [pc, #188]	@ (80041bc <HAL_RCC_ClockConfig+0x260>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d21d      	bcs.n	8004148 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410c:	4b2b      	ldr	r3, [pc, #172]	@ (80041bc <HAL_RCC_ClockConfig+0x260>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f023 020f 	bic.w	r2, r3, #15
 8004114:	4929      	ldr	r1, [pc, #164]	@ (80041bc <HAL_RCC_ClockConfig+0x260>)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	4313      	orrs	r3, r2
 800411a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800411c:	f7fe f898 	bl	8002250 <HAL_GetTick>
 8004120:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004122:	e00a      	b.n	800413a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004124:	f7fe f894 	bl	8002250 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e03b      	b.n	80041b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800413a:	4b20      	ldr	r3, [pc, #128]	@ (80041bc <HAL_RCC_ClockConfig+0x260>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d1ed      	bne.n	8004124 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004154:	4b1a      	ldr	r3, [pc, #104]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4917      	ldr	r1, [pc, #92]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 8004162:	4313      	orrs	r3, r2
 8004164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004172:	4b13      	ldr	r3, [pc, #76]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	490f      	ldr	r1, [pc, #60]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004186:	f000 f825 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 800418a:	4602      	mov	r2, r0
 800418c:	4b0c      	ldr	r3, [pc, #48]	@ (80041c0 <HAL_RCC_ClockConfig+0x264>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	490c      	ldr	r1, [pc, #48]	@ (80041c8 <HAL_RCC_ClockConfig+0x26c>)
 8004198:	5ccb      	ldrb	r3, [r1, r3]
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	fa22 f303 	lsr.w	r3, r2, r3
 80041a2:	4a0a      	ldr	r2, [pc, #40]	@ (80041cc <HAL_RCC_ClockConfig+0x270>)
 80041a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041a6:	4b0a      	ldr	r3, [pc, #40]	@ (80041d0 <HAL_RCC_ClockConfig+0x274>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe f804 	bl	80021b8 <HAL_InitTick>
 80041b0:	4603      	mov	r3, r0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40022000 	.word	0x40022000
 80041c0:	40021000 	.word	0x40021000
 80041c4:	04c4b400 	.word	0x04c4b400
 80041c8:	0800acf0 	.word	0x0800acf0
 80041cc:	20000000 	.word	0x20000000
 80041d0:	20000004 	.word	0x20000004

080041d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80041da:	4b2c      	ldr	r3, [pc, #176]	@ (800428c <HAL_RCC_GetSysClockFreq+0xb8>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 030c 	and.w	r3, r3, #12
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d102      	bne.n	80041ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004290 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	e047      	b.n	800427c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80041ec:	4b27      	ldr	r3, [pc, #156]	@ (800428c <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 030c 	and.w	r3, r3, #12
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d102      	bne.n	80041fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041f8:	4b25      	ldr	r3, [pc, #148]	@ (8004290 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	e03e      	b.n	800427c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80041fe:	4b23      	ldr	r3, [pc, #140]	@ (800428c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 030c 	and.w	r3, r3, #12
 8004206:	2b0c      	cmp	r3, #12
 8004208:	d136      	bne.n	8004278 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800420a:	4b20      	ldr	r3, [pc, #128]	@ (800428c <HAL_RCC_GetSysClockFreq+0xb8>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004214:	4b1d      	ldr	r3, [pc, #116]	@ (800428c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	3301      	adds	r3, #1
 8004220:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b03      	cmp	r3, #3
 8004226:	d10c      	bne.n	8004242 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004228:	4a19      	ldr	r2, [pc, #100]	@ (8004290 <HAL_RCC_GetSysClockFreq+0xbc>)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004230:	4a16      	ldr	r2, [pc, #88]	@ (800428c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004232:	68d2      	ldr	r2, [r2, #12]
 8004234:	0a12      	lsrs	r2, r2, #8
 8004236:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800423a:	fb02 f303 	mul.w	r3, r2, r3
 800423e:	617b      	str	r3, [r7, #20]
      break;
 8004240:	e00c      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004242:	4a13      	ldr	r2, [pc, #76]	@ (8004290 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	fbb2 f3f3 	udiv	r3, r2, r3
 800424a:	4a10      	ldr	r2, [pc, #64]	@ (800428c <HAL_RCC_GetSysClockFreq+0xb8>)
 800424c:	68d2      	ldr	r2, [r2, #12]
 800424e:	0a12      	lsrs	r2, r2, #8
 8004250:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004254:	fb02 f303 	mul.w	r3, r2, r3
 8004258:	617b      	str	r3, [r7, #20]
      break;
 800425a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800425c:	4b0b      	ldr	r3, [pc, #44]	@ (800428c <HAL_RCC_GetSysClockFreq+0xb8>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	0e5b      	lsrs	r3, r3, #25
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	3301      	adds	r3, #1
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	fbb2 f3f3 	udiv	r3, r2, r3
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	e001      	b.n	800427c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800427c:	693b      	ldr	r3, [r7, #16]
}
 800427e:	4618      	mov	r0, r3
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40021000 	.word	0x40021000
 8004290:	00f42400 	.word	0x00f42400

08004294 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004298:	4b03      	ldr	r3, [pc, #12]	@ (80042a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800429a:	681b      	ldr	r3, [r3, #0]
}
 800429c:	4618      	mov	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	20000000 	.word	0x20000000

080042ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042b0:	f7ff fff0 	bl	8004294 <HAL_RCC_GetHCLKFreq>
 80042b4:	4602      	mov	r2, r0
 80042b6:	4b06      	ldr	r3, [pc, #24]	@ (80042d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	0a1b      	lsrs	r3, r3, #8
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	4904      	ldr	r1, [pc, #16]	@ (80042d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042c2:	5ccb      	ldrb	r3, [r1, r3]
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40021000 	.word	0x40021000
 80042d4:	0800ad00 	.word	0x0800ad00

080042d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042dc:	f7ff ffda 	bl	8004294 <HAL_RCC_GetHCLKFreq>
 80042e0:	4602      	mov	r2, r0
 80042e2:	4b06      	ldr	r3, [pc, #24]	@ (80042fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	0adb      	lsrs	r3, r3, #11
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	4904      	ldr	r1, [pc, #16]	@ (8004300 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042ee:	5ccb      	ldrb	r3, [r1, r3]
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40021000 	.word	0x40021000
 8004300:	0800ad00 	.word	0x0800ad00

08004304 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800430a:	4b1e      	ldr	r3, [pc, #120]	@ (8004384 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004314:	4b1b      	ldr	r3, [pc, #108]	@ (8004384 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	091b      	lsrs	r3, r3, #4
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	3301      	adds	r3, #1
 8004320:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	2b03      	cmp	r3, #3
 8004326:	d10c      	bne.n	8004342 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004328:	4a17      	ldr	r2, [pc, #92]	@ (8004388 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004330:	4a14      	ldr	r2, [pc, #80]	@ (8004384 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004332:	68d2      	ldr	r2, [r2, #12]
 8004334:	0a12      	lsrs	r2, r2, #8
 8004336:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	617b      	str	r3, [r7, #20]
    break;
 8004340:	e00c      	b.n	800435c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004342:	4a11      	ldr	r2, [pc, #68]	@ (8004388 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	fbb2 f3f3 	udiv	r3, r2, r3
 800434a:	4a0e      	ldr	r2, [pc, #56]	@ (8004384 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800434c:	68d2      	ldr	r2, [r2, #12]
 800434e:	0a12      	lsrs	r2, r2, #8
 8004350:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004354:	fb02 f303 	mul.w	r3, r2, r3
 8004358:	617b      	str	r3, [r7, #20]
    break;
 800435a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800435c:	4b09      	ldr	r3, [pc, #36]	@ (8004384 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	0e5b      	lsrs	r3, r3, #25
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	3301      	adds	r3, #1
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004376:	687b      	ldr	r3, [r7, #4]
}
 8004378:	4618      	mov	r0, r3
 800437a:	371c      	adds	r7, #28
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	40021000 	.word	0x40021000
 8004388:	00f42400 	.word	0x00f42400

0800438c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004394:	2300      	movs	r3, #0
 8004396:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004398:	2300      	movs	r3, #0
 800439a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 8098 	beq.w	80044da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043aa:	2300      	movs	r3, #0
 80043ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ae:	4b43      	ldr	r3, [pc, #268]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10d      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ba:	4b40      	ldr	r3, [pc, #256]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043be:	4a3f      	ldr	r2, [pc, #252]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80043c6:	4b3d      	ldr	r3, [pc, #244]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ce:	60bb      	str	r3, [r7, #8]
 80043d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043d2:	2301      	movs	r3, #1
 80043d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043d6:	4b3a      	ldr	r3, [pc, #232]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a39      	ldr	r2, [pc, #228]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043e2:	f7fd ff35 	bl	8002250 <HAL_GetTick>
 80043e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043e8:	e009      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ea:	f7fd ff31 	bl	8002250 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d902      	bls.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	74fb      	strb	r3, [r7, #19]
        break;
 80043fc:	e005      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043fe:	4b30      	ldr	r3, [pc, #192]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0ef      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800440a:	7cfb      	ldrb	r3, [r7, #19]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d159      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004410:	4b2a      	ldr	r3, [pc, #168]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800441a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d01e      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	429a      	cmp	r2, r3
 800442a:	d019      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800442c:	4b23      	ldr	r3, [pc, #140]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004436:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004438:	4b20      	ldr	r3, [pc, #128]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443e:	4a1f      	ldr	r2, [pc, #124]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004448:	4b1c      	ldr	r3, [pc, #112]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800444e:	4a1b      	ldr	r2, [pc, #108]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004458:	4a18      	ldr	r2, [pc, #96]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d016      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446a:	f7fd fef1 	bl	8002250 <HAL_GetTick>
 800446e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004470:	e00b      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004472:	f7fd feed 	bl	8002250 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004480:	4293      	cmp	r3, r2
 8004482:	d902      	bls.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	74fb      	strb	r3, [r7, #19]
            break;
 8004488:	e006      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800448a:	4b0c      	ldr	r3, [pc, #48]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800448c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0ec      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004498:	7cfb      	ldrb	r3, [r7, #19]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10b      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800449e:	4b07      	ldr	r3, [pc, #28]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	4903      	ldr	r1, [pc, #12]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80044b4:	e008      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044b6:	7cfb      	ldrb	r3, [r7, #19]
 80044b8:	74bb      	strb	r3, [r7, #18]
 80044ba:	e005      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c4:	7cfb      	ldrb	r3, [r7, #19]
 80044c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044c8:	7c7b      	ldrb	r3, [r7, #17]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d105      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ce:	4ba6      	ldr	r3, [pc, #664]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d2:	4aa5      	ldr	r2, [pc, #660]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044e6:	4ba0      	ldr	r3, [pc, #640]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ec:	f023 0203 	bic.w	r2, r3, #3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	499c      	ldr	r1, [pc, #624]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004508:	4b97      	ldr	r3, [pc, #604]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450e:	f023 020c 	bic.w	r2, r3, #12
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	4994      	ldr	r1, [pc, #592]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800452a:	4b8f      	ldr	r3, [pc, #572]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004530:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	498b      	ldr	r1, [pc, #556]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800454c:	4b86      	ldr	r3, [pc, #536]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004552:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	4983      	ldr	r1, [pc, #524]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800456e:	4b7e      	ldr	r3, [pc, #504]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004574:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	497a      	ldr	r1, [pc, #488]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004590:	4b75      	ldr	r3, [pc, #468]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004596:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	4972      	ldr	r1, [pc, #456]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	4969      	ldr	r1, [pc, #420]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045d4:	4b64      	ldr	r3, [pc, #400]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	4961      	ldr	r1, [pc, #388]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045f6:	4b5c      	ldr	r3, [pc, #368]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004604:	4958      	ldr	r1, [pc, #352]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004614:	2b00      	cmp	r3, #0
 8004616:	d015      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004618:	4b53      	ldr	r3, [pc, #332]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004626:	4950      	ldr	r1, [pc, #320]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004636:	d105      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004638:	4b4b      	ldr	r3, [pc, #300]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4a4a      	ldr	r2, [pc, #296]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800463e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004642:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800464c:	2b00      	cmp	r3, #0
 800464e:	d015      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004650:	4b45      	ldr	r3, [pc, #276]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004656:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465e:	4942      	ldr	r1, [pc, #264]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800466e:	d105      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004670:	4b3d      	ldr	r3, [pc, #244]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4a3c      	ldr	r2, [pc, #240]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800467a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d015      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004688:	4b37      	ldr	r3, [pc, #220]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004696:	4934      	ldr	r1, [pc, #208]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046a6:	d105      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a8:	4b2f      	ldr	r3, [pc, #188]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4a2e      	ldr	r2, [pc, #184]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d015      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046c0:	4b29      	ldr	r3, [pc, #164]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ce:	4926      	ldr	r1, [pc, #152]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046de:	d105      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046e0:	4b21      	ldr	r3, [pc, #132]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	4a20      	ldr	r2, [pc, #128]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d015      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004706:	4918      	ldr	r1, [pc, #96]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004712:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004716:	d105      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004718:	4b13      	ldr	r3, [pc, #76]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4a12      	ldr	r2, [pc, #72]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800471e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004722:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d015      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004730:	4b0d      	ldr	r3, [pc, #52]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004736:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800473e:	490a      	ldr	r1, [pc, #40]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800474a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800474e:	d105      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004750:	4b05      	ldr	r3, [pc, #20]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	4a04      	ldr	r2, [pc, #16]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800475a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800475c:	7cbb      	ldrb	r3, [r7, #18]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40021000 	.word	0x40021000

0800476c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e09d      	b.n	80048ba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004782:	2b00      	cmp	r3, #0
 8004784:	d108      	bne.n	8004798 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800478e:	d009      	beq.n	80047a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	61da      	str	r2, [r3, #28]
 8004796:	e005      	b.n	80047a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fc fe70 	bl	80014a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80047e4:	d902      	bls.n	80047ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	e002      	b.n	80047f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80047ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80047fa:	d007      	beq.n	800480c <HAL_SPI_Init+0xa0>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004804:	d002      	beq.n	800480c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800484e:	ea42 0103 	orr.w	r1, r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004856:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	0c1b      	lsrs	r3, r3, #16
 8004868:	f003 0204 	and.w	r2, r3, #4
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004888:	ea42 0103 	orr.w	r1, r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69da      	ldr	r2, [r3, #28]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b082      	sub	sp, #8
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e049      	b.n	8004968 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d106      	bne.n	80048ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7fd f923 	bl	8001b34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2202      	movs	r2, #2
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3304      	adds	r3, #4
 80048fe:	4619      	mov	r1, r3
 8004900:	4610      	mov	r0, r2
 8004902:	f000 faef 	bl	8004ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d109      	bne.n	8004994 <HAL_TIM_PWM_Start+0x24>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b01      	cmp	r3, #1
 800498a:	bf14      	ite	ne
 800498c:	2301      	movne	r3, #1
 800498e:	2300      	moveq	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	e03c      	b.n	8004a0e <HAL_TIM_PWM_Start+0x9e>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b04      	cmp	r3, #4
 8004998:	d109      	bne.n	80049ae <HAL_TIM_PWM_Start+0x3e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	bf14      	ite	ne
 80049a6:	2301      	movne	r3, #1
 80049a8:	2300      	moveq	r3, #0
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	e02f      	b.n	8004a0e <HAL_TIM_PWM_Start+0x9e>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d109      	bne.n	80049c8 <HAL_TIM_PWM_Start+0x58>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b01      	cmp	r3, #1
 80049be:	bf14      	ite	ne
 80049c0:	2301      	movne	r3, #1
 80049c2:	2300      	moveq	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	e022      	b.n	8004a0e <HAL_TIM_PWM_Start+0x9e>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b0c      	cmp	r3, #12
 80049cc:	d109      	bne.n	80049e2 <HAL_TIM_PWM_Start+0x72>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	bf14      	ite	ne
 80049da:	2301      	movne	r3, #1
 80049dc:	2300      	moveq	r3, #0
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	e015      	b.n	8004a0e <HAL_TIM_PWM_Start+0x9e>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d109      	bne.n	80049fc <HAL_TIM_PWM_Start+0x8c>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	bf14      	ite	ne
 80049f4:	2301      	movne	r3, #1
 80049f6:	2300      	moveq	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	e008      	b.n	8004a0e <HAL_TIM_PWM_Start+0x9e>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	bf14      	ite	ne
 8004a08:	2301      	movne	r3, #1
 8004a0a:	2300      	moveq	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e097      	b.n	8004b46 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d104      	bne.n	8004a26 <HAL_TIM_PWM_Start+0xb6>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a24:	e023      	b.n	8004a6e <HAL_TIM_PWM_Start+0xfe>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d104      	bne.n	8004a36 <HAL_TIM_PWM_Start+0xc6>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a34:	e01b      	b.n	8004a6e <HAL_TIM_PWM_Start+0xfe>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d104      	bne.n	8004a46 <HAL_TIM_PWM_Start+0xd6>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a44:	e013      	b.n	8004a6e <HAL_TIM_PWM_Start+0xfe>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b0c      	cmp	r3, #12
 8004a4a:	d104      	bne.n	8004a56 <HAL_TIM_PWM_Start+0xe6>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a54:	e00b      	b.n	8004a6e <HAL_TIM_PWM_Start+0xfe>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d104      	bne.n	8004a66 <HAL_TIM_PWM_Start+0xf6>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a64:	e003      	b.n	8004a6e <HAL_TIM_PWM_Start+0xfe>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2201      	movs	r2, #1
 8004a74:	6839      	ldr	r1, [r7, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fdc6 	bl	8005608 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a33      	ldr	r2, [pc, #204]	@ (8004b50 <HAL_TIM_PWM_Start+0x1e0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d013      	beq.n	8004aae <HAL_TIM_PWM_Start+0x13e>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a32      	ldr	r2, [pc, #200]	@ (8004b54 <HAL_TIM_PWM_Start+0x1e4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00e      	beq.n	8004aae <HAL_TIM_PWM_Start+0x13e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a30      	ldr	r2, [pc, #192]	@ (8004b58 <HAL_TIM_PWM_Start+0x1e8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d009      	beq.n	8004aae <HAL_TIM_PWM_Start+0x13e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a2f      	ldr	r2, [pc, #188]	@ (8004b5c <HAL_TIM_PWM_Start+0x1ec>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d004      	beq.n	8004aae <HAL_TIM_PWM_Start+0x13e>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a2d      	ldr	r2, [pc, #180]	@ (8004b60 <HAL_TIM_PWM_Start+0x1f0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d101      	bne.n	8004ab2 <HAL_TIM_PWM_Start+0x142>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <HAL_TIM_PWM_Start+0x144>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d007      	beq.n	8004ac8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ac6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a20      	ldr	r2, [pc, #128]	@ (8004b50 <HAL_TIM_PWM_Start+0x1e0>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d018      	beq.n	8004b04 <HAL_TIM_PWM_Start+0x194>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ada:	d013      	beq.n	8004b04 <HAL_TIM_PWM_Start+0x194>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a20      	ldr	r2, [pc, #128]	@ (8004b64 <HAL_TIM_PWM_Start+0x1f4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00e      	beq.n	8004b04 <HAL_TIM_PWM_Start+0x194>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1f      	ldr	r2, [pc, #124]	@ (8004b68 <HAL_TIM_PWM_Start+0x1f8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d009      	beq.n	8004b04 <HAL_TIM_PWM_Start+0x194>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a17      	ldr	r2, [pc, #92]	@ (8004b54 <HAL_TIM_PWM_Start+0x1e4>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d004      	beq.n	8004b04 <HAL_TIM_PWM_Start+0x194>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a16      	ldr	r2, [pc, #88]	@ (8004b58 <HAL_TIM_PWM_Start+0x1e8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d115      	bne.n	8004b30 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	4b18      	ldr	r3, [pc, #96]	@ (8004b6c <HAL_TIM_PWM_Start+0x1fc>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b06      	cmp	r3, #6
 8004b14:	d015      	beq.n	8004b42 <HAL_TIM_PWM_Start+0x1d2>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b1c:	d011      	beq.n	8004b42 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0201 	orr.w	r2, r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2e:	e008      	b.n	8004b42 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	e000      	b.n	8004b44 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40012c00 	.word	0x40012c00
 8004b54:	40013400 	.word	0x40013400
 8004b58:	40014000 	.word	0x40014000
 8004b5c:	40014400 	.word	0x40014400
 8004b60:	40014800 	.word	0x40014800
 8004b64:	40000400 	.word	0x40000400
 8004b68:	40000800 	.word	0x40000800
 8004b6c:	00010007 	.word	0x00010007

08004b70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e097      	b.n	8004cb4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d106      	bne.n	8004b9e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7fd f835 	bl	8001c08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004bb4:	f023 0307 	bic.w	r3, r3, #7
 8004bb8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	f000 f98d 	bl	8004ee4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bf2:	f023 0303 	bic.w	r3, r3, #3
 8004bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	4313      	orrs	r3, r2
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004c10:	f023 030c 	bic.w	r3, r3, #12
 8004c14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	011a      	lsls	r2, r3, #4
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	031b      	lsls	r3, r3, #12
 8004c40:	4313      	orrs	r3, r2
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004c4e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004c56:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	4313      	orrs	r3, r2
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e0ff      	b.n	8004eda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b14      	cmp	r3, #20
 8004ce6:	f200 80f0 	bhi.w	8004eca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004cea:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf0:	08004d45 	.word	0x08004d45
 8004cf4:	08004ecb 	.word	0x08004ecb
 8004cf8:	08004ecb 	.word	0x08004ecb
 8004cfc:	08004ecb 	.word	0x08004ecb
 8004d00:	08004d85 	.word	0x08004d85
 8004d04:	08004ecb 	.word	0x08004ecb
 8004d08:	08004ecb 	.word	0x08004ecb
 8004d0c:	08004ecb 	.word	0x08004ecb
 8004d10:	08004dc7 	.word	0x08004dc7
 8004d14:	08004ecb 	.word	0x08004ecb
 8004d18:	08004ecb 	.word	0x08004ecb
 8004d1c:	08004ecb 	.word	0x08004ecb
 8004d20:	08004e07 	.word	0x08004e07
 8004d24:	08004ecb 	.word	0x08004ecb
 8004d28:	08004ecb 	.word	0x08004ecb
 8004d2c:	08004ecb 	.word	0x08004ecb
 8004d30:	08004e49 	.word	0x08004e49
 8004d34:	08004ecb 	.word	0x08004ecb
 8004d38:	08004ecb 	.word	0x08004ecb
 8004d3c:	08004ecb 	.word	0x08004ecb
 8004d40:	08004e89 	.word	0x08004e89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 f966 	bl	800501c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699a      	ldr	r2, [r3, #24]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0208 	orr.w	r2, r2, #8
 8004d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699a      	ldr	r2, [r3, #24]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0204 	bic.w	r2, r2, #4
 8004d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6999      	ldr	r1, [r3, #24]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	691a      	ldr	r2, [r3, #16]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	619a      	str	r2, [r3, #24]
      break;
 8004d82:	e0a5      	b.n	8004ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68b9      	ldr	r1, [r7, #8]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 f9d6 	bl	800513c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699a      	ldr	r2, [r3, #24]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6999      	ldr	r1, [r3, #24]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	021a      	lsls	r2, r3, #8
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	619a      	str	r2, [r3, #24]
      break;
 8004dc4:	e084      	b.n	8004ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68b9      	ldr	r1, [r7, #8]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 fa3f 	bl	8005250 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69da      	ldr	r2, [r3, #28]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f042 0208 	orr.w	r2, r2, #8
 8004de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	69da      	ldr	r2, [r3, #28]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0204 	bic.w	r2, r2, #4
 8004df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	69d9      	ldr	r1, [r3, #28]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	61da      	str	r2, [r3, #28]
      break;
 8004e04:	e064      	b.n	8004ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68b9      	ldr	r1, [r7, #8]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 faa7 	bl	8005360 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69da      	ldr	r2, [r3, #28]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69d9      	ldr	r1, [r3, #28]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	021a      	lsls	r2, r3, #8
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	61da      	str	r2, [r3, #28]
      break;
 8004e46:	e043      	b.n	8004ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fb10 	bl	8005474 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0208 	orr.w	r2, r2, #8
 8004e62:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0204 	bic.w	r2, r2, #4
 8004e72:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	691a      	ldr	r2, [r3, #16]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004e86:	e023      	b.n	8004ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fb54 	bl	800553c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ea2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eb2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	021a      	lsls	r2, r3, #8
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004ec8:	e002      	b.n	8004ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8004ece:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop

08004ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a42      	ldr	r2, [pc, #264]	@ (8005000 <TIM_Base_SetConfig+0x11c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00f      	beq.n	8004f1c <TIM_Base_SetConfig+0x38>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f02:	d00b      	beq.n	8004f1c <TIM_Base_SetConfig+0x38>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a3f      	ldr	r2, [pc, #252]	@ (8005004 <TIM_Base_SetConfig+0x120>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d007      	beq.n	8004f1c <TIM_Base_SetConfig+0x38>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a3e      	ldr	r2, [pc, #248]	@ (8005008 <TIM_Base_SetConfig+0x124>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d003      	beq.n	8004f1c <TIM_Base_SetConfig+0x38>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a3d      	ldr	r2, [pc, #244]	@ (800500c <TIM_Base_SetConfig+0x128>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d108      	bne.n	8004f2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a33      	ldr	r2, [pc, #204]	@ (8005000 <TIM_Base_SetConfig+0x11c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d01b      	beq.n	8004f6e <TIM_Base_SetConfig+0x8a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f3c:	d017      	beq.n	8004f6e <TIM_Base_SetConfig+0x8a>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a30      	ldr	r2, [pc, #192]	@ (8005004 <TIM_Base_SetConfig+0x120>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d013      	beq.n	8004f6e <TIM_Base_SetConfig+0x8a>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a2f      	ldr	r2, [pc, #188]	@ (8005008 <TIM_Base_SetConfig+0x124>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00f      	beq.n	8004f6e <TIM_Base_SetConfig+0x8a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a2e      	ldr	r2, [pc, #184]	@ (800500c <TIM_Base_SetConfig+0x128>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00b      	beq.n	8004f6e <TIM_Base_SetConfig+0x8a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a2d      	ldr	r2, [pc, #180]	@ (8005010 <TIM_Base_SetConfig+0x12c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d007      	beq.n	8004f6e <TIM_Base_SetConfig+0x8a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a2c      	ldr	r2, [pc, #176]	@ (8005014 <TIM_Base_SetConfig+0x130>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d003      	beq.n	8004f6e <TIM_Base_SetConfig+0x8a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a2b      	ldr	r2, [pc, #172]	@ (8005018 <TIM_Base_SetConfig+0x134>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d108      	bne.n	8004f80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a16      	ldr	r2, [pc, #88]	@ (8005000 <TIM_Base_SetConfig+0x11c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d00f      	beq.n	8004fcc <TIM_Base_SetConfig+0xe8>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a17      	ldr	r2, [pc, #92]	@ (800500c <TIM_Base_SetConfig+0x128>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00b      	beq.n	8004fcc <TIM_Base_SetConfig+0xe8>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a16      	ldr	r2, [pc, #88]	@ (8005010 <TIM_Base_SetConfig+0x12c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d007      	beq.n	8004fcc <TIM_Base_SetConfig+0xe8>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a15      	ldr	r2, [pc, #84]	@ (8005014 <TIM_Base_SetConfig+0x130>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d003      	beq.n	8004fcc <TIM_Base_SetConfig+0xe8>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a14      	ldr	r2, [pc, #80]	@ (8005018 <TIM_Base_SetConfig+0x134>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d103      	bne.n	8004fd4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	691a      	ldr	r2, [r3, #16]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d105      	bne.n	8004ff2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f023 0201 	bic.w	r2, r3, #1
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	611a      	str	r2, [r3, #16]
  }
}
 8004ff2:	bf00      	nop
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40012c00 	.word	0x40012c00
 8005004:	40000400 	.word	0x40000400
 8005008:	40000800 	.word	0x40000800
 800500c:	40013400 	.word	0x40013400
 8005010:	40014000 	.word	0x40014000
 8005014:	40014400 	.word	0x40014400
 8005018:	40014800 	.word	0x40014800

0800501c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	f023 0201 	bic.w	r2, r3, #1
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800504a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800504e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0303 	bic.w	r3, r3, #3
 8005056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f023 0302 	bic.w	r3, r3, #2
 8005068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a2c      	ldr	r2, [pc, #176]	@ (8005128 <TIM_OC1_SetConfig+0x10c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00f      	beq.n	800509c <TIM_OC1_SetConfig+0x80>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a2b      	ldr	r2, [pc, #172]	@ (800512c <TIM_OC1_SetConfig+0x110>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00b      	beq.n	800509c <TIM_OC1_SetConfig+0x80>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a2a      	ldr	r2, [pc, #168]	@ (8005130 <TIM_OC1_SetConfig+0x114>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d007      	beq.n	800509c <TIM_OC1_SetConfig+0x80>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a29      	ldr	r2, [pc, #164]	@ (8005134 <TIM_OC1_SetConfig+0x118>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d003      	beq.n	800509c <TIM_OC1_SetConfig+0x80>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a28      	ldr	r2, [pc, #160]	@ (8005138 <TIM_OC1_SetConfig+0x11c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d10c      	bne.n	80050b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f023 0308 	bic.w	r3, r3, #8
 80050a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f023 0304 	bic.w	r3, r3, #4
 80050b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005128 <TIM_OC1_SetConfig+0x10c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00f      	beq.n	80050de <TIM_OC1_SetConfig+0xc2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a1a      	ldr	r2, [pc, #104]	@ (800512c <TIM_OC1_SetConfig+0x110>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00b      	beq.n	80050de <TIM_OC1_SetConfig+0xc2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a19      	ldr	r2, [pc, #100]	@ (8005130 <TIM_OC1_SetConfig+0x114>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d007      	beq.n	80050de <TIM_OC1_SetConfig+0xc2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a18      	ldr	r2, [pc, #96]	@ (8005134 <TIM_OC1_SetConfig+0x118>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d003      	beq.n	80050de <TIM_OC1_SetConfig+0xc2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a17      	ldr	r2, [pc, #92]	@ (8005138 <TIM_OC1_SetConfig+0x11c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d111      	bne.n	8005102 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	621a      	str	r2, [r3, #32]
}
 800511c:	bf00      	nop
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	40012c00 	.word	0x40012c00
 800512c:	40013400 	.word	0x40013400
 8005130:	40014000 	.word	0x40014000
 8005134:	40014400 	.word	0x40014400
 8005138:	40014800 	.word	0x40014800

0800513c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	f023 0210 	bic.w	r2, r3, #16
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800516a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800516e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	021b      	lsls	r3, r3, #8
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f023 0320 	bic.w	r3, r3, #32
 800518a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	4313      	orrs	r3, r2
 8005196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a28      	ldr	r2, [pc, #160]	@ (800523c <TIM_OC2_SetConfig+0x100>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d003      	beq.n	80051a8 <TIM_OC2_SetConfig+0x6c>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a27      	ldr	r2, [pc, #156]	@ (8005240 <TIM_OC2_SetConfig+0x104>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d10d      	bne.n	80051c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a1d      	ldr	r2, [pc, #116]	@ (800523c <TIM_OC2_SetConfig+0x100>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00f      	beq.n	80051ec <TIM_OC2_SetConfig+0xb0>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005240 <TIM_OC2_SetConfig+0x104>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00b      	beq.n	80051ec <TIM_OC2_SetConfig+0xb0>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005244 <TIM_OC2_SetConfig+0x108>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d007      	beq.n	80051ec <TIM_OC2_SetConfig+0xb0>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a1a      	ldr	r2, [pc, #104]	@ (8005248 <TIM_OC2_SetConfig+0x10c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_OC2_SetConfig+0xb0>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a19      	ldr	r2, [pc, #100]	@ (800524c <TIM_OC2_SetConfig+0x110>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d113      	bne.n	8005214 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	4313      	orrs	r3, r2
 8005212:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	621a      	str	r2, [r3, #32]
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	40012c00 	.word	0x40012c00
 8005240:	40013400 	.word	0x40013400
 8005244:	40014000 	.word	0x40014000
 8005248:	40014400 	.word	0x40014400
 800524c:	40014800 	.word	0x40014800

08005250 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800527e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0303 	bic.w	r3, r3, #3
 800528a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800529c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	021b      	lsls	r3, r3, #8
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a27      	ldr	r2, [pc, #156]	@ (800534c <TIM_OC3_SetConfig+0xfc>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d003      	beq.n	80052ba <TIM_OC3_SetConfig+0x6a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a26      	ldr	r2, [pc, #152]	@ (8005350 <TIM_OC3_SetConfig+0x100>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d10d      	bne.n	80052d6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	021b      	lsls	r3, r3, #8
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a1c      	ldr	r2, [pc, #112]	@ (800534c <TIM_OC3_SetConfig+0xfc>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00f      	beq.n	80052fe <TIM_OC3_SetConfig+0xae>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005350 <TIM_OC3_SetConfig+0x100>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00b      	beq.n	80052fe <TIM_OC3_SetConfig+0xae>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a1a      	ldr	r2, [pc, #104]	@ (8005354 <TIM_OC3_SetConfig+0x104>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d007      	beq.n	80052fe <TIM_OC3_SetConfig+0xae>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a19      	ldr	r2, [pc, #100]	@ (8005358 <TIM_OC3_SetConfig+0x108>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d003      	beq.n	80052fe <TIM_OC3_SetConfig+0xae>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a18      	ldr	r2, [pc, #96]	@ (800535c <TIM_OC3_SetConfig+0x10c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d113      	bne.n	8005326 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800530c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	621a      	str	r2, [r3, #32]
}
 8005340:	bf00      	nop
 8005342:	371c      	adds	r7, #28
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	40012c00 	.word	0x40012c00
 8005350:	40013400 	.word	0x40013400
 8005354:	40014000 	.word	0x40014000
 8005358:	40014400 	.word	0x40014400
 800535c:	40014800 	.word	0x40014800

08005360 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800538e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800539a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	031b      	lsls	r3, r3, #12
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a28      	ldr	r2, [pc, #160]	@ (8005460 <TIM_OC4_SetConfig+0x100>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d003      	beq.n	80053cc <TIM_OC4_SetConfig+0x6c>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a27      	ldr	r2, [pc, #156]	@ (8005464 <TIM_OC4_SetConfig+0x104>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d10d      	bne.n	80053e8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80053d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	031b      	lsls	r3, r3, #12
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005460 <TIM_OC4_SetConfig+0x100>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00f      	beq.n	8005410 <TIM_OC4_SetConfig+0xb0>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005464 <TIM_OC4_SetConfig+0x104>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00b      	beq.n	8005410 <TIM_OC4_SetConfig+0xb0>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005468 <TIM_OC4_SetConfig+0x108>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d007      	beq.n	8005410 <TIM_OC4_SetConfig+0xb0>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a1a      	ldr	r2, [pc, #104]	@ (800546c <TIM_OC4_SetConfig+0x10c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d003      	beq.n	8005410 <TIM_OC4_SetConfig+0xb0>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a19      	ldr	r2, [pc, #100]	@ (8005470 <TIM_OC4_SetConfig+0x110>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d113      	bne.n	8005438 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005416:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800541e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	019b      	lsls	r3, r3, #6
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	019b      	lsls	r3, r3, #6
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40012c00 	.word	0x40012c00
 8005464:	40013400 	.word	0x40013400
 8005468:	40014000 	.word	0x40014000
 800546c:	40014400 	.word	0x40014400
 8005470:	40014800 	.word	0x40014800

08005474 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800549a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80054b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	041b      	lsls	r3, r3, #16
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a17      	ldr	r2, [pc, #92]	@ (8005528 <TIM_OC5_SetConfig+0xb4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00f      	beq.n	80054ee <TIM_OC5_SetConfig+0x7a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a16      	ldr	r2, [pc, #88]	@ (800552c <TIM_OC5_SetConfig+0xb8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00b      	beq.n	80054ee <TIM_OC5_SetConfig+0x7a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a15      	ldr	r2, [pc, #84]	@ (8005530 <TIM_OC5_SetConfig+0xbc>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d007      	beq.n	80054ee <TIM_OC5_SetConfig+0x7a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a14      	ldr	r2, [pc, #80]	@ (8005534 <TIM_OC5_SetConfig+0xc0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d003      	beq.n	80054ee <TIM_OC5_SetConfig+0x7a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a13      	ldr	r2, [pc, #76]	@ (8005538 <TIM_OC5_SetConfig+0xc4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d109      	bne.n	8005502 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	021b      	lsls	r3, r3, #8
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	621a      	str	r2, [r3, #32]
}
 800551c:	bf00      	nop
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	40012c00 	.word	0x40012c00
 800552c:	40013400 	.word	0x40013400
 8005530:	40014000 	.word	0x40014000
 8005534:	40014400 	.word	0x40014400
 8005538:	40014800 	.word	0x40014800

0800553c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800556a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800556e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	051b      	lsls	r3, r3, #20
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a18      	ldr	r2, [pc, #96]	@ (80055f4 <TIM_OC6_SetConfig+0xb8>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00f      	beq.n	80055b8 <TIM_OC6_SetConfig+0x7c>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a17      	ldr	r2, [pc, #92]	@ (80055f8 <TIM_OC6_SetConfig+0xbc>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00b      	beq.n	80055b8 <TIM_OC6_SetConfig+0x7c>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a16      	ldr	r2, [pc, #88]	@ (80055fc <TIM_OC6_SetConfig+0xc0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d007      	beq.n	80055b8 <TIM_OC6_SetConfig+0x7c>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a15      	ldr	r2, [pc, #84]	@ (8005600 <TIM_OC6_SetConfig+0xc4>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d003      	beq.n	80055b8 <TIM_OC6_SetConfig+0x7c>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a14      	ldr	r2, [pc, #80]	@ (8005604 <TIM_OC6_SetConfig+0xc8>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d109      	bne.n	80055cc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	029b      	lsls	r3, r3, #10
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	621a      	str	r2, [r3, #32]
}
 80055e6:	bf00      	nop
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40012c00 	.word	0x40012c00
 80055f8:	40013400 	.word	0x40013400
 80055fc:	40014000 	.word	0x40014000
 8005600:	40014400 	.word	0x40014400
 8005604:	40014800 	.word	0x40014800

08005608 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f003 031f 	and.w	r3, r3, #31
 800561a:	2201      	movs	r2, #1
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a1a      	ldr	r2, [r3, #32]
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	43db      	mvns	r3, r3
 800562a:	401a      	ands	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a1a      	ldr	r2, [r3, #32]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f003 031f 	and.w	r3, r3, #31
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	fa01 f303 	lsl.w	r3, r1, r3
 8005640:	431a      	orrs	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	621a      	str	r2, [r3, #32]
}
 8005646:	bf00      	nop
 8005648:	371c      	adds	r7, #28
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
	...

08005654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005668:	2302      	movs	r3, #2
 800566a:	e065      	b.n	8005738 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a2c      	ldr	r2, [pc, #176]	@ (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d004      	beq.n	80056a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a2b      	ldr	r2, [pc, #172]	@ (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d108      	bne.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80056a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80056b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d018      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e2:	d013      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a18      	ldr	r2, [pc, #96]	@ (800574c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00e      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a17      	ldr	r2, [pc, #92]	@ (8005750 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d009      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a12      	ldr	r2, [pc, #72]	@ (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d004      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a13      	ldr	r2, [pc, #76]	@ (8005754 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d10c      	bne.n	8005726 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005712:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	4313      	orrs	r3, r2
 800571c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	40012c00 	.word	0x40012c00
 8005748:	40013400 	.word	0x40013400
 800574c:	40000400 	.word	0x40000400
 8005750:	40000800 	.word	0x40000800
 8005754:	40014000 	.word	0x40014000

08005758 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005770:	2302      	movs	r3, #2
 8005772:	e073      	b.n	800585c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	041b      	lsls	r3, r3, #16
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a19      	ldr	r2, [pc, #100]	@ (8005868 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d004      	beq.n	8005810 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a18      	ldr	r2, [pc, #96]	@ (800586c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d11c      	bne.n	800584a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581a:	051b      	lsls	r3, r3, #20
 800581c:	4313      	orrs	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40013400 	.word	0x40013400

08005870 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e042      	b.n	8005908 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005888:	2b00      	cmp	r3, #0
 800588a:	d106      	bne.n	800589a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7fc fbb5 	bl	8002004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2224      	movs	r2, #36	@ 0x24
 800589e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0201 	bic.w	r2, r2, #1
 80058b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fb82 	bl	8005fc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f8b3 	bl	8005a2c <UART_SetConfig>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e01b      	b.n	8005908 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0201 	orr.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fc01 	bl	8006108 <UART_CheckIdleState>
 8005906:	4603      	mov	r3, r0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	@ 0x28
 8005914:	af02      	add	r7, sp, #8
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	4613      	mov	r3, r2
 800591e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005926:	2b20      	cmp	r3, #32
 8005928:	d17b      	bne.n	8005a22 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <HAL_UART_Transmit+0x26>
 8005930:	88fb      	ldrh	r3, [r7, #6]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e074      	b.n	8005a24 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2221      	movs	r2, #33	@ 0x21
 8005946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800594a:	f7fc fc81 	bl	8002250 <HAL_GetTick>
 800594e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	88fa      	ldrh	r2, [r7, #6]
 8005954:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	88fa      	ldrh	r2, [r7, #6]
 800595c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005968:	d108      	bne.n	800597c <HAL_UART_Transmit+0x6c>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d104      	bne.n	800597c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005972:	2300      	movs	r3, #0
 8005974:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	61bb      	str	r3, [r7, #24]
 800597a:	e003      	b.n	8005984 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005980:	2300      	movs	r3, #0
 8005982:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005984:	e030      	b.n	80059e8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2200      	movs	r2, #0
 800598e:	2180      	movs	r1, #128	@ 0x80
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 fc63 	bl	800625c <UART_WaitOnFlagUntilTimeout>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2220      	movs	r2, #32
 80059a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e03d      	b.n	8005a24 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10b      	bne.n	80059c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059bc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	3302      	adds	r3, #2
 80059c2:	61bb      	str	r3, [r7, #24]
 80059c4:	e007      	b.n	80059d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	781a      	ldrb	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	3301      	adds	r3, #1
 80059d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80059dc:	b29b      	uxth	r3, r3
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1c8      	bne.n	8005986 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2200      	movs	r2, #0
 80059fc:	2140      	movs	r1, #64	@ 0x40
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 fc2c 	bl	800625c <UART_WaitOnFlagUntilTimeout>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d005      	beq.n	8005a16 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e006      	b.n	8005a24 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	e000      	b.n	8005a24 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005a22:	2302      	movs	r3, #2
  }
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3720      	adds	r7, #32
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a30:	b08c      	sub	sp, #48	@ 0x30
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	431a      	orrs	r2, r3
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	4bab      	ldr	r3, [pc, #684]	@ (8005d08 <UART_SetConfig+0x2dc>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	6812      	ldr	r2, [r2, #0]
 8005a62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a64:	430b      	orrs	r3, r1
 8005a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4aa0      	ldr	r2, [pc, #640]	@ (8005d0c <UART_SetConfig+0x2e0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d004      	beq.n	8005a98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a94:	4313      	orrs	r3, r2
 8005a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005aa2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	6812      	ldr	r2, [r2, #0]
 8005aaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005aac:	430b      	orrs	r3, r1
 8005aae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab6:	f023 010f 	bic.w	r1, r3, #15
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a91      	ldr	r2, [pc, #580]	@ (8005d10 <UART_SetConfig+0x2e4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d125      	bne.n	8005b1c <UART_SetConfig+0xf0>
 8005ad0:	4b90      	ldr	r3, [pc, #576]	@ (8005d14 <UART_SetConfig+0x2e8>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d81a      	bhi.n	8005b14 <UART_SetConfig+0xe8>
 8005ade:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae4 <UART_SetConfig+0xb8>)
 8005ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae4:	08005af5 	.word	0x08005af5
 8005ae8:	08005b05 	.word	0x08005b05
 8005aec:	08005afd 	.word	0x08005afd
 8005af0:	08005b0d 	.word	0x08005b0d
 8005af4:	2301      	movs	r3, #1
 8005af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005afa:	e0d6      	b.n	8005caa <UART_SetConfig+0x27e>
 8005afc:	2302      	movs	r3, #2
 8005afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b02:	e0d2      	b.n	8005caa <UART_SetConfig+0x27e>
 8005b04:	2304      	movs	r3, #4
 8005b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b0a:	e0ce      	b.n	8005caa <UART_SetConfig+0x27e>
 8005b0c:	2308      	movs	r3, #8
 8005b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b12:	e0ca      	b.n	8005caa <UART_SetConfig+0x27e>
 8005b14:	2310      	movs	r3, #16
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b1a:	e0c6      	b.n	8005caa <UART_SetConfig+0x27e>
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a7d      	ldr	r2, [pc, #500]	@ (8005d18 <UART_SetConfig+0x2ec>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d138      	bne.n	8005b98 <UART_SetConfig+0x16c>
 8005b26:	4b7b      	ldr	r3, [pc, #492]	@ (8005d14 <UART_SetConfig+0x2e8>)
 8005b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2c:	f003 030c 	and.w	r3, r3, #12
 8005b30:	2b0c      	cmp	r3, #12
 8005b32:	d82d      	bhi.n	8005b90 <UART_SetConfig+0x164>
 8005b34:	a201      	add	r2, pc, #4	@ (adr r2, 8005b3c <UART_SetConfig+0x110>)
 8005b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3a:	bf00      	nop
 8005b3c:	08005b71 	.word	0x08005b71
 8005b40:	08005b91 	.word	0x08005b91
 8005b44:	08005b91 	.word	0x08005b91
 8005b48:	08005b91 	.word	0x08005b91
 8005b4c:	08005b81 	.word	0x08005b81
 8005b50:	08005b91 	.word	0x08005b91
 8005b54:	08005b91 	.word	0x08005b91
 8005b58:	08005b91 	.word	0x08005b91
 8005b5c:	08005b79 	.word	0x08005b79
 8005b60:	08005b91 	.word	0x08005b91
 8005b64:	08005b91 	.word	0x08005b91
 8005b68:	08005b91 	.word	0x08005b91
 8005b6c:	08005b89 	.word	0x08005b89
 8005b70:	2300      	movs	r3, #0
 8005b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b76:	e098      	b.n	8005caa <UART_SetConfig+0x27e>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b7e:	e094      	b.n	8005caa <UART_SetConfig+0x27e>
 8005b80:	2304      	movs	r3, #4
 8005b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b86:	e090      	b.n	8005caa <UART_SetConfig+0x27e>
 8005b88:	2308      	movs	r3, #8
 8005b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b8e:	e08c      	b.n	8005caa <UART_SetConfig+0x27e>
 8005b90:	2310      	movs	r3, #16
 8005b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b96:	e088      	b.n	8005caa <UART_SetConfig+0x27e>
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a5f      	ldr	r2, [pc, #380]	@ (8005d1c <UART_SetConfig+0x2f0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d125      	bne.n	8005bee <UART_SetConfig+0x1c2>
 8005ba2:	4b5c      	ldr	r3, [pc, #368]	@ (8005d14 <UART_SetConfig+0x2e8>)
 8005ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005bac:	2b30      	cmp	r3, #48	@ 0x30
 8005bae:	d016      	beq.n	8005bde <UART_SetConfig+0x1b2>
 8005bb0:	2b30      	cmp	r3, #48	@ 0x30
 8005bb2:	d818      	bhi.n	8005be6 <UART_SetConfig+0x1ba>
 8005bb4:	2b20      	cmp	r3, #32
 8005bb6:	d00a      	beq.n	8005bce <UART_SetConfig+0x1a2>
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	d814      	bhi.n	8005be6 <UART_SetConfig+0x1ba>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <UART_SetConfig+0x19a>
 8005bc0:	2b10      	cmp	r3, #16
 8005bc2:	d008      	beq.n	8005bd6 <UART_SetConfig+0x1aa>
 8005bc4:	e00f      	b.n	8005be6 <UART_SetConfig+0x1ba>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bcc:	e06d      	b.n	8005caa <UART_SetConfig+0x27e>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bd4:	e069      	b.n	8005caa <UART_SetConfig+0x27e>
 8005bd6:	2304      	movs	r3, #4
 8005bd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bdc:	e065      	b.n	8005caa <UART_SetConfig+0x27e>
 8005bde:	2308      	movs	r3, #8
 8005be0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005be4:	e061      	b.n	8005caa <UART_SetConfig+0x27e>
 8005be6:	2310      	movs	r3, #16
 8005be8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bec:	e05d      	b.n	8005caa <UART_SetConfig+0x27e>
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a4b      	ldr	r2, [pc, #300]	@ (8005d20 <UART_SetConfig+0x2f4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d125      	bne.n	8005c44 <UART_SetConfig+0x218>
 8005bf8:	4b46      	ldr	r3, [pc, #280]	@ (8005d14 <UART_SetConfig+0x2e8>)
 8005bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bfe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005c02:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c04:	d016      	beq.n	8005c34 <UART_SetConfig+0x208>
 8005c06:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c08:	d818      	bhi.n	8005c3c <UART_SetConfig+0x210>
 8005c0a:	2b80      	cmp	r3, #128	@ 0x80
 8005c0c:	d00a      	beq.n	8005c24 <UART_SetConfig+0x1f8>
 8005c0e:	2b80      	cmp	r3, #128	@ 0x80
 8005c10:	d814      	bhi.n	8005c3c <UART_SetConfig+0x210>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <UART_SetConfig+0x1f0>
 8005c16:	2b40      	cmp	r3, #64	@ 0x40
 8005c18:	d008      	beq.n	8005c2c <UART_SetConfig+0x200>
 8005c1a:	e00f      	b.n	8005c3c <UART_SetConfig+0x210>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c22:	e042      	b.n	8005caa <UART_SetConfig+0x27e>
 8005c24:	2302      	movs	r3, #2
 8005c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c2a:	e03e      	b.n	8005caa <UART_SetConfig+0x27e>
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c32:	e03a      	b.n	8005caa <UART_SetConfig+0x27e>
 8005c34:	2308      	movs	r3, #8
 8005c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c3a:	e036      	b.n	8005caa <UART_SetConfig+0x27e>
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c42:	e032      	b.n	8005caa <UART_SetConfig+0x27e>
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a30      	ldr	r2, [pc, #192]	@ (8005d0c <UART_SetConfig+0x2e0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d12a      	bne.n	8005ca4 <UART_SetConfig+0x278>
 8005c4e:	4b31      	ldr	r3, [pc, #196]	@ (8005d14 <UART_SetConfig+0x2e8>)
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c5c:	d01a      	beq.n	8005c94 <UART_SetConfig+0x268>
 8005c5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c62:	d81b      	bhi.n	8005c9c <UART_SetConfig+0x270>
 8005c64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c68:	d00c      	beq.n	8005c84 <UART_SetConfig+0x258>
 8005c6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c6e:	d815      	bhi.n	8005c9c <UART_SetConfig+0x270>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <UART_SetConfig+0x250>
 8005c74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c78:	d008      	beq.n	8005c8c <UART_SetConfig+0x260>
 8005c7a:	e00f      	b.n	8005c9c <UART_SetConfig+0x270>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c82:	e012      	b.n	8005caa <UART_SetConfig+0x27e>
 8005c84:	2302      	movs	r3, #2
 8005c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c8a:	e00e      	b.n	8005caa <UART_SetConfig+0x27e>
 8005c8c:	2304      	movs	r3, #4
 8005c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c92:	e00a      	b.n	8005caa <UART_SetConfig+0x27e>
 8005c94:	2308      	movs	r3, #8
 8005c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c9a:	e006      	b.n	8005caa <UART_SetConfig+0x27e>
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ca2:	e002      	b.n	8005caa <UART_SetConfig+0x27e>
 8005ca4:	2310      	movs	r3, #16
 8005ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a17      	ldr	r2, [pc, #92]	@ (8005d0c <UART_SetConfig+0x2e0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	f040 80a8 	bne.w	8005e06 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cb6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005cba:	2b08      	cmp	r3, #8
 8005cbc:	d834      	bhi.n	8005d28 <UART_SetConfig+0x2fc>
 8005cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc4 <UART_SetConfig+0x298>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	08005ce9 	.word	0x08005ce9
 8005cc8:	08005d29 	.word	0x08005d29
 8005ccc:	08005cf1 	.word	0x08005cf1
 8005cd0:	08005d29 	.word	0x08005d29
 8005cd4:	08005cf7 	.word	0x08005cf7
 8005cd8:	08005d29 	.word	0x08005d29
 8005cdc:	08005d29 	.word	0x08005d29
 8005ce0:	08005d29 	.word	0x08005d29
 8005ce4:	08005cff 	.word	0x08005cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ce8:	f7fe fae0 	bl	80042ac <HAL_RCC_GetPCLK1Freq>
 8005cec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cee:	e021      	b.n	8005d34 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8005d24 <UART_SetConfig+0x2f8>)
 8005cf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cf4:	e01e      	b.n	8005d34 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cf6:	f7fe fa6d 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 8005cfa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cfc:	e01a      	b.n	8005d34 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d04:	e016      	b.n	8005d34 <UART_SetConfig+0x308>
 8005d06:	bf00      	nop
 8005d08:	cfff69f3 	.word	0xcfff69f3
 8005d0c:	40008000 	.word	0x40008000
 8005d10:	40013800 	.word	0x40013800
 8005d14:	40021000 	.word	0x40021000
 8005d18:	40004400 	.word	0x40004400
 8005d1c:	40004800 	.word	0x40004800
 8005d20:	40004c00 	.word	0x40004c00
 8005d24:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005d32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 812a 	beq.w	8005f90 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d40:	4a9e      	ldr	r2, [pc, #632]	@ (8005fbc <UART_SetConfig+0x590>)
 8005d42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d46:	461a      	mov	r2, r3
 8005d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	4613      	mov	r3, r2
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	4413      	add	r3, r2
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d305      	bcc.n	8005d6c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d903      	bls.n	8005d74 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d72:	e10d      	b.n	8005f90 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d76:	2200      	movs	r2, #0
 8005d78:	60bb      	str	r3, [r7, #8]
 8005d7a:	60fa      	str	r2, [r7, #12]
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d80:	4a8e      	ldr	r2, [pc, #568]	@ (8005fbc <UART_SetConfig+0x590>)
 8005d82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2200      	movs	r2, #0
 8005d8a:	603b      	str	r3, [r7, #0]
 8005d8c:	607a      	str	r2, [r7, #4]
 8005d8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d96:	f7fa ff9f 	bl	8000cd8 <__aeabi_uldivmod>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4610      	mov	r0, r2
 8005da0:	4619      	mov	r1, r3
 8005da2:	f04f 0200 	mov.w	r2, #0
 8005da6:	f04f 0300 	mov.w	r3, #0
 8005daa:	020b      	lsls	r3, r1, #8
 8005dac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005db0:	0202      	lsls	r2, r0, #8
 8005db2:	6979      	ldr	r1, [r7, #20]
 8005db4:	6849      	ldr	r1, [r1, #4]
 8005db6:	0849      	lsrs	r1, r1, #1
 8005db8:	2000      	movs	r0, #0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	eb12 0804 	adds.w	r8, r2, r4
 8005dc2:	eb43 0905 	adc.w	r9, r3, r5
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	469a      	mov	sl, r3
 8005dce:	4693      	mov	fp, r2
 8005dd0:	4652      	mov	r2, sl
 8005dd2:	465b      	mov	r3, fp
 8005dd4:	4640      	mov	r0, r8
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	f7fa ff7e 	bl	8000cd8 <__aeabi_uldivmod>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4613      	mov	r3, r2
 8005de2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dea:	d308      	bcc.n	8005dfe <UART_SetConfig+0x3d2>
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005df2:	d204      	bcs.n	8005dfe <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6a3a      	ldr	r2, [r7, #32]
 8005dfa:	60da      	str	r2, [r3, #12]
 8005dfc:	e0c8      	b.n	8005f90 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005e04:	e0c4      	b.n	8005f90 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e0e:	d167      	bne.n	8005ee0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005e10:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d828      	bhi.n	8005e6a <UART_SetConfig+0x43e>
 8005e18:	a201      	add	r2, pc, #4	@ (adr r2, 8005e20 <UART_SetConfig+0x3f4>)
 8005e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1e:	bf00      	nop
 8005e20:	08005e45 	.word	0x08005e45
 8005e24:	08005e4d 	.word	0x08005e4d
 8005e28:	08005e55 	.word	0x08005e55
 8005e2c:	08005e6b 	.word	0x08005e6b
 8005e30:	08005e5b 	.word	0x08005e5b
 8005e34:	08005e6b 	.word	0x08005e6b
 8005e38:	08005e6b 	.word	0x08005e6b
 8005e3c:	08005e6b 	.word	0x08005e6b
 8005e40:	08005e63 	.word	0x08005e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e44:	f7fe fa32 	bl	80042ac <HAL_RCC_GetPCLK1Freq>
 8005e48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e4a:	e014      	b.n	8005e76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e4c:	f7fe fa44 	bl	80042d8 <HAL_RCC_GetPCLK2Freq>
 8005e50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e52:	e010      	b.n	8005e76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e54:	4b5a      	ldr	r3, [pc, #360]	@ (8005fc0 <UART_SetConfig+0x594>)
 8005e56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e58:	e00d      	b.n	8005e76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e5a:	f7fe f9bb 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 8005e5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e60:	e009      	b.n	8005e76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e68:	e005      	b.n	8005e76 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 8089 	beq.w	8005f90 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e82:	4a4e      	ldr	r2, [pc, #312]	@ (8005fbc <UART_SetConfig+0x590>)
 8005e84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e90:	005a      	lsls	r2, r3, #1
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	085b      	lsrs	r3, r3, #1
 8005e98:	441a      	add	r2, r3
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	2b0f      	cmp	r3, #15
 8005ea8:	d916      	bls.n	8005ed8 <UART_SetConfig+0x4ac>
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eb0:	d212      	bcs.n	8005ed8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	f023 030f 	bic.w	r3, r3, #15
 8005eba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	085b      	lsrs	r3, r3, #1
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	8bfb      	ldrh	r3, [r7, #30]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	8bfa      	ldrh	r2, [r7, #30]
 8005ed4:	60da      	str	r2, [r3, #12]
 8005ed6:	e05b      	b.n	8005f90 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ede:	e057      	b.n	8005f90 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ee0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d828      	bhi.n	8005f3a <UART_SetConfig+0x50e>
 8005ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef0 <UART_SetConfig+0x4c4>)
 8005eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eee:	bf00      	nop
 8005ef0:	08005f15 	.word	0x08005f15
 8005ef4:	08005f1d 	.word	0x08005f1d
 8005ef8:	08005f25 	.word	0x08005f25
 8005efc:	08005f3b 	.word	0x08005f3b
 8005f00:	08005f2b 	.word	0x08005f2b
 8005f04:	08005f3b 	.word	0x08005f3b
 8005f08:	08005f3b 	.word	0x08005f3b
 8005f0c:	08005f3b 	.word	0x08005f3b
 8005f10:	08005f33 	.word	0x08005f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f14:	f7fe f9ca 	bl	80042ac <HAL_RCC_GetPCLK1Freq>
 8005f18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f1a:	e014      	b.n	8005f46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f1c:	f7fe f9dc 	bl	80042d8 <HAL_RCC_GetPCLK2Freq>
 8005f20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f22:	e010      	b.n	8005f46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f24:	4b26      	ldr	r3, [pc, #152]	@ (8005fc0 <UART_SetConfig+0x594>)
 8005f26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f28:	e00d      	b.n	8005f46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f2a:	f7fe f953 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 8005f2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f30:	e009      	b.n	8005f46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f38:	e005      	b.n	8005f46 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005f44:	bf00      	nop
    }

    if (pclk != 0U)
 8005f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d021      	beq.n	8005f90 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f50:	4a1a      	ldr	r2, [pc, #104]	@ (8005fbc <UART_SetConfig+0x590>)
 8005f52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f56:	461a      	mov	r2, r3
 8005f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	085b      	lsrs	r3, r3, #1
 8005f64:	441a      	add	r2, r3
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	2b0f      	cmp	r3, #15
 8005f74:	d909      	bls.n	8005f8a <UART_SetConfig+0x55e>
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f7c:	d205      	bcs.n	8005f8a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	60da      	str	r2, [r3, #12]
 8005f88:	e002      	b.n	8005f90 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005fac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3730      	adds	r7, #48	@ 0x30
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fba:	bf00      	nop
 8005fbc:	0800ad08 	.word	0x0800ad08
 8005fc0:	00f42400 	.word	0x00f42400

08005fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd0:	f003 0308 	and.w	r3, r3, #8
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00a      	beq.n	8006076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00a      	beq.n	8006098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d01a      	beq.n	80060da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060c2:	d10a      	bne.n	80060da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	605a      	str	r2, [r3, #4]
  }
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b098      	sub	sp, #96	@ 0x60
 800610c:	af02      	add	r7, sp, #8
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006118:	f7fc f89a 	bl	8002250 <HAL_GetTick>
 800611c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0308 	and.w	r3, r3, #8
 8006128:	2b08      	cmp	r3, #8
 800612a:	d12f      	bne.n	800618c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800612c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006134:	2200      	movs	r2, #0
 8006136:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f88e 	bl	800625c <UART_WaitOnFlagUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d022      	beq.n	800618c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800615a:	653b      	str	r3, [r7, #80]	@ 0x50
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	461a      	mov	r2, r3
 8006162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006164:	647b      	str	r3, [r7, #68]	@ 0x44
 8006166:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006168:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800616a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800616c:	e841 2300 	strex	r3, r2, [r1]
 8006170:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1e6      	bne.n	8006146 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2220      	movs	r2, #32
 800617c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e063      	b.n	8006254 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b04      	cmp	r3, #4
 8006198:	d149      	bne.n	800622e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800619a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061a2:	2200      	movs	r2, #0
 80061a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f857 	bl	800625c <UART_WaitOnFlagUntilTimeout>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d03c      	beq.n	800622e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	623b      	str	r3, [r7, #32]
   return(result);
 80061c2:	6a3b      	ldr	r3, [r7, #32]
 80061c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80061d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061da:	e841 2300 	strex	r3, r2, [r1]
 80061de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1e6      	bne.n	80061b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3308      	adds	r3, #8
 80061ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	e853 3f00 	ldrex	r3, [r3]
 80061f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f023 0301 	bic.w	r3, r3, #1
 80061fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3308      	adds	r3, #8
 8006204:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006206:	61fa      	str	r2, [r7, #28]
 8006208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620a:	69b9      	ldr	r1, [r7, #24]
 800620c:	69fa      	ldr	r2, [r7, #28]
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	617b      	str	r3, [r7, #20]
   return(result);
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1e5      	bne.n	80061e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2220      	movs	r2, #32
 800621e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e012      	b.n	8006254 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2220      	movs	r2, #32
 8006232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3758      	adds	r7, #88	@ 0x58
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	4613      	mov	r3, r2
 800626a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800626c:	e04f      	b.n	800630e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006274:	d04b      	beq.n	800630e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006276:	f7fb ffeb 	bl	8002250 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	429a      	cmp	r2, r3
 8006284:	d302      	bcc.n	800628c <UART_WaitOnFlagUntilTimeout+0x30>
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e04e      	b.n	800632e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0304 	and.w	r3, r3, #4
 800629a:	2b00      	cmp	r3, #0
 800629c:	d037      	beq.n	800630e <UART_WaitOnFlagUntilTimeout+0xb2>
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b80      	cmp	r3, #128	@ 0x80
 80062a2:	d034      	beq.n	800630e <UART_WaitOnFlagUntilTimeout+0xb2>
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2b40      	cmp	r3, #64	@ 0x40
 80062a8:	d031      	beq.n	800630e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69db      	ldr	r3, [r3, #28]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d110      	bne.n	80062da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2208      	movs	r2, #8
 80062be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f838 	bl	8006336 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2208      	movs	r2, #8
 80062ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e029      	b.n	800632e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062e8:	d111      	bne.n	800630e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80062f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 f81e 	bl	8006336 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e00f      	b.n	800632e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69da      	ldr	r2, [r3, #28]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	4013      	ands	r3, r2
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	429a      	cmp	r2, r3
 800631c:	bf0c      	ite	eq
 800631e:	2301      	moveq	r3, #1
 8006320:	2300      	movne	r3, #0
 8006322:	b2db      	uxtb	r3, r3
 8006324:	461a      	mov	r2, r3
 8006326:	79fb      	ldrb	r3, [r7, #7]
 8006328:	429a      	cmp	r2, r3
 800632a:	d0a0      	beq.n	800626e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006336:	b480      	push	{r7}
 8006338:	b095      	sub	sp, #84	@ 0x54
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006346:	e853 3f00 	ldrex	r3, [r3]
 800634a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800634c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	461a      	mov	r2, r3
 800635a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800635c:	643b      	str	r3, [r7, #64]	@ 0x40
 800635e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006360:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006362:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006364:	e841 2300 	strex	r3, r2, [r1]
 8006368:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800636a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1e6      	bne.n	800633e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3308      	adds	r3, #8
 8006376:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	e853 3f00 	ldrex	r3, [r3]
 800637e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006386:	f023 0301 	bic.w	r3, r3, #1
 800638a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3308      	adds	r3, #8
 8006392:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006394:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006396:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800639a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e3      	bne.n	8006370 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d118      	bne.n	80063e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	e853 3f00 	ldrex	r3, [r3]
 80063bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f023 0310 	bic.w	r3, r3, #16
 80063c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ce:	61bb      	str	r3, [r7, #24]
 80063d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d2:	6979      	ldr	r1, [r7, #20]
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	e841 2300 	strex	r3, r2, [r1]
 80063da:	613b      	str	r3, [r7, #16]
   return(result);
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1e6      	bne.n	80063b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80063f6:	bf00      	nop
 80063f8:	3754      	adds	r7, #84	@ 0x54
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006402:	b480      	push	{r7}
 8006404:	b085      	sub	sp, #20
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006410:	2b01      	cmp	r3, #1
 8006412:	d101      	bne.n	8006418 <HAL_UARTEx_DisableFifoMode+0x16>
 8006414:	2302      	movs	r3, #2
 8006416:	e027      	b.n	8006468 <HAL_UARTEx_DisableFifoMode+0x66>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2224      	movs	r2, #36	@ 0x24
 8006424:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0201 	bic.w	r2, r2, #1
 800643e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006446:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2220      	movs	r2, #32
 800645a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006488:	2302      	movs	r3, #2
 800648a:	e02d      	b.n	80064e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2224      	movs	r2, #36	@ 0x24
 8006498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0201 	bic.w	r2, r2, #1
 80064b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f84f 	bl	800656c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2220      	movs	r2, #32
 80064da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006504:	2302      	movs	r3, #2
 8006506:	e02d      	b.n	8006564 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2224      	movs	r2, #36	@ 0x24
 8006514:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0201 	bic.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f811 	bl	800656c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2220      	movs	r2, #32
 8006556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006578:	2b00      	cmp	r3, #0
 800657a:	d108      	bne.n	800658e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800658c:	e031      	b.n	80065f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800658e:	2308      	movs	r3, #8
 8006590:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006592:	2308      	movs	r3, #8
 8006594:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	0e5b      	lsrs	r3, r3, #25
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	0f5b      	lsrs	r3, r3, #29
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	f003 0307 	and.w	r3, r3, #7
 80065b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065b6:	7bbb      	ldrb	r3, [r7, #14]
 80065b8:	7b3a      	ldrb	r2, [r7, #12]
 80065ba:	4911      	ldr	r1, [pc, #68]	@ (8006600 <UARTEx_SetNbDataToProcess+0x94>)
 80065bc:	5c8a      	ldrb	r2, [r1, r2]
 80065be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065c2:	7b3a      	ldrb	r2, [r7, #12]
 80065c4:	490f      	ldr	r1, [pc, #60]	@ (8006604 <UARTEx_SetNbDataToProcess+0x98>)
 80065c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
 80065d6:	7b7a      	ldrb	r2, [r7, #13]
 80065d8:	4909      	ldr	r1, [pc, #36]	@ (8006600 <UARTEx_SetNbDataToProcess+0x94>)
 80065da:	5c8a      	ldrb	r2, [r1, r2]
 80065dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80065e0:	7b7a      	ldrb	r2, [r7, #13]
 80065e2:	4908      	ldr	r1, [pc, #32]	@ (8006604 <UARTEx_SetNbDataToProcess+0x98>)
 80065e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80065f2:	bf00      	nop
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	0800ad20 	.word	0x0800ad20
 8006604:	0800ad28 	.word	0x0800ad28

08006608 <__cvt>:
 8006608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800660c:	ec57 6b10 	vmov	r6, r7, d0
 8006610:	2f00      	cmp	r7, #0
 8006612:	460c      	mov	r4, r1
 8006614:	4619      	mov	r1, r3
 8006616:	463b      	mov	r3, r7
 8006618:	bfbb      	ittet	lt
 800661a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800661e:	461f      	movlt	r7, r3
 8006620:	2300      	movge	r3, #0
 8006622:	232d      	movlt	r3, #45	@ 0x2d
 8006624:	700b      	strb	r3, [r1, #0]
 8006626:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006628:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800662c:	4691      	mov	r9, r2
 800662e:	f023 0820 	bic.w	r8, r3, #32
 8006632:	bfbc      	itt	lt
 8006634:	4632      	movlt	r2, r6
 8006636:	4616      	movlt	r6, r2
 8006638:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800663c:	d005      	beq.n	800664a <__cvt+0x42>
 800663e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006642:	d100      	bne.n	8006646 <__cvt+0x3e>
 8006644:	3401      	adds	r4, #1
 8006646:	2102      	movs	r1, #2
 8006648:	e000      	b.n	800664c <__cvt+0x44>
 800664a:	2103      	movs	r1, #3
 800664c:	ab03      	add	r3, sp, #12
 800664e:	9301      	str	r3, [sp, #4]
 8006650:	ab02      	add	r3, sp, #8
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	ec47 6b10 	vmov	d0, r6, r7
 8006658:	4653      	mov	r3, sl
 800665a:	4622      	mov	r2, r4
 800665c:	f001 f874 	bl	8007748 <_dtoa_r>
 8006660:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006664:	4605      	mov	r5, r0
 8006666:	d119      	bne.n	800669c <__cvt+0x94>
 8006668:	f019 0f01 	tst.w	r9, #1
 800666c:	d00e      	beq.n	800668c <__cvt+0x84>
 800666e:	eb00 0904 	add.w	r9, r0, r4
 8006672:	2200      	movs	r2, #0
 8006674:	2300      	movs	r3, #0
 8006676:	4630      	mov	r0, r6
 8006678:	4639      	mov	r1, r7
 800667a:	f7fa fa4d 	bl	8000b18 <__aeabi_dcmpeq>
 800667e:	b108      	cbz	r0, 8006684 <__cvt+0x7c>
 8006680:	f8cd 900c 	str.w	r9, [sp, #12]
 8006684:	2230      	movs	r2, #48	@ 0x30
 8006686:	9b03      	ldr	r3, [sp, #12]
 8006688:	454b      	cmp	r3, r9
 800668a:	d31e      	bcc.n	80066ca <__cvt+0xc2>
 800668c:	9b03      	ldr	r3, [sp, #12]
 800668e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006690:	1b5b      	subs	r3, r3, r5
 8006692:	4628      	mov	r0, r5
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	b004      	add	sp, #16
 8006698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800669c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066a0:	eb00 0904 	add.w	r9, r0, r4
 80066a4:	d1e5      	bne.n	8006672 <__cvt+0x6a>
 80066a6:	7803      	ldrb	r3, [r0, #0]
 80066a8:	2b30      	cmp	r3, #48	@ 0x30
 80066aa:	d10a      	bne.n	80066c2 <__cvt+0xba>
 80066ac:	2200      	movs	r2, #0
 80066ae:	2300      	movs	r3, #0
 80066b0:	4630      	mov	r0, r6
 80066b2:	4639      	mov	r1, r7
 80066b4:	f7fa fa30 	bl	8000b18 <__aeabi_dcmpeq>
 80066b8:	b918      	cbnz	r0, 80066c2 <__cvt+0xba>
 80066ba:	f1c4 0401 	rsb	r4, r4, #1
 80066be:	f8ca 4000 	str.w	r4, [sl]
 80066c2:	f8da 3000 	ldr.w	r3, [sl]
 80066c6:	4499      	add	r9, r3
 80066c8:	e7d3      	b.n	8006672 <__cvt+0x6a>
 80066ca:	1c59      	adds	r1, r3, #1
 80066cc:	9103      	str	r1, [sp, #12]
 80066ce:	701a      	strb	r2, [r3, #0]
 80066d0:	e7d9      	b.n	8006686 <__cvt+0x7e>

080066d2 <__exponent>:
 80066d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066d4:	2900      	cmp	r1, #0
 80066d6:	bfba      	itte	lt
 80066d8:	4249      	neglt	r1, r1
 80066da:	232d      	movlt	r3, #45	@ 0x2d
 80066dc:	232b      	movge	r3, #43	@ 0x2b
 80066de:	2909      	cmp	r1, #9
 80066e0:	7002      	strb	r2, [r0, #0]
 80066e2:	7043      	strb	r3, [r0, #1]
 80066e4:	dd29      	ble.n	800673a <__exponent+0x68>
 80066e6:	f10d 0307 	add.w	r3, sp, #7
 80066ea:	461d      	mov	r5, r3
 80066ec:	270a      	movs	r7, #10
 80066ee:	461a      	mov	r2, r3
 80066f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80066f4:	fb07 1416 	mls	r4, r7, r6, r1
 80066f8:	3430      	adds	r4, #48	@ 0x30
 80066fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80066fe:	460c      	mov	r4, r1
 8006700:	2c63      	cmp	r4, #99	@ 0x63
 8006702:	f103 33ff 	add.w	r3, r3, #4294967295
 8006706:	4631      	mov	r1, r6
 8006708:	dcf1      	bgt.n	80066ee <__exponent+0x1c>
 800670a:	3130      	adds	r1, #48	@ 0x30
 800670c:	1e94      	subs	r4, r2, #2
 800670e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006712:	1c41      	adds	r1, r0, #1
 8006714:	4623      	mov	r3, r4
 8006716:	42ab      	cmp	r3, r5
 8006718:	d30a      	bcc.n	8006730 <__exponent+0x5e>
 800671a:	f10d 0309 	add.w	r3, sp, #9
 800671e:	1a9b      	subs	r3, r3, r2
 8006720:	42ac      	cmp	r4, r5
 8006722:	bf88      	it	hi
 8006724:	2300      	movhi	r3, #0
 8006726:	3302      	adds	r3, #2
 8006728:	4403      	add	r3, r0
 800672a:	1a18      	subs	r0, r3, r0
 800672c:	b003      	add	sp, #12
 800672e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006730:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006734:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006738:	e7ed      	b.n	8006716 <__exponent+0x44>
 800673a:	2330      	movs	r3, #48	@ 0x30
 800673c:	3130      	adds	r1, #48	@ 0x30
 800673e:	7083      	strb	r3, [r0, #2]
 8006740:	70c1      	strb	r1, [r0, #3]
 8006742:	1d03      	adds	r3, r0, #4
 8006744:	e7f1      	b.n	800672a <__exponent+0x58>
	...

08006748 <_printf_float>:
 8006748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674c:	b08d      	sub	sp, #52	@ 0x34
 800674e:	460c      	mov	r4, r1
 8006750:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006754:	4616      	mov	r6, r2
 8006756:	461f      	mov	r7, r3
 8006758:	4605      	mov	r5, r0
 800675a:	f000 feef 	bl	800753c <_localeconv_r>
 800675e:	6803      	ldr	r3, [r0, #0]
 8006760:	9304      	str	r3, [sp, #16]
 8006762:	4618      	mov	r0, r3
 8006764:	f7f9 fdac 	bl	80002c0 <strlen>
 8006768:	2300      	movs	r3, #0
 800676a:	930a      	str	r3, [sp, #40]	@ 0x28
 800676c:	f8d8 3000 	ldr.w	r3, [r8]
 8006770:	9005      	str	r0, [sp, #20]
 8006772:	3307      	adds	r3, #7
 8006774:	f023 0307 	bic.w	r3, r3, #7
 8006778:	f103 0208 	add.w	r2, r3, #8
 800677c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006780:	f8d4 b000 	ldr.w	fp, [r4]
 8006784:	f8c8 2000 	str.w	r2, [r8]
 8006788:	e9d3 8900 	ldrd	r8, r9, [r3]
 800678c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006790:	9307      	str	r3, [sp, #28]
 8006792:	f8cd 8018 	str.w	r8, [sp, #24]
 8006796:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800679a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800679e:	4b9c      	ldr	r3, [pc, #624]	@ (8006a10 <_printf_float+0x2c8>)
 80067a0:	f04f 32ff 	mov.w	r2, #4294967295
 80067a4:	f7fa f9ea 	bl	8000b7c <__aeabi_dcmpun>
 80067a8:	bb70      	cbnz	r0, 8006808 <_printf_float+0xc0>
 80067aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067ae:	4b98      	ldr	r3, [pc, #608]	@ (8006a10 <_printf_float+0x2c8>)
 80067b0:	f04f 32ff 	mov.w	r2, #4294967295
 80067b4:	f7fa f9c4 	bl	8000b40 <__aeabi_dcmple>
 80067b8:	bb30      	cbnz	r0, 8006808 <_printf_float+0xc0>
 80067ba:	2200      	movs	r2, #0
 80067bc:	2300      	movs	r3, #0
 80067be:	4640      	mov	r0, r8
 80067c0:	4649      	mov	r1, r9
 80067c2:	f7fa f9b3 	bl	8000b2c <__aeabi_dcmplt>
 80067c6:	b110      	cbz	r0, 80067ce <_printf_float+0x86>
 80067c8:	232d      	movs	r3, #45	@ 0x2d
 80067ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067ce:	4a91      	ldr	r2, [pc, #580]	@ (8006a14 <_printf_float+0x2cc>)
 80067d0:	4b91      	ldr	r3, [pc, #580]	@ (8006a18 <_printf_float+0x2d0>)
 80067d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80067d6:	bf94      	ite	ls
 80067d8:	4690      	movls	r8, r2
 80067da:	4698      	movhi	r8, r3
 80067dc:	2303      	movs	r3, #3
 80067de:	6123      	str	r3, [r4, #16]
 80067e0:	f02b 0304 	bic.w	r3, fp, #4
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	f04f 0900 	mov.w	r9, #0
 80067ea:	9700      	str	r7, [sp, #0]
 80067ec:	4633      	mov	r3, r6
 80067ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 80067f0:	4621      	mov	r1, r4
 80067f2:	4628      	mov	r0, r5
 80067f4:	f000 f9d2 	bl	8006b9c <_printf_common>
 80067f8:	3001      	adds	r0, #1
 80067fa:	f040 808d 	bne.w	8006918 <_printf_float+0x1d0>
 80067fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006802:	b00d      	add	sp, #52	@ 0x34
 8006804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006808:	4642      	mov	r2, r8
 800680a:	464b      	mov	r3, r9
 800680c:	4640      	mov	r0, r8
 800680e:	4649      	mov	r1, r9
 8006810:	f7fa f9b4 	bl	8000b7c <__aeabi_dcmpun>
 8006814:	b140      	cbz	r0, 8006828 <_printf_float+0xe0>
 8006816:	464b      	mov	r3, r9
 8006818:	2b00      	cmp	r3, #0
 800681a:	bfbc      	itt	lt
 800681c:	232d      	movlt	r3, #45	@ 0x2d
 800681e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006822:	4a7e      	ldr	r2, [pc, #504]	@ (8006a1c <_printf_float+0x2d4>)
 8006824:	4b7e      	ldr	r3, [pc, #504]	@ (8006a20 <_printf_float+0x2d8>)
 8006826:	e7d4      	b.n	80067d2 <_printf_float+0x8a>
 8006828:	6863      	ldr	r3, [r4, #4]
 800682a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800682e:	9206      	str	r2, [sp, #24]
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	d13b      	bne.n	80068ac <_printf_float+0x164>
 8006834:	2306      	movs	r3, #6
 8006836:	6063      	str	r3, [r4, #4]
 8006838:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800683c:	2300      	movs	r3, #0
 800683e:	6022      	str	r2, [r4, #0]
 8006840:	9303      	str	r3, [sp, #12]
 8006842:	ab0a      	add	r3, sp, #40	@ 0x28
 8006844:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006848:	ab09      	add	r3, sp, #36	@ 0x24
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	6861      	ldr	r1, [r4, #4]
 800684e:	ec49 8b10 	vmov	d0, r8, r9
 8006852:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006856:	4628      	mov	r0, r5
 8006858:	f7ff fed6 	bl	8006608 <__cvt>
 800685c:	9b06      	ldr	r3, [sp, #24]
 800685e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006860:	2b47      	cmp	r3, #71	@ 0x47
 8006862:	4680      	mov	r8, r0
 8006864:	d129      	bne.n	80068ba <_printf_float+0x172>
 8006866:	1cc8      	adds	r0, r1, #3
 8006868:	db02      	blt.n	8006870 <_printf_float+0x128>
 800686a:	6863      	ldr	r3, [r4, #4]
 800686c:	4299      	cmp	r1, r3
 800686e:	dd41      	ble.n	80068f4 <_printf_float+0x1ac>
 8006870:	f1aa 0a02 	sub.w	sl, sl, #2
 8006874:	fa5f fa8a 	uxtb.w	sl, sl
 8006878:	3901      	subs	r1, #1
 800687a:	4652      	mov	r2, sl
 800687c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006880:	9109      	str	r1, [sp, #36]	@ 0x24
 8006882:	f7ff ff26 	bl	80066d2 <__exponent>
 8006886:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006888:	1813      	adds	r3, r2, r0
 800688a:	2a01      	cmp	r2, #1
 800688c:	4681      	mov	r9, r0
 800688e:	6123      	str	r3, [r4, #16]
 8006890:	dc02      	bgt.n	8006898 <_printf_float+0x150>
 8006892:	6822      	ldr	r2, [r4, #0]
 8006894:	07d2      	lsls	r2, r2, #31
 8006896:	d501      	bpl.n	800689c <_printf_float+0x154>
 8006898:	3301      	adds	r3, #1
 800689a:	6123      	str	r3, [r4, #16]
 800689c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0a2      	beq.n	80067ea <_printf_float+0xa2>
 80068a4:	232d      	movs	r3, #45	@ 0x2d
 80068a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068aa:	e79e      	b.n	80067ea <_printf_float+0xa2>
 80068ac:	9a06      	ldr	r2, [sp, #24]
 80068ae:	2a47      	cmp	r2, #71	@ 0x47
 80068b0:	d1c2      	bne.n	8006838 <_printf_float+0xf0>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1c0      	bne.n	8006838 <_printf_float+0xf0>
 80068b6:	2301      	movs	r3, #1
 80068b8:	e7bd      	b.n	8006836 <_printf_float+0xee>
 80068ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068be:	d9db      	bls.n	8006878 <_printf_float+0x130>
 80068c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80068c4:	d118      	bne.n	80068f8 <_printf_float+0x1b0>
 80068c6:	2900      	cmp	r1, #0
 80068c8:	6863      	ldr	r3, [r4, #4]
 80068ca:	dd0b      	ble.n	80068e4 <_printf_float+0x19c>
 80068cc:	6121      	str	r1, [r4, #16]
 80068ce:	b913      	cbnz	r3, 80068d6 <_printf_float+0x18e>
 80068d0:	6822      	ldr	r2, [r4, #0]
 80068d2:	07d0      	lsls	r0, r2, #31
 80068d4:	d502      	bpl.n	80068dc <_printf_float+0x194>
 80068d6:	3301      	adds	r3, #1
 80068d8:	440b      	add	r3, r1
 80068da:	6123      	str	r3, [r4, #16]
 80068dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80068de:	f04f 0900 	mov.w	r9, #0
 80068e2:	e7db      	b.n	800689c <_printf_float+0x154>
 80068e4:	b913      	cbnz	r3, 80068ec <_printf_float+0x1a4>
 80068e6:	6822      	ldr	r2, [r4, #0]
 80068e8:	07d2      	lsls	r2, r2, #31
 80068ea:	d501      	bpl.n	80068f0 <_printf_float+0x1a8>
 80068ec:	3302      	adds	r3, #2
 80068ee:	e7f4      	b.n	80068da <_printf_float+0x192>
 80068f0:	2301      	movs	r3, #1
 80068f2:	e7f2      	b.n	80068da <_printf_float+0x192>
 80068f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80068f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068fa:	4299      	cmp	r1, r3
 80068fc:	db05      	blt.n	800690a <_printf_float+0x1c2>
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	6121      	str	r1, [r4, #16]
 8006902:	07d8      	lsls	r0, r3, #31
 8006904:	d5ea      	bpl.n	80068dc <_printf_float+0x194>
 8006906:	1c4b      	adds	r3, r1, #1
 8006908:	e7e7      	b.n	80068da <_printf_float+0x192>
 800690a:	2900      	cmp	r1, #0
 800690c:	bfd4      	ite	le
 800690e:	f1c1 0202 	rsble	r2, r1, #2
 8006912:	2201      	movgt	r2, #1
 8006914:	4413      	add	r3, r2
 8006916:	e7e0      	b.n	80068da <_printf_float+0x192>
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	055a      	lsls	r2, r3, #21
 800691c:	d407      	bmi.n	800692e <_printf_float+0x1e6>
 800691e:	6923      	ldr	r3, [r4, #16]
 8006920:	4642      	mov	r2, r8
 8006922:	4631      	mov	r1, r6
 8006924:	4628      	mov	r0, r5
 8006926:	47b8      	blx	r7
 8006928:	3001      	adds	r0, #1
 800692a:	d12b      	bne.n	8006984 <_printf_float+0x23c>
 800692c:	e767      	b.n	80067fe <_printf_float+0xb6>
 800692e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006932:	f240 80dd 	bls.w	8006af0 <_printf_float+0x3a8>
 8006936:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800693a:	2200      	movs	r2, #0
 800693c:	2300      	movs	r3, #0
 800693e:	f7fa f8eb 	bl	8000b18 <__aeabi_dcmpeq>
 8006942:	2800      	cmp	r0, #0
 8006944:	d033      	beq.n	80069ae <_printf_float+0x266>
 8006946:	4a37      	ldr	r2, [pc, #220]	@ (8006a24 <_printf_float+0x2dc>)
 8006948:	2301      	movs	r3, #1
 800694a:	4631      	mov	r1, r6
 800694c:	4628      	mov	r0, r5
 800694e:	47b8      	blx	r7
 8006950:	3001      	adds	r0, #1
 8006952:	f43f af54 	beq.w	80067fe <_printf_float+0xb6>
 8006956:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800695a:	4543      	cmp	r3, r8
 800695c:	db02      	blt.n	8006964 <_printf_float+0x21c>
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	07d8      	lsls	r0, r3, #31
 8006962:	d50f      	bpl.n	8006984 <_printf_float+0x23c>
 8006964:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006968:	4631      	mov	r1, r6
 800696a:	4628      	mov	r0, r5
 800696c:	47b8      	blx	r7
 800696e:	3001      	adds	r0, #1
 8006970:	f43f af45 	beq.w	80067fe <_printf_float+0xb6>
 8006974:	f04f 0900 	mov.w	r9, #0
 8006978:	f108 38ff 	add.w	r8, r8, #4294967295
 800697c:	f104 0a1a 	add.w	sl, r4, #26
 8006980:	45c8      	cmp	r8, r9
 8006982:	dc09      	bgt.n	8006998 <_printf_float+0x250>
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	079b      	lsls	r3, r3, #30
 8006988:	f100 8103 	bmi.w	8006b92 <_printf_float+0x44a>
 800698c:	68e0      	ldr	r0, [r4, #12]
 800698e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006990:	4298      	cmp	r0, r3
 8006992:	bfb8      	it	lt
 8006994:	4618      	movlt	r0, r3
 8006996:	e734      	b.n	8006802 <_printf_float+0xba>
 8006998:	2301      	movs	r3, #1
 800699a:	4652      	mov	r2, sl
 800699c:	4631      	mov	r1, r6
 800699e:	4628      	mov	r0, r5
 80069a0:	47b8      	blx	r7
 80069a2:	3001      	adds	r0, #1
 80069a4:	f43f af2b 	beq.w	80067fe <_printf_float+0xb6>
 80069a8:	f109 0901 	add.w	r9, r9, #1
 80069ac:	e7e8      	b.n	8006980 <_printf_float+0x238>
 80069ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	dc39      	bgt.n	8006a28 <_printf_float+0x2e0>
 80069b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a24 <_printf_float+0x2dc>)
 80069b6:	2301      	movs	r3, #1
 80069b8:	4631      	mov	r1, r6
 80069ba:	4628      	mov	r0, r5
 80069bc:	47b8      	blx	r7
 80069be:	3001      	adds	r0, #1
 80069c0:	f43f af1d 	beq.w	80067fe <_printf_float+0xb6>
 80069c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80069c8:	ea59 0303 	orrs.w	r3, r9, r3
 80069cc:	d102      	bne.n	80069d4 <_printf_float+0x28c>
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	07d9      	lsls	r1, r3, #31
 80069d2:	d5d7      	bpl.n	8006984 <_printf_float+0x23c>
 80069d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069d8:	4631      	mov	r1, r6
 80069da:	4628      	mov	r0, r5
 80069dc:	47b8      	blx	r7
 80069de:	3001      	adds	r0, #1
 80069e0:	f43f af0d 	beq.w	80067fe <_printf_float+0xb6>
 80069e4:	f04f 0a00 	mov.w	sl, #0
 80069e8:	f104 0b1a 	add.w	fp, r4, #26
 80069ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ee:	425b      	negs	r3, r3
 80069f0:	4553      	cmp	r3, sl
 80069f2:	dc01      	bgt.n	80069f8 <_printf_float+0x2b0>
 80069f4:	464b      	mov	r3, r9
 80069f6:	e793      	b.n	8006920 <_printf_float+0x1d8>
 80069f8:	2301      	movs	r3, #1
 80069fa:	465a      	mov	r2, fp
 80069fc:	4631      	mov	r1, r6
 80069fe:	4628      	mov	r0, r5
 8006a00:	47b8      	blx	r7
 8006a02:	3001      	adds	r0, #1
 8006a04:	f43f aefb 	beq.w	80067fe <_printf_float+0xb6>
 8006a08:	f10a 0a01 	add.w	sl, sl, #1
 8006a0c:	e7ee      	b.n	80069ec <_printf_float+0x2a4>
 8006a0e:	bf00      	nop
 8006a10:	7fefffff 	.word	0x7fefffff
 8006a14:	0800ad30 	.word	0x0800ad30
 8006a18:	0800ad34 	.word	0x0800ad34
 8006a1c:	0800ad38 	.word	0x0800ad38
 8006a20:	0800ad3c 	.word	0x0800ad3c
 8006a24:	0800ad40 	.word	0x0800ad40
 8006a28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a2e:	4553      	cmp	r3, sl
 8006a30:	bfa8      	it	ge
 8006a32:	4653      	movge	r3, sl
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	4699      	mov	r9, r3
 8006a38:	dc36      	bgt.n	8006aa8 <_printf_float+0x360>
 8006a3a:	f04f 0b00 	mov.w	fp, #0
 8006a3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a42:	f104 021a 	add.w	r2, r4, #26
 8006a46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a48:	9306      	str	r3, [sp, #24]
 8006a4a:	eba3 0309 	sub.w	r3, r3, r9
 8006a4e:	455b      	cmp	r3, fp
 8006a50:	dc31      	bgt.n	8006ab6 <_printf_float+0x36e>
 8006a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a54:	459a      	cmp	sl, r3
 8006a56:	dc3a      	bgt.n	8006ace <_printf_float+0x386>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	07da      	lsls	r2, r3, #31
 8006a5c:	d437      	bmi.n	8006ace <_printf_float+0x386>
 8006a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a60:	ebaa 0903 	sub.w	r9, sl, r3
 8006a64:	9b06      	ldr	r3, [sp, #24]
 8006a66:	ebaa 0303 	sub.w	r3, sl, r3
 8006a6a:	4599      	cmp	r9, r3
 8006a6c:	bfa8      	it	ge
 8006a6e:	4699      	movge	r9, r3
 8006a70:	f1b9 0f00 	cmp.w	r9, #0
 8006a74:	dc33      	bgt.n	8006ade <_printf_float+0x396>
 8006a76:	f04f 0800 	mov.w	r8, #0
 8006a7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a7e:	f104 0b1a 	add.w	fp, r4, #26
 8006a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a84:	ebaa 0303 	sub.w	r3, sl, r3
 8006a88:	eba3 0309 	sub.w	r3, r3, r9
 8006a8c:	4543      	cmp	r3, r8
 8006a8e:	f77f af79 	ble.w	8006984 <_printf_float+0x23c>
 8006a92:	2301      	movs	r3, #1
 8006a94:	465a      	mov	r2, fp
 8006a96:	4631      	mov	r1, r6
 8006a98:	4628      	mov	r0, r5
 8006a9a:	47b8      	blx	r7
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	f43f aeae 	beq.w	80067fe <_printf_float+0xb6>
 8006aa2:	f108 0801 	add.w	r8, r8, #1
 8006aa6:	e7ec      	b.n	8006a82 <_printf_float+0x33a>
 8006aa8:	4642      	mov	r2, r8
 8006aaa:	4631      	mov	r1, r6
 8006aac:	4628      	mov	r0, r5
 8006aae:	47b8      	blx	r7
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d1c2      	bne.n	8006a3a <_printf_float+0x2f2>
 8006ab4:	e6a3      	b.n	80067fe <_printf_float+0xb6>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	4631      	mov	r1, r6
 8006aba:	4628      	mov	r0, r5
 8006abc:	9206      	str	r2, [sp, #24]
 8006abe:	47b8      	blx	r7
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	f43f ae9c 	beq.w	80067fe <_printf_float+0xb6>
 8006ac6:	9a06      	ldr	r2, [sp, #24]
 8006ac8:	f10b 0b01 	add.w	fp, fp, #1
 8006acc:	e7bb      	b.n	8006a46 <_printf_float+0x2fe>
 8006ace:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	47b8      	blx	r7
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d1c0      	bne.n	8006a5e <_printf_float+0x316>
 8006adc:	e68f      	b.n	80067fe <_printf_float+0xb6>
 8006ade:	9a06      	ldr	r2, [sp, #24]
 8006ae0:	464b      	mov	r3, r9
 8006ae2:	4442      	add	r2, r8
 8006ae4:	4631      	mov	r1, r6
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	47b8      	blx	r7
 8006aea:	3001      	adds	r0, #1
 8006aec:	d1c3      	bne.n	8006a76 <_printf_float+0x32e>
 8006aee:	e686      	b.n	80067fe <_printf_float+0xb6>
 8006af0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006af4:	f1ba 0f01 	cmp.w	sl, #1
 8006af8:	dc01      	bgt.n	8006afe <_printf_float+0x3b6>
 8006afa:	07db      	lsls	r3, r3, #31
 8006afc:	d536      	bpl.n	8006b6c <_printf_float+0x424>
 8006afe:	2301      	movs	r3, #1
 8006b00:	4642      	mov	r2, r8
 8006b02:	4631      	mov	r1, r6
 8006b04:	4628      	mov	r0, r5
 8006b06:	47b8      	blx	r7
 8006b08:	3001      	adds	r0, #1
 8006b0a:	f43f ae78 	beq.w	80067fe <_printf_float+0xb6>
 8006b0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b12:	4631      	mov	r1, r6
 8006b14:	4628      	mov	r0, r5
 8006b16:	47b8      	blx	r7
 8006b18:	3001      	adds	r0, #1
 8006b1a:	f43f ae70 	beq.w	80067fe <_printf_float+0xb6>
 8006b1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b22:	2200      	movs	r2, #0
 8006b24:	2300      	movs	r3, #0
 8006b26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b2a:	f7f9 fff5 	bl	8000b18 <__aeabi_dcmpeq>
 8006b2e:	b9c0      	cbnz	r0, 8006b62 <_printf_float+0x41a>
 8006b30:	4653      	mov	r3, sl
 8006b32:	f108 0201 	add.w	r2, r8, #1
 8006b36:	4631      	mov	r1, r6
 8006b38:	4628      	mov	r0, r5
 8006b3a:	47b8      	blx	r7
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	d10c      	bne.n	8006b5a <_printf_float+0x412>
 8006b40:	e65d      	b.n	80067fe <_printf_float+0xb6>
 8006b42:	2301      	movs	r3, #1
 8006b44:	465a      	mov	r2, fp
 8006b46:	4631      	mov	r1, r6
 8006b48:	4628      	mov	r0, r5
 8006b4a:	47b8      	blx	r7
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	f43f ae56 	beq.w	80067fe <_printf_float+0xb6>
 8006b52:	f108 0801 	add.w	r8, r8, #1
 8006b56:	45d0      	cmp	r8, sl
 8006b58:	dbf3      	blt.n	8006b42 <_printf_float+0x3fa>
 8006b5a:	464b      	mov	r3, r9
 8006b5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006b60:	e6df      	b.n	8006922 <_printf_float+0x1da>
 8006b62:	f04f 0800 	mov.w	r8, #0
 8006b66:	f104 0b1a 	add.w	fp, r4, #26
 8006b6a:	e7f4      	b.n	8006b56 <_printf_float+0x40e>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	4642      	mov	r2, r8
 8006b70:	e7e1      	b.n	8006b36 <_printf_float+0x3ee>
 8006b72:	2301      	movs	r3, #1
 8006b74:	464a      	mov	r2, r9
 8006b76:	4631      	mov	r1, r6
 8006b78:	4628      	mov	r0, r5
 8006b7a:	47b8      	blx	r7
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	f43f ae3e 	beq.w	80067fe <_printf_float+0xb6>
 8006b82:	f108 0801 	add.w	r8, r8, #1
 8006b86:	68e3      	ldr	r3, [r4, #12]
 8006b88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b8a:	1a5b      	subs	r3, r3, r1
 8006b8c:	4543      	cmp	r3, r8
 8006b8e:	dcf0      	bgt.n	8006b72 <_printf_float+0x42a>
 8006b90:	e6fc      	b.n	800698c <_printf_float+0x244>
 8006b92:	f04f 0800 	mov.w	r8, #0
 8006b96:	f104 0919 	add.w	r9, r4, #25
 8006b9a:	e7f4      	b.n	8006b86 <_printf_float+0x43e>

08006b9c <_printf_common>:
 8006b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba0:	4616      	mov	r6, r2
 8006ba2:	4698      	mov	r8, r3
 8006ba4:	688a      	ldr	r2, [r1, #8]
 8006ba6:	690b      	ldr	r3, [r1, #16]
 8006ba8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bac:	4293      	cmp	r3, r2
 8006bae:	bfb8      	it	lt
 8006bb0:	4613      	movlt	r3, r2
 8006bb2:	6033      	str	r3, [r6, #0]
 8006bb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006bb8:	4607      	mov	r7, r0
 8006bba:	460c      	mov	r4, r1
 8006bbc:	b10a      	cbz	r2, 8006bc2 <_printf_common+0x26>
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	6033      	str	r3, [r6, #0]
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	0699      	lsls	r1, r3, #26
 8006bc6:	bf42      	ittt	mi
 8006bc8:	6833      	ldrmi	r3, [r6, #0]
 8006bca:	3302      	addmi	r3, #2
 8006bcc:	6033      	strmi	r3, [r6, #0]
 8006bce:	6825      	ldr	r5, [r4, #0]
 8006bd0:	f015 0506 	ands.w	r5, r5, #6
 8006bd4:	d106      	bne.n	8006be4 <_printf_common+0x48>
 8006bd6:	f104 0a19 	add.w	sl, r4, #25
 8006bda:	68e3      	ldr	r3, [r4, #12]
 8006bdc:	6832      	ldr	r2, [r6, #0]
 8006bde:	1a9b      	subs	r3, r3, r2
 8006be0:	42ab      	cmp	r3, r5
 8006be2:	dc26      	bgt.n	8006c32 <_printf_common+0x96>
 8006be4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006be8:	6822      	ldr	r2, [r4, #0]
 8006bea:	3b00      	subs	r3, #0
 8006bec:	bf18      	it	ne
 8006bee:	2301      	movne	r3, #1
 8006bf0:	0692      	lsls	r2, r2, #26
 8006bf2:	d42b      	bmi.n	8006c4c <_printf_common+0xb0>
 8006bf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006bf8:	4641      	mov	r1, r8
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	47c8      	blx	r9
 8006bfe:	3001      	adds	r0, #1
 8006c00:	d01e      	beq.n	8006c40 <_printf_common+0xa4>
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	6922      	ldr	r2, [r4, #16]
 8006c06:	f003 0306 	and.w	r3, r3, #6
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	bf02      	ittt	eq
 8006c0e:	68e5      	ldreq	r5, [r4, #12]
 8006c10:	6833      	ldreq	r3, [r6, #0]
 8006c12:	1aed      	subeq	r5, r5, r3
 8006c14:	68a3      	ldr	r3, [r4, #8]
 8006c16:	bf0c      	ite	eq
 8006c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c1c:	2500      	movne	r5, #0
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	bfc4      	itt	gt
 8006c22:	1a9b      	subgt	r3, r3, r2
 8006c24:	18ed      	addgt	r5, r5, r3
 8006c26:	2600      	movs	r6, #0
 8006c28:	341a      	adds	r4, #26
 8006c2a:	42b5      	cmp	r5, r6
 8006c2c:	d11a      	bne.n	8006c64 <_printf_common+0xc8>
 8006c2e:	2000      	movs	r0, #0
 8006c30:	e008      	b.n	8006c44 <_printf_common+0xa8>
 8006c32:	2301      	movs	r3, #1
 8006c34:	4652      	mov	r2, sl
 8006c36:	4641      	mov	r1, r8
 8006c38:	4638      	mov	r0, r7
 8006c3a:	47c8      	blx	r9
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	d103      	bne.n	8006c48 <_printf_common+0xac>
 8006c40:	f04f 30ff 	mov.w	r0, #4294967295
 8006c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c48:	3501      	adds	r5, #1
 8006c4a:	e7c6      	b.n	8006bda <_printf_common+0x3e>
 8006c4c:	18e1      	adds	r1, r4, r3
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	2030      	movs	r0, #48	@ 0x30
 8006c52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c56:	4422      	add	r2, r4
 8006c58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c60:	3302      	adds	r3, #2
 8006c62:	e7c7      	b.n	8006bf4 <_printf_common+0x58>
 8006c64:	2301      	movs	r3, #1
 8006c66:	4622      	mov	r2, r4
 8006c68:	4641      	mov	r1, r8
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	47c8      	blx	r9
 8006c6e:	3001      	adds	r0, #1
 8006c70:	d0e6      	beq.n	8006c40 <_printf_common+0xa4>
 8006c72:	3601      	adds	r6, #1
 8006c74:	e7d9      	b.n	8006c2a <_printf_common+0x8e>
	...

08006c78 <_printf_i>:
 8006c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c7c:	7e0f      	ldrb	r7, [r1, #24]
 8006c7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c80:	2f78      	cmp	r7, #120	@ 0x78
 8006c82:	4691      	mov	r9, r2
 8006c84:	4680      	mov	r8, r0
 8006c86:	460c      	mov	r4, r1
 8006c88:	469a      	mov	sl, r3
 8006c8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c8e:	d807      	bhi.n	8006ca0 <_printf_i+0x28>
 8006c90:	2f62      	cmp	r7, #98	@ 0x62
 8006c92:	d80a      	bhi.n	8006caa <_printf_i+0x32>
 8006c94:	2f00      	cmp	r7, #0
 8006c96:	f000 80d2 	beq.w	8006e3e <_printf_i+0x1c6>
 8006c9a:	2f58      	cmp	r7, #88	@ 0x58
 8006c9c:	f000 80b9 	beq.w	8006e12 <_printf_i+0x19a>
 8006ca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ca4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ca8:	e03a      	b.n	8006d20 <_printf_i+0xa8>
 8006caa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006cae:	2b15      	cmp	r3, #21
 8006cb0:	d8f6      	bhi.n	8006ca0 <_printf_i+0x28>
 8006cb2:	a101      	add	r1, pc, #4	@ (adr r1, 8006cb8 <_printf_i+0x40>)
 8006cb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cb8:	08006d11 	.word	0x08006d11
 8006cbc:	08006d25 	.word	0x08006d25
 8006cc0:	08006ca1 	.word	0x08006ca1
 8006cc4:	08006ca1 	.word	0x08006ca1
 8006cc8:	08006ca1 	.word	0x08006ca1
 8006ccc:	08006ca1 	.word	0x08006ca1
 8006cd0:	08006d25 	.word	0x08006d25
 8006cd4:	08006ca1 	.word	0x08006ca1
 8006cd8:	08006ca1 	.word	0x08006ca1
 8006cdc:	08006ca1 	.word	0x08006ca1
 8006ce0:	08006ca1 	.word	0x08006ca1
 8006ce4:	08006e25 	.word	0x08006e25
 8006ce8:	08006d4f 	.word	0x08006d4f
 8006cec:	08006ddf 	.word	0x08006ddf
 8006cf0:	08006ca1 	.word	0x08006ca1
 8006cf4:	08006ca1 	.word	0x08006ca1
 8006cf8:	08006e47 	.word	0x08006e47
 8006cfc:	08006ca1 	.word	0x08006ca1
 8006d00:	08006d4f 	.word	0x08006d4f
 8006d04:	08006ca1 	.word	0x08006ca1
 8006d08:	08006ca1 	.word	0x08006ca1
 8006d0c:	08006de7 	.word	0x08006de7
 8006d10:	6833      	ldr	r3, [r6, #0]
 8006d12:	1d1a      	adds	r2, r3, #4
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6032      	str	r2, [r6, #0]
 8006d18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d20:	2301      	movs	r3, #1
 8006d22:	e09d      	b.n	8006e60 <_printf_i+0x1e8>
 8006d24:	6833      	ldr	r3, [r6, #0]
 8006d26:	6820      	ldr	r0, [r4, #0]
 8006d28:	1d19      	adds	r1, r3, #4
 8006d2a:	6031      	str	r1, [r6, #0]
 8006d2c:	0606      	lsls	r6, r0, #24
 8006d2e:	d501      	bpl.n	8006d34 <_printf_i+0xbc>
 8006d30:	681d      	ldr	r5, [r3, #0]
 8006d32:	e003      	b.n	8006d3c <_printf_i+0xc4>
 8006d34:	0645      	lsls	r5, r0, #25
 8006d36:	d5fb      	bpl.n	8006d30 <_printf_i+0xb8>
 8006d38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d3c:	2d00      	cmp	r5, #0
 8006d3e:	da03      	bge.n	8006d48 <_printf_i+0xd0>
 8006d40:	232d      	movs	r3, #45	@ 0x2d
 8006d42:	426d      	negs	r5, r5
 8006d44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d48:	4859      	ldr	r0, [pc, #356]	@ (8006eb0 <_printf_i+0x238>)
 8006d4a:	230a      	movs	r3, #10
 8006d4c:	e011      	b.n	8006d72 <_printf_i+0xfa>
 8006d4e:	6821      	ldr	r1, [r4, #0]
 8006d50:	6833      	ldr	r3, [r6, #0]
 8006d52:	0608      	lsls	r0, r1, #24
 8006d54:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d58:	d402      	bmi.n	8006d60 <_printf_i+0xe8>
 8006d5a:	0649      	lsls	r1, r1, #25
 8006d5c:	bf48      	it	mi
 8006d5e:	b2ad      	uxthmi	r5, r5
 8006d60:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d62:	4853      	ldr	r0, [pc, #332]	@ (8006eb0 <_printf_i+0x238>)
 8006d64:	6033      	str	r3, [r6, #0]
 8006d66:	bf14      	ite	ne
 8006d68:	230a      	movne	r3, #10
 8006d6a:	2308      	moveq	r3, #8
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d72:	6866      	ldr	r6, [r4, #4]
 8006d74:	60a6      	str	r6, [r4, #8]
 8006d76:	2e00      	cmp	r6, #0
 8006d78:	bfa2      	ittt	ge
 8006d7a:	6821      	ldrge	r1, [r4, #0]
 8006d7c:	f021 0104 	bicge.w	r1, r1, #4
 8006d80:	6021      	strge	r1, [r4, #0]
 8006d82:	b90d      	cbnz	r5, 8006d88 <_printf_i+0x110>
 8006d84:	2e00      	cmp	r6, #0
 8006d86:	d04b      	beq.n	8006e20 <_printf_i+0x1a8>
 8006d88:	4616      	mov	r6, r2
 8006d8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d8e:	fb03 5711 	mls	r7, r3, r1, r5
 8006d92:	5dc7      	ldrb	r7, [r0, r7]
 8006d94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d98:	462f      	mov	r7, r5
 8006d9a:	42bb      	cmp	r3, r7
 8006d9c:	460d      	mov	r5, r1
 8006d9e:	d9f4      	bls.n	8006d8a <_printf_i+0x112>
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d10b      	bne.n	8006dbc <_printf_i+0x144>
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	07df      	lsls	r7, r3, #31
 8006da8:	d508      	bpl.n	8006dbc <_printf_i+0x144>
 8006daa:	6923      	ldr	r3, [r4, #16]
 8006dac:	6861      	ldr	r1, [r4, #4]
 8006dae:	4299      	cmp	r1, r3
 8006db0:	bfde      	ittt	le
 8006db2:	2330      	movle	r3, #48	@ 0x30
 8006db4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006db8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006dbc:	1b92      	subs	r2, r2, r6
 8006dbe:	6122      	str	r2, [r4, #16]
 8006dc0:	f8cd a000 	str.w	sl, [sp]
 8006dc4:	464b      	mov	r3, r9
 8006dc6:	aa03      	add	r2, sp, #12
 8006dc8:	4621      	mov	r1, r4
 8006dca:	4640      	mov	r0, r8
 8006dcc:	f7ff fee6 	bl	8006b9c <_printf_common>
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	d14a      	bne.n	8006e6a <_printf_i+0x1f2>
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd8:	b004      	add	sp, #16
 8006dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	f043 0320 	orr.w	r3, r3, #32
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	4833      	ldr	r0, [pc, #204]	@ (8006eb4 <_printf_i+0x23c>)
 8006de8:	2778      	movs	r7, #120	@ 0x78
 8006dea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	6831      	ldr	r1, [r6, #0]
 8006df2:	061f      	lsls	r7, r3, #24
 8006df4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006df8:	d402      	bmi.n	8006e00 <_printf_i+0x188>
 8006dfa:	065f      	lsls	r7, r3, #25
 8006dfc:	bf48      	it	mi
 8006dfe:	b2ad      	uxthmi	r5, r5
 8006e00:	6031      	str	r1, [r6, #0]
 8006e02:	07d9      	lsls	r1, r3, #31
 8006e04:	bf44      	itt	mi
 8006e06:	f043 0320 	orrmi.w	r3, r3, #32
 8006e0a:	6023      	strmi	r3, [r4, #0]
 8006e0c:	b11d      	cbz	r5, 8006e16 <_printf_i+0x19e>
 8006e0e:	2310      	movs	r3, #16
 8006e10:	e7ac      	b.n	8006d6c <_printf_i+0xf4>
 8006e12:	4827      	ldr	r0, [pc, #156]	@ (8006eb0 <_printf_i+0x238>)
 8006e14:	e7e9      	b.n	8006dea <_printf_i+0x172>
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	f023 0320 	bic.w	r3, r3, #32
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	e7f6      	b.n	8006e0e <_printf_i+0x196>
 8006e20:	4616      	mov	r6, r2
 8006e22:	e7bd      	b.n	8006da0 <_printf_i+0x128>
 8006e24:	6833      	ldr	r3, [r6, #0]
 8006e26:	6825      	ldr	r5, [r4, #0]
 8006e28:	6961      	ldr	r1, [r4, #20]
 8006e2a:	1d18      	adds	r0, r3, #4
 8006e2c:	6030      	str	r0, [r6, #0]
 8006e2e:	062e      	lsls	r6, r5, #24
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	d501      	bpl.n	8006e38 <_printf_i+0x1c0>
 8006e34:	6019      	str	r1, [r3, #0]
 8006e36:	e002      	b.n	8006e3e <_printf_i+0x1c6>
 8006e38:	0668      	lsls	r0, r5, #25
 8006e3a:	d5fb      	bpl.n	8006e34 <_printf_i+0x1bc>
 8006e3c:	8019      	strh	r1, [r3, #0]
 8006e3e:	2300      	movs	r3, #0
 8006e40:	6123      	str	r3, [r4, #16]
 8006e42:	4616      	mov	r6, r2
 8006e44:	e7bc      	b.n	8006dc0 <_printf_i+0x148>
 8006e46:	6833      	ldr	r3, [r6, #0]
 8006e48:	1d1a      	adds	r2, r3, #4
 8006e4a:	6032      	str	r2, [r6, #0]
 8006e4c:	681e      	ldr	r6, [r3, #0]
 8006e4e:	6862      	ldr	r2, [r4, #4]
 8006e50:	2100      	movs	r1, #0
 8006e52:	4630      	mov	r0, r6
 8006e54:	f7f9 f9e4 	bl	8000220 <memchr>
 8006e58:	b108      	cbz	r0, 8006e5e <_printf_i+0x1e6>
 8006e5a:	1b80      	subs	r0, r0, r6
 8006e5c:	6060      	str	r0, [r4, #4]
 8006e5e:	6863      	ldr	r3, [r4, #4]
 8006e60:	6123      	str	r3, [r4, #16]
 8006e62:	2300      	movs	r3, #0
 8006e64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e68:	e7aa      	b.n	8006dc0 <_printf_i+0x148>
 8006e6a:	6923      	ldr	r3, [r4, #16]
 8006e6c:	4632      	mov	r2, r6
 8006e6e:	4649      	mov	r1, r9
 8006e70:	4640      	mov	r0, r8
 8006e72:	47d0      	blx	sl
 8006e74:	3001      	adds	r0, #1
 8006e76:	d0ad      	beq.n	8006dd4 <_printf_i+0x15c>
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	079b      	lsls	r3, r3, #30
 8006e7c:	d413      	bmi.n	8006ea6 <_printf_i+0x22e>
 8006e7e:	68e0      	ldr	r0, [r4, #12]
 8006e80:	9b03      	ldr	r3, [sp, #12]
 8006e82:	4298      	cmp	r0, r3
 8006e84:	bfb8      	it	lt
 8006e86:	4618      	movlt	r0, r3
 8006e88:	e7a6      	b.n	8006dd8 <_printf_i+0x160>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	4632      	mov	r2, r6
 8006e8e:	4649      	mov	r1, r9
 8006e90:	4640      	mov	r0, r8
 8006e92:	47d0      	blx	sl
 8006e94:	3001      	adds	r0, #1
 8006e96:	d09d      	beq.n	8006dd4 <_printf_i+0x15c>
 8006e98:	3501      	adds	r5, #1
 8006e9a:	68e3      	ldr	r3, [r4, #12]
 8006e9c:	9903      	ldr	r1, [sp, #12]
 8006e9e:	1a5b      	subs	r3, r3, r1
 8006ea0:	42ab      	cmp	r3, r5
 8006ea2:	dcf2      	bgt.n	8006e8a <_printf_i+0x212>
 8006ea4:	e7eb      	b.n	8006e7e <_printf_i+0x206>
 8006ea6:	2500      	movs	r5, #0
 8006ea8:	f104 0619 	add.w	r6, r4, #25
 8006eac:	e7f5      	b.n	8006e9a <_printf_i+0x222>
 8006eae:	bf00      	nop
 8006eb0:	0800ad42 	.word	0x0800ad42
 8006eb4:	0800ad53 	.word	0x0800ad53

08006eb8 <_scanf_float>:
 8006eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ebc:	b087      	sub	sp, #28
 8006ebe:	4617      	mov	r7, r2
 8006ec0:	9303      	str	r3, [sp, #12]
 8006ec2:	688b      	ldr	r3, [r1, #8]
 8006ec4:	1e5a      	subs	r2, r3, #1
 8006ec6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006eca:	bf81      	itttt	hi
 8006ecc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006ed0:	eb03 0b05 	addhi.w	fp, r3, r5
 8006ed4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006ed8:	608b      	strhi	r3, [r1, #8]
 8006eda:	680b      	ldr	r3, [r1, #0]
 8006edc:	460a      	mov	r2, r1
 8006ede:	f04f 0500 	mov.w	r5, #0
 8006ee2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006ee6:	f842 3b1c 	str.w	r3, [r2], #28
 8006eea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006eee:	4680      	mov	r8, r0
 8006ef0:	460c      	mov	r4, r1
 8006ef2:	bf98      	it	ls
 8006ef4:	f04f 0b00 	movls.w	fp, #0
 8006ef8:	9201      	str	r2, [sp, #4]
 8006efa:	4616      	mov	r6, r2
 8006efc:	46aa      	mov	sl, r5
 8006efe:	46a9      	mov	r9, r5
 8006f00:	9502      	str	r5, [sp, #8]
 8006f02:	68a2      	ldr	r2, [r4, #8]
 8006f04:	b152      	cbz	r2, 8006f1c <_scanf_float+0x64>
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	2b4e      	cmp	r3, #78	@ 0x4e
 8006f0c:	d864      	bhi.n	8006fd8 <_scanf_float+0x120>
 8006f0e:	2b40      	cmp	r3, #64	@ 0x40
 8006f10:	d83c      	bhi.n	8006f8c <_scanf_float+0xd4>
 8006f12:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006f16:	b2c8      	uxtb	r0, r1
 8006f18:	280e      	cmp	r0, #14
 8006f1a:	d93a      	bls.n	8006f92 <_scanf_float+0xda>
 8006f1c:	f1b9 0f00 	cmp.w	r9, #0
 8006f20:	d003      	beq.n	8006f2a <_scanf_float+0x72>
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f28:	6023      	str	r3, [r4, #0]
 8006f2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f2e:	f1ba 0f01 	cmp.w	sl, #1
 8006f32:	f200 8117 	bhi.w	8007164 <_scanf_float+0x2ac>
 8006f36:	9b01      	ldr	r3, [sp, #4]
 8006f38:	429e      	cmp	r6, r3
 8006f3a:	f200 8108 	bhi.w	800714e <_scanf_float+0x296>
 8006f3e:	2001      	movs	r0, #1
 8006f40:	b007      	add	sp, #28
 8006f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f46:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006f4a:	2a0d      	cmp	r2, #13
 8006f4c:	d8e6      	bhi.n	8006f1c <_scanf_float+0x64>
 8006f4e:	a101      	add	r1, pc, #4	@ (adr r1, 8006f54 <_scanf_float+0x9c>)
 8006f50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f54:	0800709b 	.word	0x0800709b
 8006f58:	08006f1d 	.word	0x08006f1d
 8006f5c:	08006f1d 	.word	0x08006f1d
 8006f60:	08006f1d 	.word	0x08006f1d
 8006f64:	080070fb 	.word	0x080070fb
 8006f68:	080070d3 	.word	0x080070d3
 8006f6c:	08006f1d 	.word	0x08006f1d
 8006f70:	08006f1d 	.word	0x08006f1d
 8006f74:	080070a9 	.word	0x080070a9
 8006f78:	08006f1d 	.word	0x08006f1d
 8006f7c:	08006f1d 	.word	0x08006f1d
 8006f80:	08006f1d 	.word	0x08006f1d
 8006f84:	08006f1d 	.word	0x08006f1d
 8006f88:	08007061 	.word	0x08007061
 8006f8c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006f90:	e7db      	b.n	8006f4a <_scanf_float+0x92>
 8006f92:	290e      	cmp	r1, #14
 8006f94:	d8c2      	bhi.n	8006f1c <_scanf_float+0x64>
 8006f96:	a001      	add	r0, pc, #4	@ (adr r0, 8006f9c <_scanf_float+0xe4>)
 8006f98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006f9c:	08007051 	.word	0x08007051
 8006fa0:	08006f1d 	.word	0x08006f1d
 8006fa4:	08007051 	.word	0x08007051
 8006fa8:	080070e7 	.word	0x080070e7
 8006fac:	08006f1d 	.word	0x08006f1d
 8006fb0:	08006ff9 	.word	0x08006ff9
 8006fb4:	08007037 	.word	0x08007037
 8006fb8:	08007037 	.word	0x08007037
 8006fbc:	08007037 	.word	0x08007037
 8006fc0:	08007037 	.word	0x08007037
 8006fc4:	08007037 	.word	0x08007037
 8006fc8:	08007037 	.word	0x08007037
 8006fcc:	08007037 	.word	0x08007037
 8006fd0:	08007037 	.word	0x08007037
 8006fd4:	08007037 	.word	0x08007037
 8006fd8:	2b6e      	cmp	r3, #110	@ 0x6e
 8006fda:	d809      	bhi.n	8006ff0 <_scanf_float+0x138>
 8006fdc:	2b60      	cmp	r3, #96	@ 0x60
 8006fde:	d8b2      	bhi.n	8006f46 <_scanf_float+0x8e>
 8006fe0:	2b54      	cmp	r3, #84	@ 0x54
 8006fe2:	d07b      	beq.n	80070dc <_scanf_float+0x224>
 8006fe4:	2b59      	cmp	r3, #89	@ 0x59
 8006fe6:	d199      	bne.n	8006f1c <_scanf_float+0x64>
 8006fe8:	2d07      	cmp	r5, #7
 8006fea:	d197      	bne.n	8006f1c <_scanf_float+0x64>
 8006fec:	2508      	movs	r5, #8
 8006fee:	e02c      	b.n	800704a <_scanf_float+0x192>
 8006ff0:	2b74      	cmp	r3, #116	@ 0x74
 8006ff2:	d073      	beq.n	80070dc <_scanf_float+0x224>
 8006ff4:	2b79      	cmp	r3, #121	@ 0x79
 8006ff6:	e7f6      	b.n	8006fe6 <_scanf_float+0x12e>
 8006ff8:	6821      	ldr	r1, [r4, #0]
 8006ffa:	05c8      	lsls	r0, r1, #23
 8006ffc:	d51b      	bpl.n	8007036 <_scanf_float+0x17e>
 8006ffe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007002:	6021      	str	r1, [r4, #0]
 8007004:	f109 0901 	add.w	r9, r9, #1
 8007008:	f1bb 0f00 	cmp.w	fp, #0
 800700c:	d003      	beq.n	8007016 <_scanf_float+0x15e>
 800700e:	3201      	adds	r2, #1
 8007010:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007014:	60a2      	str	r2, [r4, #8]
 8007016:	68a3      	ldr	r3, [r4, #8]
 8007018:	3b01      	subs	r3, #1
 800701a:	60a3      	str	r3, [r4, #8]
 800701c:	6923      	ldr	r3, [r4, #16]
 800701e:	3301      	adds	r3, #1
 8007020:	6123      	str	r3, [r4, #16]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	3b01      	subs	r3, #1
 8007026:	2b00      	cmp	r3, #0
 8007028:	607b      	str	r3, [r7, #4]
 800702a:	f340 8087 	ble.w	800713c <_scanf_float+0x284>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	3301      	adds	r3, #1
 8007032:	603b      	str	r3, [r7, #0]
 8007034:	e765      	b.n	8006f02 <_scanf_float+0x4a>
 8007036:	eb1a 0105 	adds.w	r1, sl, r5
 800703a:	f47f af6f 	bne.w	8006f1c <_scanf_float+0x64>
 800703e:	6822      	ldr	r2, [r4, #0]
 8007040:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007044:	6022      	str	r2, [r4, #0]
 8007046:	460d      	mov	r5, r1
 8007048:	468a      	mov	sl, r1
 800704a:	f806 3b01 	strb.w	r3, [r6], #1
 800704e:	e7e2      	b.n	8007016 <_scanf_float+0x15e>
 8007050:	6822      	ldr	r2, [r4, #0]
 8007052:	0610      	lsls	r0, r2, #24
 8007054:	f57f af62 	bpl.w	8006f1c <_scanf_float+0x64>
 8007058:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800705c:	6022      	str	r2, [r4, #0]
 800705e:	e7f4      	b.n	800704a <_scanf_float+0x192>
 8007060:	f1ba 0f00 	cmp.w	sl, #0
 8007064:	d10e      	bne.n	8007084 <_scanf_float+0x1cc>
 8007066:	f1b9 0f00 	cmp.w	r9, #0
 800706a:	d10e      	bne.n	800708a <_scanf_float+0x1d2>
 800706c:	6822      	ldr	r2, [r4, #0]
 800706e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007072:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007076:	d108      	bne.n	800708a <_scanf_float+0x1d2>
 8007078:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800707c:	6022      	str	r2, [r4, #0]
 800707e:	f04f 0a01 	mov.w	sl, #1
 8007082:	e7e2      	b.n	800704a <_scanf_float+0x192>
 8007084:	f1ba 0f02 	cmp.w	sl, #2
 8007088:	d055      	beq.n	8007136 <_scanf_float+0x27e>
 800708a:	2d01      	cmp	r5, #1
 800708c:	d002      	beq.n	8007094 <_scanf_float+0x1dc>
 800708e:	2d04      	cmp	r5, #4
 8007090:	f47f af44 	bne.w	8006f1c <_scanf_float+0x64>
 8007094:	3501      	adds	r5, #1
 8007096:	b2ed      	uxtb	r5, r5
 8007098:	e7d7      	b.n	800704a <_scanf_float+0x192>
 800709a:	f1ba 0f01 	cmp.w	sl, #1
 800709e:	f47f af3d 	bne.w	8006f1c <_scanf_float+0x64>
 80070a2:	f04f 0a02 	mov.w	sl, #2
 80070a6:	e7d0      	b.n	800704a <_scanf_float+0x192>
 80070a8:	b97d      	cbnz	r5, 80070ca <_scanf_float+0x212>
 80070aa:	f1b9 0f00 	cmp.w	r9, #0
 80070ae:	f47f af38 	bne.w	8006f22 <_scanf_float+0x6a>
 80070b2:	6822      	ldr	r2, [r4, #0]
 80070b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80070b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80070bc:	f040 8108 	bne.w	80072d0 <_scanf_float+0x418>
 80070c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80070c4:	6022      	str	r2, [r4, #0]
 80070c6:	2501      	movs	r5, #1
 80070c8:	e7bf      	b.n	800704a <_scanf_float+0x192>
 80070ca:	2d03      	cmp	r5, #3
 80070cc:	d0e2      	beq.n	8007094 <_scanf_float+0x1dc>
 80070ce:	2d05      	cmp	r5, #5
 80070d0:	e7de      	b.n	8007090 <_scanf_float+0x1d8>
 80070d2:	2d02      	cmp	r5, #2
 80070d4:	f47f af22 	bne.w	8006f1c <_scanf_float+0x64>
 80070d8:	2503      	movs	r5, #3
 80070da:	e7b6      	b.n	800704a <_scanf_float+0x192>
 80070dc:	2d06      	cmp	r5, #6
 80070de:	f47f af1d 	bne.w	8006f1c <_scanf_float+0x64>
 80070e2:	2507      	movs	r5, #7
 80070e4:	e7b1      	b.n	800704a <_scanf_float+0x192>
 80070e6:	6822      	ldr	r2, [r4, #0]
 80070e8:	0591      	lsls	r1, r2, #22
 80070ea:	f57f af17 	bpl.w	8006f1c <_scanf_float+0x64>
 80070ee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80070f2:	6022      	str	r2, [r4, #0]
 80070f4:	f8cd 9008 	str.w	r9, [sp, #8]
 80070f8:	e7a7      	b.n	800704a <_scanf_float+0x192>
 80070fa:	6822      	ldr	r2, [r4, #0]
 80070fc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007100:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007104:	d006      	beq.n	8007114 <_scanf_float+0x25c>
 8007106:	0550      	lsls	r0, r2, #21
 8007108:	f57f af08 	bpl.w	8006f1c <_scanf_float+0x64>
 800710c:	f1b9 0f00 	cmp.w	r9, #0
 8007110:	f000 80de 	beq.w	80072d0 <_scanf_float+0x418>
 8007114:	0591      	lsls	r1, r2, #22
 8007116:	bf58      	it	pl
 8007118:	9902      	ldrpl	r1, [sp, #8]
 800711a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800711e:	bf58      	it	pl
 8007120:	eba9 0101 	subpl.w	r1, r9, r1
 8007124:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007128:	bf58      	it	pl
 800712a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800712e:	6022      	str	r2, [r4, #0]
 8007130:	f04f 0900 	mov.w	r9, #0
 8007134:	e789      	b.n	800704a <_scanf_float+0x192>
 8007136:	f04f 0a03 	mov.w	sl, #3
 800713a:	e786      	b.n	800704a <_scanf_float+0x192>
 800713c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007140:	4639      	mov	r1, r7
 8007142:	4640      	mov	r0, r8
 8007144:	4798      	blx	r3
 8007146:	2800      	cmp	r0, #0
 8007148:	f43f aedb 	beq.w	8006f02 <_scanf_float+0x4a>
 800714c:	e6e6      	b.n	8006f1c <_scanf_float+0x64>
 800714e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007152:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007156:	463a      	mov	r2, r7
 8007158:	4640      	mov	r0, r8
 800715a:	4798      	blx	r3
 800715c:	6923      	ldr	r3, [r4, #16]
 800715e:	3b01      	subs	r3, #1
 8007160:	6123      	str	r3, [r4, #16]
 8007162:	e6e8      	b.n	8006f36 <_scanf_float+0x7e>
 8007164:	1e6b      	subs	r3, r5, #1
 8007166:	2b06      	cmp	r3, #6
 8007168:	d824      	bhi.n	80071b4 <_scanf_float+0x2fc>
 800716a:	2d02      	cmp	r5, #2
 800716c:	d836      	bhi.n	80071dc <_scanf_float+0x324>
 800716e:	9b01      	ldr	r3, [sp, #4]
 8007170:	429e      	cmp	r6, r3
 8007172:	f67f aee4 	bls.w	8006f3e <_scanf_float+0x86>
 8007176:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800717a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800717e:	463a      	mov	r2, r7
 8007180:	4640      	mov	r0, r8
 8007182:	4798      	blx	r3
 8007184:	6923      	ldr	r3, [r4, #16]
 8007186:	3b01      	subs	r3, #1
 8007188:	6123      	str	r3, [r4, #16]
 800718a:	e7f0      	b.n	800716e <_scanf_float+0x2b6>
 800718c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007190:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007194:	463a      	mov	r2, r7
 8007196:	4640      	mov	r0, r8
 8007198:	4798      	blx	r3
 800719a:	6923      	ldr	r3, [r4, #16]
 800719c:	3b01      	subs	r3, #1
 800719e:	6123      	str	r3, [r4, #16]
 80071a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071a4:	fa5f fa8a 	uxtb.w	sl, sl
 80071a8:	f1ba 0f02 	cmp.w	sl, #2
 80071ac:	d1ee      	bne.n	800718c <_scanf_float+0x2d4>
 80071ae:	3d03      	subs	r5, #3
 80071b0:	b2ed      	uxtb	r5, r5
 80071b2:	1b76      	subs	r6, r6, r5
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	05da      	lsls	r2, r3, #23
 80071b8:	d530      	bpl.n	800721c <_scanf_float+0x364>
 80071ba:	055b      	lsls	r3, r3, #21
 80071bc:	d511      	bpl.n	80071e2 <_scanf_float+0x32a>
 80071be:	9b01      	ldr	r3, [sp, #4]
 80071c0:	429e      	cmp	r6, r3
 80071c2:	f67f aebc 	bls.w	8006f3e <_scanf_float+0x86>
 80071c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80071ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80071ce:	463a      	mov	r2, r7
 80071d0:	4640      	mov	r0, r8
 80071d2:	4798      	blx	r3
 80071d4:	6923      	ldr	r3, [r4, #16]
 80071d6:	3b01      	subs	r3, #1
 80071d8:	6123      	str	r3, [r4, #16]
 80071da:	e7f0      	b.n	80071be <_scanf_float+0x306>
 80071dc:	46aa      	mov	sl, r5
 80071de:	46b3      	mov	fp, r6
 80071e0:	e7de      	b.n	80071a0 <_scanf_float+0x2e8>
 80071e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80071e6:	6923      	ldr	r3, [r4, #16]
 80071e8:	2965      	cmp	r1, #101	@ 0x65
 80071ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80071ee:	f106 35ff 	add.w	r5, r6, #4294967295
 80071f2:	6123      	str	r3, [r4, #16]
 80071f4:	d00c      	beq.n	8007210 <_scanf_float+0x358>
 80071f6:	2945      	cmp	r1, #69	@ 0x45
 80071f8:	d00a      	beq.n	8007210 <_scanf_float+0x358>
 80071fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80071fe:	463a      	mov	r2, r7
 8007200:	4640      	mov	r0, r8
 8007202:	4798      	blx	r3
 8007204:	6923      	ldr	r3, [r4, #16]
 8007206:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800720a:	3b01      	subs	r3, #1
 800720c:	1eb5      	subs	r5, r6, #2
 800720e:	6123      	str	r3, [r4, #16]
 8007210:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007214:	463a      	mov	r2, r7
 8007216:	4640      	mov	r0, r8
 8007218:	4798      	blx	r3
 800721a:	462e      	mov	r6, r5
 800721c:	6822      	ldr	r2, [r4, #0]
 800721e:	f012 0210 	ands.w	r2, r2, #16
 8007222:	d001      	beq.n	8007228 <_scanf_float+0x370>
 8007224:	2000      	movs	r0, #0
 8007226:	e68b      	b.n	8006f40 <_scanf_float+0x88>
 8007228:	7032      	strb	r2, [r6, #0]
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007234:	d11c      	bne.n	8007270 <_scanf_float+0x3b8>
 8007236:	9b02      	ldr	r3, [sp, #8]
 8007238:	454b      	cmp	r3, r9
 800723a:	eba3 0209 	sub.w	r2, r3, r9
 800723e:	d123      	bne.n	8007288 <_scanf_float+0x3d0>
 8007240:	9901      	ldr	r1, [sp, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	4640      	mov	r0, r8
 8007246:	f002 fbf7 	bl	8009a38 <_strtod_r>
 800724a:	9b03      	ldr	r3, [sp, #12]
 800724c:	6821      	ldr	r1, [r4, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f011 0f02 	tst.w	r1, #2
 8007254:	ec57 6b10 	vmov	r6, r7, d0
 8007258:	f103 0204 	add.w	r2, r3, #4
 800725c:	d01f      	beq.n	800729e <_scanf_float+0x3e6>
 800725e:	9903      	ldr	r1, [sp, #12]
 8007260:	600a      	str	r2, [r1, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	e9c3 6700 	strd	r6, r7, [r3]
 8007268:	68e3      	ldr	r3, [r4, #12]
 800726a:	3301      	adds	r3, #1
 800726c:	60e3      	str	r3, [r4, #12]
 800726e:	e7d9      	b.n	8007224 <_scanf_float+0x36c>
 8007270:	9b04      	ldr	r3, [sp, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0e4      	beq.n	8007240 <_scanf_float+0x388>
 8007276:	9905      	ldr	r1, [sp, #20]
 8007278:	230a      	movs	r3, #10
 800727a:	3101      	adds	r1, #1
 800727c:	4640      	mov	r0, r8
 800727e:	f002 fc5b 	bl	8009b38 <_strtol_r>
 8007282:	9b04      	ldr	r3, [sp, #16]
 8007284:	9e05      	ldr	r6, [sp, #20]
 8007286:	1ac2      	subs	r2, r0, r3
 8007288:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800728c:	429e      	cmp	r6, r3
 800728e:	bf28      	it	cs
 8007290:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007294:	4910      	ldr	r1, [pc, #64]	@ (80072d8 <_scanf_float+0x420>)
 8007296:	4630      	mov	r0, r6
 8007298:	f000 f8e4 	bl	8007464 <siprintf>
 800729c:	e7d0      	b.n	8007240 <_scanf_float+0x388>
 800729e:	f011 0f04 	tst.w	r1, #4
 80072a2:	9903      	ldr	r1, [sp, #12]
 80072a4:	600a      	str	r2, [r1, #0]
 80072a6:	d1dc      	bne.n	8007262 <_scanf_float+0x3aa>
 80072a8:	681d      	ldr	r5, [r3, #0]
 80072aa:	4632      	mov	r2, r6
 80072ac:	463b      	mov	r3, r7
 80072ae:	4630      	mov	r0, r6
 80072b0:	4639      	mov	r1, r7
 80072b2:	f7f9 fc63 	bl	8000b7c <__aeabi_dcmpun>
 80072b6:	b128      	cbz	r0, 80072c4 <_scanf_float+0x40c>
 80072b8:	4808      	ldr	r0, [pc, #32]	@ (80072dc <_scanf_float+0x424>)
 80072ba:	f000 f9b7 	bl	800762c <nanf>
 80072be:	ed85 0a00 	vstr	s0, [r5]
 80072c2:	e7d1      	b.n	8007268 <_scanf_float+0x3b0>
 80072c4:	4630      	mov	r0, r6
 80072c6:	4639      	mov	r1, r7
 80072c8:	f7f9 fcb6 	bl	8000c38 <__aeabi_d2f>
 80072cc:	6028      	str	r0, [r5, #0]
 80072ce:	e7cb      	b.n	8007268 <_scanf_float+0x3b0>
 80072d0:	f04f 0900 	mov.w	r9, #0
 80072d4:	e629      	b.n	8006f2a <_scanf_float+0x72>
 80072d6:	bf00      	nop
 80072d8:	0800ad64 	.word	0x0800ad64
 80072dc:	0800b0fd 	.word	0x0800b0fd

080072e0 <std>:
 80072e0:	2300      	movs	r3, #0
 80072e2:	b510      	push	{r4, lr}
 80072e4:	4604      	mov	r4, r0
 80072e6:	e9c0 3300 	strd	r3, r3, [r0]
 80072ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072ee:	6083      	str	r3, [r0, #8]
 80072f0:	8181      	strh	r1, [r0, #12]
 80072f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80072f4:	81c2      	strh	r2, [r0, #14]
 80072f6:	6183      	str	r3, [r0, #24]
 80072f8:	4619      	mov	r1, r3
 80072fa:	2208      	movs	r2, #8
 80072fc:	305c      	adds	r0, #92	@ 0x5c
 80072fe:	f000 f914 	bl	800752a <memset>
 8007302:	4b0d      	ldr	r3, [pc, #52]	@ (8007338 <std+0x58>)
 8007304:	6263      	str	r3, [r4, #36]	@ 0x24
 8007306:	4b0d      	ldr	r3, [pc, #52]	@ (800733c <std+0x5c>)
 8007308:	62a3      	str	r3, [r4, #40]	@ 0x28
 800730a:	4b0d      	ldr	r3, [pc, #52]	@ (8007340 <std+0x60>)
 800730c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800730e:	4b0d      	ldr	r3, [pc, #52]	@ (8007344 <std+0x64>)
 8007310:	6323      	str	r3, [r4, #48]	@ 0x30
 8007312:	4b0d      	ldr	r3, [pc, #52]	@ (8007348 <std+0x68>)
 8007314:	6224      	str	r4, [r4, #32]
 8007316:	429c      	cmp	r4, r3
 8007318:	d006      	beq.n	8007328 <std+0x48>
 800731a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800731e:	4294      	cmp	r4, r2
 8007320:	d002      	beq.n	8007328 <std+0x48>
 8007322:	33d0      	adds	r3, #208	@ 0xd0
 8007324:	429c      	cmp	r4, r3
 8007326:	d105      	bne.n	8007334 <std+0x54>
 8007328:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800732c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007330:	f000 b978 	b.w	8007624 <__retarget_lock_init_recursive>
 8007334:	bd10      	pop	{r4, pc}
 8007336:	bf00      	nop
 8007338:	080074a5 	.word	0x080074a5
 800733c:	080074c7 	.word	0x080074c7
 8007340:	080074ff 	.word	0x080074ff
 8007344:	08007523 	.word	0x08007523
 8007348:	20000524 	.word	0x20000524

0800734c <stdio_exit_handler>:
 800734c:	4a02      	ldr	r2, [pc, #8]	@ (8007358 <stdio_exit_handler+0xc>)
 800734e:	4903      	ldr	r1, [pc, #12]	@ (800735c <stdio_exit_handler+0x10>)
 8007350:	4803      	ldr	r0, [pc, #12]	@ (8007360 <stdio_exit_handler+0x14>)
 8007352:	f000 b869 	b.w	8007428 <_fwalk_sglue>
 8007356:	bf00      	nop
 8007358:	2000000c 	.word	0x2000000c
 800735c:	08009ef5 	.word	0x08009ef5
 8007360:	2000001c 	.word	0x2000001c

08007364 <cleanup_stdio>:
 8007364:	6841      	ldr	r1, [r0, #4]
 8007366:	4b0c      	ldr	r3, [pc, #48]	@ (8007398 <cleanup_stdio+0x34>)
 8007368:	4299      	cmp	r1, r3
 800736a:	b510      	push	{r4, lr}
 800736c:	4604      	mov	r4, r0
 800736e:	d001      	beq.n	8007374 <cleanup_stdio+0x10>
 8007370:	f002 fdc0 	bl	8009ef4 <_fflush_r>
 8007374:	68a1      	ldr	r1, [r4, #8]
 8007376:	4b09      	ldr	r3, [pc, #36]	@ (800739c <cleanup_stdio+0x38>)
 8007378:	4299      	cmp	r1, r3
 800737a:	d002      	beq.n	8007382 <cleanup_stdio+0x1e>
 800737c:	4620      	mov	r0, r4
 800737e:	f002 fdb9 	bl	8009ef4 <_fflush_r>
 8007382:	68e1      	ldr	r1, [r4, #12]
 8007384:	4b06      	ldr	r3, [pc, #24]	@ (80073a0 <cleanup_stdio+0x3c>)
 8007386:	4299      	cmp	r1, r3
 8007388:	d004      	beq.n	8007394 <cleanup_stdio+0x30>
 800738a:	4620      	mov	r0, r4
 800738c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007390:	f002 bdb0 	b.w	8009ef4 <_fflush_r>
 8007394:	bd10      	pop	{r4, pc}
 8007396:	bf00      	nop
 8007398:	20000524 	.word	0x20000524
 800739c:	2000058c 	.word	0x2000058c
 80073a0:	200005f4 	.word	0x200005f4

080073a4 <global_stdio_init.part.0>:
 80073a4:	b510      	push	{r4, lr}
 80073a6:	4b0b      	ldr	r3, [pc, #44]	@ (80073d4 <global_stdio_init.part.0+0x30>)
 80073a8:	4c0b      	ldr	r4, [pc, #44]	@ (80073d8 <global_stdio_init.part.0+0x34>)
 80073aa:	4a0c      	ldr	r2, [pc, #48]	@ (80073dc <global_stdio_init.part.0+0x38>)
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	4620      	mov	r0, r4
 80073b0:	2200      	movs	r2, #0
 80073b2:	2104      	movs	r1, #4
 80073b4:	f7ff ff94 	bl	80072e0 <std>
 80073b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80073bc:	2201      	movs	r2, #1
 80073be:	2109      	movs	r1, #9
 80073c0:	f7ff ff8e 	bl	80072e0 <std>
 80073c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80073c8:	2202      	movs	r2, #2
 80073ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073ce:	2112      	movs	r1, #18
 80073d0:	f7ff bf86 	b.w	80072e0 <std>
 80073d4:	2000065c 	.word	0x2000065c
 80073d8:	20000524 	.word	0x20000524
 80073dc:	0800734d 	.word	0x0800734d

080073e0 <__sfp_lock_acquire>:
 80073e0:	4801      	ldr	r0, [pc, #4]	@ (80073e8 <__sfp_lock_acquire+0x8>)
 80073e2:	f000 b920 	b.w	8007626 <__retarget_lock_acquire_recursive>
 80073e6:	bf00      	nop
 80073e8:	20000665 	.word	0x20000665

080073ec <__sfp_lock_release>:
 80073ec:	4801      	ldr	r0, [pc, #4]	@ (80073f4 <__sfp_lock_release+0x8>)
 80073ee:	f000 b91b 	b.w	8007628 <__retarget_lock_release_recursive>
 80073f2:	bf00      	nop
 80073f4:	20000665 	.word	0x20000665

080073f8 <__sinit>:
 80073f8:	b510      	push	{r4, lr}
 80073fa:	4604      	mov	r4, r0
 80073fc:	f7ff fff0 	bl	80073e0 <__sfp_lock_acquire>
 8007400:	6a23      	ldr	r3, [r4, #32]
 8007402:	b11b      	cbz	r3, 800740c <__sinit+0x14>
 8007404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007408:	f7ff bff0 	b.w	80073ec <__sfp_lock_release>
 800740c:	4b04      	ldr	r3, [pc, #16]	@ (8007420 <__sinit+0x28>)
 800740e:	6223      	str	r3, [r4, #32]
 8007410:	4b04      	ldr	r3, [pc, #16]	@ (8007424 <__sinit+0x2c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1f5      	bne.n	8007404 <__sinit+0xc>
 8007418:	f7ff ffc4 	bl	80073a4 <global_stdio_init.part.0>
 800741c:	e7f2      	b.n	8007404 <__sinit+0xc>
 800741e:	bf00      	nop
 8007420:	08007365 	.word	0x08007365
 8007424:	2000065c 	.word	0x2000065c

08007428 <_fwalk_sglue>:
 8007428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800742c:	4607      	mov	r7, r0
 800742e:	4688      	mov	r8, r1
 8007430:	4614      	mov	r4, r2
 8007432:	2600      	movs	r6, #0
 8007434:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007438:	f1b9 0901 	subs.w	r9, r9, #1
 800743c:	d505      	bpl.n	800744a <_fwalk_sglue+0x22>
 800743e:	6824      	ldr	r4, [r4, #0]
 8007440:	2c00      	cmp	r4, #0
 8007442:	d1f7      	bne.n	8007434 <_fwalk_sglue+0xc>
 8007444:	4630      	mov	r0, r6
 8007446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800744a:	89ab      	ldrh	r3, [r5, #12]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d907      	bls.n	8007460 <_fwalk_sglue+0x38>
 8007450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007454:	3301      	adds	r3, #1
 8007456:	d003      	beq.n	8007460 <_fwalk_sglue+0x38>
 8007458:	4629      	mov	r1, r5
 800745a:	4638      	mov	r0, r7
 800745c:	47c0      	blx	r8
 800745e:	4306      	orrs	r6, r0
 8007460:	3568      	adds	r5, #104	@ 0x68
 8007462:	e7e9      	b.n	8007438 <_fwalk_sglue+0x10>

08007464 <siprintf>:
 8007464:	b40e      	push	{r1, r2, r3}
 8007466:	b500      	push	{lr}
 8007468:	b09c      	sub	sp, #112	@ 0x70
 800746a:	ab1d      	add	r3, sp, #116	@ 0x74
 800746c:	9002      	str	r0, [sp, #8]
 800746e:	9006      	str	r0, [sp, #24]
 8007470:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007474:	4809      	ldr	r0, [pc, #36]	@ (800749c <siprintf+0x38>)
 8007476:	9107      	str	r1, [sp, #28]
 8007478:	9104      	str	r1, [sp, #16]
 800747a:	4909      	ldr	r1, [pc, #36]	@ (80074a0 <siprintf+0x3c>)
 800747c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007480:	9105      	str	r1, [sp, #20]
 8007482:	6800      	ldr	r0, [r0, #0]
 8007484:	9301      	str	r3, [sp, #4]
 8007486:	a902      	add	r1, sp, #8
 8007488:	f002 fbb4 	bl	8009bf4 <_svfiprintf_r>
 800748c:	9b02      	ldr	r3, [sp, #8]
 800748e:	2200      	movs	r2, #0
 8007490:	701a      	strb	r2, [r3, #0]
 8007492:	b01c      	add	sp, #112	@ 0x70
 8007494:	f85d eb04 	ldr.w	lr, [sp], #4
 8007498:	b003      	add	sp, #12
 800749a:	4770      	bx	lr
 800749c:	20000018 	.word	0x20000018
 80074a0:	ffff0208 	.word	0xffff0208

080074a4 <__sread>:
 80074a4:	b510      	push	{r4, lr}
 80074a6:	460c      	mov	r4, r1
 80074a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ac:	f000 f86c 	bl	8007588 <_read_r>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	bfab      	itete	ge
 80074b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80074b6:	89a3      	ldrhlt	r3, [r4, #12]
 80074b8:	181b      	addge	r3, r3, r0
 80074ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80074be:	bfac      	ite	ge
 80074c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074c2:	81a3      	strhlt	r3, [r4, #12]
 80074c4:	bd10      	pop	{r4, pc}

080074c6 <__swrite>:
 80074c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ca:	461f      	mov	r7, r3
 80074cc:	898b      	ldrh	r3, [r1, #12]
 80074ce:	05db      	lsls	r3, r3, #23
 80074d0:	4605      	mov	r5, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	4616      	mov	r6, r2
 80074d6:	d505      	bpl.n	80074e4 <__swrite+0x1e>
 80074d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074dc:	2302      	movs	r3, #2
 80074de:	2200      	movs	r2, #0
 80074e0:	f000 f840 	bl	8007564 <_lseek_r>
 80074e4:	89a3      	ldrh	r3, [r4, #12]
 80074e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074ee:	81a3      	strh	r3, [r4, #12]
 80074f0:	4632      	mov	r2, r6
 80074f2:	463b      	mov	r3, r7
 80074f4:	4628      	mov	r0, r5
 80074f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074fa:	f000 b857 	b.w	80075ac <_write_r>

080074fe <__sseek>:
 80074fe:	b510      	push	{r4, lr}
 8007500:	460c      	mov	r4, r1
 8007502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007506:	f000 f82d 	bl	8007564 <_lseek_r>
 800750a:	1c43      	adds	r3, r0, #1
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	bf15      	itete	ne
 8007510:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007512:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007516:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800751a:	81a3      	strheq	r3, [r4, #12]
 800751c:	bf18      	it	ne
 800751e:	81a3      	strhne	r3, [r4, #12]
 8007520:	bd10      	pop	{r4, pc}

08007522 <__sclose>:
 8007522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007526:	f000 b80d 	b.w	8007544 <_close_r>

0800752a <memset>:
 800752a:	4402      	add	r2, r0
 800752c:	4603      	mov	r3, r0
 800752e:	4293      	cmp	r3, r2
 8007530:	d100      	bne.n	8007534 <memset+0xa>
 8007532:	4770      	bx	lr
 8007534:	f803 1b01 	strb.w	r1, [r3], #1
 8007538:	e7f9      	b.n	800752e <memset+0x4>
	...

0800753c <_localeconv_r>:
 800753c:	4800      	ldr	r0, [pc, #0]	@ (8007540 <_localeconv_r+0x4>)
 800753e:	4770      	bx	lr
 8007540:	20000158 	.word	0x20000158

08007544 <_close_r>:
 8007544:	b538      	push	{r3, r4, r5, lr}
 8007546:	4d06      	ldr	r5, [pc, #24]	@ (8007560 <_close_r+0x1c>)
 8007548:	2300      	movs	r3, #0
 800754a:	4604      	mov	r4, r0
 800754c:	4608      	mov	r0, r1
 800754e:	602b      	str	r3, [r5, #0]
 8007550:	f7fa f89b 	bl	800168a <_close>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d102      	bne.n	800755e <_close_r+0x1a>
 8007558:	682b      	ldr	r3, [r5, #0]
 800755a:	b103      	cbz	r3, 800755e <_close_r+0x1a>
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	bd38      	pop	{r3, r4, r5, pc}
 8007560:	20000660 	.word	0x20000660

08007564 <_lseek_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	4d07      	ldr	r5, [pc, #28]	@ (8007584 <_lseek_r+0x20>)
 8007568:	4604      	mov	r4, r0
 800756a:	4608      	mov	r0, r1
 800756c:	4611      	mov	r1, r2
 800756e:	2200      	movs	r2, #0
 8007570:	602a      	str	r2, [r5, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	f7fa f8b0 	bl	80016d8 <_lseek>
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	d102      	bne.n	8007582 <_lseek_r+0x1e>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	b103      	cbz	r3, 8007582 <_lseek_r+0x1e>
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	bd38      	pop	{r3, r4, r5, pc}
 8007584:	20000660 	.word	0x20000660

08007588 <_read_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4d07      	ldr	r5, [pc, #28]	@ (80075a8 <_read_r+0x20>)
 800758c:	4604      	mov	r4, r0
 800758e:	4608      	mov	r0, r1
 8007590:	4611      	mov	r1, r2
 8007592:	2200      	movs	r2, #0
 8007594:	602a      	str	r2, [r5, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	f7fa f83e 	bl	8001618 <_read>
 800759c:	1c43      	adds	r3, r0, #1
 800759e:	d102      	bne.n	80075a6 <_read_r+0x1e>
 80075a0:	682b      	ldr	r3, [r5, #0]
 80075a2:	b103      	cbz	r3, 80075a6 <_read_r+0x1e>
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	bd38      	pop	{r3, r4, r5, pc}
 80075a8:	20000660 	.word	0x20000660

080075ac <_write_r>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	4d07      	ldr	r5, [pc, #28]	@ (80075cc <_write_r+0x20>)
 80075b0:	4604      	mov	r4, r0
 80075b2:	4608      	mov	r0, r1
 80075b4:	4611      	mov	r1, r2
 80075b6:	2200      	movs	r2, #0
 80075b8:	602a      	str	r2, [r5, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	f7fa f849 	bl	8001652 <_write>
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	d102      	bne.n	80075ca <_write_r+0x1e>
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	b103      	cbz	r3, 80075ca <_write_r+0x1e>
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	bd38      	pop	{r3, r4, r5, pc}
 80075cc:	20000660 	.word	0x20000660

080075d0 <__errno>:
 80075d0:	4b01      	ldr	r3, [pc, #4]	@ (80075d8 <__errno+0x8>)
 80075d2:	6818      	ldr	r0, [r3, #0]
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	20000018 	.word	0x20000018

080075dc <__libc_init_array>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	4d0d      	ldr	r5, [pc, #52]	@ (8007614 <__libc_init_array+0x38>)
 80075e0:	4c0d      	ldr	r4, [pc, #52]	@ (8007618 <__libc_init_array+0x3c>)
 80075e2:	1b64      	subs	r4, r4, r5
 80075e4:	10a4      	asrs	r4, r4, #2
 80075e6:	2600      	movs	r6, #0
 80075e8:	42a6      	cmp	r6, r4
 80075ea:	d109      	bne.n	8007600 <__libc_init_array+0x24>
 80075ec:	4d0b      	ldr	r5, [pc, #44]	@ (800761c <__libc_init_array+0x40>)
 80075ee:	4c0c      	ldr	r4, [pc, #48]	@ (8007620 <__libc_init_array+0x44>)
 80075f0:	f003 fb70 	bl	800acd4 <_init>
 80075f4:	1b64      	subs	r4, r4, r5
 80075f6:	10a4      	asrs	r4, r4, #2
 80075f8:	2600      	movs	r6, #0
 80075fa:	42a6      	cmp	r6, r4
 80075fc:	d105      	bne.n	800760a <__libc_init_array+0x2e>
 80075fe:	bd70      	pop	{r4, r5, r6, pc}
 8007600:	f855 3b04 	ldr.w	r3, [r5], #4
 8007604:	4798      	blx	r3
 8007606:	3601      	adds	r6, #1
 8007608:	e7ee      	b.n	80075e8 <__libc_init_array+0xc>
 800760a:	f855 3b04 	ldr.w	r3, [r5], #4
 800760e:	4798      	blx	r3
 8007610:	3601      	adds	r6, #1
 8007612:	e7f2      	b.n	80075fa <__libc_init_array+0x1e>
 8007614:	0800b168 	.word	0x0800b168
 8007618:	0800b168 	.word	0x0800b168
 800761c:	0800b168 	.word	0x0800b168
 8007620:	0800b16c 	.word	0x0800b16c

08007624 <__retarget_lock_init_recursive>:
 8007624:	4770      	bx	lr

08007626 <__retarget_lock_acquire_recursive>:
 8007626:	4770      	bx	lr

08007628 <__retarget_lock_release_recursive>:
 8007628:	4770      	bx	lr
	...

0800762c <nanf>:
 800762c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007634 <nanf+0x8>
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	7fc00000 	.word	0x7fc00000

08007638 <quorem>:
 8007638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763c:	6903      	ldr	r3, [r0, #16]
 800763e:	690c      	ldr	r4, [r1, #16]
 8007640:	42a3      	cmp	r3, r4
 8007642:	4607      	mov	r7, r0
 8007644:	db7e      	blt.n	8007744 <quorem+0x10c>
 8007646:	3c01      	subs	r4, #1
 8007648:	f101 0814 	add.w	r8, r1, #20
 800764c:	00a3      	lsls	r3, r4, #2
 800764e:	f100 0514 	add.w	r5, r0, #20
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007658:	9301      	str	r3, [sp, #4]
 800765a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800765e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007662:	3301      	adds	r3, #1
 8007664:	429a      	cmp	r2, r3
 8007666:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800766a:	fbb2 f6f3 	udiv	r6, r2, r3
 800766e:	d32e      	bcc.n	80076ce <quorem+0x96>
 8007670:	f04f 0a00 	mov.w	sl, #0
 8007674:	46c4      	mov	ip, r8
 8007676:	46ae      	mov	lr, r5
 8007678:	46d3      	mov	fp, sl
 800767a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800767e:	b298      	uxth	r0, r3
 8007680:	fb06 a000 	mla	r0, r6, r0, sl
 8007684:	0c02      	lsrs	r2, r0, #16
 8007686:	0c1b      	lsrs	r3, r3, #16
 8007688:	fb06 2303 	mla	r3, r6, r3, r2
 800768c:	f8de 2000 	ldr.w	r2, [lr]
 8007690:	b280      	uxth	r0, r0
 8007692:	b292      	uxth	r2, r2
 8007694:	1a12      	subs	r2, r2, r0
 8007696:	445a      	add	r2, fp
 8007698:	f8de 0000 	ldr.w	r0, [lr]
 800769c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80076a6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80076aa:	b292      	uxth	r2, r2
 80076ac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80076b0:	45e1      	cmp	r9, ip
 80076b2:	f84e 2b04 	str.w	r2, [lr], #4
 80076b6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80076ba:	d2de      	bcs.n	800767a <quorem+0x42>
 80076bc:	9b00      	ldr	r3, [sp, #0]
 80076be:	58eb      	ldr	r3, [r5, r3]
 80076c0:	b92b      	cbnz	r3, 80076ce <quorem+0x96>
 80076c2:	9b01      	ldr	r3, [sp, #4]
 80076c4:	3b04      	subs	r3, #4
 80076c6:	429d      	cmp	r5, r3
 80076c8:	461a      	mov	r2, r3
 80076ca:	d32f      	bcc.n	800772c <quorem+0xf4>
 80076cc:	613c      	str	r4, [r7, #16]
 80076ce:	4638      	mov	r0, r7
 80076d0:	f001 f9c2 	bl	8008a58 <__mcmp>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	db25      	blt.n	8007724 <quorem+0xec>
 80076d8:	4629      	mov	r1, r5
 80076da:	2000      	movs	r0, #0
 80076dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80076e0:	f8d1 c000 	ldr.w	ip, [r1]
 80076e4:	fa1f fe82 	uxth.w	lr, r2
 80076e8:	fa1f f38c 	uxth.w	r3, ip
 80076ec:	eba3 030e 	sub.w	r3, r3, lr
 80076f0:	4403      	add	r3, r0
 80076f2:	0c12      	lsrs	r2, r2, #16
 80076f4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80076f8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007702:	45c1      	cmp	r9, r8
 8007704:	f841 3b04 	str.w	r3, [r1], #4
 8007708:	ea4f 4022 	mov.w	r0, r2, asr #16
 800770c:	d2e6      	bcs.n	80076dc <quorem+0xa4>
 800770e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007712:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007716:	b922      	cbnz	r2, 8007722 <quorem+0xea>
 8007718:	3b04      	subs	r3, #4
 800771a:	429d      	cmp	r5, r3
 800771c:	461a      	mov	r2, r3
 800771e:	d30b      	bcc.n	8007738 <quorem+0x100>
 8007720:	613c      	str	r4, [r7, #16]
 8007722:	3601      	adds	r6, #1
 8007724:	4630      	mov	r0, r6
 8007726:	b003      	add	sp, #12
 8007728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800772c:	6812      	ldr	r2, [r2, #0]
 800772e:	3b04      	subs	r3, #4
 8007730:	2a00      	cmp	r2, #0
 8007732:	d1cb      	bne.n	80076cc <quorem+0x94>
 8007734:	3c01      	subs	r4, #1
 8007736:	e7c6      	b.n	80076c6 <quorem+0x8e>
 8007738:	6812      	ldr	r2, [r2, #0]
 800773a:	3b04      	subs	r3, #4
 800773c:	2a00      	cmp	r2, #0
 800773e:	d1ef      	bne.n	8007720 <quorem+0xe8>
 8007740:	3c01      	subs	r4, #1
 8007742:	e7ea      	b.n	800771a <quorem+0xe2>
 8007744:	2000      	movs	r0, #0
 8007746:	e7ee      	b.n	8007726 <quorem+0xee>

08007748 <_dtoa_r>:
 8007748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774c:	69c7      	ldr	r7, [r0, #28]
 800774e:	b099      	sub	sp, #100	@ 0x64
 8007750:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007754:	ec55 4b10 	vmov	r4, r5, d0
 8007758:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800775a:	9109      	str	r1, [sp, #36]	@ 0x24
 800775c:	4683      	mov	fp, r0
 800775e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007760:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007762:	b97f      	cbnz	r7, 8007784 <_dtoa_r+0x3c>
 8007764:	2010      	movs	r0, #16
 8007766:	f000 fdfd 	bl	8008364 <malloc>
 800776a:	4602      	mov	r2, r0
 800776c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007770:	b920      	cbnz	r0, 800777c <_dtoa_r+0x34>
 8007772:	4ba7      	ldr	r3, [pc, #668]	@ (8007a10 <_dtoa_r+0x2c8>)
 8007774:	21ef      	movs	r1, #239	@ 0xef
 8007776:	48a7      	ldr	r0, [pc, #668]	@ (8007a14 <_dtoa_r+0x2cc>)
 8007778:	f002 fc36 	bl	8009fe8 <__assert_func>
 800777c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007780:	6007      	str	r7, [r0, #0]
 8007782:	60c7      	str	r7, [r0, #12]
 8007784:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007788:	6819      	ldr	r1, [r3, #0]
 800778a:	b159      	cbz	r1, 80077a4 <_dtoa_r+0x5c>
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	604a      	str	r2, [r1, #4]
 8007790:	2301      	movs	r3, #1
 8007792:	4093      	lsls	r3, r2
 8007794:	608b      	str	r3, [r1, #8]
 8007796:	4658      	mov	r0, fp
 8007798:	f000 feda 	bl	8008550 <_Bfree>
 800779c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	1e2b      	subs	r3, r5, #0
 80077a6:	bfb9      	ittee	lt
 80077a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80077ac:	9303      	strlt	r3, [sp, #12]
 80077ae:	2300      	movge	r3, #0
 80077b0:	6033      	strge	r3, [r6, #0]
 80077b2:	9f03      	ldr	r7, [sp, #12]
 80077b4:	4b98      	ldr	r3, [pc, #608]	@ (8007a18 <_dtoa_r+0x2d0>)
 80077b6:	bfbc      	itt	lt
 80077b8:	2201      	movlt	r2, #1
 80077ba:	6032      	strlt	r2, [r6, #0]
 80077bc:	43bb      	bics	r3, r7
 80077be:	d112      	bne.n	80077e6 <_dtoa_r+0x9e>
 80077c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80077c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80077c6:	6013      	str	r3, [r2, #0]
 80077c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077cc:	4323      	orrs	r3, r4
 80077ce:	f000 854d 	beq.w	800826c <_dtoa_r+0xb24>
 80077d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007a2c <_dtoa_r+0x2e4>
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 854f 	beq.w	800827c <_dtoa_r+0xb34>
 80077de:	f10a 0303 	add.w	r3, sl, #3
 80077e2:	f000 bd49 	b.w	8008278 <_dtoa_r+0xb30>
 80077e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077ea:	2200      	movs	r2, #0
 80077ec:	ec51 0b17 	vmov	r0, r1, d7
 80077f0:	2300      	movs	r3, #0
 80077f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80077f6:	f7f9 f98f 	bl	8000b18 <__aeabi_dcmpeq>
 80077fa:	4680      	mov	r8, r0
 80077fc:	b158      	cbz	r0, 8007816 <_dtoa_r+0xce>
 80077fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007800:	2301      	movs	r3, #1
 8007802:	6013      	str	r3, [r2, #0]
 8007804:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007806:	b113      	cbz	r3, 800780e <_dtoa_r+0xc6>
 8007808:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800780a:	4b84      	ldr	r3, [pc, #528]	@ (8007a1c <_dtoa_r+0x2d4>)
 800780c:	6013      	str	r3, [r2, #0]
 800780e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007a30 <_dtoa_r+0x2e8>
 8007812:	f000 bd33 	b.w	800827c <_dtoa_r+0xb34>
 8007816:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800781a:	aa16      	add	r2, sp, #88	@ 0x58
 800781c:	a917      	add	r1, sp, #92	@ 0x5c
 800781e:	4658      	mov	r0, fp
 8007820:	f001 fa3a 	bl	8008c98 <__d2b>
 8007824:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007828:	4681      	mov	r9, r0
 800782a:	2e00      	cmp	r6, #0
 800782c:	d077      	beq.n	800791e <_dtoa_r+0x1d6>
 800782e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007830:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007838:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800783c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007840:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007844:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007848:	4619      	mov	r1, r3
 800784a:	2200      	movs	r2, #0
 800784c:	4b74      	ldr	r3, [pc, #464]	@ (8007a20 <_dtoa_r+0x2d8>)
 800784e:	f7f8 fd43 	bl	80002d8 <__aeabi_dsub>
 8007852:	a369      	add	r3, pc, #420	@ (adr r3, 80079f8 <_dtoa_r+0x2b0>)
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	f7f8 fef6 	bl	8000648 <__aeabi_dmul>
 800785c:	a368      	add	r3, pc, #416	@ (adr r3, 8007a00 <_dtoa_r+0x2b8>)
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	f7f8 fd3b 	bl	80002dc <__adddf3>
 8007866:	4604      	mov	r4, r0
 8007868:	4630      	mov	r0, r6
 800786a:	460d      	mov	r5, r1
 800786c:	f7f8 fe82 	bl	8000574 <__aeabi_i2d>
 8007870:	a365      	add	r3, pc, #404	@ (adr r3, 8007a08 <_dtoa_r+0x2c0>)
 8007872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007876:	f7f8 fee7 	bl	8000648 <__aeabi_dmul>
 800787a:	4602      	mov	r2, r0
 800787c:	460b      	mov	r3, r1
 800787e:	4620      	mov	r0, r4
 8007880:	4629      	mov	r1, r5
 8007882:	f7f8 fd2b 	bl	80002dc <__adddf3>
 8007886:	4604      	mov	r4, r0
 8007888:	460d      	mov	r5, r1
 800788a:	f7f9 f98d 	bl	8000ba8 <__aeabi_d2iz>
 800788e:	2200      	movs	r2, #0
 8007890:	4607      	mov	r7, r0
 8007892:	2300      	movs	r3, #0
 8007894:	4620      	mov	r0, r4
 8007896:	4629      	mov	r1, r5
 8007898:	f7f9 f948 	bl	8000b2c <__aeabi_dcmplt>
 800789c:	b140      	cbz	r0, 80078b0 <_dtoa_r+0x168>
 800789e:	4638      	mov	r0, r7
 80078a0:	f7f8 fe68 	bl	8000574 <__aeabi_i2d>
 80078a4:	4622      	mov	r2, r4
 80078a6:	462b      	mov	r3, r5
 80078a8:	f7f9 f936 	bl	8000b18 <__aeabi_dcmpeq>
 80078ac:	b900      	cbnz	r0, 80078b0 <_dtoa_r+0x168>
 80078ae:	3f01      	subs	r7, #1
 80078b0:	2f16      	cmp	r7, #22
 80078b2:	d851      	bhi.n	8007958 <_dtoa_r+0x210>
 80078b4:	4b5b      	ldr	r3, [pc, #364]	@ (8007a24 <_dtoa_r+0x2dc>)
 80078b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078c2:	f7f9 f933 	bl	8000b2c <__aeabi_dcmplt>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d048      	beq.n	800795c <_dtoa_r+0x214>
 80078ca:	3f01      	subs	r7, #1
 80078cc:	2300      	movs	r3, #0
 80078ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80078d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80078d2:	1b9b      	subs	r3, r3, r6
 80078d4:	1e5a      	subs	r2, r3, #1
 80078d6:	bf44      	itt	mi
 80078d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80078dc:	2300      	movmi	r3, #0
 80078de:	9208      	str	r2, [sp, #32]
 80078e0:	bf54      	ite	pl
 80078e2:	f04f 0800 	movpl.w	r8, #0
 80078e6:	9308      	strmi	r3, [sp, #32]
 80078e8:	2f00      	cmp	r7, #0
 80078ea:	db39      	blt.n	8007960 <_dtoa_r+0x218>
 80078ec:	9b08      	ldr	r3, [sp, #32]
 80078ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80078f0:	443b      	add	r3, r7
 80078f2:	9308      	str	r3, [sp, #32]
 80078f4:	2300      	movs	r3, #0
 80078f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80078f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078fa:	2b09      	cmp	r3, #9
 80078fc:	d864      	bhi.n	80079c8 <_dtoa_r+0x280>
 80078fe:	2b05      	cmp	r3, #5
 8007900:	bfc4      	itt	gt
 8007902:	3b04      	subgt	r3, #4
 8007904:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007908:	f1a3 0302 	sub.w	r3, r3, #2
 800790c:	bfcc      	ite	gt
 800790e:	2400      	movgt	r4, #0
 8007910:	2401      	movle	r4, #1
 8007912:	2b03      	cmp	r3, #3
 8007914:	d863      	bhi.n	80079de <_dtoa_r+0x296>
 8007916:	e8df f003 	tbb	[pc, r3]
 800791a:	372a      	.short	0x372a
 800791c:	5535      	.short	0x5535
 800791e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007922:	441e      	add	r6, r3
 8007924:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007928:	2b20      	cmp	r3, #32
 800792a:	bfc1      	itttt	gt
 800792c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007930:	409f      	lslgt	r7, r3
 8007932:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007936:	fa24 f303 	lsrgt.w	r3, r4, r3
 800793a:	bfd6      	itet	le
 800793c:	f1c3 0320 	rsble	r3, r3, #32
 8007940:	ea47 0003 	orrgt.w	r0, r7, r3
 8007944:	fa04 f003 	lslle.w	r0, r4, r3
 8007948:	f7f8 fe04 	bl	8000554 <__aeabi_ui2d>
 800794c:	2201      	movs	r2, #1
 800794e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007952:	3e01      	subs	r6, #1
 8007954:	9214      	str	r2, [sp, #80]	@ 0x50
 8007956:	e777      	b.n	8007848 <_dtoa_r+0x100>
 8007958:	2301      	movs	r3, #1
 800795a:	e7b8      	b.n	80078ce <_dtoa_r+0x186>
 800795c:	9012      	str	r0, [sp, #72]	@ 0x48
 800795e:	e7b7      	b.n	80078d0 <_dtoa_r+0x188>
 8007960:	427b      	negs	r3, r7
 8007962:	930a      	str	r3, [sp, #40]	@ 0x28
 8007964:	2300      	movs	r3, #0
 8007966:	eba8 0807 	sub.w	r8, r8, r7
 800796a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800796c:	e7c4      	b.n	80078f8 <_dtoa_r+0x1b0>
 800796e:	2300      	movs	r3, #0
 8007970:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007974:	2b00      	cmp	r3, #0
 8007976:	dc35      	bgt.n	80079e4 <_dtoa_r+0x29c>
 8007978:	2301      	movs	r3, #1
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	9307      	str	r3, [sp, #28]
 800797e:	461a      	mov	r2, r3
 8007980:	920e      	str	r2, [sp, #56]	@ 0x38
 8007982:	e00b      	b.n	800799c <_dtoa_r+0x254>
 8007984:	2301      	movs	r3, #1
 8007986:	e7f3      	b.n	8007970 <_dtoa_r+0x228>
 8007988:	2300      	movs	r3, #0
 800798a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800798c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800798e:	18fb      	adds	r3, r7, r3
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	3301      	adds	r3, #1
 8007994:	2b01      	cmp	r3, #1
 8007996:	9307      	str	r3, [sp, #28]
 8007998:	bfb8      	it	lt
 800799a:	2301      	movlt	r3, #1
 800799c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80079a0:	2100      	movs	r1, #0
 80079a2:	2204      	movs	r2, #4
 80079a4:	f102 0514 	add.w	r5, r2, #20
 80079a8:	429d      	cmp	r5, r3
 80079aa:	d91f      	bls.n	80079ec <_dtoa_r+0x2a4>
 80079ac:	6041      	str	r1, [r0, #4]
 80079ae:	4658      	mov	r0, fp
 80079b0:	f000 fd8e 	bl	80084d0 <_Balloc>
 80079b4:	4682      	mov	sl, r0
 80079b6:	2800      	cmp	r0, #0
 80079b8:	d13c      	bne.n	8007a34 <_dtoa_r+0x2ec>
 80079ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007a28 <_dtoa_r+0x2e0>)
 80079bc:	4602      	mov	r2, r0
 80079be:	f240 11af 	movw	r1, #431	@ 0x1af
 80079c2:	e6d8      	b.n	8007776 <_dtoa_r+0x2e>
 80079c4:	2301      	movs	r3, #1
 80079c6:	e7e0      	b.n	800798a <_dtoa_r+0x242>
 80079c8:	2401      	movs	r4, #1
 80079ca:	2300      	movs	r3, #0
 80079cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80079ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80079d0:	f04f 33ff 	mov.w	r3, #4294967295
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	9307      	str	r3, [sp, #28]
 80079d8:	2200      	movs	r2, #0
 80079da:	2312      	movs	r3, #18
 80079dc:	e7d0      	b.n	8007980 <_dtoa_r+0x238>
 80079de:	2301      	movs	r3, #1
 80079e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079e2:	e7f5      	b.n	80079d0 <_dtoa_r+0x288>
 80079e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	9307      	str	r3, [sp, #28]
 80079ea:	e7d7      	b.n	800799c <_dtoa_r+0x254>
 80079ec:	3101      	adds	r1, #1
 80079ee:	0052      	lsls	r2, r2, #1
 80079f0:	e7d8      	b.n	80079a4 <_dtoa_r+0x25c>
 80079f2:	bf00      	nop
 80079f4:	f3af 8000 	nop.w
 80079f8:	636f4361 	.word	0x636f4361
 80079fc:	3fd287a7 	.word	0x3fd287a7
 8007a00:	8b60c8b3 	.word	0x8b60c8b3
 8007a04:	3fc68a28 	.word	0x3fc68a28
 8007a08:	509f79fb 	.word	0x509f79fb
 8007a0c:	3fd34413 	.word	0x3fd34413
 8007a10:	0800ad76 	.word	0x0800ad76
 8007a14:	0800ad8d 	.word	0x0800ad8d
 8007a18:	7ff00000 	.word	0x7ff00000
 8007a1c:	0800ad41 	.word	0x0800ad41
 8007a20:	3ff80000 	.word	0x3ff80000
 8007a24:	0800ae88 	.word	0x0800ae88
 8007a28:	0800ade5 	.word	0x0800ade5
 8007a2c:	0800ad72 	.word	0x0800ad72
 8007a30:	0800ad40 	.word	0x0800ad40
 8007a34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a38:	6018      	str	r0, [r3, #0]
 8007a3a:	9b07      	ldr	r3, [sp, #28]
 8007a3c:	2b0e      	cmp	r3, #14
 8007a3e:	f200 80a4 	bhi.w	8007b8a <_dtoa_r+0x442>
 8007a42:	2c00      	cmp	r4, #0
 8007a44:	f000 80a1 	beq.w	8007b8a <_dtoa_r+0x442>
 8007a48:	2f00      	cmp	r7, #0
 8007a4a:	dd33      	ble.n	8007ab4 <_dtoa_r+0x36c>
 8007a4c:	4bad      	ldr	r3, [pc, #692]	@ (8007d04 <_dtoa_r+0x5bc>)
 8007a4e:	f007 020f 	and.w	r2, r7, #15
 8007a52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a56:	ed93 7b00 	vldr	d7, [r3]
 8007a5a:	05f8      	lsls	r0, r7, #23
 8007a5c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007a60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a64:	d516      	bpl.n	8007a94 <_dtoa_r+0x34c>
 8007a66:	4ba8      	ldr	r3, [pc, #672]	@ (8007d08 <_dtoa_r+0x5c0>)
 8007a68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a70:	f7f8 ff14 	bl	800089c <__aeabi_ddiv>
 8007a74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a78:	f004 040f 	and.w	r4, r4, #15
 8007a7c:	2603      	movs	r6, #3
 8007a7e:	4da2      	ldr	r5, [pc, #648]	@ (8007d08 <_dtoa_r+0x5c0>)
 8007a80:	b954      	cbnz	r4, 8007a98 <_dtoa_r+0x350>
 8007a82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a8a:	f7f8 ff07 	bl	800089c <__aeabi_ddiv>
 8007a8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a92:	e028      	b.n	8007ae6 <_dtoa_r+0x39e>
 8007a94:	2602      	movs	r6, #2
 8007a96:	e7f2      	b.n	8007a7e <_dtoa_r+0x336>
 8007a98:	07e1      	lsls	r1, r4, #31
 8007a9a:	d508      	bpl.n	8007aae <_dtoa_r+0x366>
 8007a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007aa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007aa4:	f7f8 fdd0 	bl	8000648 <__aeabi_dmul>
 8007aa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007aac:	3601      	adds	r6, #1
 8007aae:	1064      	asrs	r4, r4, #1
 8007ab0:	3508      	adds	r5, #8
 8007ab2:	e7e5      	b.n	8007a80 <_dtoa_r+0x338>
 8007ab4:	f000 80d2 	beq.w	8007c5c <_dtoa_r+0x514>
 8007ab8:	427c      	negs	r4, r7
 8007aba:	4b92      	ldr	r3, [pc, #584]	@ (8007d04 <_dtoa_r+0x5bc>)
 8007abc:	4d92      	ldr	r5, [pc, #584]	@ (8007d08 <_dtoa_r+0x5c0>)
 8007abe:	f004 020f 	and.w	r2, r4, #15
 8007ac2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ace:	f7f8 fdbb 	bl	8000648 <__aeabi_dmul>
 8007ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ad6:	1124      	asrs	r4, r4, #4
 8007ad8:	2300      	movs	r3, #0
 8007ada:	2602      	movs	r6, #2
 8007adc:	2c00      	cmp	r4, #0
 8007ade:	f040 80b2 	bne.w	8007c46 <_dtoa_r+0x4fe>
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1d3      	bne.n	8007a8e <_dtoa_r+0x346>
 8007ae6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ae8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 80b7 	beq.w	8007c60 <_dtoa_r+0x518>
 8007af2:	4b86      	ldr	r3, [pc, #536]	@ (8007d0c <_dtoa_r+0x5c4>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	4620      	mov	r0, r4
 8007af8:	4629      	mov	r1, r5
 8007afa:	f7f9 f817 	bl	8000b2c <__aeabi_dcmplt>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	f000 80ae 	beq.w	8007c60 <_dtoa_r+0x518>
 8007b04:	9b07      	ldr	r3, [sp, #28]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 80aa 	beq.w	8007c60 <_dtoa_r+0x518>
 8007b0c:	9b00      	ldr	r3, [sp, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	dd37      	ble.n	8007b82 <_dtoa_r+0x43a>
 8007b12:	1e7b      	subs	r3, r7, #1
 8007b14:	9304      	str	r3, [sp, #16]
 8007b16:	4620      	mov	r0, r4
 8007b18:	4b7d      	ldr	r3, [pc, #500]	@ (8007d10 <_dtoa_r+0x5c8>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	f7f8 fd93 	bl	8000648 <__aeabi_dmul>
 8007b22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b26:	9c00      	ldr	r4, [sp, #0]
 8007b28:	3601      	adds	r6, #1
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f7f8 fd22 	bl	8000574 <__aeabi_i2d>
 8007b30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b34:	f7f8 fd88 	bl	8000648 <__aeabi_dmul>
 8007b38:	4b76      	ldr	r3, [pc, #472]	@ (8007d14 <_dtoa_r+0x5cc>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f7f8 fbce 	bl	80002dc <__adddf3>
 8007b40:	4605      	mov	r5, r0
 8007b42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b46:	2c00      	cmp	r4, #0
 8007b48:	f040 808d 	bne.w	8007c66 <_dtoa_r+0x51e>
 8007b4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b50:	4b71      	ldr	r3, [pc, #452]	@ (8007d18 <_dtoa_r+0x5d0>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	f7f8 fbc0 	bl	80002d8 <__aeabi_dsub>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b60:	462a      	mov	r2, r5
 8007b62:	4633      	mov	r3, r6
 8007b64:	f7f9 f800 	bl	8000b68 <__aeabi_dcmpgt>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	f040 828b 	bne.w	8008084 <_dtoa_r+0x93c>
 8007b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b72:	462a      	mov	r2, r5
 8007b74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b78:	f7f8 ffd8 	bl	8000b2c <__aeabi_dcmplt>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	f040 8128 	bne.w	8007dd2 <_dtoa_r+0x68a>
 8007b82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007b86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007b8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f2c0 815a 	blt.w	8007e46 <_dtoa_r+0x6fe>
 8007b92:	2f0e      	cmp	r7, #14
 8007b94:	f300 8157 	bgt.w	8007e46 <_dtoa_r+0x6fe>
 8007b98:	4b5a      	ldr	r3, [pc, #360]	@ (8007d04 <_dtoa_r+0x5bc>)
 8007b9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b9e:	ed93 7b00 	vldr	d7, [r3]
 8007ba2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	ed8d 7b00 	vstr	d7, [sp]
 8007baa:	da03      	bge.n	8007bb4 <_dtoa_r+0x46c>
 8007bac:	9b07      	ldr	r3, [sp, #28]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f340 8101 	ble.w	8007db6 <_dtoa_r+0x66e>
 8007bb4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007bb8:	4656      	mov	r6, sl
 8007bba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	f7f8 fe6b 	bl	800089c <__aeabi_ddiv>
 8007bc6:	f7f8 ffef 	bl	8000ba8 <__aeabi_d2iz>
 8007bca:	4680      	mov	r8, r0
 8007bcc:	f7f8 fcd2 	bl	8000574 <__aeabi_i2d>
 8007bd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bd4:	f7f8 fd38 	bl	8000648 <__aeabi_dmul>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4620      	mov	r0, r4
 8007bde:	4629      	mov	r1, r5
 8007be0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007be4:	f7f8 fb78 	bl	80002d8 <__aeabi_dsub>
 8007be8:	f806 4b01 	strb.w	r4, [r6], #1
 8007bec:	9d07      	ldr	r5, [sp, #28]
 8007bee:	eba6 040a 	sub.w	r4, r6, sl
 8007bf2:	42a5      	cmp	r5, r4
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	f040 8117 	bne.w	8007e2a <_dtoa_r+0x6e2>
 8007bfc:	f7f8 fb6e 	bl	80002dc <__adddf3>
 8007c00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c04:	4604      	mov	r4, r0
 8007c06:	460d      	mov	r5, r1
 8007c08:	f7f8 ffae 	bl	8000b68 <__aeabi_dcmpgt>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	f040 80f9 	bne.w	8007e04 <_dtoa_r+0x6bc>
 8007c12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c16:	4620      	mov	r0, r4
 8007c18:	4629      	mov	r1, r5
 8007c1a:	f7f8 ff7d 	bl	8000b18 <__aeabi_dcmpeq>
 8007c1e:	b118      	cbz	r0, 8007c28 <_dtoa_r+0x4e0>
 8007c20:	f018 0f01 	tst.w	r8, #1
 8007c24:	f040 80ee 	bne.w	8007e04 <_dtoa_r+0x6bc>
 8007c28:	4649      	mov	r1, r9
 8007c2a:	4658      	mov	r0, fp
 8007c2c:	f000 fc90 	bl	8008550 <_Bfree>
 8007c30:	2300      	movs	r3, #0
 8007c32:	7033      	strb	r3, [r6, #0]
 8007c34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c36:	3701      	adds	r7, #1
 8007c38:	601f      	str	r7, [r3, #0]
 8007c3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 831d 	beq.w	800827c <_dtoa_r+0xb34>
 8007c42:	601e      	str	r6, [r3, #0]
 8007c44:	e31a      	b.n	800827c <_dtoa_r+0xb34>
 8007c46:	07e2      	lsls	r2, r4, #31
 8007c48:	d505      	bpl.n	8007c56 <_dtoa_r+0x50e>
 8007c4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c4e:	f7f8 fcfb 	bl	8000648 <__aeabi_dmul>
 8007c52:	3601      	adds	r6, #1
 8007c54:	2301      	movs	r3, #1
 8007c56:	1064      	asrs	r4, r4, #1
 8007c58:	3508      	adds	r5, #8
 8007c5a:	e73f      	b.n	8007adc <_dtoa_r+0x394>
 8007c5c:	2602      	movs	r6, #2
 8007c5e:	e742      	b.n	8007ae6 <_dtoa_r+0x39e>
 8007c60:	9c07      	ldr	r4, [sp, #28]
 8007c62:	9704      	str	r7, [sp, #16]
 8007c64:	e761      	b.n	8007b2a <_dtoa_r+0x3e2>
 8007c66:	4b27      	ldr	r3, [pc, #156]	@ (8007d04 <_dtoa_r+0x5bc>)
 8007c68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c6e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c72:	4454      	add	r4, sl
 8007c74:	2900      	cmp	r1, #0
 8007c76:	d053      	beq.n	8007d20 <_dtoa_r+0x5d8>
 8007c78:	4928      	ldr	r1, [pc, #160]	@ (8007d1c <_dtoa_r+0x5d4>)
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	f7f8 fe0e 	bl	800089c <__aeabi_ddiv>
 8007c80:	4633      	mov	r3, r6
 8007c82:	462a      	mov	r2, r5
 8007c84:	f7f8 fb28 	bl	80002d8 <__aeabi_dsub>
 8007c88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c8c:	4656      	mov	r6, sl
 8007c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c92:	f7f8 ff89 	bl	8000ba8 <__aeabi_d2iz>
 8007c96:	4605      	mov	r5, r0
 8007c98:	f7f8 fc6c 	bl	8000574 <__aeabi_i2d>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ca4:	f7f8 fb18 	bl	80002d8 <__aeabi_dsub>
 8007ca8:	3530      	adds	r5, #48	@ 0x30
 8007caa:	4602      	mov	r2, r0
 8007cac:	460b      	mov	r3, r1
 8007cae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cb2:	f806 5b01 	strb.w	r5, [r6], #1
 8007cb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007cba:	f7f8 ff37 	bl	8000b2c <__aeabi_dcmplt>
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d171      	bne.n	8007da6 <_dtoa_r+0x65e>
 8007cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cc6:	4911      	ldr	r1, [pc, #68]	@ (8007d0c <_dtoa_r+0x5c4>)
 8007cc8:	2000      	movs	r0, #0
 8007cca:	f7f8 fb05 	bl	80002d8 <__aeabi_dsub>
 8007cce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007cd2:	f7f8 ff2b 	bl	8000b2c <__aeabi_dcmplt>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	f040 8095 	bne.w	8007e06 <_dtoa_r+0x6be>
 8007cdc:	42a6      	cmp	r6, r4
 8007cde:	f43f af50 	beq.w	8007b82 <_dtoa_r+0x43a>
 8007ce2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8007d10 <_dtoa_r+0x5c8>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f7f8 fcad 	bl	8000648 <__aeabi_dmul>
 8007cee:	4b08      	ldr	r3, [pc, #32]	@ (8007d10 <_dtoa_r+0x5c8>)
 8007cf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cfa:	f7f8 fca5 	bl	8000648 <__aeabi_dmul>
 8007cfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d02:	e7c4      	b.n	8007c8e <_dtoa_r+0x546>
 8007d04:	0800ae88 	.word	0x0800ae88
 8007d08:	0800ae60 	.word	0x0800ae60
 8007d0c:	3ff00000 	.word	0x3ff00000
 8007d10:	40240000 	.word	0x40240000
 8007d14:	401c0000 	.word	0x401c0000
 8007d18:	40140000 	.word	0x40140000
 8007d1c:	3fe00000 	.word	0x3fe00000
 8007d20:	4631      	mov	r1, r6
 8007d22:	4628      	mov	r0, r5
 8007d24:	f7f8 fc90 	bl	8000648 <__aeabi_dmul>
 8007d28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d2c:	9415      	str	r4, [sp, #84]	@ 0x54
 8007d2e:	4656      	mov	r6, sl
 8007d30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d34:	f7f8 ff38 	bl	8000ba8 <__aeabi_d2iz>
 8007d38:	4605      	mov	r5, r0
 8007d3a:	f7f8 fc1b 	bl	8000574 <__aeabi_i2d>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d46:	f7f8 fac7 	bl	80002d8 <__aeabi_dsub>
 8007d4a:	3530      	adds	r5, #48	@ 0x30
 8007d4c:	f806 5b01 	strb.w	r5, [r6], #1
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	42a6      	cmp	r6, r4
 8007d56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d5a:	f04f 0200 	mov.w	r2, #0
 8007d5e:	d124      	bne.n	8007daa <_dtoa_r+0x662>
 8007d60:	4bac      	ldr	r3, [pc, #688]	@ (8008014 <_dtoa_r+0x8cc>)
 8007d62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d66:	f7f8 fab9 	bl	80002dc <__adddf3>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d72:	f7f8 fef9 	bl	8000b68 <__aeabi_dcmpgt>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d145      	bne.n	8007e06 <_dtoa_r+0x6be>
 8007d7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d7e:	49a5      	ldr	r1, [pc, #660]	@ (8008014 <_dtoa_r+0x8cc>)
 8007d80:	2000      	movs	r0, #0
 8007d82:	f7f8 faa9 	bl	80002d8 <__aeabi_dsub>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d8e:	f7f8 fecd 	bl	8000b2c <__aeabi_dcmplt>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	f43f aef5 	beq.w	8007b82 <_dtoa_r+0x43a>
 8007d98:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007d9a:	1e73      	subs	r3, r6, #1
 8007d9c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007d9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007da2:	2b30      	cmp	r3, #48	@ 0x30
 8007da4:	d0f8      	beq.n	8007d98 <_dtoa_r+0x650>
 8007da6:	9f04      	ldr	r7, [sp, #16]
 8007da8:	e73e      	b.n	8007c28 <_dtoa_r+0x4e0>
 8007daa:	4b9b      	ldr	r3, [pc, #620]	@ (8008018 <_dtoa_r+0x8d0>)
 8007dac:	f7f8 fc4c 	bl	8000648 <__aeabi_dmul>
 8007db0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007db4:	e7bc      	b.n	8007d30 <_dtoa_r+0x5e8>
 8007db6:	d10c      	bne.n	8007dd2 <_dtoa_r+0x68a>
 8007db8:	4b98      	ldr	r3, [pc, #608]	@ (800801c <_dtoa_r+0x8d4>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007dc0:	f7f8 fc42 	bl	8000648 <__aeabi_dmul>
 8007dc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dc8:	f7f8 fec4 	bl	8000b54 <__aeabi_dcmpge>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	f000 8157 	beq.w	8008080 <_dtoa_r+0x938>
 8007dd2:	2400      	movs	r4, #0
 8007dd4:	4625      	mov	r5, r4
 8007dd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dd8:	43db      	mvns	r3, r3
 8007dda:	9304      	str	r3, [sp, #16]
 8007ddc:	4656      	mov	r6, sl
 8007dde:	2700      	movs	r7, #0
 8007de0:	4621      	mov	r1, r4
 8007de2:	4658      	mov	r0, fp
 8007de4:	f000 fbb4 	bl	8008550 <_Bfree>
 8007de8:	2d00      	cmp	r5, #0
 8007dea:	d0dc      	beq.n	8007da6 <_dtoa_r+0x65e>
 8007dec:	b12f      	cbz	r7, 8007dfa <_dtoa_r+0x6b2>
 8007dee:	42af      	cmp	r7, r5
 8007df0:	d003      	beq.n	8007dfa <_dtoa_r+0x6b2>
 8007df2:	4639      	mov	r1, r7
 8007df4:	4658      	mov	r0, fp
 8007df6:	f000 fbab 	bl	8008550 <_Bfree>
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	4658      	mov	r0, fp
 8007dfe:	f000 fba7 	bl	8008550 <_Bfree>
 8007e02:	e7d0      	b.n	8007da6 <_dtoa_r+0x65e>
 8007e04:	9704      	str	r7, [sp, #16]
 8007e06:	4633      	mov	r3, r6
 8007e08:	461e      	mov	r6, r3
 8007e0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e0e:	2a39      	cmp	r2, #57	@ 0x39
 8007e10:	d107      	bne.n	8007e22 <_dtoa_r+0x6da>
 8007e12:	459a      	cmp	sl, r3
 8007e14:	d1f8      	bne.n	8007e08 <_dtoa_r+0x6c0>
 8007e16:	9a04      	ldr	r2, [sp, #16]
 8007e18:	3201      	adds	r2, #1
 8007e1a:	9204      	str	r2, [sp, #16]
 8007e1c:	2230      	movs	r2, #48	@ 0x30
 8007e1e:	f88a 2000 	strb.w	r2, [sl]
 8007e22:	781a      	ldrb	r2, [r3, #0]
 8007e24:	3201      	adds	r2, #1
 8007e26:	701a      	strb	r2, [r3, #0]
 8007e28:	e7bd      	b.n	8007da6 <_dtoa_r+0x65e>
 8007e2a:	4b7b      	ldr	r3, [pc, #492]	@ (8008018 <_dtoa_r+0x8d0>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f7f8 fc0b 	bl	8000648 <__aeabi_dmul>
 8007e32:	2200      	movs	r2, #0
 8007e34:	2300      	movs	r3, #0
 8007e36:	4604      	mov	r4, r0
 8007e38:	460d      	mov	r5, r1
 8007e3a:	f7f8 fe6d 	bl	8000b18 <__aeabi_dcmpeq>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	f43f aebb 	beq.w	8007bba <_dtoa_r+0x472>
 8007e44:	e6f0      	b.n	8007c28 <_dtoa_r+0x4e0>
 8007e46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e48:	2a00      	cmp	r2, #0
 8007e4a:	f000 80db 	beq.w	8008004 <_dtoa_r+0x8bc>
 8007e4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e50:	2a01      	cmp	r2, #1
 8007e52:	f300 80bf 	bgt.w	8007fd4 <_dtoa_r+0x88c>
 8007e56:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007e58:	2a00      	cmp	r2, #0
 8007e5a:	f000 80b7 	beq.w	8007fcc <_dtoa_r+0x884>
 8007e5e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e62:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e64:	4646      	mov	r6, r8
 8007e66:	9a08      	ldr	r2, [sp, #32]
 8007e68:	2101      	movs	r1, #1
 8007e6a:	441a      	add	r2, r3
 8007e6c:	4658      	mov	r0, fp
 8007e6e:	4498      	add	r8, r3
 8007e70:	9208      	str	r2, [sp, #32]
 8007e72:	f000 fc6b 	bl	800874c <__i2b>
 8007e76:	4605      	mov	r5, r0
 8007e78:	b15e      	cbz	r6, 8007e92 <_dtoa_r+0x74a>
 8007e7a:	9b08      	ldr	r3, [sp, #32]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	dd08      	ble.n	8007e92 <_dtoa_r+0x74a>
 8007e80:	42b3      	cmp	r3, r6
 8007e82:	9a08      	ldr	r2, [sp, #32]
 8007e84:	bfa8      	it	ge
 8007e86:	4633      	movge	r3, r6
 8007e88:	eba8 0803 	sub.w	r8, r8, r3
 8007e8c:	1af6      	subs	r6, r6, r3
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	9308      	str	r3, [sp, #32]
 8007e92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e94:	b1f3      	cbz	r3, 8007ed4 <_dtoa_r+0x78c>
 8007e96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 80b7 	beq.w	800800c <_dtoa_r+0x8c4>
 8007e9e:	b18c      	cbz	r4, 8007ec4 <_dtoa_r+0x77c>
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	4622      	mov	r2, r4
 8007ea4:	4658      	mov	r0, fp
 8007ea6:	f000 fd11 	bl	80088cc <__pow5mult>
 8007eaa:	464a      	mov	r2, r9
 8007eac:	4601      	mov	r1, r0
 8007eae:	4605      	mov	r5, r0
 8007eb0:	4658      	mov	r0, fp
 8007eb2:	f000 fc61 	bl	8008778 <__multiply>
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	9004      	str	r0, [sp, #16]
 8007eba:	4658      	mov	r0, fp
 8007ebc:	f000 fb48 	bl	8008550 <_Bfree>
 8007ec0:	9b04      	ldr	r3, [sp, #16]
 8007ec2:	4699      	mov	r9, r3
 8007ec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ec6:	1b1a      	subs	r2, r3, r4
 8007ec8:	d004      	beq.n	8007ed4 <_dtoa_r+0x78c>
 8007eca:	4649      	mov	r1, r9
 8007ecc:	4658      	mov	r0, fp
 8007ece:	f000 fcfd 	bl	80088cc <__pow5mult>
 8007ed2:	4681      	mov	r9, r0
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	4658      	mov	r0, fp
 8007ed8:	f000 fc38 	bl	800874c <__i2b>
 8007edc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ede:	4604      	mov	r4, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 81cf 	beq.w	8008284 <_dtoa_r+0xb3c>
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	4601      	mov	r1, r0
 8007eea:	4658      	mov	r0, fp
 8007eec:	f000 fcee 	bl	80088cc <__pow5mult>
 8007ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	f300 8095 	bgt.w	8008024 <_dtoa_r+0x8dc>
 8007efa:	9b02      	ldr	r3, [sp, #8]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f040 8087 	bne.w	8008010 <_dtoa_r+0x8c8>
 8007f02:	9b03      	ldr	r3, [sp, #12]
 8007f04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f040 8089 	bne.w	8008020 <_dtoa_r+0x8d8>
 8007f0e:	9b03      	ldr	r3, [sp, #12]
 8007f10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f14:	0d1b      	lsrs	r3, r3, #20
 8007f16:	051b      	lsls	r3, r3, #20
 8007f18:	b12b      	cbz	r3, 8007f26 <_dtoa_r+0x7de>
 8007f1a:	9b08      	ldr	r3, [sp, #32]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	9308      	str	r3, [sp, #32]
 8007f20:	f108 0801 	add.w	r8, r8, #1
 8007f24:	2301      	movs	r3, #1
 8007f26:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 81b0 	beq.w	8008290 <_dtoa_r+0xb48>
 8007f30:	6923      	ldr	r3, [r4, #16]
 8007f32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f36:	6918      	ldr	r0, [r3, #16]
 8007f38:	f000 fbbc 	bl	80086b4 <__hi0bits>
 8007f3c:	f1c0 0020 	rsb	r0, r0, #32
 8007f40:	9b08      	ldr	r3, [sp, #32]
 8007f42:	4418      	add	r0, r3
 8007f44:	f010 001f 	ands.w	r0, r0, #31
 8007f48:	d077      	beq.n	800803a <_dtoa_r+0x8f2>
 8007f4a:	f1c0 0320 	rsb	r3, r0, #32
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	dd6b      	ble.n	800802a <_dtoa_r+0x8e2>
 8007f52:	9b08      	ldr	r3, [sp, #32]
 8007f54:	f1c0 001c 	rsb	r0, r0, #28
 8007f58:	4403      	add	r3, r0
 8007f5a:	4480      	add	r8, r0
 8007f5c:	4406      	add	r6, r0
 8007f5e:	9308      	str	r3, [sp, #32]
 8007f60:	f1b8 0f00 	cmp.w	r8, #0
 8007f64:	dd05      	ble.n	8007f72 <_dtoa_r+0x82a>
 8007f66:	4649      	mov	r1, r9
 8007f68:	4642      	mov	r2, r8
 8007f6a:	4658      	mov	r0, fp
 8007f6c:	f000 fd08 	bl	8008980 <__lshift>
 8007f70:	4681      	mov	r9, r0
 8007f72:	9b08      	ldr	r3, [sp, #32]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	dd05      	ble.n	8007f84 <_dtoa_r+0x83c>
 8007f78:	4621      	mov	r1, r4
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	4658      	mov	r0, fp
 8007f7e:	f000 fcff 	bl	8008980 <__lshift>
 8007f82:	4604      	mov	r4, r0
 8007f84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d059      	beq.n	800803e <_dtoa_r+0x8f6>
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	4648      	mov	r0, r9
 8007f8e:	f000 fd63 	bl	8008a58 <__mcmp>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	da53      	bge.n	800803e <_dtoa_r+0x8f6>
 8007f96:	1e7b      	subs	r3, r7, #1
 8007f98:	9304      	str	r3, [sp, #16]
 8007f9a:	4649      	mov	r1, r9
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	220a      	movs	r2, #10
 8007fa0:	4658      	mov	r0, fp
 8007fa2:	f000 faf7 	bl	8008594 <__multadd>
 8007fa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fa8:	4681      	mov	r9, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 8172 	beq.w	8008294 <_dtoa_r+0xb4c>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	220a      	movs	r2, #10
 8007fb6:	4658      	mov	r0, fp
 8007fb8:	f000 faec 	bl	8008594 <__multadd>
 8007fbc:	9b00      	ldr	r3, [sp, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	4605      	mov	r5, r0
 8007fc2:	dc67      	bgt.n	8008094 <_dtoa_r+0x94c>
 8007fc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	dc41      	bgt.n	800804e <_dtoa_r+0x906>
 8007fca:	e063      	b.n	8008094 <_dtoa_r+0x94c>
 8007fcc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007fce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007fd2:	e746      	b.n	8007e62 <_dtoa_r+0x71a>
 8007fd4:	9b07      	ldr	r3, [sp, #28]
 8007fd6:	1e5c      	subs	r4, r3, #1
 8007fd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fda:	42a3      	cmp	r3, r4
 8007fdc:	bfbf      	itttt	lt
 8007fde:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007fe0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007fe2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007fe4:	1ae3      	sublt	r3, r4, r3
 8007fe6:	bfb4      	ite	lt
 8007fe8:	18d2      	addlt	r2, r2, r3
 8007fea:	1b1c      	subge	r4, r3, r4
 8007fec:	9b07      	ldr	r3, [sp, #28]
 8007fee:	bfbc      	itt	lt
 8007ff0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007ff2:	2400      	movlt	r4, #0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	bfb5      	itete	lt
 8007ff8:	eba8 0603 	sublt.w	r6, r8, r3
 8007ffc:	9b07      	ldrge	r3, [sp, #28]
 8007ffe:	2300      	movlt	r3, #0
 8008000:	4646      	movge	r6, r8
 8008002:	e730      	b.n	8007e66 <_dtoa_r+0x71e>
 8008004:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008006:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008008:	4646      	mov	r6, r8
 800800a:	e735      	b.n	8007e78 <_dtoa_r+0x730>
 800800c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800800e:	e75c      	b.n	8007eca <_dtoa_r+0x782>
 8008010:	2300      	movs	r3, #0
 8008012:	e788      	b.n	8007f26 <_dtoa_r+0x7de>
 8008014:	3fe00000 	.word	0x3fe00000
 8008018:	40240000 	.word	0x40240000
 800801c:	40140000 	.word	0x40140000
 8008020:	9b02      	ldr	r3, [sp, #8]
 8008022:	e780      	b.n	8007f26 <_dtoa_r+0x7de>
 8008024:	2300      	movs	r3, #0
 8008026:	930a      	str	r3, [sp, #40]	@ 0x28
 8008028:	e782      	b.n	8007f30 <_dtoa_r+0x7e8>
 800802a:	d099      	beq.n	8007f60 <_dtoa_r+0x818>
 800802c:	9a08      	ldr	r2, [sp, #32]
 800802e:	331c      	adds	r3, #28
 8008030:	441a      	add	r2, r3
 8008032:	4498      	add	r8, r3
 8008034:	441e      	add	r6, r3
 8008036:	9208      	str	r2, [sp, #32]
 8008038:	e792      	b.n	8007f60 <_dtoa_r+0x818>
 800803a:	4603      	mov	r3, r0
 800803c:	e7f6      	b.n	800802c <_dtoa_r+0x8e4>
 800803e:	9b07      	ldr	r3, [sp, #28]
 8008040:	9704      	str	r7, [sp, #16]
 8008042:	2b00      	cmp	r3, #0
 8008044:	dc20      	bgt.n	8008088 <_dtoa_r+0x940>
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800804a:	2b02      	cmp	r3, #2
 800804c:	dd1e      	ble.n	800808c <_dtoa_r+0x944>
 800804e:	9b00      	ldr	r3, [sp, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	f47f aec0 	bne.w	8007dd6 <_dtoa_r+0x68e>
 8008056:	4621      	mov	r1, r4
 8008058:	2205      	movs	r2, #5
 800805a:	4658      	mov	r0, fp
 800805c:	f000 fa9a 	bl	8008594 <__multadd>
 8008060:	4601      	mov	r1, r0
 8008062:	4604      	mov	r4, r0
 8008064:	4648      	mov	r0, r9
 8008066:	f000 fcf7 	bl	8008a58 <__mcmp>
 800806a:	2800      	cmp	r0, #0
 800806c:	f77f aeb3 	ble.w	8007dd6 <_dtoa_r+0x68e>
 8008070:	4656      	mov	r6, sl
 8008072:	2331      	movs	r3, #49	@ 0x31
 8008074:	f806 3b01 	strb.w	r3, [r6], #1
 8008078:	9b04      	ldr	r3, [sp, #16]
 800807a:	3301      	adds	r3, #1
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	e6ae      	b.n	8007dde <_dtoa_r+0x696>
 8008080:	9c07      	ldr	r4, [sp, #28]
 8008082:	9704      	str	r7, [sp, #16]
 8008084:	4625      	mov	r5, r4
 8008086:	e7f3      	b.n	8008070 <_dtoa_r+0x928>
 8008088:	9b07      	ldr	r3, [sp, #28]
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800808e:	2b00      	cmp	r3, #0
 8008090:	f000 8104 	beq.w	800829c <_dtoa_r+0xb54>
 8008094:	2e00      	cmp	r6, #0
 8008096:	dd05      	ble.n	80080a4 <_dtoa_r+0x95c>
 8008098:	4629      	mov	r1, r5
 800809a:	4632      	mov	r2, r6
 800809c:	4658      	mov	r0, fp
 800809e:	f000 fc6f 	bl	8008980 <__lshift>
 80080a2:	4605      	mov	r5, r0
 80080a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d05a      	beq.n	8008160 <_dtoa_r+0xa18>
 80080aa:	6869      	ldr	r1, [r5, #4]
 80080ac:	4658      	mov	r0, fp
 80080ae:	f000 fa0f 	bl	80084d0 <_Balloc>
 80080b2:	4606      	mov	r6, r0
 80080b4:	b928      	cbnz	r0, 80080c2 <_dtoa_r+0x97a>
 80080b6:	4b84      	ldr	r3, [pc, #528]	@ (80082c8 <_dtoa_r+0xb80>)
 80080b8:	4602      	mov	r2, r0
 80080ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80080be:	f7ff bb5a 	b.w	8007776 <_dtoa_r+0x2e>
 80080c2:	692a      	ldr	r2, [r5, #16]
 80080c4:	3202      	adds	r2, #2
 80080c6:	0092      	lsls	r2, r2, #2
 80080c8:	f105 010c 	add.w	r1, r5, #12
 80080cc:	300c      	adds	r0, #12
 80080ce:	f001 ff75 	bl	8009fbc <memcpy>
 80080d2:	2201      	movs	r2, #1
 80080d4:	4631      	mov	r1, r6
 80080d6:	4658      	mov	r0, fp
 80080d8:	f000 fc52 	bl	8008980 <__lshift>
 80080dc:	f10a 0301 	add.w	r3, sl, #1
 80080e0:	9307      	str	r3, [sp, #28]
 80080e2:	9b00      	ldr	r3, [sp, #0]
 80080e4:	4453      	add	r3, sl
 80080e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080e8:	9b02      	ldr	r3, [sp, #8]
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	462f      	mov	r7, r5
 80080f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80080f2:	4605      	mov	r5, r0
 80080f4:	9b07      	ldr	r3, [sp, #28]
 80080f6:	4621      	mov	r1, r4
 80080f8:	3b01      	subs	r3, #1
 80080fa:	4648      	mov	r0, r9
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	f7ff fa9b 	bl	8007638 <quorem>
 8008102:	4639      	mov	r1, r7
 8008104:	9002      	str	r0, [sp, #8]
 8008106:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800810a:	4648      	mov	r0, r9
 800810c:	f000 fca4 	bl	8008a58 <__mcmp>
 8008110:	462a      	mov	r2, r5
 8008112:	9008      	str	r0, [sp, #32]
 8008114:	4621      	mov	r1, r4
 8008116:	4658      	mov	r0, fp
 8008118:	f000 fcba 	bl	8008a90 <__mdiff>
 800811c:	68c2      	ldr	r2, [r0, #12]
 800811e:	4606      	mov	r6, r0
 8008120:	bb02      	cbnz	r2, 8008164 <_dtoa_r+0xa1c>
 8008122:	4601      	mov	r1, r0
 8008124:	4648      	mov	r0, r9
 8008126:	f000 fc97 	bl	8008a58 <__mcmp>
 800812a:	4602      	mov	r2, r0
 800812c:	4631      	mov	r1, r6
 800812e:	4658      	mov	r0, fp
 8008130:	920e      	str	r2, [sp, #56]	@ 0x38
 8008132:	f000 fa0d 	bl	8008550 <_Bfree>
 8008136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008138:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800813a:	9e07      	ldr	r6, [sp, #28]
 800813c:	ea43 0102 	orr.w	r1, r3, r2
 8008140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008142:	4319      	orrs	r1, r3
 8008144:	d110      	bne.n	8008168 <_dtoa_r+0xa20>
 8008146:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800814a:	d029      	beq.n	80081a0 <_dtoa_r+0xa58>
 800814c:	9b08      	ldr	r3, [sp, #32]
 800814e:	2b00      	cmp	r3, #0
 8008150:	dd02      	ble.n	8008158 <_dtoa_r+0xa10>
 8008152:	9b02      	ldr	r3, [sp, #8]
 8008154:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008158:	9b00      	ldr	r3, [sp, #0]
 800815a:	f883 8000 	strb.w	r8, [r3]
 800815e:	e63f      	b.n	8007de0 <_dtoa_r+0x698>
 8008160:	4628      	mov	r0, r5
 8008162:	e7bb      	b.n	80080dc <_dtoa_r+0x994>
 8008164:	2201      	movs	r2, #1
 8008166:	e7e1      	b.n	800812c <_dtoa_r+0x9e4>
 8008168:	9b08      	ldr	r3, [sp, #32]
 800816a:	2b00      	cmp	r3, #0
 800816c:	db04      	blt.n	8008178 <_dtoa_r+0xa30>
 800816e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008170:	430b      	orrs	r3, r1
 8008172:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008174:	430b      	orrs	r3, r1
 8008176:	d120      	bne.n	80081ba <_dtoa_r+0xa72>
 8008178:	2a00      	cmp	r2, #0
 800817a:	dded      	ble.n	8008158 <_dtoa_r+0xa10>
 800817c:	4649      	mov	r1, r9
 800817e:	2201      	movs	r2, #1
 8008180:	4658      	mov	r0, fp
 8008182:	f000 fbfd 	bl	8008980 <__lshift>
 8008186:	4621      	mov	r1, r4
 8008188:	4681      	mov	r9, r0
 800818a:	f000 fc65 	bl	8008a58 <__mcmp>
 800818e:	2800      	cmp	r0, #0
 8008190:	dc03      	bgt.n	800819a <_dtoa_r+0xa52>
 8008192:	d1e1      	bne.n	8008158 <_dtoa_r+0xa10>
 8008194:	f018 0f01 	tst.w	r8, #1
 8008198:	d0de      	beq.n	8008158 <_dtoa_r+0xa10>
 800819a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800819e:	d1d8      	bne.n	8008152 <_dtoa_r+0xa0a>
 80081a0:	9a00      	ldr	r2, [sp, #0]
 80081a2:	2339      	movs	r3, #57	@ 0x39
 80081a4:	7013      	strb	r3, [r2, #0]
 80081a6:	4633      	mov	r3, r6
 80081a8:	461e      	mov	r6, r3
 80081aa:	3b01      	subs	r3, #1
 80081ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80081b0:	2a39      	cmp	r2, #57	@ 0x39
 80081b2:	d052      	beq.n	800825a <_dtoa_r+0xb12>
 80081b4:	3201      	adds	r2, #1
 80081b6:	701a      	strb	r2, [r3, #0]
 80081b8:	e612      	b.n	8007de0 <_dtoa_r+0x698>
 80081ba:	2a00      	cmp	r2, #0
 80081bc:	dd07      	ble.n	80081ce <_dtoa_r+0xa86>
 80081be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081c2:	d0ed      	beq.n	80081a0 <_dtoa_r+0xa58>
 80081c4:	9a00      	ldr	r2, [sp, #0]
 80081c6:	f108 0301 	add.w	r3, r8, #1
 80081ca:	7013      	strb	r3, [r2, #0]
 80081cc:	e608      	b.n	8007de0 <_dtoa_r+0x698>
 80081ce:	9b07      	ldr	r3, [sp, #28]
 80081d0:	9a07      	ldr	r2, [sp, #28]
 80081d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80081d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081d8:	4293      	cmp	r3, r2
 80081da:	d028      	beq.n	800822e <_dtoa_r+0xae6>
 80081dc:	4649      	mov	r1, r9
 80081de:	2300      	movs	r3, #0
 80081e0:	220a      	movs	r2, #10
 80081e2:	4658      	mov	r0, fp
 80081e4:	f000 f9d6 	bl	8008594 <__multadd>
 80081e8:	42af      	cmp	r7, r5
 80081ea:	4681      	mov	r9, r0
 80081ec:	f04f 0300 	mov.w	r3, #0
 80081f0:	f04f 020a 	mov.w	r2, #10
 80081f4:	4639      	mov	r1, r7
 80081f6:	4658      	mov	r0, fp
 80081f8:	d107      	bne.n	800820a <_dtoa_r+0xac2>
 80081fa:	f000 f9cb 	bl	8008594 <__multadd>
 80081fe:	4607      	mov	r7, r0
 8008200:	4605      	mov	r5, r0
 8008202:	9b07      	ldr	r3, [sp, #28]
 8008204:	3301      	adds	r3, #1
 8008206:	9307      	str	r3, [sp, #28]
 8008208:	e774      	b.n	80080f4 <_dtoa_r+0x9ac>
 800820a:	f000 f9c3 	bl	8008594 <__multadd>
 800820e:	4629      	mov	r1, r5
 8008210:	4607      	mov	r7, r0
 8008212:	2300      	movs	r3, #0
 8008214:	220a      	movs	r2, #10
 8008216:	4658      	mov	r0, fp
 8008218:	f000 f9bc 	bl	8008594 <__multadd>
 800821c:	4605      	mov	r5, r0
 800821e:	e7f0      	b.n	8008202 <_dtoa_r+0xaba>
 8008220:	9b00      	ldr	r3, [sp, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	bfcc      	ite	gt
 8008226:	461e      	movgt	r6, r3
 8008228:	2601      	movle	r6, #1
 800822a:	4456      	add	r6, sl
 800822c:	2700      	movs	r7, #0
 800822e:	4649      	mov	r1, r9
 8008230:	2201      	movs	r2, #1
 8008232:	4658      	mov	r0, fp
 8008234:	f000 fba4 	bl	8008980 <__lshift>
 8008238:	4621      	mov	r1, r4
 800823a:	4681      	mov	r9, r0
 800823c:	f000 fc0c 	bl	8008a58 <__mcmp>
 8008240:	2800      	cmp	r0, #0
 8008242:	dcb0      	bgt.n	80081a6 <_dtoa_r+0xa5e>
 8008244:	d102      	bne.n	800824c <_dtoa_r+0xb04>
 8008246:	f018 0f01 	tst.w	r8, #1
 800824a:	d1ac      	bne.n	80081a6 <_dtoa_r+0xa5e>
 800824c:	4633      	mov	r3, r6
 800824e:	461e      	mov	r6, r3
 8008250:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008254:	2a30      	cmp	r2, #48	@ 0x30
 8008256:	d0fa      	beq.n	800824e <_dtoa_r+0xb06>
 8008258:	e5c2      	b.n	8007de0 <_dtoa_r+0x698>
 800825a:	459a      	cmp	sl, r3
 800825c:	d1a4      	bne.n	80081a8 <_dtoa_r+0xa60>
 800825e:	9b04      	ldr	r3, [sp, #16]
 8008260:	3301      	adds	r3, #1
 8008262:	9304      	str	r3, [sp, #16]
 8008264:	2331      	movs	r3, #49	@ 0x31
 8008266:	f88a 3000 	strb.w	r3, [sl]
 800826a:	e5b9      	b.n	8007de0 <_dtoa_r+0x698>
 800826c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800826e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80082cc <_dtoa_r+0xb84>
 8008272:	b11b      	cbz	r3, 800827c <_dtoa_r+0xb34>
 8008274:	f10a 0308 	add.w	r3, sl, #8
 8008278:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	4650      	mov	r0, sl
 800827e:	b019      	add	sp, #100	@ 0x64
 8008280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008286:	2b01      	cmp	r3, #1
 8008288:	f77f ae37 	ble.w	8007efa <_dtoa_r+0x7b2>
 800828c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800828e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008290:	2001      	movs	r0, #1
 8008292:	e655      	b.n	8007f40 <_dtoa_r+0x7f8>
 8008294:	9b00      	ldr	r3, [sp, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	f77f aed6 	ble.w	8008048 <_dtoa_r+0x900>
 800829c:	4656      	mov	r6, sl
 800829e:	4621      	mov	r1, r4
 80082a0:	4648      	mov	r0, r9
 80082a2:	f7ff f9c9 	bl	8007638 <quorem>
 80082a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80082aa:	f806 8b01 	strb.w	r8, [r6], #1
 80082ae:	9b00      	ldr	r3, [sp, #0]
 80082b0:	eba6 020a 	sub.w	r2, r6, sl
 80082b4:	4293      	cmp	r3, r2
 80082b6:	ddb3      	ble.n	8008220 <_dtoa_r+0xad8>
 80082b8:	4649      	mov	r1, r9
 80082ba:	2300      	movs	r3, #0
 80082bc:	220a      	movs	r2, #10
 80082be:	4658      	mov	r0, fp
 80082c0:	f000 f968 	bl	8008594 <__multadd>
 80082c4:	4681      	mov	r9, r0
 80082c6:	e7ea      	b.n	800829e <_dtoa_r+0xb56>
 80082c8:	0800ade5 	.word	0x0800ade5
 80082cc:	0800ad69 	.word	0x0800ad69

080082d0 <_free_r>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	4605      	mov	r5, r0
 80082d4:	2900      	cmp	r1, #0
 80082d6:	d041      	beq.n	800835c <_free_r+0x8c>
 80082d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082dc:	1f0c      	subs	r4, r1, #4
 80082de:	2b00      	cmp	r3, #0
 80082e0:	bfb8      	it	lt
 80082e2:	18e4      	addlt	r4, r4, r3
 80082e4:	f000 f8e8 	bl	80084b8 <__malloc_lock>
 80082e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008360 <_free_r+0x90>)
 80082ea:	6813      	ldr	r3, [r2, #0]
 80082ec:	b933      	cbnz	r3, 80082fc <_free_r+0x2c>
 80082ee:	6063      	str	r3, [r4, #4]
 80082f0:	6014      	str	r4, [r2, #0]
 80082f2:	4628      	mov	r0, r5
 80082f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082f8:	f000 b8e4 	b.w	80084c4 <__malloc_unlock>
 80082fc:	42a3      	cmp	r3, r4
 80082fe:	d908      	bls.n	8008312 <_free_r+0x42>
 8008300:	6820      	ldr	r0, [r4, #0]
 8008302:	1821      	adds	r1, r4, r0
 8008304:	428b      	cmp	r3, r1
 8008306:	bf01      	itttt	eq
 8008308:	6819      	ldreq	r1, [r3, #0]
 800830a:	685b      	ldreq	r3, [r3, #4]
 800830c:	1809      	addeq	r1, r1, r0
 800830e:	6021      	streq	r1, [r4, #0]
 8008310:	e7ed      	b.n	80082ee <_free_r+0x1e>
 8008312:	461a      	mov	r2, r3
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	b10b      	cbz	r3, 800831c <_free_r+0x4c>
 8008318:	42a3      	cmp	r3, r4
 800831a:	d9fa      	bls.n	8008312 <_free_r+0x42>
 800831c:	6811      	ldr	r1, [r2, #0]
 800831e:	1850      	adds	r0, r2, r1
 8008320:	42a0      	cmp	r0, r4
 8008322:	d10b      	bne.n	800833c <_free_r+0x6c>
 8008324:	6820      	ldr	r0, [r4, #0]
 8008326:	4401      	add	r1, r0
 8008328:	1850      	adds	r0, r2, r1
 800832a:	4283      	cmp	r3, r0
 800832c:	6011      	str	r1, [r2, #0]
 800832e:	d1e0      	bne.n	80082f2 <_free_r+0x22>
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	6053      	str	r3, [r2, #4]
 8008336:	4408      	add	r0, r1
 8008338:	6010      	str	r0, [r2, #0]
 800833a:	e7da      	b.n	80082f2 <_free_r+0x22>
 800833c:	d902      	bls.n	8008344 <_free_r+0x74>
 800833e:	230c      	movs	r3, #12
 8008340:	602b      	str	r3, [r5, #0]
 8008342:	e7d6      	b.n	80082f2 <_free_r+0x22>
 8008344:	6820      	ldr	r0, [r4, #0]
 8008346:	1821      	adds	r1, r4, r0
 8008348:	428b      	cmp	r3, r1
 800834a:	bf04      	itt	eq
 800834c:	6819      	ldreq	r1, [r3, #0]
 800834e:	685b      	ldreq	r3, [r3, #4]
 8008350:	6063      	str	r3, [r4, #4]
 8008352:	bf04      	itt	eq
 8008354:	1809      	addeq	r1, r1, r0
 8008356:	6021      	streq	r1, [r4, #0]
 8008358:	6054      	str	r4, [r2, #4]
 800835a:	e7ca      	b.n	80082f2 <_free_r+0x22>
 800835c:	bd38      	pop	{r3, r4, r5, pc}
 800835e:	bf00      	nop
 8008360:	2000066c 	.word	0x2000066c

08008364 <malloc>:
 8008364:	4b02      	ldr	r3, [pc, #8]	@ (8008370 <malloc+0xc>)
 8008366:	4601      	mov	r1, r0
 8008368:	6818      	ldr	r0, [r3, #0]
 800836a:	f000 b825 	b.w	80083b8 <_malloc_r>
 800836e:	bf00      	nop
 8008370:	20000018 	.word	0x20000018

08008374 <sbrk_aligned>:
 8008374:	b570      	push	{r4, r5, r6, lr}
 8008376:	4e0f      	ldr	r6, [pc, #60]	@ (80083b4 <sbrk_aligned+0x40>)
 8008378:	460c      	mov	r4, r1
 800837a:	6831      	ldr	r1, [r6, #0]
 800837c:	4605      	mov	r5, r0
 800837e:	b911      	cbnz	r1, 8008386 <sbrk_aligned+0x12>
 8008380:	f001 fe0c 	bl	8009f9c <_sbrk_r>
 8008384:	6030      	str	r0, [r6, #0]
 8008386:	4621      	mov	r1, r4
 8008388:	4628      	mov	r0, r5
 800838a:	f001 fe07 	bl	8009f9c <_sbrk_r>
 800838e:	1c43      	adds	r3, r0, #1
 8008390:	d103      	bne.n	800839a <sbrk_aligned+0x26>
 8008392:	f04f 34ff 	mov.w	r4, #4294967295
 8008396:	4620      	mov	r0, r4
 8008398:	bd70      	pop	{r4, r5, r6, pc}
 800839a:	1cc4      	adds	r4, r0, #3
 800839c:	f024 0403 	bic.w	r4, r4, #3
 80083a0:	42a0      	cmp	r0, r4
 80083a2:	d0f8      	beq.n	8008396 <sbrk_aligned+0x22>
 80083a4:	1a21      	subs	r1, r4, r0
 80083a6:	4628      	mov	r0, r5
 80083a8:	f001 fdf8 	bl	8009f9c <_sbrk_r>
 80083ac:	3001      	adds	r0, #1
 80083ae:	d1f2      	bne.n	8008396 <sbrk_aligned+0x22>
 80083b0:	e7ef      	b.n	8008392 <sbrk_aligned+0x1e>
 80083b2:	bf00      	nop
 80083b4:	20000668 	.word	0x20000668

080083b8 <_malloc_r>:
 80083b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083bc:	1ccd      	adds	r5, r1, #3
 80083be:	f025 0503 	bic.w	r5, r5, #3
 80083c2:	3508      	adds	r5, #8
 80083c4:	2d0c      	cmp	r5, #12
 80083c6:	bf38      	it	cc
 80083c8:	250c      	movcc	r5, #12
 80083ca:	2d00      	cmp	r5, #0
 80083cc:	4606      	mov	r6, r0
 80083ce:	db01      	blt.n	80083d4 <_malloc_r+0x1c>
 80083d0:	42a9      	cmp	r1, r5
 80083d2:	d904      	bls.n	80083de <_malloc_r+0x26>
 80083d4:	230c      	movs	r3, #12
 80083d6:	6033      	str	r3, [r6, #0]
 80083d8:	2000      	movs	r0, #0
 80083da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084b4 <_malloc_r+0xfc>
 80083e2:	f000 f869 	bl	80084b8 <__malloc_lock>
 80083e6:	f8d8 3000 	ldr.w	r3, [r8]
 80083ea:	461c      	mov	r4, r3
 80083ec:	bb44      	cbnz	r4, 8008440 <_malloc_r+0x88>
 80083ee:	4629      	mov	r1, r5
 80083f0:	4630      	mov	r0, r6
 80083f2:	f7ff ffbf 	bl	8008374 <sbrk_aligned>
 80083f6:	1c43      	adds	r3, r0, #1
 80083f8:	4604      	mov	r4, r0
 80083fa:	d158      	bne.n	80084ae <_malloc_r+0xf6>
 80083fc:	f8d8 4000 	ldr.w	r4, [r8]
 8008400:	4627      	mov	r7, r4
 8008402:	2f00      	cmp	r7, #0
 8008404:	d143      	bne.n	800848e <_malloc_r+0xd6>
 8008406:	2c00      	cmp	r4, #0
 8008408:	d04b      	beq.n	80084a2 <_malloc_r+0xea>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	4639      	mov	r1, r7
 800840e:	4630      	mov	r0, r6
 8008410:	eb04 0903 	add.w	r9, r4, r3
 8008414:	f001 fdc2 	bl	8009f9c <_sbrk_r>
 8008418:	4581      	cmp	r9, r0
 800841a:	d142      	bne.n	80084a2 <_malloc_r+0xea>
 800841c:	6821      	ldr	r1, [r4, #0]
 800841e:	1a6d      	subs	r5, r5, r1
 8008420:	4629      	mov	r1, r5
 8008422:	4630      	mov	r0, r6
 8008424:	f7ff ffa6 	bl	8008374 <sbrk_aligned>
 8008428:	3001      	adds	r0, #1
 800842a:	d03a      	beq.n	80084a2 <_malloc_r+0xea>
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	442b      	add	r3, r5
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	f8d8 3000 	ldr.w	r3, [r8]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	bb62      	cbnz	r2, 8008494 <_malloc_r+0xdc>
 800843a:	f8c8 7000 	str.w	r7, [r8]
 800843e:	e00f      	b.n	8008460 <_malloc_r+0xa8>
 8008440:	6822      	ldr	r2, [r4, #0]
 8008442:	1b52      	subs	r2, r2, r5
 8008444:	d420      	bmi.n	8008488 <_malloc_r+0xd0>
 8008446:	2a0b      	cmp	r2, #11
 8008448:	d917      	bls.n	800847a <_malloc_r+0xc2>
 800844a:	1961      	adds	r1, r4, r5
 800844c:	42a3      	cmp	r3, r4
 800844e:	6025      	str	r5, [r4, #0]
 8008450:	bf18      	it	ne
 8008452:	6059      	strne	r1, [r3, #4]
 8008454:	6863      	ldr	r3, [r4, #4]
 8008456:	bf08      	it	eq
 8008458:	f8c8 1000 	streq.w	r1, [r8]
 800845c:	5162      	str	r2, [r4, r5]
 800845e:	604b      	str	r3, [r1, #4]
 8008460:	4630      	mov	r0, r6
 8008462:	f000 f82f 	bl	80084c4 <__malloc_unlock>
 8008466:	f104 000b 	add.w	r0, r4, #11
 800846a:	1d23      	adds	r3, r4, #4
 800846c:	f020 0007 	bic.w	r0, r0, #7
 8008470:	1ac2      	subs	r2, r0, r3
 8008472:	bf1c      	itt	ne
 8008474:	1a1b      	subne	r3, r3, r0
 8008476:	50a3      	strne	r3, [r4, r2]
 8008478:	e7af      	b.n	80083da <_malloc_r+0x22>
 800847a:	6862      	ldr	r2, [r4, #4]
 800847c:	42a3      	cmp	r3, r4
 800847e:	bf0c      	ite	eq
 8008480:	f8c8 2000 	streq.w	r2, [r8]
 8008484:	605a      	strne	r2, [r3, #4]
 8008486:	e7eb      	b.n	8008460 <_malloc_r+0xa8>
 8008488:	4623      	mov	r3, r4
 800848a:	6864      	ldr	r4, [r4, #4]
 800848c:	e7ae      	b.n	80083ec <_malloc_r+0x34>
 800848e:	463c      	mov	r4, r7
 8008490:	687f      	ldr	r7, [r7, #4]
 8008492:	e7b6      	b.n	8008402 <_malloc_r+0x4a>
 8008494:	461a      	mov	r2, r3
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	42a3      	cmp	r3, r4
 800849a:	d1fb      	bne.n	8008494 <_malloc_r+0xdc>
 800849c:	2300      	movs	r3, #0
 800849e:	6053      	str	r3, [r2, #4]
 80084a0:	e7de      	b.n	8008460 <_malloc_r+0xa8>
 80084a2:	230c      	movs	r3, #12
 80084a4:	6033      	str	r3, [r6, #0]
 80084a6:	4630      	mov	r0, r6
 80084a8:	f000 f80c 	bl	80084c4 <__malloc_unlock>
 80084ac:	e794      	b.n	80083d8 <_malloc_r+0x20>
 80084ae:	6005      	str	r5, [r0, #0]
 80084b0:	e7d6      	b.n	8008460 <_malloc_r+0xa8>
 80084b2:	bf00      	nop
 80084b4:	2000066c 	.word	0x2000066c

080084b8 <__malloc_lock>:
 80084b8:	4801      	ldr	r0, [pc, #4]	@ (80084c0 <__malloc_lock+0x8>)
 80084ba:	f7ff b8b4 	b.w	8007626 <__retarget_lock_acquire_recursive>
 80084be:	bf00      	nop
 80084c0:	20000664 	.word	0x20000664

080084c4 <__malloc_unlock>:
 80084c4:	4801      	ldr	r0, [pc, #4]	@ (80084cc <__malloc_unlock+0x8>)
 80084c6:	f7ff b8af 	b.w	8007628 <__retarget_lock_release_recursive>
 80084ca:	bf00      	nop
 80084cc:	20000664 	.word	0x20000664

080084d0 <_Balloc>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	69c6      	ldr	r6, [r0, #28]
 80084d4:	4604      	mov	r4, r0
 80084d6:	460d      	mov	r5, r1
 80084d8:	b976      	cbnz	r6, 80084f8 <_Balloc+0x28>
 80084da:	2010      	movs	r0, #16
 80084dc:	f7ff ff42 	bl	8008364 <malloc>
 80084e0:	4602      	mov	r2, r0
 80084e2:	61e0      	str	r0, [r4, #28]
 80084e4:	b920      	cbnz	r0, 80084f0 <_Balloc+0x20>
 80084e6:	4b18      	ldr	r3, [pc, #96]	@ (8008548 <_Balloc+0x78>)
 80084e8:	4818      	ldr	r0, [pc, #96]	@ (800854c <_Balloc+0x7c>)
 80084ea:	216b      	movs	r1, #107	@ 0x6b
 80084ec:	f001 fd7c 	bl	8009fe8 <__assert_func>
 80084f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084f4:	6006      	str	r6, [r0, #0]
 80084f6:	60c6      	str	r6, [r0, #12]
 80084f8:	69e6      	ldr	r6, [r4, #28]
 80084fa:	68f3      	ldr	r3, [r6, #12]
 80084fc:	b183      	cbz	r3, 8008520 <_Balloc+0x50>
 80084fe:	69e3      	ldr	r3, [r4, #28]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008506:	b9b8      	cbnz	r0, 8008538 <_Balloc+0x68>
 8008508:	2101      	movs	r1, #1
 800850a:	fa01 f605 	lsl.w	r6, r1, r5
 800850e:	1d72      	adds	r2, r6, #5
 8008510:	0092      	lsls	r2, r2, #2
 8008512:	4620      	mov	r0, r4
 8008514:	f001 fd86 	bl	800a024 <_calloc_r>
 8008518:	b160      	cbz	r0, 8008534 <_Balloc+0x64>
 800851a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800851e:	e00e      	b.n	800853e <_Balloc+0x6e>
 8008520:	2221      	movs	r2, #33	@ 0x21
 8008522:	2104      	movs	r1, #4
 8008524:	4620      	mov	r0, r4
 8008526:	f001 fd7d 	bl	800a024 <_calloc_r>
 800852a:	69e3      	ldr	r3, [r4, #28]
 800852c:	60f0      	str	r0, [r6, #12]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e4      	bne.n	80084fe <_Balloc+0x2e>
 8008534:	2000      	movs	r0, #0
 8008536:	bd70      	pop	{r4, r5, r6, pc}
 8008538:	6802      	ldr	r2, [r0, #0]
 800853a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800853e:	2300      	movs	r3, #0
 8008540:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008544:	e7f7      	b.n	8008536 <_Balloc+0x66>
 8008546:	bf00      	nop
 8008548:	0800ad76 	.word	0x0800ad76
 800854c:	0800adf6 	.word	0x0800adf6

08008550 <_Bfree>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	69c6      	ldr	r6, [r0, #28]
 8008554:	4605      	mov	r5, r0
 8008556:	460c      	mov	r4, r1
 8008558:	b976      	cbnz	r6, 8008578 <_Bfree+0x28>
 800855a:	2010      	movs	r0, #16
 800855c:	f7ff ff02 	bl	8008364 <malloc>
 8008560:	4602      	mov	r2, r0
 8008562:	61e8      	str	r0, [r5, #28]
 8008564:	b920      	cbnz	r0, 8008570 <_Bfree+0x20>
 8008566:	4b09      	ldr	r3, [pc, #36]	@ (800858c <_Bfree+0x3c>)
 8008568:	4809      	ldr	r0, [pc, #36]	@ (8008590 <_Bfree+0x40>)
 800856a:	218f      	movs	r1, #143	@ 0x8f
 800856c:	f001 fd3c 	bl	8009fe8 <__assert_func>
 8008570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008574:	6006      	str	r6, [r0, #0]
 8008576:	60c6      	str	r6, [r0, #12]
 8008578:	b13c      	cbz	r4, 800858a <_Bfree+0x3a>
 800857a:	69eb      	ldr	r3, [r5, #28]
 800857c:	6862      	ldr	r2, [r4, #4]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008584:	6021      	str	r1, [r4, #0]
 8008586:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800858a:	bd70      	pop	{r4, r5, r6, pc}
 800858c:	0800ad76 	.word	0x0800ad76
 8008590:	0800adf6 	.word	0x0800adf6

08008594 <__multadd>:
 8008594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008598:	690d      	ldr	r5, [r1, #16]
 800859a:	4607      	mov	r7, r0
 800859c:	460c      	mov	r4, r1
 800859e:	461e      	mov	r6, r3
 80085a0:	f101 0c14 	add.w	ip, r1, #20
 80085a4:	2000      	movs	r0, #0
 80085a6:	f8dc 3000 	ldr.w	r3, [ip]
 80085aa:	b299      	uxth	r1, r3
 80085ac:	fb02 6101 	mla	r1, r2, r1, r6
 80085b0:	0c1e      	lsrs	r6, r3, #16
 80085b2:	0c0b      	lsrs	r3, r1, #16
 80085b4:	fb02 3306 	mla	r3, r2, r6, r3
 80085b8:	b289      	uxth	r1, r1
 80085ba:	3001      	adds	r0, #1
 80085bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085c0:	4285      	cmp	r5, r0
 80085c2:	f84c 1b04 	str.w	r1, [ip], #4
 80085c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085ca:	dcec      	bgt.n	80085a6 <__multadd+0x12>
 80085cc:	b30e      	cbz	r6, 8008612 <__multadd+0x7e>
 80085ce:	68a3      	ldr	r3, [r4, #8]
 80085d0:	42ab      	cmp	r3, r5
 80085d2:	dc19      	bgt.n	8008608 <__multadd+0x74>
 80085d4:	6861      	ldr	r1, [r4, #4]
 80085d6:	4638      	mov	r0, r7
 80085d8:	3101      	adds	r1, #1
 80085da:	f7ff ff79 	bl	80084d0 <_Balloc>
 80085de:	4680      	mov	r8, r0
 80085e0:	b928      	cbnz	r0, 80085ee <__multadd+0x5a>
 80085e2:	4602      	mov	r2, r0
 80085e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008618 <__multadd+0x84>)
 80085e6:	480d      	ldr	r0, [pc, #52]	@ (800861c <__multadd+0x88>)
 80085e8:	21ba      	movs	r1, #186	@ 0xba
 80085ea:	f001 fcfd 	bl	8009fe8 <__assert_func>
 80085ee:	6922      	ldr	r2, [r4, #16]
 80085f0:	3202      	adds	r2, #2
 80085f2:	f104 010c 	add.w	r1, r4, #12
 80085f6:	0092      	lsls	r2, r2, #2
 80085f8:	300c      	adds	r0, #12
 80085fa:	f001 fcdf 	bl	8009fbc <memcpy>
 80085fe:	4621      	mov	r1, r4
 8008600:	4638      	mov	r0, r7
 8008602:	f7ff ffa5 	bl	8008550 <_Bfree>
 8008606:	4644      	mov	r4, r8
 8008608:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800860c:	3501      	adds	r5, #1
 800860e:	615e      	str	r6, [r3, #20]
 8008610:	6125      	str	r5, [r4, #16]
 8008612:	4620      	mov	r0, r4
 8008614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008618:	0800ade5 	.word	0x0800ade5
 800861c:	0800adf6 	.word	0x0800adf6

08008620 <__s2b>:
 8008620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008624:	460c      	mov	r4, r1
 8008626:	4615      	mov	r5, r2
 8008628:	461f      	mov	r7, r3
 800862a:	2209      	movs	r2, #9
 800862c:	3308      	adds	r3, #8
 800862e:	4606      	mov	r6, r0
 8008630:	fb93 f3f2 	sdiv	r3, r3, r2
 8008634:	2100      	movs	r1, #0
 8008636:	2201      	movs	r2, #1
 8008638:	429a      	cmp	r2, r3
 800863a:	db09      	blt.n	8008650 <__s2b+0x30>
 800863c:	4630      	mov	r0, r6
 800863e:	f7ff ff47 	bl	80084d0 <_Balloc>
 8008642:	b940      	cbnz	r0, 8008656 <__s2b+0x36>
 8008644:	4602      	mov	r2, r0
 8008646:	4b19      	ldr	r3, [pc, #100]	@ (80086ac <__s2b+0x8c>)
 8008648:	4819      	ldr	r0, [pc, #100]	@ (80086b0 <__s2b+0x90>)
 800864a:	21d3      	movs	r1, #211	@ 0xd3
 800864c:	f001 fccc 	bl	8009fe8 <__assert_func>
 8008650:	0052      	lsls	r2, r2, #1
 8008652:	3101      	adds	r1, #1
 8008654:	e7f0      	b.n	8008638 <__s2b+0x18>
 8008656:	9b08      	ldr	r3, [sp, #32]
 8008658:	6143      	str	r3, [r0, #20]
 800865a:	2d09      	cmp	r5, #9
 800865c:	f04f 0301 	mov.w	r3, #1
 8008660:	6103      	str	r3, [r0, #16]
 8008662:	dd16      	ble.n	8008692 <__s2b+0x72>
 8008664:	f104 0909 	add.w	r9, r4, #9
 8008668:	46c8      	mov	r8, r9
 800866a:	442c      	add	r4, r5
 800866c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008670:	4601      	mov	r1, r0
 8008672:	3b30      	subs	r3, #48	@ 0x30
 8008674:	220a      	movs	r2, #10
 8008676:	4630      	mov	r0, r6
 8008678:	f7ff ff8c 	bl	8008594 <__multadd>
 800867c:	45a0      	cmp	r8, r4
 800867e:	d1f5      	bne.n	800866c <__s2b+0x4c>
 8008680:	f1a5 0408 	sub.w	r4, r5, #8
 8008684:	444c      	add	r4, r9
 8008686:	1b2d      	subs	r5, r5, r4
 8008688:	1963      	adds	r3, r4, r5
 800868a:	42bb      	cmp	r3, r7
 800868c:	db04      	blt.n	8008698 <__s2b+0x78>
 800868e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008692:	340a      	adds	r4, #10
 8008694:	2509      	movs	r5, #9
 8008696:	e7f6      	b.n	8008686 <__s2b+0x66>
 8008698:	f814 3b01 	ldrb.w	r3, [r4], #1
 800869c:	4601      	mov	r1, r0
 800869e:	3b30      	subs	r3, #48	@ 0x30
 80086a0:	220a      	movs	r2, #10
 80086a2:	4630      	mov	r0, r6
 80086a4:	f7ff ff76 	bl	8008594 <__multadd>
 80086a8:	e7ee      	b.n	8008688 <__s2b+0x68>
 80086aa:	bf00      	nop
 80086ac:	0800ade5 	.word	0x0800ade5
 80086b0:	0800adf6 	.word	0x0800adf6

080086b4 <__hi0bits>:
 80086b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80086b8:	4603      	mov	r3, r0
 80086ba:	bf36      	itet	cc
 80086bc:	0403      	lslcc	r3, r0, #16
 80086be:	2000      	movcs	r0, #0
 80086c0:	2010      	movcc	r0, #16
 80086c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086c6:	bf3c      	itt	cc
 80086c8:	021b      	lslcc	r3, r3, #8
 80086ca:	3008      	addcc	r0, #8
 80086cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086d0:	bf3c      	itt	cc
 80086d2:	011b      	lslcc	r3, r3, #4
 80086d4:	3004      	addcc	r0, #4
 80086d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086da:	bf3c      	itt	cc
 80086dc:	009b      	lslcc	r3, r3, #2
 80086de:	3002      	addcc	r0, #2
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	db05      	blt.n	80086f0 <__hi0bits+0x3c>
 80086e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80086e8:	f100 0001 	add.w	r0, r0, #1
 80086ec:	bf08      	it	eq
 80086ee:	2020      	moveq	r0, #32
 80086f0:	4770      	bx	lr

080086f2 <__lo0bits>:
 80086f2:	6803      	ldr	r3, [r0, #0]
 80086f4:	4602      	mov	r2, r0
 80086f6:	f013 0007 	ands.w	r0, r3, #7
 80086fa:	d00b      	beq.n	8008714 <__lo0bits+0x22>
 80086fc:	07d9      	lsls	r1, r3, #31
 80086fe:	d421      	bmi.n	8008744 <__lo0bits+0x52>
 8008700:	0798      	lsls	r0, r3, #30
 8008702:	bf49      	itett	mi
 8008704:	085b      	lsrmi	r3, r3, #1
 8008706:	089b      	lsrpl	r3, r3, #2
 8008708:	2001      	movmi	r0, #1
 800870a:	6013      	strmi	r3, [r2, #0]
 800870c:	bf5c      	itt	pl
 800870e:	6013      	strpl	r3, [r2, #0]
 8008710:	2002      	movpl	r0, #2
 8008712:	4770      	bx	lr
 8008714:	b299      	uxth	r1, r3
 8008716:	b909      	cbnz	r1, 800871c <__lo0bits+0x2a>
 8008718:	0c1b      	lsrs	r3, r3, #16
 800871a:	2010      	movs	r0, #16
 800871c:	b2d9      	uxtb	r1, r3
 800871e:	b909      	cbnz	r1, 8008724 <__lo0bits+0x32>
 8008720:	3008      	adds	r0, #8
 8008722:	0a1b      	lsrs	r3, r3, #8
 8008724:	0719      	lsls	r1, r3, #28
 8008726:	bf04      	itt	eq
 8008728:	091b      	lsreq	r3, r3, #4
 800872a:	3004      	addeq	r0, #4
 800872c:	0799      	lsls	r1, r3, #30
 800872e:	bf04      	itt	eq
 8008730:	089b      	lsreq	r3, r3, #2
 8008732:	3002      	addeq	r0, #2
 8008734:	07d9      	lsls	r1, r3, #31
 8008736:	d403      	bmi.n	8008740 <__lo0bits+0x4e>
 8008738:	085b      	lsrs	r3, r3, #1
 800873a:	f100 0001 	add.w	r0, r0, #1
 800873e:	d003      	beq.n	8008748 <__lo0bits+0x56>
 8008740:	6013      	str	r3, [r2, #0]
 8008742:	4770      	bx	lr
 8008744:	2000      	movs	r0, #0
 8008746:	4770      	bx	lr
 8008748:	2020      	movs	r0, #32
 800874a:	4770      	bx	lr

0800874c <__i2b>:
 800874c:	b510      	push	{r4, lr}
 800874e:	460c      	mov	r4, r1
 8008750:	2101      	movs	r1, #1
 8008752:	f7ff febd 	bl	80084d0 <_Balloc>
 8008756:	4602      	mov	r2, r0
 8008758:	b928      	cbnz	r0, 8008766 <__i2b+0x1a>
 800875a:	4b05      	ldr	r3, [pc, #20]	@ (8008770 <__i2b+0x24>)
 800875c:	4805      	ldr	r0, [pc, #20]	@ (8008774 <__i2b+0x28>)
 800875e:	f240 1145 	movw	r1, #325	@ 0x145
 8008762:	f001 fc41 	bl	8009fe8 <__assert_func>
 8008766:	2301      	movs	r3, #1
 8008768:	6144      	str	r4, [r0, #20]
 800876a:	6103      	str	r3, [r0, #16]
 800876c:	bd10      	pop	{r4, pc}
 800876e:	bf00      	nop
 8008770:	0800ade5 	.word	0x0800ade5
 8008774:	0800adf6 	.word	0x0800adf6

08008778 <__multiply>:
 8008778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877c:	4614      	mov	r4, r2
 800877e:	690a      	ldr	r2, [r1, #16]
 8008780:	6923      	ldr	r3, [r4, #16]
 8008782:	429a      	cmp	r2, r3
 8008784:	bfa8      	it	ge
 8008786:	4623      	movge	r3, r4
 8008788:	460f      	mov	r7, r1
 800878a:	bfa4      	itt	ge
 800878c:	460c      	movge	r4, r1
 800878e:	461f      	movge	r7, r3
 8008790:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008794:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008798:	68a3      	ldr	r3, [r4, #8]
 800879a:	6861      	ldr	r1, [r4, #4]
 800879c:	eb0a 0609 	add.w	r6, sl, r9
 80087a0:	42b3      	cmp	r3, r6
 80087a2:	b085      	sub	sp, #20
 80087a4:	bfb8      	it	lt
 80087a6:	3101      	addlt	r1, #1
 80087a8:	f7ff fe92 	bl	80084d0 <_Balloc>
 80087ac:	b930      	cbnz	r0, 80087bc <__multiply+0x44>
 80087ae:	4602      	mov	r2, r0
 80087b0:	4b44      	ldr	r3, [pc, #272]	@ (80088c4 <__multiply+0x14c>)
 80087b2:	4845      	ldr	r0, [pc, #276]	@ (80088c8 <__multiply+0x150>)
 80087b4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80087b8:	f001 fc16 	bl	8009fe8 <__assert_func>
 80087bc:	f100 0514 	add.w	r5, r0, #20
 80087c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087c4:	462b      	mov	r3, r5
 80087c6:	2200      	movs	r2, #0
 80087c8:	4543      	cmp	r3, r8
 80087ca:	d321      	bcc.n	8008810 <__multiply+0x98>
 80087cc:	f107 0114 	add.w	r1, r7, #20
 80087d0:	f104 0214 	add.w	r2, r4, #20
 80087d4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80087d8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80087dc:	9302      	str	r3, [sp, #8]
 80087de:	1b13      	subs	r3, r2, r4
 80087e0:	3b15      	subs	r3, #21
 80087e2:	f023 0303 	bic.w	r3, r3, #3
 80087e6:	3304      	adds	r3, #4
 80087e8:	f104 0715 	add.w	r7, r4, #21
 80087ec:	42ba      	cmp	r2, r7
 80087ee:	bf38      	it	cc
 80087f0:	2304      	movcc	r3, #4
 80087f2:	9301      	str	r3, [sp, #4]
 80087f4:	9b02      	ldr	r3, [sp, #8]
 80087f6:	9103      	str	r1, [sp, #12]
 80087f8:	428b      	cmp	r3, r1
 80087fa:	d80c      	bhi.n	8008816 <__multiply+0x9e>
 80087fc:	2e00      	cmp	r6, #0
 80087fe:	dd03      	ble.n	8008808 <__multiply+0x90>
 8008800:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008804:	2b00      	cmp	r3, #0
 8008806:	d05b      	beq.n	80088c0 <__multiply+0x148>
 8008808:	6106      	str	r6, [r0, #16]
 800880a:	b005      	add	sp, #20
 800880c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008810:	f843 2b04 	str.w	r2, [r3], #4
 8008814:	e7d8      	b.n	80087c8 <__multiply+0x50>
 8008816:	f8b1 a000 	ldrh.w	sl, [r1]
 800881a:	f1ba 0f00 	cmp.w	sl, #0
 800881e:	d024      	beq.n	800886a <__multiply+0xf2>
 8008820:	f104 0e14 	add.w	lr, r4, #20
 8008824:	46a9      	mov	r9, r5
 8008826:	f04f 0c00 	mov.w	ip, #0
 800882a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800882e:	f8d9 3000 	ldr.w	r3, [r9]
 8008832:	fa1f fb87 	uxth.w	fp, r7
 8008836:	b29b      	uxth	r3, r3
 8008838:	fb0a 330b 	mla	r3, sl, fp, r3
 800883c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008840:	f8d9 7000 	ldr.w	r7, [r9]
 8008844:	4463      	add	r3, ip
 8008846:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800884a:	fb0a c70b 	mla	r7, sl, fp, ip
 800884e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008852:	b29b      	uxth	r3, r3
 8008854:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008858:	4572      	cmp	r2, lr
 800885a:	f849 3b04 	str.w	r3, [r9], #4
 800885e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008862:	d8e2      	bhi.n	800882a <__multiply+0xb2>
 8008864:	9b01      	ldr	r3, [sp, #4]
 8008866:	f845 c003 	str.w	ip, [r5, r3]
 800886a:	9b03      	ldr	r3, [sp, #12]
 800886c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008870:	3104      	adds	r1, #4
 8008872:	f1b9 0f00 	cmp.w	r9, #0
 8008876:	d021      	beq.n	80088bc <__multiply+0x144>
 8008878:	682b      	ldr	r3, [r5, #0]
 800887a:	f104 0c14 	add.w	ip, r4, #20
 800887e:	46ae      	mov	lr, r5
 8008880:	f04f 0a00 	mov.w	sl, #0
 8008884:	f8bc b000 	ldrh.w	fp, [ip]
 8008888:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800888c:	fb09 770b 	mla	r7, r9, fp, r7
 8008890:	4457      	add	r7, sl
 8008892:	b29b      	uxth	r3, r3
 8008894:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008898:	f84e 3b04 	str.w	r3, [lr], #4
 800889c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80088a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088a4:	f8be 3000 	ldrh.w	r3, [lr]
 80088a8:	fb09 330a 	mla	r3, r9, sl, r3
 80088ac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80088b0:	4562      	cmp	r2, ip
 80088b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088b6:	d8e5      	bhi.n	8008884 <__multiply+0x10c>
 80088b8:	9f01      	ldr	r7, [sp, #4]
 80088ba:	51eb      	str	r3, [r5, r7]
 80088bc:	3504      	adds	r5, #4
 80088be:	e799      	b.n	80087f4 <__multiply+0x7c>
 80088c0:	3e01      	subs	r6, #1
 80088c2:	e79b      	b.n	80087fc <__multiply+0x84>
 80088c4:	0800ade5 	.word	0x0800ade5
 80088c8:	0800adf6 	.word	0x0800adf6

080088cc <__pow5mult>:
 80088cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d0:	4615      	mov	r5, r2
 80088d2:	f012 0203 	ands.w	r2, r2, #3
 80088d6:	4607      	mov	r7, r0
 80088d8:	460e      	mov	r6, r1
 80088da:	d007      	beq.n	80088ec <__pow5mult+0x20>
 80088dc:	4c25      	ldr	r4, [pc, #148]	@ (8008974 <__pow5mult+0xa8>)
 80088de:	3a01      	subs	r2, #1
 80088e0:	2300      	movs	r3, #0
 80088e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088e6:	f7ff fe55 	bl	8008594 <__multadd>
 80088ea:	4606      	mov	r6, r0
 80088ec:	10ad      	asrs	r5, r5, #2
 80088ee:	d03d      	beq.n	800896c <__pow5mult+0xa0>
 80088f0:	69fc      	ldr	r4, [r7, #28]
 80088f2:	b97c      	cbnz	r4, 8008914 <__pow5mult+0x48>
 80088f4:	2010      	movs	r0, #16
 80088f6:	f7ff fd35 	bl	8008364 <malloc>
 80088fa:	4602      	mov	r2, r0
 80088fc:	61f8      	str	r0, [r7, #28]
 80088fe:	b928      	cbnz	r0, 800890c <__pow5mult+0x40>
 8008900:	4b1d      	ldr	r3, [pc, #116]	@ (8008978 <__pow5mult+0xac>)
 8008902:	481e      	ldr	r0, [pc, #120]	@ (800897c <__pow5mult+0xb0>)
 8008904:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008908:	f001 fb6e 	bl	8009fe8 <__assert_func>
 800890c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008910:	6004      	str	r4, [r0, #0]
 8008912:	60c4      	str	r4, [r0, #12]
 8008914:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008918:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800891c:	b94c      	cbnz	r4, 8008932 <__pow5mult+0x66>
 800891e:	f240 2171 	movw	r1, #625	@ 0x271
 8008922:	4638      	mov	r0, r7
 8008924:	f7ff ff12 	bl	800874c <__i2b>
 8008928:	2300      	movs	r3, #0
 800892a:	f8c8 0008 	str.w	r0, [r8, #8]
 800892e:	4604      	mov	r4, r0
 8008930:	6003      	str	r3, [r0, #0]
 8008932:	f04f 0900 	mov.w	r9, #0
 8008936:	07eb      	lsls	r3, r5, #31
 8008938:	d50a      	bpl.n	8008950 <__pow5mult+0x84>
 800893a:	4631      	mov	r1, r6
 800893c:	4622      	mov	r2, r4
 800893e:	4638      	mov	r0, r7
 8008940:	f7ff ff1a 	bl	8008778 <__multiply>
 8008944:	4631      	mov	r1, r6
 8008946:	4680      	mov	r8, r0
 8008948:	4638      	mov	r0, r7
 800894a:	f7ff fe01 	bl	8008550 <_Bfree>
 800894e:	4646      	mov	r6, r8
 8008950:	106d      	asrs	r5, r5, #1
 8008952:	d00b      	beq.n	800896c <__pow5mult+0xa0>
 8008954:	6820      	ldr	r0, [r4, #0]
 8008956:	b938      	cbnz	r0, 8008968 <__pow5mult+0x9c>
 8008958:	4622      	mov	r2, r4
 800895a:	4621      	mov	r1, r4
 800895c:	4638      	mov	r0, r7
 800895e:	f7ff ff0b 	bl	8008778 <__multiply>
 8008962:	6020      	str	r0, [r4, #0]
 8008964:	f8c0 9000 	str.w	r9, [r0]
 8008968:	4604      	mov	r4, r0
 800896a:	e7e4      	b.n	8008936 <__pow5mult+0x6a>
 800896c:	4630      	mov	r0, r6
 800896e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008972:	bf00      	nop
 8008974:	0800ae50 	.word	0x0800ae50
 8008978:	0800ad76 	.word	0x0800ad76
 800897c:	0800adf6 	.word	0x0800adf6

08008980 <__lshift>:
 8008980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008984:	460c      	mov	r4, r1
 8008986:	6849      	ldr	r1, [r1, #4]
 8008988:	6923      	ldr	r3, [r4, #16]
 800898a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800898e:	68a3      	ldr	r3, [r4, #8]
 8008990:	4607      	mov	r7, r0
 8008992:	4691      	mov	r9, r2
 8008994:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008998:	f108 0601 	add.w	r6, r8, #1
 800899c:	42b3      	cmp	r3, r6
 800899e:	db0b      	blt.n	80089b8 <__lshift+0x38>
 80089a0:	4638      	mov	r0, r7
 80089a2:	f7ff fd95 	bl	80084d0 <_Balloc>
 80089a6:	4605      	mov	r5, r0
 80089a8:	b948      	cbnz	r0, 80089be <__lshift+0x3e>
 80089aa:	4602      	mov	r2, r0
 80089ac:	4b28      	ldr	r3, [pc, #160]	@ (8008a50 <__lshift+0xd0>)
 80089ae:	4829      	ldr	r0, [pc, #164]	@ (8008a54 <__lshift+0xd4>)
 80089b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80089b4:	f001 fb18 	bl	8009fe8 <__assert_func>
 80089b8:	3101      	adds	r1, #1
 80089ba:	005b      	lsls	r3, r3, #1
 80089bc:	e7ee      	b.n	800899c <__lshift+0x1c>
 80089be:	2300      	movs	r3, #0
 80089c0:	f100 0114 	add.w	r1, r0, #20
 80089c4:	f100 0210 	add.w	r2, r0, #16
 80089c8:	4618      	mov	r0, r3
 80089ca:	4553      	cmp	r3, sl
 80089cc:	db33      	blt.n	8008a36 <__lshift+0xb6>
 80089ce:	6920      	ldr	r0, [r4, #16]
 80089d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089d4:	f104 0314 	add.w	r3, r4, #20
 80089d8:	f019 091f 	ands.w	r9, r9, #31
 80089dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089e4:	d02b      	beq.n	8008a3e <__lshift+0xbe>
 80089e6:	f1c9 0e20 	rsb	lr, r9, #32
 80089ea:	468a      	mov	sl, r1
 80089ec:	2200      	movs	r2, #0
 80089ee:	6818      	ldr	r0, [r3, #0]
 80089f0:	fa00 f009 	lsl.w	r0, r0, r9
 80089f4:	4310      	orrs	r0, r2
 80089f6:	f84a 0b04 	str.w	r0, [sl], #4
 80089fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80089fe:	459c      	cmp	ip, r3
 8008a00:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a04:	d8f3      	bhi.n	80089ee <__lshift+0x6e>
 8008a06:	ebac 0304 	sub.w	r3, ip, r4
 8008a0a:	3b15      	subs	r3, #21
 8008a0c:	f023 0303 	bic.w	r3, r3, #3
 8008a10:	3304      	adds	r3, #4
 8008a12:	f104 0015 	add.w	r0, r4, #21
 8008a16:	4584      	cmp	ip, r0
 8008a18:	bf38      	it	cc
 8008a1a:	2304      	movcc	r3, #4
 8008a1c:	50ca      	str	r2, [r1, r3]
 8008a1e:	b10a      	cbz	r2, 8008a24 <__lshift+0xa4>
 8008a20:	f108 0602 	add.w	r6, r8, #2
 8008a24:	3e01      	subs	r6, #1
 8008a26:	4638      	mov	r0, r7
 8008a28:	612e      	str	r6, [r5, #16]
 8008a2a:	4621      	mov	r1, r4
 8008a2c:	f7ff fd90 	bl	8008550 <_Bfree>
 8008a30:	4628      	mov	r0, r5
 8008a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a36:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	e7c5      	b.n	80089ca <__lshift+0x4a>
 8008a3e:	3904      	subs	r1, #4
 8008a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a44:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a48:	459c      	cmp	ip, r3
 8008a4a:	d8f9      	bhi.n	8008a40 <__lshift+0xc0>
 8008a4c:	e7ea      	b.n	8008a24 <__lshift+0xa4>
 8008a4e:	bf00      	nop
 8008a50:	0800ade5 	.word	0x0800ade5
 8008a54:	0800adf6 	.word	0x0800adf6

08008a58 <__mcmp>:
 8008a58:	690a      	ldr	r2, [r1, #16]
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	6900      	ldr	r0, [r0, #16]
 8008a5e:	1a80      	subs	r0, r0, r2
 8008a60:	b530      	push	{r4, r5, lr}
 8008a62:	d10e      	bne.n	8008a82 <__mcmp+0x2a>
 8008a64:	3314      	adds	r3, #20
 8008a66:	3114      	adds	r1, #20
 8008a68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a78:	4295      	cmp	r5, r2
 8008a7a:	d003      	beq.n	8008a84 <__mcmp+0x2c>
 8008a7c:	d205      	bcs.n	8008a8a <__mcmp+0x32>
 8008a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a82:	bd30      	pop	{r4, r5, pc}
 8008a84:	42a3      	cmp	r3, r4
 8008a86:	d3f3      	bcc.n	8008a70 <__mcmp+0x18>
 8008a88:	e7fb      	b.n	8008a82 <__mcmp+0x2a>
 8008a8a:	2001      	movs	r0, #1
 8008a8c:	e7f9      	b.n	8008a82 <__mcmp+0x2a>
	...

08008a90 <__mdiff>:
 8008a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	4689      	mov	r9, r1
 8008a96:	4606      	mov	r6, r0
 8008a98:	4611      	mov	r1, r2
 8008a9a:	4648      	mov	r0, r9
 8008a9c:	4614      	mov	r4, r2
 8008a9e:	f7ff ffdb 	bl	8008a58 <__mcmp>
 8008aa2:	1e05      	subs	r5, r0, #0
 8008aa4:	d112      	bne.n	8008acc <__mdiff+0x3c>
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f7ff fd11 	bl	80084d0 <_Balloc>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	b928      	cbnz	r0, 8008abe <__mdiff+0x2e>
 8008ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8008bb0 <__mdiff+0x120>)
 8008ab4:	f240 2137 	movw	r1, #567	@ 0x237
 8008ab8:	483e      	ldr	r0, [pc, #248]	@ (8008bb4 <__mdiff+0x124>)
 8008aba:	f001 fa95 	bl	8009fe8 <__assert_func>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	b003      	add	sp, #12
 8008ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008acc:	bfbc      	itt	lt
 8008ace:	464b      	movlt	r3, r9
 8008ad0:	46a1      	movlt	r9, r4
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ad8:	bfba      	itte	lt
 8008ada:	461c      	movlt	r4, r3
 8008adc:	2501      	movlt	r5, #1
 8008ade:	2500      	movge	r5, #0
 8008ae0:	f7ff fcf6 	bl	80084d0 <_Balloc>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	b918      	cbnz	r0, 8008af0 <__mdiff+0x60>
 8008ae8:	4b31      	ldr	r3, [pc, #196]	@ (8008bb0 <__mdiff+0x120>)
 8008aea:	f240 2145 	movw	r1, #581	@ 0x245
 8008aee:	e7e3      	b.n	8008ab8 <__mdiff+0x28>
 8008af0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008af4:	6926      	ldr	r6, [r4, #16]
 8008af6:	60c5      	str	r5, [r0, #12]
 8008af8:	f109 0310 	add.w	r3, r9, #16
 8008afc:	f109 0514 	add.w	r5, r9, #20
 8008b00:	f104 0e14 	add.w	lr, r4, #20
 8008b04:	f100 0b14 	add.w	fp, r0, #20
 8008b08:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b0c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b10:	9301      	str	r3, [sp, #4]
 8008b12:	46d9      	mov	r9, fp
 8008b14:	f04f 0c00 	mov.w	ip, #0
 8008b18:	9b01      	ldr	r3, [sp, #4]
 8008b1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b22:	9301      	str	r3, [sp, #4]
 8008b24:	fa1f f38a 	uxth.w	r3, sl
 8008b28:	4619      	mov	r1, r3
 8008b2a:	b283      	uxth	r3, r0
 8008b2c:	1acb      	subs	r3, r1, r3
 8008b2e:	0c00      	lsrs	r0, r0, #16
 8008b30:	4463      	add	r3, ip
 8008b32:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b36:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b40:	4576      	cmp	r6, lr
 8008b42:	f849 3b04 	str.w	r3, [r9], #4
 8008b46:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b4a:	d8e5      	bhi.n	8008b18 <__mdiff+0x88>
 8008b4c:	1b33      	subs	r3, r6, r4
 8008b4e:	3b15      	subs	r3, #21
 8008b50:	f023 0303 	bic.w	r3, r3, #3
 8008b54:	3415      	adds	r4, #21
 8008b56:	3304      	adds	r3, #4
 8008b58:	42a6      	cmp	r6, r4
 8008b5a:	bf38      	it	cc
 8008b5c:	2304      	movcc	r3, #4
 8008b5e:	441d      	add	r5, r3
 8008b60:	445b      	add	r3, fp
 8008b62:	461e      	mov	r6, r3
 8008b64:	462c      	mov	r4, r5
 8008b66:	4544      	cmp	r4, r8
 8008b68:	d30e      	bcc.n	8008b88 <__mdiff+0xf8>
 8008b6a:	f108 0103 	add.w	r1, r8, #3
 8008b6e:	1b49      	subs	r1, r1, r5
 8008b70:	f021 0103 	bic.w	r1, r1, #3
 8008b74:	3d03      	subs	r5, #3
 8008b76:	45a8      	cmp	r8, r5
 8008b78:	bf38      	it	cc
 8008b7a:	2100      	movcc	r1, #0
 8008b7c:	440b      	add	r3, r1
 8008b7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b82:	b191      	cbz	r1, 8008baa <__mdiff+0x11a>
 8008b84:	6117      	str	r7, [r2, #16]
 8008b86:	e79d      	b.n	8008ac4 <__mdiff+0x34>
 8008b88:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b8c:	46e6      	mov	lr, ip
 8008b8e:	0c08      	lsrs	r0, r1, #16
 8008b90:	fa1c fc81 	uxtah	ip, ip, r1
 8008b94:	4471      	add	r1, lr
 8008b96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b9a:	b289      	uxth	r1, r1
 8008b9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ba0:	f846 1b04 	str.w	r1, [r6], #4
 8008ba4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ba8:	e7dd      	b.n	8008b66 <__mdiff+0xd6>
 8008baa:	3f01      	subs	r7, #1
 8008bac:	e7e7      	b.n	8008b7e <__mdiff+0xee>
 8008bae:	bf00      	nop
 8008bb0:	0800ade5 	.word	0x0800ade5
 8008bb4:	0800adf6 	.word	0x0800adf6

08008bb8 <__ulp>:
 8008bb8:	b082      	sub	sp, #8
 8008bba:	ed8d 0b00 	vstr	d0, [sp]
 8008bbe:	9a01      	ldr	r2, [sp, #4]
 8008bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8008c00 <__ulp+0x48>)
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	dc08      	bgt.n	8008bde <__ulp+0x26>
 8008bcc:	425b      	negs	r3, r3
 8008bce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008bd2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008bd6:	da04      	bge.n	8008be2 <__ulp+0x2a>
 8008bd8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008bdc:	4113      	asrs	r3, r2
 8008bde:	2200      	movs	r2, #0
 8008be0:	e008      	b.n	8008bf4 <__ulp+0x3c>
 8008be2:	f1a2 0314 	sub.w	r3, r2, #20
 8008be6:	2b1e      	cmp	r3, #30
 8008be8:	bfda      	itte	le
 8008bea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008bee:	40da      	lsrle	r2, r3
 8008bf0:	2201      	movgt	r2, #1
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	ec41 0b10 	vmov	d0, r0, r1
 8008bfc:	b002      	add	sp, #8
 8008bfe:	4770      	bx	lr
 8008c00:	7ff00000 	.word	0x7ff00000

08008c04 <__b2d>:
 8008c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c08:	6906      	ldr	r6, [r0, #16]
 8008c0a:	f100 0814 	add.w	r8, r0, #20
 8008c0e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008c12:	1f37      	subs	r7, r6, #4
 8008c14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008c18:	4610      	mov	r0, r2
 8008c1a:	f7ff fd4b 	bl	80086b4 <__hi0bits>
 8008c1e:	f1c0 0320 	rsb	r3, r0, #32
 8008c22:	280a      	cmp	r0, #10
 8008c24:	600b      	str	r3, [r1, #0]
 8008c26:	491b      	ldr	r1, [pc, #108]	@ (8008c94 <__b2d+0x90>)
 8008c28:	dc15      	bgt.n	8008c56 <__b2d+0x52>
 8008c2a:	f1c0 0c0b 	rsb	ip, r0, #11
 8008c2e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008c32:	45b8      	cmp	r8, r7
 8008c34:	ea43 0501 	orr.w	r5, r3, r1
 8008c38:	bf34      	ite	cc
 8008c3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008c3e:	2300      	movcs	r3, #0
 8008c40:	3015      	adds	r0, #21
 8008c42:	fa02 f000 	lsl.w	r0, r2, r0
 8008c46:	fa23 f30c 	lsr.w	r3, r3, ip
 8008c4a:	4303      	orrs	r3, r0
 8008c4c:	461c      	mov	r4, r3
 8008c4e:	ec45 4b10 	vmov	d0, r4, r5
 8008c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c56:	45b8      	cmp	r8, r7
 8008c58:	bf3a      	itte	cc
 8008c5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008c5e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008c62:	2300      	movcs	r3, #0
 8008c64:	380b      	subs	r0, #11
 8008c66:	d012      	beq.n	8008c8e <__b2d+0x8a>
 8008c68:	f1c0 0120 	rsb	r1, r0, #32
 8008c6c:	fa23 f401 	lsr.w	r4, r3, r1
 8008c70:	4082      	lsls	r2, r0
 8008c72:	4322      	orrs	r2, r4
 8008c74:	4547      	cmp	r7, r8
 8008c76:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008c7a:	bf8c      	ite	hi
 8008c7c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008c80:	2200      	movls	r2, #0
 8008c82:	4083      	lsls	r3, r0
 8008c84:	40ca      	lsrs	r2, r1
 8008c86:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	e7de      	b.n	8008c4c <__b2d+0x48>
 8008c8e:	ea42 0501 	orr.w	r5, r2, r1
 8008c92:	e7db      	b.n	8008c4c <__b2d+0x48>
 8008c94:	3ff00000 	.word	0x3ff00000

08008c98 <__d2b>:
 8008c98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c9c:	460f      	mov	r7, r1
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	ec59 8b10 	vmov	r8, r9, d0
 8008ca4:	4616      	mov	r6, r2
 8008ca6:	f7ff fc13 	bl	80084d0 <_Balloc>
 8008caa:	4604      	mov	r4, r0
 8008cac:	b930      	cbnz	r0, 8008cbc <__d2b+0x24>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	4b23      	ldr	r3, [pc, #140]	@ (8008d40 <__d2b+0xa8>)
 8008cb2:	4824      	ldr	r0, [pc, #144]	@ (8008d44 <__d2b+0xac>)
 8008cb4:	f240 310f 	movw	r1, #783	@ 0x30f
 8008cb8:	f001 f996 	bl	8009fe8 <__assert_func>
 8008cbc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008cc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cc4:	b10d      	cbz	r5, 8008cca <__d2b+0x32>
 8008cc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008cca:	9301      	str	r3, [sp, #4]
 8008ccc:	f1b8 0300 	subs.w	r3, r8, #0
 8008cd0:	d023      	beq.n	8008d1a <__d2b+0x82>
 8008cd2:	4668      	mov	r0, sp
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	f7ff fd0c 	bl	80086f2 <__lo0bits>
 8008cda:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008cde:	b1d0      	cbz	r0, 8008d16 <__d2b+0x7e>
 8008ce0:	f1c0 0320 	rsb	r3, r0, #32
 8008ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce8:	430b      	orrs	r3, r1
 8008cea:	40c2      	lsrs	r2, r0
 8008cec:	6163      	str	r3, [r4, #20]
 8008cee:	9201      	str	r2, [sp, #4]
 8008cf0:	9b01      	ldr	r3, [sp, #4]
 8008cf2:	61a3      	str	r3, [r4, #24]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	bf0c      	ite	eq
 8008cf8:	2201      	moveq	r2, #1
 8008cfa:	2202      	movne	r2, #2
 8008cfc:	6122      	str	r2, [r4, #16]
 8008cfe:	b1a5      	cbz	r5, 8008d2a <__d2b+0x92>
 8008d00:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008d04:	4405      	add	r5, r0
 8008d06:	603d      	str	r5, [r7, #0]
 8008d08:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008d0c:	6030      	str	r0, [r6, #0]
 8008d0e:	4620      	mov	r0, r4
 8008d10:	b003      	add	sp, #12
 8008d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d16:	6161      	str	r1, [r4, #20]
 8008d18:	e7ea      	b.n	8008cf0 <__d2b+0x58>
 8008d1a:	a801      	add	r0, sp, #4
 8008d1c:	f7ff fce9 	bl	80086f2 <__lo0bits>
 8008d20:	9b01      	ldr	r3, [sp, #4]
 8008d22:	6163      	str	r3, [r4, #20]
 8008d24:	3020      	adds	r0, #32
 8008d26:	2201      	movs	r2, #1
 8008d28:	e7e8      	b.n	8008cfc <__d2b+0x64>
 8008d2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008d32:	6038      	str	r0, [r7, #0]
 8008d34:	6918      	ldr	r0, [r3, #16]
 8008d36:	f7ff fcbd 	bl	80086b4 <__hi0bits>
 8008d3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d3e:	e7e5      	b.n	8008d0c <__d2b+0x74>
 8008d40:	0800ade5 	.word	0x0800ade5
 8008d44:	0800adf6 	.word	0x0800adf6

08008d48 <__ratio>:
 8008d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4c:	b085      	sub	sp, #20
 8008d4e:	e9cd 1000 	strd	r1, r0, [sp]
 8008d52:	a902      	add	r1, sp, #8
 8008d54:	f7ff ff56 	bl	8008c04 <__b2d>
 8008d58:	9800      	ldr	r0, [sp, #0]
 8008d5a:	a903      	add	r1, sp, #12
 8008d5c:	ec55 4b10 	vmov	r4, r5, d0
 8008d60:	f7ff ff50 	bl	8008c04 <__b2d>
 8008d64:	9b01      	ldr	r3, [sp, #4]
 8008d66:	6919      	ldr	r1, [r3, #16]
 8008d68:	9b00      	ldr	r3, [sp, #0]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	1ac9      	subs	r1, r1, r3
 8008d6e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008d72:	1a9b      	subs	r3, r3, r2
 8008d74:	ec5b ab10 	vmov	sl, fp, d0
 8008d78:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	bfce      	itee	gt
 8008d80:	462a      	movgt	r2, r5
 8008d82:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d86:	465a      	movle	r2, fp
 8008d88:	462f      	mov	r7, r5
 8008d8a:	46d9      	mov	r9, fp
 8008d8c:	bfcc      	ite	gt
 8008d8e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008d92:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008d96:	464b      	mov	r3, r9
 8008d98:	4652      	mov	r2, sl
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	4639      	mov	r1, r7
 8008d9e:	f7f7 fd7d 	bl	800089c <__aeabi_ddiv>
 8008da2:	ec41 0b10 	vmov	d0, r0, r1
 8008da6:	b005      	add	sp, #20
 8008da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008dac <__copybits>:
 8008dac:	3901      	subs	r1, #1
 8008dae:	b570      	push	{r4, r5, r6, lr}
 8008db0:	1149      	asrs	r1, r1, #5
 8008db2:	6914      	ldr	r4, [r2, #16]
 8008db4:	3101      	adds	r1, #1
 8008db6:	f102 0314 	add.w	r3, r2, #20
 8008dba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008dbe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008dc2:	1f05      	subs	r5, r0, #4
 8008dc4:	42a3      	cmp	r3, r4
 8008dc6:	d30c      	bcc.n	8008de2 <__copybits+0x36>
 8008dc8:	1aa3      	subs	r3, r4, r2
 8008dca:	3b11      	subs	r3, #17
 8008dcc:	f023 0303 	bic.w	r3, r3, #3
 8008dd0:	3211      	adds	r2, #17
 8008dd2:	42a2      	cmp	r2, r4
 8008dd4:	bf88      	it	hi
 8008dd6:	2300      	movhi	r3, #0
 8008dd8:	4418      	add	r0, r3
 8008dda:	2300      	movs	r3, #0
 8008ddc:	4288      	cmp	r0, r1
 8008dde:	d305      	bcc.n	8008dec <__copybits+0x40>
 8008de0:	bd70      	pop	{r4, r5, r6, pc}
 8008de2:	f853 6b04 	ldr.w	r6, [r3], #4
 8008de6:	f845 6f04 	str.w	r6, [r5, #4]!
 8008dea:	e7eb      	b.n	8008dc4 <__copybits+0x18>
 8008dec:	f840 3b04 	str.w	r3, [r0], #4
 8008df0:	e7f4      	b.n	8008ddc <__copybits+0x30>

08008df2 <__any_on>:
 8008df2:	f100 0214 	add.w	r2, r0, #20
 8008df6:	6900      	ldr	r0, [r0, #16]
 8008df8:	114b      	asrs	r3, r1, #5
 8008dfa:	4298      	cmp	r0, r3
 8008dfc:	b510      	push	{r4, lr}
 8008dfe:	db11      	blt.n	8008e24 <__any_on+0x32>
 8008e00:	dd0a      	ble.n	8008e18 <__any_on+0x26>
 8008e02:	f011 011f 	ands.w	r1, r1, #31
 8008e06:	d007      	beq.n	8008e18 <__any_on+0x26>
 8008e08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008e0c:	fa24 f001 	lsr.w	r0, r4, r1
 8008e10:	fa00 f101 	lsl.w	r1, r0, r1
 8008e14:	428c      	cmp	r4, r1
 8008e16:	d10b      	bne.n	8008e30 <__any_on+0x3e>
 8008e18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d803      	bhi.n	8008e28 <__any_on+0x36>
 8008e20:	2000      	movs	r0, #0
 8008e22:	bd10      	pop	{r4, pc}
 8008e24:	4603      	mov	r3, r0
 8008e26:	e7f7      	b.n	8008e18 <__any_on+0x26>
 8008e28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e2c:	2900      	cmp	r1, #0
 8008e2e:	d0f5      	beq.n	8008e1c <__any_on+0x2a>
 8008e30:	2001      	movs	r0, #1
 8008e32:	e7f6      	b.n	8008e22 <__any_on+0x30>

08008e34 <sulp>:
 8008e34:	b570      	push	{r4, r5, r6, lr}
 8008e36:	4604      	mov	r4, r0
 8008e38:	460d      	mov	r5, r1
 8008e3a:	ec45 4b10 	vmov	d0, r4, r5
 8008e3e:	4616      	mov	r6, r2
 8008e40:	f7ff feba 	bl	8008bb8 <__ulp>
 8008e44:	ec51 0b10 	vmov	r0, r1, d0
 8008e48:	b17e      	cbz	r6, 8008e6a <sulp+0x36>
 8008e4a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008e4e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	dd09      	ble.n	8008e6a <sulp+0x36>
 8008e56:	051b      	lsls	r3, r3, #20
 8008e58:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008e5c:	2400      	movs	r4, #0
 8008e5e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008e62:	4622      	mov	r2, r4
 8008e64:	462b      	mov	r3, r5
 8008e66:	f7f7 fbef 	bl	8000648 <__aeabi_dmul>
 8008e6a:	ec41 0b10 	vmov	d0, r0, r1
 8008e6e:	bd70      	pop	{r4, r5, r6, pc}

08008e70 <_strtod_l>:
 8008e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e74:	b09f      	sub	sp, #124	@ 0x7c
 8008e76:	460c      	mov	r4, r1
 8008e78:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008e7e:	9005      	str	r0, [sp, #20]
 8008e80:	f04f 0a00 	mov.w	sl, #0
 8008e84:	f04f 0b00 	mov.w	fp, #0
 8008e88:	460a      	mov	r2, r1
 8008e8a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e8c:	7811      	ldrb	r1, [r2, #0]
 8008e8e:	292b      	cmp	r1, #43	@ 0x2b
 8008e90:	d04a      	beq.n	8008f28 <_strtod_l+0xb8>
 8008e92:	d838      	bhi.n	8008f06 <_strtod_l+0x96>
 8008e94:	290d      	cmp	r1, #13
 8008e96:	d832      	bhi.n	8008efe <_strtod_l+0x8e>
 8008e98:	2908      	cmp	r1, #8
 8008e9a:	d832      	bhi.n	8008f02 <_strtod_l+0x92>
 8008e9c:	2900      	cmp	r1, #0
 8008e9e:	d03b      	beq.n	8008f18 <_strtod_l+0xa8>
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008ea4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008ea6:	782a      	ldrb	r2, [r5, #0]
 8008ea8:	2a30      	cmp	r2, #48	@ 0x30
 8008eaa:	f040 80b3 	bne.w	8009014 <_strtod_l+0x1a4>
 8008eae:	786a      	ldrb	r2, [r5, #1]
 8008eb0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008eb4:	2a58      	cmp	r2, #88	@ 0x58
 8008eb6:	d16e      	bne.n	8008f96 <_strtod_l+0x126>
 8008eb8:	9302      	str	r3, [sp, #8]
 8008eba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	ab1a      	add	r3, sp, #104	@ 0x68
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	4a8e      	ldr	r2, [pc, #568]	@ (80090fc <_strtod_l+0x28c>)
 8008ec4:	9805      	ldr	r0, [sp, #20]
 8008ec6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008ec8:	a919      	add	r1, sp, #100	@ 0x64
 8008eca:	f001 f927 	bl	800a11c <__gethex>
 8008ece:	f010 060f 	ands.w	r6, r0, #15
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	d005      	beq.n	8008ee2 <_strtod_l+0x72>
 8008ed6:	2e06      	cmp	r6, #6
 8008ed8:	d128      	bne.n	8008f2c <_strtod_l+0xbc>
 8008eda:	3501      	adds	r5, #1
 8008edc:	2300      	movs	r3, #0
 8008ede:	9519      	str	r5, [sp, #100]	@ 0x64
 8008ee0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ee2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f040 858e 	bne.w	8009a06 <_strtod_l+0xb96>
 8008eea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008eec:	b1cb      	cbz	r3, 8008f22 <_strtod_l+0xb2>
 8008eee:	4652      	mov	r2, sl
 8008ef0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008ef4:	ec43 2b10 	vmov	d0, r2, r3
 8008ef8:	b01f      	add	sp, #124	@ 0x7c
 8008efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efe:	2920      	cmp	r1, #32
 8008f00:	d1ce      	bne.n	8008ea0 <_strtod_l+0x30>
 8008f02:	3201      	adds	r2, #1
 8008f04:	e7c1      	b.n	8008e8a <_strtod_l+0x1a>
 8008f06:	292d      	cmp	r1, #45	@ 0x2d
 8008f08:	d1ca      	bne.n	8008ea0 <_strtod_l+0x30>
 8008f0a:	2101      	movs	r1, #1
 8008f0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008f0e:	1c51      	adds	r1, r2, #1
 8008f10:	9119      	str	r1, [sp, #100]	@ 0x64
 8008f12:	7852      	ldrb	r2, [r2, #1]
 8008f14:	2a00      	cmp	r2, #0
 8008f16:	d1c5      	bne.n	8008ea4 <_strtod_l+0x34>
 8008f18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f1a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f040 8570 	bne.w	8009a02 <_strtod_l+0xb92>
 8008f22:	4652      	mov	r2, sl
 8008f24:	465b      	mov	r3, fp
 8008f26:	e7e5      	b.n	8008ef4 <_strtod_l+0x84>
 8008f28:	2100      	movs	r1, #0
 8008f2a:	e7ef      	b.n	8008f0c <_strtod_l+0x9c>
 8008f2c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008f2e:	b13a      	cbz	r2, 8008f40 <_strtod_l+0xd0>
 8008f30:	2135      	movs	r1, #53	@ 0x35
 8008f32:	a81c      	add	r0, sp, #112	@ 0x70
 8008f34:	f7ff ff3a 	bl	8008dac <__copybits>
 8008f38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f3a:	9805      	ldr	r0, [sp, #20]
 8008f3c:	f7ff fb08 	bl	8008550 <_Bfree>
 8008f40:	3e01      	subs	r6, #1
 8008f42:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008f44:	2e04      	cmp	r6, #4
 8008f46:	d806      	bhi.n	8008f56 <_strtod_l+0xe6>
 8008f48:	e8df f006 	tbb	[pc, r6]
 8008f4c:	201d0314 	.word	0x201d0314
 8008f50:	14          	.byte	0x14
 8008f51:	00          	.byte	0x00
 8008f52:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008f56:	05e1      	lsls	r1, r4, #23
 8008f58:	bf48      	it	mi
 8008f5a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008f5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f62:	0d1b      	lsrs	r3, r3, #20
 8008f64:	051b      	lsls	r3, r3, #20
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1bb      	bne.n	8008ee2 <_strtod_l+0x72>
 8008f6a:	f7fe fb31 	bl	80075d0 <__errno>
 8008f6e:	2322      	movs	r3, #34	@ 0x22
 8008f70:	6003      	str	r3, [r0, #0]
 8008f72:	e7b6      	b.n	8008ee2 <_strtod_l+0x72>
 8008f74:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008f78:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008f7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008f80:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008f84:	e7e7      	b.n	8008f56 <_strtod_l+0xe6>
 8008f86:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009104 <_strtod_l+0x294>
 8008f8a:	e7e4      	b.n	8008f56 <_strtod_l+0xe6>
 8008f8c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008f90:	f04f 3aff 	mov.w	sl, #4294967295
 8008f94:	e7df      	b.n	8008f56 <_strtod_l+0xe6>
 8008f96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f9c:	785b      	ldrb	r3, [r3, #1]
 8008f9e:	2b30      	cmp	r3, #48	@ 0x30
 8008fa0:	d0f9      	beq.n	8008f96 <_strtod_l+0x126>
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d09d      	beq.n	8008ee2 <_strtod_l+0x72>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008faa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fac:	930c      	str	r3, [sp, #48]	@ 0x30
 8008fae:	2300      	movs	r3, #0
 8008fb0:	9308      	str	r3, [sp, #32]
 8008fb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fb4:	461f      	mov	r7, r3
 8008fb6:	220a      	movs	r2, #10
 8008fb8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008fba:	7805      	ldrb	r5, [r0, #0]
 8008fbc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008fc0:	b2d9      	uxtb	r1, r3
 8008fc2:	2909      	cmp	r1, #9
 8008fc4:	d928      	bls.n	8009018 <_strtod_l+0x1a8>
 8008fc6:	494e      	ldr	r1, [pc, #312]	@ (8009100 <_strtod_l+0x290>)
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f000 ffd5 	bl	8009f78 <strncmp>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	d032      	beq.n	8009038 <_strtod_l+0x1c8>
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	462a      	mov	r2, r5
 8008fd6:	4681      	mov	r9, r0
 8008fd8:	463d      	mov	r5, r7
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2a65      	cmp	r2, #101	@ 0x65
 8008fde:	d001      	beq.n	8008fe4 <_strtod_l+0x174>
 8008fe0:	2a45      	cmp	r2, #69	@ 0x45
 8008fe2:	d114      	bne.n	800900e <_strtod_l+0x19e>
 8008fe4:	b91d      	cbnz	r5, 8008fee <_strtod_l+0x17e>
 8008fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fe8:	4302      	orrs	r2, r0
 8008fea:	d095      	beq.n	8008f18 <_strtod_l+0xa8>
 8008fec:	2500      	movs	r5, #0
 8008fee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008ff0:	1c62      	adds	r2, r4, #1
 8008ff2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ff4:	7862      	ldrb	r2, [r4, #1]
 8008ff6:	2a2b      	cmp	r2, #43	@ 0x2b
 8008ff8:	d077      	beq.n	80090ea <_strtod_l+0x27a>
 8008ffa:	2a2d      	cmp	r2, #45	@ 0x2d
 8008ffc:	d07b      	beq.n	80090f6 <_strtod_l+0x286>
 8008ffe:	f04f 0c00 	mov.w	ip, #0
 8009002:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009006:	2909      	cmp	r1, #9
 8009008:	f240 8082 	bls.w	8009110 <_strtod_l+0x2a0>
 800900c:	9419      	str	r4, [sp, #100]	@ 0x64
 800900e:	f04f 0800 	mov.w	r8, #0
 8009012:	e0a2      	b.n	800915a <_strtod_l+0x2ea>
 8009014:	2300      	movs	r3, #0
 8009016:	e7c7      	b.n	8008fa8 <_strtod_l+0x138>
 8009018:	2f08      	cmp	r7, #8
 800901a:	bfd5      	itete	le
 800901c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800901e:	9908      	ldrgt	r1, [sp, #32]
 8009020:	fb02 3301 	mlale	r3, r2, r1, r3
 8009024:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009028:	f100 0001 	add.w	r0, r0, #1
 800902c:	bfd4      	ite	le
 800902e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009030:	9308      	strgt	r3, [sp, #32]
 8009032:	3701      	adds	r7, #1
 8009034:	9019      	str	r0, [sp, #100]	@ 0x64
 8009036:	e7bf      	b.n	8008fb8 <_strtod_l+0x148>
 8009038:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800903a:	1c5a      	adds	r2, r3, #1
 800903c:	9219      	str	r2, [sp, #100]	@ 0x64
 800903e:	785a      	ldrb	r2, [r3, #1]
 8009040:	b37f      	cbz	r7, 80090a2 <_strtod_l+0x232>
 8009042:	4681      	mov	r9, r0
 8009044:	463d      	mov	r5, r7
 8009046:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800904a:	2b09      	cmp	r3, #9
 800904c:	d912      	bls.n	8009074 <_strtod_l+0x204>
 800904e:	2301      	movs	r3, #1
 8009050:	e7c4      	b.n	8008fdc <_strtod_l+0x16c>
 8009052:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009054:	1c5a      	adds	r2, r3, #1
 8009056:	9219      	str	r2, [sp, #100]	@ 0x64
 8009058:	785a      	ldrb	r2, [r3, #1]
 800905a:	3001      	adds	r0, #1
 800905c:	2a30      	cmp	r2, #48	@ 0x30
 800905e:	d0f8      	beq.n	8009052 <_strtod_l+0x1e2>
 8009060:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009064:	2b08      	cmp	r3, #8
 8009066:	f200 84d3 	bhi.w	8009a10 <_strtod_l+0xba0>
 800906a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800906c:	930c      	str	r3, [sp, #48]	@ 0x30
 800906e:	4681      	mov	r9, r0
 8009070:	2000      	movs	r0, #0
 8009072:	4605      	mov	r5, r0
 8009074:	3a30      	subs	r2, #48	@ 0x30
 8009076:	f100 0301 	add.w	r3, r0, #1
 800907a:	d02a      	beq.n	80090d2 <_strtod_l+0x262>
 800907c:	4499      	add	r9, r3
 800907e:	eb00 0c05 	add.w	ip, r0, r5
 8009082:	462b      	mov	r3, r5
 8009084:	210a      	movs	r1, #10
 8009086:	4563      	cmp	r3, ip
 8009088:	d10d      	bne.n	80090a6 <_strtod_l+0x236>
 800908a:	1c69      	adds	r1, r5, #1
 800908c:	4401      	add	r1, r0
 800908e:	4428      	add	r0, r5
 8009090:	2808      	cmp	r0, #8
 8009092:	dc16      	bgt.n	80090c2 <_strtod_l+0x252>
 8009094:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009096:	230a      	movs	r3, #10
 8009098:	fb03 2300 	mla	r3, r3, r0, r2
 800909c:	930a      	str	r3, [sp, #40]	@ 0x28
 800909e:	2300      	movs	r3, #0
 80090a0:	e018      	b.n	80090d4 <_strtod_l+0x264>
 80090a2:	4638      	mov	r0, r7
 80090a4:	e7da      	b.n	800905c <_strtod_l+0x1ec>
 80090a6:	2b08      	cmp	r3, #8
 80090a8:	f103 0301 	add.w	r3, r3, #1
 80090ac:	dc03      	bgt.n	80090b6 <_strtod_l+0x246>
 80090ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80090b0:	434e      	muls	r6, r1
 80090b2:	960a      	str	r6, [sp, #40]	@ 0x28
 80090b4:	e7e7      	b.n	8009086 <_strtod_l+0x216>
 80090b6:	2b10      	cmp	r3, #16
 80090b8:	bfde      	ittt	le
 80090ba:	9e08      	ldrle	r6, [sp, #32]
 80090bc:	434e      	mulle	r6, r1
 80090be:	9608      	strle	r6, [sp, #32]
 80090c0:	e7e1      	b.n	8009086 <_strtod_l+0x216>
 80090c2:	280f      	cmp	r0, #15
 80090c4:	dceb      	bgt.n	800909e <_strtod_l+0x22e>
 80090c6:	9808      	ldr	r0, [sp, #32]
 80090c8:	230a      	movs	r3, #10
 80090ca:	fb03 2300 	mla	r3, r3, r0, r2
 80090ce:	9308      	str	r3, [sp, #32]
 80090d0:	e7e5      	b.n	800909e <_strtod_l+0x22e>
 80090d2:	4629      	mov	r1, r5
 80090d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090d6:	1c50      	adds	r0, r2, #1
 80090d8:	9019      	str	r0, [sp, #100]	@ 0x64
 80090da:	7852      	ldrb	r2, [r2, #1]
 80090dc:	4618      	mov	r0, r3
 80090de:	460d      	mov	r5, r1
 80090e0:	e7b1      	b.n	8009046 <_strtod_l+0x1d6>
 80090e2:	f04f 0900 	mov.w	r9, #0
 80090e6:	2301      	movs	r3, #1
 80090e8:	e77d      	b.n	8008fe6 <_strtod_l+0x176>
 80090ea:	f04f 0c00 	mov.w	ip, #0
 80090ee:	1ca2      	adds	r2, r4, #2
 80090f0:	9219      	str	r2, [sp, #100]	@ 0x64
 80090f2:	78a2      	ldrb	r2, [r4, #2]
 80090f4:	e785      	b.n	8009002 <_strtod_l+0x192>
 80090f6:	f04f 0c01 	mov.w	ip, #1
 80090fa:	e7f8      	b.n	80090ee <_strtod_l+0x27e>
 80090fc:	0800af68 	.word	0x0800af68
 8009100:	0800af50 	.word	0x0800af50
 8009104:	7ff00000 	.word	0x7ff00000
 8009108:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800910a:	1c51      	adds	r1, r2, #1
 800910c:	9119      	str	r1, [sp, #100]	@ 0x64
 800910e:	7852      	ldrb	r2, [r2, #1]
 8009110:	2a30      	cmp	r2, #48	@ 0x30
 8009112:	d0f9      	beq.n	8009108 <_strtod_l+0x298>
 8009114:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009118:	2908      	cmp	r1, #8
 800911a:	f63f af78 	bhi.w	800900e <_strtod_l+0x19e>
 800911e:	3a30      	subs	r2, #48	@ 0x30
 8009120:	920e      	str	r2, [sp, #56]	@ 0x38
 8009122:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009124:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009126:	f04f 080a 	mov.w	r8, #10
 800912a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800912c:	1c56      	adds	r6, r2, #1
 800912e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009130:	7852      	ldrb	r2, [r2, #1]
 8009132:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009136:	f1be 0f09 	cmp.w	lr, #9
 800913a:	d939      	bls.n	80091b0 <_strtod_l+0x340>
 800913c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800913e:	1a76      	subs	r6, r6, r1
 8009140:	2e08      	cmp	r6, #8
 8009142:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009146:	dc03      	bgt.n	8009150 <_strtod_l+0x2e0>
 8009148:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800914a:	4588      	cmp	r8, r1
 800914c:	bfa8      	it	ge
 800914e:	4688      	movge	r8, r1
 8009150:	f1bc 0f00 	cmp.w	ip, #0
 8009154:	d001      	beq.n	800915a <_strtod_l+0x2ea>
 8009156:	f1c8 0800 	rsb	r8, r8, #0
 800915a:	2d00      	cmp	r5, #0
 800915c:	d14e      	bne.n	80091fc <_strtod_l+0x38c>
 800915e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009160:	4308      	orrs	r0, r1
 8009162:	f47f aebe 	bne.w	8008ee2 <_strtod_l+0x72>
 8009166:	2b00      	cmp	r3, #0
 8009168:	f47f aed6 	bne.w	8008f18 <_strtod_l+0xa8>
 800916c:	2a69      	cmp	r2, #105	@ 0x69
 800916e:	d028      	beq.n	80091c2 <_strtod_l+0x352>
 8009170:	dc25      	bgt.n	80091be <_strtod_l+0x34e>
 8009172:	2a49      	cmp	r2, #73	@ 0x49
 8009174:	d025      	beq.n	80091c2 <_strtod_l+0x352>
 8009176:	2a4e      	cmp	r2, #78	@ 0x4e
 8009178:	f47f aece 	bne.w	8008f18 <_strtod_l+0xa8>
 800917c:	499b      	ldr	r1, [pc, #620]	@ (80093ec <_strtod_l+0x57c>)
 800917e:	a819      	add	r0, sp, #100	@ 0x64
 8009180:	f001 f9ee 	bl	800a560 <__match>
 8009184:	2800      	cmp	r0, #0
 8009186:	f43f aec7 	beq.w	8008f18 <_strtod_l+0xa8>
 800918a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	2b28      	cmp	r3, #40	@ 0x28
 8009190:	d12e      	bne.n	80091f0 <_strtod_l+0x380>
 8009192:	4997      	ldr	r1, [pc, #604]	@ (80093f0 <_strtod_l+0x580>)
 8009194:	aa1c      	add	r2, sp, #112	@ 0x70
 8009196:	a819      	add	r0, sp, #100	@ 0x64
 8009198:	f001 f9f6 	bl	800a588 <__hexnan>
 800919c:	2805      	cmp	r0, #5
 800919e:	d127      	bne.n	80091f0 <_strtod_l+0x380>
 80091a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80091a2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80091a6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80091aa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80091ae:	e698      	b.n	8008ee2 <_strtod_l+0x72>
 80091b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80091b2:	fb08 2101 	mla	r1, r8, r1, r2
 80091b6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80091ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80091bc:	e7b5      	b.n	800912a <_strtod_l+0x2ba>
 80091be:	2a6e      	cmp	r2, #110	@ 0x6e
 80091c0:	e7da      	b.n	8009178 <_strtod_l+0x308>
 80091c2:	498c      	ldr	r1, [pc, #560]	@ (80093f4 <_strtod_l+0x584>)
 80091c4:	a819      	add	r0, sp, #100	@ 0x64
 80091c6:	f001 f9cb 	bl	800a560 <__match>
 80091ca:	2800      	cmp	r0, #0
 80091cc:	f43f aea4 	beq.w	8008f18 <_strtod_l+0xa8>
 80091d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091d2:	4989      	ldr	r1, [pc, #548]	@ (80093f8 <_strtod_l+0x588>)
 80091d4:	3b01      	subs	r3, #1
 80091d6:	a819      	add	r0, sp, #100	@ 0x64
 80091d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80091da:	f001 f9c1 	bl	800a560 <__match>
 80091de:	b910      	cbnz	r0, 80091e6 <_strtod_l+0x376>
 80091e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091e2:	3301      	adds	r3, #1
 80091e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80091e6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009408 <_strtod_l+0x598>
 80091ea:	f04f 0a00 	mov.w	sl, #0
 80091ee:	e678      	b.n	8008ee2 <_strtod_l+0x72>
 80091f0:	4882      	ldr	r0, [pc, #520]	@ (80093fc <_strtod_l+0x58c>)
 80091f2:	f000 fef1 	bl	8009fd8 <nan>
 80091f6:	ec5b ab10 	vmov	sl, fp, d0
 80091fa:	e672      	b.n	8008ee2 <_strtod_l+0x72>
 80091fc:	eba8 0309 	sub.w	r3, r8, r9
 8009200:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009202:	9309      	str	r3, [sp, #36]	@ 0x24
 8009204:	2f00      	cmp	r7, #0
 8009206:	bf08      	it	eq
 8009208:	462f      	moveq	r7, r5
 800920a:	2d10      	cmp	r5, #16
 800920c:	462c      	mov	r4, r5
 800920e:	bfa8      	it	ge
 8009210:	2410      	movge	r4, #16
 8009212:	f7f7 f99f 	bl	8000554 <__aeabi_ui2d>
 8009216:	2d09      	cmp	r5, #9
 8009218:	4682      	mov	sl, r0
 800921a:	468b      	mov	fp, r1
 800921c:	dc13      	bgt.n	8009246 <_strtod_l+0x3d6>
 800921e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009220:	2b00      	cmp	r3, #0
 8009222:	f43f ae5e 	beq.w	8008ee2 <_strtod_l+0x72>
 8009226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009228:	dd78      	ble.n	800931c <_strtod_l+0x4ac>
 800922a:	2b16      	cmp	r3, #22
 800922c:	dc5f      	bgt.n	80092ee <_strtod_l+0x47e>
 800922e:	4974      	ldr	r1, [pc, #464]	@ (8009400 <_strtod_l+0x590>)
 8009230:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009234:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009238:	4652      	mov	r2, sl
 800923a:	465b      	mov	r3, fp
 800923c:	f7f7 fa04 	bl	8000648 <__aeabi_dmul>
 8009240:	4682      	mov	sl, r0
 8009242:	468b      	mov	fp, r1
 8009244:	e64d      	b.n	8008ee2 <_strtod_l+0x72>
 8009246:	4b6e      	ldr	r3, [pc, #440]	@ (8009400 <_strtod_l+0x590>)
 8009248:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800924c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009250:	f7f7 f9fa 	bl	8000648 <__aeabi_dmul>
 8009254:	4682      	mov	sl, r0
 8009256:	9808      	ldr	r0, [sp, #32]
 8009258:	468b      	mov	fp, r1
 800925a:	f7f7 f97b 	bl	8000554 <__aeabi_ui2d>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4650      	mov	r0, sl
 8009264:	4659      	mov	r1, fp
 8009266:	f7f7 f839 	bl	80002dc <__adddf3>
 800926a:	2d0f      	cmp	r5, #15
 800926c:	4682      	mov	sl, r0
 800926e:	468b      	mov	fp, r1
 8009270:	ddd5      	ble.n	800921e <_strtod_l+0x3ae>
 8009272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009274:	1b2c      	subs	r4, r5, r4
 8009276:	441c      	add	r4, r3
 8009278:	2c00      	cmp	r4, #0
 800927a:	f340 8096 	ble.w	80093aa <_strtod_l+0x53a>
 800927e:	f014 030f 	ands.w	r3, r4, #15
 8009282:	d00a      	beq.n	800929a <_strtod_l+0x42a>
 8009284:	495e      	ldr	r1, [pc, #376]	@ (8009400 <_strtod_l+0x590>)
 8009286:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800928a:	4652      	mov	r2, sl
 800928c:	465b      	mov	r3, fp
 800928e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009292:	f7f7 f9d9 	bl	8000648 <__aeabi_dmul>
 8009296:	4682      	mov	sl, r0
 8009298:	468b      	mov	fp, r1
 800929a:	f034 040f 	bics.w	r4, r4, #15
 800929e:	d073      	beq.n	8009388 <_strtod_l+0x518>
 80092a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80092a4:	dd48      	ble.n	8009338 <_strtod_l+0x4c8>
 80092a6:	2400      	movs	r4, #0
 80092a8:	46a0      	mov	r8, r4
 80092aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80092ac:	46a1      	mov	r9, r4
 80092ae:	9a05      	ldr	r2, [sp, #20]
 80092b0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009408 <_strtod_l+0x598>
 80092b4:	2322      	movs	r3, #34	@ 0x22
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	f04f 0a00 	mov.w	sl, #0
 80092bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f43f ae0f 	beq.w	8008ee2 <_strtod_l+0x72>
 80092c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092c6:	9805      	ldr	r0, [sp, #20]
 80092c8:	f7ff f942 	bl	8008550 <_Bfree>
 80092cc:	9805      	ldr	r0, [sp, #20]
 80092ce:	4649      	mov	r1, r9
 80092d0:	f7ff f93e 	bl	8008550 <_Bfree>
 80092d4:	9805      	ldr	r0, [sp, #20]
 80092d6:	4641      	mov	r1, r8
 80092d8:	f7ff f93a 	bl	8008550 <_Bfree>
 80092dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092de:	9805      	ldr	r0, [sp, #20]
 80092e0:	f7ff f936 	bl	8008550 <_Bfree>
 80092e4:	9805      	ldr	r0, [sp, #20]
 80092e6:	4621      	mov	r1, r4
 80092e8:	f7ff f932 	bl	8008550 <_Bfree>
 80092ec:	e5f9      	b.n	8008ee2 <_strtod_l+0x72>
 80092ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80092f4:	4293      	cmp	r3, r2
 80092f6:	dbbc      	blt.n	8009272 <_strtod_l+0x402>
 80092f8:	4c41      	ldr	r4, [pc, #260]	@ (8009400 <_strtod_l+0x590>)
 80092fa:	f1c5 050f 	rsb	r5, r5, #15
 80092fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009302:	4652      	mov	r2, sl
 8009304:	465b      	mov	r3, fp
 8009306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800930a:	f7f7 f99d 	bl	8000648 <__aeabi_dmul>
 800930e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009310:	1b5d      	subs	r5, r3, r5
 8009312:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009316:	e9d4 2300 	ldrd	r2, r3, [r4]
 800931a:	e78f      	b.n	800923c <_strtod_l+0x3cc>
 800931c:	3316      	adds	r3, #22
 800931e:	dba8      	blt.n	8009272 <_strtod_l+0x402>
 8009320:	4b37      	ldr	r3, [pc, #220]	@ (8009400 <_strtod_l+0x590>)
 8009322:	eba9 0808 	sub.w	r8, r9, r8
 8009326:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800932a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800932e:	4650      	mov	r0, sl
 8009330:	4659      	mov	r1, fp
 8009332:	f7f7 fab3 	bl	800089c <__aeabi_ddiv>
 8009336:	e783      	b.n	8009240 <_strtod_l+0x3d0>
 8009338:	4b32      	ldr	r3, [pc, #200]	@ (8009404 <_strtod_l+0x594>)
 800933a:	9308      	str	r3, [sp, #32]
 800933c:	2300      	movs	r3, #0
 800933e:	1124      	asrs	r4, r4, #4
 8009340:	4650      	mov	r0, sl
 8009342:	4659      	mov	r1, fp
 8009344:	461e      	mov	r6, r3
 8009346:	2c01      	cmp	r4, #1
 8009348:	dc21      	bgt.n	800938e <_strtod_l+0x51e>
 800934a:	b10b      	cbz	r3, 8009350 <_strtod_l+0x4e0>
 800934c:	4682      	mov	sl, r0
 800934e:	468b      	mov	fp, r1
 8009350:	492c      	ldr	r1, [pc, #176]	@ (8009404 <_strtod_l+0x594>)
 8009352:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009356:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800935a:	4652      	mov	r2, sl
 800935c:	465b      	mov	r3, fp
 800935e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009362:	f7f7 f971 	bl	8000648 <__aeabi_dmul>
 8009366:	4b28      	ldr	r3, [pc, #160]	@ (8009408 <_strtod_l+0x598>)
 8009368:	460a      	mov	r2, r1
 800936a:	400b      	ands	r3, r1
 800936c:	4927      	ldr	r1, [pc, #156]	@ (800940c <_strtod_l+0x59c>)
 800936e:	428b      	cmp	r3, r1
 8009370:	4682      	mov	sl, r0
 8009372:	d898      	bhi.n	80092a6 <_strtod_l+0x436>
 8009374:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009378:	428b      	cmp	r3, r1
 800937a:	bf86      	itte	hi
 800937c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009410 <_strtod_l+0x5a0>
 8009380:	f04f 3aff 	movhi.w	sl, #4294967295
 8009384:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009388:	2300      	movs	r3, #0
 800938a:	9308      	str	r3, [sp, #32]
 800938c:	e07a      	b.n	8009484 <_strtod_l+0x614>
 800938e:	07e2      	lsls	r2, r4, #31
 8009390:	d505      	bpl.n	800939e <_strtod_l+0x52e>
 8009392:	9b08      	ldr	r3, [sp, #32]
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	f7f7 f956 	bl	8000648 <__aeabi_dmul>
 800939c:	2301      	movs	r3, #1
 800939e:	9a08      	ldr	r2, [sp, #32]
 80093a0:	3208      	adds	r2, #8
 80093a2:	3601      	adds	r6, #1
 80093a4:	1064      	asrs	r4, r4, #1
 80093a6:	9208      	str	r2, [sp, #32]
 80093a8:	e7cd      	b.n	8009346 <_strtod_l+0x4d6>
 80093aa:	d0ed      	beq.n	8009388 <_strtod_l+0x518>
 80093ac:	4264      	negs	r4, r4
 80093ae:	f014 020f 	ands.w	r2, r4, #15
 80093b2:	d00a      	beq.n	80093ca <_strtod_l+0x55a>
 80093b4:	4b12      	ldr	r3, [pc, #72]	@ (8009400 <_strtod_l+0x590>)
 80093b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093ba:	4650      	mov	r0, sl
 80093bc:	4659      	mov	r1, fp
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	f7f7 fa6b 	bl	800089c <__aeabi_ddiv>
 80093c6:	4682      	mov	sl, r0
 80093c8:	468b      	mov	fp, r1
 80093ca:	1124      	asrs	r4, r4, #4
 80093cc:	d0dc      	beq.n	8009388 <_strtod_l+0x518>
 80093ce:	2c1f      	cmp	r4, #31
 80093d0:	dd20      	ble.n	8009414 <_strtod_l+0x5a4>
 80093d2:	2400      	movs	r4, #0
 80093d4:	46a0      	mov	r8, r4
 80093d6:	940a      	str	r4, [sp, #40]	@ 0x28
 80093d8:	46a1      	mov	r9, r4
 80093da:	9a05      	ldr	r2, [sp, #20]
 80093dc:	2322      	movs	r3, #34	@ 0x22
 80093de:	f04f 0a00 	mov.w	sl, #0
 80093e2:	f04f 0b00 	mov.w	fp, #0
 80093e6:	6013      	str	r3, [r2, #0]
 80093e8:	e768      	b.n	80092bc <_strtod_l+0x44c>
 80093ea:	bf00      	nop
 80093ec:	0800ad3d 	.word	0x0800ad3d
 80093f0:	0800af54 	.word	0x0800af54
 80093f4:	0800ad35 	.word	0x0800ad35
 80093f8:	0800ad6c 	.word	0x0800ad6c
 80093fc:	0800b0fd 	.word	0x0800b0fd
 8009400:	0800ae88 	.word	0x0800ae88
 8009404:	0800ae60 	.word	0x0800ae60
 8009408:	7ff00000 	.word	0x7ff00000
 800940c:	7ca00000 	.word	0x7ca00000
 8009410:	7fefffff 	.word	0x7fefffff
 8009414:	f014 0310 	ands.w	r3, r4, #16
 8009418:	bf18      	it	ne
 800941a:	236a      	movne	r3, #106	@ 0x6a
 800941c:	4ea9      	ldr	r6, [pc, #676]	@ (80096c4 <_strtod_l+0x854>)
 800941e:	9308      	str	r3, [sp, #32]
 8009420:	4650      	mov	r0, sl
 8009422:	4659      	mov	r1, fp
 8009424:	2300      	movs	r3, #0
 8009426:	07e2      	lsls	r2, r4, #31
 8009428:	d504      	bpl.n	8009434 <_strtod_l+0x5c4>
 800942a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800942e:	f7f7 f90b 	bl	8000648 <__aeabi_dmul>
 8009432:	2301      	movs	r3, #1
 8009434:	1064      	asrs	r4, r4, #1
 8009436:	f106 0608 	add.w	r6, r6, #8
 800943a:	d1f4      	bne.n	8009426 <_strtod_l+0x5b6>
 800943c:	b10b      	cbz	r3, 8009442 <_strtod_l+0x5d2>
 800943e:	4682      	mov	sl, r0
 8009440:	468b      	mov	fp, r1
 8009442:	9b08      	ldr	r3, [sp, #32]
 8009444:	b1b3      	cbz	r3, 8009474 <_strtod_l+0x604>
 8009446:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800944a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800944e:	2b00      	cmp	r3, #0
 8009450:	4659      	mov	r1, fp
 8009452:	dd0f      	ble.n	8009474 <_strtod_l+0x604>
 8009454:	2b1f      	cmp	r3, #31
 8009456:	dd55      	ble.n	8009504 <_strtod_l+0x694>
 8009458:	2b34      	cmp	r3, #52	@ 0x34
 800945a:	bfde      	ittt	le
 800945c:	f04f 33ff 	movle.w	r3, #4294967295
 8009460:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009464:	4093      	lslle	r3, r2
 8009466:	f04f 0a00 	mov.w	sl, #0
 800946a:	bfcc      	ite	gt
 800946c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009470:	ea03 0b01 	andle.w	fp, r3, r1
 8009474:	2200      	movs	r2, #0
 8009476:	2300      	movs	r3, #0
 8009478:	4650      	mov	r0, sl
 800947a:	4659      	mov	r1, fp
 800947c:	f7f7 fb4c 	bl	8000b18 <__aeabi_dcmpeq>
 8009480:	2800      	cmp	r0, #0
 8009482:	d1a6      	bne.n	80093d2 <_strtod_l+0x562>
 8009484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800948a:	9805      	ldr	r0, [sp, #20]
 800948c:	462b      	mov	r3, r5
 800948e:	463a      	mov	r2, r7
 8009490:	f7ff f8c6 	bl	8008620 <__s2b>
 8009494:	900a      	str	r0, [sp, #40]	@ 0x28
 8009496:	2800      	cmp	r0, #0
 8009498:	f43f af05 	beq.w	80092a6 <_strtod_l+0x436>
 800949c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800949e:	2a00      	cmp	r2, #0
 80094a0:	eba9 0308 	sub.w	r3, r9, r8
 80094a4:	bfa8      	it	ge
 80094a6:	2300      	movge	r3, #0
 80094a8:	9312      	str	r3, [sp, #72]	@ 0x48
 80094aa:	2400      	movs	r4, #0
 80094ac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80094b0:	9316      	str	r3, [sp, #88]	@ 0x58
 80094b2:	46a0      	mov	r8, r4
 80094b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094b6:	9805      	ldr	r0, [sp, #20]
 80094b8:	6859      	ldr	r1, [r3, #4]
 80094ba:	f7ff f809 	bl	80084d0 <_Balloc>
 80094be:	4681      	mov	r9, r0
 80094c0:	2800      	cmp	r0, #0
 80094c2:	f43f aef4 	beq.w	80092ae <_strtod_l+0x43e>
 80094c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094c8:	691a      	ldr	r2, [r3, #16]
 80094ca:	3202      	adds	r2, #2
 80094cc:	f103 010c 	add.w	r1, r3, #12
 80094d0:	0092      	lsls	r2, r2, #2
 80094d2:	300c      	adds	r0, #12
 80094d4:	f000 fd72 	bl	8009fbc <memcpy>
 80094d8:	ec4b ab10 	vmov	d0, sl, fp
 80094dc:	9805      	ldr	r0, [sp, #20]
 80094de:	aa1c      	add	r2, sp, #112	@ 0x70
 80094e0:	a91b      	add	r1, sp, #108	@ 0x6c
 80094e2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80094e6:	f7ff fbd7 	bl	8008c98 <__d2b>
 80094ea:	901a      	str	r0, [sp, #104]	@ 0x68
 80094ec:	2800      	cmp	r0, #0
 80094ee:	f43f aede 	beq.w	80092ae <_strtod_l+0x43e>
 80094f2:	9805      	ldr	r0, [sp, #20]
 80094f4:	2101      	movs	r1, #1
 80094f6:	f7ff f929 	bl	800874c <__i2b>
 80094fa:	4680      	mov	r8, r0
 80094fc:	b948      	cbnz	r0, 8009512 <_strtod_l+0x6a2>
 80094fe:	f04f 0800 	mov.w	r8, #0
 8009502:	e6d4      	b.n	80092ae <_strtod_l+0x43e>
 8009504:	f04f 32ff 	mov.w	r2, #4294967295
 8009508:	fa02 f303 	lsl.w	r3, r2, r3
 800950c:	ea03 0a0a 	and.w	sl, r3, sl
 8009510:	e7b0      	b.n	8009474 <_strtod_l+0x604>
 8009512:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009514:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009516:	2d00      	cmp	r5, #0
 8009518:	bfab      	itete	ge
 800951a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800951c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800951e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009520:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009522:	bfac      	ite	ge
 8009524:	18ef      	addge	r7, r5, r3
 8009526:	1b5e      	sublt	r6, r3, r5
 8009528:	9b08      	ldr	r3, [sp, #32]
 800952a:	1aed      	subs	r5, r5, r3
 800952c:	4415      	add	r5, r2
 800952e:	4b66      	ldr	r3, [pc, #408]	@ (80096c8 <_strtod_l+0x858>)
 8009530:	3d01      	subs	r5, #1
 8009532:	429d      	cmp	r5, r3
 8009534:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009538:	da50      	bge.n	80095dc <_strtod_l+0x76c>
 800953a:	1b5b      	subs	r3, r3, r5
 800953c:	2b1f      	cmp	r3, #31
 800953e:	eba2 0203 	sub.w	r2, r2, r3
 8009542:	f04f 0101 	mov.w	r1, #1
 8009546:	dc3d      	bgt.n	80095c4 <_strtod_l+0x754>
 8009548:	fa01 f303 	lsl.w	r3, r1, r3
 800954c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800954e:	2300      	movs	r3, #0
 8009550:	9310      	str	r3, [sp, #64]	@ 0x40
 8009552:	18bd      	adds	r5, r7, r2
 8009554:	9b08      	ldr	r3, [sp, #32]
 8009556:	42af      	cmp	r7, r5
 8009558:	4416      	add	r6, r2
 800955a:	441e      	add	r6, r3
 800955c:	463b      	mov	r3, r7
 800955e:	bfa8      	it	ge
 8009560:	462b      	movge	r3, r5
 8009562:	42b3      	cmp	r3, r6
 8009564:	bfa8      	it	ge
 8009566:	4633      	movge	r3, r6
 8009568:	2b00      	cmp	r3, #0
 800956a:	bfc2      	ittt	gt
 800956c:	1aed      	subgt	r5, r5, r3
 800956e:	1af6      	subgt	r6, r6, r3
 8009570:	1aff      	subgt	r7, r7, r3
 8009572:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009574:	2b00      	cmp	r3, #0
 8009576:	dd16      	ble.n	80095a6 <_strtod_l+0x736>
 8009578:	4641      	mov	r1, r8
 800957a:	9805      	ldr	r0, [sp, #20]
 800957c:	461a      	mov	r2, r3
 800957e:	f7ff f9a5 	bl	80088cc <__pow5mult>
 8009582:	4680      	mov	r8, r0
 8009584:	2800      	cmp	r0, #0
 8009586:	d0ba      	beq.n	80094fe <_strtod_l+0x68e>
 8009588:	4601      	mov	r1, r0
 800958a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800958c:	9805      	ldr	r0, [sp, #20]
 800958e:	f7ff f8f3 	bl	8008778 <__multiply>
 8009592:	900e      	str	r0, [sp, #56]	@ 0x38
 8009594:	2800      	cmp	r0, #0
 8009596:	f43f ae8a 	beq.w	80092ae <_strtod_l+0x43e>
 800959a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800959c:	9805      	ldr	r0, [sp, #20]
 800959e:	f7fe ffd7 	bl	8008550 <_Bfree>
 80095a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80095a6:	2d00      	cmp	r5, #0
 80095a8:	dc1d      	bgt.n	80095e6 <_strtod_l+0x776>
 80095aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	dd23      	ble.n	80095f8 <_strtod_l+0x788>
 80095b0:	4649      	mov	r1, r9
 80095b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80095b4:	9805      	ldr	r0, [sp, #20]
 80095b6:	f7ff f989 	bl	80088cc <__pow5mult>
 80095ba:	4681      	mov	r9, r0
 80095bc:	b9e0      	cbnz	r0, 80095f8 <_strtod_l+0x788>
 80095be:	f04f 0900 	mov.w	r9, #0
 80095c2:	e674      	b.n	80092ae <_strtod_l+0x43e>
 80095c4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80095c8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80095cc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80095d0:	35e2      	adds	r5, #226	@ 0xe2
 80095d2:	fa01 f305 	lsl.w	r3, r1, r5
 80095d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80095d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80095da:	e7ba      	b.n	8009552 <_strtod_l+0x6e2>
 80095dc:	2300      	movs	r3, #0
 80095de:	9310      	str	r3, [sp, #64]	@ 0x40
 80095e0:	2301      	movs	r3, #1
 80095e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095e4:	e7b5      	b.n	8009552 <_strtod_l+0x6e2>
 80095e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095e8:	9805      	ldr	r0, [sp, #20]
 80095ea:	462a      	mov	r2, r5
 80095ec:	f7ff f9c8 	bl	8008980 <__lshift>
 80095f0:	901a      	str	r0, [sp, #104]	@ 0x68
 80095f2:	2800      	cmp	r0, #0
 80095f4:	d1d9      	bne.n	80095aa <_strtod_l+0x73a>
 80095f6:	e65a      	b.n	80092ae <_strtod_l+0x43e>
 80095f8:	2e00      	cmp	r6, #0
 80095fa:	dd07      	ble.n	800960c <_strtod_l+0x79c>
 80095fc:	4649      	mov	r1, r9
 80095fe:	9805      	ldr	r0, [sp, #20]
 8009600:	4632      	mov	r2, r6
 8009602:	f7ff f9bd 	bl	8008980 <__lshift>
 8009606:	4681      	mov	r9, r0
 8009608:	2800      	cmp	r0, #0
 800960a:	d0d8      	beq.n	80095be <_strtod_l+0x74e>
 800960c:	2f00      	cmp	r7, #0
 800960e:	dd08      	ble.n	8009622 <_strtod_l+0x7b2>
 8009610:	4641      	mov	r1, r8
 8009612:	9805      	ldr	r0, [sp, #20]
 8009614:	463a      	mov	r2, r7
 8009616:	f7ff f9b3 	bl	8008980 <__lshift>
 800961a:	4680      	mov	r8, r0
 800961c:	2800      	cmp	r0, #0
 800961e:	f43f ae46 	beq.w	80092ae <_strtod_l+0x43e>
 8009622:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009624:	9805      	ldr	r0, [sp, #20]
 8009626:	464a      	mov	r2, r9
 8009628:	f7ff fa32 	bl	8008a90 <__mdiff>
 800962c:	4604      	mov	r4, r0
 800962e:	2800      	cmp	r0, #0
 8009630:	f43f ae3d 	beq.w	80092ae <_strtod_l+0x43e>
 8009634:	68c3      	ldr	r3, [r0, #12]
 8009636:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009638:	2300      	movs	r3, #0
 800963a:	60c3      	str	r3, [r0, #12]
 800963c:	4641      	mov	r1, r8
 800963e:	f7ff fa0b 	bl	8008a58 <__mcmp>
 8009642:	2800      	cmp	r0, #0
 8009644:	da46      	bge.n	80096d4 <_strtod_l+0x864>
 8009646:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009648:	ea53 030a 	orrs.w	r3, r3, sl
 800964c:	d16c      	bne.n	8009728 <_strtod_l+0x8b8>
 800964e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009652:	2b00      	cmp	r3, #0
 8009654:	d168      	bne.n	8009728 <_strtod_l+0x8b8>
 8009656:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800965a:	0d1b      	lsrs	r3, r3, #20
 800965c:	051b      	lsls	r3, r3, #20
 800965e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009662:	d961      	bls.n	8009728 <_strtod_l+0x8b8>
 8009664:	6963      	ldr	r3, [r4, #20]
 8009666:	b913      	cbnz	r3, 800966e <_strtod_l+0x7fe>
 8009668:	6923      	ldr	r3, [r4, #16]
 800966a:	2b01      	cmp	r3, #1
 800966c:	dd5c      	ble.n	8009728 <_strtod_l+0x8b8>
 800966e:	4621      	mov	r1, r4
 8009670:	2201      	movs	r2, #1
 8009672:	9805      	ldr	r0, [sp, #20]
 8009674:	f7ff f984 	bl	8008980 <__lshift>
 8009678:	4641      	mov	r1, r8
 800967a:	4604      	mov	r4, r0
 800967c:	f7ff f9ec 	bl	8008a58 <__mcmp>
 8009680:	2800      	cmp	r0, #0
 8009682:	dd51      	ble.n	8009728 <_strtod_l+0x8b8>
 8009684:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009688:	9a08      	ldr	r2, [sp, #32]
 800968a:	0d1b      	lsrs	r3, r3, #20
 800968c:	051b      	lsls	r3, r3, #20
 800968e:	2a00      	cmp	r2, #0
 8009690:	d06b      	beq.n	800976a <_strtod_l+0x8fa>
 8009692:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009696:	d868      	bhi.n	800976a <_strtod_l+0x8fa>
 8009698:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800969c:	f67f ae9d 	bls.w	80093da <_strtod_l+0x56a>
 80096a0:	4b0a      	ldr	r3, [pc, #40]	@ (80096cc <_strtod_l+0x85c>)
 80096a2:	4650      	mov	r0, sl
 80096a4:	4659      	mov	r1, fp
 80096a6:	2200      	movs	r2, #0
 80096a8:	f7f6 ffce 	bl	8000648 <__aeabi_dmul>
 80096ac:	4b08      	ldr	r3, [pc, #32]	@ (80096d0 <_strtod_l+0x860>)
 80096ae:	400b      	ands	r3, r1
 80096b0:	4682      	mov	sl, r0
 80096b2:	468b      	mov	fp, r1
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f47f ae05 	bne.w	80092c4 <_strtod_l+0x454>
 80096ba:	9a05      	ldr	r2, [sp, #20]
 80096bc:	2322      	movs	r3, #34	@ 0x22
 80096be:	6013      	str	r3, [r2, #0]
 80096c0:	e600      	b.n	80092c4 <_strtod_l+0x454>
 80096c2:	bf00      	nop
 80096c4:	0800af80 	.word	0x0800af80
 80096c8:	fffffc02 	.word	0xfffffc02
 80096cc:	39500000 	.word	0x39500000
 80096d0:	7ff00000 	.word	0x7ff00000
 80096d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80096d8:	d165      	bne.n	80097a6 <_strtod_l+0x936>
 80096da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80096dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096e0:	b35a      	cbz	r2, 800973a <_strtod_l+0x8ca>
 80096e2:	4a9f      	ldr	r2, [pc, #636]	@ (8009960 <_strtod_l+0xaf0>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d12b      	bne.n	8009740 <_strtod_l+0x8d0>
 80096e8:	9b08      	ldr	r3, [sp, #32]
 80096ea:	4651      	mov	r1, sl
 80096ec:	b303      	cbz	r3, 8009730 <_strtod_l+0x8c0>
 80096ee:	4b9d      	ldr	r3, [pc, #628]	@ (8009964 <_strtod_l+0xaf4>)
 80096f0:	465a      	mov	r2, fp
 80096f2:	4013      	ands	r3, r2
 80096f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80096f8:	f04f 32ff 	mov.w	r2, #4294967295
 80096fc:	d81b      	bhi.n	8009736 <_strtod_l+0x8c6>
 80096fe:	0d1b      	lsrs	r3, r3, #20
 8009700:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009704:	fa02 f303 	lsl.w	r3, r2, r3
 8009708:	4299      	cmp	r1, r3
 800970a:	d119      	bne.n	8009740 <_strtod_l+0x8d0>
 800970c:	4b96      	ldr	r3, [pc, #600]	@ (8009968 <_strtod_l+0xaf8>)
 800970e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009710:	429a      	cmp	r2, r3
 8009712:	d102      	bne.n	800971a <_strtod_l+0x8aa>
 8009714:	3101      	adds	r1, #1
 8009716:	f43f adca 	beq.w	80092ae <_strtod_l+0x43e>
 800971a:	4b92      	ldr	r3, [pc, #584]	@ (8009964 <_strtod_l+0xaf4>)
 800971c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800971e:	401a      	ands	r2, r3
 8009720:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009724:	f04f 0a00 	mov.w	sl, #0
 8009728:	9b08      	ldr	r3, [sp, #32]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1b8      	bne.n	80096a0 <_strtod_l+0x830>
 800972e:	e5c9      	b.n	80092c4 <_strtod_l+0x454>
 8009730:	f04f 33ff 	mov.w	r3, #4294967295
 8009734:	e7e8      	b.n	8009708 <_strtod_l+0x898>
 8009736:	4613      	mov	r3, r2
 8009738:	e7e6      	b.n	8009708 <_strtod_l+0x898>
 800973a:	ea53 030a 	orrs.w	r3, r3, sl
 800973e:	d0a1      	beq.n	8009684 <_strtod_l+0x814>
 8009740:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009742:	b1db      	cbz	r3, 800977c <_strtod_l+0x90c>
 8009744:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009746:	4213      	tst	r3, r2
 8009748:	d0ee      	beq.n	8009728 <_strtod_l+0x8b8>
 800974a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800974c:	9a08      	ldr	r2, [sp, #32]
 800974e:	4650      	mov	r0, sl
 8009750:	4659      	mov	r1, fp
 8009752:	b1bb      	cbz	r3, 8009784 <_strtod_l+0x914>
 8009754:	f7ff fb6e 	bl	8008e34 <sulp>
 8009758:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800975c:	ec53 2b10 	vmov	r2, r3, d0
 8009760:	f7f6 fdbc 	bl	80002dc <__adddf3>
 8009764:	4682      	mov	sl, r0
 8009766:	468b      	mov	fp, r1
 8009768:	e7de      	b.n	8009728 <_strtod_l+0x8b8>
 800976a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800976e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009772:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009776:	f04f 3aff 	mov.w	sl, #4294967295
 800977a:	e7d5      	b.n	8009728 <_strtod_l+0x8b8>
 800977c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800977e:	ea13 0f0a 	tst.w	r3, sl
 8009782:	e7e1      	b.n	8009748 <_strtod_l+0x8d8>
 8009784:	f7ff fb56 	bl	8008e34 <sulp>
 8009788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800978c:	ec53 2b10 	vmov	r2, r3, d0
 8009790:	f7f6 fda2 	bl	80002d8 <__aeabi_dsub>
 8009794:	2200      	movs	r2, #0
 8009796:	2300      	movs	r3, #0
 8009798:	4682      	mov	sl, r0
 800979a:	468b      	mov	fp, r1
 800979c:	f7f7 f9bc 	bl	8000b18 <__aeabi_dcmpeq>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d0c1      	beq.n	8009728 <_strtod_l+0x8b8>
 80097a4:	e619      	b.n	80093da <_strtod_l+0x56a>
 80097a6:	4641      	mov	r1, r8
 80097a8:	4620      	mov	r0, r4
 80097aa:	f7ff facd 	bl	8008d48 <__ratio>
 80097ae:	ec57 6b10 	vmov	r6, r7, d0
 80097b2:	2200      	movs	r2, #0
 80097b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80097b8:	4630      	mov	r0, r6
 80097ba:	4639      	mov	r1, r7
 80097bc:	f7f7 f9c0 	bl	8000b40 <__aeabi_dcmple>
 80097c0:	2800      	cmp	r0, #0
 80097c2:	d06f      	beq.n	80098a4 <_strtod_l+0xa34>
 80097c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d17a      	bne.n	80098c0 <_strtod_l+0xa50>
 80097ca:	f1ba 0f00 	cmp.w	sl, #0
 80097ce:	d158      	bne.n	8009882 <_strtod_l+0xa12>
 80097d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d15a      	bne.n	8009890 <_strtod_l+0xa20>
 80097da:	4b64      	ldr	r3, [pc, #400]	@ (800996c <_strtod_l+0xafc>)
 80097dc:	2200      	movs	r2, #0
 80097de:	4630      	mov	r0, r6
 80097e0:	4639      	mov	r1, r7
 80097e2:	f7f7 f9a3 	bl	8000b2c <__aeabi_dcmplt>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d159      	bne.n	800989e <_strtod_l+0xa2e>
 80097ea:	4630      	mov	r0, r6
 80097ec:	4639      	mov	r1, r7
 80097ee:	4b60      	ldr	r3, [pc, #384]	@ (8009970 <_strtod_l+0xb00>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	f7f6 ff29 	bl	8000648 <__aeabi_dmul>
 80097f6:	4606      	mov	r6, r0
 80097f8:	460f      	mov	r7, r1
 80097fa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80097fe:	9606      	str	r6, [sp, #24]
 8009800:	9307      	str	r3, [sp, #28]
 8009802:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009806:	4d57      	ldr	r5, [pc, #348]	@ (8009964 <_strtod_l+0xaf4>)
 8009808:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800980c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800980e:	401d      	ands	r5, r3
 8009810:	4b58      	ldr	r3, [pc, #352]	@ (8009974 <_strtod_l+0xb04>)
 8009812:	429d      	cmp	r5, r3
 8009814:	f040 80b2 	bne.w	800997c <_strtod_l+0xb0c>
 8009818:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800981a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800981e:	ec4b ab10 	vmov	d0, sl, fp
 8009822:	f7ff f9c9 	bl	8008bb8 <__ulp>
 8009826:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800982a:	ec51 0b10 	vmov	r0, r1, d0
 800982e:	f7f6 ff0b 	bl	8000648 <__aeabi_dmul>
 8009832:	4652      	mov	r2, sl
 8009834:	465b      	mov	r3, fp
 8009836:	f7f6 fd51 	bl	80002dc <__adddf3>
 800983a:	460b      	mov	r3, r1
 800983c:	4949      	ldr	r1, [pc, #292]	@ (8009964 <_strtod_l+0xaf4>)
 800983e:	4a4e      	ldr	r2, [pc, #312]	@ (8009978 <_strtod_l+0xb08>)
 8009840:	4019      	ands	r1, r3
 8009842:	4291      	cmp	r1, r2
 8009844:	4682      	mov	sl, r0
 8009846:	d942      	bls.n	80098ce <_strtod_l+0xa5e>
 8009848:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800984a:	4b47      	ldr	r3, [pc, #284]	@ (8009968 <_strtod_l+0xaf8>)
 800984c:	429a      	cmp	r2, r3
 800984e:	d103      	bne.n	8009858 <_strtod_l+0x9e8>
 8009850:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009852:	3301      	adds	r3, #1
 8009854:	f43f ad2b 	beq.w	80092ae <_strtod_l+0x43e>
 8009858:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009968 <_strtod_l+0xaf8>
 800985c:	f04f 3aff 	mov.w	sl, #4294967295
 8009860:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009862:	9805      	ldr	r0, [sp, #20]
 8009864:	f7fe fe74 	bl	8008550 <_Bfree>
 8009868:	9805      	ldr	r0, [sp, #20]
 800986a:	4649      	mov	r1, r9
 800986c:	f7fe fe70 	bl	8008550 <_Bfree>
 8009870:	9805      	ldr	r0, [sp, #20]
 8009872:	4641      	mov	r1, r8
 8009874:	f7fe fe6c 	bl	8008550 <_Bfree>
 8009878:	9805      	ldr	r0, [sp, #20]
 800987a:	4621      	mov	r1, r4
 800987c:	f7fe fe68 	bl	8008550 <_Bfree>
 8009880:	e618      	b.n	80094b4 <_strtod_l+0x644>
 8009882:	f1ba 0f01 	cmp.w	sl, #1
 8009886:	d103      	bne.n	8009890 <_strtod_l+0xa20>
 8009888:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800988a:	2b00      	cmp	r3, #0
 800988c:	f43f ada5 	beq.w	80093da <_strtod_l+0x56a>
 8009890:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009940 <_strtod_l+0xad0>
 8009894:	4f35      	ldr	r7, [pc, #212]	@ (800996c <_strtod_l+0xafc>)
 8009896:	ed8d 7b06 	vstr	d7, [sp, #24]
 800989a:	2600      	movs	r6, #0
 800989c:	e7b1      	b.n	8009802 <_strtod_l+0x992>
 800989e:	4f34      	ldr	r7, [pc, #208]	@ (8009970 <_strtod_l+0xb00>)
 80098a0:	2600      	movs	r6, #0
 80098a2:	e7aa      	b.n	80097fa <_strtod_l+0x98a>
 80098a4:	4b32      	ldr	r3, [pc, #200]	@ (8009970 <_strtod_l+0xb00>)
 80098a6:	4630      	mov	r0, r6
 80098a8:	4639      	mov	r1, r7
 80098aa:	2200      	movs	r2, #0
 80098ac:	f7f6 fecc 	bl	8000648 <__aeabi_dmul>
 80098b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098b2:	4606      	mov	r6, r0
 80098b4:	460f      	mov	r7, r1
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d09f      	beq.n	80097fa <_strtod_l+0x98a>
 80098ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80098be:	e7a0      	b.n	8009802 <_strtod_l+0x992>
 80098c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009948 <_strtod_l+0xad8>
 80098c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80098c8:	ec57 6b17 	vmov	r6, r7, d7
 80098cc:	e799      	b.n	8009802 <_strtod_l+0x992>
 80098ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80098d2:	9b08      	ldr	r3, [sp, #32]
 80098d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1c1      	bne.n	8009860 <_strtod_l+0x9f0>
 80098dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80098e0:	0d1b      	lsrs	r3, r3, #20
 80098e2:	051b      	lsls	r3, r3, #20
 80098e4:	429d      	cmp	r5, r3
 80098e6:	d1bb      	bne.n	8009860 <_strtod_l+0x9f0>
 80098e8:	4630      	mov	r0, r6
 80098ea:	4639      	mov	r1, r7
 80098ec:	f7f7 fa0c 	bl	8000d08 <__aeabi_d2lz>
 80098f0:	f7f6 fe7c 	bl	80005ec <__aeabi_l2d>
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	4630      	mov	r0, r6
 80098fa:	4639      	mov	r1, r7
 80098fc:	f7f6 fcec 	bl	80002d8 <__aeabi_dsub>
 8009900:	460b      	mov	r3, r1
 8009902:	4602      	mov	r2, r0
 8009904:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009908:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800990c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800990e:	ea46 060a 	orr.w	r6, r6, sl
 8009912:	431e      	orrs	r6, r3
 8009914:	d06f      	beq.n	80099f6 <_strtod_l+0xb86>
 8009916:	a30e      	add	r3, pc, #56	@ (adr r3, 8009950 <_strtod_l+0xae0>)
 8009918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991c:	f7f7 f906 	bl	8000b2c <__aeabi_dcmplt>
 8009920:	2800      	cmp	r0, #0
 8009922:	f47f accf 	bne.w	80092c4 <_strtod_l+0x454>
 8009926:	a30c      	add	r3, pc, #48	@ (adr r3, 8009958 <_strtod_l+0xae8>)
 8009928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009930:	f7f7 f91a 	bl	8000b68 <__aeabi_dcmpgt>
 8009934:	2800      	cmp	r0, #0
 8009936:	d093      	beq.n	8009860 <_strtod_l+0x9f0>
 8009938:	e4c4      	b.n	80092c4 <_strtod_l+0x454>
 800993a:	bf00      	nop
 800993c:	f3af 8000 	nop.w
 8009940:	00000000 	.word	0x00000000
 8009944:	bff00000 	.word	0xbff00000
 8009948:	00000000 	.word	0x00000000
 800994c:	3ff00000 	.word	0x3ff00000
 8009950:	94a03595 	.word	0x94a03595
 8009954:	3fdfffff 	.word	0x3fdfffff
 8009958:	35afe535 	.word	0x35afe535
 800995c:	3fe00000 	.word	0x3fe00000
 8009960:	000fffff 	.word	0x000fffff
 8009964:	7ff00000 	.word	0x7ff00000
 8009968:	7fefffff 	.word	0x7fefffff
 800996c:	3ff00000 	.word	0x3ff00000
 8009970:	3fe00000 	.word	0x3fe00000
 8009974:	7fe00000 	.word	0x7fe00000
 8009978:	7c9fffff 	.word	0x7c9fffff
 800997c:	9b08      	ldr	r3, [sp, #32]
 800997e:	b323      	cbz	r3, 80099ca <_strtod_l+0xb5a>
 8009980:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009984:	d821      	bhi.n	80099ca <_strtod_l+0xb5a>
 8009986:	a328      	add	r3, pc, #160	@ (adr r3, 8009a28 <_strtod_l+0xbb8>)
 8009988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998c:	4630      	mov	r0, r6
 800998e:	4639      	mov	r1, r7
 8009990:	f7f7 f8d6 	bl	8000b40 <__aeabi_dcmple>
 8009994:	b1a0      	cbz	r0, 80099c0 <_strtod_l+0xb50>
 8009996:	4639      	mov	r1, r7
 8009998:	4630      	mov	r0, r6
 800999a:	f7f7 f92d 	bl	8000bf8 <__aeabi_d2uiz>
 800999e:	2801      	cmp	r0, #1
 80099a0:	bf38      	it	cc
 80099a2:	2001      	movcc	r0, #1
 80099a4:	f7f6 fdd6 	bl	8000554 <__aeabi_ui2d>
 80099a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099aa:	4606      	mov	r6, r0
 80099ac:	460f      	mov	r7, r1
 80099ae:	b9fb      	cbnz	r3, 80099f0 <_strtod_l+0xb80>
 80099b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80099b4:	9014      	str	r0, [sp, #80]	@ 0x50
 80099b6:	9315      	str	r3, [sp, #84]	@ 0x54
 80099b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80099bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80099c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80099c2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80099c6:	1b5b      	subs	r3, r3, r5
 80099c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80099ca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80099ce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80099d2:	f7ff f8f1 	bl	8008bb8 <__ulp>
 80099d6:	4650      	mov	r0, sl
 80099d8:	ec53 2b10 	vmov	r2, r3, d0
 80099dc:	4659      	mov	r1, fp
 80099de:	f7f6 fe33 	bl	8000648 <__aeabi_dmul>
 80099e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80099e6:	f7f6 fc79 	bl	80002dc <__adddf3>
 80099ea:	4682      	mov	sl, r0
 80099ec:	468b      	mov	fp, r1
 80099ee:	e770      	b.n	80098d2 <_strtod_l+0xa62>
 80099f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80099f4:	e7e0      	b.n	80099b8 <_strtod_l+0xb48>
 80099f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009a30 <_strtod_l+0xbc0>)
 80099f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fc:	f7f7 f896 	bl	8000b2c <__aeabi_dcmplt>
 8009a00:	e798      	b.n	8009934 <_strtod_l+0xac4>
 8009a02:	2300      	movs	r3, #0
 8009a04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a06:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009a08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a0a:	6013      	str	r3, [r2, #0]
 8009a0c:	f7ff ba6d 	b.w	8008eea <_strtod_l+0x7a>
 8009a10:	2a65      	cmp	r2, #101	@ 0x65
 8009a12:	f43f ab66 	beq.w	80090e2 <_strtod_l+0x272>
 8009a16:	2a45      	cmp	r2, #69	@ 0x45
 8009a18:	f43f ab63 	beq.w	80090e2 <_strtod_l+0x272>
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	f7ff bb9e 	b.w	800915e <_strtod_l+0x2ee>
 8009a22:	bf00      	nop
 8009a24:	f3af 8000 	nop.w
 8009a28:	ffc00000 	.word	0xffc00000
 8009a2c:	41dfffff 	.word	0x41dfffff
 8009a30:	94a03595 	.word	0x94a03595
 8009a34:	3fcfffff 	.word	0x3fcfffff

08009a38 <_strtod_r>:
 8009a38:	4b01      	ldr	r3, [pc, #4]	@ (8009a40 <_strtod_r+0x8>)
 8009a3a:	f7ff ba19 	b.w	8008e70 <_strtod_l>
 8009a3e:	bf00      	nop
 8009a40:	20000068 	.word	0x20000068

08009a44 <_strtol_l.constprop.0>:
 8009a44:	2b24      	cmp	r3, #36	@ 0x24
 8009a46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a4a:	4686      	mov	lr, r0
 8009a4c:	4690      	mov	r8, r2
 8009a4e:	d801      	bhi.n	8009a54 <_strtol_l.constprop.0+0x10>
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d106      	bne.n	8009a62 <_strtol_l.constprop.0+0x1e>
 8009a54:	f7fd fdbc 	bl	80075d0 <__errno>
 8009a58:	2316      	movs	r3, #22
 8009a5a:	6003      	str	r3, [r0, #0]
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a62:	4834      	ldr	r0, [pc, #208]	@ (8009b34 <_strtol_l.constprop.0+0xf0>)
 8009a64:	460d      	mov	r5, r1
 8009a66:	462a      	mov	r2, r5
 8009a68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a6c:	5d06      	ldrb	r6, [r0, r4]
 8009a6e:	f016 0608 	ands.w	r6, r6, #8
 8009a72:	d1f8      	bne.n	8009a66 <_strtol_l.constprop.0+0x22>
 8009a74:	2c2d      	cmp	r4, #45	@ 0x2d
 8009a76:	d12d      	bne.n	8009ad4 <_strtol_l.constprop.0+0x90>
 8009a78:	782c      	ldrb	r4, [r5, #0]
 8009a7a:	2601      	movs	r6, #1
 8009a7c:	1c95      	adds	r5, r2, #2
 8009a7e:	f033 0210 	bics.w	r2, r3, #16
 8009a82:	d109      	bne.n	8009a98 <_strtol_l.constprop.0+0x54>
 8009a84:	2c30      	cmp	r4, #48	@ 0x30
 8009a86:	d12a      	bne.n	8009ade <_strtol_l.constprop.0+0x9a>
 8009a88:	782a      	ldrb	r2, [r5, #0]
 8009a8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a8e:	2a58      	cmp	r2, #88	@ 0x58
 8009a90:	d125      	bne.n	8009ade <_strtol_l.constprop.0+0x9a>
 8009a92:	786c      	ldrb	r4, [r5, #1]
 8009a94:	2310      	movs	r3, #16
 8009a96:	3502      	adds	r5, #2
 8009a98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009a9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	fbbc f9f3 	udiv	r9, ip, r3
 8009aa6:	4610      	mov	r0, r2
 8009aa8:	fb03 ca19 	mls	sl, r3, r9, ip
 8009aac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009ab0:	2f09      	cmp	r7, #9
 8009ab2:	d81b      	bhi.n	8009aec <_strtol_l.constprop.0+0xa8>
 8009ab4:	463c      	mov	r4, r7
 8009ab6:	42a3      	cmp	r3, r4
 8009ab8:	dd27      	ble.n	8009b0a <_strtol_l.constprop.0+0xc6>
 8009aba:	1c57      	adds	r7, r2, #1
 8009abc:	d007      	beq.n	8009ace <_strtol_l.constprop.0+0x8a>
 8009abe:	4581      	cmp	r9, r0
 8009ac0:	d320      	bcc.n	8009b04 <_strtol_l.constprop.0+0xc0>
 8009ac2:	d101      	bne.n	8009ac8 <_strtol_l.constprop.0+0x84>
 8009ac4:	45a2      	cmp	sl, r4
 8009ac6:	db1d      	blt.n	8009b04 <_strtol_l.constprop.0+0xc0>
 8009ac8:	fb00 4003 	mla	r0, r0, r3, r4
 8009acc:	2201      	movs	r2, #1
 8009ace:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ad2:	e7eb      	b.n	8009aac <_strtol_l.constprop.0+0x68>
 8009ad4:	2c2b      	cmp	r4, #43	@ 0x2b
 8009ad6:	bf04      	itt	eq
 8009ad8:	782c      	ldrbeq	r4, [r5, #0]
 8009ada:	1c95      	addeq	r5, r2, #2
 8009adc:	e7cf      	b.n	8009a7e <_strtol_l.constprop.0+0x3a>
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1da      	bne.n	8009a98 <_strtol_l.constprop.0+0x54>
 8009ae2:	2c30      	cmp	r4, #48	@ 0x30
 8009ae4:	bf0c      	ite	eq
 8009ae6:	2308      	moveq	r3, #8
 8009ae8:	230a      	movne	r3, #10
 8009aea:	e7d5      	b.n	8009a98 <_strtol_l.constprop.0+0x54>
 8009aec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009af0:	2f19      	cmp	r7, #25
 8009af2:	d801      	bhi.n	8009af8 <_strtol_l.constprop.0+0xb4>
 8009af4:	3c37      	subs	r4, #55	@ 0x37
 8009af6:	e7de      	b.n	8009ab6 <_strtol_l.constprop.0+0x72>
 8009af8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009afc:	2f19      	cmp	r7, #25
 8009afe:	d804      	bhi.n	8009b0a <_strtol_l.constprop.0+0xc6>
 8009b00:	3c57      	subs	r4, #87	@ 0x57
 8009b02:	e7d8      	b.n	8009ab6 <_strtol_l.constprop.0+0x72>
 8009b04:	f04f 32ff 	mov.w	r2, #4294967295
 8009b08:	e7e1      	b.n	8009ace <_strtol_l.constprop.0+0x8a>
 8009b0a:	1c53      	adds	r3, r2, #1
 8009b0c:	d108      	bne.n	8009b20 <_strtol_l.constprop.0+0xdc>
 8009b0e:	2322      	movs	r3, #34	@ 0x22
 8009b10:	f8ce 3000 	str.w	r3, [lr]
 8009b14:	4660      	mov	r0, ip
 8009b16:	f1b8 0f00 	cmp.w	r8, #0
 8009b1a:	d0a0      	beq.n	8009a5e <_strtol_l.constprop.0+0x1a>
 8009b1c:	1e69      	subs	r1, r5, #1
 8009b1e:	e006      	b.n	8009b2e <_strtol_l.constprop.0+0xea>
 8009b20:	b106      	cbz	r6, 8009b24 <_strtol_l.constprop.0+0xe0>
 8009b22:	4240      	negs	r0, r0
 8009b24:	f1b8 0f00 	cmp.w	r8, #0
 8009b28:	d099      	beq.n	8009a5e <_strtol_l.constprop.0+0x1a>
 8009b2a:	2a00      	cmp	r2, #0
 8009b2c:	d1f6      	bne.n	8009b1c <_strtol_l.constprop.0+0xd8>
 8009b2e:	f8c8 1000 	str.w	r1, [r8]
 8009b32:	e794      	b.n	8009a5e <_strtol_l.constprop.0+0x1a>
 8009b34:	0800afa9 	.word	0x0800afa9

08009b38 <_strtol_r>:
 8009b38:	f7ff bf84 	b.w	8009a44 <_strtol_l.constprop.0>

08009b3c <__ssputs_r>:
 8009b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b40:	688e      	ldr	r6, [r1, #8]
 8009b42:	461f      	mov	r7, r3
 8009b44:	42be      	cmp	r6, r7
 8009b46:	680b      	ldr	r3, [r1, #0]
 8009b48:	4682      	mov	sl, r0
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	4690      	mov	r8, r2
 8009b4e:	d82d      	bhi.n	8009bac <__ssputs_r+0x70>
 8009b50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009b58:	d026      	beq.n	8009ba8 <__ssputs_r+0x6c>
 8009b5a:	6965      	ldr	r5, [r4, #20]
 8009b5c:	6909      	ldr	r1, [r1, #16]
 8009b5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b62:	eba3 0901 	sub.w	r9, r3, r1
 8009b66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b6a:	1c7b      	adds	r3, r7, #1
 8009b6c:	444b      	add	r3, r9
 8009b6e:	106d      	asrs	r5, r5, #1
 8009b70:	429d      	cmp	r5, r3
 8009b72:	bf38      	it	cc
 8009b74:	461d      	movcc	r5, r3
 8009b76:	0553      	lsls	r3, r2, #21
 8009b78:	d527      	bpl.n	8009bca <__ssputs_r+0x8e>
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	f7fe fc1c 	bl	80083b8 <_malloc_r>
 8009b80:	4606      	mov	r6, r0
 8009b82:	b360      	cbz	r0, 8009bde <__ssputs_r+0xa2>
 8009b84:	6921      	ldr	r1, [r4, #16]
 8009b86:	464a      	mov	r2, r9
 8009b88:	f000 fa18 	bl	8009fbc <memcpy>
 8009b8c:	89a3      	ldrh	r3, [r4, #12]
 8009b8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b96:	81a3      	strh	r3, [r4, #12]
 8009b98:	6126      	str	r6, [r4, #16]
 8009b9a:	6165      	str	r5, [r4, #20]
 8009b9c:	444e      	add	r6, r9
 8009b9e:	eba5 0509 	sub.w	r5, r5, r9
 8009ba2:	6026      	str	r6, [r4, #0]
 8009ba4:	60a5      	str	r5, [r4, #8]
 8009ba6:	463e      	mov	r6, r7
 8009ba8:	42be      	cmp	r6, r7
 8009baa:	d900      	bls.n	8009bae <__ssputs_r+0x72>
 8009bac:	463e      	mov	r6, r7
 8009bae:	6820      	ldr	r0, [r4, #0]
 8009bb0:	4632      	mov	r2, r6
 8009bb2:	4641      	mov	r1, r8
 8009bb4:	f000 f9c6 	bl	8009f44 <memmove>
 8009bb8:	68a3      	ldr	r3, [r4, #8]
 8009bba:	1b9b      	subs	r3, r3, r6
 8009bbc:	60a3      	str	r3, [r4, #8]
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	4433      	add	r3, r6
 8009bc2:	6023      	str	r3, [r4, #0]
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bca:	462a      	mov	r2, r5
 8009bcc:	f000 fd89 	bl	800a6e2 <_realloc_r>
 8009bd0:	4606      	mov	r6, r0
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	d1e0      	bne.n	8009b98 <__ssputs_r+0x5c>
 8009bd6:	6921      	ldr	r1, [r4, #16]
 8009bd8:	4650      	mov	r0, sl
 8009bda:	f7fe fb79 	bl	80082d0 <_free_r>
 8009bde:	230c      	movs	r3, #12
 8009be0:	f8ca 3000 	str.w	r3, [sl]
 8009be4:	89a3      	ldrh	r3, [r4, #12]
 8009be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bea:	81a3      	strh	r3, [r4, #12]
 8009bec:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf0:	e7e9      	b.n	8009bc6 <__ssputs_r+0x8a>
	...

08009bf4 <_svfiprintf_r>:
 8009bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf8:	4698      	mov	r8, r3
 8009bfa:	898b      	ldrh	r3, [r1, #12]
 8009bfc:	061b      	lsls	r3, r3, #24
 8009bfe:	b09d      	sub	sp, #116	@ 0x74
 8009c00:	4607      	mov	r7, r0
 8009c02:	460d      	mov	r5, r1
 8009c04:	4614      	mov	r4, r2
 8009c06:	d510      	bpl.n	8009c2a <_svfiprintf_r+0x36>
 8009c08:	690b      	ldr	r3, [r1, #16]
 8009c0a:	b973      	cbnz	r3, 8009c2a <_svfiprintf_r+0x36>
 8009c0c:	2140      	movs	r1, #64	@ 0x40
 8009c0e:	f7fe fbd3 	bl	80083b8 <_malloc_r>
 8009c12:	6028      	str	r0, [r5, #0]
 8009c14:	6128      	str	r0, [r5, #16]
 8009c16:	b930      	cbnz	r0, 8009c26 <_svfiprintf_r+0x32>
 8009c18:	230c      	movs	r3, #12
 8009c1a:	603b      	str	r3, [r7, #0]
 8009c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c20:	b01d      	add	sp, #116	@ 0x74
 8009c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c26:	2340      	movs	r3, #64	@ 0x40
 8009c28:	616b      	str	r3, [r5, #20]
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c2e:	2320      	movs	r3, #32
 8009c30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c34:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c38:	2330      	movs	r3, #48	@ 0x30
 8009c3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009dd8 <_svfiprintf_r+0x1e4>
 8009c3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c42:	f04f 0901 	mov.w	r9, #1
 8009c46:	4623      	mov	r3, r4
 8009c48:	469a      	mov	sl, r3
 8009c4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c4e:	b10a      	cbz	r2, 8009c54 <_svfiprintf_r+0x60>
 8009c50:	2a25      	cmp	r2, #37	@ 0x25
 8009c52:	d1f9      	bne.n	8009c48 <_svfiprintf_r+0x54>
 8009c54:	ebba 0b04 	subs.w	fp, sl, r4
 8009c58:	d00b      	beq.n	8009c72 <_svfiprintf_r+0x7e>
 8009c5a:	465b      	mov	r3, fp
 8009c5c:	4622      	mov	r2, r4
 8009c5e:	4629      	mov	r1, r5
 8009c60:	4638      	mov	r0, r7
 8009c62:	f7ff ff6b 	bl	8009b3c <__ssputs_r>
 8009c66:	3001      	adds	r0, #1
 8009c68:	f000 80a7 	beq.w	8009dba <_svfiprintf_r+0x1c6>
 8009c6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c6e:	445a      	add	r2, fp
 8009c70:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c72:	f89a 3000 	ldrb.w	r3, [sl]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f000 809f 	beq.w	8009dba <_svfiprintf_r+0x1c6>
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c86:	f10a 0a01 	add.w	sl, sl, #1
 8009c8a:	9304      	str	r3, [sp, #16]
 8009c8c:	9307      	str	r3, [sp, #28]
 8009c8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c92:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c94:	4654      	mov	r4, sl
 8009c96:	2205      	movs	r2, #5
 8009c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c9c:	484e      	ldr	r0, [pc, #312]	@ (8009dd8 <_svfiprintf_r+0x1e4>)
 8009c9e:	f7f6 fabf 	bl	8000220 <memchr>
 8009ca2:	9a04      	ldr	r2, [sp, #16]
 8009ca4:	b9d8      	cbnz	r0, 8009cde <_svfiprintf_r+0xea>
 8009ca6:	06d0      	lsls	r0, r2, #27
 8009ca8:	bf44      	itt	mi
 8009caa:	2320      	movmi	r3, #32
 8009cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cb0:	0711      	lsls	r1, r2, #28
 8009cb2:	bf44      	itt	mi
 8009cb4:	232b      	movmi	r3, #43	@ 0x2b
 8009cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cba:	f89a 3000 	ldrb.w	r3, [sl]
 8009cbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cc0:	d015      	beq.n	8009cee <_svfiprintf_r+0xfa>
 8009cc2:	9a07      	ldr	r2, [sp, #28]
 8009cc4:	4654      	mov	r4, sl
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	f04f 0c0a 	mov.w	ip, #10
 8009ccc:	4621      	mov	r1, r4
 8009cce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cd2:	3b30      	subs	r3, #48	@ 0x30
 8009cd4:	2b09      	cmp	r3, #9
 8009cd6:	d94b      	bls.n	8009d70 <_svfiprintf_r+0x17c>
 8009cd8:	b1b0      	cbz	r0, 8009d08 <_svfiprintf_r+0x114>
 8009cda:	9207      	str	r2, [sp, #28]
 8009cdc:	e014      	b.n	8009d08 <_svfiprintf_r+0x114>
 8009cde:	eba0 0308 	sub.w	r3, r0, r8
 8009ce2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	9304      	str	r3, [sp, #16]
 8009cea:	46a2      	mov	sl, r4
 8009cec:	e7d2      	b.n	8009c94 <_svfiprintf_r+0xa0>
 8009cee:	9b03      	ldr	r3, [sp, #12]
 8009cf0:	1d19      	adds	r1, r3, #4
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	9103      	str	r1, [sp, #12]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	bfbb      	ittet	lt
 8009cfa:	425b      	neglt	r3, r3
 8009cfc:	f042 0202 	orrlt.w	r2, r2, #2
 8009d00:	9307      	strge	r3, [sp, #28]
 8009d02:	9307      	strlt	r3, [sp, #28]
 8009d04:	bfb8      	it	lt
 8009d06:	9204      	strlt	r2, [sp, #16]
 8009d08:	7823      	ldrb	r3, [r4, #0]
 8009d0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d0c:	d10a      	bne.n	8009d24 <_svfiprintf_r+0x130>
 8009d0e:	7863      	ldrb	r3, [r4, #1]
 8009d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d12:	d132      	bne.n	8009d7a <_svfiprintf_r+0x186>
 8009d14:	9b03      	ldr	r3, [sp, #12]
 8009d16:	1d1a      	adds	r2, r3, #4
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	9203      	str	r2, [sp, #12]
 8009d1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d20:	3402      	adds	r4, #2
 8009d22:	9305      	str	r3, [sp, #20]
 8009d24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009de8 <_svfiprintf_r+0x1f4>
 8009d28:	7821      	ldrb	r1, [r4, #0]
 8009d2a:	2203      	movs	r2, #3
 8009d2c:	4650      	mov	r0, sl
 8009d2e:	f7f6 fa77 	bl	8000220 <memchr>
 8009d32:	b138      	cbz	r0, 8009d44 <_svfiprintf_r+0x150>
 8009d34:	9b04      	ldr	r3, [sp, #16]
 8009d36:	eba0 000a 	sub.w	r0, r0, sl
 8009d3a:	2240      	movs	r2, #64	@ 0x40
 8009d3c:	4082      	lsls	r2, r0
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	3401      	adds	r4, #1
 8009d42:	9304      	str	r3, [sp, #16]
 8009d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d48:	4824      	ldr	r0, [pc, #144]	@ (8009ddc <_svfiprintf_r+0x1e8>)
 8009d4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d4e:	2206      	movs	r2, #6
 8009d50:	f7f6 fa66 	bl	8000220 <memchr>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d036      	beq.n	8009dc6 <_svfiprintf_r+0x1d2>
 8009d58:	4b21      	ldr	r3, [pc, #132]	@ (8009de0 <_svfiprintf_r+0x1ec>)
 8009d5a:	bb1b      	cbnz	r3, 8009da4 <_svfiprintf_r+0x1b0>
 8009d5c:	9b03      	ldr	r3, [sp, #12]
 8009d5e:	3307      	adds	r3, #7
 8009d60:	f023 0307 	bic.w	r3, r3, #7
 8009d64:	3308      	adds	r3, #8
 8009d66:	9303      	str	r3, [sp, #12]
 8009d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d6a:	4433      	add	r3, r6
 8009d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d6e:	e76a      	b.n	8009c46 <_svfiprintf_r+0x52>
 8009d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d74:	460c      	mov	r4, r1
 8009d76:	2001      	movs	r0, #1
 8009d78:	e7a8      	b.n	8009ccc <_svfiprintf_r+0xd8>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	3401      	adds	r4, #1
 8009d7e:	9305      	str	r3, [sp, #20]
 8009d80:	4619      	mov	r1, r3
 8009d82:	f04f 0c0a 	mov.w	ip, #10
 8009d86:	4620      	mov	r0, r4
 8009d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d8c:	3a30      	subs	r2, #48	@ 0x30
 8009d8e:	2a09      	cmp	r2, #9
 8009d90:	d903      	bls.n	8009d9a <_svfiprintf_r+0x1a6>
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0c6      	beq.n	8009d24 <_svfiprintf_r+0x130>
 8009d96:	9105      	str	r1, [sp, #20]
 8009d98:	e7c4      	b.n	8009d24 <_svfiprintf_r+0x130>
 8009d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d9e:	4604      	mov	r4, r0
 8009da0:	2301      	movs	r3, #1
 8009da2:	e7f0      	b.n	8009d86 <_svfiprintf_r+0x192>
 8009da4:	ab03      	add	r3, sp, #12
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	462a      	mov	r2, r5
 8009daa:	4b0e      	ldr	r3, [pc, #56]	@ (8009de4 <_svfiprintf_r+0x1f0>)
 8009dac:	a904      	add	r1, sp, #16
 8009dae:	4638      	mov	r0, r7
 8009db0:	f7fc fcca 	bl	8006748 <_printf_float>
 8009db4:	1c42      	adds	r2, r0, #1
 8009db6:	4606      	mov	r6, r0
 8009db8:	d1d6      	bne.n	8009d68 <_svfiprintf_r+0x174>
 8009dba:	89ab      	ldrh	r3, [r5, #12]
 8009dbc:	065b      	lsls	r3, r3, #25
 8009dbe:	f53f af2d 	bmi.w	8009c1c <_svfiprintf_r+0x28>
 8009dc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009dc4:	e72c      	b.n	8009c20 <_svfiprintf_r+0x2c>
 8009dc6:	ab03      	add	r3, sp, #12
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	462a      	mov	r2, r5
 8009dcc:	4b05      	ldr	r3, [pc, #20]	@ (8009de4 <_svfiprintf_r+0x1f0>)
 8009dce:	a904      	add	r1, sp, #16
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	f7fc ff51 	bl	8006c78 <_printf_i>
 8009dd6:	e7ed      	b.n	8009db4 <_svfiprintf_r+0x1c0>
 8009dd8:	0800b0a9 	.word	0x0800b0a9
 8009ddc:	0800b0b3 	.word	0x0800b0b3
 8009de0:	08006749 	.word	0x08006749
 8009de4:	08009b3d 	.word	0x08009b3d
 8009de8:	0800b0af 	.word	0x0800b0af

08009dec <__sflush_r>:
 8009dec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009df4:	0716      	lsls	r6, r2, #28
 8009df6:	4605      	mov	r5, r0
 8009df8:	460c      	mov	r4, r1
 8009dfa:	d454      	bmi.n	8009ea6 <__sflush_r+0xba>
 8009dfc:	684b      	ldr	r3, [r1, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	dc02      	bgt.n	8009e08 <__sflush_r+0x1c>
 8009e02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	dd48      	ble.n	8009e9a <__sflush_r+0xae>
 8009e08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e0a:	2e00      	cmp	r6, #0
 8009e0c:	d045      	beq.n	8009e9a <__sflush_r+0xae>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009e14:	682f      	ldr	r7, [r5, #0]
 8009e16:	6a21      	ldr	r1, [r4, #32]
 8009e18:	602b      	str	r3, [r5, #0]
 8009e1a:	d030      	beq.n	8009e7e <__sflush_r+0x92>
 8009e1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009e1e:	89a3      	ldrh	r3, [r4, #12]
 8009e20:	0759      	lsls	r1, r3, #29
 8009e22:	d505      	bpl.n	8009e30 <__sflush_r+0x44>
 8009e24:	6863      	ldr	r3, [r4, #4]
 8009e26:	1ad2      	subs	r2, r2, r3
 8009e28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009e2a:	b10b      	cbz	r3, 8009e30 <__sflush_r+0x44>
 8009e2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009e2e:	1ad2      	subs	r2, r2, r3
 8009e30:	2300      	movs	r3, #0
 8009e32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e34:	6a21      	ldr	r1, [r4, #32]
 8009e36:	4628      	mov	r0, r5
 8009e38:	47b0      	blx	r6
 8009e3a:	1c43      	adds	r3, r0, #1
 8009e3c:	89a3      	ldrh	r3, [r4, #12]
 8009e3e:	d106      	bne.n	8009e4e <__sflush_r+0x62>
 8009e40:	6829      	ldr	r1, [r5, #0]
 8009e42:	291d      	cmp	r1, #29
 8009e44:	d82b      	bhi.n	8009e9e <__sflush_r+0xb2>
 8009e46:	4a2a      	ldr	r2, [pc, #168]	@ (8009ef0 <__sflush_r+0x104>)
 8009e48:	410a      	asrs	r2, r1
 8009e4a:	07d6      	lsls	r6, r2, #31
 8009e4c:	d427      	bmi.n	8009e9e <__sflush_r+0xb2>
 8009e4e:	2200      	movs	r2, #0
 8009e50:	6062      	str	r2, [r4, #4]
 8009e52:	04d9      	lsls	r1, r3, #19
 8009e54:	6922      	ldr	r2, [r4, #16]
 8009e56:	6022      	str	r2, [r4, #0]
 8009e58:	d504      	bpl.n	8009e64 <__sflush_r+0x78>
 8009e5a:	1c42      	adds	r2, r0, #1
 8009e5c:	d101      	bne.n	8009e62 <__sflush_r+0x76>
 8009e5e:	682b      	ldr	r3, [r5, #0]
 8009e60:	b903      	cbnz	r3, 8009e64 <__sflush_r+0x78>
 8009e62:	6560      	str	r0, [r4, #84]	@ 0x54
 8009e64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e66:	602f      	str	r7, [r5, #0]
 8009e68:	b1b9      	cbz	r1, 8009e9a <__sflush_r+0xae>
 8009e6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e6e:	4299      	cmp	r1, r3
 8009e70:	d002      	beq.n	8009e78 <__sflush_r+0x8c>
 8009e72:	4628      	mov	r0, r5
 8009e74:	f7fe fa2c 	bl	80082d0 <_free_r>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e7c:	e00d      	b.n	8009e9a <__sflush_r+0xae>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	4628      	mov	r0, r5
 8009e82:	47b0      	blx	r6
 8009e84:	4602      	mov	r2, r0
 8009e86:	1c50      	adds	r0, r2, #1
 8009e88:	d1c9      	bne.n	8009e1e <__sflush_r+0x32>
 8009e8a:	682b      	ldr	r3, [r5, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d0c6      	beq.n	8009e1e <__sflush_r+0x32>
 8009e90:	2b1d      	cmp	r3, #29
 8009e92:	d001      	beq.n	8009e98 <__sflush_r+0xac>
 8009e94:	2b16      	cmp	r3, #22
 8009e96:	d11e      	bne.n	8009ed6 <__sflush_r+0xea>
 8009e98:	602f      	str	r7, [r5, #0]
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	e022      	b.n	8009ee4 <__sflush_r+0xf8>
 8009e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ea2:	b21b      	sxth	r3, r3
 8009ea4:	e01b      	b.n	8009ede <__sflush_r+0xf2>
 8009ea6:	690f      	ldr	r7, [r1, #16]
 8009ea8:	2f00      	cmp	r7, #0
 8009eaa:	d0f6      	beq.n	8009e9a <__sflush_r+0xae>
 8009eac:	0793      	lsls	r3, r2, #30
 8009eae:	680e      	ldr	r6, [r1, #0]
 8009eb0:	bf08      	it	eq
 8009eb2:	694b      	ldreq	r3, [r1, #20]
 8009eb4:	600f      	str	r7, [r1, #0]
 8009eb6:	bf18      	it	ne
 8009eb8:	2300      	movne	r3, #0
 8009eba:	eba6 0807 	sub.w	r8, r6, r7
 8009ebe:	608b      	str	r3, [r1, #8]
 8009ec0:	f1b8 0f00 	cmp.w	r8, #0
 8009ec4:	dde9      	ble.n	8009e9a <__sflush_r+0xae>
 8009ec6:	6a21      	ldr	r1, [r4, #32]
 8009ec8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009eca:	4643      	mov	r3, r8
 8009ecc:	463a      	mov	r2, r7
 8009ece:	4628      	mov	r0, r5
 8009ed0:	47b0      	blx	r6
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	dc08      	bgt.n	8009ee8 <__sflush_r+0xfc>
 8009ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ede:	81a3      	strh	r3, [r4, #12]
 8009ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee8:	4407      	add	r7, r0
 8009eea:	eba8 0800 	sub.w	r8, r8, r0
 8009eee:	e7e7      	b.n	8009ec0 <__sflush_r+0xd4>
 8009ef0:	dfbffffe 	.word	0xdfbffffe

08009ef4 <_fflush_r>:
 8009ef4:	b538      	push	{r3, r4, r5, lr}
 8009ef6:	690b      	ldr	r3, [r1, #16]
 8009ef8:	4605      	mov	r5, r0
 8009efa:	460c      	mov	r4, r1
 8009efc:	b913      	cbnz	r3, 8009f04 <_fflush_r+0x10>
 8009efe:	2500      	movs	r5, #0
 8009f00:	4628      	mov	r0, r5
 8009f02:	bd38      	pop	{r3, r4, r5, pc}
 8009f04:	b118      	cbz	r0, 8009f0e <_fflush_r+0x1a>
 8009f06:	6a03      	ldr	r3, [r0, #32]
 8009f08:	b90b      	cbnz	r3, 8009f0e <_fflush_r+0x1a>
 8009f0a:	f7fd fa75 	bl	80073f8 <__sinit>
 8009f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d0f3      	beq.n	8009efe <_fflush_r+0xa>
 8009f16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009f18:	07d0      	lsls	r0, r2, #31
 8009f1a:	d404      	bmi.n	8009f26 <_fflush_r+0x32>
 8009f1c:	0599      	lsls	r1, r3, #22
 8009f1e:	d402      	bmi.n	8009f26 <_fflush_r+0x32>
 8009f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f22:	f7fd fb80 	bl	8007626 <__retarget_lock_acquire_recursive>
 8009f26:	4628      	mov	r0, r5
 8009f28:	4621      	mov	r1, r4
 8009f2a:	f7ff ff5f 	bl	8009dec <__sflush_r>
 8009f2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f30:	07da      	lsls	r2, r3, #31
 8009f32:	4605      	mov	r5, r0
 8009f34:	d4e4      	bmi.n	8009f00 <_fflush_r+0xc>
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	059b      	lsls	r3, r3, #22
 8009f3a:	d4e1      	bmi.n	8009f00 <_fflush_r+0xc>
 8009f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f3e:	f7fd fb73 	bl	8007628 <__retarget_lock_release_recursive>
 8009f42:	e7dd      	b.n	8009f00 <_fflush_r+0xc>

08009f44 <memmove>:
 8009f44:	4288      	cmp	r0, r1
 8009f46:	b510      	push	{r4, lr}
 8009f48:	eb01 0402 	add.w	r4, r1, r2
 8009f4c:	d902      	bls.n	8009f54 <memmove+0x10>
 8009f4e:	4284      	cmp	r4, r0
 8009f50:	4623      	mov	r3, r4
 8009f52:	d807      	bhi.n	8009f64 <memmove+0x20>
 8009f54:	1e43      	subs	r3, r0, #1
 8009f56:	42a1      	cmp	r1, r4
 8009f58:	d008      	beq.n	8009f6c <memmove+0x28>
 8009f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f62:	e7f8      	b.n	8009f56 <memmove+0x12>
 8009f64:	4402      	add	r2, r0
 8009f66:	4601      	mov	r1, r0
 8009f68:	428a      	cmp	r2, r1
 8009f6a:	d100      	bne.n	8009f6e <memmove+0x2a>
 8009f6c:	bd10      	pop	{r4, pc}
 8009f6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f76:	e7f7      	b.n	8009f68 <memmove+0x24>

08009f78 <strncmp>:
 8009f78:	b510      	push	{r4, lr}
 8009f7a:	b16a      	cbz	r2, 8009f98 <strncmp+0x20>
 8009f7c:	3901      	subs	r1, #1
 8009f7e:	1884      	adds	r4, r0, r2
 8009f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d103      	bne.n	8009f94 <strncmp+0x1c>
 8009f8c:	42a0      	cmp	r0, r4
 8009f8e:	d001      	beq.n	8009f94 <strncmp+0x1c>
 8009f90:	2a00      	cmp	r2, #0
 8009f92:	d1f5      	bne.n	8009f80 <strncmp+0x8>
 8009f94:	1ad0      	subs	r0, r2, r3
 8009f96:	bd10      	pop	{r4, pc}
 8009f98:	4610      	mov	r0, r2
 8009f9a:	e7fc      	b.n	8009f96 <strncmp+0x1e>

08009f9c <_sbrk_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	4d06      	ldr	r5, [pc, #24]	@ (8009fb8 <_sbrk_r+0x1c>)
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	602b      	str	r3, [r5, #0]
 8009fa8:	f7f7 fba4 	bl	80016f4 <_sbrk>
 8009fac:	1c43      	adds	r3, r0, #1
 8009fae:	d102      	bne.n	8009fb6 <_sbrk_r+0x1a>
 8009fb0:	682b      	ldr	r3, [r5, #0]
 8009fb2:	b103      	cbz	r3, 8009fb6 <_sbrk_r+0x1a>
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	bd38      	pop	{r3, r4, r5, pc}
 8009fb8:	20000660 	.word	0x20000660

08009fbc <memcpy>:
 8009fbc:	440a      	add	r2, r1
 8009fbe:	4291      	cmp	r1, r2
 8009fc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fc4:	d100      	bne.n	8009fc8 <memcpy+0xc>
 8009fc6:	4770      	bx	lr
 8009fc8:	b510      	push	{r4, lr}
 8009fca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fd2:	4291      	cmp	r1, r2
 8009fd4:	d1f9      	bne.n	8009fca <memcpy+0xe>
 8009fd6:	bd10      	pop	{r4, pc}

08009fd8 <nan>:
 8009fd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009fe0 <nan+0x8>
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	00000000 	.word	0x00000000
 8009fe4:	7ff80000 	.word	0x7ff80000

08009fe8 <__assert_func>:
 8009fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fea:	4614      	mov	r4, r2
 8009fec:	461a      	mov	r2, r3
 8009fee:	4b09      	ldr	r3, [pc, #36]	@ (800a014 <__assert_func+0x2c>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	68d8      	ldr	r0, [r3, #12]
 8009ff6:	b954      	cbnz	r4, 800a00e <__assert_func+0x26>
 8009ff8:	4b07      	ldr	r3, [pc, #28]	@ (800a018 <__assert_func+0x30>)
 8009ffa:	461c      	mov	r4, r3
 8009ffc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a000:	9100      	str	r1, [sp, #0]
 800a002:	462b      	mov	r3, r5
 800a004:	4905      	ldr	r1, [pc, #20]	@ (800a01c <__assert_func+0x34>)
 800a006:	f000 fba7 	bl	800a758 <fiprintf>
 800a00a:	f000 fbb7 	bl	800a77c <abort>
 800a00e:	4b04      	ldr	r3, [pc, #16]	@ (800a020 <__assert_func+0x38>)
 800a010:	e7f4      	b.n	8009ffc <__assert_func+0x14>
 800a012:	bf00      	nop
 800a014:	20000018 	.word	0x20000018
 800a018:	0800b0fd 	.word	0x0800b0fd
 800a01c:	0800b0cf 	.word	0x0800b0cf
 800a020:	0800b0c2 	.word	0x0800b0c2

0800a024 <_calloc_r>:
 800a024:	b570      	push	{r4, r5, r6, lr}
 800a026:	fba1 5402 	umull	r5, r4, r1, r2
 800a02a:	b93c      	cbnz	r4, 800a03c <_calloc_r+0x18>
 800a02c:	4629      	mov	r1, r5
 800a02e:	f7fe f9c3 	bl	80083b8 <_malloc_r>
 800a032:	4606      	mov	r6, r0
 800a034:	b928      	cbnz	r0, 800a042 <_calloc_r+0x1e>
 800a036:	2600      	movs	r6, #0
 800a038:	4630      	mov	r0, r6
 800a03a:	bd70      	pop	{r4, r5, r6, pc}
 800a03c:	220c      	movs	r2, #12
 800a03e:	6002      	str	r2, [r0, #0]
 800a040:	e7f9      	b.n	800a036 <_calloc_r+0x12>
 800a042:	462a      	mov	r2, r5
 800a044:	4621      	mov	r1, r4
 800a046:	f7fd fa70 	bl	800752a <memset>
 800a04a:	e7f5      	b.n	800a038 <_calloc_r+0x14>

0800a04c <rshift>:
 800a04c:	6903      	ldr	r3, [r0, #16]
 800a04e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a052:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a056:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a05a:	f100 0414 	add.w	r4, r0, #20
 800a05e:	dd45      	ble.n	800a0ec <rshift+0xa0>
 800a060:	f011 011f 	ands.w	r1, r1, #31
 800a064:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a068:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a06c:	d10c      	bne.n	800a088 <rshift+0x3c>
 800a06e:	f100 0710 	add.w	r7, r0, #16
 800a072:	4629      	mov	r1, r5
 800a074:	42b1      	cmp	r1, r6
 800a076:	d334      	bcc.n	800a0e2 <rshift+0x96>
 800a078:	1a9b      	subs	r3, r3, r2
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	1eea      	subs	r2, r5, #3
 800a07e:	4296      	cmp	r6, r2
 800a080:	bf38      	it	cc
 800a082:	2300      	movcc	r3, #0
 800a084:	4423      	add	r3, r4
 800a086:	e015      	b.n	800a0b4 <rshift+0x68>
 800a088:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a08c:	f1c1 0820 	rsb	r8, r1, #32
 800a090:	40cf      	lsrs	r7, r1
 800a092:	f105 0e04 	add.w	lr, r5, #4
 800a096:	46a1      	mov	r9, r4
 800a098:	4576      	cmp	r6, lr
 800a09a:	46f4      	mov	ip, lr
 800a09c:	d815      	bhi.n	800a0ca <rshift+0x7e>
 800a09e:	1a9a      	subs	r2, r3, r2
 800a0a0:	0092      	lsls	r2, r2, #2
 800a0a2:	3a04      	subs	r2, #4
 800a0a4:	3501      	adds	r5, #1
 800a0a6:	42ae      	cmp	r6, r5
 800a0a8:	bf38      	it	cc
 800a0aa:	2200      	movcc	r2, #0
 800a0ac:	18a3      	adds	r3, r4, r2
 800a0ae:	50a7      	str	r7, [r4, r2]
 800a0b0:	b107      	cbz	r7, 800a0b4 <rshift+0x68>
 800a0b2:	3304      	adds	r3, #4
 800a0b4:	1b1a      	subs	r2, r3, r4
 800a0b6:	42a3      	cmp	r3, r4
 800a0b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a0bc:	bf08      	it	eq
 800a0be:	2300      	moveq	r3, #0
 800a0c0:	6102      	str	r2, [r0, #16]
 800a0c2:	bf08      	it	eq
 800a0c4:	6143      	streq	r3, [r0, #20]
 800a0c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0ca:	f8dc c000 	ldr.w	ip, [ip]
 800a0ce:	fa0c fc08 	lsl.w	ip, ip, r8
 800a0d2:	ea4c 0707 	orr.w	r7, ip, r7
 800a0d6:	f849 7b04 	str.w	r7, [r9], #4
 800a0da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a0de:	40cf      	lsrs	r7, r1
 800a0e0:	e7da      	b.n	800a098 <rshift+0x4c>
 800a0e2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a0e6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a0ea:	e7c3      	b.n	800a074 <rshift+0x28>
 800a0ec:	4623      	mov	r3, r4
 800a0ee:	e7e1      	b.n	800a0b4 <rshift+0x68>

0800a0f0 <__hexdig_fun>:
 800a0f0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a0f4:	2b09      	cmp	r3, #9
 800a0f6:	d802      	bhi.n	800a0fe <__hexdig_fun+0xe>
 800a0f8:	3820      	subs	r0, #32
 800a0fa:	b2c0      	uxtb	r0, r0
 800a0fc:	4770      	bx	lr
 800a0fe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a102:	2b05      	cmp	r3, #5
 800a104:	d801      	bhi.n	800a10a <__hexdig_fun+0x1a>
 800a106:	3847      	subs	r0, #71	@ 0x47
 800a108:	e7f7      	b.n	800a0fa <__hexdig_fun+0xa>
 800a10a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a10e:	2b05      	cmp	r3, #5
 800a110:	d801      	bhi.n	800a116 <__hexdig_fun+0x26>
 800a112:	3827      	subs	r0, #39	@ 0x27
 800a114:	e7f1      	b.n	800a0fa <__hexdig_fun+0xa>
 800a116:	2000      	movs	r0, #0
 800a118:	4770      	bx	lr
	...

0800a11c <__gethex>:
 800a11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a120:	b085      	sub	sp, #20
 800a122:	468a      	mov	sl, r1
 800a124:	9302      	str	r3, [sp, #8]
 800a126:	680b      	ldr	r3, [r1, #0]
 800a128:	9001      	str	r0, [sp, #4]
 800a12a:	4690      	mov	r8, r2
 800a12c:	1c9c      	adds	r4, r3, #2
 800a12e:	46a1      	mov	r9, r4
 800a130:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a134:	2830      	cmp	r0, #48	@ 0x30
 800a136:	d0fa      	beq.n	800a12e <__gethex+0x12>
 800a138:	eba9 0303 	sub.w	r3, r9, r3
 800a13c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a140:	f7ff ffd6 	bl	800a0f0 <__hexdig_fun>
 800a144:	4605      	mov	r5, r0
 800a146:	2800      	cmp	r0, #0
 800a148:	d168      	bne.n	800a21c <__gethex+0x100>
 800a14a:	49a0      	ldr	r1, [pc, #640]	@ (800a3cc <__gethex+0x2b0>)
 800a14c:	2201      	movs	r2, #1
 800a14e:	4648      	mov	r0, r9
 800a150:	f7ff ff12 	bl	8009f78 <strncmp>
 800a154:	4607      	mov	r7, r0
 800a156:	2800      	cmp	r0, #0
 800a158:	d167      	bne.n	800a22a <__gethex+0x10e>
 800a15a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a15e:	4626      	mov	r6, r4
 800a160:	f7ff ffc6 	bl	800a0f0 <__hexdig_fun>
 800a164:	2800      	cmp	r0, #0
 800a166:	d062      	beq.n	800a22e <__gethex+0x112>
 800a168:	4623      	mov	r3, r4
 800a16a:	7818      	ldrb	r0, [r3, #0]
 800a16c:	2830      	cmp	r0, #48	@ 0x30
 800a16e:	4699      	mov	r9, r3
 800a170:	f103 0301 	add.w	r3, r3, #1
 800a174:	d0f9      	beq.n	800a16a <__gethex+0x4e>
 800a176:	f7ff ffbb 	bl	800a0f0 <__hexdig_fun>
 800a17a:	fab0 f580 	clz	r5, r0
 800a17e:	096d      	lsrs	r5, r5, #5
 800a180:	f04f 0b01 	mov.w	fp, #1
 800a184:	464a      	mov	r2, r9
 800a186:	4616      	mov	r6, r2
 800a188:	3201      	adds	r2, #1
 800a18a:	7830      	ldrb	r0, [r6, #0]
 800a18c:	f7ff ffb0 	bl	800a0f0 <__hexdig_fun>
 800a190:	2800      	cmp	r0, #0
 800a192:	d1f8      	bne.n	800a186 <__gethex+0x6a>
 800a194:	498d      	ldr	r1, [pc, #564]	@ (800a3cc <__gethex+0x2b0>)
 800a196:	2201      	movs	r2, #1
 800a198:	4630      	mov	r0, r6
 800a19a:	f7ff feed 	bl	8009f78 <strncmp>
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	d13f      	bne.n	800a222 <__gethex+0x106>
 800a1a2:	b944      	cbnz	r4, 800a1b6 <__gethex+0x9a>
 800a1a4:	1c74      	adds	r4, r6, #1
 800a1a6:	4622      	mov	r2, r4
 800a1a8:	4616      	mov	r6, r2
 800a1aa:	3201      	adds	r2, #1
 800a1ac:	7830      	ldrb	r0, [r6, #0]
 800a1ae:	f7ff ff9f 	bl	800a0f0 <__hexdig_fun>
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	d1f8      	bne.n	800a1a8 <__gethex+0x8c>
 800a1b6:	1ba4      	subs	r4, r4, r6
 800a1b8:	00a7      	lsls	r7, r4, #2
 800a1ba:	7833      	ldrb	r3, [r6, #0]
 800a1bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a1c0:	2b50      	cmp	r3, #80	@ 0x50
 800a1c2:	d13e      	bne.n	800a242 <__gethex+0x126>
 800a1c4:	7873      	ldrb	r3, [r6, #1]
 800a1c6:	2b2b      	cmp	r3, #43	@ 0x2b
 800a1c8:	d033      	beq.n	800a232 <__gethex+0x116>
 800a1ca:	2b2d      	cmp	r3, #45	@ 0x2d
 800a1cc:	d034      	beq.n	800a238 <__gethex+0x11c>
 800a1ce:	1c71      	adds	r1, r6, #1
 800a1d0:	2400      	movs	r4, #0
 800a1d2:	7808      	ldrb	r0, [r1, #0]
 800a1d4:	f7ff ff8c 	bl	800a0f0 <__hexdig_fun>
 800a1d8:	1e43      	subs	r3, r0, #1
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	2b18      	cmp	r3, #24
 800a1de:	d830      	bhi.n	800a242 <__gethex+0x126>
 800a1e0:	f1a0 0210 	sub.w	r2, r0, #16
 800a1e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a1e8:	f7ff ff82 	bl	800a0f0 <__hexdig_fun>
 800a1ec:	f100 3cff 	add.w	ip, r0, #4294967295
 800a1f0:	fa5f fc8c 	uxtb.w	ip, ip
 800a1f4:	f1bc 0f18 	cmp.w	ip, #24
 800a1f8:	f04f 030a 	mov.w	r3, #10
 800a1fc:	d91e      	bls.n	800a23c <__gethex+0x120>
 800a1fe:	b104      	cbz	r4, 800a202 <__gethex+0xe6>
 800a200:	4252      	negs	r2, r2
 800a202:	4417      	add	r7, r2
 800a204:	f8ca 1000 	str.w	r1, [sl]
 800a208:	b1ed      	cbz	r5, 800a246 <__gethex+0x12a>
 800a20a:	f1bb 0f00 	cmp.w	fp, #0
 800a20e:	bf0c      	ite	eq
 800a210:	2506      	moveq	r5, #6
 800a212:	2500      	movne	r5, #0
 800a214:	4628      	mov	r0, r5
 800a216:	b005      	add	sp, #20
 800a218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21c:	2500      	movs	r5, #0
 800a21e:	462c      	mov	r4, r5
 800a220:	e7b0      	b.n	800a184 <__gethex+0x68>
 800a222:	2c00      	cmp	r4, #0
 800a224:	d1c7      	bne.n	800a1b6 <__gethex+0x9a>
 800a226:	4627      	mov	r7, r4
 800a228:	e7c7      	b.n	800a1ba <__gethex+0x9e>
 800a22a:	464e      	mov	r6, r9
 800a22c:	462f      	mov	r7, r5
 800a22e:	2501      	movs	r5, #1
 800a230:	e7c3      	b.n	800a1ba <__gethex+0x9e>
 800a232:	2400      	movs	r4, #0
 800a234:	1cb1      	adds	r1, r6, #2
 800a236:	e7cc      	b.n	800a1d2 <__gethex+0xb6>
 800a238:	2401      	movs	r4, #1
 800a23a:	e7fb      	b.n	800a234 <__gethex+0x118>
 800a23c:	fb03 0002 	mla	r0, r3, r2, r0
 800a240:	e7ce      	b.n	800a1e0 <__gethex+0xc4>
 800a242:	4631      	mov	r1, r6
 800a244:	e7de      	b.n	800a204 <__gethex+0xe8>
 800a246:	eba6 0309 	sub.w	r3, r6, r9
 800a24a:	3b01      	subs	r3, #1
 800a24c:	4629      	mov	r1, r5
 800a24e:	2b07      	cmp	r3, #7
 800a250:	dc0a      	bgt.n	800a268 <__gethex+0x14c>
 800a252:	9801      	ldr	r0, [sp, #4]
 800a254:	f7fe f93c 	bl	80084d0 <_Balloc>
 800a258:	4604      	mov	r4, r0
 800a25a:	b940      	cbnz	r0, 800a26e <__gethex+0x152>
 800a25c:	4b5c      	ldr	r3, [pc, #368]	@ (800a3d0 <__gethex+0x2b4>)
 800a25e:	4602      	mov	r2, r0
 800a260:	21e4      	movs	r1, #228	@ 0xe4
 800a262:	485c      	ldr	r0, [pc, #368]	@ (800a3d4 <__gethex+0x2b8>)
 800a264:	f7ff fec0 	bl	8009fe8 <__assert_func>
 800a268:	3101      	adds	r1, #1
 800a26a:	105b      	asrs	r3, r3, #1
 800a26c:	e7ef      	b.n	800a24e <__gethex+0x132>
 800a26e:	f100 0a14 	add.w	sl, r0, #20
 800a272:	2300      	movs	r3, #0
 800a274:	4655      	mov	r5, sl
 800a276:	469b      	mov	fp, r3
 800a278:	45b1      	cmp	r9, r6
 800a27a:	d337      	bcc.n	800a2ec <__gethex+0x1d0>
 800a27c:	f845 bb04 	str.w	fp, [r5], #4
 800a280:	eba5 050a 	sub.w	r5, r5, sl
 800a284:	10ad      	asrs	r5, r5, #2
 800a286:	6125      	str	r5, [r4, #16]
 800a288:	4658      	mov	r0, fp
 800a28a:	f7fe fa13 	bl	80086b4 <__hi0bits>
 800a28e:	016d      	lsls	r5, r5, #5
 800a290:	f8d8 6000 	ldr.w	r6, [r8]
 800a294:	1a2d      	subs	r5, r5, r0
 800a296:	42b5      	cmp	r5, r6
 800a298:	dd54      	ble.n	800a344 <__gethex+0x228>
 800a29a:	1bad      	subs	r5, r5, r6
 800a29c:	4629      	mov	r1, r5
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f7fe fda7 	bl	8008df2 <__any_on>
 800a2a4:	4681      	mov	r9, r0
 800a2a6:	b178      	cbz	r0, 800a2c8 <__gethex+0x1ac>
 800a2a8:	1e6b      	subs	r3, r5, #1
 800a2aa:	1159      	asrs	r1, r3, #5
 800a2ac:	f003 021f 	and.w	r2, r3, #31
 800a2b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a2b4:	f04f 0901 	mov.w	r9, #1
 800a2b8:	fa09 f202 	lsl.w	r2, r9, r2
 800a2bc:	420a      	tst	r2, r1
 800a2be:	d003      	beq.n	800a2c8 <__gethex+0x1ac>
 800a2c0:	454b      	cmp	r3, r9
 800a2c2:	dc36      	bgt.n	800a332 <__gethex+0x216>
 800a2c4:	f04f 0902 	mov.w	r9, #2
 800a2c8:	4629      	mov	r1, r5
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f7ff febe 	bl	800a04c <rshift>
 800a2d0:	442f      	add	r7, r5
 800a2d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a2d6:	42bb      	cmp	r3, r7
 800a2d8:	da42      	bge.n	800a360 <__gethex+0x244>
 800a2da:	9801      	ldr	r0, [sp, #4]
 800a2dc:	4621      	mov	r1, r4
 800a2de:	f7fe f937 	bl	8008550 <_Bfree>
 800a2e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	6013      	str	r3, [r2, #0]
 800a2e8:	25a3      	movs	r5, #163	@ 0xa3
 800a2ea:	e793      	b.n	800a214 <__gethex+0xf8>
 800a2ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a2f0:	2a2e      	cmp	r2, #46	@ 0x2e
 800a2f2:	d012      	beq.n	800a31a <__gethex+0x1fe>
 800a2f4:	2b20      	cmp	r3, #32
 800a2f6:	d104      	bne.n	800a302 <__gethex+0x1e6>
 800a2f8:	f845 bb04 	str.w	fp, [r5], #4
 800a2fc:	f04f 0b00 	mov.w	fp, #0
 800a300:	465b      	mov	r3, fp
 800a302:	7830      	ldrb	r0, [r6, #0]
 800a304:	9303      	str	r3, [sp, #12]
 800a306:	f7ff fef3 	bl	800a0f0 <__hexdig_fun>
 800a30a:	9b03      	ldr	r3, [sp, #12]
 800a30c:	f000 000f 	and.w	r0, r0, #15
 800a310:	4098      	lsls	r0, r3
 800a312:	ea4b 0b00 	orr.w	fp, fp, r0
 800a316:	3304      	adds	r3, #4
 800a318:	e7ae      	b.n	800a278 <__gethex+0x15c>
 800a31a:	45b1      	cmp	r9, r6
 800a31c:	d8ea      	bhi.n	800a2f4 <__gethex+0x1d8>
 800a31e:	492b      	ldr	r1, [pc, #172]	@ (800a3cc <__gethex+0x2b0>)
 800a320:	9303      	str	r3, [sp, #12]
 800a322:	2201      	movs	r2, #1
 800a324:	4630      	mov	r0, r6
 800a326:	f7ff fe27 	bl	8009f78 <strncmp>
 800a32a:	9b03      	ldr	r3, [sp, #12]
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d1e1      	bne.n	800a2f4 <__gethex+0x1d8>
 800a330:	e7a2      	b.n	800a278 <__gethex+0x15c>
 800a332:	1ea9      	subs	r1, r5, #2
 800a334:	4620      	mov	r0, r4
 800a336:	f7fe fd5c 	bl	8008df2 <__any_on>
 800a33a:	2800      	cmp	r0, #0
 800a33c:	d0c2      	beq.n	800a2c4 <__gethex+0x1a8>
 800a33e:	f04f 0903 	mov.w	r9, #3
 800a342:	e7c1      	b.n	800a2c8 <__gethex+0x1ac>
 800a344:	da09      	bge.n	800a35a <__gethex+0x23e>
 800a346:	1b75      	subs	r5, r6, r5
 800a348:	4621      	mov	r1, r4
 800a34a:	9801      	ldr	r0, [sp, #4]
 800a34c:	462a      	mov	r2, r5
 800a34e:	f7fe fb17 	bl	8008980 <__lshift>
 800a352:	1b7f      	subs	r7, r7, r5
 800a354:	4604      	mov	r4, r0
 800a356:	f100 0a14 	add.w	sl, r0, #20
 800a35a:	f04f 0900 	mov.w	r9, #0
 800a35e:	e7b8      	b.n	800a2d2 <__gethex+0x1b6>
 800a360:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a364:	42bd      	cmp	r5, r7
 800a366:	dd6f      	ble.n	800a448 <__gethex+0x32c>
 800a368:	1bed      	subs	r5, r5, r7
 800a36a:	42ae      	cmp	r6, r5
 800a36c:	dc34      	bgt.n	800a3d8 <__gethex+0x2bc>
 800a36e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a372:	2b02      	cmp	r3, #2
 800a374:	d022      	beq.n	800a3bc <__gethex+0x2a0>
 800a376:	2b03      	cmp	r3, #3
 800a378:	d024      	beq.n	800a3c4 <__gethex+0x2a8>
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d115      	bne.n	800a3aa <__gethex+0x28e>
 800a37e:	42ae      	cmp	r6, r5
 800a380:	d113      	bne.n	800a3aa <__gethex+0x28e>
 800a382:	2e01      	cmp	r6, #1
 800a384:	d10b      	bne.n	800a39e <__gethex+0x282>
 800a386:	9a02      	ldr	r2, [sp, #8]
 800a388:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a38c:	6013      	str	r3, [r2, #0]
 800a38e:	2301      	movs	r3, #1
 800a390:	6123      	str	r3, [r4, #16]
 800a392:	f8ca 3000 	str.w	r3, [sl]
 800a396:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a398:	2562      	movs	r5, #98	@ 0x62
 800a39a:	601c      	str	r4, [r3, #0]
 800a39c:	e73a      	b.n	800a214 <__gethex+0xf8>
 800a39e:	1e71      	subs	r1, r6, #1
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f7fe fd26 	bl	8008df2 <__any_on>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d1ed      	bne.n	800a386 <__gethex+0x26a>
 800a3aa:	9801      	ldr	r0, [sp, #4]
 800a3ac:	4621      	mov	r1, r4
 800a3ae:	f7fe f8cf 	bl	8008550 <_Bfree>
 800a3b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	6013      	str	r3, [r2, #0]
 800a3b8:	2550      	movs	r5, #80	@ 0x50
 800a3ba:	e72b      	b.n	800a214 <__gethex+0xf8>
 800a3bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1f3      	bne.n	800a3aa <__gethex+0x28e>
 800a3c2:	e7e0      	b.n	800a386 <__gethex+0x26a>
 800a3c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1dd      	bne.n	800a386 <__gethex+0x26a>
 800a3ca:	e7ee      	b.n	800a3aa <__gethex+0x28e>
 800a3cc:	0800af50 	.word	0x0800af50
 800a3d0:	0800ade5 	.word	0x0800ade5
 800a3d4:	0800b0fe 	.word	0x0800b0fe
 800a3d8:	1e6f      	subs	r7, r5, #1
 800a3da:	f1b9 0f00 	cmp.w	r9, #0
 800a3de:	d130      	bne.n	800a442 <__gethex+0x326>
 800a3e0:	b127      	cbz	r7, 800a3ec <__gethex+0x2d0>
 800a3e2:	4639      	mov	r1, r7
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f7fe fd04 	bl	8008df2 <__any_on>
 800a3ea:	4681      	mov	r9, r0
 800a3ec:	117a      	asrs	r2, r7, #5
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a3f4:	f007 071f 	and.w	r7, r7, #31
 800a3f8:	40bb      	lsls	r3, r7
 800a3fa:	4213      	tst	r3, r2
 800a3fc:	4629      	mov	r1, r5
 800a3fe:	4620      	mov	r0, r4
 800a400:	bf18      	it	ne
 800a402:	f049 0902 	orrne.w	r9, r9, #2
 800a406:	f7ff fe21 	bl	800a04c <rshift>
 800a40a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a40e:	1b76      	subs	r6, r6, r5
 800a410:	2502      	movs	r5, #2
 800a412:	f1b9 0f00 	cmp.w	r9, #0
 800a416:	d047      	beq.n	800a4a8 <__gethex+0x38c>
 800a418:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d015      	beq.n	800a44c <__gethex+0x330>
 800a420:	2b03      	cmp	r3, #3
 800a422:	d017      	beq.n	800a454 <__gethex+0x338>
 800a424:	2b01      	cmp	r3, #1
 800a426:	d109      	bne.n	800a43c <__gethex+0x320>
 800a428:	f019 0f02 	tst.w	r9, #2
 800a42c:	d006      	beq.n	800a43c <__gethex+0x320>
 800a42e:	f8da 3000 	ldr.w	r3, [sl]
 800a432:	ea49 0903 	orr.w	r9, r9, r3
 800a436:	f019 0f01 	tst.w	r9, #1
 800a43a:	d10e      	bne.n	800a45a <__gethex+0x33e>
 800a43c:	f045 0510 	orr.w	r5, r5, #16
 800a440:	e032      	b.n	800a4a8 <__gethex+0x38c>
 800a442:	f04f 0901 	mov.w	r9, #1
 800a446:	e7d1      	b.n	800a3ec <__gethex+0x2d0>
 800a448:	2501      	movs	r5, #1
 800a44a:	e7e2      	b.n	800a412 <__gethex+0x2f6>
 800a44c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a44e:	f1c3 0301 	rsb	r3, r3, #1
 800a452:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a456:	2b00      	cmp	r3, #0
 800a458:	d0f0      	beq.n	800a43c <__gethex+0x320>
 800a45a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a45e:	f104 0314 	add.w	r3, r4, #20
 800a462:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a466:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a46a:	f04f 0c00 	mov.w	ip, #0
 800a46e:	4618      	mov	r0, r3
 800a470:	f853 2b04 	ldr.w	r2, [r3], #4
 800a474:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a478:	d01b      	beq.n	800a4b2 <__gethex+0x396>
 800a47a:	3201      	adds	r2, #1
 800a47c:	6002      	str	r2, [r0, #0]
 800a47e:	2d02      	cmp	r5, #2
 800a480:	f104 0314 	add.w	r3, r4, #20
 800a484:	d13c      	bne.n	800a500 <__gethex+0x3e4>
 800a486:	f8d8 2000 	ldr.w	r2, [r8]
 800a48a:	3a01      	subs	r2, #1
 800a48c:	42b2      	cmp	r2, r6
 800a48e:	d109      	bne.n	800a4a4 <__gethex+0x388>
 800a490:	1171      	asrs	r1, r6, #5
 800a492:	2201      	movs	r2, #1
 800a494:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a498:	f006 061f 	and.w	r6, r6, #31
 800a49c:	fa02 f606 	lsl.w	r6, r2, r6
 800a4a0:	421e      	tst	r6, r3
 800a4a2:	d13a      	bne.n	800a51a <__gethex+0x3fe>
 800a4a4:	f045 0520 	orr.w	r5, r5, #32
 800a4a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4aa:	601c      	str	r4, [r3, #0]
 800a4ac:	9b02      	ldr	r3, [sp, #8]
 800a4ae:	601f      	str	r7, [r3, #0]
 800a4b0:	e6b0      	b.n	800a214 <__gethex+0xf8>
 800a4b2:	4299      	cmp	r1, r3
 800a4b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a4b8:	d8d9      	bhi.n	800a46e <__gethex+0x352>
 800a4ba:	68a3      	ldr	r3, [r4, #8]
 800a4bc:	459b      	cmp	fp, r3
 800a4be:	db17      	blt.n	800a4f0 <__gethex+0x3d4>
 800a4c0:	6861      	ldr	r1, [r4, #4]
 800a4c2:	9801      	ldr	r0, [sp, #4]
 800a4c4:	3101      	adds	r1, #1
 800a4c6:	f7fe f803 	bl	80084d0 <_Balloc>
 800a4ca:	4681      	mov	r9, r0
 800a4cc:	b918      	cbnz	r0, 800a4d6 <__gethex+0x3ba>
 800a4ce:	4b1a      	ldr	r3, [pc, #104]	@ (800a538 <__gethex+0x41c>)
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	2184      	movs	r1, #132	@ 0x84
 800a4d4:	e6c5      	b.n	800a262 <__gethex+0x146>
 800a4d6:	6922      	ldr	r2, [r4, #16]
 800a4d8:	3202      	adds	r2, #2
 800a4da:	f104 010c 	add.w	r1, r4, #12
 800a4de:	0092      	lsls	r2, r2, #2
 800a4e0:	300c      	adds	r0, #12
 800a4e2:	f7ff fd6b 	bl	8009fbc <memcpy>
 800a4e6:	4621      	mov	r1, r4
 800a4e8:	9801      	ldr	r0, [sp, #4]
 800a4ea:	f7fe f831 	bl	8008550 <_Bfree>
 800a4ee:	464c      	mov	r4, r9
 800a4f0:	6923      	ldr	r3, [r4, #16]
 800a4f2:	1c5a      	adds	r2, r3, #1
 800a4f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a4f8:	6122      	str	r2, [r4, #16]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	615a      	str	r2, [r3, #20]
 800a4fe:	e7be      	b.n	800a47e <__gethex+0x362>
 800a500:	6922      	ldr	r2, [r4, #16]
 800a502:	455a      	cmp	r2, fp
 800a504:	dd0b      	ble.n	800a51e <__gethex+0x402>
 800a506:	2101      	movs	r1, #1
 800a508:	4620      	mov	r0, r4
 800a50a:	f7ff fd9f 	bl	800a04c <rshift>
 800a50e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a512:	3701      	adds	r7, #1
 800a514:	42bb      	cmp	r3, r7
 800a516:	f6ff aee0 	blt.w	800a2da <__gethex+0x1be>
 800a51a:	2501      	movs	r5, #1
 800a51c:	e7c2      	b.n	800a4a4 <__gethex+0x388>
 800a51e:	f016 061f 	ands.w	r6, r6, #31
 800a522:	d0fa      	beq.n	800a51a <__gethex+0x3fe>
 800a524:	4453      	add	r3, sl
 800a526:	f1c6 0620 	rsb	r6, r6, #32
 800a52a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a52e:	f7fe f8c1 	bl	80086b4 <__hi0bits>
 800a532:	42b0      	cmp	r0, r6
 800a534:	dbe7      	blt.n	800a506 <__gethex+0x3ea>
 800a536:	e7f0      	b.n	800a51a <__gethex+0x3fe>
 800a538:	0800ade5 	.word	0x0800ade5

0800a53c <L_shift>:
 800a53c:	f1c2 0208 	rsb	r2, r2, #8
 800a540:	0092      	lsls	r2, r2, #2
 800a542:	b570      	push	{r4, r5, r6, lr}
 800a544:	f1c2 0620 	rsb	r6, r2, #32
 800a548:	6843      	ldr	r3, [r0, #4]
 800a54a:	6804      	ldr	r4, [r0, #0]
 800a54c:	fa03 f506 	lsl.w	r5, r3, r6
 800a550:	432c      	orrs	r4, r5
 800a552:	40d3      	lsrs	r3, r2
 800a554:	6004      	str	r4, [r0, #0]
 800a556:	f840 3f04 	str.w	r3, [r0, #4]!
 800a55a:	4288      	cmp	r0, r1
 800a55c:	d3f4      	bcc.n	800a548 <L_shift+0xc>
 800a55e:	bd70      	pop	{r4, r5, r6, pc}

0800a560 <__match>:
 800a560:	b530      	push	{r4, r5, lr}
 800a562:	6803      	ldr	r3, [r0, #0]
 800a564:	3301      	adds	r3, #1
 800a566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a56a:	b914      	cbnz	r4, 800a572 <__match+0x12>
 800a56c:	6003      	str	r3, [r0, #0]
 800a56e:	2001      	movs	r0, #1
 800a570:	bd30      	pop	{r4, r5, pc}
 800a572:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a576:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a57a:	2d19      	cmp	r5, #25
 800a57c:	bf98      	it	ls
 800a57e:	3220      	addls	r2, #32
 800a580:	42a2      	cmp	r2, r4
 800a582:	d0f0      	beq.n	800a566 <__match+0x6>
 800a584:	2000      	movs	r0, #0
 800a586:	e7f3      	b.n	800a570 <__match+0x10>

0800a588 <__hexnan>:
 800a588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a58c:	680b      	ldr	r3, [r1, #0]
 800a58e:	6801      	ldr	r1, [r0, #0]
 800a590:	115e      	asrs	r6, r3, #5
 800a592:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a596:	f013 031f 	ands.w	r3, r3, #31
 800a59a:	b087      	sub	sp, #28
 800a59c:	bf18      	it	ne
 800a59e:	3604      	addne	r6, #4
 800a5a0:	2500      	movs	r5, #0
 800a5a2:	1f37      	subs	r7, r6, #4
 800a5a4:	4682      	mov	sl, r0
 800a5a6:	4690      	mov	r8, r2
 800a5a8:	9301      	str	r3, [sp, #4]
 800a5aa:	f846 5c04 	str.w	r5, [r6, #-4]
 800a5ae:	46b9      	mov	r9, r7
 800a5b0:	463c      	mov	r4, r7
 800a5b2:	9502      	str	r5, [sp, #8]
 800a5b4:	46ab      	mov	fp, r5
 800a5b6:	784a      	ldrb	r2, [r1, #1]
 800a5b8:	1c4b      	adds	r3, r1, #1
 800a5ba:	9303      	str	r3, [sp, #12]
 800a5bc:	b342      	cbz	r2, 800a610 <__hexnan+0x88>
 800a5be:	4610      	mov	r0, r2
 800a5c0:	9105      	str	r1, [sp, #20]
 800a5c2:	9204      	str	r2, [sp, #16]
 800a5c4:	f7ff fd94 	bl	800a0f0 <__hexdig_fun>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d151      	bne.n	800a670 <__hexnan+0xe8>
 800a5cc:	9a04      	ldr	r2, [sp, #16]
 800a5ce:	9905      	ldr	r1, [sp, #20]
 800a5d0:	2a20      	cmp	r2, #32
 800a5d2:	d818      	bhi.n	800a606 <__hexnan+0x7e>
 800a5d4:	9b02      	ldr	r3, [sp, #8]
 800a5d6:	459b      	cmp	fp, r3
 800a5d8:	dd13      	ble.n	800a602 <__hexnan+0x7a>
 800a5da:	454c      	cmp	r4, r9
 800a5dc:	d206      	bcs.n	800a5ec <__hexnan+0x64>
 800a5de:	2d07      	cmp	r5, #7
 800a5e0:	dc04      	bgt.n	800a5ec <__hexnan+0x64>
 800a5e2:	462a      	mov	r2, r5
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f7ff ffa8 	bl	800a53c <L_shift>
 800a5ec:	4544      	cmp	r4, r8
 800a5ee:	d952      	bls.n	800a696 <__hexnan+0x10e>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f1a4 0904 	sub.w	r9, r4, #4
 800a5f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a5fa:	f8cd b008 	str.w	fp, [sp, #8]
 800a5fe:	464c      	mov	r4, r9
 800a600:	461d      	mov	r5, r3
 800a602:	9903      	ldr	r1, [sp, #12]
 800a604:	e7d7      	b.n	800a5b6 <__hexnan+0x2e>
 800a606:	2a29      	cmp	r2, #41	@ 0x29
 800a608:	d157      	bne.n	800a6ba <__hexnan+0x132>
 800a60a:	3102      	adds	r1, #2
 800a60c:	f8ca 1000 	str.w	r1, [sl]
 800a610:	f1bb 0f00 	cmp.w	fp, #0
 800a614:	d051      	beq.n	800a6ba <__hexnan+0x132>
 800a616:	454c      	cmp	r4, r9
 800a618:	d206      	bcs.n	800a628 <__hexnan+0xa0>
 800a61a:	2d07      	cmp	r5, #7
 800a61c:	dc04      	bgt.n	800a628 <__hexnan+0xa0>
 800a61e:	462a      	mov	r2, r5
 800a620:	4649      	mov	r1, r9
 800a622:	4620      	mov	r0, r4
 800a624:	f7ff ff8a 	bl	800a53c <L_shift>
 800a628:	4544      	cmp	r4, r8
 800a62a:	d936      	bls.n	800a69a <__hexnan+0x112>
 800a62c:	f1a8 0204 	sub.w	r2, r8, #4
 800a630:	4623      	mov	r3, r4
 800a632:	f853 1b04 	ldr.w	r1, [r3], #4
 800a636:	f842 1f04 	str.w	r1, [r2, #4]!
 800a63a:	429f      	cmp	r7, r3
 800a63c:	d2f9      	bcs.n	800a632 <__hexnan+0xaa>
 800a63e:	1b3b      	subs	r3, r7, r4
 800a640:	f023 0303 	bic.w	r3, r3, #3
 800a644:	3304      	adds	r3, #4
 800a646:	3401      	adds	r4, #1
 800a648:	3e03      	subs	r6, #3
 800a64a:	42b4      	cmp	r4, r6
 800a64c:	bf88      	it	hi
 800a64e:	2304      	movhi	r3, #4
 800a650:	4443      	add	r3, r8
 800a652:	2200      	movs	r2, #0
 800a654:	f843 2b04 	str.w	r2, [r3], #4
 800a658:	429f      	cmp	r7, r3
 800a65a:	d2fb      	bcs.n	800a654 <__hexnan+0xcc>
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	b91b      	cbnz	r3, 800a668 <__hexnan+0xe0>
 800a660:	4547      	cmp	r7, r8
 800a662:	d128      	bne.n	800a6b6 <__hexnan+0x12e>
 800a664:	2301      	movs	r3, #1
 800a666:	603b      	str	r3, [r7, #0]
 800a668:	2005      	movs	r0, #5
 800a66a:	b007      	add	sp, #28
 800a66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a670:	3501      	adds	r5, #1
 800a672:	2d08      	cmp	r5, #8
 800a674:	f10b 0b01 	add.w	fp, fp, #1
 800a678:	dd06      	ble.n	800a688 <__hexnan+0x100>
 800a67a:	4544      	cmp	r4, r8
 800a67c:	d9c1      	bls.n	800a602 <__hexnan+0x7a>
 800a67e:	2300      	movs	r3, #0
 800a680:	f844 3c04 	str.w	r3, [r4, #-4]
 800a684:	2501      	movs	r5, #1
 800a686:	3c04      	subs	r4, #4
 800a688:	6822      	ldr	r2, [r4, #0]
 800a68a:	f000 000f 	and.w	r0, r0, #15
 800a68e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a692:	6020      	str	r0, [r4, #0]
 800a694:	e7b5      	b.n	800a602 <__hexnan+0x7a>
 800a696:	2508      	movs	r5, #8
 800a698:	e7b3      	b.n	800a602 <__hexnan+0x7a>
 800a69a:	9b01      	ldr	r3, [sp, #4]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d0dd      	beq.n	800a65c <__hexnan+0xd4>
 800a6a0:	f1c3 0320 	rsb	r3, r3, #32
 800a6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6a8:	40da      	lsrs	r2, r3
 800a6aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a6b4:	e7d2      	b.n	800a65c <__hexnan+0xd4>
 800a6b6:	3f04      	subs	r7, #4
 800a6b8:	e7d0      	b.n	800a65c <__hexnan+0xd4>
 800a6ba:	2004      	movs	r0, #4
 800a6bc:	e7d5      	b.n	800a66a <__hexnan+0xe2>

0800a6be <__ascii_mbtowc>:
 800a6be:	b082      	sub	sp, #8
 800a6c0:	b901      	cbnz	r1, 800a6c4 <__ascii_mbtowc+0x6>
 800a6c2:	a901      	add	r1, sp, #4
 800a6c4:	b142      	cbz	r2, 800a6d8 <__ascii_mbtowc+0x1a>
 800a6c6:	b14b      	cbz	r3, 800a6dc <__ascii_mbtowc+0x1e>
 800a6c8:	7813      	ldrb	r3, [r2, #0]
 800a6ca:	600b      	str	r3, [r1, #0]
 800a6cc:	7812      	ldrb	r2, [r2, #0]
 800a6ce:	1e10      	subs	r0, r2, #0
 800a6d0:	bf18      	it	ne
 800a6d2:	2001      	movne	r0, #1
 800a6d4:	b002      	add	sp, #8
 800a6d6:	4770      	bx	lr
 800a6d8:	4610      	mov	r0, r2
 800a6da:	e7fb      	b.n	800a6d4 <__ascii_mbtowc+0x16>
 800a6dc:	f06f 0001 	mvn.w	r0, #1
 800a6e0:	e7f8      	b.n	800a6d4 <__ascii_mbtowc+0x16>

0800a6e2 <_realloc_r>:
 800a6e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e6:	4680      	mov	r8, r0
 800a6e8:	4615      	mov	r5, r2
 800a6ea:	460c      	mov	r4, r1
 800a6ec:	b921      	cbnz	r1, 800a6f8 <_realloc_r+0x16>
 800a6ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	f7fd be60 	b.w	80083b8 <_malloc_r>
 800a6f8:	b92a      	cbnz	r2, 800a706 <_realloc_r+0x24>
 800a6fa:	f7fd fde9 	bl	80082d0 <_free_r>
 800a6fe:	2400      	movs	r4, #0
 800a700:	4620      	mov	r0, r4
 800a702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a706:	f000 f840 	bl	800a78a <_malloc_usable_size_r>
 800a70a:	4285      	cmp	r5, r0
 800a70c:	4606      	mov	r6, r0
 800a70e:	d802      	bhi.n	800a716 <_realloc_r+0x34>
 800a710:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a714:	d8f4      	bhi.n	800a700 <_realloc_r+0x1e>
 800a716:	4629      	mov	r1, r5
 800a718:	4640      	mov	r0, r8
 800a71a:	f7fd fe4d 	bl	80083b8 <_malloc_r>
 800a71e:	4607      	mov	r7, r0
 800a720:	2800      	cmp	r0, #0
 800a722:	d0ec      	beq.n	800a6fe <_realloc_r+0x1c>
 800a724:	42b5      	cmp	r5, r6
 800a726:	462a      	mov	r2, r5
 800a728:	4621      	mov	r1, r4
 800a72a:	bf28      	it	cs
 800a72c:	4632      	movcs	r2, r6
 800a72e:	f7ff fc45 	bl	8009fbc <memcpy>
 800a732:	4621      	mov	r1, r4
 800a734:	4640      	mov	r0, r8
 800a736:	f7fd fdcb 	bl	80082d0 <_free_r>
 800a73a:	463c      	mov	r4, r7
 800a73c:	e7e0      	b.n	800a700 <_realloc_r+0x1e>

0800a73e <__ascii_wctomb>:
 800a73e:	4603      	mov	r3, r0
 800a740:	4608      	mov	r0, r1
 800a742:	b141      	cbz	r1, 800a756 <__ascii_wctomb+0x18>
 800a744:	2aff      	cmp	r2, #255	@ 0xff
 800a746:	d904      	bls.n	800a752 <__ascii_wctomb+0x14>
 800a748:	228a      	movs	r2, #138	@ 0x8a
 800a74a:	601a      	str	r2, [r3, #0]
 800a74c:	f04f 30ff 	mov.w	r0, #4294967295
 800a750:	4770      	bx	lr
 800a752:	700a      	strb	r2, [r1, #0]
 800a754:	2001      	movs	r0, #1
 800a756:	4770      	bx	lr

0800a758 <fiprintf>:
 800a758:	b40e      	push	{r1, r2, r3}
 800a75a:	b503      	push	{r0, r1, lr}
 800a75c:	4601      	mov	r1, r0
 800a75e:	ab03      	add	r3, sp, #12
 800a760:	4805      	ldr	r0, [pc, #20]	@ (800a778 <fiprintf+0x20>)
 800a762:	f853 2b04 	ldr.w	r2, [r3], #4
 800a766:	6800      	ldr	r0, [r0, #0]
 800a768:	9301      	str	r3, [sp, #4]
 800a76a:	f000 f83f 	bl	800a7ec <_vfiprintf_r>
 800a76e:	b002      	add	sp, #8
 800a770:	f85d eb04 	ldr.w	lr, [sp], #4
 800a774:	b003      	add	sp, #12
 800a776:	4770      	bx	lr
 800a778:	20000018 	.word	0x20000018

0800a77c <abort>:
 800a77c:	b508      	push	{r3, lr}
 800a77e:	2006      	movs	r0, #6
 800a780:	f000 fa08 	bl	800ab94 <raise>
 800a784:	2001      	movs	r0, #1
 800a786:	f7f6 ff3c 	bl	8001602 <_exit>

0800a78a <_malloc_usable_size_r>:
 800a78a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a78e:	1f18      	subs	r0, r3, #4
 800a790:	2b00      	cmp	r3, #0
 800a792:	bfbc      	itt	lt
 800a794:	580b      	ldrlt	r3, [r1, r0]
 800a796:	18c0      	addlt	r0, r0, r3
 800a798:	4770      	bx	lr

0800a79a <__sfputc_r>:
 800a79a:	6893      	ldr	r3, [r2, #8]
 800a79c:	3b01      	subs	r3, #1
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	b410      	push	{r4}
 800a7a2:	6093      	str	r3, [r2, #8]
 800a7a4:	da08      	bge.n	800a7b8 <__sfputc_r+0x1e>
 800a7a6:	6994      	ldr	r4, [r2, #24]
 800a7a8:	42a3      	cmp	r3, r4
 800a7aa:	db01      	blt.n	800a7b0 <__sfputc_r+0x16>
 800a7ac:	290a      	cmp	r1, #10
 800a7ae:	d103      	bne.n	800a7b8 <__sfputc_r+0x1e>
 800a7b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7b4:	f000 b932 	b.w	800aa1c <__swbuf_r>
 800a7b8:	6813      	ldr	r3, [r2, #0]
 800a7ba:	1c58      	adds	r0, r3, #1
 800a7bc:	6010      	str	r0, [r2, #0]
 800a7be:	7019      	strb	r1, [r3, #0]
 800a7c0:	4608      	mov	r0, r1
 800a7c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <__sfputs_r>:
 800a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ca:	4606      	mov	r6, r0
 800a7cc:	460f      	mov	r7, r1
 800a7ce:	4614      	mov	r4, r2
 800a7d0:	18d5      	adds	r5, r2, r3
 800a7d2:	42ac      	cmp	r4, r5
 800a7d4:	d101      	bne.n	800a7da <__sfputs_r+0x12>
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	e007      	b.n	800a7ea <__sfputs_r+0x22>
 800a7da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7de:	463a      	mov	r2, r7
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f7ff ffda 	bl	800a79a <__sfputc_r>
 800a7e6:	1c43      	adds	r3, r0, #1
 800a7e8:	d1f3      	bne.n	800a7d2 <__sfputs_r+0xa>
 800a7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a7ec <_vfiprintf_r>:
 800a7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f0:	460d      	mov	r5, r1
 800a7f2:	b09d      	sub	sp, #116	@ 0x74
 800a7f4:	4614      	mov	r4, r2
 800a7f6:	4698      	mov	r8, r3
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	b118      	cbz	r0, 800a804 <_vfiprintf_r+0x18>
 800a7fc:	6a03      	ldr	r3, [r0, #32]
 800a7fe:	b90b      	cbnz	r3, 800a804 <_vfiprintf_r+0x18>
 800a800:	f7fc fdfa 	bl	80073f8 <__sinit>
 800a804:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a806:	07d9      	lsls	r1, r3, #31
 800a808:	d405      	bmi.n	800a816 <_vfiprintf_r+0x2a>
 800a80a:	89ab      	ldrh	r3, [r5, #12]
 800a80c:	059a      	lsls	r2, r3, #22
 800a80e:	d402      	bmi.n	800a816 <_vfiprintf_r+0x2a>
 800a810:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a812:	f7fc ff08 	bl	8007626 <__retarget_lock_acquire_recursive>
 800a816:	89ab      	ldrh	r3, [r5, #12]
 800a818:	071b      	lsls	r3, r3, #28
 800a81a:	d501      	bpl.n	800a820 <_vfiprintf_r+0x34>
 800a81c:	692b      	ldr	r3, [r5, #16]
 800a81e:	b99b      	cbnz	r3, 800a848 <_vfiprintf_r+0x5c>
 800a820:	4629      	mov	r1, r5
 800a822:	4630      	mov	r0, r6
 800a824:	f000 f938 	bl	800aa98 <__swsetup_r>
 800a828:	b170      	cbz	r0, 800a848 <_vfiprintf_r+0x5c>
 800a82a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a82c:	07dc      	lsls	r4, r3, #31
 800a82e:	d504      	bpl.n	800a83a <_vfiprintf_r+0x4e>
 800a830:	f04f 30ff 	mov.w	r0, #4294967295
 800a834:	b01d      	add	sp, #116	@ 0x74
 800a836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a83a:	89ab      	ldrh	r3, [r5, #12]
 800a83c:	0598      	lsls	r0, r3, #22
 800a83e:	d4f7      	bmi.n	800a830 <_vfiprintf_r+0x44>
 800a840:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a842:	f7fc fef1 	bl	8007628 <__retarget_lock_release_recursive>
 800a846:	e7f3      	b.n	800a830 <_vfiprintf_r+0x44>
 800a848:	2300      	movs	r3, #0
 800a84a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a84c:	2320      	movs	r3, #32
 800a84e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a852:	f8cd 800c 	str.w	r8, [sp, #12]
 800a856:	2330      	movs	r3, #48	@ 0x30
 800a858:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aa08 <_vfiprintf_r+0x21c>
 800a85c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a860:	f04f 0901 	mov.w	r9, #1
 800a864:	4623      	mov	r3, r4
 800a866:	469a      	mov	sl, r3
 800a868:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a86c:	b10a      	cbz	r2, 800a872 <_vfiprintf_r+0x86>
 800a86e:	2a25      	cmp	r2, #37	@ 0x25
 800a870:	d1f9      	bne.n	800a866 <_vfiprintf_r+0x7a>
 800a872:	ebba 0b04 	subs.w	fp, sl, r4
 800a876:	d00b      	beq.n	800a890 <_vfiprintf_r+0xa4>
 800a878:	465b      	mov	r3, fp
 800a87a:	4622      	mov	r2, r4
 800a87c:	4629      	mov	r1, r5
 800a87e:	4630      	mov	r0, r6
 800a880:	f7ff ffa2 	bl	800a7c8 <__sfputs_r>
 800a884:	3001      	adds	r0, #1
 800a886:	f000 80a7 	beq.w	800a9d8 <_vfiprintf_r+0x1ec>
 800a88a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a88c:	445a      	add	r2, fp
 800a88e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a890:	f89a 3000 	ldrb.w	r3, [sl]
 800a894:	2b00      	cmp	r3, #0
 800a896:	f000 809f 	beq.w	800a9d8 <_vfiprintf_r+0x1ec>
 800a89a:	2300      	movs	r3, #0
 800a89c:	f04f 32ff 	mov.w	r2, #4294967295
 800a8a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8a4:	f10a 0a01 	add.w	sl, sl, #1
 800a8a8:	9304      	str	r3, [sp, #16]
 800a8aa:	9307      	str	r3, [sp, #28]
 800a8ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8b2:	4654      	mov	r4, sl
 800a8b4:	2205      	movs	r2, #5
 800a8b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ba:	4853      	ldr	r0, [pc, #332]	@ (800aa08 <_vfiprintf_r+0x21c>)
 800a8bc:	f7f5 fcb0 	bl	8000220 <memchr>
 800a8c0:	9a04      	ldr	r2, [sp, #16]
 800a8c2:	b9d8      	cbnz	r0, 800a8fc <_vfiprintf_r+0x110>
 800a8c4:	06d1      	lsls	r1, r2, #27
 800a8c6:	bf44      	itt	mi
 800a8c8:	2320      	movmi	r3, #32
 800a8ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8ce:	0713      	lsls	r3, r2, #28
 800a8d0:	bf44      	itt	mi
 800a8d2:	232b      	movmi	r3, #43	@ 0x2b
 800a8d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a8dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8de:	d015      	beq.n	800a90c <_vfiprintf_r+0x120>
 800a8e0:	9a07      	ldr	r2, [sp, #28]
 800a8e2:	4654      	mov	r4, sl
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	f04f 0c0a 	mov.w	ip, #10
 800a8ea:	4621      	mov	r1, r4
 800a8ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8f0:	3b30      	subs	r3, #48	@ 0x30
 800a8f2:	2b09      	cmp	r3, #9
 800a8f4:	d94b      	bls.n	800a98e <_vfiprintf_r+0x1a2>
 800a8f6:	b1b0      	cbz	r0, 800a926 <_vfiprintf_r+0x13a>
 800a8f8:	9207      	str	r2, [sp, #28]
 800a8fa:	e014      	b.n	800a926 <_vfiprintf_r+0x13a>
 800a8fc:	eba0 0308 	sub.w	r3, r0, r8
 800a900:	fa09 f303 	lsl.w	r3, r9, r3
 800a904:	4313      	orrs	r3, r2
 800a906:	9304      	str	r3, [sp, #16]
 800a908:	46a2      	mov	sl, r4
 800a90a:	e7d2      	b.n	800a8b2 <_vfiprintf_r+0xc6>
 800a90c:	9b03      	ldr	r3, [sp, #12]
 800a90e:	1d19      	adds	r1, r3, #4
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	9103      	str	r1, [sp, #12]
 800a914:	2b00      	cmp	r3, #0
 800a916:	bfbb      	ittet	lt
 800a918:	425b      	neglt	r3, r3
 800a91a:	f042 0202 	orrlt.w	r2, r2, #2
 800a91e:	9307      	strge	r3, [sp, #28]
 800a920:	9307      	strlt	r3, [sp, #28]
 800a922:	bfb8      	it	lt
 800a924:	9204      	strlt	r2, [sp, #16]
 800a926:	7823      	ldrb	r3, [r4, #0]
 800a928:	2b2e      	cmp	r3, #46	@ 0x2e
 800a92a:	d10a      	bne.n	800a942 <_vfiprintf_r+0x156>
 800a92c:	7863      	ldrb	r3, [r4, #1]
 800a92e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a930:	d132      	bne.n	800a998 <_vfiprintf_r+0x1ac>
 800a932:	9b03      	ldr	r3, [sp, #12]
 800a934:	1d1a      	adds	r2, r3, #4
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	9203      	str	r2, [sp, #12]
 800a93a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a93e:	3402      	adds	r4, #2
 800a940:	9305      	str	r3, [sp, #20]
 800a942:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aa18 <_vfiprintf_r+0x22c>
 800a946:	7821      	ldrb	r1, [r4, #0]
 800a948:	2203      	movs	r2, #3
 800a94a:	4650      	mov	r0, sl
 800a94c:	f7f5 fc68 	bl	8000220 <memchr>
 800a950:	b138      	cbz	r0, 800a962 <_vfiprintf_r+0x176>
 800a952:	9b04      	ldr	r3, [sp, #16]
 800a954:	eba0 000a 	sub.w	r0, r0, sl
 800a958:	2240      	movs	r2, #64	@ 0x40
 800a95a:	4082      	lsls	r2, r0
 800a95c:	4313      	orrs	r3, r2
 800a95e:	3401      	adds	r4, #1
 800a960:	9304      	str	r3, [sp, #16]
 800a962:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a966:	4829      	ldr	r0, [pc, #164]	@ (800aa0c <_vfiprintf_r+0x220>)
 800a968:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a96c:	2206      	movs	r2, #6
 800a96e:	f7f5 fc57 	bl	8000220 <memchr>
 800a972:	2800      	cmp	r0, #0
 800a974:	d03f      	beq.n	800a9f6 <_vfiprintf_r+0x20a>
 800a976:	4b26      	ldr	r3, [pc, #152]	@ (800aa10 <_vfiprintf_r+0x224>)
 800a978:	bb1b      	cbnz	r3, 800a9c2 <_vfiprintf_r+0x1d6>
 800a97a:	9b03      	ldr	r3, [sp, #12]
 800a97c:	3307      	adds	r3, #7
 800a97e:	f023 0307 	bic.w	r3, r3, #7
 800a982:	3308      	adds	r3, #8
 800a984:	9303      	str	r3, [sp, #12]
 800a986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a988:	443b      	add	r3, r7
 800a98a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a98c:	e76a      	b.n	800a864 <_vfiprintf_r+0x78>
 800a98e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a992:	460c      	mov	r4, r1
 800a994:	2001      	movs	r0, #1
 800a996:	e7a8      	b.n	800a8ea <_vfiprintf_r+0xfe>
 800a998:	2300      	movs	r3, #0
 800a99a:	3401      	adds	r4, #1
 800a99c:	9305      	str	r3, [sp, #20]
 800a99e:	4619      	mov	r1, r3
 800a9a0:	f04f 0c0a 	mov.w	ip, #10
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9aa:	3a30      	subs	r2, #48	@ 0x30
 800a9ac:	2a09      	cmp	r2, #9
 800a9ae:	d903      	bls.n	800a9b8 <_vfiprintf_r+0x1cc>
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d0c6      	beq.n	800a942 <_vfiprintf_r+0x156>
 800a9b4:	9105      	str	r1, [sp, #20]
 800a9b6:	e7c4      	b.n	800a942 <_vfiprintf_r+0x156>
 800a9b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9bc:	4604      	mov	r4, r0
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e7f0      	b.n	800a9a4 <_vfiprintf_r+0x1b8>
 800a9c2:	ab03      	add	r3, sp, #12
 800a9c4:	9300      	str	r3, [sp, #0]
 800a9c6:	462a      	mov	r2, r5
 800a9c8:	4b12      	ldr	r3, [pc, #72]	@ (800aa14 <_vfiprintf_r+0x228>)
 800a9ca:	a904      	add	r1, sp, #16
 800a9cc:	4630      	mov	r0, r6
 800a9ce:	f7fb febb 	bl	8006748 <_printf_float>
 800a9d2:	4607      	mov	r7, r0
 800a9d4:	1c78      	adds	r0, r7, #1
 800a9d6:	d1d6      	bne.n	800a986 <_vfiprintf_r+0x19a>
 800a9d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9da:	07d9      	lsls	r1, r3, #31
 800a9dc:	d405      	bmi.n	800a9ea <_vfiprintf_r+0x1fe>
 800a9de:	89ab      	ldrh	r3, [r5, #12]
 800a9e0:	059a      	lsls	r2, r3, #22
 800a9e2:	d402      	bmi.n	800a9ea <_vfiprintf_r+0x1fe>
 800a9e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9e6:	f7fc fe1f 	bl	8007628 <__retarget_lock_release_recursive>
 800a9ea:	89ab      	ldrh	r3, [r5, #12]
 800a9ec:	065b      	lsls	r3, r3, #25
 800a9ee:	f53f af1f 	bmi.w	800a830 <_vfiprintf_r+0x44>
 800a9f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a9f4:	e71e      	b.n	800a834 <_vfiprintf_r+0x48>
 800a9f6:	ab03      	add	r3, sp, #12
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	462a      	mov	r2, r5
 800a9fc:	4b05      	ldr	r3, [pc, #20]	@ (800aa14 <_vfiprintf_r+0x228>)
 800a9fe:	a904      	add	r1, sp, #16
 800aa00:	4630      	mov	r0, r6
 800aa02:	f7fc f939 	bl	8006c78 <_printf_i>
 800aa06:	e7e4      	b.n	800a9d2 <_vfiprintf_r+0x1e6>
 800aa08:	0800b0a9 	.word	0x0800b0a9
 800aa0c:	0800b0b3 	.word	0x0800b0b3
 800aa10:	08006749 	.word	0x08006749
 800aa14:	0800a7c9 	.word	0x0800a7c9
 800aa18:	0800b0af 	.word	0x0800b0af

0800aa1c <__swbuf_r>:
 800aa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1e:	460e      	mov	r6, r1
 800aa20:	4614      	mov	r4, r2
 800aa22:	4605      	mov	r5, r0
 800aa24:	b118      	cbz	r0, 800aa2e <__swbuf_r+0x12>
 800aa26:	6a03      	ldr	r3, [r0, #32]
 800aa28:	b90b      	cbnz	r3, 800aa2e <__swbuf_r+0x12>
 800aa2a:	f7fc fce5 	bl	80073f8 <__sinit>
 800aa2e:	69a3      	ldr	r3, [r4, #24]
 800aa30:	60a3      	str	r3, [r4, #8]
 800aa32:	89a3      	ldrh	r3, [r4, #12]
 800aa34:	071a      	lsls	r2, r3, #28
 800aa36:	d501      	bpl.n	800aa3c <__swbuf_r+0x20>
 800aa38:	6923      	ldr	r3, [r4, #16]
 800aa3a:	b943      	cbnz	r3, 800aa4e <__swbuf_r+0x32>
 800aa3c:	4621      	mov	r1, r4
 800aa3e:	4628      	mov	r0, r5
 800aa40:	f000 f82a 	bl	800aa98 <__swsetup_r>
 800aa44:	b118      	cbz	r0, 800aa4e <__swbuf_r+0x32>
 800aa46:	f04f 37ff 	mov.w	r7, #4294967295
 800aa4a:	4638      	mov	r0, r7
 800aa4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	6922      	ldr	r2, [r4, #16]
 800aa52:	1a98      	subs	r0, r3, r2
 800aa54:	6963      	ldr	r3, [r4, #20]
 800aa56:	b2f6      	uxtb	r6, r6
 800aa58:	4283      	cmp	r3, r0
 800aa5a:	4637      	mov	r7, r6
 800aa5c:	dc05      	bgt.n	800aa6a <__swbuf_r+0x4e>
 800aa5e:	4621      	mov	r1, r4
 800aa60:	4628      	mov	r0, r5
 800aa62:	f7ff fa47 	bl	8009ef4 <_fflush_r>
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d1ed      	bne.n	800aa46 <__swbuf_r+0x2a>
 800aa6a:	68a3      	ldr	r3, [r4, #8]
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	60a3      	str	r3, [r4, #8]
 800aa70:	6823      	ldr	r3, [r4, #0]
 800aa72:	1c5a      	adds	r2, r3, #1
 800aa74:	6022      	str	r2, [r4, #0]
 800aa76:	701e      	strb	r6, [r3, #0]
 800aa78:	6962      	ldr	r2, [r4, #20]
 800aa7a:	1c43      	adds	r3, r0, #1
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d004      	beq.n	800aa8a <__swbuf_r+0x6e>
 800aa80:	89a3      	ldrh	r3, [r4, #12]
 800aa82:	07db      	lsls	r3, r3, #31
 800aa84:	d5e1      	bpl.n	800aa4a <__swbuf_r+0x2e>
 800aa86:	2e0a      	cmp	r6, #10
 800aa88:	d1df      	bne.n	800aa4a <__swbuf_r+0x2e>
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	f7ff fa31 	bl	8009ef4 <_fflush_r>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d0d9      	beq.n	800aa4a <__swbuf_r+0x2e>
 800aa96:	e7d6      	b.n	800aa46 <__swbuf_r+0x2a>

0800aa98 <__swsetup_r>:
 800aa98:	b538      	push	{r3, r4, r5, lr}
 800aa9a:	4b29      	ldr	r3, [pc, #164]	@ (800ab40 <__swsetup_r+0xa8>)
 800aa9c:	4605      	mov	r5, r0
 800aa9e:	6818      	ldr	r0, [r3, #0]
 800aaa0:	460c      	mov	r4, r1
 800aaa2:	b118      	cbz	r0, 800aaac <__swsetup_r+0x14>
 800aaa4:	6a03      	ldr	r3, [r0, #32]
 800aaa6:	b90b      	cbnz	r3, 800aaac <__swsetup_r+0x14>
 800aaa8:	f7fc fca6 	bl	80073f8 <__sinit>
 800aaac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aab0:	0719      	lsls	r1, r3, #28
 800aab2:	d422      	bmi.n	800aafa <__swsetup_r+0x62>
 800aab4:	06da      	lsls	r2, r3, #27
 800aab6:	d407      	bmi.n	800aac8 <__swsetup_r+0x30>
 800aab8:	2209      	movs	r2, #9
 800aaba:	602a      	str	r2, [r5, #0]
 800aabc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aac0:	81a3      	strh	r3, [r4, #12]
 800aac2:	f04f 30ff 	mov.w	r0, #4294967295
 800aac6:	e033      	b.n	800ab30 <__swsetup_r+0x98>
 800aac8:	0758      	lsls	r0, r3, #29
 800aaca:	d512      	bpl.n	800aaf2 <__swsetup_r+0x5a>
 800aacc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aace:	b141      	cbz	r1, 800aae2 <__swsetup_r+0x4a>
 800aad0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aad4:	4299      	cmp	r1, r3
 800aad6:	d002      	beq.n	800aade <__swsetup_r+0x46>
 800aad8:	4628      	mov	r0, r5
 800aada:	f7fd fbf9 	bl	80082d0 <_free_r>
 800aade:	2300      	movs	r3, #0
 800aae0:	6363      	str	r3, [r4, #52]	@ 0x34
 800aae2:	89a3      	ldrh	r3, [r4, #12]
 800aae4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aae8:	81a3      	strh	r3, [r4, #12]
 800aaea:	2300      	movs	r3, #0
 800aaec:	6063      	str	r3, [r4, #4]
 800aaee:	6923      	ldr	r3, [r4, #16]
 800aaf0:	6023      	str	r3, [r4, #0]
 800aaf2:	89a3      	ldrh	r3, [r4, #12]
 800aaf4:	f043 0308 	orr.w	r3, r3, #8
 800aaf8:	81a3      	strh	r3, [r4, #12]
 800aafa:	6923      	ldr	r3, [r4, #16]
 800aafc:	b94b      	cbnz	r3, 800ab12 <__swsetup_r+0x7a>
 800aafe:	89a3      	ldrh	r3, [r4, #12]
 800ab00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab08:	d003      	beq.n	800ab12 <__swsetup_r+0x7a>
 800ab0a:	4621      	mov	r1, r4
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	f000 f883 	bl	800ac18 <__smakebuf_r>
 800ab12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab16:	f013 0201 	ands.w	r2, r3, #1
 800ab1a:	d00a      	beq.n	800ab32 <__swsetup_r+0x9a>
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	60a2      	str	r2, [r4, #8]
 800ab20:	6962      	ldr	r2, [r4, #20]
 800ab22:	4252      	negs	r2, r2
 800ab24:	61a2      	str	r2, [r4, #24]
 800ab26:	6922      	ldr	r2, [r4, #16]
 800ab28:	b942      	cbnz	r2, 800ab3c <__swsetup_r+0xa4>
 800ab2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab2e:	d1c5      	bne.n	800aabc <__swsetup_r+0x24>
 800ab30:	bd38      	pop	{r3, r4, r5, pc}
 800ab32:	0799      	lsls	r1, r3, #30
 800ab34:	bf58      	it	pl
 800ab36:	6962      	ldrpl	r2, [r4, #20]
 800ab38:	60a2      	str	r2, [r4, #8]
 800ab3a:	e7f4      	b.n	800ab26 <__swsetup_r+0x8e>
 800ab3c:	2000      	movs	r0, #0
 800ab3e:	e7f7      	b.n	800ab30 <__swsetup_r+0x98>
 800ab40:	20000018 	.word	0x20000018

0800ab44 <_raise_r>:
 800ab44:	291f      	cmp	r1, #31
 800ab46:	b538      	push	{r3, r4, r5, lr}
 800ab48:	4605      	mov	r5, r0
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	d904      	bls.n	800ab58 <_raise_r+0x14>
 800ab4e:	2316      	movs	r3, #22
 800ab50:	6003      	str	r3, [r0, #0]
 800ab52:	f04f 30ff 	mov.w	r0, #4294967295
 800ab56:	bd38      	pop	{r3, r4, r5, pc}
 800ab58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ab5a:	b112      	cbz	r2, 800ab62 <_raise_r+0x1e>
 800ab5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab60:	b94b      	cbnz	r3, 800ab76 <_raise_r+0x32>
 800ab62:	4628      	mov	r0, r5
 800ab64:	f000 f830 	bl	800abc8 <_getpid_r>
 800ab68:	4622      	mov	r2, r4
 800ab6a:	4601      	mov	r1, r0
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab72:	f000 b817 	b.w	800aba4 <_kill_r>
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d00a      	beq.n	800ab90 <_raise_r+0x4c>
 800ab7a:	1c59      	adds	r1, r3, #1
 800ab7c:	d103      	bne.n	800ab86 <_raise_r+0x42>
 800ab7e:	2316      	movs	r3, #22
 800ab80:	6003      	str	r3, [r0, #0]
 800ab82:	2001      	movs	r0, #1
 800ab84:	e7e7      	b.n	800ab56 <_raise_r+0x12>
 800ab86:	2100      	movs	r1, #0
 800ab88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	4798      	blx	r3
 800ab90:	2000      	movs	r0, #0
 800ab92:	e7e0      	b.n	800ab56 <_raise_r+0x12>

0800ab94 <raise>:
 800ab94:	4b02      	ldr	r3, [pc, #8]	@ (800aba0 <raise+0xc>)
 800ab96:	4601      	mov	r1, r0
 800ab98:	6818      	ldr	r0, [r3, #0]
 800ab9a:	f7ff bfd3 	b.w	800ab44 <_raise_r>
 800ab9e:	bf00      	nop
 800aba0:	20000018 	.word	0x20000018

0800aba4 <_kill_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	4d07      	ldr	r5, [pc, #28]	@ (800abc4 <_kill_r+0x20>)
 800aba8:	2300      	movs	r3, #0
 800abaa:	4604      	mov	r4, r0
 800abac:	4608      	mov	r0, r1
 800abae:	4611      	mov	r1, r2
 800abb0:	602b      	str	r3, [r5, #0]
 800abb2:	f7f6 fd16 	bl	80015e2 <_kill>
 800abb6:	1c43      	adds	r3, r0, #1
 800abb8:	d102      	bne.n	800abc0 <_kill_r+0x1c>
 800abba:	682b      	ldr	r3, [r5, #0]
 800abbc:	b103      	cbz	r3, 800abc0 <_kill_r+0x1c>
 800abbe:	6023      	str	r3, [r4, #0]
 800abc0:	bd38      	pop	{r3, r4, r5, pc}
 800abc2:	bf00      	nop
 800abc4:	20000660 	.word	0x20000660

0800abc8 <_getpid_r>:
 800abc8:	f7f6 bd03 	b.w	80015d2 <_getpid>

0800abcc <__swhatbuf_r>:
 800abcc:	b570      	push	{r4, r5, r6, lr}
 800abce:	460c      	mov	r4, r1
 800abd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abd4:	2900      	cmp	r1, #0
 800abd6:	b096      	sub	sp, #88	@ 0x58
 800abd8:	4615      	mov	r5, r2
 800abda:	461e      	mov	r6, r3
 800abdc:	da0d      	bge.n	800abfa <__swhatbuf_r+0x2e>
 800abde:	89a3      	ldrh	r3, [r4, #12]
 800abe0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800abe4:	f04f 0100 	mov.w	r1, #0
 800abe8:	bf14      	ite	ne
 800abea:	2340      	movne	r3, #64	@ 0x40
 800abec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800abf0:	2000      	movs	r0, #0
 800abf2:	6031      	str	r1, [r6, #0]
 800abf4:	602b      	str	r3, [r5, #0]
 800abf6:	b016      	add	sp, #88	@ 0x58
 800abf8:	bd70      	pop	{r4, r5, r6, pc}
 800abfa:	466a      	mov	r2, sp
 800abfc:	f000 f848 	bl	800ac90 <_fstat_r>
 800ac00:	2800      	cmp	r0, #0
 800ac02:	dbec      	blt.n	800abde <__swhatbuf_r+0x12>
 800ac04:	9901      	ldr	r1, [sp, #4]
 800ac06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac0e:	4259      	negs	r1, r3
 800ac10:	4159      	adcs	r1, r3
 800ac12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac16:	e7eb      	b.n	800abf0 <__swhatbuf_r+0x24>

0800ac18 <__smakebuf_r>:
 800ac18:	898b      	ldrh	r3, [r1, #12]
 800ac1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac1c:	079d      	lsls	r5, r3, #30
 800ac1e:	4606      	mov	r6, r0
 800ac20:	460c      	mov	r4, r1
 800ac22:	d507      	bpl.n	800ac34 <__smakebuf_r+0x1c>
 800ac24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac28:	6023      	str	r3, [r4, #0]
 800ac2a:	6123      	str	r3, [r4, #16]
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	6163      	str	r3, [r4, #20]
 800ac30:	b003      	add	sp, #12
 800ac32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac34:	ab01      	add	r3, sp, #4
 800ac36:	466a      	mov	r2, sp
 800ac38:	f7ff ffc8 	bl	800abcc <__swhatbuf_r>
 800ac3c:	9f00      	ldr	r7, [sp, #0]
 800ac3e:	4605      	mov	r5, r0
 800ac40:	4639      	mov	r1, r7
 800ac42:	4630      	mov	r0, r6
 800ac44:	f7fd fbb8 	bl	80083b8 <_malloc_r>
 800ac48:	b948      	cbnz	r0, 800ac5e <__smakebuf_r+0x46>
 800ac4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac4e:	059a      	lsls	r2, r3, #22
 800ac50:	d4ee      	bmi.n	800ac30 <__smakebuf_r+0x18>
 800ac52:	f023 0303 	bic.w	r3, r3, #3
 800ac56:	f043 0302 	orr.w	r3, r3, #2
 800ac5a:	81a3      	strh	r3, [r4, #12]
 800ac5c:	e7e2      	b.n	800ac24 <__smakebuf_r+0xc>
 800ac5e:	89a3      	ldrh	r3, [r4, #12]
 800ac60:	6020      	str	r0, [r4, #0]
 800ac62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac66:	81a3      	strh	r3, [r4, #12]
 800ac68:	9b01      	ldr	r3, [sp, #4]
 800ac6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac6e:	b15b      	cbz	r3, 800ac88 <__smakebuf_r+0x70>
 800ac70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac74:	4630      	mov	r0, r6
 800ac76:	f000 f81d 	bl	800acb4 <_isatty_r>
 800ac7a:	b128      	cbz	r0, 800ac88 <__smakebuf_r+0x70>
 800ac7c:	89a3      	ldrh	r3, [r4, #12]
 800ac7e:	f023 0303 	bic.w	r3, r3, #3
 800ac82:	f043 0301 	orr.w	r3, r3, #1
 800ac86:	81a3      	strh	r3, [r4, #12]
 800ac88:	89a3      	ldrh	r3, [r4, #12]
 800ac8a:	431d      	orrs	r5, r3
 800ac8c:	81a5      	strh	r5, [r4, #12]
 800ac8e:	e7cf      	b.n	800ac30 <__smakebuf_r+0x18>

0800ac90 <_fstat_r>:
 800ac90:	b538      	push	{r3, r4, r5, lr}
 800ac92:	4d07      	ldr	r5, [pc, #28]	@ (800acb0 <_fstat_r+0x20>)
 800ac94:	2300      	movs	r3, #0
 800ac96:	4604      	mov	r4, r0
 800ac98:	4608      	mov	r0, r1
 800ac9a:	4611      	mov	r1, r2
 800ac9c:	602b      	str	r3, [r5, #0]
 800ac9e:	f7f6 fd00 	bl	80016a2 <_fstat>
 800aca2:	1c43      	adds	r3, r0, #1
 800aca4:	d102      	bne.n	800acac <_fstat_r+0x1c>
 800aca6:	682b      	ldr	r3, [r5, #0]
 800aca8:	b103      	cbz	r3, 800acac <_fstat_r+0x1c>
 800acaa:	6023      	str	r3, [r4, #0]
 800acac:	bd38      	pop	{r3, r4, r5, pc}
 800acae:	bf00      	nop
 800acb0:	20000660 	.word	0x20000660

0800acb4 <_isatty_r>:
 800acb4:	b538      	push	{r3, r4, r5, lr}
 800acb6:	4d06      	ldr	r5, [pc, #24]	@ (800acd0 <_isatty_r+0x1c>)
 800acb8:	2300      	movs	r3, #0
 800acba:	4604      	mov	r4, r0
 800acbc:	4608      	mov	r0, r1
 800acbe:	602b      	str	r3, [r5, #0]
 800acc0:	f7f6 fcff 	bl	80016c2 <_isatty>
 800acc4:	1c43      	adds	r3, r0, #1
 800acc6:	d102      	bne.n	800acce <_isatty_r+0x1a>
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	b103      	cbz	r3, 800acce <_isatty_r+0x1a>
 800accc:	6023      	str	r3, [r4, #0]
 800acce:	bd38      	pop	{r3, r4, r5, pc}
 800acd0:	20000660 	.word	0x20000660

0800acd4 <_init>:
 800acd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd6:	bf00      	nop
 800acd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acda:	bc08      	pop	{r3}
 800acdc:	469e      	mov	lr, r3
 800acde:	4770      	bx	lr

0800ace0 <_fini>:
 800ace0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace2:	bf00      	nop
 800ace4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ace6:	bc08      	pop	{r3}
 800ace8:	469e      	mov	lr, r3
 800acea:	4770      	bx	lr
